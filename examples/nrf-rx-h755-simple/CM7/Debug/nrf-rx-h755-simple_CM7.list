
nrf-rx-h755-simple_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bf0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08007e90  08007e90  00017e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080a8  080080a8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080080a8  080080a8  000180a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080b0  080080b0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080b0  080080b0  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080b4  080080b4  000180b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  24000000  080080b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2400006c  08008124  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400030c  08008124  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000134ee  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ea  00000000  00000000  000335cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00035cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b20  00000000  00000000  00036b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003af75  00000000  00000000  00037668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e42  00000000  00000000  000725dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00180b59  00000000  00000000  0008441f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004428  00000000  00000000  00204f78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  002093a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007e78 	.word	0x08007e78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08007e78 	.word	0x08007e78

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000680:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <SystemInit+0xfc>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a3c      	ldr	r2, [pc, #240]	; (8000778 <SystemInit+0xfc>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <SystemInit+0xfc>)
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	4a38      	ldr	r2, [pc, #224]	; (8000778 <SystemInit+0xfc>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800069c:	4b37      	ldr	r3, [pc, #220]	; (800077c <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	2b06      	cmp	r3, #6
 80006a6:	d807      	bhi.n	80006b8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a8:	4b34      	ldr	r3, [pc, #208]	; (800077c <SystemInit+0x100>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 030f 	bic.w	r3, r3, #15
 80006b0:	4a32      	ldr	r2, [pc, #200]	; (800077c <SystemInit+0x100>)
 80006b2:	f043 0307 	orr.w	r3, r3, #7
 80006b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <SystemInit+0x104>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a30      	ldr	r2, [pc, #192]	; (8000780 <SystemInit+0x104>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <SystemInit+0x104>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <SystemInit+0x104>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	492c      	ldr	r1, [pc, #176]	; (8000780 <SystemInit+0x104>)
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <SystemInit+0x108>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <SystemInit+0x100>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f023 030f 	bic.w	r3, r3, #15
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <SystemInit+0x100>)
 80006ec:	f043 0307 	orr.w	r3, r3, #7
 80006f0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <SystemInit+0x104>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <SystemInit+0x104>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <SystemInit+0x104>)
 8000706:	4a20      	ldr	r2, [pc, #128]	; (8000788 <SystemInit+0x10c>)
 8000708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <SystemInit+0x104>)
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <SystemInit+0x110>)
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <SystemInit+0x104>)
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <SystemInit+0x114>)
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <SystemInit+0x104>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <SystemInit+0x114>)
 8000720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <SystemInit+0x104>)
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <SystemInit+0x114>)
 800072c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <SystemInit+0x104>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <SystemInit+0x104>)
 800073a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <SystemInit+0x104>)
 8000742:	2200      	movs	r2, #0
 8000744:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <SystemInit+0x118>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <SystemInit+0x118>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <SystemInit+0x11c>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x120>)
 8000758:	4013      	ands	r3, r2
 800075a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075e:	d202      	bcs.n	8000766 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <SystemInit+0x124>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <SystemInit+0x128>)
 8000768:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800076c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	52002000 	.word	0x52002000
 8000780:	58024400 	.word	0x58024400
 8000784:	eaf6ed7f 	.word	0xeaf6ed7f
 8000788:	02020200 	.word	0x02020200
 800078c:	01ff0000 	.word	0x01ff0000
 8000790:	01010280 	.word	0x01010280
 8000794:	580000c0 	.word	0x580000c0
 8000798:	5c001000 	.word	0x5c001000
 800079c:	ffff0000 	.word	0xffff0000
 80007a0:	51008108 	.word	0x51008108
 80007a4:	52004000 	.word	0x52004000

080007a8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007b6:	2201      	movs	r2, #1
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <__io_putchar+0x20>)
 80007ba:	f005 fa7a 	bl	8005cb2 <HAL_UART_Transmit>
  return ch;
 80007be:	687b      	ldr	r3, [r7, #4]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	24000110 	.word	0x24000110

080007cc <HAL_GPIO_EXTI_Callback>:
// END REDIRECT

// This is ran when user button is pressed
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BTN_USER_Pin) {
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007dc:	d103      	bne.n	80007e6 <HAL_GPIO_EXTI_Callback+0x1a>
    NRF_PrintStatus();
 80007de:	f000 fd31 	bl	8001244 <NRF_PrintStatus>
    NRF_PrintFIFOStatus();
 80007e2:	f000 fd9d 	bl	8001320 <NRF_PrintFIFOStatus>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <runExample>:

// Configure the device and wait for packages forever.
void runExample() {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af02      	add	r7, sp, #8
  printf("\r\nStarting up simple RX H7...\r\n");
 80007f6:	482e      	ldr	r0, [pc, #184]	; (80008b0 <runExample+0xc0>)
 80007f8:	f006 fca0 	bl	800713c <puts>

  // Initialise the library and make the device enter standby-I mode
  if(NRF_Init(&hspi1, NRF_CSN_GPIO_Port, NRF_CSN_Pin, NRF_CE_GPIO_Port, NRF_CE_Pin) != NRF_OK) {
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <runExample+0xc4>)
 8000802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000806:	492c      	ldr	r1, [pc, #176]	; (80008b8 <runExample+0xc8>)
 8000808:	482c      	ldr	r0, [pc, #176]	; (80008bc <runExample+0xcc>)
 800080a:	f000 faa9 	bl	8000d60 <NRF_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d004      	beq.n	800081e <runExample+0x2e>
    printf("Couldn't initialise device, are pins correctly connected?\r\n");
 8000814:	482a      	ldr	r0, [pc, #168]	; (80008c0 <runExample+0xd0>)
 8000816:	f006 fc91 	bl	800713c <puts>
    Error_Handler();
 800081a:	f000 fa5b 	bl	8000cd4 <Error_Handler>
  }

  // Resets all registers but keeps the device in standby-I mode
  NRF_Reset();
 800081e:	f000 fc7b 	bl	8001118 <NRF_Reset>

  // Set the recieving adress.
  uint8_t address[5] = {1,2,3,4,5};
 8000822:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <runExample+0xd4>)
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800082c:	6018      	str	r0, [r3, #0]
 800082e:	3304      	adds	r3, #4
 8000830:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2205      	movs	r2, #5
 8000838:	4619      	mov	r1, r3
 800083a:	200a      	movs	r0, #10
 800083c:	f000 fb9c 	bl	8000f78 <NRF_WriteRegister>

  // Set the datawidth of the received data
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0, 10);
 8000840:	210a      	movs	r1, #10
 8000842:	2011      	movs	r0, #17
 8000844:	f000 fbae 	bl	8000fa4 <NRF_WriteRegisterByte>

  // Enter RX mode
  NRF_EnterMode(NRF_MODE_RX);
 8000848:	2002      	movs	r0, #2
 800084a:	f000 fb47 	bl	8000edc <NRF_EnterMode>

  // Wait for data
  uint8_t payload[10];
  uint8_t STATUS_REGISTER_RX_DR_BIT = 6;
 800084e:	2306      	movs	r3, #6
 8000850:	74fb      	strb	r3, [r7, #19]
  uint8_t status;
  printf("Waiting for data...\r\n");
 8000852:	481d      	ldr	r0, [pc, #116]	; (80008c8 <runExample+0xd8>)
 8000854:	f006 fc72 	bl	800713c <puts>
  for(;;) {
    status = NRF_ReadStatus();
 8000858:	f000 fc42 	bl	80010e0 <NRF_ReadStatus>
 800085c:	4603      	mov	r3, r0
 800085e:	74bb      	strb	r3, [r7, #18]
    if (status & (1<<STATUS_REGISTER_RX_DR_BIT)) {
 8000860:	7cba      	ldrb	r2, [r7, #18]
 8000862:	7cfb      	ldrb	r3, [r7, #19]
 8000864:	fa42 f303 	asr.w	r3, r2, r3
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0f3      	beq.n	8000858 <runExample+0x68>
      // We've received data
      NRF_ReadPayload(payload, 10);
 8000870:	463b      	mov	r3, r7
 8000872:	210a      	movs	r1, #10
 8000874:	4618      	mov	r0, r3
 8000876:	f000 fb6e 	bl	8000f56 <NRF_ReadPayload>
      printf("Payload: ");
 800087a:	4814      	ldr	r0, [pc, #80]	; (80008cc <runExample+0xdc>)
 800087c:	f006 fbf0 	bl	8007060 <iprintf>
      for (int i = 0; i < 10; i++) {
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
 8000884:	e009      	b.n	800089a <runExample+0xaa>
        printf("%c", payload[i]);
 8000886:	463a      	mov	r2, r7
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	4413      	add	r3, r2
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f006 fbf8 	bl	8007084 <putchar>
      for (int i = 0; i < 10; i++) {
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	3301      	adds	r3, #1
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	2b09      	cmp	r3, #9
 800089e:	ddf2      	ble.n	8000886 <runExample+0x96>
      }
      printf("\r\n");
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <runExample+0xe0>)
 80008a2:	f006 fc4b 	bl	800713c <puts>

      // Reset RX_DR
      NRF_SetRegisterBit(NRF_REG_STATUS, 6);
 80008a6:	2106      	movs	r1, #6
 80008a8:	2007      	movs	r0, #7
 80008aa:	f000 fb91 	bl	8000fd0 <NRF_SetRegisterBit>
    status = NRF_ReadStatus();
 80008ae:	e7d3      	b.n	8000858 <runExample+0x68>
 80008b0:	08007e90 	.word	0x08007e90
 80008b4:	58020800 	.word	0x58020800
 80008b8:	58020400 	.word	0x58020400
 80008bc:	24000088 	.word	0x24000088
 80008c0:	08007eb0 	.word	0x08007eb0
 80008c4:	08007f14 	.word	0x08007f14
 80008c8:	08007eec 	.word	0x08007eec
 80008cc:	08007f04 	.word	0x08007f04
 80008d0:	08007f10 	.word	0x08007f10

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008de:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008e0:	bf00      	nop
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <main+0x9c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d004      	beq.n	80008f8 <main+0x24>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	1e5a      	subs	r2, r3, #1
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	dcf4      	bgt.n	80008e2 <main+0xe>
  if ( timeout < 0 )
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	da01      	bge.n	8000902 <main+0x2e>
  {
  Error_Handler();
 80008fe:	f000 f9e9 	bl	8000cd4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000902:	f000 ff69 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000906:	f000 f835 	bl	8000974 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <main+0x9c>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000910:	4a17      	ldr	r2, [pc, #92]	; (8000970 <main+0x9c>)
 8000912:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <main+0x9c>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000928:	2000      	movs	r0, #0
 800092a:	f001 fb23 	bl	8001f74 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800092e:	2100      	movs	r1, #0
 8000930:	2000      	movs	r0, #0
 8000932:	f001 fb39 	bl	8001fa8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800093a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800093c:	bf00      	nop
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <main+0x9c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000946:	2b00      	cmp	r3, #0
 8000948:	d104      	bne.n	8000954 <main+0x80>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	1e5a      	subs	r2, r3, #1
 800094e:	607a      	str	r2, [r7, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	dcf4      	bgt.n	800093e <main+0x6a>
if ( timeout < 0 )
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	da01      	bge.n	800095e <main+0x8a>
{
Error_Handler();
 800095a:	f000 f9bb 	bl	8000cd4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095e:	f000 f929 	bl	8000bb4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000962:	f000 f885 	bl	8000a70 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000966:	f000 f8d9 	bl	8000b1c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  runExample();
 800096a:	f7ff ff41 	bl	80007f0 <runExample>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800096e:	e7fe      	b.n	800096e <main+0x9a>
 8000970:	58024400 	.word	0x58024400

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b09c      	sub	sp, #112	; 0x70
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	224c      	movs	r2, #76	; 0x4c
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f006 fcba 	bl	80072fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2220      	movs	r2, #32
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f006 fcb4 	bl	80072fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000994:	2004      	movs	r0, #4
 8000996:	f001 fb1b 	bl	8001fd0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <SystemClock_Config+0xf4>)
 80009a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a2:	4a31      	ldr	r2, [pc, #196]	; (8000a68 <SystemClock_Config+0xf4>)
 80009a4:	f023 0301 	bic.w	r3, r3, #1
 80009a8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009aa:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <SystemClock_Config+0xf4>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <SystemClock_Config+0xf8>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009bc:	4a2b      	ldr	r2, [pc, #172]	; (8000a6c <SystemClock_Config+0xf8>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <SystemClock_Config+0xf8>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d0:	bf00      	nop
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <SystemClock_Config+0xf8>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009de:	d1f8      	bne.n	80009d2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e0:	2302      	movs	r3, #2
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009e4:	2301      	movs	r3, #1
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e8:	2340      	movs	r3, #64	; 0x40
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f0:	2300      	movs	r3, #0
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f4:	2304      	movs	r3, #4
 80009f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80009f8:	2309      	movs	r3, #9
 80009fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a08:	230c      	movs	r3, #12
 8000a0a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000a10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 fb32 	bl	8002084 <HAL_RCC_OscConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a26:	f000 f955 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2a:	233f      	movs	r3, #63	; 0x3f
 8000a2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a3e:	2340      	movs	r3, #64	; 0x40
 8000a40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 ff72 	bl	8002938 <HAL_RCC_ClockConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a5a:	f000 f93b 	bl	8000cd4 <Error_Handler>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3770      	adds	r7, #112	; 0x70
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	58000400 	.word	0x58000400
 8000a6c:	58024800 	.word	0x58024800

08000a70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a74:	4b27      	ldr	r3, [pc, #156]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000a76:	4a28      	ldr	r2, [pc, #160]	; (8000b18 <MX_SPI1_Init+0xa8>)
 8000a78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a7a:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000a7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a82:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000a8a:	2207      	movs	r2, #7
 8000a8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000a9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000aa0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000aa2:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000ac4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ad0:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_SPI1_Init+0xa4>)
 8000b02:	f004 f8d1 	bl	8004ca8 <HAL_SPI_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000b0c:	f000 f8e2 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	24000088 	.word	0x24000088
 8000b18:	40013000 	.word	0x40013000

08000b1c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b22:	4a23      	ldr	r2, [pc, #140]	; (8000bb0 <MX_USART3_UART_Init+0x94>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b66:	f005 f854 	bl	8005c12 <HAL_UART_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b70:	f000 f8b0 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b74:	2100      	movs	r1, #0
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b78:	f006 f8e5 	bl	8006d46 <HAL_UARTEx_SetTxFifoThreshold>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b82:	f000 f8a7 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b86:	2100      	movs	r1, #0
 8000b88:	4808      	ldr	r0, [pc, #32]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b8a:	f006 f91a 	bl	8006dc2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b94:	f000 f89e 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_USART3_UART_Init+0x90>)
 8000b9a:	f006 f89b 	bl	8006cd4 <HAL_UARTEx_DisableFifoMode>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba4:	f000 f896 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	24000110 	.word	0x24000110
 8000bb0:	40004800 	.word	0x40004800

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b3f      	ldr	r3, [pc, #252]	; (8000cc8 <MX_GPIO_Init+0x114>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	4a3d      	ldr	r2, [pc, #244]	; (8000cc8 <MX_GPIO_Init+0x114>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bda:	4b3b      	ldr	r3, [pc, #236]	; (8000cc8 <MX_GPIO_Init+0x114>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b37      	ldr	r3, [pc, #220]	; (8000cc8 <MX_GPIO_Init+0x114>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	4a36      	ldr	r2, [pc, #216]	; (8000cc8 <MX_GPIO_Init+0x114>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf8:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <MX_GPIO_Init+0x114>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	4b30      	ldr	r3, [pc, #192]	; (8000cc8 <MX_GPIO_Init+0x114>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	4a2e      	ldr	r2, [pc, #184]	; (8000cc8 <MX_GPIO_Init+0x114>)
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c16:	4b2c      	ldr	r3, [pc, #176]	; (8000cc8 <MX_GPIO_Init+0x114>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	f003 0308 	and.w	r3, r3, #8
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c24:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <MX_GPIO_Init+0x114>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a27      	ldr	r2, [pc, #156]	; (8000cc8 <MX_GPIO_Init+0x114>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <MX_GPIO_Init+0x114>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2140      	movs	r1, #64	; 0x40
 8000c46:	4821      	ldr	r0, [pc, #132]	; (8000ccc <MX_GPIO_Init+0x118>)
 8000c48:	f001 f960 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c52:	481f      	ldr	r0, [pc, #124]	; (8000cd0 <MX_GPIO_Init+0x11c>)
 8000c54:	f001 f95a 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000c58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4817      	ldr	r0, [pc, #92]	; (8000ccc <MX_GPIO_Init+0x118>)
 8000c70:	f000 ff84 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000c74:	2340      	movs	r3, #64	; 0x40
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4810      	ldr	r0, [pc, #64]	; (8000ccc <MX_GPIO_Init+0x118>)
 8000c8c:	f000 ff76 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 8000c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <MX_GPIO_Init+0x11c>)
 8000caa:	f000 ff67 	bl	8001b7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2028      	movs	r0, #40	; 0x28
 8000cb4:	f000 ff2d 	bl	8001b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cb8:	2028      	movs	r0, #40	; 0x28
 8000cba:	f000 ff44 	bl	8001b46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cbe:	bf00      	nop
 8000cc0:	3728      	adds	r7, #40	; 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	58020800 	.word	0x58020800
 8000cd0:	58020400 	.word	0x58020400

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <csn_set>:

/*
 * Private functions
 */

void csn_set() {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <csn_set+0x18>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <csn_set+0x1c>)
 8000cea:	8811      	ldrh	r1, [r2, #0]
 8000cec:	2201      	movs	r2, #1
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 f90c 	bl	8001f0c <HAL_GPIO_WritePin>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	240001a8 	.word	0x240001a8
 8000cfc:	240001ac 	.word	0x240001ac

08000d00 <csn_reset>:

void csn_reset() {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <csn_reset+0x18>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <csn_reset+0x1c>)
 8000d0a:	8811      	ldrh	r1, [r2, #0]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 f8fc 	bl	8001f0c <HAL_GPIO_WritePin>
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	240001a8 	.word	0x240001a8
 8000d1c:	240001ac 	.word	0x240001ac

08000d20 <ce_set>:

void ce_set() {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <ce_set+0x18>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <ce_set+0x1c>)
 8000d2a:	8811      	ldrh	r1, [r2, #0]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 f8ec 	bl	8001f0c <HAL_GPIO_WritePin>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	240001b0 	.word	0x240001b0
 8000d3c:	240001b4 	.word	0x240001b4

08000d40 <ce_reset>:

void ce_reset() {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <ce_reset+0x18>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <ce_reset+0x1c>)
 8000d4a:	8811      	ldrh	r1, [r2, #0]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 f8dc 	bl	8001f0c <HAL_GPIO_WritePin>
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	240001b0 	.word	0x240001b0
 8000d5c:	240001b4 	.word	0x240001b4

08000d60 <NRF_Init>:
 *
 * Main functions
 *
 */

NRF_Status NRF_Init(SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCSN, uint16_t PinCSN, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	80fb      	strh	r3, [r7, #6]
  HSPI = handle;
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <NRF_Init+0x48>)
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	6013      	str	r3, [r2, #0]
  NRF_CSN_Port = PortCSN;
 8000d76:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <NRF_Init+0x4c>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	6013      	str	r3, [r2, #0]
  NRF_CSN_Pin = PinCSN;
 8000d7c:	4a0c      	ldr	r2, [pc, #48]	; (8000db0 <NRF_Init+0x50>)
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	8013      	strh	r3, [r2, #0]
  NRF_CE_Port = PortCE;
 8000d82:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <NRF_Init+0x54>)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	6013      	str	r3, [r2, #0]
  NRF_CE_Pin = PinCE;
 8000d88:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <NRF_Init+0x58>)
 8000d8a:	8b3b      	ldrh	r3, [r7, #24]
 8000d8c:	8013      	strh	r3, [r2, #0]

  // Make sure CSN i pulled high
  csn_set();
 8000d8e:	f7ff ffa7 	bl	8000ce0 <csn_set>

  // Takes ~100ms from power on to start up
  HAL_Delay(100);
 8000d92:	2064      	movs	r0, #100	; 0x64
 8000d94:	f000 fdb2 	bl	80018fc <HAL_Delay>

  return NRF_EnterMode(NRF_MODE_STANDBY1);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f000 f89f 	bl	8000edc <NRF_EnterMode>
 8000d9e:	4603      	mov	r3, r0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	240001a4 	.word	0x240001a4
 8000dac:	240001a8 	.word	0x240001a8
 8000db0:	240001ac 	.word	0x240001ac
 8000db4:	240001b0 	.word	0x240001b0
 8000db8:	240001b4 	.word	0x240001b4

08000dbc <NRF_SendCommand>:

NRF_Status NRF_SendCommand(uint8_t cmd) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af02      	add	r7, sp, #8
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000dca:	f7ff ff99 	bl	8000d00 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <NRF_SendCommand+0x44>)
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	f107 020e 	add.w	r2, r7, #14
 8000dd6:	1df9      	adds	r1, r7, #7
 8000dd8:	230a      	movs	r3, #10
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f004 fc13 	bl	8005608 <HAL_SPI_TransmitReceive>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <NRF_SendCommand+0x34>
    return ret;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	e002      	b.n	8000df6 <NRF_SendCommand+0x3a>
  }
  csn_set();
 8000df0:	f7ff ff76 	bl	8000ce0 <csn_set>

  return ret;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	240001a4 	.word	0x240001a4

08000e04 <NRF_SendWriteCommand>:

NRF_Status NRF_SendWriteCommand(uint8_t cmd, uint8_t *write, uint8_t length) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	4613      	mov	r3, r2
 8000e12:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000e18:	f7ff ff72 	bl	8000d00 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000e1c:	4b13      	ldr	r3, [pc, #76]	; (8000e6c <NRF_SendWriteCommand+0x68>)
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	f107 020e 	add.w	r2, r7, #14
 8000e24:	1df9      	adds	r1, r7, #7
 8000e26:	230a      	movs	r3, #10
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	f004 fbec 	bl	8005608 <HAL_SPI_TransmitReceive>
 8000e30:	4603      	mov	r3, r0
 8000e32:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <NRF_SendWriteCommand+0x3a>
    return ret;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	e011      	b.n	8000e62 <NRF_SendWriteCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Transmit(HSPI, write, length, NRF_SPI_TIMEOUT_DUR);
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <NRF_SendWriteCommand+0x68>)
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	79bb      	ldrb	r3, [r7, #6]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	230a      	movs	r3, #10
 8000e48:	6839      	ldr	r1, [r7, #0]
 8000e4a:	f004 f851 	bl	8004ef0 <HAL_SPI_Transmit>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <NRF_SendWriteCommand+0x58>
    return ret;
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	e002      	b.n	8000e62 <NRF_SendWriteCommand+0x5e>
  }
  csn_set();
 8000e5c:	f7ff ff40 	bl	8000ce0 <csn_set>

  return ret;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	240001a4 	.word	0x240001a4

08000e70 <NRF_SendReadCommand>:

NRF_Status NRF_SendReadCommand(uint8_t cmd, uint8_t *read, uint8_t length) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af02      	add	r7, sp, #8
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000e84:	f7ff ff3c 	bl	8000d00 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <NRF_SendReadCommand+0x68>)
 8000e8a:	6818      	ldr	r0, [r3, #0]
 8000e8c:	f107 020e 	add.w	r2, r7, #14
 8000e90:	1df9      	adds	r1, r7, #7
 8000e92:	230a      	movs	r3, #10
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2301      	movs	r3, #1
 8000e98:	f004 fbb6 	bl	8005608 <HAL_SPI_TransmitReceive>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <NRF_SendReadCommand+0x3a>
    return ret;
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	e011      	b.n	8000ece <NRF_SendReadCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Receive(HSPI, read, length, NRF_SPI_TIMEOUT_DUR);
 8000eaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <NRF_SendReadCommand+0x68>)
 8000eac:	6818      	ldr	r0, [r3, #0]
 8000eae:	79bb      	ldrb	r3, [r7, #6]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	230a      	movs	r3, #10
 8000eb4:	6839      	ldr	r1, [r7, #0]
 8000eb6:	f004 fa17 	bl	80052e8 <HAL_SPI_Receive>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <NRF_SendReadCommand+0x58>
    return ret;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	e002      	b.n	8000ece <NRF_SendReadCommand+0x5e>
  }
  csn_set();
 8000ec8:	f7ff ff0a 	bl	8000ce0 <csn_set>

  return ret;
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	240001a4 	.word	0x240001a4

08000edc <NRF_EnterMode>:
 *
 * Device control
 *
 */

NRF_Status NRF_EnterMode(uint8_t mode) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]

  switch(mode) {
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	dc2a      	bgt.n	8000f46 <NRF_EnterMode+0x6a>
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	da15      	bge.n	8000f20 <NRF_EnterMode+0x44>
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <NRF_EnterMode+0x22>
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d006      	beq.n	8000f0a <NRF_EnterMode+0x2e>
 8000efc:	e023      	b.n	8000f46 <NRF_EnterMode+0x6a>
    case NRF_MODE_POWERDOWN:
      // Can come from any mode
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000efe:	2101      	movs	r1, #1
 8000f00:	2000      	movs	r0, #0
 8000f02:	f000 f896 	bl	8001032 <NRF_ResetRegisterBit>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]
    case NRF_MODE_STANDBY1:
      // We expect to come from powerdown
      ce_reset();
 8000f0a:	f7ff ff19 	bl	8000d40 <ce_reset>
      ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000f0e:	2101      	movs	r1, #1
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 f85d 	bl	8000fd0 <NRF_SetRegisterBit>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(2);
 8000f1a:	2002      	movs	r0, #2
 8000f1c:	f000 fcee 	bl	80018fc <HAL_Delay>
    case NRF_MODE_RX:
    case NRF_MODE_TX:
      // We expect to come from standby-I
      if (mode == NRF_MODE_TX) {
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d106      	bne.n	8000f34 <NRF_EnterMode+0x58>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000f26:	2100      	movs	r1, #0
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f000 f882 	bl	8001032 <NRF_ResetRegisterBit>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e005      	b.n	8000f40 <NRF_EnterMode+0x64>
      } else {
        ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000f34:	2100      	movs	r1, #0
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f84a 	bl	8000fd0 <NRF_SetRegisterBit>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]
      }

      // Enter mode
      ce_set();
 8000f40:	f7ff feee 	bl	8000d20 <ce_set>
      break;
 8000f44:	e002      	b.n	8000f4c <NRF_EnterMode+0x70>
    default:
      ret = NRF_ERROR;
 8000f46:	2304      	movs	r3, #4
 8000f48:	73fb      	strb	r3, [r7, #15]
      break;
 8000f4a:	bf00      	nop
  }

  return ret;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <NRF_ReadPayload>:

NRF_Status NRF_WritePayload(uint8_t *payload, uint8_t length) {
  return NRF_SendWriteCommand(NRF_CMD_W_TX_PAYLOAD, payload, length);
}

NRF_Status NRF_ReadPayload(uint8_t *read, uint8_t length) {
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	70fb      	strb	r3, [r7, #3]
  return NRF_SendReadCommand(NRF_CMD_R_RX_PAYLOAD, read, length);
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	461a      	mov	r2, r3
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	2061      	movs	r0, #97	; 0x61
 8000f6a:	f7ff ff81 	bl	8000e70 <NRF_SendReadCommand>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <NRF_WriteRegister>:
 * Register helpers
 *
 */

/* Writing */
NRF_Status NRF_WriteRegister(uint8_t reg, uint8_t *write, uint8_t length) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_REGISTER | reg, write, length);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f043 0320 	orr.w	r3, r3, #32
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	79ba      	ldrb	r2, [r7, #6]
 8000f92:	6839      	ldr	r1, [r7, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff35 	bl	8000e04 <NRF_SendWriteCommand>
 8000f9a:	4603      	mov	r3, r0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <NRF_WriteRegisterByte>:

NRF_Status NRF_WriteRegisterByte(uint8_t reg, uint8_t byte) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	71bb      	strb	r3, [r7, #6]
  uint8_t write = byte;
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  return NRF_WriteRegister(reg, &write, 1);
 8000fb8:	f107 010f 	add.w	r1, r7, #15
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ffd9 	bl	8000f78 <NRF_WriteRegister>
 8000fc6:	4603      	mov	r3, r0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <NRF_SetRegisterBit>:

NRF_Status NRF_SetRegisterBit(uint8_t reg, uint8_t bit) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460a      	mov	r2, r1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 8000fe8:	f107 010e 	add.w	r1, r7, #14
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f851 	bl	8001098 <NRF_ReadRegister>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <NRF_SetRegisterBit+0x34>
    return ret;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	e012      	b.n	800102a <NRF_SetRegisterBit+0x5a>
  }

  cfg = cfg | (1 << bit);
 8001004:	79bb      	ldrb	r3, [r7, #6]
 8001006:	2201      	movs	r2, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	b25a      	sxtb	r2, r3
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	b25b      	sxtb	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b25b      	sxtb	r3, r3
 8001016:	b2db      	uxtb	r3, r3
 8001018:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 800101a:	f107 010e 	add.w	r1, r7, #14
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2201      	movs	r2, #1
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff ffa8 	bl	8000f78 <NRF_WriteRegister>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <NRF_ResetRegisterBit>:

NRF_Status NRF_ResetRegisterBit(uint8_t reg, uint8_t bit) {
 8001032:	b580      	push	{r7, lr}
 8001034:	b084      	sub	sp, #16
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	460a      	mov	r2, r1
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	4613      	mov	r3, r2
 8001040:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8001046:	2300      	movs	r3, #0
 8001048:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 800104a:	f107 010e 	add.w	r1, r7, #14
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2201      	movs	r2, #1
 8001052:	4618      	mov	r0, r3
 8001054:	f000 f820 	bl	8001098 <NRF_ReadRegister>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <NRF_ResetRegisterBit+0x34>
    return ret;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	e014      	b.n	8001090 <NRF_ResetRegisterBit+0x5e>
  }

  cfg = cfg & ~(1 << bit);
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	2201      	movs	r2, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	b25b      	sxtb	r3, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	b25a      	sxtb	r2, r3
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	b25b      	sxtb	r3, r3
 8001078:	4013      	ands	r3, r2
 800107a:	b25b      	sxtb	r3, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 8001080:	f107 010e 	add.w	r1, r7, #14
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2201      	movs	r2, #1
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff75 	bl	8000f78 <NRF_WriteRegister>
 800108e:	4603      	mov	r3, r0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <NRF_ReadRegister>:


/* Reading */
NRF_Status NRF_ReadRegister(uint8_t reg, uint8_t *read, uint8_t length) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	4613      	mov	r3, r2
 80010a6:	71bb      	strb	r3, [r7, #6]
  return NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, read, length);
 80010a8:	79ba      	ldrb	r2, [r7, #6]
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	6839      	ldr	r1, [r7, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fede 	bl	8000e70 <NRF_SendReadCommand>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <NRF_ReadRegisterByte>:

uint8_t NRF_ReadRegisterByte(uint8_t reg) {
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
  uint8_t read;
  NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, &read, 1);
 80010c8:	f107 010f 	add.w	r1, r7, #15
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2201      	movs	r2, #1
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fecd 	bl	8000e70 <NRF_SendReadCommand>
  return read;
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <NRF_ReadStatus>:

uint8_t NRF_ReadStatus() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af02      	add	r7, sp, #8
  uint8_t status = 0x00;
 80010e6:	2300      	movs	r3, #0
 80010e8:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd = NRF_CMD_NOP;
 80010ea:	23ff      	movs	r3, #255	; 0xff
 80010ec:	71bb      	strb	r3, [r7, #6]

  csn_reset();
 80010ee:	f7ff fe07 	bl	8000d00 <csn_reset>
  HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <NRF_ReadStatus+0x34>)
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	1dfa      	adds	r2, r7, #7
 80010f8:	1db9      	adds	r1, r7, #6
 80010fa:	230a      	movs	r3, #10
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	f004 fa82 	bl	8005608 <HAL_SPI_TransmitReceive>
  csn_set();
 8001104:	f7ff fdec 	bl	8000ce0 <csn_set>

  return status;
 8001108:	79fb      	ldrb	r3, [r7, #7]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	240001a4 	.word	0x240001a4

08001118 <NRF_Reset>:
  }

  return ret;
}

void NRF_Reset() {
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
  // Reset state (goto standby-I)
  csn_set();
 800111e:	f7ff fddf 	bl	8000ce0 <csn_set>
  ce_reset();
 8001122:	f7ff fe0d 	bl	8000d40 <ce_reset>

  // Flush FIFOs
  NRF_EnterMode(NRF_MODE_TX);
 8001126:	2003      	movs	r0, #3
 8001128:	f7ff fed8 	bl	8000edc <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_TX);
 800112c:	20e1      	movs	r0, #225	; 0xe1
 800112e:	f7ff fe45 	bl	8000dbc <NRF_SendCommand>
  ce_reset();
 8001132:	f7ff fe05 	bl	8000d40 <ce_reset>
  NRF_EnterMode(NRF_MODE_RX);
 8001136:	2002      	movs	r0, #2
 8001138:	f7ff fed0 	bl	8000edc <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_RX);
 800113c:	20e2      	movs	r0, #226	; 0xe2
 800113e:	f7ff fe3d 	bl	8000dbc <NRF_SendCommand>
  ce_reset();
 8001142:	f7ff fdfd 	bl	8000d40 <ce_reset>

  // Flush register
  NRF_WriteRegisterByte(NRF_REG_CONFIG,       0x0A);
 8001146:	210a      	movs	r1, #10
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff ff2b 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_AA,        0x3f);
 800114e:	213f      	movs	r1, #63	; 0x3f
 8001150:	2001      	movs	r0, #1
 8001152:	f7ff ff27 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_RXADDR,    0x03);
 8001156:	2103      	movs	r1, #3
 8001158:	2002      	movs	r0, #2
 800115a:	f7ff ff23 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_AW,     0x03);
 800115e:	2103      	movs	r1, #3
 8001160:	2003      	movs	r0, #3
 8001162:	f7ff ff1f 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_RETR,   0x03);
 8001166:	2103      	movs	r1, #3
 8001168:	2004      	movs	r0, #4
 800116a:	f7ff ff1b 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_CH,        0x02);
 800116e:	2102      	movs	r1, #2
 8001170:	2005      	movs	r0, #5
 8001172:	f7ff ff17 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_SETUP,     0x0e);
 8001176:	210e      	movs	r1, #14
 8001178:	2006      	movs	r0, #6
 800117a:	f7ff ff13 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_STATUS,       0x70); // clear flags
 800117e:	2170      	movs	r1, #112	; 0x70
 8001180:	2007      	movs	r0, #7
 8001182:	f7ff ff0f 	bl	8000fa4 <NRF_WriteRegisterByte>

  uint8_t address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001186:	4a2d      	ldr	r2, [pc, #180]	; (800123c <NRF_Reset+0x124>)
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001190:	6018      	str	r0, [r3, #0]
 8001192:	3304      	adds	r3, #4
 8001194:	7019      	strb	r1, [r3, #0]
  uint8_t address2[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001196:	4a2a      	ldr	r2, [pc, #168]	; (8001240 <NRF_Reset+0x128>)
 8001198:	463b      	mov	r3, r7
 800119a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800119e:	6018      	str	r0, [r3, #0]
 80011a0:	3304      	adds	r3, #4
 80011a2:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	2205      	movs	r2, #5
 80011aa:	4619      	mov	r1, r3
 80011ac:	200a      	movs	r0, #10
 80011ae:	f7ff fee3 	bl	8000f78 <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P1, address2, 5);
 80011b2:	463b      	mov	r3, r7
 80011b4:	2205      	movs	r2, #5
 80011b6:	4619      	mov	r1, r3
 80011b8:	200b      	movs	r0, #11
 80011ba:	f7ff fedd 	bl	8000f78 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P2,   0xC3);
 80011be:	21c3      	movs	r1, #195	; 0xc3
 80011c0:	200c      	movs	r0, #12
 80011c2:	f7ff feef 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P3,   0xC4);
 80011c6:	21c4      	movs	r1, #196	; 0xc4
 80011c8:	200d      	movs	r0, #13
 80011ca:	f7ff feeb 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P4,   0xC5);
 80011ce:	21c5      	movs	r1, #197	; 0xc5
 80011d0:	200e      	movs	r0, #14
 80011d2:	f7ff fee7 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P5,   0xC6);
 80011d6:	21c6      	movs	r1, #198	; 0xc6
 80011d8:	200f      	movs	r0, #15
 80011da:	f7ff fee3 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	2205      	movs	r2, #5
 80011e4:	4619      	mov	r1, r3
 80011e6:	2010      	movs	r0, #16
 80011e8:	f7ff fec6 	bl	8000f78 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,     0x00);
 80011ec:	2100      	movs	r1, #0
 80011ee:	2011      	movs	r0, #17
 80011f0:	f7ff fed8 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P1,     0x00);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2012      	movs	r0, #18
 80011f8:	f7ff fed4 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P2,     0x00);
 80011fc:	2100      	movs	r1, #0
 80011fe:	2013      	movs	r0, #19
 8001200:	f7ff fed0 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P3,     0x00);
 8001204:	2100      	movs	r1, #0
 8001206:	2014      	movs	r0, #20
 8001208:	f7ff fecc 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P4,     0x00);
 800120c:	2100      	movs	r1, #0
 800120e:	2015      	movs	r0, #21
 8001210:	f7ff fec8 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P5,     0x00);
 8001214:	2100      	movs	r1, #0
 8001216:	2016      	movs	r0, #22
 8001218:	f7ff fec4 	bl	8000fa4 <NRF_WriteRegisterByte>

  NRF_WriteRegisterByte(NRF_REG_FIFO_STATUS,  0x00);
 800121c:	2100      	movs	r1, #0
 800121e:	2017      	movs	r0, #23
 8001220:	f7ff fec0 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_DYNPD,        0x00);
 8001224:	2100      	movs	r1, #0
 8001226:	201c      	movs	r0, #28
 8001228:	f7ff febc 	bl	8000fa4 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_FEATURE,      0x00);
 800122c:	2100      	movs	r1, #0
 800122e:	201d      	movs	r0, #29
 8001230:	f7ff feb8 	bl	8000fa4 <NRF_WriteRegisterByte>
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	08007f24 	.word	0x08007f24
 8001240:	08007f2c 	.word	0x08007f2c

08001244 <NRF_PrintStatus>:

void NRF_PrintStatus() {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  uint8_t status = NRF_ReadStatus();
 800124a:	f7ff ff49 	bl	80010e0 <NRF_ReadStatus>
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]

  printf("Status register: %02X\r\n", status);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4619      	mov	r1, r3
 8001256:	4825      	ldr	r0, [pc, #148]	; (80012ec <NRF_PrintStatus+0xa8>)
 8001258:	f005 ff02 	bl	8007060 <iprintf>
  printf("CE: %d\r\n", HAL_GPIO_ReadPin(NRF_CE_Port, NRF_CE_Pin));
 800125c:	4b24      	ldr	r3, [pc, #144]	; (80012f0 <NRF_PrintStatus+0xac>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a24      	ldr	r2, [pc, #144]	; (80012f4 <NRF_PrintStatus+0xb0>)
 8001262:	8812      	ldrh	r2, [r2, #0]
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fe38 	bl	8001edc <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	4619      	mov	r1, r3
 8001270:	4821      	ldr	r0, [pc, #132]	; (80012f8 <NRF_PrintStatus+0xb4>)
 8001272:	f005 fef5 	bl	8007060 <iprintf>
  printf("CSN: %d\r\n", HAL_GPIO_ReadPin(NRF_CSN_Port, NRF_CSN_Pin));
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <NRF_PrintStatus+0xb8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <NRF_PrintStatus+0xbc>)
 800127c:	8812      	ldrh	r2, [r2, #0]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f000 fe2b 	bl	8001edc <HAL_GPIO_ReadPin>
 8001286:	4603      	mov	r3, r0
 8001288:	4619      	mov	r1, r3
 800128a:	481e      	ldr	r0, [pc, #120]	; (8001304 <NRF_PrintStatus+0xc0>)
 800128c:	f005 fee8 	bl	8007060 <iprintf>
  printf("TX_FULL:  %1X\r\n", status & (1<<STATUS_BIT_TX_FULL));
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	4619      	mov	r1, r3
 8001298:	481b      	ldr	r0, [pc, #108]	; (8001308 <NRF_PrintStatus+0xc4>)
 800129a:	f005 fee1 	bl	8007060 <iprintf>
  printf("RX_P_NO:  %1X\r\n", (status & (0x3<<STATUS_BIT_RX_P_NO)) >> 1);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	105b      	asrs	r3, r3, #1
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	4619      	mov	r1, r3
 80012a8:	4818      	ldr	r0, [pc, #96]	; (800130c <NRF_PrintStatus+0xc8>)
 80012aa:	f005 fed9 	bl	8007060 <iprintf>
  printf("MAX_RT:   %1X\r\n", (status & (1<<STATUS_BIT_MAX_RT))    >> 4);
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	111b      	asrs	r3, r3, #4
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	4619      	mov	r1, r3
 80012b8:	4815      	ldr	r0, [pc, #84]	; (8001310 <NRF_PrintStatus+0xcc>)
 80012ba:	f005 fed1 	bl	8007060 <iprintf>
  printf("TX_DS:    %1X\r\n", (status & (1<<STATUS_BIT_TX_DS))     >> 5);
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	115b      	asrs	r3, r3, #5
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	4619      	mov	r1, r3
 80012c8:	4812      	ldr	r0, [pc, #72]	; (8001314 <NRF_PrintStatus+0xd0>)
 80012ca:	f005 fec9 	bl	8007060 <iprintf>
  printf("RX_DR:    %1X\r\n", (status & (1<<STATUS_BIT_RX_DR))     >> 6);
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	119b      	asrs	r3, r3, #6
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	4619      	mov	r1, r3
 80012d8:	480f      	ldr	r0, [pc, #60]	; (8001318 <NRF_PrintStatus+0xd4>)
 80012da:	f005 fec1 	bl	8007060 <iprintf>
  printf("\r\n");
 80012de:	480f      	ldr	r0, [pc, #60]	; (800131c <NRF_PrintStatus+0xd8>)
 80012e0:	f005 ff2c 	bl	800713c <puts>
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	08007f34 	.word	0x08007f34
 80012f0:	240001b0 	.word	0x240001b0
 80012f4:	240001b4 	.word	0x240001b4
 80012f8:	08007f4c 	.word	0x08007f4c
 80012fc:	240001a8 	.word	0x240001a8
 8001300:	240001ac 	.word	0x240001ac
 8001304:	08007f58 	.word	0x08007f58
 8001308:	08007f64 	.word	0x08007f64
 800130c:	08007f74 	.word	0x08007f74
 8001310:	08007f84 	.word	0x08007f84
 8001314:	08007f94 	.word	0x08007f94
 8001318:	08007fa4 	.word	0x08007fa4
 800131c:	08007fb4 	.word	0x08007fb4

08001320 <NRF_PrintFIFOStatus>:

void NRF_PrintFIFOStatus() {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
  uint8_t reg = NRF_ReadRegisterByte(NRF_REG_FIFO_STATUS);
 8001326:	2017      	movs	r0, #23
 8001328:	f7ff fec9 	bl	80010be <NRF_ReadRegisterByte>
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]

  printf("FIFO status register: %02X\r\n", reg);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	4619      	mov	r1, r3
 8001334:	4818      	ldr	r0, [pc, #96]	; (8001398 <NRF_PrintFIFOStatus+0x78>)
 8001336:	f005 fe93 	bl	8007060 <iprintf>
  printf("RX_EMPTY:   %2X\r\n", reg &  (1<<FIFO_STATUS_BIT_RX_EMPTY));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	4619      	mov	r1, r3
 8001342:	4816      	ldr	r0, [pc, #88]	; (800139c <NRF_PrintFIFOStatus+0x7c>)
 8001344:	f005 fe8c 	bl	8007060 <iprintf>
  printf("RX_FULL:    %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_RX_FULL))     >> 1);
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	105b      	asrs	r3, r3, #1
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	4619      	mov	r1, r3
 8001352:	4813      	ldr	r0, [pc, #76]	; (80013a0 <NRF_PrintFIFOStatus+0x80>)
 8001354:	f005 fe84 	bl	8007060 <iprintf>
  printf("TX_EMPTY:   %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_EMPTY))    >> 4);
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	111b      	asrs	r3, r3, #4
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	4619      	mov	r1, r3
 8001362:	4810      	ldr	r0, [pc, #64]	; (80013a4 <NRF_PrintFIFOStatus+0x84>)
 8001364:	f005 fe7c 	bl	8007060 <iprintf>
  printf("TX_FULL:    %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_FULL))     >> 5);
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	115b      	asrs	r3, r3, #5
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	4619      	mov	r1, r3
 8001372:	480d      	ldr	r0, [pc, #52]	; (80013a8 <NRF_PrintFIFOStatus+0x88>)
 8001374:	f005 fe74 	bl	8007060 <iprintf>
  printf("TX_REUSE:   %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_REUSE))    >> 6);
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	119b      	asrs	r3, r3, #6
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	4619      	mov	r1, r3
 8001382:	480a      	ldr	r0, [pc, #40]	; (80013ac <NRF_PrintFIFOStatus+0x8c>)
 8001384:	f005 fe6c 	bl	8007060 <iprintf>
  printf("\r\n");
 8001388:	4809      	ldr	r0, [pc, #36]	; (80013b0 <NRF_PrintFIFOStatus+0x90>)
 800138a:	f005 fed7 	bl	800713c <puts>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	08007fb8 	.word	0x08007fb8
 800139c:	08007fd8 	.word	0x08007fd8
 80013a0:	08007fec 	.word	0x08007fec
 80013a4:	08008000 	.word	0x08008000
 80013a8:	08008014 	.word	0x08008014
 80013ac:	08008028 	.word	0x08008028
 80013b0:	08007fb4 	.word	0x08007fb4

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_MspInit+0x30>)
 80013bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013c0:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_MspInit+0x30>)
 80013c2:	f043 0302 	orr.w	r3, r3, #2
 80013c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <HAL_MspInit+0x30>)
 80013cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	58024400 	.word	0x58024400

080013e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b0bc      	sub	sp, #240	; 0xf0
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	f107 0318 	add.w	r3, r7, #24
 8001404:	22c0      	movs	r2, #192	; 0xc0
 8001406:	2100      	movs	r1, #0
 8001408:	4618      	mov	r0, r3
 800140a:	f005 ff77 	bl	80072fc <memset>
  if(hspi->Instance==SPI1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a38      	ldr	r2, [pc, #224]	; (80014f4 <HAL_SPI_MspInit+0x10c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d168      	bne.n	80014ea <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001418:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001424:	2300      	movs	r3, #0
 8001426:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	4618      	mov	r0, r3
 800142e:	f001 fe0f 	bl	8003050 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001438:	f7ff fc4c 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143c:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <HAL_SPI_MspInit+0x110>)
 800143e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001442:	4a2d      	ldr	r2, [pc, #180]	; (80014f8 <HAL_SPI_MspInit+0x110>)
 8001444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001448:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800144c:	4b2a      	ldr	r3, [pc, #168]	; (80014f8 <HAL_SPI_MspInit+0x110>)
 800144e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	4b27      	ldr	r3, [pc, #156]	; (80014f8 <HAL_SPI_MspInit+0x110>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001460:	4a25      	ldr	r2, [pc, #148]	; (80014f8 <HAL_SPI_MspInit+0x110>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <HAL_SPI_MspInit+0x110>)
 800146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <HAL_SPI_MspInit+0x110>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	4a1e      	ldr	r2, [pc, #120]	; (80014f8 <HAL_SPI_MspInit+0x110>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001488:	4b1b      	ldr	r3, [pc, #108]	; (80014f8 <HAL_SPI_MspInit+0x110>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MISO_Pin;
 8001496:	2360      	movs	r3, #96	; 0x60
 8001498:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ae:	2305      	movs	r3, #5
 80014b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014b8:	4619      	mov	r1, r3
 80014ba:	4810      	ldr	r0, [pc, #64]	; (80014fc <HAL_SPI_MspInit+0x114>)
 80014bc:	f000 fb5e 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MOSI_Pin;
 80014c0:	2320      	movs	r3, #32
 80014c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014d8:	2305      	movs	r3, #5
 80014da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(NRF_MOSI_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014e2:	4619      	mov	r1, r3
 80014e4:	4806      	ldr	r0, [pc, #24]	; (8001500 <HAL_SPI_MspInit+0x118>)
 80014e6:	f000 fb49 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	37f0      	adds	r7, #240	; 0xf0
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40013000 	.word	0x40013000
 80014f8:	58024400 	.word	0x58024400
 80014fc:	58020000 	.word	0x58020000
 8001500:	58020400 	.word	0x58020400

08001504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b0ba      	sub	sp, #232	; 0xe8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	22c0      	movs	r2, #192	; 0xc0
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f005 fee9 	bl	80072fc <memset>
  if(huart->Instance==USART3)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a27      	ldr	r2, [pc, #156]	; (80015cc <HAL_UART_MspInit+0xc8>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d146      	bne.n	80015c2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001534:	f04f 0202 	mov.w	r2, #2
 8001538:	f04f 0300 	mov.w	r3, #0
 800153c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001546:	f107 0310 	add.w	r3, r7, #16
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fd80 	bl	8003050 <HAL_RCCEx_PeriphCLKConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001556:	f7ff fbbd 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_UART_MspInit+0xcc>)
 800155c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001560:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <HAL_UART_MspInit+0xcc>)
 8001562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001566:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_UART_MspInit+0xcc>)
 800156c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001578:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_UART_MspInit+0xcc>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157e:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <HAL_UART_MspInit+0xcc>)
 8001580:	f043 0308 	orr.w	r3, r3, #8
 8001584:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_UART_MspInit+0xcc>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001596:	f44f 7340 	mov.w	r3, #768	; 0x300
 800159a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015b0:	2307      	movs	r3, #7
 80015b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <HAL_UART_MspInit+0xd0>)
 80015be:	f000 fadd 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015c2:	bf00      	nop
 80015c4:	37e8      	adds	r7, #232	; 0xe8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40004800 	.word	0x40004800
 80015d0:	58024400 	.word	0x58024400
 80015d4:	58020c00 	.word	0x58020c00

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001624:	f000 f94a 	bl	80018bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_USER_Pin);
 8001630:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001634:	f000 fc83 	bl	8001f3e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e00a      	b.n	8001664 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800164e:	f3af 8000 	nop.w
 8001652:	4601      	mov	r1, r0
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	60ba      	str	r2, [r7, #8]
 800165a:	b2ca      	uxtb	r2, r1
 800165c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbf0      	blt.n	800164e <_read+0x12>
  }

  return len;
 800166c:	687b      	ldr	r3, [r7, #4]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	e009      	b.n	800169c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	60ba      	str	r2, [r7, #8]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff f889 	bl	80007a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbf1      	blt.n	8001688 <_write+0x12>
  }
  return len;
 80016a4:	687b      	ldr	r3, [r7, #4]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_close>:

int _close(int file)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d6:	605a      	str	r2, [r3, #4]
  return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_isatty>:

int _isatty(int file)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <_sbrk+0x5c>)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <_sbrk+0x60>)
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_sbrk+0x64>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <_sbrk+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001748:	f005 fe26 	bl	8007398 <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	220c      	movs	r2, #12
 8001750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001756:	e009      	b.n	800176c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_sbrk+0x64>)
 8001768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	24080000 	.word	0x24080000
 8001778:	00000400 	.word	0x00000400
 800177c:	240001b8 	.word	0x240001b8
 8001780:	24000310 	.word	0x24000310

08001784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001788:	f7fe ff78 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178e:	490d      	ldr	r1, [pc, #52]	; (80017c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a4:	4c0a      	ldr	r4, [pc, #40]	; (80017d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b2:	f005 fdf7 	bl	80073a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b6:	f7ff f88d 	bl	80008d4 <main>
  bx  lr
 80017ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017bc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017c4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80017c8:	080080b8 	.word	0x080080b8
  ldr r2, =_sbss
 80017cc:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80017d0:	2400030c 	.word	0x2400030c

080017d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC3_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017de:	2003      	movs	r0, #3
 80017e0:	f000 f98c 	bl	8001afc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017e4:	f001 fa5e 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 80017e8:	4602      	mov	r2, r0
 80017ea:	4b15      	ldr	r3, [pc, #84]	; (8001840 <HAL_Init+0x68>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	f003 030f 	and.w	r3, r3, #15
 80017f4:	4913      	ldr	r1, [pc, #76]	; (8001844 <HAL_Init+0x6c>)
 80017f6:	5ccb      	ldrb	r3, [r1, r3]
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001800:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001802:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <HAL_Init+0x68>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_Init+0x6c>)
 800180c:	5cd3      	ldrb	r3, [r2, r3]
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	fa22 f303 	lsr.w	r3, r2, r3
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <HAL_Init+0x70>)
 800181a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800181c:	4a0b      	ldr	r2, [pc, #44]	; (800184c <HAL_Init+0x74>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001822:	200f      	movs	r0, #15
 8001824:	f000 f814 	bl	8001850 <HAL_InitTick>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e002      	b.n	8001838 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001832:	f7ff fdbf 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	58024400 	.word	0x58024400
 8001844:	0800803c 	.word	0x0800803c
 8001848:	24000004 	.word	0x24000004
 800184c:	24000000 	.word	0x24000000

08001850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001858:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_InitTick+0x60>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e021      	b.n	80018a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <HAL_InitTick+0x64>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_InitTick+0x60>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001872:	fbb3 f3f1 	udiv	r3, r3, r1
 8001876:	fbb2 f3f3 	udiv	r3, r2, r3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f971 	bl	8001b62 <HAL_SYSTICK_Config>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e00e      	b.n	80018a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2b0f      	cmp	r3, #15
 800188e:	d80a      	bhi.n	80018a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001890:	2200      	movs	r2, #0
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001898:	f000 f93b 	bl	8001b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800189c:	4a06      	ldr	r2, [pc, #24]	; (80018b8 <HAL_InitTick+0x68>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e000      	b.n	80018a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	2400000c 	.word	0x2400000c
 80018b4:	24000000 	.word	0x24000000
 80018b8:	24000008 	.word	0x24000008

080018bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x20>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x24>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_IncTick+0x24>)
 80018ce:	6013      	str	r3, [r2, #0]
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	2400000c 	.word	0x2400000c
 80018e0:	240001bc 	.word	0x240001bc

080018e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <HAL_GetTick+0x14>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	240001bc 	.word	0x240001bc

080018fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001904:	f7ff ffee 	bl	80018e4 <HAL_GetTick>
 8001908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001914:	d005      	beq.n	8001922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_Delay+0x44>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	461a      	mov	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001922:	bf00      	nop
 8001924:	f7ff ffde 	bl	80018e4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	429a      	cmp	r2, r3
 8001932:	d8f7      	bhi.n	8001924 <HAL_Delay+0x28>
  {
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2400000c 	.word	0x2400000c

08001944 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_GetREVID+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	0c1b      	lsrs	r3, r3, #16
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	5c001000 	.word	0x5c001000

0800195c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4b0b      	ldr	r3, [pc, #44]	; (800199c <__NVIC_SetPriorityGrouping+0x40>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	4313      	orrs	r3, r2
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x40>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00
 80019a0:	05fa0000 	.word	0x05fa0000

080019a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b04      	ldr	r3, [pc, #16]	; (80019bc <__NVIC_GetPriorityGrouping+0x18>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	f003 0307 	and.w	r3, r3, #7
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db0b      	blt.n	80019ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	4907      	ldr	r1, [pc, #28]	; (80019f8 <__NVIC_EnableIRQ+0x38>)
 80019da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	2001      	movs	r0, #1
 80019e2:	fa00 f202 	lsl.w	r2, r0, r2
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	e000e100 	.word	0xe000e100

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	; (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	; (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac8:	d301      	bcc.n	8001ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00f      	b.n	8001aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <SysTick_Config+0x40>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001adc:	f7ff ff8e 	bl	80019fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <SysTick_Config+0x40>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <SysTick_Config+0x40>)
 8001ae8:	2207      	movs	r2, #7
 8001aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	e000e010 	.word	0xe000e010

08001afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff29 	bl	800195c <__NVIC_SetPriorityGrouping>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b20:	f7ff ff40 	bl	80019a4 <__NVIC_GetPriorityGrouping>
 8001b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	6978      	ldr	r0, [r7, #20]
 8001b2c:	f7ff ff90 	bl	8001a50 <NVIC_EncodePriority>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff5f 	bl	80019fc <__NVIC_SetPriority>
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff33 	bl	80019c0 <__NVIC_EnableIRQ>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffa4 	bl	8001ab8 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b8a:	4b89      	ldr	r3, [pc, #548]	; (8001db0 <HAL_GPIO_Init+0x234>)
 8001b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b8e:	e194      	b.n	8001eba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8186 	beq.w	8001eb4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d005      	beq.n	8001bc0 <HAL_GPIO_Init+0x44>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d130      	bne.n	8001c22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 0201 	and.w	r2, r3, #1
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d017      	beq.n	8001c5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d123      	bne.n	8001cb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3208      	adds	r2, #8
 8001cac:	69b9      	ldr	r1, [r7, #24]
 8001cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0203 	and.w	r2, r3, #3
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 80e0 	beq.w	8001eb4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf4:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <HAL_GPIO_Init+0x238>)
 8001cf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cfa:	4a2e      	ldr	r2, [pc, #184]	; (8001db4 <HAL_GPIO_Init+0x238>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d04:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_GPIO_Init+0x238>)
 8001d06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d12:	4a29      	ldr	r2, [pc, #164]	; (8001db8 <HAL_GPIO_Init+0x23c>)
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	089b      	lsrs	r3, r3, #2
 8001d18:	3302      	adds	r3, #2
 8001d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	220f      	movs	r2, #15
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a20      	ldr	r2, [pc, #128]	; (8001dbc <HAL_GPIO_Init+0x240>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d052      	beq.n	8001de4 <HAL_GPIO_Init+0x268>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <HAL_GPIO_Init+0x244>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d031      	beq.n	8001daa <HAL_GPIO_Init+0x22e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a1e      	ldr	r2, [pc, #120]	; (8001dc4 <HAL_GPIO_Init+0x248>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d02b      	beq.n	8001da6 <HAL_GPIO_Init+0x22a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <HAL_GPIO_Init+0x24c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d025      	beq.n	8001da2 <HAL_GPIO_Init+0x226>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <HAL_GPIO_Init+0x250>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01f      	beq.n	8001d9e <HAL_GPIO_Init+0x222>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a1b      	ldr	r2, [pc, #108]	; (8001dd0 <HAL_GPIO_Init+0x254>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d019      	beq.n	8001d9a <HAL_GPIO_Init+0x21e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a1a      	ldr	r2, [pc, #104]	; (8001dd4 <HAL_GPIO_Init+0x258>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_GPIO_Init+0x21a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <HAL_GPIO_Init+0x25c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00d      	beq.n	8001d92 <HAL_GPIO_Init+0x216>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <HAL_GPIO_Init+0x260>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <HAL_GPIO_Init+0x212>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a17      	ldr	r2, [pc, #92]	; (8001de0 <HAL_GPIO_Init+0x264>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <HAL_GPIO_Init+0x20e>
 8001d86:	2309      	movs	r3, #9
 8001d88:	e02d      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001d8a:	230a      	movs	r3, #10
 8001d8c:	e02b      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001d8e:	2308      	movs	r3, #8
 8001d90:	e029      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001d92:	2307      	movs	r3, #7
 8001d94:	e027      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001d96:	2306      	movs	r3, #6
 8001d98:	e025      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	e023      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001d9e:	2304      	movs	r3, #4
 8001da0:	e021      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001da2:	2303      	movs	r3, #3
 8001da4:	e01f      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e01d      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e01b      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001dae:	bf00      	nop
 8001db0:	58000080 	.word	0x58000080
 8001db4:	58024400 	.word	0x58024400
 8001db8:	58000400 	.word	0x58000400
 8001dbc:	58020000 	.word	0x58020000
 8001dc0:	58020400 	.word	0x58020400
 8001dc4:	58020800 	.word	0x58020800
 8001dc8:	58020c00 	.word	0x58020c00
 8001dcc:	58021000 	.word	0x58021000
 8001dd0:	58021400 	.word	0x58021400
 8001dd4:	58021800 	.word	0x58021800
 8001dd8:	58021c00 	.word	0x58021c00
 8001ddc:	58022000 	.word	0x58022000
 8001de0:	58022400 	.word	0x58022400
 8001de4:	2300      	movs	r3, #0
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	f002 0203 	and.w	r2, r2, #3
 8001dec:	0092      	lsls	r2, r2, #2
 8001dee:	4093      	lsls	r3, r2
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001df6:	4938      	ldr	r1, [pc, #224]	; (8001ed8 <HAL_GPIO_Init+0x35c>)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f47f ae63 	bne.w	8001b90 <HAL_GPIO_Init+0x14>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	bf00      	nop
 8001ece:	3724      	adds	r7, #36	; 0x24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	58000400 	.word	0x58000400

08001edc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	887b      	ldrh	r3, [r7, #2]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	e001      	b.n	8001efe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	807b      	strh	r3, [r7, #2]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f1c:	787b      	ldrb	r3, [r7, #1]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f28:	e003      	b.n	8001f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f2a:	887b      	ldrh	r3, [r7, #2]
 8001f2c:	041a      	lsls	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	619a      	str	r2, [r3, #24]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fc31 	bl	80007cc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001f7c:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <HAL_HSEM_FastTake+0x2c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3320      	adds	r3, #32
 8001f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f86:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <HAL_HSEM_FastTake+0x30>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	58026400 	.word	0x58026400
 8001fa4:	80000300 	.word	0x80000300

08001fa8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001fb2:	4906      	ldr	r1, [pc, #24]	; (8001fcc <HAL_HSEM_Release+0x24>)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	58026400 	.word	0x58026400

08001fd0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001fd8:	4b29      	ldr	r3, [pc, #164]	; (8002080 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0307 	and.w	r3, r3, #7
 8001fe0:	2b06      	cmp	r3, #6
 8001fe2:	d00a      	beq.n	8001ffa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001fe4:	4b26      	ldr	r3, [pc, #152]	; (8002080 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d001      	beq.n	8001ff6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e040      	b.n	8002078 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e03e      	b.n	8002078 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001ffa:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002002:	491f      	ldr	r1, [pc, #124]	; (8002080 <HAL_PWREx_ConfigSupply+0xb0>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4313      	orrs	r3, r2
 8002008:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800200a:	f7ff fc6b 	bl	80018e4 <HAL_GetTick>
 800200e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002010:	e009      	b.n	8002026 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002012:	f7ff fc67 	bl	80018e4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002020:	d901      	bls.n	8002026 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e028      	b.n	8002078 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002026:	4b16      	ldr	r3, [pc, #88]	; (8002080 <HAL_PWREx_ConfigSupply+0xb0>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800202e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002032:	d1ee      	bne.n	8002012 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b1e      	cmp	r3, #30
 8002038:	d008      	beq.n	800204c <HAL_PWREx_ConfigSupply+0x7c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b2e      	cmp	r3, #46	; 0x2e
 800203e:	d005      	beq.n	800204c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b1d      	cmp	r3, #29
 8002044:	d002      	beq.n	800204c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b2d      	cmp	r3, #45	; 0x2d
 800204a:	d114      	bne.n	8002076 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800204c:	f7ff fc4a 	bl	80018e4 <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002052:	e009      	b.n	8002068 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002054:	f7ff fc46 	bl	80018e4 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002062:	d901      	bls.n	8002068 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e007      	b.n	8002078 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_PWREx_ConfigSupply+0xb0>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002074:	d1ee      	bne.n	8002054 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	58024800 	.word	0x58024800

08002084 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	; 0x30
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	f000 bc48 	b.w	8002928 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 8088 	beq.w	80021b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a6:	4b99      	ldr	r3, [pc, #612]	; (800230c <HAL_RCC_OscConfig+0x288>)
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020b0:	4b96      	ldr	r3, [pc, #600]	; (800230c <HAL_RCC_OscConfig+0x288>)
 80020b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80020b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	d007      	beq.n	80020cc <HAL_RCC_OscConfig+0x48>
 80020bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020be:	2b18      	cmp	r3, #24
 80020c0:	d111      	bne.n	80020e6 <HAL_RCC_OscConfig+0x62>
 80020c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c4:	f003 0303 	and.w	r3, r3, #3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d10c      	bne.n	80020e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	4b8f      	ldr	r3, [pc, #572]	; (800230c <HAL_RCC_OscConfig+0x288>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d06d      	beq.n	80021b4 <HAL_RCC_OscConfig+0x130>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d169      	bne.n	80021b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	f000 bc21 	b.w	8002928 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ee:	d106      	bne.n	80020fe <HAL_RCC_OscConfig+0x7a>
 80020f0:	4b86      	ldr	r3, [pc, #536]	; (800230c <HAL_RCC_OscConfig+0x288>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a85      	ldr	r2, [pc, #532]	; (800230c <HAL_RCC_OscConfig+0x288>)
 80020f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	e02e      	b.n	800215c <HAL_RCC_OscConfig+0xd8>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0x9c>
 8002106:	4b81      	ldr	r3, [pc, #516]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a80      	ldr	r2, [pc, #512]	; (800230c <HAL_RCC_OscConfig+0x288>)
 800210c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	4b7e      	ldr	r3, [pc, #504]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7d      	ldr	r2, [pc, #500]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e01d      	b.n	800215c <HAL_RCC_OscConfig+0xd8>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0xc0>
 800212a:	4b78      	ldr	r3, [pc, #480]	; (800230c <HAL_RCC_OscConfig+0x288>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a77      	ldr	r2, [pc, #476]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	4b75      	ldr	r3, [pc, #468]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a74      	ldr	r2, [pc, #464]	; (800230c <HAL_RCC_OscConfig+0x288>)
 800213c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	e00b      	b.n	800215c <HAL_RCC_OscConfig+0xd8>
 8002144:	4b71      	ldr	r3, [pc, #452]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a70      	ldr	r2, [pc, #448]	; (800230c <HAL_RCC_OscConfig+0x288>)
 800214a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b6e      	ldr	r3, [pc, #440]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6d      	ldr	r2, [pc, #436]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7ff fbbe 	bl	80018e4 <HAL_GetTick>
 8002168:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800216c:	f7ff fbba 	bl	80018e4 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b64      	cmp	r3, #100	; 0x64
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e3d4      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800217e:	4b63      	ldr	r3, [pc, #396]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0xe8>
 800218a:	e014      	b.n	80021b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7ff fbaa 	bl	80018e4 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7ff fba6 	bl	80018e4 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	; 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e3c0      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021a6:	4b59      	ldr	r3, [pc, #356]	; (800230c <HAL_RCC_OscConfig+0x288>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x110>
 80021b2:	e000      	b.n	80021b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f000 80ca 	beq.w	8002358 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c4:	4b51      	ldr	r3, [pc, #324]	; (800230c <HAL_RCC_OscConfig+0x288>)
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021ce:	4b4f      	ldr	r3, [pc, #316]	; (800230c <HAL_RCC_OscConfig+0x288>)
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <HAL_RCC_OscConfig+0x166>
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	2b18      	cmp	r3, #24
 80021de:	d156      	bne.n	800228e <HAL_RCC_OscConfig+0x20a>
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d151      	bne.n	800228e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ea:	4b48      	ldr	r3, [pc, #288]	; (800230c <HAL_RCC_OscConfig+0x288>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <HAL_RCC_OscConfig+0x17e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e392      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002202:	4b42      	ldr	r3, [pc, #264]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 0219 	bic.w	r2, r3, #25
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	493f      	ldr	r1, [pc, #252]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7ff fb66 	bl	80018e4 <HAL_GetTick>
 8002218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221c:	f7ff fb62 	bl	80018e4 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e37c      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800222e:	4b37      	ldr	r3, [pc, #220]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0f0      	beq.n	800221c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223a:	f7ff fb83 	bl	8001944 <HAL_GetREVID>
 800223e:	4603      	mov	r3, r0
 8002240:	f241 0203 	movw	r2, #4099	; 0x1003
 8002244:	4293      	cmp	r3, r2
 8002246:	d817      	bhi.n	8002278 <HAL_RCC_OscConfig+0x1f4>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b40      	cmp	r3, #64	; 0x40
 800224e:	d108      	bne.n	8002262 <HAL_RCC_OscConfig+0x1de>
 8002250:	4b2e      	ldr	r3, [pc, #184]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002258:	4a2c      	ldr	r2, [pc, #176]	; (800230c <HAL_RCC_OscConfig+0x288>)
 800225a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002260:	e07a      	b.n	8002358 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	4b2a      	ldr	r3, [pc, #168]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	031b      	lsls	r3, r3, #12
 8002270:	4926      	ldr	r1, [pc, #152]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002276:	e06f      	b.n	8002358 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002278:	4b24      	ldr	r3, [pc, #144]	; (800230c <HAL_RCC_OscConfig+0x288>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	061b      	lsls	r3, r3, #24
 8002286:	4921      	ldr	r1, [pc, #132]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800228c:	e064      	b.n	8002358 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d047      	beq.n	8002326 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002296:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 0219 	bic.w	r2, r3, #25
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	491a      	ldr	r1, [pc, #104]	; (800230c <HAL_RCC_OscConfig+0x288>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7ff fb1c 	bl	80018e4 <HAL_GetTick>
 80022ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b0:	f7ff fb18 	bl	80018e4 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e332      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_RCC_OscConfig+0x288>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ce:	f7ff fb39 	bl	8001944 <HAL_GetREVID>
 80022d2:	4603      	mov	r3, r0
 80022d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80022d8:	4293      	cmp	r3, r2
 80022da:	d819      	bhi.n	8002310 <HAL_RCC_OscConfig+0x28c>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d108      	bne.n	80022f6 <HAL_RCC_OscConfig+0x272>
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_RCC_OscConfig+0x288>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80022ec:	4a07      	ldr	r2, [pc, #28]	; (800230c <HAL_RCC_OscConfig+0x288>)
 80022ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f2:	6053      	str	r3, [r2, #4]
 80022f4:	e030      	b.n	8002358 <HAL_RCC_OscConfig+0x2d4>
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCC_OscConfig+0x288>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	031b      	lsls	r3, r3, #12
 8002304:	4901      	ldr	r1, [pc, #4]	; (800230c <HAL_RCC_OscConfig+0x288>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]
 800230a:	e025      	b.n	8002358 <HAL_RCC_OscConfig+0x2d4>
 800230c:	58024400 	.word	0x58024400
 8002310:	4b9a      	ldr	r3, [pc, #616]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	061b      	lsls	r3, r3, #24
 800231e:	4997      	ldr	r1, [pc, #604]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
 8002324:	e018      	b.n	8002358 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002326:	4b95      	ldr	r3, [pc, #596]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a94      	ldr	r2, [pc, #592]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7ff fad7 	bl	80018e4 <HAL_GetTick>
 8002336:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233a:	f7ff fad3 	bl	80018e4 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e2ed      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800234c:	4b8b      	ldr	r3, [pc, #556]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f0      	bne.n	800233a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80a9 	beq.w	80024b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002366:	4b85      	ldr	r3, [pc, #532]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800236e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002370:	4b82      	ldr	r3, [pc, #520]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b08      	cmp	r3, #8
 800237a:	d007      	beq.n	800238c <HAL_RCC_OscConfig+0x308>
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	2b18      	cmp	r3, #24
 8002380:	d13a      	bne.n	80023f8 <HAL_RCC_OscConfig+0x374>
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d135      	bne.n	80023f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800238c:	4b7b      	ldr	r3, [pc, #492]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_OscConfig+0x320>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b80      	cmp	r3, #128	; 0x80
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e2c1      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023a4:	f7ff face 	bl	8001944 <HAL_GetREVID>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d817      	bhi.n	80023e2 <HAL_RCC_OscConfig+0x35e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	2b20      	cmp	r3, #32
 80023b8:	d108      	bne.n	80023cc <HAL_RCC_OscConfig+0x348>
 80023ba:	4b70      	ldr	r3, [pc, #448]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80023c2:	4a6e      	ldr	r2, [pc, #440]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 80023c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023c8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023ca:	e075      	b.n	80024b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023cc:	4b6b      	ldr	r3, [pc, #428]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	069b      	lsls	r3, r3, #26
 80023da:	4968      	ldr	r1, [pc, #416]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023e0:	e06a      	b.n	80024b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023e2:	4b66      	ldr	r3, [pc, #408]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	061b      	lsls	r3, r3, #24
 80023f0:	4962      	ldr	r1, [pc, #392]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023f6:	e05f      	b.n	80024b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d042      	beq.n	8002486 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002400:	4b5e      	ldr	r3, [pc, #376]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a5d      	ldr	r2, [pc, #372]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800240a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240c:	f7ff fa6a 	bl	80018e4 <HAL_GetTick>
 8002410:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002414:	f7ff fa66 	bl	80018e4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e280      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002426:	4b55      	ldr	r3, [pc, #340]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002432:	f7ff fa87 	bl	8001944 <HAL_GetREVID>
 8002436:	4603      	mov	r3, r0
 8002438:	f241 0203 	movw	r2, #4099	; 0x1003
 800243c:	4293      	cmp	r3, r2
 800243e:	d817      	bhi.n	8002470 <HAL_RCC_OscConfig+0x3ec>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	2b20      	cmp	r3, #32
 8002446:	d108      	bne.n	800245a <HAL_RCC_OscConfig+0x3d6>
 8002448:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002450:	4a4a      	ldr	r2, [pc, #296]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002452:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002456:	6053      	str	r3, [r2, #4]
 8002458:	e02e      	b.n	80024b8 <HAL_RCC_OscConfig+0x434>
 800245a:	4b48      	ldr	r3, [pc, #288]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	069b      	lsls	r3, r3, #26
 8002468:	4944      	ldr	r1, [pc, #272]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
 800246e:	e023      	b.n	80024b8 <HAL_RCC_OscConfig+0x434>
 8002470:	4b42      	ldr	r3, [pc, #264]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	061b      	lsls	r3, r3, #24
 800247e:	493f      	ldr	r1, [pc, #252]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002480:	4313      	orrs	r3, r2
 8002482:	60cb      	str	r3, [r1, #12]
 8002484:	e018      	b.n	80024b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a3c      	ldr	r2, [pc, #240]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 800248c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7ff fa27 	bl	80018e4 <HAL_GetTick>
 8002496:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800249a:	f7ff fa23 	bl	80018e4 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e23d      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024ac:	4b33      	ldr	r3, [pc, #204]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1f0      	bne.n	800249a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d036      	beq.n	8002532 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d019      	beq.n	8002500 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 80024ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d0:	4a2a      	ldr	r2, [pc, #168]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7ff fa04 	bl	80018e4 <HAL_GetTick>
 80024dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e0:	f7ff fa00 	bl	80018e4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e21a      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024f2:	4b22      	ldr	r3, [pc, #136]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 80024f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0x45c>
 80024fe:	e018      	b.n	8002532 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002500:	4b1e      	ldr	r3, [pc, #120]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002504:	4a1d      	ldr	r2, [pc, #116]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7ff f9ea 	bl	80018e4 <HAL_GetTick>
 8002510:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002514:	f7ff f9e6 	bl	80018e4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e200      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002526:	4b15      	ldr	r3, [pc, #84]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b00      	cmp	r3, #0
 800253c:	d039      	beq.n	80025b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01c      	beq.n	8002580 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a0c      	ldr	r2, [pc, #48]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 800254c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002550:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002552:	f7ff f9c7 	bl	80018e4 <HAL_GetTick>
 8002556:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800255a:	f7ff f9c3 	bl	80018e4 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b02      	cmp	r3, #2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e1dd      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_RCC_OscConfig+0x4f8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x4d6>
 8002578:	e01b      	b.n	80025b2 <HAL_RCC_OscConfig+0x52e>
 800257a:	bf00      	nop
 800257c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002580:	4b9b      	ldr	r3, [pc, #620]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a9a      	ldr	r2, [pc, #616]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800258a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800258c:	f7ff f9aa 	bl	80018e4 <HAL_GetTick>
 8002590:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002594:	f7ff f9a6 	bl	80018e4 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e1c0      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025a6:	4b92      	ldr	r3, [pc, #584]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8081 	beq.w	80026c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025c0:	4b8c      	ldr	r3, [pc, #560]	; (80027f4 <HAL_RCC_OscConfig+0x770>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a8b      	ldr	r2, [pc, #556]	; (80027f4 <HAL_RCC_OscConfig+0x770>)
 80025c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025cc:	f7ff f98a 	bl	80018e4 <HAL_GetTick>
 80025d0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d4:	f7ff f986 	bl	80018e4 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	; 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e1a0      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025e6:	4b83      	ldr	r3, [pc, #524]	; (80027f4 <HAL_RCC_OscConfig+0x770>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d106      	bne.n	8002608 <HAL_RCC_OscConfig+0x584>
 80025fa:	4b7d      	ldr	r3, [pc, #500]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a7c      	ldr	r2, [pc, #496]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	e02d      	b.n	8002664 <HAL_RCC_OscConfig+0x5e0>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10c      	bne.n	800262a <HAL_RCC_OscConfig+0x5a6>
 8002610:	4b77      	ldr	r3, [pc, #476]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002614:	4a76      	ldr	r2, [pc, #472]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	6713      	str	r3, [r2, #112]	; 0x70
 800261c:	4b74      	ldr	r3, [pc, #464]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a73      	ldr	r2, [pc, #460]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002622:	f023 0304 	bic.w	r3, r3, #4
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
 8002628:	e01c      	b.n	8002664 <HAL_RCC_OscConfig+0x5e0>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b05      	cmp	r3, #5
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0x5c8>
 8002632:	4b6f      	ldr	r3, [pc, #444]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a6e      	ldr	r2, [pc, #440]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	6713      	str	r3, [r2, #112]	; 0x70
 800263e:	4b6c      	ldr	r3, [pc, #432]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	4a6b      	ldr	r2, [pc, #428]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6713      	str	r3, [r2, #112]	; 0x70
 800264a:	e00b      	b.n	8002664 <HAL_RCC_OscConfig+0x5e0>
 800264c:	4b68      	ldr	r3, [pc, #416]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	4a67      	ldr	r2, [pc, #412]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	6713      	str	r3, [r2, #112]	; 0x70
 8002658:	4b65      	ldr	r3, [pc, #404]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	4a64      	ldr	r2, [pc, #400]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 800265e:	f023 0304 	bic.w	r3, r3, #4
 8002662:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d015      	beq.n	8002698 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7ff f93a 	bl	80018e4 <HAL_GetTick>
 8002670:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002672:	e00a      	b.n	800268a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002674:	f7ff f936 	bl	80018e4 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e14e      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800268a:	4b59      	ldr	r3, [pc, #356]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ee      	beq.n	8002674 <HAL_RCC_OscConfig+0x5f0>
 8002696:	e014      	b.n	80026c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7ff f924 	bl	80018e4 <HAL_GetTick>
 800269c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a0:	f7ff f920 	bl	80018e4 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e138      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026b6:	4b4e      	ldr	r3, [pc, #312]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1ee      	bne.n	80026a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 812d 	beq.w	8002926 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80026cc:	4b48      	ldr	r3, [pc, #288]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026d4:	2b18      	cmp	r3, #24
 80026d6:	f000 80bd 	beq.w	8002854 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	2b02      	cmp	r3, #2
 80026e0:	f040 809e 	bne.w	8002820 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e4:	4b42      	ldr	r3, [pc, #264]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a41      	ldr	r2, [pc, #260]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80026ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7ff f8f8 	bl	80018e4 <HAL_GetTick>
 80026f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f8:	f7ff f8f4 	bl	80018e4 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e10e      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800270a:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002716:	4b36      	ldr	r3, [pc, #216]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800271a:	4b37      	ldr	r3, [pc, #220]	; (80027f8 <HAL_RCC_OscConfig+0x774>)
 800271c:	4013      	ands	r3, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	430a      	orrs	r2, r1
 800272a:	4931      	ldr	r1, [pc, #196]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 800272c:	4313      	orrs	r3, r2
 800272e:	628b      	str	r3, [r1, #40]	; 0x28
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002734:	3b01      	subs	r3, #1
 8002736:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273e:	3b01      	subs	r3, #1
 8002740:	025b      	lsls	r3, r3, #9
 8002742:	b29b      	uxth	r3, r3
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274a:	3b01      	subs	r3, #1
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002758:	3b01      	subs	r3, #1
 800275a:	061b      	lsls	r3, r3, #24
 800275c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002760:	4923      	ldr	r1, [pc, #140]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002762:	4313      	orrs	r3, r2
 8002764:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002766:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	4a21      	ldr	r2, [pc, #132]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002772:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002776:	4b21      	ldr	r3, [pc, #132]	; (80027fc <HAL_RCC_OscConfig+0x778>)
 8002778:	4013      	ands	r3, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800277e:	00d2      	lsls	r2, r2, #3
 8002780:	491b      	ldr	r1, [pc, #108]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002782:	4313      	orrs	r3, r2
 8002784:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002786:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	f023 020c 	bic.w	r2, r3, #12
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	4917      	ldr	r1, [pc, #92]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 8002794:	4313      	orrs	r3, r2
 8002796:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002798:	4b15      	ldr	r3, [pc, #84]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	f023 0202 	bic.w	r2, r3, #2
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a4:	4912      	ldr	r1, [pc, #72]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80027aa:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	4a0d      	ldr	r2, [pc, #52]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	4a0a      	ldr	r2, [pc, #40]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80027c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_RCC_OscConfig+0x76c>)
 80027e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7ff f87d 	bl	80018e4 <HAL_GetTick>
 80027ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027ec:	e011      	b.n	8002812 <HAL_RCC_OscConfig+0x78e>
 80027ee:	bf00      	nop
 80027f0:	58024400 	.word	0x58024400
 80027f4:	58024800 	.word	0x58024800
 80027f8:	fffffc0c 	.word	0xfffffc0c
 80027fc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002800:	f7ff f870 	bl	80018e4 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e08a      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <HAL_RCC_OscConfig+0x8ac>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x77c>
 800281e:	e082      	b.n	8002926 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002820:	4b43      	ldr	r3, [pc, #268]	; (8002930 <HAL_RCC_OscConfig+0x8ac>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a42      	ldr	r2, [pc, #264]	; (8002930 <HAL_RCC_OscConfig+0x8ac>)
 8002826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800282a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7ff f85a 	bl	80018e4 <HAL_GetTick>
 8002830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002834:	f7ff f856 	bl	80018e4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e070      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002846:	4b3a      	ldr	r3, [pc, #232]	; (8002930 <HAL_RCC_OscConfig+0x8ac>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x7b0>
 8002852:	e068      	b.n	8002926 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002854:	4b36      	ldr	r3, [pc, #216]	; (8002930 <HAL_RCC_OscConfig+0x8ac>)
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800285a:	4b35      	ldr	r3, [pc, #212]	; (8002930 <HAL_RCC_OscConfig+0x8ac>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	2b01      	cmp	r3, #1
 8002866:	d031      	beq.n	80028cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f003 0203 	and.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d12a      	bne.n	80028cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d122      	bne.n	80028cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002892:	429a      	cmp	r2, r3
 8002894:	d11a      	bne.n	80028cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	0a5b      	lsrs	r3, r3, #9
 800289a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d111      	bne.n	80028cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d108      	bne.n	80028cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	0e1b      	lsrs	r3, r3, #24
 80028be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e02b      	b.n	8002928 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80028d0:	4b17      	ldr	r3, [pc, #92]	; (8002930 <HAL_RCC_OscConfig+0x8ac>)
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d4:	08db      	lsrs	r3, r3, #3
 80028d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d01f      	beq.n	8002926 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80028e6:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_RCC_OscConfig+0x8ac>)
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	4a11      	ldr	r2, [pc, #68]	; (8002930 <HAL_RCC_OscConfig+0x8ac>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028f2:	f7fe fff7 	bl	80018e4 <HAL_GetTick>
 80028f6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80028f8:	bf00      	nop
 80028fa:	f7fe fff3 	bl	80018e4 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	4293      	cmp	r3, r2
 8002904:	d0f9      	beq.n	80028fa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <HAL_RCC_OscConfig+0x8ac>)
 8002908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <HAL_RCC_OscConfig+0x8b0>)
 800290c:	4013      	ands	r3, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002912:	00d2      	lsls	r2, r2, #3
 8002914:	4906      	ldr	r1, [pc, #24]	; (8002930 <HAL_RCC_OscConfig+0x8ac>)
 8002916:	4313      	orrs	r3, r2
 8002918:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_OscConfig+0x8ac>)
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_RCC_OscConfig+0x8ac>)
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3730      	adds	r7, #48	; 0x30
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	58024400 	.word	0x58024400
 8002934:	ffff0007 	.word	0xffff0007

08002938 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e19c      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b8a      	ldr	r3, [pc, #552]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d910      	bls.n	800297c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b87      	ldr	r3, [pc, #540]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 020f 	bic.w	r2, r3, #15
 8002962:	4985      	ldr	r1, [pc, #532]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b83      	ldr	r3, [pc, #524]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e184      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d010      	beq.n	80029aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	4b7b      	ldr	r3, [pc, #492]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002994:	429a      	cmp	r2, r3
 8002996:	d908      	bls.n	80029aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002998:	4b78      	ldr	r3, [pc, #480]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	4975      	ldr	r1, [pc, #468]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d010      	beq.n	80029d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	4b70      	ldr	r3, [pc, #448]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d908      	bls.n	80029d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029c6:	4b6d      	ldr	r3, [pc, #436]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	496a      	ldr	r1, [pc, #424]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d010      	beq.n	8002a06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699a      	ldr	r2, [r3, #24]
 80029e8:	4b64      	ldr	r3, [pc, #400]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d908      	bls.n	8002a06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029f4:	4b61      	ldr	r3, [pc, #388]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	495e      	ldr	r1, [pc, #376]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d010      	beq.n	8002a34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69da      	ldr	r2, [r3, #28]
 8002a16:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d908      	bls.n	8002a34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a22:	4b56      	ldr	r3, [pc, #344]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	4953      	ldr	r1, [pc, #332]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d010      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	4b4d      	ldr	r3, [pc, #308]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d908      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a50:	4b4a      	ldr	r3, [pc, #296]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f023 020f 	bic.w	r2, r3, #15
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4947      	ldr	r1, [pc, #284]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d055      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a6e:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4940      	ldr	r1, [pc, #256]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d107      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a88:	4b3c      	ldr	r3, [pc, #240]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d121      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0f6      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aa0:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d115      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0ea      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ab8:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e0de      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0d6      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ad8:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	f023 0207 	bic.w	r2, r3, #7
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	4925      	ldr	r1, [pc, #148]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aea:	f7fe fefb 	bl	80018e4 <HAL_GetTick>
 8002aee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af2:	f7fe fef7 	bl	80018e4 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0be      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b08:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d1eb      	bne.n	8002af2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d010      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d208      	bcs.n	8002b48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f023 020f 	bic.w	r2, r3, #15
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	490e      	ldr	r1, [pc, #56]	; (8002b7c <HAL_RCC_ClockConfig+0x244>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d214      	bcs.n	8002b80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 020f 	bic.w	r2, r3, #15
 8002b5e:	4906      	ldr	r1, [pc, #24]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <HAL_RCC_ClockConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e086      	b.n	8002c86 <HAL_RCC_ClockConfig+0x34e>
 8002b78:	52002000 	.word	0x52002000
 8002b7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d010      	beq.n	8002bae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	4b3f      	ldr	r3, [pc, #252]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d208      	bcs.n	8002bae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b9c:	4b3c      	ldr	r3, [pc, #240]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	4939      	ldr	r1, [pc, #228]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d010      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d208      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bca:	4b31      	ldr	r3, [pc, #196]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	492e      	ldr	r1, [pc, #184]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d010      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d208      	bcs.n	8002c0a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bf8:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	4922      	ldr	r1, [pc, #136]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d010      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69da      	ldr	r2, [r3, #28]
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d208      	bcs.n	8002c38 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c26:	4b1a      	ldr	r3, [pc, #104]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4917      	ldr	r1, [pc, #92]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c38:	f000 f834 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	4912      	ldr	r1, [pc, #72]	; (8002c94 <HAL_RCC_ClockConfig+0x35c>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
 8002c54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_RCC_ClockConfig+0x358>)
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <HAL_RCC_ClockConfig+0x35c>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_RCC_ClockConfig+0x360>)
 8002c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c70:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <HAL_RCC_ClockConfig+0x364>)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_RCC_ClockConfig+0x368>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe fde8 	bl	8001850 <HAL_InitTick>
 8002c80:	4603      	mov	r3, r0
 8002c82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	58024400 	.word	0x58024400
 8002c94:	0800803c 	.word	0x0800803c
 8002c98:	24000004 	.word	0x24000004
 8002c9c:	24000000 	.word	0x24000000
 8002ca0:	24000008 	.word	0x24000008

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002caa:	4bb3      	ldr	r3, [pc, #716]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cb2:	2b18      	cmp	r3, #24
 8002cb4:	f200 8155 	bhi.w	8002f62 <HAL_RCC_GetSysClockFreq+0x2be>
 8002cb8:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002d25 	.word	0x08002d25
 8002cc4:	08002f63 	.word	0x08002f63
 8002cc8:	08002f63 	.word	0x08002f63
 8002ccc:	08002f63 	.word	0x08002f63
 8002cd0:	08002f63 	.word	0x08002f63
 8002cd4:	08002f63 	.word	0x08002f63
 8002cd8:	08002f63 	.word	0x08002f63
 8002cdc:	08002f63 	.word	0x08002f63
 8002ce0:	08002d4b 	.word	0x08002d4b
 8002ce4:	08002f63 	.word	0x08002f63
 8002ce8:	08002f63 	.word	0x08002f63
 8002cec:	08002f63 	.word	0x08002f63
 8002cf0:	08002f63 	.word	0x08002f63
 8002cf4:	08002f63 	.word	0x08002f63
 8002cf8:	08002f63 	.word	0x08002f63
 8002cfc:	08002f63 	.word	0x08002f63
 8002d00:	08002d51 	.word	0x08002d51
 8002d04:	08002f63 	.word	0x08002f63
 8002d08:	08002f63 	.word	0x08002f63
 8002d0c:	08002f63 	.word	0x08002f63
 8002d10:	08002f63 	.word	0x08002f63
 8002d14:	08002f63 	.word	0x08002f63
 8002d18:	08002f63 	.word	0x08002f63
 8002d1c:	08002f63 	.word	0x08002f63
 8002d20:	08002d57 	.word	0x08002d57
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d24:	4b94      	ldr	r3, [pc, #592]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d009      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d30:	4b91      	ldr	r3, [pc, #580]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	08db      	lsrs	r3, r3, #3
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	4a90      	ldr	r2, [pc, #576]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002d42:	e111      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d44:	4b8d      	ldr	r3, [pc, #564]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d46:	61bb      	str	r3, [r7, #24]
      break;
 8002d48:	e10e      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002d4a:	4b8d      	ldr	r3, [pc, #564]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d4c:	61bb      	str	r3, [r7, #24]
      break;
 8002d4e:	e10b      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002d50:	4b8c      	ldr	r3, [pc, #560]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d52:	61bb      	str	r3, [r7, #24]
      break;
 8002d54:	e108      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d56:	4b88      	ldr	r3, [pc, #544]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002d60:	4b85      	ldr	r3, [pc, #532]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d6a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d6c:	4b82      	ldr	r3, [pc, #520]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d76:	4b80      	ldr	r3, [pc, #512]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7a:	08db      	lsrs	r3, r3, #3
 8002d7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	fb02 f303 	mul.w	r3, r2, r3
 8002d86:	ee07 3a90 	vmov	s15, r3
 8002d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d8e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80e1 	beq.w	8002f5c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	f000 8083 	beq.w	8002ea8 <HAL_RCC_GetSysClockFreq+0x204>
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	f200 80a1 	bhi.w	8002eec <HAL_RCC_GetSysClockFreq+0x248>
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0x114>
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d056      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002db6:	e099      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002db8:	4b6f      	ldr	r3, [pc, #444]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d02d      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002dc4:	4b6c      	ldr	r3, [pc, #432]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	08db      	lsrs	r3, r3, #3
 8002dca:	f003 0303 	and.w	r3, r3, #3
 8002dce:	4a6b      	ldr	r2, [pc, #428]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	ee07 3a90 	vmov	s15, r3
 8002ddc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dee:	4b62      	ldr	r3, [pc, #392]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e1e:	e087      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e32:	4b51      	ldr	r3, [pc, #324]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e62:	e065      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	ee07 3a90 	vmov	s15, r3
 8002e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002f90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e76:	4b40      	ldr	r3, [pc, #256]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ea6:	e043      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	ee07 3a90 	vmov	s15, r3
 8002eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002f94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eba:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec2:	ee07 3a90 	vmov	s15, r3
 8002ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ece:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eea:	e021      	b.n	8002f30 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002f90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002f88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f2e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002f30:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	0a5b      	lsrs	r3, r3, #9
 8002f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	ee07 3a90 	vmov	s15, r3
 8002f44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f48:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f54:	ee17 3a90 	vmov	r3, s15
 8002f58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002f5a:	e005      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61bb      	str	r3, [r7, #24]
      break;
 8002f60:	e002      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002f62:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f64:	61bb      	str	r3, [r7, #24]
      break;
 8002f66:	bf00      	nop
  }

  return sysclockfreq;
 8002f68:	69bb      	ldr	r3, [r7, #24]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3724      	adds	r7, #36	; 0x24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	03d09000 	.word	0x03d09000
 8002f80:	003d0900 	.word	0x003d0900
 8002f84:	017d7840 	.word	0x017d7840
 8002f88:	46000000 	.word	0x46000000
 8002f8c:	4c742400 	.word	0x4c742400
 8002f90:	4a742400 	.word	0x4a742400
 8002f94:	4bbebc20 	.word	0x4bbebc20

08002f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f9e:	f7ff fe81 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	490f      	ldr	r1, [pc, #60]	; (8002fec <HAL_RCC_GetHCLKFreq+0x54>)
 8002fb0:	5ccb      	ldrb	r3, [r1, r3]
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	4a09      	ldr	r2, [pc, #36]	; (8002fec <HAL_RCC_GetHCLKFreq+0x54>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fd4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fd6:	4a07      	ldr	r2, [pc, #28]	; (8002ff4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002fdc:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	58024400 	.word	0x58024400
 8002fec:	0800803c 	.word	0x0800803c
 8002ff0:	24000004 	.word	0x24000004
 8002ff4:	24000000 	.word	0x24000000

08002ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002ffc:	f7ff ffcc 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	4904      	ldr	r1, [pc, #16]	; (8003020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003018:	4618      	mov	r0, r3
 800301a:	bd80      	pop	{r7, pc}
 800301c:	58024400 	.word	0x58024400
 8003020:	0800803c 	.word	0x0800803c

08003024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003028:	f7ff ffb6 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 800302c:	4602      	mov	r2, r0
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	4904      	ldr	r1, [pc, #16]	; (800304c <HAL_RCC_GetPCLK2Freq+0x28>)
 800303a:	5ccb      	ldrb	r3, [r1, r3]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	58024400 	.word	0x58024400
 800304c:	0800803c 	.word	0x0800803c

08003050 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003054:	b0ca      	sub	sp, #296	; 0x128
 8003056:	af00      	add	r7, sp, #0
 8003058:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800305c:	2300      	movs	r3, #0
 800305e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003062:	2300      	movs	r3, #0
 8003064:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003070:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003074:	2500      	movs	r5, #0
 8003076:	ea54 0305 	orrs.w	r3, r4, r5
 800307a:	d049      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800307c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003082:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003086:	d02f      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003088:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800308c:	d828      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800308e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003092:	d01a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003094:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003098:	d822      	bhi.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800309e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a2:	d007      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030a4:	e01c      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030a6:	4bb8      	ldr	r3, [pc, #736]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	4ab7      	ldr	r2, [pc, #732]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030b2:	e01a      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b8:	3308      	adds	r3, #8
 80030ba:	2102      	movs	r1, #2
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 fc8f 	bl	80049e0 <RCCEx_PLL2_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030c8:	e00f      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ce:	3328      	adds	r3, #40	; 0x28
 80030d0:	2102      	movs	r1, #2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 fd36 	bl	8004b44 <RCCEx_PLL3_Config>
 80030d8:	4603      	mov	r3, r0
 80030da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030de:	e004      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030e6:	e000      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80030e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10a      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80030f2:	4ba5      	ldr	r3, [pc, #660]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003100:	4aa1      	ldr	r2, [pc, #644]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003102:	430b      	orrs	r3, r1
 8003104:	6513      	str	r3, [r2, #80]	; 0x50
 8003106:	e003      	b.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003108:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800310c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800311c:	f04f 0900 	mov.w	r9, #0
 8003120:	ea58 0309 	orrs.w	r3, r8, r9
 8003124:	d047      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	2b04      	cmp	r3, #4
 800312e:	d82a      	bhi.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003130:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	0800314d 	.word	0x0800314d
 800313c:	0800315b 	.word	0x0800315b
 8003140:	08003171 	.word	0x08003171
 8003144:	0800318f 	.word	0x0800318f
 8003148:	0800318f 	.word	0x0800318f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800314c:	4b8e      	ldr	r3, [pc, #568]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	4a8d      	ldr	r2, [pc, #564]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003156:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003158:	e01a      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800315a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800315e:	3308      	adds	r3, #8
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f001 fc3c 	bl	80049e0 <RCCEx_PLL2_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800316e:	e00f      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003174:	3328      	adds	r3, #40	; 0x28
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f001 fce3 	bl	8004b44 <RCCEx_PLL3_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003184:	e004      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800318c:	e000      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800318e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10a      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003198:	4b7b      	ldr	r3, [pc, #492]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	f023 0107 	bic.w	r1, r3, #7
 80031a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a6:	4a78      	ldr	r2, [pc, #480]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6513      	str	r3, [r2, #80]	; 0x50
 80031ac:	e003      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80031b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80031c2:	f04f 0b00 	mov.w	fp, #0
 80031c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80031ca:	d04c      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80031cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d6:	d030      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80031d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031dc:	d829      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80031de:	2bc0      	cmp	r3, #192	; 0xc0
 80031e0:	d02d      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80031e2:	2bc0      	cmp	r3, #192	; 0xc0
 80031e4:	d825      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80031e6:	2b80      	cmp	r3, #128	; 0x80
 80031e8:	d018      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80031ea:	2b80      	cmp	r3, #128	; 0x80
 80031ec:	d821      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d002      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d007      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80031f6:	e01c      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f8:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	4a62      	ldr	r2, [pc, #392]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003202:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003204:	e01c      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800320a:	3308      	adds	r3, #8
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f001 fbe6 	bl	80049e0 <RCCEx_PLL2_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800321a:	e011      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800321c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003220:	3328      	adds	r3, #40	; 0x28
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f001 fc8d 	bl	8004b44 <RCCEx_PLL3_Config>
 800322a:	4603      	mov	r3, r0
 800322c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003230:	e006      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003238:	e002      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800323a:	bf00      	nop
 800323c:	e000      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800323e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003240:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003248:	4b4f      	ldr	r3, [pc, #316]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800324a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003256:	4a4c      	ldr	r2, [pc, #304]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003258:	430b      	orrs	r3, r1
 800325a:	6513      	str	r3, [r2, #80]	; 0x50
 800325c:	e003      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003262:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003272:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003276:	2300      	movs	r3, #0
 8003278:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800327c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003280:	460b      	mov	r3, r1
 8003282:	4313      	orrs	r3, r2
 8003284:	d053      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800328a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800328e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003292:	d035      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003294:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003298:	d82e      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800329a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800329e:	d031      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80032a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032a4:	d828      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80032a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032aa:	d01a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80032ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b0:	d822      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80032b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ba:	d007      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80032bc:	e01c      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032be:	4b32      	ldr	r3, [pc, #200]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c2:	4a31      	ldr	r2, [pc, #196]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032ca:	e01c      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032d0:	3308      	adds	r3, #8
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f001 fb83 	bl	80049e0 <RCCEx_PLL2_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80032e0:	e011      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e6:	3328      	adds	r3, #40	; 0x28
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 fc2a 	bl	8004b44 <RCCEx_PLL3_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032f6:	e006      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032fe:	e002      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003300:	bf00      	nop
 8003302:	e000      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10b      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800330e:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003312:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800331a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800331e:	4a1a      	ldr	r2, [pc, #104]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003320:	430b      	orrs	r3, r1
 8003322:	6593      	str	r3, [r2, #88]	; 0x58
 8003324:	e003      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800332a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800332e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800333a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800333e:	2300      	movs	r3, #0
 8003340:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003344:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003348:	460b      	mov	r3, r1
 800334a:	4313      	orrs	r3, r2
 800334c:	d056      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800334e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003352:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003356:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800335a:	d038      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800335c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003360:	d831      	bhi.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003362:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003366:	d034      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003368:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800336c:	d82b      	bhi.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800336e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003372:	d01d      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003374:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003378:	d825      	bhi.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800337a:	2b00      	cmp	r3, #0
 800337c:	d006      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800337e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003382:	d00a      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003384:	e01f      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003386:	bf00      	nop
 8003388:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800338c:	4ba2      	ldr	r3, [pc, #648]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	4aa1      	ldr	r2, [pc, #644]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003396:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003398:	e01c      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800339a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800339e:	3308      	adds	r3, #8
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f001 fb1c 	bl	80049e0 <RCCEx_PLL2_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80033ae:	e011      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b4:	3328      	adds	r3, #40	; 0x28
 80033b6:	2100      	movs	r1, #0
 80033b8:	4618      	mov	r0, r3
 80033ba:	f001 fbc3 	bl	8004b44 <RCCEx_PLL3_Config>
 80033be:	4603      	mov	r3, r0
 80033c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033c4:	e006      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033cc:	e002      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80033ce:	bf00      	nop
 80033d0:	e000      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80033d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10b      	bne.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033dc:	4b8e      	ldr	r3, [pc, #568]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80033e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033ec:	4a8a      	ldr	r2, [pc, #552]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033ee:	430b      	orrs	r3, r1
 80033f0:	6593      	str	r3, [r2, #88]	; 0x58
 80033f2:	e003      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003408:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800340c:	2300      	movs	r3, #0
 800340e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003412:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003416:	460b      	mov	r3, r1
 8003418:	4313      	orrs	r3, r2
 800341a:	d03a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800341c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003422:	2b30      	cmp	r3, #48	; 0x30
 8003424:	d01f      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003426:	2b30      	cmp	r3, #48	; 0x30
 8003428:	d819      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800342a:	2b20      	cmp	r3, #32
 800342c:	d00c      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800342e:	2b20      	cmp	r3, #32
 8003430:	d815      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d019      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003436:	2b10      	cmp	r3, #16
 8003438:	d111      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800343a:	4b77      	ldr	r3, [pc, #476]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	4a76      	ldr	r2, [pc, #472]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003444:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003446:	e011      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800344c:	3308      	adds	r3, #8
 800344e:	2102      	movs	r1, #2
 8003450:	4618      	mov	r0, r3
 8003452:	f001 fac5 	bl	80049e0 <RCCEx_PLL2_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800345c:	e006      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003464:	e002      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800346a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10a      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003474:	4b68      	ldr	r3, [pc, #416]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003478:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800347c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003482:	4a65      	ldr	r2, [pc, #404]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003484:	430b      	orrs	r3, r1
 8003486:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003488:	e003      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800348e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800349e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80034a2:	2300      	movs	r3, #0
 80034a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80034a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4313      	orrs	r3, r2
 80034b0:	d051      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80034b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034bc:	d035      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80034be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034c2:	d82e      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80034c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034c8:	d031      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80034ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034ce:	d828      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80034d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d4:	d01a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80034d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034da:	d822      	bhi.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80034e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e4:	d007      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80034e6:	e01c      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e8:	4b4b      	ldr	r3, [pc, #300]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	4a4a      	ldr	r2, [pc, #296]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034f4:	e01c      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034fa:	3308      	adds	r3, #8
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 fa6e 	bl	80049e0 <RCCEx_PLL2_Config>
 8003504:	4603      	mov	r3, r0
 8003506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800350a:	e011      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800350c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003510:	3328      	adds	r3, #40	; 0x28
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f001 fb15 	bl	8004b44 <RCCEx_PLL3_Config>
 800351a:	4603      	mov	r3, r0
 800351c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003520:	e006      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003528:	e002      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800352a:	bf00      	nop
 800352c:	e000      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800352e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10a      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003538:	4b37      	ldr	r3, [pc, #220]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003546:	4a34      	ldr	r2, [pc, #208]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003548:	430b      	orrs	r3, r1
 800354a:	6513      	str	r3, [r2, #80]	; 0x50
 800354c:	e003      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800354e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003552:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003562:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003566:	2300      	movs	r3, #0
 8003568:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800356c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003570:	460b      	mov	r3, r1
 8003572:	4313      	orrs	r3, r2
 8003574:	d056      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800357a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800357c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003580:	d033      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003582:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003586:	d82c      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003588:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800358c:	d02f      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800358e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003592:	d826      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003594:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003598:	d02b      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800359a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800359e:	d820      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035a4:	d012      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80035a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035aa:	d81a      	bhi.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d022      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b4:	d115      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ba:	3308      	adds	r3, #8
 80035bc:	2101      	movs	r1, #1
 80035be:	4618      	mov	r0, r3
 80035c0:	f001 fa0e 	bl	80049e0 <RCCEx_PLL2_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035ca:	e015      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d0:	3328      	adds	r3, #40	; 0x28
 80035d2:	2101      	movs	r1, #1
 80035d4:	4618      	mov	r0, r3
 80035d6:	f001 fab5 	bl	8004b44 <RCCEx_PLL3_Config>
 80035da:	4603      	mov	r3, r0
 80035dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035e0:	e00a      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035e8:	e006      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035ea:	bf00      	nop
 80035ec:	e004      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10d      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003604:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800360e:	4a02      	ldr	r2, [pc, #8]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003610:	430b      	orrs	r3, r1
 8003612:	6513      	str	r3, [r2, #80]	; 0x50
 8003614:	e006      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003616:	bf00      	nop
 8003618:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003620:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003634:	2300      	movs	r3, #0
 8003636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800363a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800363e:	460b      	mov	r3, r1
 8003640:	4313      	orrs	r3, r2
 8003642:	d055      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003648:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800364c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003650:	d033      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003652:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003656:	d82c      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365c:	d02f      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800365e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003662:	d826      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003664:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003668:	d02b      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800366a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800366e:	d820      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003674:	d012      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800367a:	d81a      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d022      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003680:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003684:	d115      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800368a:	3308      	adds	r3, #8
 800368c:	2101      	movs	r1, #1
 800368e:	4618      	mov	r0, r3
 8003690:	f001 f9a6 	bl	80049e0 <RCCEx_PLL2_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800369a:	e015      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800369c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a0:	3328      	adds	r3, #40	; 0x28
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 fa4d 	bl	8004b44 <RCCEx_PLL3_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036b0:	e00a      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036b8:	e006      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036ba:	bf00      	nop
 80036bc:	e004      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036be:	bf00      	nop
 80036c0:	e002      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10b      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80036d0:	4ba3      	ldr	r3, [pc, #652]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036e0:	4a9f      	ldr	r2, [pc, #636]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036e2:	430b      	orrs	r3, r1
 80036e4:	6593      	str	r3, [r2, #88]	; 0x58
 80036e6:	e003      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80036fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003700:	2300      	movs	r3, #0
 8003702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800370a:	460b      	mov	r3, r1
 800370c:	4313      	orrs	r3, r2
 800370e:	d037      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800371a:	d00e      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800371c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003720:	d816      	bhi.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d018      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800372a:	d111      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372c:	4b8c      	ldr	r3, [pc, #560]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	4a8b      	ldr	r2, [pc, #556]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003736:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003738:	e00f      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373e:	3308      	adds	r3, #8
 8003740:	2101      	movs	r1, #1
 8003742:	4618      	mov	r0, r3
 8003744:	f001 f94c 	bl	80049e0 <RCCEx_PLL2_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800374e:	e004      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003756:	e000      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800375a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10a      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003762:	4b7f      	ldr	r3, [pc, #508]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003766:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003770:	4a7b      	ldr	r2, [pc, #492]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003772:	430b      	orrs	r3, r1
 8003774:	6513      	str	r3, [r2, #80]	; 0x50
 8003776:	e003      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800377c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800378c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003790:	2300      	movs	r3, #0
 8003792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003796:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800379a:	460b      	mov	r3, r1
 800379c:	4313      	orrs	r3, r2
 800379e:	d039      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80037a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d81c      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80037aa:	a201      	add	r2, pc, #4	; (adr r2, 80037b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80037ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b0:	080037ed 	.word	0x080037ed
 80037b4:	080037c1 	.word	0x080037c1
 80037b8:	080037cf 	.word	0x080037cf
 80037bc:	080037ed 	.word	0x080037ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c0:	4b67      	ldr	r3, [pc, #412]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c4:	4a66      	ldr	r2, [pc, #408]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037cc:	e00f      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d2:	3308      	adds	r3, #8
 80037d4:	2102      	movs	r1, #2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 f902 	bl	80049e0 <RCCEx_PLL2_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037e2:	e004      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037ea:	e000      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80037ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10a      	bne.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037f6:	4b5a      	ldr	r3, [pc, #360]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fa:	f023 0103 	bic.w	r1, r3, #3
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003804:	4a56      	ldr	r2, [pc, #344]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003806:	430b      	orrs	r3, r1
 8003808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800380a:	e003      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003810:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003820:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800382a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800382e:	460b      	mov	r3, r1
 8003830:	4313      	orrs	r3, r2
 8003832:	f000 809f 	beq.w	8003974 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003836:	4b4b      	ldr	r3, [pc, #300]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a4a      	ldr	r2, [pc, #296]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800383c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003840:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003842:	f7fe f84f 	bl	80018e4 <HAL_GetTick>
 8003846:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800384a:	e00b      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384c:	f7fe f84a 	bl	80018e4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b64      	cmp	r3, #100	; 0x64
 800385a:	d903      	bls.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003862:	e005      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003864:	4b3f      	ldr	r3, [pc, #252]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ed      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003870:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003874:	2b00      	cmp	r3, #0
 8003876:	d179      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003878:	4b39      	ldr	r3, [pc, #228]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800387a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800387c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003880:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003884:	4053      	eors	r3, r2
 8003886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388a:	2b00      	cmp	r3, #0
 800388c:	d015      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800388e:	4b34      	ldr	r3, [pc, #208]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003896:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800389a:	4b31      	ldr	r3, [pc, #196]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	4a30      	ldr	r2, [pc, #192]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038a6:	4b2e      	ldr	r3, [pc, #184]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	4a2d      	ldr	r2, [pc, #180]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80038b2:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80038ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c6:	d118      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fe f80c 	bl	80018e4 <HAL_GetTick>
 80038cc:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038d0:	e00d      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fe f807 	bl	80018e4 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80038dc:	1ad2      	subs	r2, r2, r3
 80038de:	f241 3388 	movw	r3, #5000	; 0x1388
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d903      	bls.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80038ec:	e005      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038ee:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0eb      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80038fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d129      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003906:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800390a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003912:	d10e      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003914:	4b12      	ldr	r3, [pc, #72]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003920:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003924:	091a      	lsrs	r2, r3, #4
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003928:	4013      	ands	r3, r2
 800392a:	4a0d      	ldr	r2, [pc, #52]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800392c:	430b      	orrs	r3, r1
 800392e:	6113      	str	r3, [r2, #16]
 8003930:	e005      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003938:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800393c:	6113      	str	r3, [r2, #16]
 800393e:	4b08      	ldr	r3, [pc, #32]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003940:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003946:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800394a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394e:	4a04      	ldr	r2, [pc, #16]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003950:	430b      	orrs	r3, r1
 8003952:	6713      	str	r3, [r2, #112]	; 0x70
 8003954:	e00e      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003956:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800395a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800395e:	e009      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003960:	58024400 	.word	0x58024400
 8003964:	58024800 	.word	0x58024800
 8003968:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003970:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	f002 0301 	and.w	r3, r2, #1
 8003980:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003984:	2300      	movs	r3, #0
 8003986:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800398a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800398e:	460b      	mov	r3, r1
 8003990:	4313      	orrs	r3, r2
 8003992:	f000 8089 	beq.w	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800399c:	2b28      	cmp	r3, #40	; 0x28
 800399e:	d86b      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80039a0:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a6:	bf00      	nop
 80039a8:	08003a81 	.word	0x08003a81
 80039ac:	08003a79 	.word	0x08003a79
 80039b0:	08003a79 	.word	0x08003a79
 80039b4:	08003a79 	.word	0x08003a79
 80039b8:	08003a79 	.word	0x08003a79
 80039bc:	08003a79 	.word	0x08003a79
 80039c0:	08003a79 	.word	0x08003a79
 80039c4:	08003a79 	.word	0x08003a79
 80039c8:	08003a4d 	.word	0x08003a4d
 80039cc:	08003a79 	.word	0x08003a79
 80039d0:	08003a79 	.word	0x08003a79
 80039d4:	08003a79 	.word	0x08003a79
 80039d8:	08003a79 	.word	0x08003a79
 80039dc:	08003a79 	.word	0x08003a79
 80039e0:	08003a79 	.word	0x08003a79
 80039e4:	08003a79 	.word	0x08003a79
 80039e8:	08003a63 	.word	0x08003a63
 80039ec:	08003a79 	.word	0x08003a79
 80039f0:	08003a79 	.word	0x08003a79
 80039f4:	08003a79 	.word	0x08003a79
 80039f8:	08003a79 	.word	0x08003a79
 80039fc:	08003a79 	.word	0x08003a79
 8003a00:	08003a79 	.word	0x08003a79
 8003a04:	08003a79 	.word	0x08003a79
 8003a08:	08003a81 	.word	0x08003a81
 8003a0c:	08003a79 	.word	0x08003a79
 8003a10:	08003a79 	.word	0x08003a79
 8003a14:	08003a79 	.word	0x08003a79
 8003a18:	08003a79 	.word	0x08003a79
 8003a1c:	08003a79 	.word	0x08003a79
 8003a20:	08003a79 	.word	0x08003a79
 8003a24:	08003a79 	.word	0x08003a79
 8003a28:	08003a81 	.word	0x08003a81
 8003a2c:	08003a79 	.word	0x08003a79
 8003a30:	08003a79 	.word	0x08003a79
 8003a34:	08003a79 	.word	0x08003a79
 8003a38:	08003a79 	.word	0x08003a79
 8003a3c:	08003a79 	.word	0x08003a79
 8003a40:	08003a79 	.word	0x08003a79
 8003a44:	08003a79 	.word	0x08003a79
 8003a48:	08003a81 	.word	0x08003a81
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a50:	3308      	adds	r3, #8
 8003a52:	2101      	movs	r1, #1
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 ffc3 	bl	80049e0 <RCCEx_PLL2_Config>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a60:	e00f      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a66:	3328      	adds	r3, #40	; 0x28
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 f86a 	bl	8004b44 <RCCEx_PLL3_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a76:	e004      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a7e:	e000      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10a      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a8a:	4bbf      	ldr	r3, [pc, #764]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a98:	4abb      	ldr	r2, [pc, #748]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6553      	str	r3, [r2, #84]	; 0x54
 8003a9e:	e003      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aa4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab0:	f002 0302 	and.w	r3, r2, #2
 8003ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003abe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	d041      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003acc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d824      	bhi.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003ad2:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003b25 	.word	0x08003b25
 8003adc:	08003af1 	.word	0x08003af1
 8003ae0:	08003b07 	.word	0x08003b07
 8003ae4:	08003b25 	.word	0x08003b25
 8003ae8:	08003b25 	.word	0x08003b25
 8003aec:	08003b25 	.word	0x08003b25
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af4:	3308      	adds	r3, #8
 8003af6:	2101      	movs	r1, #1
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 ff71 	bl	80049e0 <RCCEx_PLL2_Config>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b04:	e00f      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b0a:	3328      	adds	r3, #40	; 0x28
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 f818 	bl	8004b44 <RCCEx_PLL3_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b1a:	e004      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b22:	e000      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b2e:	4b96      	ldr	r3, [pc, #600]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b32:	f023 0107 	bic.w	r1, r3, #7
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b3c:	4a92      	ldr	r2, [pc, #584]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	6553      	str	r3, [r2, #84]	; 0x54
 8003b42:	e003      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	f002 0304 	and.w	r3, r2, #4
 8003b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b62:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	d044      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b74:	2b05      	cmp	r3, #5
 8003b76:	d825      	bhi.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003b78:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7e:	bf00      	nop
 8003b80:	08003bcd 	.word	0x08003bcd
 8003b84:	08003b99 	.word	0x08003b99
 8003b88:	08003baf 	.word	0x08003baf
 8003b8c:	08003bcd 	.word	0x08003bcd
 8003b90:	08003bcd 	.word	0x08003bcd
 8003b94:	08003bcd 	.word	0x08003bcd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 ff1d 	bl	80049e0 <RCCEx_PLL2_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003bac:	e00f      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb2:	3328      	adds	r3, #40	; 0x28
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 ffc4 	bl	8004b44 <RCCEx_PLL3_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003bc2:	e004      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bca:	e000      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10b      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd6:	4b6c      	ldr	r3, [pc, #432]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bda:	f023 0107 	bic.w	r1, r3, #7
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be6:	4a68      	ldr	r2, [pc, #416]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6593      	str	r3, [r2, #88]	; 0x58
 8003bec:	e003      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	f002 0320 	and.w	r3, r2, #32
 8003c02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c06:	2300      	movs	r3, #0
 8003c08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c10:	460b      	mov	r3, r1
 8003c12:	4313      	orrs	r3, r2
 8003c14:	d055      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c22:	d033      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c28:	d82c      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c2e:	d02f      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c34:	d826      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c3a:	d02b      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003c3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c40:	d820      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c46:	d012      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c4c:	d81a      	bhi.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d022      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003c52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c56:	d115      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	2100      	movs	r1, #0
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 febd 	bl	80049e0 <RCCEx_PLL2_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c6c:	e015      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c72:	3328      	adds	r3, #40	; 0x28
 8003c74:	2102      	movs	r1, #2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 ff64 	bl	8004b44 <RCCEx_PLL3_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c82:	e00a      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c8a:	e006      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c8c:	bf00      	nop
 8003c8e:	e004      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c90:	bf00      	nop
 8003c92:	e002      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c94:	bf00      	nop
 8003c96:	e000      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ca2:	4b39      	ldr	r3, [pc, #228]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	4a35      	ldr	r2, [pc, #212]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6553      	str	r3, [r2, #84]	; 0x54
 8003cb8:	e003      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003cce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003cd8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	d058      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cee:	d033      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003cf0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cf4:	d82c      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cfa:	d02f      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d00:	d826      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d06:	d02b      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003d08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d0c:	d820      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d12:	d012      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d18:	d81a      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d022      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d22:	d115      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d28:	3308      	adds	r3, #8
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fe57 	bl	80049e0 <RCCEx_PLL2_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d38:	e015      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d3e:	3328      	adds	r3, #40	; 0x28
 8003d40:	2102      	movs	r1, #2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fefe 	bl	8004b44 <RCCEx_PLL3_Config>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d4e:	e00a      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d56:	e006      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d58:	bf00      	nop
 8003d5a:	e004      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d5c:	bf00      	nop
 8003d5e:	e002      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d60:	bf00      	nop
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10e      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d6e:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d7e:	4a02      	ldr	r2, [pc, #8]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6593      	str	r3, [r2, #88]	; 0x58
 8003d84:	e006      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003d86:	bf00      	nop
 8003d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d90:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003daa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003dae:	460b      	mov	r3, r1
 8003db0:	4313      	orrs	r3, r2
 8003db2:	d055      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dbc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003dc0:	d033      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003dc2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003dc6:	d82c      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dcc:	d02f      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd2:	d826      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003dd4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dd8:	d02b      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003dda:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dde:	d820      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003de0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de4:	d012      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003de6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dea:	d81a      	bhi.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d022      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df4:	d115      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fdee 	bl	80049e0 <RCCEx_PLL2_Config>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e0a:	e015      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e10:	3328      	adds	r3, #40	; 0x28
 8003e12:	2102      	movs	r1, #2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fe95 	bl	8004b44 <RCCEx_PLL3_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e20:	e00a      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e28:	e006      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e2a:	bf00      	nop
 8003e2c:	e004      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e2e:	bf00      	nop
 8003e30:	e002      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e32:	bf00      	nop
 8003e34:	e000      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e40:	4ba1      	ldr	r3, [pc, #644]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e44:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e50:	4a9d      	ldr	r2, [pc, #628]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e52:	430b      	orrs	r3, r1
 8003e54:	6593      	str	r3, [r2, #88]	; 0x58
 8003e56:	e003      	b.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f002 0308 	and.w	r3, r2, #8
 8003e6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e70:	2300      	movs	r3, #0
 8003e72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e76:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	d01e      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8c:	d10c      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e92:	3328      	adds	r3, #40	; 0x28
 8003e94:	2102      	movs	r1, #2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fe54 	bl	8004b44 <RCCEx_PLL3_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ea8:	4b87      	ldr	r3, [pc, #540]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb8:	4a83      	ldr	r2, [pc, #524]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f002 0310 	and.w	r3, r2, #16
 8003eca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ed4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4313      	orrs	r3, r2
 8003edc:	d01e      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eea:	d10c      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef0:	3328      	adds	r3, #40	; 0x28
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fe25 	bl	8004b44 <RCCEx_PLL3_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f06:	4b70      	ldr	r3, [pc, #448]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f16:	4a6c      	ldr	r2, [pc, #432]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f24:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003f28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003f36:	460b      	mov	r3, r1
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	d03e      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f48:	d022      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003f4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f4e:	d81b      	bhi.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f58:	d00b      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003f5a:	e015      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f60:	3308      	adds	r3, #8
 8003f62:	2100      	movs	r1, #0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fd3b 	bl	80049e0 <RCCEx_PLL2_Config>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f70:	e00f      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f76:	3328      	adds	r3, #40	; 0x28
 8003f78:	2102      	movs	r1, #2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 fde2 	bl	8004b44 <RCCEx_PLL3_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f86:	e004      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f8e:	e000      	b.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10b      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f9a:	4b4b      	ldr	r3, [pc, #300]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003faa:	4a47      	ldr	r2, [pc, #284]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb0:	e003      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003fc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fc8:	2300      	movs	r3, #0
 8003fca:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fcc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	d03b      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fe2:	d01f      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003fe4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fe8:	d818      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fee:	d003      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003ff0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ff4:	d007      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003ff6:	e011      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ff8:	4b33      	ldr	r3, [pc, #204]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	4a32      	ldr	r2, [pc, #200]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004002:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004004:	e00f      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400a:	3328      	adds	r3, #40	; 0x28
 800400c:	2101      	movs	r1, #1
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fd98 	bl	8004b44 <RCCEx_PLL3_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800401a:	e004      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004022:	e000      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800402e:	4b26      	ldr	r3, [pc, #152]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	4a22      	ldr	r2, [pc, #136]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004040:	430b      	orrs	r3, r1
 8004042:	6553      	str	r3, [r2, #84]	; 0x54
 8004044:	e003      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800404a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800404e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800405a:	673b      	str	r3, [r7, #112]	; 0x70
 800405c:	2300      	movs	r3, #0
 800405e:	677b      	str	r3, [r7, #116]	; 0x74
 8004060:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004064:	460b      	mov	r3, r1
 8004066:	4313      	orrs	r3, r2
 8004068:	d034      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800406a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004078:	d007      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800407a:	e011      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800407c:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	4a11      	ldr	r2, [pc, #68]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004086:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004088:	e00e      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800408e:	3308      	adds	r3, #8
 8004090:	2102      	movs	r1, #2
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fca4 	bl	80049e0 <RCCEx_PLL2_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800409e:	e003      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10d      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040be:	4a02      	ldr	r2, [pc, #8]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040c0:	430b      	orrs	r3, r1
 80040c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040c4:	e006      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80040c6:	bf00      	nop
 80040c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80040e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80040e2:	2300      	movs	r3, #0
 80040e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80040ea:	460b      	mov	r3, r1
 80040ec:	4313      	orrs	r3, r2
 80040ee:	d00c      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f4:	3328      	adds	r3, #40	; 0x28
 80040f6:	2102      	movs	r1, #2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fd23 	bl	8004b44 <RCCEx_PLL3_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004116:	663b      	str	r3, [r7, #96]	; 0x60
 8004118:	2300      	movs	r3, #0
 800411a:	667b      	str	r3, [r7, #100]	; 0x64
 800411c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004120:	460b      	mov	r3, r1
 8004122:	4313      	orrs	r3, r2
 8004124:	d038      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800412a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800412e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004132:	d018      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004134:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004138:	d811      	bhi.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800413a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800413e:	d014      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004144:	d80b      	bhi.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004146:	2b00      	cmp	r3, #0
 8004148:	d011      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800414a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414e:	d106      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004150:	4bc3      	ldr	r3, [pc, #780]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	4ac2      	ldr	r2, [pc, #776]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004156:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800415a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800415c:	e008      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004164:	e004      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004166:	bf00      	nop
 8004168:	e002      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800416e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004170:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10b      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004178:	4bb9      	ldr	r3, [pc, #740]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004188:	4ab5      	ldr	r2, [pc, #724]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800418a:	430b      	orrs	r3, r1
 800418c:	6553      	str	r3, [r2, #84]	; 0x54
 800418e:	e003      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004190:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004194:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80041a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80041a6:	2300      	movs	r3, #0
 80041a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80041ae:	460b      	mov	r3, r1
 80041b0:	4313      	orrs	r3, r2
 80041b2:	d009      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041b4:	4baa      	ldr	r3, [pc, #680]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c2:	4aa7      	ldr	r2, [pc, #668]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80041d4:	653b      	str	r3, [r7, #80]	; 0x50
 80041d6:	2300      	movs	r3, #0
 80041d8:	657b      	str	r3, [r7, #84]	; 0x54
 80041da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80041de:	460b      	mov	r3, r1
 80041e0:	4313      	orrs	r3, r2
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80041e4:	4b9e      	ldr	r3, [pc, #632]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80041ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80041f4:	4a9a      	ldr	r2, [pc, #616]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041f6:	430b      	orrs	r3, r1
 80041f8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004202:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004206:	64bb      	str	r3, [r7, #72]	; 0x48
 8004208:	2300      	movs	r3, #0
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800420c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004210:	460b      	mov	r3, r1
 8004212:	4313      	orrs	r3, r2
 8004214:	d009      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004216:	4b92      	ldr	r3, [pc, #584]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800421e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004224:	4a8e      	ldr	r2, [pc, #568]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004226:	430b      	orrs	r3, r1
 8004228:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004236:	643b      	str	r3, [r7, #64]	; 0x40
 8004238:	2300      	movs	r3, #0
 800423a:	647b      	str	r3, [r7, #68]	; 0x44
 800423c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004240:	460b      	mov	r3, r1
 8004242:	4313      	orrs	r3, r2
 8004244:	d00e      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004246:	4b86      	ldr	r3, [pc, #536]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	4a85      	ldr	r2, [pc, #532]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800424c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004250:	6113      	str	r3, [r2, #16]
 8004252:	4b83      	ldr	r3, [pc, #524]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004254:	6919      	ldr	r1, [r3, #16]
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800425a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800425e:	4a80      	ldr	r2, [pc, #512]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004260:	430b      	orrs	r3, r1
 8004262:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004270:	63bb      	str	r3, [r7, #56]	; 0x38
 8004272:	2300      	movs	r3, #0
 8004274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004276:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800427a:	460b      	mov	r3, r1
 800427c:	4313      	orrs	r3, r2
 800427e:	d009      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004280:	4b77      	ldr	r3, [pc, #476]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004284:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	4a74      	ldr	r2, [pc, #464]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004290:	430b      	orrs	r3, r1
 8004292:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80042a0:	633b      	str	r3, [r7, #48]	; 0x30
 80042a2:	2300      	movs	r3, #0
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
 80042a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80042aa:	460b      	mov	r3, r1
 80042ac:	4313      	orrs	r3, r2
 80042ae:	d00a      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042b0:	4b6b      	ldr	r3, [pc, #428]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042c0:	4a67      	ldr	r2, [pc, #412]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042c2:	430b      	orrs	r3, r1
 80042c4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	2100      	movs	r1, #0
 80042d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80042dc:	460b      	mov	r3, r1
 80042de:	4313      	orrs	r3, r2
 80042e0:	d011      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e6:	3308      	adds	r3, #8
 80042e8:	2100      	movs	r1, #0
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fb78 	bl	80049e0 <RCCEx_PLL2_Config>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80042f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004302:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	2100      	movs	r1, #0
 8004310:	6239      	str	r1, [r7, #32]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	627b      	str	r3, [r7, #36]	; 0x24
 8004318:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800431c:	460b      	mov	r3, r1
 800431e:	4313      	orrs	r3, r2
 8004320:	d011      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004326:	3308      	adds	r3, #8
 8004328:	2101      	movs	r1, #1
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fb58 	bl	80049e0 <RCCEx_PLL2_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004336:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004342:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	2100      	movs	r1, #0
 8004350:	61b9      	str	r1, [r7, #24]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800435c:	460b      	mov	r3, r1
 800435e:	4313      	orrs	r3, r2
 8004360:	d011      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004366:	3308      	adds	r3, #8
 8004368:	2102      	movs	r1, #2
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fb38 	bl	80049e0 <RCCEx_PLL2_Config>
 8004370:	4603      	mov	r3, r0
 8004372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004382:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	2100      	movs	r1, #0
 8004390:	6139      	str	r1, [r7, #16]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800439c:	460b      	mov	r3, r1
 800439e:	4313      	orrs	r3, r2
 80043a0:	d011      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a6:	3328      	adds	r3, #40	; 0x28
 80043a8:	2100      	movs	r1, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fbca 	bl	8004b44 <RCCEx_PLL3_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80043b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	2100      	movs	r1, #0
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043dc:	460b      	mov	r3, r1
 80043de:	4313      	orrs	r3, r2
 80043e0:	d011      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e6:	3328      	adds	r3, #40	; 0x28
 80043e8:	2101      	movs	r1, #1
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fbaa 	bl	8004b44 <RCCEx_PLL3_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80043f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004402:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440e:	2100      	movs	r1, #0
 8004410:	6039      	str	r1, [r7, #0]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	607b      	str	r3, [r7, #4]
 8004418:	e9d7 1200 	ldrd	r1, r2, [r7]
 800441c:	460b      	mov	r3, r1
 800441e:	4313      	orrs	r3, r2
 8004420:	d011      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004426:	3328      	adds	r3, #40	; 0x28
 8004428:	2102      	movs	r1, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fb8a 	bl	8004b44 <RCCEx_PLL3_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004442:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004446:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
}
 8004454:	4618      	mov	r0, r3
 8004456:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800445a:	46bd      	mov	sp, r7
 800445c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004460:	58024400 	.word	0x58024400

08004464 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004468:	f7fe fd96 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	091b      	lsrs	r3, r3, #4
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4904      	ldr	r1, [pc, #16]	; (800448c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004484:	4618      	mov	r0, r3
 8004486:	bd80      	pop	{r7, pc}
 8004488:	58024400 	.word	0x58024400
 800448c:	0800803c 	.word	0x0800803c

08004490 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004490:	b480      	push	{r7}
 8004492:	b089      	sub	sp, #36	; 0x24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004498:	4ba1      	ldr	r3, [pc, #644]	; (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80044a2:	4b9f      	ldr	r3, [pc, #636]	; (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	0b1b      	lsrs	r3, r3, #12
 80044a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80044ae:	4b9c      	ldr	r3, [pc, #624]	; (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80044ba:	4b99      	ldr	r3, [pc, #612]	; (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	08db      	lsrs	r3, r3, #3
 80044c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8111 	beq.w	8004700 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	f000 8083 	beq.w	80045ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	f200 80a1 	bhi.w	8004630 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d056      	beq.n	80045a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80044fa:	e099      	b.n	8004630 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044fc:	4b88      	ldr	r3, [pc, #544]	; (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d02d      	beq.n	8004564 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004508:	4b85      	ldr	r3, [pc, #532]	; (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	08db      	lsrs	r3, r3, #3
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	4a84      	ldr	r2, [pc, #528]	; (8004724 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004514:	fa22 f303 	lsr.w	r3, r2, r3
 8004518:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	ee07 3a90 	vmov	s15, r3
 8004520:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004532:	4b7b      	ldr	r3, [pc, #492]	; (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004542:	ed97 6a03 	vldr	s12, [r7, #12]
 8004546:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800454a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800455a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004562:	e087      	b.n	8004674 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800472c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004576:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004586:	ed97 6a03 	vldr	s12, [r7, #12]
 800458a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800458e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800459a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045a6:	e065      	b.n	8004674 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80045b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ba:	4b59      	ldr	r3, [pc, #356]	; (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ea:	e043      	b.n	8004674 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004734 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80045fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fe:	4b48      	ldr	r3, [pc, #288]	; (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004612:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800461a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800462e:	e021      	b.n	8004674 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800463e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004642:	4b37      	ldr	r3, [pc, #220]	; (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800464a:	ee07 3a90 	vmov	s15, r3
 800464e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004652:	ed97 6a03 	vldr	s12, [r7, #12]
 8004656:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800465a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800466a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004672:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004674:	4b2a      	ldr	r3, [pc, #168]	; (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	0a5b      	lsrs	r3, r3, #9
 800467a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800468a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800468e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800469a:	ee17 2a90 	vmov	r2, s15
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80046a2:	4b1f      	ldr	r3, [pc, #124]	; (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	0c1b      	lsrs	r3, r3, #16
 80046a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ac:	ee07 3a90 	vmov	s15, r3
 80046b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80046c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046c8:	ee17 2a90 	vmov	r2, s15
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80046d0:	4b13      	ldr	r3, [pc, #76]	; (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d4:	0e1b      	lsrs	r3, r3, #24
 80046d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80046ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f6:	ee17 2a90 	vmov	r2, s15
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046fe:	e008      	b.n	8004712 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	609a      	str	r2, [r3, #8]
}
 8004712:	bf00      	nop
 8004714:	3724      	adds	r7, #36	; 0x24
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	58024400 	.word	0x58024400
 8004724:	03d09000 	.word	0x03d09000
 8004728:	46000000 	.word	0x46000000
 800472c:	4c742400 	.word	0x4c742400
 8004730:	4a742400 	.word	0x4a742400
 8004734:	4bbebc20 	.word	0x4bbebc20

08004738 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004738:	b480      	push	{r7}
 800473a:	b089      	sub	sp, #36	; 0x24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004740:	4ba1      	ldr	r3, [pc, #644]	; (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800474a:	4b9f      	ldr	r3, [pc, #636]	; (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	0d1b      	lsrs	r3, r3, #20
 8004750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004754:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004756:	4b9c      	ldr	r3, [pc, #624]	; (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004762:	4b99      	ldr	r3, [pc, #612]	; (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	08db      	lsrs	r3, r3, #3
 8004768:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 8111 	beq.w	80049a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	2b02      	cmp	r3, #2
 800478a:	f000 8083 	beq.w	8004894 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	2b02      	cmp	r3, #2
 8004792:	f200 80a1 	bhi.w	80048d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d056      	beq.n	8004850 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80047a2:	e099      	b.n	80048d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047a4:	4b88      	ldr	r3, [pc, #544]	; (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d02d      	beq.n	800480c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047b0:	4b85      	ldr	r3, [pc, #532]	; (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	08db      	lsrs	r3, r3, #3
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	4a84      	ldr	r2, [pc, #528]	; (80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
 80047c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	ee07 3a90 	vmov	s15, r3
 80047c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	ee07 3a90 	vmov	s15, r3
 80047d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047da:	4b7b      	ldr	r3, [pc, #492]	; (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800480a:	e087      	b.n	800491c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800481a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481e:	4b6a      	ldr	r3, [pc, #424]	; (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004832:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800483a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800484e:	e065      	b.n	800491c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800485e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004862:	4b59      	ldr	r3, [pc, #356]	; (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004872:	ed97 6a03 	vldr	s12, [r7, #12]
 8004876:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800487a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800488a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004892:	e043      	b.n	800491c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80048a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a6:	4b48      	ldr	r3, [pc, #288]	; (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048d6:	e021      	b.n	800491c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ea:	4b37      	ldr	r3, [pc, #220]	; (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80048fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800490e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800491a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800491c:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	0a5b      	lsrs	r3, r3, #9
 8004922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004932:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004936:	edd7 6a07 	vldr	s13, [r7, #28]
 800493a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004942:	ee17 2a90 	vmov	r2, s15
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800494a:	4b1f      	ldr	r3, [pc, #124]	; (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004960:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004964:	edd7 6a07 	vldr	s13, [r7, #28]
 8004968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800496c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004970:	ee17 2a90 	vmov	r2, s15
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004978:	4b13      	ldr	r3, [pc, #76]	; (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	0e1b      	lsrs	r3, r3, #24
 800497e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800498e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004992:	edd7 6a07 	vldr	s13, [r7, #28]
 8004996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800499a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800499e:	ee17 2a90 	vmov	r2, s15
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80049a6:	e008      	b.n	80049ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]
}
 80049ba:	bf00      	nop
 80049bc:	3724      	adds	r7, #36	; 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	58024400 	.word	0x58024400
 80049cc:	03d09000 	.word	0x03d09000
 80049d0:	46000000 	.word	0x46000000
 80049d4:	4c742400 	.word	0x4c742400
 80049d8:	4a742400 	.word	0x4a742400
 80049dc:	4bbebc20 	.word	0x4bbebc20

080049e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049ee:	4b53      	ldr	r3, [pc, #332]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d101      	bne.n	80049fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e099      	b.n	8004b32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049fe:	4b4f      	ldr	r3, [pc, #316]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a4e      	ldr	r2, [pc, #312]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004a04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a0a:	f7fc ff6b 	bl	80018e4 <HAL_GetTick>
 8004a0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a10:	e008      	b.n	8004a24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a12:	f7fc ff67 	bl	80018e4 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e086      	b.n	8004b32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a24:	4b45      	ldr	r3, [pc, #276]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a30:	4b42      	ldr	r3, [pc, #264]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	031b      	lsls	r3, r3, #12
 8004a3e:	493f      	ldr	r1, [pc, #252]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	628b      	str	r3, [r1, #40]	; 0x28
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	025b      	lsls	r3, r3, #9
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	041b      	lsls	r3, r3, #16
 8004a62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	061b      	lsls	r3, r3, #24
 8004a70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a74:	4931      	ldr	r1, [pc, #196]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a7a:	4b30      	ldr	r3, [pc, #192]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	492d      	ldr	r1, [pc, #180]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a8c:	4b2b      	ldr	r3, [pc, #172]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	f023 0220 	bic.w	r2, r3, #32
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	4928      	ldr	r1, [pc, #160]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a9e:	4b27      	ldr	r3, [pc, #156]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	4a26      	ldr	r2, [pc, #152]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004aa4:	f023 0310 	bic.w	r3, r3, #16
 8004aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004aaa:	4b24      	ldr	r3, [pc, #144]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004aac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aae:	4b24      	ldr	r3, [pc, #144]	; (8004b40 <RCCEx_PLL2_Config+0x160>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	69d2      	ldr	r2, [r2, #28]
 8004ab6:	00d2      	lsls	r2, r2, #3
 8004ab8:	4920      	ldr	r1, [pc, #128]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004abe:	4b1f      	ldr	r3, [pc, #124]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004ac4:	f043 0310 	orr.w	r3, r3, #16
 8004ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d106      	bne.n	8004ade <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004ad6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ada:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004adc:	e00f      	b.n	8004afe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d106      	bne.n	8004af2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ae4:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4a14      	ldr	r2, [pc, #80]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004aea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004af0:	e005      	b.n	8004afe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004af2:	4b12      	ldr	r3, [pc, #72]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	4a11      	ldr	r2, [pc, #68]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004af8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004afc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004afe:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a0e      	ldr	r2, [pc, #56]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004b04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b0a:	f7fc feeb 	bl	80018e4 <HAL_GetTick>
 8004b0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b10:	e008      	b.n	8004b24 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b12:	f7fc fee7 	bl	80018e4 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e006      	b.n	8004b32 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <RCCEx_PLL2_Config+0x15c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	58024400 	.word	0x58024400
 8004b40:	ffff0007 	.word	0xffff0007

08004b44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b52:	4b53      	ldr	r3, [pc, #332]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d101      	bne.n	8004b62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e099      	b.n	8004c96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b62:	4b4f      	ldr	r3, [pc, #316]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a4e      	ldr	r2, [pc, #312]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004b68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6e:	f7fc feb9 	bl	80018e4 <HAL_GetTick>
 8004b72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b74:	e008      	b.n	8004b88 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b76:	f7fc feb5 	bl	80018e4 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e086      	b.n	8004c96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b88:	4b45      	ldr	r3, [pc, #276]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f0      	bne.n	8004b76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b94:	4b42      	ldr	r3, [pc, #264]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	051b      	lsls	r3, r3, #20
 8004ba2:	493f      	ldr	r1, [pc, #252]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	628b      	str	r3, [r1, #40]	; 0x28
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	025b      	lsls	r3, r3, #9
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	061b      	lsls	r3, r3, #24
 8004bd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bd8:	4931      	ldr	r1, [pc, #196]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bde:	4b30      	ldr	r3, [pc, #192]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	492d      	ldr	r1, [pc, #180]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004bf0:	4b2b      	ldr	r3, [pc, #172]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	4928      	ldr	r1, [pc, #160]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c02:	4b27      	ldr	r3, [pc, #156]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c0e:	4b24      	ldr	r3, [pc, #144]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <RCCEx_PLL3_Config+0x160>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	69d2      	ldr	r2, [r2, #28]
 8004c1a:	00d2      	lsls	r2, r2, #3
 8004c1c:	4920      	ldr	r1, [pc, #128]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c22:	4b1f      	ldr	r3, [pc, #124]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	4a1e      	ldr	r2, [pc, #120]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c34:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c40:	e00f      	b.n	8004c62 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d106      	bne.n	8004c56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c48:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	4a14      	ldr	r2, [pc, #80]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c54:	e005      	b.n	8004c62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c56:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	4a11      	ldr	r2, [pc, #68]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c62:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a0e      	ldr	r2, [pc, #56]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6e:	f7fc fe39 	bl	80018e4 <HAL_GetTick>
 8004c72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c74:	e008      	b.n	8004c88 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c76:	f7fc fe35 	bl	80018e4 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d901      	bls.n	8004c88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e006      	b.n	8004c96 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <RCCEx_PLL3_Config+0x15c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0f0      	beq.n	8004c76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	58024400 	.word	0x58024400
 8004ca4:	ffff0007 	.word	0xffff0007

08004ca8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e10f      	b.n	8004eda <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a87      	ldr	r2, [pc, #540]	; (8004ee4 <HAL_SPI_Init+0x23c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00f      	beq.n	8004cea <HAL_SPI_Init+0x42>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a86      	ldr	r2, [pc, #536]	; (8004ee8 <HAL_SPI_Init+0x240>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00a      	beq.n	8004cea <HAL_SPI_Init+0x42>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a84      	ldr	r2, [pc, #528]	; (8004eec <HAL_SPI_Init+0x244>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d005      	beq.n	8004cea <HAL_SPI_Init+0x42>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2b0f      	cmp	r3, #15
 8004ce4:	d901      	bls.n	8004cea <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e0f7      	b.n	8004eda <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 ff76 	bl	8005bdc <SPI_GetPacketSize>
 8004cf0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a7b      	ldr	r2, [pc, #492]	; (8004ee4 <HAL_SPI_Init+0x23c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00c      	beq.n	8004d16 <HAL_SPI_Init+0x6e>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a79      	ldr	r2, [pc, #484]	; (8004ee8 <HAL_SPI_Init+0x240>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d007      	beq.n	8004d16 <HAL_SPI_Init+0x6e>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a78      	ldr	r2, [pc, #480]	; (8004eec <HAL_SPI_Init+0x244>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d002      	beq.n	8004d16 <HAL_SPI_Init+0x6e>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d811      	bhi.n	8004d3a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d1a:	4a72      	ldr	r2, [pc, #456]	; (8004ee4 <HAL_SPI_Init+0x23c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d009      	beq.n	8004d34 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a70      	ldr	r2, [pc, #448]	; (8004ee8 <HAL_SPI_Init+0x240>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <HAL_SPI_Init+0x8c>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a6f      	ldr	r2, [pc, #444]	; (8004eec <HAL_SPI_Init+0x244>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d104      	bne.n	8004d3e <HAL_SPI_Init+0x96>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b10      	cmp	r3, #16
 8004d38:	d901      	bls.n	8004d3e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e0cd      	b.n	8004eda <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7fc fb48 	bl	80013e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0201 	bic.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004d7a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d84:	d119      	bne.n	8004dba <HAL_SPI_Init+0x112>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d8e:	d103      	bne.n	8004d98 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d008      	beq.n	8004daa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10c      	bne.n	8004dba <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004da4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004da8:	d107      	bne.n	8004dba <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004db8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00f      	beq.n	8004de6 <HAL_SPI_Init+0x13e>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d90b      	bls.n	8004de6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e007      	b.n	8004df6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004df4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69da      	ldr	r2, [r3, #28]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e08:	ea42 0103 	orr.w	r1, r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e56:	ea42 0103 	orr.w	r1, r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d113      	bne.n	8004e96 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e80:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e94:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40013000 	.word	0x40013000
 8004ee8:	40003800 	.word	0x40003800
 8004eec:	40003c00 	.word	0x40003c00

08004ef0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	; 0x28
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	4613      	mov	r3, r2
 8004efe:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3320      	adds	r3, #32
 8004f06:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_SPI_Transmit+0x2a>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e1e1      	b.n	80052de <HAL_SPI_Transmit+0x3ee>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f22:	f7fc fcdf 	bl	80018e4 <HAL_GetTick>
 8004f26:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d007      	beq.n	8004f44 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
 8004f36:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004f40:	7efb      	ldrb	r3, [r7, #27]
 8004f42:	e1cc      	b.n	80052de <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <HAL_SPI_Transmit+0x60>
 8004f4a:	88fb      	ldrh	r3, [r7, #6]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d107      	bne.n	8004f60 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004f5c:	7efb      	ldrb	r3, [r7, #27]
 8004f5e:	e1be      	b.n	80052de <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2203      	movs	r2, #3
 8004f64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	88fa      	ldrh	r2, [r7, #6]
 8004f7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004fb0:	d108      	bne.n	8004fc4 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	e009      	b.n	8004fd8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004fd6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	4b96      	ldr	r3, [pc, #600]	; (8005238 <HAL_SPI_Transmit+0x348>)
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	88f9      	ldrh	r1, [r7, #6]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	6812      	ldr	r2, [r2, #0]
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005004:	d107      	bne.n	8005016 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005014:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	2b0f      	cmp	r3, #15
 800501c:	d947      	bls.n	80050ae <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800501e:	e03f      	b.n	80050a0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d114      	bne.n	8005058 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005056:	e023      	b.n	80050a0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005058:	f7fc fc44 	bl	80018e4 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d803      	bhi.n	8005070 <HAL_SPI_Transmit+0x180>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800506e:	d102      	bne.n	8005076 <HAL_SPI_Transmit+0x186>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d114      	bne.n	80050a0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fce2 	bl	8005a40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e11e      	b.n	80052de <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1b9      	bne.n	8005020 <HAL_SPI_Transmit+0x130>
 80050ac:	e0f1      	b.n	8005292 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	2b07      	cmp	r3, #7
 80050b4:	f240 80e6 	bls.w	8005284 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80050b8:	e05d      	b.n	8005176 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d132      	bne.n	800512e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d918      	bls.n	8005106 <HAL_SPI_Transmit+0x216>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d014      	beq.n	8005106 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ec:	1d1a      	adds	r2, r3, #4
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b02      	subs	r3, #2
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005104:	e037      	b.n	8005176 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510a:	881a      	ldrh	r2, [r3, #0]
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005114:	1c9a      	adds	r2, r3, #2
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800512c:	e023      	b.n	8005176 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800512e:	f7fc fbd9 	bl	80018e4 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d803      	bhi.n	8005146 <HAL_SPI_Transmit+0x256>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005144:	d102      	bne.n	800514c <HAL_SPI_Transmit+0x25c>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d114      	bne.n	8005176 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f000 fc77 	bl	8005a40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005160:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e0b3      	b.n	80052de <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800517c:	b29b      	uxth	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d19b      	bne.n	80050ba <HAL_SPI_Transmit+0x1ca>
 8005182:	e086      	b.n	8005292 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b02      	cmp	r3, #2
 8005190:	d154      	bne.n	800523c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b03      	cmp	r3, #3
 800519c:	d918      	bls.n	80051d0 <HAL_SPI_Transmit+0x2e0>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	2b40      	cmp	r3, #64	; 0x40
 80051a4:	d914      	bls.n	80051d0 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6812      	ldr	r2, [r2, #0]
 80051b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b6:	1d1a      	adds	r2, r3, #4
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b04      	subs	r3, #4
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80051ce:	e059      	b.n	8005284 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d917      	bls.n	800520c <HAL_SPI_Transmit+0x31c>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d013      	beq.n	800520c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e8:	881a      	ldrh	r2, [r3, #0]
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f2:	1c9a      	adds	r2, r3, #2
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b02      	subs	r3, #2
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800520a:	e03b      	b.n	8005284 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3320      	adds	r3, #32
 8005216:	7812      	ldrb	r2, [r2, #0]
 8005218:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005236:	e025      	b.n	8005284 <HAL_SPI_Transmit+0x394>
 8005238:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800523c:	f7fc fb52 	bl	80018e4 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d803      	bhi.n	8005254 <HAL_SPI_Transmit+0x364>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005252:	d102      	bne.n	800525a <HAL_SPI_Transmit+0x36a>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d114      	bne.n	8005284 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fbf0 	bl	8005a40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800526e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e02c      	b.n	80052de <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	f47f af79 	bne.w	8005184 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2200      	movs	r2, #0
 800529a:	2108      	movs	r1, #8
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 fc6f 	bl	8005b80 <SPI_WaitOnFlagUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ae:	f043 0220 	orr.w	r2, r3, #32
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 fbc1 	bl	8005a40 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 80052dc:	7efb      	ldrb	r3, [r7, #27]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3720      	adds	r7, #32
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop

080052e8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b088      	sub	sp, #32
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	603b      	str	r3, [r7, #0]
 80052f4:	4613      	mov	r3, r2
 80052f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3330      	adds	r3, #48	; 0x30
 8005302:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_SPI_Receive+0x2a>
 800530e:	2302      	movs	r3, #2
 8005310:	e173      	b.n	80055fa <HAL_SPI_Receive+0x312>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800531a:	f7fc fae3 	bl	80018e4 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b01      	cmp	r3, #1
 800532a:	d007      	beq.n	800533c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800532c:	2302      	movs	r3, #2
 800532e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005338:	7ffb      	ldrb	r3, [r7, #31]
 800533a:	e15e      	b.n	80055fa <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_SPI_Receive+0x60>
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d107      	bne.n	8005358 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005354:	7ffb      	ldrb	r3, [r7, #31]
 8005356:	e150      	b.n	80055fa <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2204      	movs	r2, #4
 800535c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	88fa      	ldrh	r2, [r7, #6]
 8005372:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	88fa      	ldrh	r2, [r7, #6]
 800537a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80053a8:	d108      	bne.n	80053bc <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	e009      	b.n	80053d0 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80053ce:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	4b8b      	ldr	r3, [pc, #556]	; (8005604 <HAL_SPI_Receive+0x31c>)
 80053d8:	4013      	ands	r3, r2
 80053da:	88f9      	ldrh	r1, [r7, #6]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f042 0201 	orr.w	r2, r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053fc:	d107      	bne.n	800540e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b0f      	cmp	r3, #15
 8005414:	d948      	bls.n	80054a8 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005416:	e040      	b.n	800549a <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	f248 0308 	movw	r3, #32776	; 0x8008
 8005422:	4013      	ands	r3, r2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d014      	beq.n	8005452 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005430:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005432:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005438:	1d1a      	adds	r2, r3, #4
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005450:	e023      	b.n	800549a <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005452:	f7fc fa47 	bl	80018e4 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d803      	bhi.n	800546a <HAL_SPI_Receive+0x182>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005468:	d102      	bne.n	8005470 <HAL_SPI_Receive+0x188>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d114      	bne.n	800549a <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 fae5 	bl	8005a40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005484:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e0af      	b.n	80055fa <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1b8      	bne.n	8005418 <HAL_SPI_Receive+0x130>
 80054a6:	e095      	b.n	80055d4 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	2b07      	cmp	r3, #7
 80054ae:	f240 808b 	bls.w	80055c8 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80054b2:	e03f      	b.n	8005534 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d114      	bne.n	80054ec <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	8812      	ldrh	r2, [r2, #0]
 80054ca:	b292      	uxth	r2, r2
 80054cc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054d2:	1c9a      	adds	r2, r3, #2
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80054de:	b29b      	uxth	r3, r3
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80054ea:	e023      	b.n	8005534 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ec:	f7fc f9fa 	bl	80018e4 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	683a      	ldr	r2, [r7, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d803      	bhi.n	8005504 <HAL_SPI_Receive+0x21c>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005502:	d102      	bne.n	800550a <HAL_SPI_Receive+0x222>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d114      	bne.n	8005534 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fa98 	bl	8005a40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800551e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e062      	b.n	80055fa <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1b9      	bne.n	80054b4 <HAL_SPI_Receive+0x1cc>
 8005540:	e048      	b.n	80055d4 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b01      	cmp	r3, #1
 800554e:	d117      	bne.n	8005580 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800555c:	7812      	ldrb	r2, [r2, #0]
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800557e:	e023      	b.n	80055c8 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005580:	f7fc f9b0 	bl	80018e4 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d803      	bhi.n	8005598 <HAL_SPI_Receive+0x2b0>
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005596:	d102      	bne.n	800559e <HAL_SPI_Receive+0x2b6>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d114      	bne.n	80055c8 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 fa4e 	bl	8005a40 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e018      	b.n	80055fa <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1b6      	bne.n	8005542 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 fa33 	bl	8005a40 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 80055f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	ffff0000 	.word	0xffff0000

08005608 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08c      	sub	sp, #48	; 0x30
 800560c:	af02      	add	r7, sp, #8
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3320      	adds	r3, #32
 8005622:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3330      	adds	r3, #48	; 0x30
 800562a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <HAL_SPI_TransmitReceive+0x32>
 8005636:	2302      	movs	r3, #2
 8005638:	e1fd      	b.n	8005a36 <HAL_SPI_TransmitReceive+0x42e>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005642:	f7fc f94f 	bl	80018e4 <HAL_GetTick>
 8005646:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8005648:	887b      	ldrh	r3, [r7, #2]
 800564a:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 800564c:	887b      	ldrh	r3, [r7, #2]
 800564e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	d009      	beq.n	8005670 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 800565c:	2302      	movs	r3, #2
 800565e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800566a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800566e:	e1e2      	b.n	8005a36 <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_SPI_TransmitReceive+0x7a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <HAL_SPI_TransmitReceive+0x7a>
 800567c:	887b      	ldrh	r3, [r7, #2]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d109      	bne.n	8005696 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005690:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005694:	e1cf      	b.n	8005a36 <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2205      	movs	r2, #5
 800569a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	887a      	ldrh	r2, [r7, #2]
 80056b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	887a      	ldrh	r2, [r7, #2]
 80056b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	887a      	ldrh	r2, [r7, #2]
 80056c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	887a      	ldrh	r2, [r7, #2]
 80056ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 80056ec:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	4b82      	ldr	r3, [pc, #520]	; (8005900 <HAL_SPI_TransmitReceive+0x2f8>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	8879      	ldrh	r1, [r7, #2]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	430b      	orrs	r3, r1
 8005700:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0201 	orr.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800571a:	d107      	bne.n	800572c <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800572a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	2b0f      	cmp	r3, #15
 8005732:	d970      	bls.n	8005816 <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005734:	e068      	b.n	8005808 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b02      	cmp	r3, #2
 8005742:	d11a      	bne.n	800577a <HAL_SPI_TransmitReceive+0x172>
 8005744:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005746:	2b00      	cmp	r3, #0
 8005748:	d017      	beq.n	800577a <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575a:	1d1a      	adds	r2, r3, #4
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005778:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	f248 0308 	movw	r3, #32776	; 0x8008
 8005784:	4013      	ands	r3, r2
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01a      	beq.n	80057c0 <HAL_SPI_TransmitReceive+0x1b8>
 800578a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800578c:	2b00      	cmp	r3, #0
 800578e:	d017      	beq.n	80057c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005798:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800579a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a0:	1d1a      	adds	r2, r3, #4
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80057be:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057c0:	f7fc f890 	bl	80018e4 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d803      	bhi.n	80057d8 <HAL_SPI_TransmitReceive+0x1d0>
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d6:	d102      	bne.n	80057de <HAL_SPI_TransmitReceive+0x1d6>
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d114      	bne.n	8005808 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 f92e 	bl	8005a40 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e116      	b.n	8005a36 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005808:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800580a:	2b00      	cmp	r3, #0
 800580c:	d193      	bne.n	8005736 <HAL_SPI_TransmitReceive+0x12e>
 800580e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	d190      	bne.n	8005736 <HAL_SPI_TransmitReceive+0x12e>
 8005814:	e0e8      	b.n	80059e8 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2b07      	cmp	r3, #7
 800581c:	f240 80de 	bls.w	80059dc <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005820:	e066      	b.n	80058f0 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b02      	cmp	r3, #2
 800582e:	d119      	bne.n	8005864 <HAL_SPI_TransmitReceive+0x25c>
 8005830:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005832:	2b00      	cmp	r3, #0
 8005834:	d016      	beq.n	8005864 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583a:	881a      	ldrh	r2, [r3, #0]
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005844:	1c9a      	adds	r2, r3, #2
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005850:	b29b      	uxth	r3, r3
 8005852:	3b01      	subs	r3, #1
 8005854:	b29a      	uxth	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005862:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b01      	cmp	r3, #1
 8005870:	d11a      	bne.n	80058a8 <HAL_SPI_TransmitReceive+0x2a0>
 8005872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005874:	2b00      	cmp	r3, #0
 8005876:	d017      	beq.n	80058a8 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	8812      	ldrh	r2, [r2, #0]
 8005880:	b292      	uxth	r2, r2
 8005882:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005888:	1c9a      	adds	r2, r3, #2
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80058a6:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058a8:	f7fc f81c 	bl	80018e4 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d803      	bhi.n	80058c0 <HAL_SPI_TransmitReceive+0x2b8>
 80058b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058be:	d102      	bne.n	80058c6 <HAL_SPI_TransmitReceive+0x2be>
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d114      	bne.n	80058f0 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 f8ba 	bl	8005a40 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e0a2      	b.n	8005a36 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80058f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d195      	bne.n	8005822 <HAL_SPI_TransmitReceive+0x21a>
 80058f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d192      	bne.n	8005822 <HAL_SPI_TransmitReceive+0x21a>
 80058fc:	e074      	b.n	80059e8 <HAL_SPI_TransmitReceive+0x3e0>
 80058fe:	bf00      	nop
 8005900:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b02      	cmp	r3, #2
 8005910:	d11b      	bne.n	800594a <HAL_SPI_TransmitReceive+0x342>
 8005912:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005914:	2b00      	cmp	r3, #0
 8005916:	d018      	beq.n	800594a <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3320      	adds	r3, #32
 8005922:	7812      	ldrb	r2, [r2, #0]
 8005924:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592a:	1c5a      	adds	r2, r3, #1
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005936:	b29b      	uxth	r3, r3
 8005938:	3b01      	subs	r3, #1
 800593a:	b29a      	uxth	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005948:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d11d      	bne.n	8005994 <HAL_SPI_TransmitReceive+0x38c>
 8005958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800595a:	2b00      	cmp	r3, #0
 800595c:	d01a      	beq.n	8005994 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800596a:	7812      	ldrb	r2, [r2, #0]
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005992:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005994:	f7fb ffa6 	bl	80018e4 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d803      	bhi.n	80059ac <HAL_SPI_TransmitReceive+0x3a4>
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059aa:	d102      	bne.n	80059b2 <HAL_SPI_TransmitReceive+0x3aa>
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d114      	bne.n	80059dc <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 f844 	bl	8005a40 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e02c      	b.n	8005a36 <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80059dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d190      	bne.n	8005904 <HAL_SPI_TransmitReceive+0x2fc>
 80059e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d18d      	bne.n	8005904 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	2200      	movs	r2, #0
 80059f0:	2108      	movs	r1, #8
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f8c4 	bl	8005b80 <SPI_WaitOnFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a04:	f043 0220 	orr.w	r2, r3, #32
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 f816 	bl	8005a40 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e001      	b.n	8005a36 <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 8005a32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3728      	adds	r7, #40	; 0x28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop

08005a40 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0208 	orr.w	r2, r2, #8
 8005a5e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699a      	ldr	r2, [r3, #24]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0210 	orr.w	r2, r2, #16
 8005a6e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0201 	bic.w	r2, r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6919      	ldr	r1, [r3, #16]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	4b3c      	ldr	r3, [pc, #240]	; (8005b7c <SPI_CloseTransfer+0x13c>)
 8005a8c:	400b      	ands	r3, r1
 8005a8e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689a      	ldr	r2, [r3, #8]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005a9e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d014      	beq.n	8005ad6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00f      	beq.n	8005ad6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005abc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699a      	ldr	r2, [r3, #24]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0220 	orr.w	r2, r2, #32
 8005ad4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d014      	beq.n	8005b0c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00f      	beq.n	8005b0c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005af2:	f043 0204 	orr.w	r2, r3, #4
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b0a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00f      	beq.n	8005b36 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1c:	f043 0201 	orr.w	r2, r3, #1
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b34:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00f      	beq.n	8005b60 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b46:	f043 0208 	orr.w	r2, r3, #8
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b5e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	fffffc90 	.word	0xfffffc90

08005b80 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005b90:	e010      	b.n	8005bb4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b92:	f7fb fea7 	bl	80018e4 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d803      	bhi.n	8005baa <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ba8:	d102      	bne.n	8005bb0 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e00f      	b.n	8005bd4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695a      	ldr	r2, [r3, #20]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	bf0c      	ite	eq
 8005bc4:	2301      	moveq	r3, #1
 8005bc6:	2300      	movne	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	461a      	mov	r2, r3
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d0df      	beq.n	8005b92 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	3301      	adds	r3, #1
 8005bec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	3307      	adds	r3, #7
 8005bfa:	08db      	lsrs	r3, r3, #3
 8005bfc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	fb02 f303 	mul.w	r3, r2, r3
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e042      	b.n	8005caa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7fb fc64 	bl	8001504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2224      	movs	r2, #36	; 0x24
 8005c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f022 0201 	bic.w	r2, r2, #1
 8005c52:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f8bb 	bl	8005dd0 <UART_SetConfig>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e022      	b.n	8005caa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fe17 	bl	80068a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0201 	orr.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fe9e 	bl	80069e4 <UART_CheckIdleState>
 8005ca8:	4603      	mov	r3, r0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b08a      	sub	sp, #40	; 0x28
 8005cb6:	af02      	add	r7, sp, #8
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	603b      	str	r3, [r7, #0]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d17b      	bne.n	8005dc4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_UART_Transmit+0x26>
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e074      	b.n	8005dc6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2221      	movs	r2, #33	; 0x21
 8005ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cec:	f7fb fdfa 	bl	80018e4 <HAL_GetTick>
 8005cf0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	88fa      	ldrh	r2, [r7, #6]
 8005cf6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	88fa      	ldrh	r2, [r7, #6]
 8005cfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d0a:	d108      	bne.n	8005d1e <HAL_UART_Transmit+0x6c>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d104      	bne.n	8005d1e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	61bb      	str	r3, [r7, #24]
 8005d1c:	e003      	b.n	8005d26 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d26:	e030      	b.n	8005d8a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	2180      	movs	r1, #128	; 0x80
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 ff00 	bl	8006b38 <UART_WaitOnFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d005      	beq.n	8005d4a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2220      	movs	r2, #32
 8005d42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e03d      	b.n	8005dc6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10b      	bne.n	8005d68 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	461a      	mov	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	3302      	adds	r3, #2
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e007      	b.n	8005d78 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	781a      	ldrb	r2, [r3, #0]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	3301      	adds	r3, #1
 8005d76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1c8      	bne.n	8005d28 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2140      	movs	r1, #64	; 0x40
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 fec9 	bl	8006b38 <UART_WaitOnFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d005      	beq.n	8005db8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2220      	movs	r2, #32
 8005db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e006      	b.n	8005dc6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e000      	b.n	8005dc6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005dc4:	2302      	movs	r3, #2
  }
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3720      	adds	r7, #32
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dd4:	b092      	sub	sp, #72	; 0x48
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	431a      	orrs	r2, r3
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	431a      	orrs	r2, r3
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	4bbe      	ldr	r3, [pc, #760]	; (80060f8 <UART_SetConfig+0x328>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	6812      	ldr	r2, [r2, #0]
 8005e06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4ab3      	ldr	r2, [pc, #716]	; (80060fc <UART_SetConfig+0x32c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d004      	beq.n	8005e3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	4baf      	ldr	r3, [pc, #700]	; (8006100 <UART_SetConfig+0x330>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	f023 010f 	bic.w	r1, r3, #15
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	430a      	orrs	r2, r1
 8005e64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4aa6      	ldr	r2, [pc, #664]	; (8006104 <UART_SetConfig+0x334>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d177      	bne.n	8005f60 <UART_SetConfig+0x190>
 8005e70:	4ba5      	ldr	r3, [pc, #660]	; (8006108 <UART_SetConfig+0x338>)
 8005e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e78:	2b28      	cmp	r3, #40	; 0x28
 8005e7a:	d86d      	bhi.n	8005f58 <UART_SetConfig+0x188>
 8005e7c:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <UART_SetConfig+0xb4>)
 8005e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e82:	bf00      	nop
 8005e84:	08005f29 	.word	0x08005f29
 8005e88:	08005f59 	.word	0x08005f59
 8005e8c:	08005f59 	.word	0x08005f59
 8005e90:	08005f59 	.word	0x08005f59
 8005e94:	08005f59 	.word	0x08005f59
 8005e98:	08005f59 	.word	0x08005f59
 8005e9c:	08005f59 	.word	0x08005f59
 8005ea0:	08005f59 	.word	0x08005f59
 8005ea4:	08005f31 	.word	0x08005f31
 8005ea8:	08005f59 	.word	0x08005f59
 8005eac:	08005f59 	.word	0x08005f59
 8005eb0:	08005f59 	.word	0x08005f59
 8005eb4:	08005f59 	.word	0x08005f59
 8005eb8:	08005f59 	.word	0x08005f59
 8005ebc:	08005f59 	.word	0x08005f59
 8005ec0:	08005f59 	.word	0x08005f59
 8005ec4:	08005f39 	.word	0x08005f39
 8005ec8:	08005f59 	.word	0x08005f59
 8005ecc:	08005f59 	.word	0x08005f59
 8005ed0:	08005f59 	.word	0x08005f59
 8005ed4:	08005f59 	.word	0x08005f59
 8005ed8:	08005f59 	.word	0x08005f59
 8005edc:	08005f59 	.word	0x08005f59
 8005ee0:	08005f59 	.word	0x08005f59
 8005ee4:	08005f41 	.word	0x08005f41
 8005ee8:	08005f59 	.word	0x08005f59
 8005eec:	08005f59 	.word	0x08005f59
 8005ef0:	08005f59 	.word	0x08005f59
 8005ef4:	08005f59 	.word	0x08005f59
 8005ef8:	08005f59 	.word	0x08005f59
 8005efc:	08005f59 	.word	0x08005f59
 8005f00:	08005f59 	.word	0x08005f59
 8005f04:	08005f49 	.word	0x08005f49
 8005f08:	08005f59 	.word	0x08005f59
 8005f0c:	08005f59 	.word	0x08005f59
 8005f10:	08005f59 	.word	0x08005f59
 8005f14:	08005f59 	.word	0x08005f59
 8005f18:	08005f59 	.word	0x08005f59
 8005f1c:	08005f59 	.word	0x08005f59
 8005f20:	08005f59 	.word	0x08005f59
 8005f24:	08005f51 	.word	0x08005f51
 8005f28:	2301      	movs	r3, #1
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2e:	e222      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f30:	2304      	movs	r3, #4
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f36:	e21e      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f38:	2308      	movs	r3, #8
 8005f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3e:	e21a      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f40:	2310      	movs	r3, #16
 8005f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f46:	e216      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f48:	2320      	movs	r3, #32
 8005f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4e:	e212      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f50:	2340      	movs	r3, #64	; 0x40
 8005f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f56:	e20e      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f58:	2380      	movs	r3, #128	; 0x80
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5e:	e20a      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a69      	ldr	r2, [pc, #420]	; (800610c <UART_SetConfig+0x33c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d130      	bne.n	8005fcc <UART_SetConfig+0x1fc>
 8005f6a:	4b67      	ldr	r3, [pc, #412]	; (8006108 <UART_SetConfig+0x338>)
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	2b05      	cmp	r3, #5
 8005f74:	d826      	bhi.n	8005fc4 <UART_SetConfig+0x1f4>
 8005f76:	a201      	add	r2, pc, #4	; (adr r2, 8005f7c <UART_SetConfig+0x1ac>)
 8005f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7c:	08005f95 	.word	0x08005f95
 8005f80:	08005f9d 	.word	0x08005f9d
 8005f84:	08005fa5 	.word	0x08005fa5
 8005f88:	08005fad 	.word	0x08005fad
 8005f8c:	08005fb5 	.word	0x08005fb5
 8005f90:	08005fbd 	.word	0x08005fbd
 8005f94:	2300      	movs	r3, #0
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9a:	e1ec      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005f9c:	2304      	movs	r3, #4
 8005f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa2:	e1e8      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005fa4:	2308      	movs	r3, #8
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005faa:	e1e4      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005fac:	2310      	movs	r3, #16
 8005fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb2:	e1e0      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005fb4:	2320      	movs	r3, #32
 8005fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fba:	e1dc      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005fbc:	2340      	movs	r3, #64	; 0x40
 8005fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc2:	e1d8      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fca:	e1d4      	b.n	8006376 <UART_SetConfig+0x5a6>
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a4f      	ldr	r2, [pc, #316]	; (8006110 <UART_SetConfig+0x340>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d130      	bne.n	8006038 <UART_SetConfig+0x268>
 8005fd6:	4b4c      	ldr	r3, [pc, #304]	; (8006108 <UART_SetConfig+0x338>)
 8005fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	2b05      	cmp	r3, #5
 8005fe0:	d826      	bhi.n	8006030 <UART_SetConfig+0x260>
 8005fe2:	a201      	add	r2, pc, #4	; (adr r2, 8005fe8 <UART_SetConfig+0x218>)
 8005fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe8:	08006001 	.word	0x08006001
 8005fec:	08006009 	.word	0x08006009
 8005ff0:	08006011 	.word	0x08006011
 8005ff4:	08006019 	.word	0x08006019
 8005ff8:	08006021 	.word	0x08006021
 8005ffc:	08006029 	.word	0x08006029
 8006000:	2300      	movs	r3, #0
 8006002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006006:	e1b6      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006008:	2304      	movs	r3, #4
 800600a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600e:	e1b2      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006010:	2308      	movs	r3, #8
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006016:	e1ae      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006018:	2310      	movs	r3, #16
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601e:	e1aa      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006020:	2320      	movs	r3, #32
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006026:	e1a6      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006028:	2340      	movs	r3, #64	; 0x40
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602e:	e1a2      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006030:	2380      	movs	r3, #128	; 0x80
 8006032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006036:	e19e      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a35      	ldr	r2, [pc, #212]	; (8006114 <UART_SetConfig+0x344>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d130      	bne.n	80060a4 <UART_SetConfig+0x2d4>
 8006042:	4b31      	ldr	r3, [pc, #196]	; (8006108 <UART_SetConfig+0x338>)
 8006044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	2b05      	cmp	r3, #5
 800604c:	d826      	bhi.n	800609c <UART_SetConfig+0x2cc>
 800604e:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <UART_SetConfig+0x284>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	0800606d 	.word	0x0800606d
 8006058:	08006075 	.word	0x08006075
 800605c:	0800607d 	.word	0x0800607d
 8006060:	08006085 	.word	0x08006085
 8006064:	0800608d 	.word	0x0800608d
 8006068:	08006095 	.word	0x08006095
 800606c:	2300      	movs	r3, #0
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006072:	e180      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006074:	2304      	movs	r3, #4
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607a:	e17c      	b.n	8006376 <UART_SetConfig+0x5a6>
 800607c:	2308      	movs	r3, #8
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006082:	e178      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006084:	2310      	movs	r3, #16
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608a:	e174      	b.n	8006376 <UART_SetConfig+0x5a6>
 800608c:	2320      	movs	r3, #32
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006092:	e170      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006094:	2340      	movs	r3, #64	; 0x40
 8006096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609a:	e16c      	b.n	8006376 <UART_SetConfig+0x5a6>
 800609c:	2380      	movs	r3, #128	; 0x80
 800609e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a2:	e168      	b.n	8006376 <UART_SetConfig+0x5a6>
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <UART_SetConfig+0x348>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d142      	bne.n	8006134 <UART_SetConfig+0x364>
 80060ae:	4b16      	ldr	r3, [pc, #88]	; (8006108 <UART_SetConfig+0x338>)
 80060b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	2b05      	cmp	r3, #5
 80060b8:	d838      	bhi.n	800612c <UART_SetConfig+0x35c>
 80060ba:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <UART_SetConfig+0x2f0>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060d9 	.word	0x080060d9
 80060c4:	080060e1 	.word	0x080060e1
 80060c8:	080060e9 	.word	0x080060e9
 80060cc:	080060f1 	.word	0x080060f1
 80060d0:	0800611d 	.word	0x0800611d
 80060d4:	08006125 	.word	0x08006125
 80060d8:	2300      	movs	r3, #0
 80060da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060de:	e14a      	b.n	8006376 <UART_SetConfig+0x5a6>
 80060e0:	2304      	movs	r3, #4
 80060e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e6:	e146      	b.n	8006376 <UART_SetConfig+0x5a6>
 80060e8:	2308      	movs	r3, #8
 80060ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ee:	e142      	b.n	8006376 <UART_SetConfig+0x5a6>
 80060f0:	2310      	movs	r3, #16
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f6:	e13e      	b.n	8006376 <UART_SetConfig+0x5a6>
 80060f8:	cfff69f3 	.word	0xcfff69f3
 80060fc:	58000c00 	.word	0x58000c00
 8006100:	11fff4ff 	.word	0x11fff4ff
 8006104:	40011000 	.word	0x40011000
 8006108:	58024400 	.word	0x58024400
 800610c:	40004400 	.word	0x40004400
 8006110:	40004800 	.word	0x40004800
 8006114:	40004c00 	.word	0x40004c00
 8006118:	40005000 	.word	0x40005000
 800611c:	2320      	movs	r3, #32
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006122:	e128      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006124:	2340      	movs	r3, #64	; 0x40
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612a:	e124      	b.n	8006376 <UART_SetConfig+0x5a6>
 800612c:	2380      	movs	r3, #128	; 0x80
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006132:	e120      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4acb      	ldr	r2, [pc, #812]	; (8006468 <UART_SetConfig+0x698>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d176      	bne.n	800622c <UART_SetConfig+0x45c>
 800613e:	4bcb      	ldr	r3, [pc, #812]	; (800646c <UART_SetConfig+0x69c>)
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006146:	2b28      	cmp	r3, #40	; 0x28
 8006148:	d86c      	bhi.n	8006224 <UART_SetConfig+0x454>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <UART_SetConfig+0x380>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	080061f5 	.word	0x080061f5
 8006154:	08006225 	.word	0x08006225
 8006158:	08006225 	.word	0x08006225
 800615c:	08006225 	.word	0x08006225
 8006160:	08006225 	.word	0x08006225
 8006164:	08006225 	.word	0x08006225
 8006168:	08006225 	.word	0x08006225
 800616c:	08006225 	.word	0x08006225
 8006170:	080061fd 	.word	0x080061fd
 8006174:	08006225 	.word	0x08006225
 8006178:	08006225 	.word	0x08006225
 800617c:	08006225 	.word	0x08006225
 8006180:	08006225 	.word	0x08006225
 8006184:	08006225 	.word	0x08006225
 8006188:	08006225 	.word	0x08006225
 800618c:	08006225 	.word	0x08006225
 8006190:	08006205 	.word	0x08006205
 8006194:	08006225 	.word	0x08006225
 8006198:	08006225 	.word	0x08006225
 800619c:	08006225 	.word	0x08006225
 80061a0:	08006225 	.word	0x08006225
 80061a4:	08006225 	.word	0x08006225
 80061a8:	08006225 	.word	0x08006225
 80061ac:	08006225 	.word	0x08006225
 80061b0:	0800620d 	.word	0x0800620d
 80061b4:	08006225 	.word	0x08006225
 80061b8:	08006225 	.word	0x08006225
 80061bc:	08006225 	.word	0x08006225
 80061c0:	08006225 	.word	0x08006225
 80061c4:	08006225 	.word	0x08006225
 80061c8:	08006225 	.word	0x08006225
 80061cc:	08006225 	.word	0x08006225
 80061d0:	08006215 	.word	0x08006215
 80061d4:	08006225 	.word	0x08006225
 80061d8:	08006225 	.word	0x08006225
 80061dc:	08006225 	.word	0x08006225
 80061e0:	08006225 	.word	0x08006225
 80061e4:	08006225 	.word	0x08006225
 80061e8:	08006225 	.word	0x08006225
 80061ec:	08006225 	.word	0x08006225
 80061f0:	0800621d 	.word	0x0800621d
 80061f4:	2301      	movs	r3, #1
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fa:	e0bc      	b.n	8006376 <UART_SetConfig+0x5a6>
 80061fc:	2304      	movs	r3, #4
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006202:	e0b8      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006204:	2308      	movs	r3, #8
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620a:	e0b4      	b.n	8006376 <UART_SetConfig+0x5a6>
 800620c:	2310      	movs	r3, #16
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006212:	e0b0      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006214:	2320      	movs	r3, #32
 8006216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800621a:	e0ac      	b.n	8006376 <UART_SetConfig+0x5a6>
 800621c:	2340      	movs	r3, #64	; 0x40
 800621e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006222:	e0a8      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006224:	2380      	movs	r3, #128	; 0x80
 8006226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800622a:	e0a4      	b.n	8006376 <UART_SetConfig+0x5a6>
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a8f      	ldr	r2, [pc, #572]	; (8006470 <UART_SetConfig+0x6a0>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d130      	bne.n	8006298 <UART_SetConfig+0x4c8>
 8006236:	4b8d      	ldr	r3, [pc, #564]	; (800646c <UART_SetConfig+0x69c>)
 8006238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623a:	f003 0307 	and.w	r3, r3, #7
 800623e:	2b05      	cmp	r3, #5
 8006240:	d826      	bhi.n	8006290 <UART_SetConfig+0x4c0>
 8006242:	a201      	add	r2, pc, #4	; (adr r2, 8006248 <UART_SetConfig+0x478>)
 8006244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006248:	08006261 	.word	0x08006261
 800624c:	08006269 	.word	0x08006269
 8006250:	08006271 	.word	0x08006271
 8006254:	08006279 	.word	0x08006279
 8006258:	08006281 	.word	0x08006281
 800625c:	08006289 	.word	0x08006289
 8006260:	2300      	movs	r3, #0
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006266:	e086      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006268:	2304      	movs	r3, #4
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800626e:	e082      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006270:	2308      	movs	r3, #8
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006276:	e07e      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006278:	2310      	movs	r3, #16
 800627a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627e:	e07a      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006280:	2320      	movs	r3, #32
 8006282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006286:	e076      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006288:	2340      	movs	r3, #64	; 0x40
 800628a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628e:	e072      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006290:	2380      	movs	r3, #128	; 0x80
 8006292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006296:	e06e      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a75      	ldr	r2, [pc, #468]	; (8006474 <UART_SetConfig+0x6a4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d130      	bne.n	8006304 <UART_SetConfig+0x534>
 80062a2:	4b72      	ldr	r3, [pc, #456]	; (800646c <UART_SetConfig+0x69c>)
 80062a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	2b05      	cmp	r3, #5
 80062ac:	d826      	bhi.n	80062fc <UART_SetConfig+0x52c>
 80062ae:	a201      	add	r2, pc, #4	; (adr r2, 80062b4 <UART_SetConfig+0x4e4>)
 80062b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b4:	080062cd 	.word	0x080062cd
 80062b8:	080062d5 	.word	0x080062d5
 80062bc:	080062dd 	.word	0x080062dd
 80062c0:	080062e5 	.word	0x080062e5
 80062c4:	080062ed 	.word	0x080062ed
 80062c8:	080062f5 	.word	0x080062f5
 80062cc:	2300      	movs	r3, #0
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d2:	e050      	b.n	8006376 <UART_SetConfig+0x5a6>
 80062d4:	2304      	movs	r3, #4
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062da:	e04c      	b.n	8006376 <UART_SetConfig+0x5a6>
 80062dc:	2308      	movs	r3, #8
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e2:	e048      	b.n	8006376 <UART_SetConfig+0x5a6>
 80062e4:	2310      	movs	r3, #16
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ea:	e044      	b.n	8006376 <UART_SetConfig+0x5a6>
 80062ec:	2320      	movs	r3, #32
 80062ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f2:	e040      	b.n	8006376 <UART_SetConfig+0x5a6>
 80062f4:	2340      	movs	r3, #64	; 0x40
 80062f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fa:	e03c      	b.n	8006376 <UART_SetConfig+0x5a6>
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006302:	e038      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a5b      	ldr	r2, [pc, #364]	; (8006478 <UART_SetConfig+0x6a8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d130      	bne.n	8006370 <UART_SetConfig+0x5a0>
 800630e:	4b57      	ldr	r3, [pc, #348]	; (800646c <UART_SetConfig+0x69c>)
 8006310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006312:	f003 0307 	and.w	r3, r3, #7
 8006316:	2b05      	cmp	r3, #5
 8006318:	d826      	bhi.n	8006368 <UART_SetConfig+0x598>
 800631a:	a201      	add	r2, pc, #4	; (adr r2, 8006320 <UART_SetConfig+0x550>)
 800631c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006320:	08006339 	.word	0x08006339
 8006324:	08006341 	.word	0x08006341
 8006328:	08006349 	.word	0x08006349
 800632c:	08006351 	.word	0x08006351
 8006330:	08006359 	.word	0x08006359
 8006334:	08006361 	.word	0x08006361
 8006338:	2302      	movs	r3, #2
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633e:	e01a      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006340:	2304      	movs	r3, #4
 8006342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006346:	e016      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006348:	2308      	movs	r3, #8
 800634a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634e:	e012      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006350:	2310      	movs	r3, #16
 8006352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006356:	e00e      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006358:	2320      	movs	r3, #32
 800635a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635e:	e00a      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006360:	2340      	movs	r3, #64	; 0x40
 8006362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006366:	e006      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006368:	2380      	movs	r3, #128	; 0x80
 800636a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636e:	e002      	b.n	8006376 <UART_SetConfig+0x5a6>
 8006370:	2380      	movs	r3, #128	; 0x80
 8006372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a3f      	ldr	r2, [pc, #252]	; (8006478 <UART_SetConfig+0x6a8>)
 800637c:	4293      	cmp	r3, r2
 800637e:	f040 80f8 	bne.w	8006572 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006382:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006386:	2b20      	cmp	r3, #32
 8006388:	dc46      	bgt.n	8006418 <UART_SetConfig+0x648>
 800638a:	2b02      	cmp	r3, #2
 800638c:	f2c0 8082 	blt.w	8006494 <UART_SetConfig+0x6c4>
 8006390:	3b02      	subs	r3, #2
 8006392:	2b1e      	cmp	r3, #30
 8006394:	d87e      	bhi.n	8006494 <UART_SetConfig+0x6c4>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <UART_SetConfig+0x5cc>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	0800641f 	.word	0x0800641f
 80063a0:	08006495 	.word	0x08006495
 80063a4:	08006427 	.word	0x08006427
 80063a8:	08006495 	.word	0x08006495
 80063ac:	08006495 	.word	0x08006495
 80063b0:	08006495 	.word	0x08006495
 80063b4:	08006437 	.word	0x08006437
 80063b8:	08006495 	.word	0x08006495
 80063bc:	08006495 	.word	0x08006495
 80063c0:	08006495 	.word	0x08006495
 80063c4:	08006495 	.word	0x08006495
 80063c8:	08006495 	.word	0x08006495
 80063cc:	08006495 	.word	0x08006495
 80063d0:	08006495 	.word	0x08006495
 80063d4:	08006447 	.word	0x08006447
 80063d8:	08006495 	.word	0x08006495
 80063dc:	08006495 	.word	0x08006495
 80063e0:	08006495 	.word	0x08006495
 80063e4:	08006495 	.word	0x08006495
 80063e8:	08006495 	.word	0x08006495
 80063ec:	08006495 	.word	0x08006495
 80063f0:	08006495 	.word	0x08006495
 80063f4:	08006495 	.word	0x08006495
 80063f8:	08006495 	.word	0x08006495
 80063fc:	08006495 	.word	0x08006495
 8006400:	08006495 	.word	0x08006495
 8006404:	08006495 	.word	0x08006495
 8006408:	08006495 	.word	0x08006495
 800640c:	08006495 	.word	0x08006495
 8006410:	08006495 	.word	0x08006495
 8006414:	08006487 	.word	0x08006487
 8006418:	2b40      	cmp	r3, #64	; 0x40
 800641a:	d037      	beq.n	800648c <UART_SetConfig+0x6bc>
 800641c:	e03a      	b.n	8006494 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800641e:	f7fe f821 	bl	8004464 <HAL_RCCEx_GetD3PCLK1Freq>
 8006422:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006424:	e03c      	b.n	80064a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800642a:	4618      	mov	r0, r3
 800642c:	f7fe f830 	bl	8004490 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006434:	e034      	b.n	80064a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006436:	f107 0318 	add.w	r3, r7, #24
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe f97c 	bl	8004738 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006444:	e02c      	b.n	80064a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006446:	4b09      	ldr	r3, [pc, #36]	; (800646c <UART_SetConfig+0x69c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d016      	beq.n	8006480 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006452:	4b06      	ldr	r3, [pc, #24]	; (800646c <UART_SetConfig+0x69c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	08db      	lsrs	r3, r3, #3
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	4a07      	ldr	r2, [pc, #28]	; (800647c <UART_SetConfig+0x6ac>)
 800645e:	fa22 f303 	lsr.w	r3, r2, r3
 8006462:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006464:	e01c      	b.n	80064a0 <UART_SetConfig+0x6d0>
 8006466:	bf00      	nop
 8006468:	40011400 	.word	0x40011400
 800646c:	58024400 	.word	0x58024400
 8006470:	40007800 	.word	0x40007800
 8006474:	40007c00 	.word	0x40007c00
 8006478:	58000c00 	.word	0x58000c00
 800647c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006480:	4b9d      	ldr	r3, [pc, #628]	; (80066f8 <UART_SetConfig+0x928>)
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006484:	e00c      	b.n	80064a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006486:	4b9d      	ldr	r3, [pc, #628]	; (80066fc <UART_SetConfig+0x92c>)
 8006488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800648a:	e009      	b.n	80064a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800648c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006490:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006492:	e005      	b.n	80064a0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800649e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 81de 	beq.w	8006864 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	4a94      	ldr	r2, [pc, #592]	; (8006700 <UART_SetConfig+0x930>)
 80064ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064b2:	461a      	mov	r2, r3
 80064b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ba:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	685a      	ldr	r2, [r3, #4]
 80064c0:	4613      	mov	r3, r2
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	4413      	add	r3, r2
 80064c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d305      	bcc.n	80064d8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d903      	bls.n	80064e0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064de:	e1c1      	b.n	8006864 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e2:	2200      	movs	r2, #0
 80064e4:	60bb      	str	r3, [r7, #8]
 80064e6:	60fa      	str	r2, [r7, #12]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	4a84      	ldr	r2, [pc, #528]	; (8006700 <UART_SetConfig+0x930>)
 80064ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2200      	movs	r2, #0
 80064f6:	603b      	str	r3, [r7, #0]
 80064f8:	607a      	str	r2, [r7, #4]
 80064fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006502:	f7f9 ff3d 	bl	8000380 <__aeabi_uldivmod>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4610      	mov	r0, r2
 800650c:	4619      	mov	r1, r3
 800650e:	f04f 0200 	mov.w	r2, #0
 8006512:	f04f 0300 	mov.w	r3, #0
 8006516:	020b      	lsls	r3, r1, #8
 8006518:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800651c:	0202      	lsls	r2, r0, #8
 800651e:	6979      	ldr	r1, [r7, #20]
 8006520:	6849      	ldr	r1, [r1, #4]
 8006522:	0849      	lsrs	r1, r1, #1
 8006524:	2000      	movs	r0, #0
 8006526:	460c      	mov	r4, r1
 8006528:	4605      	mov	r5, r0
 800652a:	eb12 0804 	adds.w	r8, r2, r4
 800652e:	eb43 0905 	adc.w	r9, r3, r5
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	469a      	mov	sl, r3
 800653a:	4693      	mov	fp, r2
 800653c:	4652      	mov	r2, sl
 800653e:	465b      	mov	r3, fp
 8006540:	4640      	mov	r0, r8
 8006542:	4649      	mov	r1, r9
 8006544:	f7f9 ff1c 	bl	8000380 <__aeabi_uldivmod>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	4613      	mov	r3, r2
 800654e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006556:	d308      	bcc.n	800656a <UART_SetConfig+0x79a>
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800655e:	d204      	bcs.n	800656a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006566:	60da      	str	r2, [r3, #12]
 8006568:	e17c      	b.n	8006864 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006570:	e178      	b.n	8006864 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800657a:	f040 80c5 	bne.w	8006708 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800657e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006582:	2b20      	cmp	r3, #32
 8006584:	dc48      	bgt.n	8006618 <UART_SetConfig+0x848>
 8006586:	2b00      	cmp	r3, #0
 8006588:	db7b      	blt.n	8006682 <UART_SetConfig+0x8b2>
 800658a:	2b20      	cmp	r3, #32
 800658c:	d879      	bhi.n	8006682 <UART_SetConfig+0x8b2>
 800658e:	a201      	add	r2, pc, #4	; (adr r2, 8006594 <UART_SetConfig+0x7c4>)
 8006590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006594:	0800661f 	.word	0x0800661f
 8006598:	08006627 	.word	0x08006627
 800659c:	08006683 	.word	0x08006683
 80065a0:	08006683 	.word	0x08006683
 80065a4:	0800662f 	.word	0x0800662f
 80065a8:	08006683 	.word	0x08006683
 80065ac:	08006683 	.word	0x08006683
 80065b0:	08006683 	.word	0x08006683
 80065b4:	0800663f 	.word	0x0800663f
 80065b8:	08006683 	.word	0x08006683
 80065bc:	08006683 	.word	0x08006683
 80065c0:	08006683 	.word	0x08006683
 80065c4:	08006683 	.word	0x08006683
 80065c8:	08006683 	.word	0x08006683
 80065cc:	08006683 	.word	0x08006683
 80065d0:	08006683 	.word	0x08006683
 80065d4:	0800664f 	.word	0x0800664f
 80065d8:	08006683 	.word	0x08006683
 80065dc:	08006683 	.word	0x08006683
 80065e0:	08006683 	.word	0x08006683
 80065e4:	08006683 	.word	0x08006683
 80065e8:	08006683 	.word	0x08006683
 80065ec:	08006683 	.word	0x08006683
 80065f0:	08006683 	.word	0x08006683
 80065f4:	08006683 	.word	0x08006683
 80065f8:	08006683 	.word	0x08006683
 80065fc:	08006683 	.word	0x08006683
 8006600:	08006683 	.word	0x08006683
 8006604:	08006683 	.word	0x08006683
 8006608:	08006683 	.word	0x08006683
 800660c:	08006683 	.word	0x08006683
 8006610:	08006683 	.word	0x08006683
 8006614:	08006675 	.word	0x08006675
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	d02e      	beq.n	800667a <UART_SetConfig+0x8aa>
 800661c:	e031      	b.n	8006682 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800661e:	f7fc fceb 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 8006622:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006624:	e033      	b.n	800668e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006626:	f7fc fcfd 	bl	8003024 <HAL_RCC_GetPCLK2Freq>
 800662a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800662c:	e02f      	b.n	800668e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800662e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006632:	4618      	mov	r0, r3
 8006634:	f7fd ff2c 	bl	8004490 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800663c:	e027      	b.n	800668e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800663e:	f107 0318 	add.w	r3, r7, #24
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe f878 	bl	8004738 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800664c:	e01f      	b.n	800668e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800664e:	4b2d      	ldr	r3, [pc, #180]	; (8006704 <UART_SetConfig+0x934>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800665a:	4b2a      	ldr	r3, [pc, #168]	; (8006704 <UART_SetConfig+0x934>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	08db      	lsrs	r3, r3, #3
 8006660:	f003 0303 	and.w	r3, r3, #3
 8006664:	4a24      	ldr	r2, [pc, #144]	; (80066f8 <UART_SetConfig+0x928>)
 8006666:	fa22 f303 	lsr.w	r3, r2, r3
 800666a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800666c:	e00f      	b.n	800668e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800666e:	4b22      	ldr	r3, [pc, #136]	; (80066f8 <UART_SetConfig+0x928>)
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006672:	e00c      	b.n	800668e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006674:	4b21      	ldr	r3, [pc, #132]	; (80066fc <UART_SetConfig+0x92c>)
 8006676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006678:	e009      	b.n	800668e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800667a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800667e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006680:	e005      	b.n	800668e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006682:	2300      	movs	r3, #0
 8006684:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800668c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800668e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80e7 	beq.w	8006864 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	4a19      	ldr	r2, [pc, #100]	; (8006700 <UART_SetConfig+0x930>)
 800669c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066a0:	461a      	mov	r2, r3
 80066a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80066a8:	005a      	lsls	r2, r3, #1
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	085b      	lsrs	r3, r3, #1
 80066b0:	441a      	add	r2, r3
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	2b0f      	cmp	r3, #15
 80066c0:	d916      	bls.n	80066f0 <UART_SetConfig+0x920>
 80066c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066c8:	d212      	bcs.n	80066f0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	f023 030f 	bic.w	r3, r3, #15
 80066d2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d6:	085b      	lsrs	r3, r3, #1
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	b29a      	uxth	r2, r3
 80066e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066e2:	4313      	orrs	r3, r2
 80066e4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80066ec:	60da      	str	r2, [r3, #12]
 80066ee:	e0b9      	b.n	8006864 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80066f6:	e0b5      	b.n	8006864 <UART_SetConfig+0xa94>
 80066f8:	03d09000 	.word	0x03d09000
 80066fc:	003d0900 	.word	0x003d0900
 8006700:	0800804c 	.word	0x0800804c
 8006704:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006708:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800670c:	2b20      	cmp	r3, #32
 800670e:	dc49      	bgt.n	80067a4 <UART_SetConfig+0x9d4>
 8006710:	2b00      	cmp	r3, #0
 8006712:	db7c      	blt.n	800680e <UART_SetConfig+0xa3e>
 8006714:	2b20      	cmp	r3, #32
 8006716:	d87a      	bhi.n	800680e <UART_SetConfig+0xa3e>
 8006718:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <UART_SetConfig+0x950>)
 800671a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671e:	bf00      	nop
 8006720:	080067ab 	.word	0x080067ab
 8006724:	080067b3 	.word	0x080067b3
 8006728:	0800680f 	.word	0x0800680f
 800672c:	0800680f 	.word	0x0800680f
 8006730:	080067bb 	.word	0x080067bb
 8006734:	0800680f 	.word	0x0800680f
 8006738:	0800680f 	.word	0x0800680f
 800673c:	0800680f 	.word	0x0800680f
 8006740:	080067cb 	.word	0x080067cb
 8006744:	0800680f 	.word	0x0800680f
 8006748:	0800680f 	.word	0x0800680f
 800674c:	0800680f 	.word	0x0800680f
 8006750:	0800680f 	.word	0x0800680f
 8006754:	0800680f 	.word	0x0800680f
 8006758:	0800680f 	.word	0x0800680f
 800675c:	0800680f 	.word	0x0800680f
 8006760:	080067db 	.word	0x080067db
 8006764:	0800680f 	.word	0x0800680f
 8006768:	0800680f 	.word	0x0800680f
 800676c:	0800680f 	.word	0x0800680f
 8006770:	0800680f 	.word	0x0800680f
 8006774:	0800680f 	.word	0x0800680f
 8006778:	0800680f 	.word	0x0800680f
 800677c:	0800680f 	.word	0x0800680f
 8006780:	0800680f 	.word	0x0800680f
 8006784:	0800680f 	.word	0x0800680f
 8006788:	0800680f 	.word	0x0800680f
 800678c:	0800680f 	.word	0x0800680f
 8006790:	0800680f 	.word	0x0800680f
 8006794:	0800680f 	.word	0x0800680f
 8006798:	0800680f 	.word	0x0800680f
 800679c:	0800680f 	.word	0x0800680f
 80067a0:	08006801 	.word	0x08006801
 80067a4:	2b40      	cmp	r3, #64	; 0x40
 80067a6:	d02e      	beq.n	8006806 <UART_SetConfig+0xa36>
 80067a8:	e031      	b.n	800680e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067aa:	f7fc fc25 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 80067ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80067b0:	e033      	b.n	800681a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067b2:	f7fc fc37 	bl	8003024 <HAL_RCC_GetPCLK2Freq>
 80067b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80067b8:	e02f      	b.n	800681a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fd fe66 	bl	8004490 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c8:	e027      	b.n	800681a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ca:	f107 0318 	add.w	r3, r7, #24
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fd ffb2 	bl	8004738 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d8:	e01f      	b.n	800681a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067da:	4b2d      	ldr	r3, [pc, #180]	; (8006890 <UART_SetConfig+0xac0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0320 	and.w	r3, r3, #32
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d009      	beq.n	80067fa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067e6:	4b2a      	ldr	r3, [pc, #168]	; (8006890 <UART_SetConfig+0xac0>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	08db      	lsrs	r3, r3, #3
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	4a28      	ldr	r2, [pc, #160]	; (8006894 <UART_SetConfig+0xac4>)
 80067f2:	fa22 f303 	lsr.w	r3, r2, r3
 80067f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067f8:	e00f      	b.n	800681a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80067fa:	4b26      	ldr	r3, [pc, #152]	; (8006894 <UART_SetConfig+0xac4>)
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067fe:	e00c      	b.n	800681a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006800:	4b25      	ldr	r3, [pc, #148]	; (8006898 <UART_SetConfig+0xac8>)
 8006802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006804:	e009      	b.n	800681a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800680a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800680c:	e005      	b.n	800681a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006818:	bf00      	nop
    }

    if (pclk != 0U)
 800681a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d021      	beq.n	8006864 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	4a1d      	ldr	r2, [pc, #116]	; (800689c <UART_SetConfig+0xacc>)
 8006826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800682a:	461a      	mov	r2, r3
 800682c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800682e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	441a      	add	r2, r3
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006842:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006846:	2b0f      	cmp	r3, #15
 8006848:	d909      	bls.n	800685e <UART_SetConfig+0xa8e>
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006850:	d205      	bcs.n	800685e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	b29a      	uxth	r2, r3
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	60da      	str	r2, [r3, #12]
 800685c:	e002      	b.n	8006864 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2201      	movs	r2, #1
 8006868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	2201      	movs	r2, #1
 8006870:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2200      	movs	r2, #0
 8006878:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2200      	movs	r2, #0
 800687e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006880:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006884:	4618      	mov	r0, r3
 8006886:	3748      	adds	r7, #72	; 0x48
 8006888:	46bd      	mov	sp, r7
 800688a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800688e:	bf00      	nop
 8006890:	58024400 	.word	0x58024400
 8006894:	03d09000 	.word	0x03d09000
 8006898:	003d0900 	.word	0x003d0900
 800689c:	0800804c 	.word	0x0800804c

080068a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	f003 0301 	and.w	r3, r3, #1
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00a      	beq.n	800690e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006956:	f003 0320 	and.w	r3, r3, #32
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	d01a      	beq.n	80069b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699e:	d10a      	bne.n	80069b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	605a      	str	r2, [r3, #4]
  }
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b098      	sub	sp, #96	; 0x60
 80069e8:	af02      	add	r7, sp, #8
 80069ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069f4:	f7fa ff76 	bl	80018e4 <HAL_GetTick>
 80069f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d12f      	bne.n	8006a68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a10:	2200      	movs	r2, #0
 8006a12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f88e 	bl	8006b38 <UART_WaitOnFlagUntilTimeout>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d022      	beq.n	8006a68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a36:	653b      	str	r3, [r7, #80]	; 0x50
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a40:	647b      	str	r3, [r7, #68]	; 0x44
 8006a42:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a48:	e841 2300 	strex	r3, r2, [r1]
 8006a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e6      	bne.n	8006a22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e063      	b.n	8006b30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0304 	and.w	r3, r3, #4
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d149      	bne.n	8006b0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f857 	bl	8006b38 <UART_WaitOnFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d03c      	beq.n	8006b0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aae:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e6      	bne.n	8006a90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae2:	61fa      	str	r2, [r7, #28]
 8006ae4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	69b9      	ldr	r1, [r7, #24]
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	617b      	str	r3, [r7, #20]
   return(result);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e5      	bne.n	8006ac2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e012      	b.n	8006b30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3758      	adds	r7, #88	; 0x58
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	603b      	str	r3, [r7, #0]
 8006b44:	4613      	mov	r3, r2
 8006b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b48:	e049      	b.n	8006bde <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b50:	d045      	beq.n	8006bde <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b52:	f7fa fec7 	bl	80018e4 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d302      	bcc.n	8006b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d101      	bne.n	8006b6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e048      	b.n	8006bfe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d031      	beq.n	8006bde <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69db      	ldr	r3, [r3, #28]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b08      	cmp	r3, #8
 8006b86:	d110      	bne.n	8006baa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2208      	movs	r2, #8
 8006b8e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 f839 	bl	8006c08 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2208      	movs	r2, #8
 8006b9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e029      	b.n	8006bfe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb8:	d111      	bne.n	8006bde <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f81f 	bl	8006c08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e00f      	b.n	8006bfe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4013      	ands	r3, r2
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	bf0c      	ite	eq
 8006bee:	2301      	moveq	r3, #1
 8006bf0:	2300      	movne	r3, #0
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d0a6      	beq.n	8006b4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b095      	sub	sp, #84	; 0x54
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2e:	643b      	str	r3, [r7, #64]	; 0x40
 8006c30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e6      	bne.n	8006c10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3308      	adds	r3, #8
 8006c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	4b1e      	ldr	r3, [pc, #120]	; (8006cd0 <UART_EndRxTransfer+0xc8>)
 8006c56:	4013      	ands	r3, r2
 8006c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3308      	adds	r3, #8
 8006c60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e5      	bne.n	8006c42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d118      	bne.n	8006cb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	f023 0310 	bic.w	r3, r3, #16
 8006c92:	647b      	str	r3, [r7, #68]	; 0x44
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c9c:	61bb      	str	r3, [r7, #24]
 8006c9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6979      	ldr	r1, [r7, #20]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e6      	bne.n	8006c7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006cc4:	bf00      	nop
 8006cc6:	3754      	adds	r7, #84	; 0x54
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	effffffe 	.word	0xeffffffe

08006cd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <HAL_UARTEx_DisableFifoMode+0x16>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e027      	b.n	8006d3a <HAL_UARTEx_DisableFifoMode+0x66>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2224      	movs	r2, #36	; 0x24
 8006cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f022 0201 	bic.w	r2, r2, #1
 8006d10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d101      	bne.n	8006d5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e02d      	b.n	8006dba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2224      	movs	r2, #36	; 0x24
 8006d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f850 	bl	8006e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d101      	bne.n	8006dda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	e02d      	b.n	8006e36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2224      	movs	r2, #36	; 0x24
 8006de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0201 	bic.w	r2, r2, #1
 8006e00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	683a      	ldr	r2, [r7, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f812 	bl	8006e40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2220      	movs	r2, #32
 8006e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d108      	bne.n	8006e62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e60:	e031      	b.n	8006ec6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e62:	2310      	movs	r3, #16
 8006e64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e66:	2310      	movs	r3, #16
 8006e68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	0e5b      	lsrs	r3, r3, #25
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	0f5b      	lsrs	r3, r3, #29
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e8a:	7bbb      	ldrb	r3, [r7, #14]
 8006e8c:	7b3a      	ldrb	r2, [r7, #12]
 8006e8e:	4911      	ldr	r1, [pc, #68]	; (8006ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8006e90:	5c8a      	ldrb	r2, [r1, r2]
 8006e92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e96:	7b3a      	ldrb	r2, [r7, #12]
 8006e98:	490f      	ldr	r1, [pc, #60]	; (8006ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8006e9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
 8006eaa:	7b7a      	ldrb	r2, [r7, #13]
 8006eac:	4909      	ldr	r1, [pc, #36]	; (8006ed4 <UARTEx_SetNbDataToProcess+0x94>)
 8006eae:	5c8a      	ldrb	r2, [r1, r2]
 8006eb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006eb4:	7b7a      	ldrb	r2, [r7, #13]
 8006eb6:	4908      	ldr	r1, [pc, #32]	; (8006ed8 <UARTEx_SetNbDataToProcess+0x98>)
 8006eb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006eba:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ec6:	bf00      	nop
 8006ec8:	3714      	adds	r7, #20
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	08008064 	.word	0x08008064
 8006ed8:	0800806c 	.word	0x0800806c

08006edc <std>:
 8006edc:	2300      	movs	r3, #0
 8006ede:	b510      	push	{r4, lr}
 8006ee0:	4604      	mov	r4, r0
 8006ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eea:	6083      	str	r3, [r0, #8]
 8006eec:	8181      	strh	r1, [r0, #12]
 8006eee:	6643      	str	r3, [r0, #100]	; 0x64
 8006ef0:	81c2      	strh	r2, [r0, #14]
 8006ef2:	6183      	str	r3, [r0, #24]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	2208      	movs	r2, #8
 8006ef8:	305c      	adds	r0, #92	; 0x5c
 8006efa:	f000 f9ff 	bl	80072fc <memset>
 8006efe:	4b0d      	ldr	r3, [pc, #52]	; (8006f34 <std+0x58>)
 8006f00:	6263      	str	r3, [r4, #36]	; 0x24
 8006f02:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <std+0x5c>)
 8006f04:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f06:	4b0d      	ldr	r3, [pc, #52]	; (8006f3c <std+0x60>)
 8006f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f0a:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <std+0x64>)
 8006f0c:	6323      	str	r3, [r4, #48]	; 0x30
 8006f0e:	4b0d      	ldr	r3, [pc, #52]	; (8006f44 <std+0x68>)
 8006f10:	6224      	str	r4, [r4, #32]
 8006f12:	429c      	cmp	r4, r3
 8006f14:	d006      	beq.n	8006f24 <std+0x48>
 8006f16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006f1a:	4294      	cmp	r4, r2
 8006f1c:	d002      	beq.n	8006f24 <std+0x48>
 8006f1e:	33d0      	adds	r3, #208	; 0xd0
 8006f20:	429c      	cmp	r4, r3
 8006f22:	d105      	bne.n	8006f30 <std+0x54>
 8006f24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f2c:	f000 ba5e 	b.w	80073ec <__retarget_lock_init_recursive>
 8006f30:	bd10      	pop	{r4, pc}
 8006f32:	bf00      	nop
 8006f34:	0800714d 	.word	0x0800714d
 8006f38:	0800716f 	.word	0x0800716f
 8006f3c:	080071a7 	.word	0x080071a7
 8006f40:	080071cb 	.word	0x080071cb
 8006f44:	240001c0 	.word	0x240001c0

08006f48 <stdio_exit_handler>:
 8006f48:	4a02      	ldr	r2, [pc, #8]	; (8006f54 <stdio_exit_handler+0xc>)
 8006f4a:	4903      	ldr	r1, [pc, #12]	; (8006f58 <stdio_exit_handler+0x10>)
 8006f4c:	4803      	ldr	r0, [pc, #12]	; (8006f5c <stdio_exit_handler+0x14>)
 8006f4e:	f000 b869 	b.w	8007024 <_fwalk_sglue>
 8006f52:	bf00      	nop
 8006f54:	24000010 	.word	0x24000010
 8006f58:	08007c99 	.word	0x08007c99
 8006f5c:	2400001c 	.word	0x2400001c

08006f60 <cleanup_stdio>:
 8006f60:	6841      	ldr	r1, [r0, #4]
 8006f62:	4b0c      	ldr	r3, [pc, #48]	; (8006f94 <cleanup_stdio+0x34>)
 8006f64:	4299      	cmp	r1, r3
 8006f66:	b510      	push	{r4, lr}
 8006f68:	4604      	mov	r4, r0
 8006f6a:	d001      	beq.n	8006f70 <cleanup_stdio+0x10>
 8006f6c:	f000 fe94 	bl	8007c98 <_fflush_r>
 8006f70:	68a1      	ldr	r1, [r4, #8]
 8006f72:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <cleanup_stdio+0x38>)
 8006f74:	4299      	cmp	r1, r3
 8006f76:	d002      	beq.n	8006f7e <cleanup_stdio+0x1e>
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fe8d 	bl	8007c98 <_fflush_r>
 8006f7e:	68e1      	ldr	r1, [r4, #12]
 8006f80:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <cleanup_stdio+0x3c>)
 8006f82:	4299      	cmp	r1, r3
 8006f84:	d004      	beq.n	8006f90 <cleanup_stdio+0x30>
 8006f86:	4620      	mov	r0, r4
 8006f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f8c:	f000 be84 	b.w	8007c98 <_fflush_r>
 8006f90:	bd10      	pop	{r4, pc}
 8006f92:	bf00      	nop
 8006f94:	240001c0 	.word	0x240001c0
 8006f98:	24000228 	.word	0x24000228
 8006f9c:	24000290 	.word	0x24000290

08006fa0 <global_stdio_init.part.0>:
 8006fa0:	b510      	push	{r4, lr}
 8006fa2:	4b0b      	ldr	r3, [pc, #44]	; (8006fd0 <global_stdio_init.part.0+0x30>)
 8006fa4:	4c0b      	ldr	r4, [pc, #44]	; (8006fd4 <global_stdio_init.part.0+0x34>)
 8006fa6:	4a0c      	ldr	r2, [pc, #48]	; (8006fd8 <global_stdio_init.part.0+0x38>)
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	4620      	mov	r0, r4
 8006fac:	2200      	movs	r2, #0
 8006fae:	2104      	movs	r1, #4
 8006fb0:	f7ff ff94 	bl	8006edc <std>
 8006fb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006fb8:	2201      	movs	r2, #1
 8006fba:	2109      	movs	r1, #9
 8006fbc:	f7ff ff8e 	bl	8006edc <std>
 8006fc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fca:	2112      	movs	r1, #18
 8006fcc:	f7ff bf86 	b.w	8006edc <std>
 8006fd0:	240002f8 	.word	0x240002f8
 8006fd4:	240001c0 	.word	0x240001c0
 8006fd8:	08006f49 	.word	0x08006f49

08006fdc <__sfp_lock_acquire>:
 8006fdc:	4801      	ldr	r0, [pc, #4]	; (8006fe4 <__sfp_lock_acquire+0x8>)
 8006fde:	f000 ba06 	b.w	80073ee <__retarget_lock_acquire_recursive>
 8006fe2:	bf00      	nop
 8006fe4:	24000301 	.word	0x24000301

08006fe8 <__sfp_lock_release>:
 8006fe8:	4801      	ldr	r0, [pc, #4]	; (8006ff0 <__sfp_lock_release+0x8>)
 8006fea:	f000 ba01 	b.w	80073f0 <__retarget_lock_release_recursive>
 8006fee:	bf00      	nop
 8006ff0:	24000301 	.word	0x24000301

08006ff4 <__sinit>:
 8006ff4:	b510      	push	{r4, lr}
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	f7ff fff0 	bl	8006fdc <__sfp_lock_acquire>
 8006ffc:	6a23      	ldr	r3, [r4, #32]
 8006ffe:	b11b      	cbz	r3, 8007008 <__sinit+0x14>
 8007000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007004:	f7ff bff0 	b.w	8006fe8 <__sfp_lock_release>
 8007008:	4b04      	ldr	r3, [pc, #16]	; (800701c <__sinit+0x28>)
 800700a:	6223      	str	r3, [r4, #32]
 800700c:	4b04      	ldr	r3, [pc, #16]	; (8007020 <__sinit+0x2c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1f5      	bne.n	8007000 <__sinit+0xc>
 8007014:	f7ff ffc4 	bl	8006fa0 <global_stdio_init.part.0>
 8007018:	e7f2      	b.n	8007000 <__sinit+0xc>
 800701a:	bf00      	nop
 800701c:	08006f61 	.word	0x08006f61
 8007020:	240002f8 	.word	0x240002f8

08007024 <_fwalk_sglue>:
 8007024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007028:	4607      	mov	r7, r0
 800702a:	4688      	mov	r8, r1
 800702c:	4614      	mov	r4, r2
 800702e:	2600      	movs	r6, #0
 8007030:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007034:	f1b9 0901 	subs.w	r9, r9, #1
 8007038:	d505      	bpl.n	8007046 <_fwalk_sglue+0x22>
 800703a:	6824      	ldr	r4, [r4, #0]
 800703c:	2c00      	cmp	r4, #0
 800703e:	d1f7      	bne.n	8007030 <_fwalk_sglue+0xc>
 8007040:	4630      	mov	r0, r6
 8007042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007046:	89ab      	ldrh	r3, [r5, #12]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d907      	bls.n	800705c <_fwalk_sglue+0x38>
 800704c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007050:	3301      	adds	r3, #1
 8007052:	d003      	beq.n	800705c <_fwalk_sglue+0x38>
 8007054:	4629      	mov	r1, r5
 8007056:	4638      	mov	r0, r7
 8007058:	47c0      	blx	r8
 800705a:	4306      	orrs	r6, r0
 800705c:	3568      	adds	r5, #104	; 0x68
 800705e:	e7e9      	b.n	8007034 <_fwalk_sglue+0x10>

08007060 <iprintf>:
 8007060:	b40f      	push	{r0, r1, r2, r3}
 8007062:	b507      	push	{r0, r1, r2, lr}
 8007064:	4906      	ldr	r1, [pc, #24]	; (8007080 <iprintf+0x20>)
 8007066:	ab04      	add	r3, sp, #16
 8007068:	6808      	ldr	r0, [r1, #0]
 800706a:	f853 2b04 	ldr.w	r2, [r3], #4
 800706e:	6881      	ldr	r1, [r0, #8]
 8007070:	9301      	str	r3, [sp, #4]
 8007072:	f000 fae1 	bl	8007638 <_vfiprintf_r>
 8007076:	b003      	add	sp, #12
 8007078:	f85d eb04 	ldr.w	lr, [sp], #4
 800707c:	b004      	add	sp, #16
 800707e:	4770      	bx	lr
 8007080:	24000068 	.word	0x24000068

08007084 <putchar>:
 8007084:	4b02      	ldr	r3, [pc, #8]	; (8007090 <putchar+0xc>)
 8007086:	4601      	mov	r1, r0
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	6882      	ldr	r2, [r0, #8]
 800708c:	f000 be8e 	b.w	8007dac <_putc_r>
 8007090:	24000068 	.word	0x24000068

08007094 <_puts_r>:
 8007094:	6a03      	ldr	r3, [r0, #32]
 8007096:	b570      	push	{r4, r5, r6, lr}
 8007098:	6884      	ldr	r4, [r0, #8]
 800709a:	4605      	mov	r5, r0
 800709c:	460e      	mov	r6, r1
 800709e:	b90b      	cbnz	r3, 80070a4 <_puts_r+0x10>
 80070a0:	f7ff ffa8 	bl	8006ff4 <__sinit>
 80070a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070a6:	07db      	lsls	r3, r3, #31
 80070a8:	d405      	bmi.n	80070b6 <_puts_r+0x22>
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	0598      	lsls	r0, r3, #22
 80070ae:	d402      	bmi.n	80070b6 <_puts_r+0x22>
 80070b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070b2:	f000 f99c 	bl	80073ee <__retarget_lock_acquire_recursive>
 80070b6:	89a3      	ldrh	r3, [r4, #12]
 80070b8:	0719      	lsls	r1, r3, #28
 80070ba:	d513      	bpl.n	80070e4 <_puts_r+0x50>
 80070bc:	6923      	ldr	r3, [r4, #16]
 80070be:	b18b      	cbz	r3, 80070e4 <_puts_r+0x50>
 80070c0:	3e01      	subs	r6, #1
 80070c2:	68a3      	ldr	r3, [r4, #8]
 80070c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80070c8:	3b01      	subs	r3, #1
 80070ca:	60a3      	str	r3, [r4, #8]
 80070cc:	b9e9      	cbnz	r1, 800710a <_puts_r+0x76>
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	da2e      	bge.n	8007130 <_puts_r+0x9c>
 80070d2:	4622      	mov	r2, r4
 80070d4:	210a      	movs	r1, #10
 80070d6:	4628      	mov	r0, r5
 80070d8:	f000 f87b 	bl	80071d2 <__swbuf_r>
 80070dc:	3001      	adds	r0, #1
 80070de:	d007      	beq.n	80070f0 <_puts_r+0x5c>
 80070e0:	250a      	movs	r5, #10
 80070e2:	e007      	b.n	80070f4 <_puts_r+0x60>
 80070e4:	4621      	mov	r1, r4
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 f8b0 	bl	800724c <__swsetup_r>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d0e7      	beq.n	80070c0 <_puts_r+0x2c>
 80070f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80070f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070f6:	07da      	lsls	r2, r3, #31
 80070f8:	d405      	bmi.n	8007106 <_puts_r+0x72>
 80070fa:	89a3      	ldrh	r3, [r4, #12]
 80070fc:	059b      	lsls	r3, r3, #22
 80070fe:	d402      	bmi.n	8007106 <_puts_r+0x72>
 8007100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007102:	f000 f975 	bl	80073f0 <__retarget_lock_release_recursive>
 8007106:	4628      	mov	r0, r5
 8007108:	bd70      	pop	{r4, r5, r6, pc}
 800710a:	2b00      	cmp	r3, #0
 800710c:	da04      	bge.n	8007118 <_puts_r+0x84>
 800710e:	69a2      	ldr	r2, [r4, #24]
 8007110:	429a      	cmp	r2, r3
 8007112:	dc06      	bgt.n	8007122 <_puts_r+0x8e>
 8007114:	290a      	cmp	r1, #10
 8007116:	d004      	beq.n	8007122 <_puts_r+0x8e>
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	6022      	str	r2, [r4, #0]
 800711e:	7019      	strb	r1, [r3, #0]
 8007120:	e7cf      	b.n	80070c2 <_puts_r+0x2e>
 8007122:	4622      	mov	r2, r4
 8007124:	4628      	mov	r0, r5
 8007126:	f000 f854 	bl	80071d2 <__swbuf_r>
 800712a:	3001      	adds	r0, #1
 800712c:	d1c9      	bne.n	80070c2 <_puts_r+0x2e>
 800712e:	e7df      	b.n	80070f0 <_puts_r+0x5c>
 8007130:	6823      	ldr	r3, [r4, #0]
 8007132:	250a      	movs	r5, #10
 8007134:	1c5a      	adds	r2, r3, #1
 8007136:	6022      	str	r2, [r4, #0]
 8007138:	701d      	strb	r5, [r3, #0]
 800713a:	e7db      	b.n	80070f4 <_puts_r+0x60>

0800713c <puts>:
 800713c:	4b02      	ldr	r3, [pc, #8]	; (8007148 <puts+0xc>)
 800713e:	4601      	mov	r1, r0
 8007140:	6818      	ldr	r0, [r3, #0]
 8007142:	f7ff bfa7 	b.w	8007094 <_puts_r>
 8007146:	bf00      	nop
 8007148:	24000068 	.word	0x24000068

0800714c <__sread>:
 800714c:	b510      	push	{r4, lr}
 800714e:	460c      	mov	r4, r1
 8007150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007154:	f000 f8fc 	bl	8007350 <_read_r>
 8007158:	2800      	cmp	r0, #0
 800715a:	bfab      	itete	ge
 800715c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800715e:	89a3      	ldrhlt	r3, [r4, #12]
 8007160:	181b      	addge	r3, r3, r0
 8007162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007166:	bfac      	ite	ge
 8007168:	6563      	strge	r3, [r4, #84]	; 0x54
 800716a:	81a3      	strhlt	r3, [r4, #12]
 800716c:	bd10      	pop	{r4, pc}

0800716e <__swrite>:
 800716e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007172:	461f      	mov	r7, r3
 8007174:	898b      	ldrh	r3, [r1, #12]
 8007176:	05db      	lsls	r3, r3, #23
 8007178:	4605      	mov	r5, r0
 800717a:	460c      	mov	r4, r1
 800717c:	4616      	mov	r6, r2
 800717e:	d505      	bpl.n	800718c <__swrite+0x1e>
 8007180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007184:	2302      	movs	r3, #2
 8007186:	2200      	movs	r2, #0
 8007188:	f000 f8d0 	bl	800732c <_lseek_r>
 800718c:	89a3      	ldrh	r3, [r4, #12]
 800718e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007196:	81a3      	strh	r3, [r4, #12]
 8007198:	4632      	mov	r2, r6
 800719a:	463b      	mov	r3, r7
 800719c:	4628      	mov	r0, r5
 800719e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071a2:	f000 b8e7 	b.w	8007374 <_write_r>

080071a6 <__sseek>:
 80071a6:	b510      	push	{r4, lr}
 80071a8:	460c      	mov	r4, r1
 80071aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ae:	f000 f8bd 	bl	800732c <_lseek_r>
 80071b2:	1c43      	adds	r3, r0, #1
 80071b4:	89a3      	ldrh	r3, [r4, #12]
 80071b6:	bf15      	itete	ne
 80071b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80071ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071c2:	81a3      	strheq	r3, [r4, #12]
 80071c4:	bf18      	it	ne
 80071c6:	81a3      	strhne	r3, [r4, #12]
 80071c8:	bd10      	pop	{r4, pc}

080071ca <__sclose>:
 80071ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ce:	f000 b89d 	b.w	800730c <_close_r>

080071d2 <__swbuf_r>:
 80071d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d4:	460e      	mov	r6, r1
 80071d6:	4614      	mov	r4, r2
 80071d8:	4605      	mov	r5, r0
 80071da:	b118      	cbz	r0, 80071e4 <__swbuf_r+0x12>
 80071dc:	6a03      	ldr	r3, [r0, #32]
 80071de:	b90b      	cbnz	r3, 80071e4 <__swbuf_r+0x12>
 80071e0:	f7ff ff08 	bl	8006ff4 <__sinit>
 80071e4:	69a3      	ldr	r3, [r4, #24]
 80071e6:	60a3      	str	r3, [r4, #8]
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	071a      	lsls	r2, r3, #28
 80071ec:	d525      	bpl.n	800723a <__swbuf_r+0x68>
 80071ee:	6923      	ldr	r3, [r4, #16]
 80071f0:	b31b      	cbz	r3, 800723a <__swbuf_r+0x68>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	6922      	ldr	r2, [r4, #16]
 80071f6:	1a98      	subs	r0, r3, r2
 80071f8:	6963      	ldr	r3, [r4, #20]
 80071fa:	b2f6      	uxtb	r6, r6
 80071fc:	4283      	cmp	r3, r0
 80071fe:	4637      	mov	r7, r6
 8007200:	dc04      	bgt.n	800720c <__swbuf_r+0x3a>
 8007202:	4621      	mov	r1, r4
 8007204:	4628      	mov	r0, r5
 8007206:	f000 fd47 	bl	8007c98 <_fflush_r>
 800720a:	b9e0      	cbnz	r0, 8007246 <__swbuf_r+0x74>
 800720c:	68a3      	ldr	r3, [r4, #8]
 800720e:	3b01      	subs	r3, #1
 8007210:	60a3      	str	r3, [r4, #8]
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	1c5a      	adds	r2, r3, #1
 8007216:	6022      	str	r2, [r4, #0]
 8007218:	701e      	strb	r6, [r3, #0]
 800721a:	6962      	ldr	r2, [r4, #20]
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	429a      	cmp	r2, r3
 8007220:	d004      	beq.n	800722c <__swbuf_r+0x5a>
 8007222:	89a3      	ldrh	r3, [r4, #12]
 8007224:	07db      	lsls	r3, r3, #31
 8007226:	d506      	bpl.n	8007236 <__swbuf_r+0x64>
 8007228:	2e0a      	cmp	r6, #10
 800722a:	d104      	bne.n	8007236 <__swbuf_r+0x64>
 800722c:	4621      	mov	r1, r4
 800722e:	4628      	mov	r0, r5
 8007230:	f000 fd32 	bl	8007c98 <_fflush_r>
 8007234:	b938      	cbnz	r0, 8007246 <__swbuf_r+0x74>
 8007236:	4638      	mov	r0, r7
 8007238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800723a:	4621      	mov	r1, r4
 800723c:	4628      	mov	r0, r5
 800723e:	f000 f805 	bl	800724c <__swsetup_r>
 8007242:	2800      	cmp	r0, #0
 8007244:	d0d5      	beq.n	80071f2 <__swbuf_r+0x20>
 8007246:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800724a:	e7f4      	b.n	8007236 <__swbuf_r+0x64>

0800724c <__swsetup_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4b2a      	ldr	r3, [pc, #168]	; (80072f8 <__swsetup_r+0xac>)
 8007250:	4605      	mov	r5, r0
 8007252:	6818      	ldr	r0, [r3, #0]
 8007254:	460c      	mov	r4, r1
 8007256:	b118      	cbz	r0, 8007260 <__swsetup_r+0x14>
 8007258:	6a03      	ldr	r3, [r0, #32]
 800725a:	b90b      	cbnz	r3, 8007260 <__swsetup_r+0x14>
 800725c:	f7ff feca 	bl	8006ff4 <__sinit>
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007266:	0718      	lsls	r0, r3, #28
 8007268:	d422      	bmi.n	80072b0 <__swsetup_r+0x64>
 800726a:	06d9      	lsls	r1, r3, #27
 800726c:	d407      	bmi.n	800727e <__swsetup_r+0x32>
 800726e:	2309      	movs	r3, #9
 8007270:	602b      	str	r3, [r5, #0]
 8007272:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007276:	81a3      	strh	r3, [r4, #12]
 8007278:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800727c:	e034      	b.n	80072e8 <__swsetup_r+0x9c>
 800727e:	0758      	lsls	r0, r3, #29
 8007280:	d512      	bpl.n	80072a8 <__swsetup_r+0x5c>
 8007282:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007284:	b141      	cbz	r1, 8007298 <__swsetup_r+0x4c>
 8007286:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800728a:	4299      	cmp	r1, r3
 800728c:	d002      	beq.n	8007294 <__swsetup_r+0x48>
 800728e:	4628      	mov	r0, r5
 8007290:	f000 f8b0 	bl	80073f4 <_free_r>
 8007294:	2300      	movs	r3, #0
 8007296:	6363      	str	r3, [r4, #52]	; 0x34
 8007298:	89a3      	ldrh	r3, [r4, #12]
 800729a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800729e:	81a3      	strh	r3, [r4, #12]
 80072a0:	2300      	movs	r3, #0
 80072a2:	6063      	str	r3, [r4, #4]
 80072a4:	6923      	ldr	r3, [r4, #16]
 80072a6:	6023      	str	r3, [r4, #0]
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	f043 0308 	orr.w	r3, r3, #8
 80072ae:	81a3      	strh	r3, [r4, #12]
 80072b0:	6923      	ldr	r3, [r4, #16]
 80072b2:	b94b      	cbnz	r3, 80072c8 <__swsetup_r+0x7c>
 80072b4:	89a3      	ldrh	r3, [r4, #12]
 80072b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072be:	d003      	beq.n	80072c8 <__swsetup_r+0x7c>
 80072c0:	4621      	mov	r1, r4
 80072c2:	4628      	mov	r0, r5
 80072c4:	f000 fd36 	bl	8007d34 <__smakebuf_r>
 80072c8:	89a0      	ldrh	r0, [r4, #12]
 80072ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072ce:	f010 0301 	ands.w	r3, r0, #1
 80072d2:	d00a      	beq.n	80072ea <__swsetup_r+0x9e>
 80072d4:	2300      	movs	r3, #0
 80072d6:	60a3      	str	r3, [r4, #8]
 80072d8:	6963      	ldr	r3, [r4, #20]
 80072da:	425b      	negs	r3, r3
 80072dc:	61a3      	str	r3, [r4, #24]
 80072de:	6923      	ldr	r3, [r4, #16]
 80072e0:	b943      	cbnz	r3, 80072f4 <__swsetup_r+0xa8>
 80072e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072e6:	d1c4      	bne.n	8007272 <__swsetup_r+0x26>
 80072e8:	bd38      	pop	{r3, r4, r5, pc}
 80072ea:	0781      	lsls	r1, r0, #30
 80072ec:	bf58      	it	pl
 80072ee:	6963      	ldrpl	r3, [r4, #20]
 80072f0:	60a3      	str	r3, [r4, #8]
 80072f2:	e7f4      	b.n	80072de <__swsetup_r+0x92>
 80072f4:	2000      	movs	r0, #0
 80072f6:	e7f7      	b.n	80072e8 <__swsetup_r+0x9c>
 80072f8:	24000068 	.word	0x24000068

080072fc <memset>:
 80072fc:	4402      	add	r2, r0
 80072fe:	4603      	mov	r3, r0
 8007300:	4293      	cmp	r3, r2
 8007302:	d100      	bne.n	8007306 <memset+0xa>
 8007304:	4770      	bx	lr
 8007306:	f803 1b01 	strb.w	r1, [r3], #1
 800730a:	e7f9      	b.n	8007300 <memset+0x4>

0800730c <_close_r>:
 800730c:	b538      	push	{r3, r4, r5, lr}
 800730e:	4d06      	ldr	r5, [pc, #24]	; (8007328 <_close_r+0x1c>)
 8007310:	2300      	movs	r3, #0
 8007312:	4604      	mov	r4, r0
 8007314:	4608      	mov	r0, r1
 8007316:	602b      	str	r3, [r5, #0]
 8007318:	f7fa f9c9 	bl	80016ae <_close>
 800731c:	1c43      	adds	r3, r0, #1
 800731e:	d102      	bne.n	8007326 <_close_r+0x1a>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	b103      	cbz	r3, 8007326 <_close_r+0x1a>
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	bd38      	pop	{r3, r4, r5, pc}
 8007328:	240002fc 	.word	0x240002fc

0800732c <_lseek_r>:
 800732c:	b538      	push	{r3, r4, r5, lr}
 800732e:	4d07      	ldr	r5, [pc, #28]	; (800734c <_lseek_r+0x20>)
 8007330:	4604      	mov	r4, r0
 8007332:	4608      	mov	r0, r1
 8007334:	4611      	mov	r1, r2
 8007336:	2200      	movs	r2, #0
 8007338:	602a      	str	r2, [r5, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	f7fa f9de 	bl	80016fc <_lseek>
 8007340:	1c43      	adds	r3, r0, #1
 8007342:	d102      	bne.n	800734a <_lseek_r+0x1e>
 8007344:	682b      	ldr	r3, [r5, #0]
 8007346:	b103      	cbz	r3, 800734a <_lseek_r+0x1e>
 8007348:	6023      	str	r3, [r4, #0]
 800734a:	bd38      	pop	{r3, r4, r5, pc}
 800734c:	240002fc 	.word	0x240002fc

08007350 <_read_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4d07      	ldr	r5, [pc, #28]	; (8007370 <_read_r+0x20>)
 8007354:	4604      	mov	r4, r0
 8007356:	4608      	mov	r0, r1
 8007358:	4611      	mov	r1, r2
 800735a:	2200      	movs	r2, #0
 800735c:	602a      	str	r2, [r5, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	f7fa f96c 	bl	800163c <_read>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_read_r+0x1e>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_read_r+0x1e>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	240002fc 	.word	0x240002fc

08007374 <_write_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4d07      	ldr	r5, [pc, #28]	; (8007394 <_write_r+0x20>)
 8007378:	4604      	mov	r4, r0
 800737a:	4608      	mov	r0, r1
 800737c:	4611      	mov	r1, r2
 800737e:	2200      	movs	r2, #0
 8007380:	602a      	str	r2, [r5, #0]
 8007382:	461a      	mov	r2, r3
 8007384:	f7fa f977 	bl	8001676 <_write>
 8007388:	1c43      	adds	r3, r0, #1
 800738a:	d102      	bne.n	8007392 <_write_r+0x1e>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	b103      	cbz	r3, 8007392 <_write_r+0x1e>
 8007390:	6023      	str	r3, [r4, #0]
 8007392:	bd38      	pop	{r3, r4, r5, pc}
 8007394:	240002fc 	.word	0x240002fc

08007398 <__errno>:
 8007398:	4b01      	ldr	r3, [pc, #4]	; (80073a0 <__errno+0x8>)
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	24000068 	.word	0x24000068

080073a4 <__libc_init_array>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	4d0d      	ldr	r5, [pc, #52]	; (80073dc <__libc_init_array+0x38>)
 80073a8:	4c0d      	ldr	r4, [pc, #52]	; (80073e0 <__libc_init_array+0x3c>)
 80073aa:	1b64      	subs	r4, r4, r5
 80073ac:	10a4      	asrs	r4, r4, #2
 80073ae:	2600      	movs	r6, #0
 80073b0:	42a6      	cmp	r6, r4
 80073b2:	d109      	bne.n	80073c8 <__libc_init_array+0x24>
 80073b4:	4d0b      	ldr	r5, [pc, #44]	; (80073e4 <__libc_init_array+0x40>)
 80073b6:	4c0c      	ldr	r4, [pc, #48]	; (80073e8 <__libc_init_array+0x44>)
 80073b8:	f000 fd5e 	bl	8007e78 <_init>
 80073bc:	1b64      	subs	r4, r4, r5
 80073be:	10a4      	asrs	r4, r4, #2
 80073c0:	2600      	movs	r6, #0
 80073c2:	42a6      	cmp	r6, r4
 80073c4:	d105      	bne.n	80073d2 <__libc_init_array+0x2e>
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80073cc:	4798      	blx	r3
 80073ce:	3601      	adds	r6, #1
 80073d0:	e7ee      	b.n	80073b0 <__libc_init_array+0xc>
 80073d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d6:	4798      	blx	r3
 80073d8:	3601      	adds	r6, #1
 80073da:	e7f2      	b.n	80073c2 <__libc_init_array+0x1e>
 80073dc:	080080b0 	.word	0x080080b0
 80073e0:	080080b0 	.word	0x080080b0
 80073e4:	080080b0 	.word	0x080080b0
 80073e8:	080080b4 	.word	0x080080b4

080073ec <__retarget_lock_init_recursive>:
 80073ec:	4770      	bx	lr

080073ee <__retarget_lock_acquire_recursive>:
 80073ee:	4770      	bx	lr

080073f0 <__retarget_lock_release_recursive>:
 80073f0:	4770      	bx	lr
	...

080073f4 <_free_r>:
 80073f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073f6:	2900      	cmp	r1, #0
 80073f8:	d044      	beq.n	8007484 <_free_r+0x90>
 80073fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073fe:	9001      	str	r0, [sp, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	f1a1 0404 	sub.w	r4, r1, #4
 8007406:	bfb8      	it	lt
 8007408:	18e4      	addlt	r4, r4, r3
 800740a:	f000 f8df 	bl	80075cc <__malloc_lock>
 800740e:	4a1e      	ldr	r2, [pc, #120]	; (8007488 <_free_r+0x94>)
 8007410:	9801      	ldr	r0, [sp, #4]
 8007412:	6813      	ldr	r3, [r2, #0]
 8007414:	b933      	cbnz	r3, 8007424 <_free_r+0x30>
 8007416:	6063      	str	r3, [r4, #4]
 8007418:	6014      	str	r4, [r2, #0]
 800741a:	b003      	add	sp, #12
 800741c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007420:	f000 b8da 	b.w	80075d8 <__malloc_unlock>
 8007424:	42a3      	cmp	r3, r4
 8007426:	d908      	bls.n	800743a <_free_r+0x46>
 8007428:	6825      	ldr	r5, [r4, #0]
 800742a:	1961      	adds	r1, r4, r5
 800742c:	428b      	cmp	r3, r1
 800742e:	bf01      	itttt	eq
 8007430:	6819      	ldreq	r1, [r3, #0]
 8007432:	685b      	ldreq	r3, [r3, #4]
 8007434:	1949      	addeq	r1, r1, r5
 8007436:	6021      	streq	r1, [r4, #0]
 8007438:	e7ed      	b.n	8007416 <_free_r+0x22>
 800743a:	461a      	mov	r2, r3
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	b10b      	cbz	r3, 8007444 <_free_r+0x50>
 8007440:	42a3      	cmp	r3, r4
 8007442:	d9fa      	bls.n	800743a <_free_r+0x46>
 8007444:	6811      	ldr	r1, [r2, #0]
 8007446:	1855      	adds	r5, r2, r1
 8007448:	42a5      	cmp	r5, r4
 800744a:	d10b      	bne.n	8007464 <_free_r+0x70>
 800744c:	6824      	ldr	r4, [r4, #0]
 800744e:	4421      	add	r1, r4
 8007450:	1854      	adds	r4, r2, r1
 8007452:	42a3      	cmp	r3, r4
 8007454:	6011      	str	r1, [r2, #0]
 8007456:	d1e0      	bne.n	800741a <_free_r+0x26>
 8007458:	681c      	ldr	r4, [r3, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	6053      	str	r3, [r2, #4]
 800745e:	440c      	add	r4, r1
 8007460:	6014      	str	r4, [r2, #0]
 8007462:	e7da      	b.n	800741a <_free_r+0x26>
 8007464:	d902      	bls.n	800746c <_free_r+0x78>
 8007466:	230c      	movs	r3, #12
 8007468:	6003      	str	r3, [r0, #0]
 800746a:	e7d6      	b.n	800741a <_free_r+0x26>
 800746c:	6825      	ldr	r5, [r4, #0]
 800746e:	1961      	adds	r1, r4, r5
 8007470:	428b      	cmp	r3, r1
 8007472:	bf04      	itt	eq
 8007474:	6819      	ldreq	r1, [r3, #0]
 8007476:	685b      	ldreq	r3, [r3, #4]
 8007478:	6063      	str	r3, [r4, #4]
 800747a:	bf04      	itt	eq
 800747c:	1949      	addeq	r1, r1, r5
 800747e:	6021      	streq	r1, [r4, #0]
 8007480:	6054      	str	r4, [r2, #4]
 8007482:	e7ca      	b.n	800741a <_free_r+0x26>
 8007484:	b003      	add	sp, #12
 8007486:	bd30      	pop	{r4, r5, pc}
 8007488:	24000304 	.word	0x24000304

0800748c <sbrk_aligned>:
 800748c:	b570      	push	{r4, r5, r6, lr}
 800748e:	4e0e      	ldr	r6, [pc, #56]	; (80074c8 <sbrk_aligned+0x3c>)
 8007490:	460c      	mov	r4, r1
 8007492:	6831      	ldr	r1, [r6, #0]
 8007494:	4605      	mov	r5, r0
 8007496:	b911      	cbnz	r1, 800749e <sbrk_aligned+0x12>
 8007498:	f000 fcde 	bl	8007e58 <_sbrk_r>
 800749c:	6030      	str	r0, [r6, #0]
 800749e:	4621      	mov	r1, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 fcd9 	bl	8007e58 <_sbrk_r>
 80074a6:	1c43      	adds	r3, r0, #1
 80074a8:	d00a      	beq.n	80074c0 <sbrk_aligned+0x34>
 80074aa:	1cc4      	adds	r4, r0, #3
 80074ac:	f024 0403 	bic.w	r4, r4, #3
 80074b0:	42a0      	cmp	r0, r4
 80074b2:	d007      	beq.n	80074c4 <sbrk_aligned+0x38>
 80074b4:	1a21      	subs	r1, r4, r0
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 fcce 	bl	8007e58 <_sbrk_r>
 80074bc:	3001      	adds	r0, #1
 80074be:	d101      	bne.n	80074c4 <sbrk_aligned+0x38>
 80074c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80074c4:	4620      	mov	r0, r4
 80074c6:	bd70      	pop	{r4, r5, r6, pc}
 80074c8:	24000308 	.word	0x24000308

080074cc <_malloc_r>:
 80074cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074d0:	1ccd      	adds	r5, r1, #3
 80074d2:	f025 0503 	bic.w	r5, r5, #3
 80074d6:	3508      	adds	r5, #8
 80074d8:	2d0c      	cmp	r5, #12
 80074da:	bf38      	it	cc
 80074dc:	250c      	movcc	r5, #12
 80074de:	2d00      	cmp	r5, #0
 80074e0:	4607      	mov	r7, r0
 80074e2:	db01      	blt.n	80074e8 <_malloc_r+0x1c>
 80074e4:	42a9      	cmp	r1, r5
 80074e6:	d905      	bls.n	80074f4 <_malloc_r+0x28>
 80074e8:	230c      	movs	r3, #12
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	2600      	movs	r6, #0
 80074ee:	4630      	mov	r0, r6
 80074f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80075c8 <_malloc_r+0xfc>
 80074f8:	f000 f868 	bl	80075cc <__malloc_lock>
 80074fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007500:	461c      	mov	r4, r3
 8007502:	bb5c      	cbnz	r4, 800755c <_malloc_r+0x90>
 8007504:	4629      	mov	r1, r5
 8007506:	4638      	mov	r0, r7
 8007508:	f7ff ffc0 	bl	800748c <sbrk_aligned>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	4604      	mov	r4, r0
 8007510:	d155      	bne.n	80075be <_malloc_r+0xf2>
 8007512:	f8d8 4000 	ldr.w	r4, [r8]
 8007516:	4626      	mov	r6, r4
 8007518:	2e00      	cmp	r6, #0
 800751a:	d145      	bne.n	80075a8 <_malloc_r+0xdc>
 800751c:	2c00      	cmp	r4, #0
 800751e:	d048      	beq.n	80075b2 <_malloc_r+0xe6>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	4631      	mov	r1, r6
 8007524:	4638      	mov	r0, r7
 8007526:	eb04 0903 	add.w	r9, r4, r3
 800752a:	f000 fc95 	bl	8007e58 <_sbrk_r>
 800752e:	4581      	cmp	r9, r0
 8007530:	d13f      	bne.n	80075b2 <_malloc_r+0xe6>
 8007532:	6821      	ldr	r1, [r4, #0]
 8007534:	1a6d      	subs	r5, r5, r1
 8007536:	4629      	mov	r1, r5
 8007538:	4638      	mov	r0, r7
 800753a:	f7ff ffa7 	bl	800748c <sbrk_aligned>
 800753e:	3001      	adds	r0, #1
 8007540:	d037      	beq.n	80075b2 <_malloc_r+0xe6>
 8007542:	6823      	ldr	r3, [r4, #0]
 8007544:	442b      	add	r3, r5
 8007546:	6023      	str	r3, [r4, #0]
 8007548:	f8d8 3000 	ldr.w	r3, [r8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d038      	beq.n	80075c2 <_malloc_r+0xf6>
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	42a2      	cmp	r2, r4
 8007554:	d12b      	bne.n	80075ae <_malloc_r+0xe2>
 8007556:	2200      	movs	r2, #0
 8007558:	605a      	str	r2, [r3, #4]
 800755a:	e00f      	b.n	800757c <_malloc_r+0xb0>
 800755c:	6822      	ldr	r2, [r4, #0]
 800755e:	1b52      	subs	r2, r2, r5
 8007560:	d41f      	bmi.n	80075a2 <_malloc_r+0xd6>
 8007562:	2a0b      	cmp	r2, #11
 8007564:	d917      	bls.n	8007596 <_malloc_r+0xca>
 8007566:	1961      	adds	r1, r4, r5
 8007568:	42a3      	cmp	r3, r4
 800756a:	6025      	str	r5, [r4, #0]
 800756c:	bf18      	it	ne
 800756e:	6059      	strne	r1, [r3, #4]
 8007570:	6863      	ldr	r3, [r4, #4]
 8007572:	bf08      	it	eq
 8007574:	f8c8 1000 	streq.w	r1, [r8]
 8007578:	5162      	str	r2, [r4, r5]
 800757a:	604b      	str	r3, [r1, #4]
 800757c:	4638      	mov	r0, r7
 800757e:	f104 060b 	add.w	r6, r4, #11
 8007582:	f000 f829 	bl	80075d8 <__malloc_unlock>
 8007586:	f026 0607 	bic.w	r6, r6, #7
 800758a:	1d23      	adds	r3, r4, #4
 800758c:	1af2      	subs	r2, r6, r3
 800758e:	d0ae      	beq.n	80074ee <_malloc_r+0x22>
 8007590:	1b9b      	subs	r3, r3, r6
 8007592:	50a3      	str	r3, [r4, r2]
 8007594:	e7ab      	b.n	80074ee <_malloc_r+0x22>
 8007596:	42a3      	cmp	r3, r4
 8007598:	6862      	ldr	r2, [r4, #4]
 800759a:	d1dd      	bne.n	8007558 <_malloc_r+0x8c>
 800759c:	f8c8 2000 	str.w	r2, [r8]
 80075a0:	e7ec      	b.n	800757c <_malloc_r+0xb0>
 80075a2:	4623      	mov	r3, r4
 80075a4:	6864      	ldr	r4, [r4, #4]
 80075a6:	e7ac      	b.n	8007502 <_malloc_r+0x36>
 80075a8:	4634      	mov	r4, r6
 80075aa:	6876      	ldr	r6, [r6, #4]
 80075ac:	e7b4      	b.n	8007518 <_malloc_r+0x4c>
 80075ae:	4613      	mov	r3, r2
 80075b0:	e7cc      	b.n	800754c <_malloc_r+0x80>
 80075b2:	230c      	movs	r3, #12
 80075b4:	603b      	str	r3, [r7, #0]
 80075b6:	4638      	mov	r0, r7
 80075b8:	f000 f80e 	bl	80075d8 <__malloc_unlock>
 80075bc:	e797      	b.n	80074ee <_malloc_r+0x22>
 80075be:	6025      	str	r5, [r4, #0]
 80075c0:	e7dc      	b.n	800757c <_malloc_r+0xb0>
 80075c2:	605b      	str	r3, [r3, #4]
 80075c4:	deff      	udf	#255	; 0xff
 80075c6:	bf00      	nop
 80075c8:	24000304 	.word	0x24000304

080075cc <__malloc_lock>:
 80075cc:	4801      	ldr	r0, [pc, #4]	; (80075d4 <__malloc_lock+0x8>)
 80075ce:	f7ff bf0e 	b.w	80073ee <__retarget_lock_acquire_recursive>
 80075d2:	bf00      	nop
 80075d4:	24000300 	.word	0x24000300

080075d8 <__malloc_unlock>:
 80075d8:	4801      	ldr	r0, [pc, #4]	; (80075e0 <__malloc_unlock+0x8>)
 80075da:	f7ff bf09 	b.w	80073f0 <__retarget_lock_release_recursive>
 80075de:	bf00      	nop
 80075e0:	24000300 	.word	0x24000300

080075e4 <__sfputc_r>:
 80075e4:	6893      	ldr	r3, [r2, #8]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	b410      	push	{r4}
 80075ec:	6093      	str	r3, [r2, #8]
 80075ee:	da08      	bge.n	8007602 <__sfputc_r+0x1e>
 80075f0:	6994      	ldr	r4, [r2, #24]
 80075f2:	42a3      	cmp	r3, r4
 80075f4:	db01      	blt.n	80075fa <__sfputc_r+0x16>
 80075f6:	290a      	cmp	r1, #10
 80075f8:	d103      	bne.n	8007602 <__sfputc_r+0x1e>
 80075fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075fe:	f7ff bde8 	b.w	80071d2 <__swbuf_r>
 8007602:	6813      	ldr	r3, [r2, #0]
 8007604:	1c58      	adds	r0, r3, #1
 8007606:	6010      	str	r0, [r2, #0]
 8007608:	7019      	strb	r1, [r3, #0]
 800760a:	4608      	mov	r0, r1
 800760c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007610:	4770      	bx	lr

08007612 <__sfputs_r>:
 8007612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007614:	4606      	mov	r6, r0
 8007616:	460f      	mov	r7, r1
 8007618:	4614      	mov	r4, r2
 800761a:	18d5      	adds	r5, r2, r3
 800761c:	42ac      	cmp	r4, r5
 800761e:	d101      	bne.n	8007624 <__sfputs_r+0x12>
 8007620:	2000      	movs	r0, #0
 8007622:	e007      	b.n	8007634 <__sfputs_r+0x22>
 8007624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007628:	463a      	mov	r2, r7
 800762a:	4630      	mov	r0, r6
 800762c:	f7ff ffda 	bl	80075e4 <__sfputc_r>
 8007630:	1c43      	adds	r3, r0, #1
 8007632:	d1f3      	bne.n	800761c <__sfputs_r+0xa>
 8007634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007638 <_vfiprintf_r>:
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	460d      	mov	r5, r1
 800763e:	b09d      	sub	sp, #116	; 0x74
 8007640:	4614      	mov	r4, r2
 8007642:	4698      	mov	r8, r3
 8007644:	4606      	mov	r6, r0
 8007646:	b118      	cbz	r0, 8007650 <_vfiprintf_r+0x18>
 8007648:	6a03      	ldr	r3, [r0, #32]
 800764a:	b90b      	cbnz	r3, 8007650 <_vfiprintf_r+0x18>
 800764c:	f7ff fcd2 	bl	8006ff4 <__sinit>
 8007650:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007652:	07d9      	lsls	r1, r3, #31
 8007654:	d405      	bmi.n	8007662 <_vfiprintf_r+0x2a>
 8007656:	89ab      	ldrh	r3, [r5, #12]
 8007658:	059a      	lsls	r2, r3, #22
 800765a:	d402      	bmi.n	8007662 <_vfiprintf_r+0x2a>
 800765c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800765e:	f7ff fec6 	bl	80073ee <__retarget_lock_acquire_recursive>
 8007662:	89ab      	ldrh	r3, [r5, #12]
 8007664:	071b      	lsls	r3, r3, #28
 8007666:	d501      	bpl.n	800766c <_vfiprintf_r+0x34>
 8007668:	692b      	ldr	r3, [r5, #16]
 800766a:	b99b      	cbnz	r3, 8007694 <_vfiprintf_r+0x5c>
 800766c:	4629      	mov	r1, r5
 800766e:	4630      	mov	r0, r6
 8007670:	f7ff fdec 	bl	800724c <__swsetup_r>
 8007674:	b170      	cbz	r0, 8007694 <_vfiprintf_r+0x5c>
 8007676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007678:	07dc      	lsls	r4, r3, #31
 800767a:	d504      	bpl.n	8007686 <_vfiprintf_r+0x4e>
 800767c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007680:	b01d      	add	sp, #116	; 0x74
 8007682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007686:	89ab      	ldrh	r3, [r5, #12]
 8007688:	0598      	lsls	r0, r3, #22
 800768a:	d4f7      	bmi.n	800767c <_vfiprintf_r+0x44>
 800768c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800768e:	f7ff feaf 	bl	80073f0 <__retarget_lock_release_recursive>
 8007692:	e7f3      	b.n	800767c <_vfiprintf_r+0x44>
 8007694:	2300      	movs	r3, #0
 8007696:	9309      	str	r3, [sp, #36]	; 0x24
 8007698:	2320      	movs	r3, #32
 800769a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800769e:	f8cd 800c 	str.w	r8, [sp, #12]
 80076a2:	2330      	movs	r3, #48	; 0x30
 80076a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007858 <_vfiprintf_r+0x220>
 80076a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076ac:	f04f 0901 	mov.w	r9, #1
 80076b0:	4623      	mov	r3, r4
 80076b2:	469a      	mov	sl, r3
 80076b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076b8:	b10a      	cbz	r2, 80076be <_vfiprintf_r+0x86>
 80076ba:	2a25      	cmp	r2, #37	; 0x25
 80076bc:	d1f9      	bne.n	80076b2 <_vfiprintf_r+0x7a>
 80076be:	ebba 0b04 	subs.w	fp, sl, r4
 80076c2:	d00b      	beq.n	80076dc <_vfiprintf_r+0xa4>
 80076c4:	465b      	mov	r3, fp
 80076c6:	4622      	mov	r2, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7ff ffa1 	bl	8007612 <__sfputs_r>
 80076d0:	3001      	adds	r0, #1
 80076d2:	f000 80a9 	beq.w	8007828 <_vfiprintf_r+0x1f0>
 80076d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076d8:	445a      	add	r2, fp
 80076da:	9209      	str	r2, [sp, #36]	; 0x24
 80076dc:	f89a 3000 	ldrb.w	r3, [sl]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 80a1 	beq.w	8007828 <_vfiprintf_r+0x1f0>
 80076e6:	2300      	movs	r3, #0
 80076e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076f0:	f10a 0a01 	add.w	sl, sl, #1
 80076f4:	9304      	str	r3, [sp, #16]
 80076f6:	9307      	str	r3, [sp, #28]
 80076f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076fc:	931a      	str	r3, [sp, #104]	; 0x68
 80076fe:	4654      	mov	r4, sl
 8007700:	2205      	movs	r2, #5
 8007702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007706:	4854      	ldr	r0, [pc, #336]	; (8007858 <_vfiprintf_r+0x220>)
 8007708:	f7f8 fdea 	bl	80002e0 <memchr>
 800770c:	9a04      	ldr	r2, [sp, #16]
 800770e:	b9d8      	cbnz	r0, 8007748 <_vfiprintf_r+0x110>
 8007710:	06d1      	lsls	r1, r2, #27
 8007712:	bf44      	itt	mi
 8007714:	2320      	movmi	r3, #32
 8007716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800771a:	0713      	lsls	r3, r2, #28
 800771c:	bf44      	itt	mi
 800771e:	232b      	movmi	r3, #43	; 0x2b
 8007720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007724:	f89a 3000 	ldrb.w	r3, [sl]
 8007728:	2b2a      	cmp	r3, #42	; 0x2a
 800772a:	d015      	beq.n	8007758 <_vfiprintf_r+0x120>
 800772c:	9a07      	ldr	r2, [sp, #28]
 800772e:	4654      	mov	r4, sl
 8007730:	2000      	movs	r0, #0
 8007732:	f04f 0c0a 	mov.w	ip, #10
 8007736:	4621      	mov	r1, r4
 8007738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800773c:	3b30      	subs	r3, #48	; 0x30
 800773e:	2b09      	cmp	r3, #9
 8007740:	d94d      	bls.n	80077de <_vfiprintf_r+0x1a6>
 8007742:	b1b0      	cbz	r0, 8007772 <_vfiprintf_r+0x13a>
 8007744:	9207      	str	r2, [sp, #28]
 8007746:	e014      	b.n	8007772 <_vfiprintf_r+0x13a>
 8007748:	eba0 0308 	sub.w	r3, r0, r8
 800774c:	fa09 f303 	lsl.w	r3, r9, r3
 8007750:	4313      	orrs	r3, r2
 8007752:	9304      	str	r3, [sp, #16]
 8007754:	46a2      	mov	sl, r4
 8007756:	e7d2      	b.n	80076fe <_vfiprintf_r+0xc6>
 8007758:	9b03      	ldr	r3, [sp, #12]
 800775a:	1d19      	adds	r1, r3, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	9103      	str	r1, [sp, #12]
 8007760:	2b00      	cmp	r3, #0
 8007762:	bfbb      	ittet	lt
 8007764:	425b      	neglt	r3, r3
 8007766:	f042 0202 	orrlt.w	r2, r2, #2
 800776a:	9307      	strge	r3, [sp, #28]
 800776c:	9307      	strlt	r3, [sp, #28]
 800776e:	bfb8      	it	lt
 8007770:	9204      	strlt	r2, [sp, #16]
 8007772:	7823      	ldrb	r3, [r4, #0]
 8007774:	2b2e      	cmp	r3, #46	; 0x2e
 8007776:	d10c      	bne.n	8007792 <_vfiprintf_r+0x15a>
 8007778:	7863      	ldrb	r3, [r4, #1]
 800777a:	2b2a      	cmp	r3, #42	; 0x2a
 800777c:	d134      	bne.n	80077e8 <_vfiprintf_r+0x1b0>
 800777e:	9b03      	ldr	r3, [sp, #12]
 8007780:	1d1a      	adds	r2, r3, #4
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	9203      	str	r2, [sp, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	bfb8      	it	lt
 800778a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800778e:	3402      	adds	r4, #2
 8007790:	9305      	str	r3, [sp, #20]
 8007792:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007868 <_vfiprintf_r+0x230>
 8007796:	7821      	ldrb	r1, [r4, #0]
 8007798:	2203      	movs	r2, #3
 800779a:	4650      	mov	r0, sl
 800779c:	f7f8 fda0 	bl	80002e0 <memchr>
 80077a0:	b138      	cbz	r0, 80077b2 <_vfiprintf_r+0x17a>
 80077a2:	9b04      	ldr	r3, [sp, #16]
 80077a4:	eba0 000a 	sub.w	r0, r0, sl
 80077a8:	2240      	movs	r2, #64	; 0x40
 80077aa:	4082      	lsls	r2, r0
 80077ac:	4313      	orrs	r3, r2
 80077ae:	3401      	adds	r4, #1
 80077b0:	9304      	str	r3, [sp, #16]
 80077b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b6:	4829      	ldr	r0, [pc, #164]	; (800785c <_vfiprintf_r+0x224>)
 80077b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077bc:	2206      	movs	r2, #6
 80077be:	f7f8 fd8f 	bl	80002e0 <memchr>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d03f      	beq.n	8007846 <_vfiprintf_r+0x20e>
 80077c6:	4b26      	ldr	r3, [pc, #152]	; (8007860 <_vfiprintf_r+0x228>)
 80077c8:	bb1b      	cbnz	r3, 8007812 <_vfiprintf_r+0x1da>
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	3307      	adds	r3, #7
 80077ce:	f023 0307 	bic.w	r3, r3, #7
 80077d2:	3308      	adds	r3, #8
 80077d4:	9303      	str	r3, [sp, #12]
 80077d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d8:	443b      	add	r3, r7
 80077da:	9309      	str	r3, [sp, #36]	; 0x24
 80077dc:	e768      	b.n	80076b0 <_vfiprintf_r+0x78>
 80077de:	fb0c 3202 	mla	r2, ip, r2, r3
 80077e2:	460c      	mov	r4, r1
 80077e4:	2001      	movs	r0, #1
 80077e6:	e7a6      	b.n	8007736 <_vfiprintf_r+0xfe>
 80077e8:	2300      	movs	r3, #0
 80077ea:	3401      	adds	r4, #1
 80077ec:	9305      	str	r3, [sp, #20]
 80077ee:	4619      	mov	r1, r3
 80077f0:	f04f 0c0a 	mov.w	ip, #10
 80077f4:	4620      	mov	r0, r4
 80077f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077fa:	3a30      	subs	r2, #48	; 0x30
 80077fc:	2a09      	cmp	r2, #9
 80077fe:	d903      	bls.n	8007808 <_vfiprintf_r+0x1d0>
 8007800:	2b00      	cmp	r3, #0
 8007802:	d0c6      	beq.n	8007792 <_vfiprintf_r+0x15a>
 8007804:	9105      	str	r1, [sp, #20]
 8007806:	e7c4      	b.n	8007792 <_vfiprintf_r+0x15a>
 8007808:	fb0c 2101 	mla	r1, ip, r1, r2
 800780c:	4604      	mov	r4, r0
 800780e:	2301      	movs	r3, #1
 8007810:	e7f0      	b.n	80077f4 <_vfiprintf_r+0x1bc>
 8007812:	ab03      	add	r3, sp, #12
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	462a      	mov	r2, r5
 8007818:	4b12      	ldr	r3, [pc, #72]	; (8007864 <_vfiprintf_r+0x22c>)
 800781a:	a904      	add	r1, sp, #16
 800781c:	4630      	mov	r0, r6
 800781e:	f3af 8000 	nop.w
 8007822:	4607      	mov	r7, r0
 8007824:	1c78      	adds	r0, r7, #1
 8007826:	d1d6      	bne.n	80077d6 <_vfiprintf_r+0x19e>
 8007828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800782a:	07d9      	lsls	r1, r3, #31
 800782c:	d405      	bmi.n	800783a <_vfiprintf_r+0x202>
 800782e:	89ab      	ldrh	r3, [r5, #12]
 8007830:	059a      	lsls	r2, r3, #22
 8007832:	d402      	bmi.n	800783a <_vfiprintf_r+0x202>
 8007834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007836:	f7ff fddb 	bl	80073f0 <__retarget_lock_release_recursive>
 800783a:	89ab      	ldrh	r3, [r5, #12]
 800783c:	065b      	lsls	r3, r3, #25
 800783e:	f53f af1d 	bmi.w	800767c <_vfiprintf_r+0x44>
 8007842:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007844:	e71c      	b.n	8007680 <_vfiprintf_r+0x48>
 8007846:	ab03      	add	r3, sp, #12
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	462a      	mov	r2, r5
 800784c:	4b05      	ldr	r3, [pc, #20]	; (8007864 <_vfiprintf_r+0x22c>)
 800784e:	a904      	add	r1, sp, #16
 8007850:	4630      	mov	r0, r6
 8007852:	f000 f879 	bl	8007948 <_printf_i>
 8007856:	e7e4      	b.n	8007822 <_vfiprintf_r+0x1ea>
 8007858:	08008074 	.word	0x08008074
 800785c:	0800807e 	.word	0x0800807e
 8007860:	00000000 	.word	0x00000000
 8007864:	08007613 	.word	0x08007613
 8007868:	0800807a 	.word	0x0800807a

0800786c <_printf_common>:
 800786c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007870:	4616      	mov	r6, r2
 8007872:	4699      	mov	r9, r3
 8007874:	688a      	ldr	r2, [r1, #8]
 8007876:	690b      	ldr	r3, [r1, #16]
 8007878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800787c:	4293      	cmp	r3, r2
 800787e:	bfb8      	it	lt
 8007880:	4613      	movlt	r3, r2
 8007882:	6033      	str	r3, [r6, #0]
 8007884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007888:	4607      	mov	r7, r0
 800788a:	460c      	mov	r4, r1
 800788c:	b10a      	cbz	r2, 8007892 <_printf_common+0x26>
 800788e:	3301      	adds	r3, #1
 8007890:	6033      	str	r3, [r6, #0]
 8007892:	6823      	ldr	r3, [r4, #0]
 8007894:	0699      	lsls	r1, r3, #26
 8007896:	bf42      	ittt	mi
 8007898:	6833      	ldrmi	r3, [r6, #0]
 800789a:	3302      	addmi	r3, #2
 800789c:	6033      	strmi	r3, [r6, #0]
 800789e:	6825      	ldr	r5, [r4, #0]
 80078a0:	f015 0506 	ands.w	r5, r5, #6
 80078a4:	d106      	bne.n	80078b4 <_printf_common+0x48>
 80078a6:	f104 0a19 	add.w	sl, r4, #25
 80078aa:	68e3      	ldr	r3, [r4, #12]
 80078ac:	6832      	ldr	r2, [r6, #0]
 80078ae:	1a9b      	subs	r3, r3, r2
 80078b0:	42ab      	cmp	r3, r5
 80078b2:	dc26      	bgt.n	8007902 <_printf_common+0x96>
 80078b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078b8:	1e13      	subs	r3, r2, #0
 80078ba:	6822      	ldr	r2, [r4, #0]
 80078bc:	bf18      	it	ne
 80078be:	2301      	movne	r3, #1
 80078c0:	0692      	lsls	r2, r2, #26
 80078c2:	d42b      	bmi.n	800791c <_printf_common+0xb0>
 80078c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078c8:	4649      	mov	r1, r9
 80078ca:	4638      	mov	r0, r7
 80078cc:	47c0      	blx	r8
 80078ce:	3001      	adds	r0, #1
 80078d0:	d01e      	beq.n	8007910 <_printf_common+0xa4>
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	6922      	ldr	r2, [r4, #16]
 80078d6:	f003 0306 	and.w	r3, r3, #6
 80078da:	2b04      	cmp	r3, #4
 80078dc:	bf02      	ittt	eq
 80078de:	68e5      	ldreq	r5, [r4, #12]
 80078e0:	6833      	ldreq	r3, [r6, #0]
 80078e2:	1aed      	subeq	r5, r5, r3
 80078e4:	68a3      	ldr	r3, [r4, #8]
 80078e6:	bf0c      	ite	eq
 80078e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078ec:	2500      	movne	r5, #0
 80078ee:	4293      	cmp	r3, r2
 80078f0:	bfc4      	itt	gt
 80078f2:	1a9b      	subgt	r3, r3, r2
 80078f4:	18ed      	addgt	r5, r5, r3
 80078f6:	2600      	movs	r6, #0
 80078f8:	341a      	adds	r4, #26
 80078fa:	42b5      	cmp	r5, r6
 80078fc:	d11a      	bne.n	8007934 <_printf_common+0xc8>
 80078fe:	2000      	movs	r0, #0
 8007900:	e008      	b.n	8007914 <_printf_common+0xa8>
 8007902:	2301      	movs	r3, #1
 8007904:	4652      	mov	r2, sl
 8007906:	4649      	mov	r1, r9
 8007908:	4638      	mov	r0, r7
 800790a:	47c0      	blx	r8
 800790c:	3001      	adds	r0, #1
 800790e:	d103      	bne.n	8007918 <_printf_common+0xac>
 8007910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007918:	3501      	adds	r5, #1
 800791a:	e7c6      	b.n	80078aa <_printf_common+0x3e>
 800791c:	18e1      	adds	r1, r4, r3
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	2030      	movs	r0, #48	; 0x30
 8007922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007926:	4422      	add	r2, r4
 8007928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800792c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007930:	3302      	adds	r3, #2
 8007932:	e7c7      	b.n	80078c4 <_printf_common+0x58>
 8007934:	2301      	movs	r3, #1
 8007936:	4622      	mov	r2, r4
 8007938:	4649      	mov	r1, r9
 800793a:	4638      	mov	r0, r7
 800793c:	47c0      	blx	r8
 800793e:	3001      	adds	r0, #1
 8007940:	d0e6      	beq.n	8007910 <_printf_common+0xa4>
 8007942:	3601      	adds	r6, #1
 8007944:	e7d9      	b.n	80078fa <_printf_common+0x8e>
	...

08007948 <_printf_i>:
 8007948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800794c:	7e0f      	ldrb	r7, [r1, #24]
 800794e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007950:	2f78      	cmp	r7, #120	; 0x78
 8007952:	4691      	mov	r9, r2
 8007954:	4680      	mov	r8, r0
 8007956:	460c      	mov	r4, r1
 8007958:	469a      	mov	sl, r3
 800795a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800795e:	d807      	bhi.n	8007970 <_printf_i+0x28>
 8007960:	2f62      	cmp	r7, #98	; 0x62
 8007962:	d80a      	bhi.n	800797a <_printf_i+0x32>
 8007964:	2f00      	cmp	r7, #0
 8007966:	f000 80d4 	beq.w	8007b12 <_printf_i+0x1ca>
 800796a:	2f58      	cmp	r7, #88	; 0x58
 800796c:	f000 80c0 	beq.w	8007af0 <_printf_i+0x1a8>
 8007970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007978:	e03a      	b.n	80079f0 <_printf_i+0xa8>
 800797a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800797e:	2b15      	cmp	r3, #21
 8007980:	d8f6      	bhi.n	8007970 <_printf_i+0x28>
 8007982:	a101      	add	r1, pc, #4	; (adr r1, 8007988 <_printf_i+0x40>)
 8007984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007988:	080079e1 	.word	0x080079e1
 800798c:	080079f5 	.word	0x080079f5
 8007990:	08007971 	.word	0x08007971
 8007994:	08007971 	.word	0x08007971
 8007998:	08007971 	.word	0x08007971
 800799c:	08007971 	.word	0x08007971
 80079a0:	080079f5 	.word	0x080079f5
 80079a4:	08007971 	.word	0x08007971
 80079a8:	08007971 	.word	0x08007971
 80079ac:	08007971 	.word	0x08007971
 80079b0:	08007971 	.word	0x08007971
 80079b4:	08007af9 	.word	0x08007af9
 80079b8:	08007a21 	.word	0x08007a21
 80079bc:	08007ab3 	.word	0x08007ab3
 80079c0:	08007971 	.word	0x08007971
 80079c4:	08007971 	.word	0x08007971
 80079c8:	08007b1b 	.word	0x08007b1b
 80079cc:	08007971 	.word	0x08007971
 80079d0:	08007a21 	.word	0x08007a21
 80079d4:	08007971 	.word	0x08007971
 80079d8:	08007971 	.word	0x08007971
 80079dc:	08007abb 	.word	0x08007abb
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	1d1a      	adds	r2, r3, #4
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	602a      	str	r2, [r5, #0]
 80079e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079f0:	2301      	movs	r3, #1
 80079f2:	e09f      	b.n	8007b34 <_printf_i+0x1ec>
 80079f4:	6820      	ldr	r0, [r4, #0]
 80079f6:	682b      	ldr	r3, [r5, #0]
 80079f8:	0607      	lsls	r7, r0, #24
 80079fa:	f103 0104 	add.w	r1, r3, #4
 80079fe:	6029      	str	r1, [r5, #0]
 8007a00:	d501      	bpl.n	8007a06 <_printf_i+0xbe>
 8007a02:	681e      	ldr	r6, [r3, #0]
 8007a04:	e003      	b.n	8007a0e <_printf_i+0xc6>
 8007a06:	0646      	lsls	r6, r0, #25
 8007a08:	d5fb      	bpl.n	8007a02 <_printf_i+0xba>
 8007a0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a0e:	2e00      	cmp	r6, #0
 8007a10:	da03      	bge.n	8007a1a <_printf_i+0xd2>
 8007a12:	232d      	movs	r3, #45	; 0x2d
 8007a14:	4276      	negs	r6, r6
 8007a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a1a:	485a      	ldr	r0, [pc, #360]	; (8007b84 <_printf_i+0x23c>)
 8007a1c:	230a      	movs	r3, #10
 8007a1e:	e012      	b.n	8007a46 <_printf_i+0xfe>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	6820      	ldr	r0, [r4, #0]
 8007a24:	1d19      	adds	r1, r3, #4
 8007a26:	6029      	str	r1, [r5, #0]
 8007a28:	0605      	lsls	r5, r0, #24
 8007a2a:	d501      	bpl.n	8007a30 <_printf_i+0xe8>
 8007a2c:	681e      	ldr	r6, [r3, #0]
 8007a2e:	e002      	b.n	8007a36 <_printf_i+0xee>
 8007a30:	0641      	lsls	r1, r0, #25
 8007a32:	d5fb      	bpl.n	8007a2c <_printf_i+0xe4>
 8007a34:	881e      	ldrh	r6, [r3, #0]
 8007a36:	4853      	ldr	r0, [pc, #332]	; (8007b84 <_printf_i+0x23c>)
 8007a38:	2f6f      	cmp	r7, #111	; 0x6f
 8007a3a:	bf0c      	ite	eq
 8007a3c:	2308      	moveq	r3, #8
 8007a3e:	230a      	movne	r3, #10
 8007a40:	2100      	movs	r1, #0
 8007a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a46:	6865      	ldr	r5, [r4, #4]
 8007a48:	60a5      	str	r5, [r4, #8]
 8007a4a:	2d00      	cmp	r5, #0
 8007a4c:	bfa2      	ittt	ge
 8007a4e:	6821      	ldrge	r1, [r4, #0]
 8007a50:	f021 0104 	bicge.w	r1, r1, #4
 8007a54:	6021      	strge	r1, [r4, #0]
 8007a56:	b90e      	cbnz	r6, 8007a5c <_printf_i+0x114>
 8007a58:	2d00      	cmp	r5, #0
 8007a5a:	d04b      	beq.n	8007af4 <_printf_i+0x1ac>
 8007a5c:	4615      	mov	r5, r2
 8007a5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a62:	fb03 6711 	mls	r7, r3, r1, r6
 8007a66:	5dc7      	ldrb	r7, [r0, r7]
 8007a68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a6c:	4637      	mov	r7, r6
 8007a6e:	42bb      	cmp	r3, r7
 8007a70:	460e      	mov	r6, r1
 8007a72:	d9f4      	bls.n	8007a5e <_printf_i+0x116>
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d10b      	bne.n	8007a90 <_printf_i+0x148>
 8007a78:	6823      	ldr	r3, [r4, #0]
 8007a7a:	07de      	lsls	r6, r3, #31
 8007a7c:	d508      	bpl.n	8007a90 <_printf_i+0x148>
 8007a7e:	6923      	ldr	r3, [r4, #16]
 8007a80:	6861      	ldr	r1, [r4, #4]
 8007a82:	4299      	cmp	r1, r3
 8007a84:	bfde      	ittt	le
 8007a86:	2330      	movle	r3, #48	; 0x30
 8007a88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007a90:	1b52      	subs	r2, r2, r5
 8007a92:	6122      	str	r2, [r4, #16]
 8007a94:	f8cd a000 	str.w	sl, [sp]
 8007a98:	464b      	mov	r3, r9
 8007a9a:	aa03      	add	r2, sp, #12
 8007a9c:	4621      	mov	r1, r4
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	f7ff fee4 	bl	800786c <_printf_common>
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d14a      	bne.n	8007b3e <_printf_i+0x1f6>
 8007aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007aac:	b004      	add	sp, #16
 8007aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	f043 0320 	orr.w	r3, r3, #32
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	4833      	ldr	r0, [pc, #204]	; (8007b88 <_printf_i+0x240>)
 8007abc:	2778      	movs	r7, #120	; 0x78
 8007abe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	6829      	ldr	r1, [r5, #0]
 8007ac6:	061f      	lsls	r7, r3, #24
 8007ac8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007acc:	d402      	bmi.n	8007ad4 <_printf_i+0x18c>
 8007ace:	065f      	lsls	r7, r3, #25
 8007ad0:	bf48      	it	mi
 8007ad2:	b2b6      	uxthmi	r6, r6
 8007ad4:	07df      	lsls	r7, r3, #31
 8007ad6:	bf48      	it	mi
 8007ad8:	f043 0320 	orrmi.w	r3, r3, #32
 8007adc:	6029      	str	r1, [r5, #0]
 8007ade:	bf48      	it	mi
 8007ae0:	6023      	strmi	r3, [r4, #0]
 8007ae2:	b91e      	cbnz	r6, 8007aec <_printf_i+0x1a4>
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	f023 0320 	bic.w	r3, r3, #32
 8007aea:	6023      	str	r3, [r4, #0]
 8007aec:	2310      	movs	r3, #16
 8007aee:	e7a7      	b.n	8007a40 <_printf_i+0xf8>
 8007af0:	4824      	ldr	r0, [pc, #144]	; (8007b84 <_printf_i+0x23c>)
 8007af2:	e7e4      	b.n	8007abe <_printf_i+0x176>
 8007af4:	4615      	mov	r5, r2
 8007af6:	e7bd      	b.n	8007a74 <_printf_i+0x12c>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	6826      	ldr	r6, [r4, #0]
 8007afc:	6961      	ldr	r1, [r4, #20]
 8007afe:	1d18      	adds	r0, r3, #4
 8007b00:	6028      	str	r0, [r5, #0]
 8007b02:	0635      	lsls	r5, r6, #24
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	d501      	bpl.n	8007b0c <_printf_i+0x1c4>
 8007b08:	6019      	str	r1, [r3, #0]
 8007b0a:	e002      	b.n	8007b12 <_printf_i+0x1ca>
 8007b0c:	0670      	lsls	r0, r6, #25
 8007b0e:	d5fb      	bpl.n	8007b08 <_printf_i+0x1c0>
 8007b10:	8019      	strh	r1, [r3, #0]
 8007b12:	2300      	movs	r3, #0
 8007b14:	6123      	str	r3, [r4, #16]
 8007b16:	4615      	mov	r5, r2
 8007b18:	e7bc      	b.n	8007a94 <_printf_i+0x14c>
 8007b1a:	682b      	ldr	r3, [r5, #0]
 8007b1c:	1d1a      	adds	r2, r3, #4
 8007b1e:	602a      	str	r2, [r5, #0]
 8007b20:	681d      	ldr	r5, [r3, #0]
 8007b22:	6862      	ldr	r2, [r4, #4]
 8007b24:	2100      	movs	r1, #0
 8007b26:	4628      	mov	r0, r5
 8007b28:	f7f8 fbda 	bl	80002e0 <memchr>
 8007b2c:	b108      	cbz	r0, 8007b32 <_printf_i+0x1ea>
 8007b2e:	1b40      	subs	r0, r0, r5
 8007b30:	6060      	str	r0, [r4, #4]
 8007b32:	6863      	ldr	r3, [r4, #4]
 8007b34:	6123      	str	r3, [r4, #16]
 8007b36:	2300      	movs	r3, #0
 8007b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b3c:	e7aa      	b.n	8007a94 <_printf_i+0x14c>
 8007b3e:	6923      	ldr	r3, [r4, #16]
 8007b40:	462a      	mov	r2, r5
 8007b42:	4649      	mov	r1, r9
 8007b44:	4640      	mov	r0, r8
 8007b46:	47d0      	blx	sl
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d0ad      	beq.n	8007aa8 <_printf_i+0x160>
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	079b      	lsls	r3, r3, #30
 8007b50:	d413      	bmi.n	8007b7a <_printf_i+0x232>
 8007b52:	68e0      	ldr	r0, [r4, #12]
 8007b54:	9b03      	ldr	r3, [sp, #12]
 8007b56:	4298      	cmp	r0, r3
 8007b58:	bfb8      	it	lt
 8007b5a:	4618      	movlt	r0, r3
 8007b5c:	e7a6      	b.n	8007aac <_printf_i+0x164>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	4632      	mov	r2, r6
 8007b62:	4649      	mov	r1, r9
 8007b64:	4640      	mov	r0, r8
 8007b66:	47d0      	blx	sl
 8007b68:	3001      	adds	r0, #1
 8007b6a:	d09d      	beq.n	8007aa8 <_printf_i+0x160>
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	68e3      	ldr	r3, [r4, #12]
 8007b70:	9903      	ldr	r1, [sp, #12]
 8007b72:	1a5b      	subs	r3, r3, r1
 8007b74:	42ab      	cmp	r3, r5
 8007b76:	dcf2      	bgt.n	8007b5e <_printf_i+0x216>
 8007b78:	e7eb      	b.n	8007b52 <_printf_i+0x20a>
 8007b7a:	2500      	movs	r5, #0
 8007b7c:	f104 0619 	add.w	r6, r4, #25
 8007b80:	e7f5      	b.n	8007b6e <_printf_i+0x226>
 8007b82:	bf00      	nop
 8007b84:	08008085 	.word	0x08008085
 8007b88:	08008096 	.word	0x08008096

08007b8c <__sflush_r>:
 8007b8c:	898a      	ldrh	r2, [r1, #12]
 8007b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b92:	4605      	mov	r5, r0
 8007b94:	0710      	lsls	r0, r2, #28
 8007b96:	460c      	mov	r4, r1
 8007b98:	d458      	bmi.n	8007c4c <__sflush_r+0xc0>
 8007b9a:	684b      	ldr	r3, [r1, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	dc05      	bgt.n	8007bac <__sflush_r+0x20>
 8007ba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	dc02      	bgt.n	8007bac <__sflush_r+0x20>
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bae:	2e00      	cmp	r6, #0
 8007bb0:	d0f9      	beq.n	8007ba6 <__sflush_r+0x1a>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bb8:	682f      	ldr	r7, [r5, #0]
 8007bba:	6a21      	ldr	r1, [r4, #32]
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	d032      	beq.n	8007c26 <__sflush_r+0x9a>
 8007bc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	075a      	lsls	r2, r3, #29
 8007bc6:	d505      	bpl.n	8007bd4 <__sflush_r+0x48>
 8007bc8:	6863      	ldr	r3, [r4, #4]
 8007bca:	1ac0      	subs	r0, r0, r3
 8007bcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bce:	b10b      	cbz	r3, 8007bd4 <__sflush_r+0x48>
 8007bd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bd2:	1ac0      	subs	r0, r0, r3
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bda:	6a21      	ldr	r1, [r4, #32]
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b0      	blx	r6
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	d106      	bne.n	8007bf4 <__sflush_r+0x68>
 8007be6:	6829      	ldr	r1, [r5, #0]
 8007be8:	291d      	cmp	r1, #29
 8007bea:	d82b      	bhi.n	8007c44 <__sflush_r+0xb8>
 8007bec:	4a29      	ldr	r2, [pc, #164]	; (8007c94 <__sflush_r+0x108>)
 8007bee:	410a      	asrs	r2, r1
 8007bf0:	07d6      	lsls	r6, r2, #31
 8007bf2:	d427      	bmi.n	8007c44 <__sflush_r+0xb8>
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	6062      	str	r2, [r4, #4]
 8007bf8:	04d9      	lsls	r1, r3, #19
 8007bfa:	6922      	ldr	r2, [r4, #16]
 8007bfc:	6022      	str	r2, [r4, #0]
 8007bfe:	d504      	bpl.n	8007c0a <__sflush_r+0x7e>
 8007c00:	1c42      	adds	r2, r0, #1
 8007c02:	d101      	bne.n	8007c08 <__sflush_r+0x7c>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	b903      	cbnz	r3, 8007c0a <__sflush_r+0x7e>
 8007c08:	6560      	str	r0, [r4, #84]	; 0x54
 8007c0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c0c:	602f      	str	r7, [r5, #0]
 8007c0e:	2900      	cmp	r1, #0
 8007c10:	d0c9      	beq.n	8007ba6 <__sflush_r+0x1a>
 8007c12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c16:	4299      	cmp	r1, r3
 8007c18:	d002      	beq.n	8007c20 <__sflush_r+0x94>
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f7ff fbea 	bl	80073f4 <_free_r>
 8007c20:	2000      	movs	r0, #0
 8007c22:	6360      	str	r0, [r4, #52]	; 0x34
 8007c24:	e7c0      	b.n	8007ba8 <__sflush_r+0x1c>
 8007c26:	2301      	movs	r3, #1
 8007c28:	4628      	mov	r0, r5
 8007c2a:	47b0      	blx	r6
 8007c2c:	1c41      	adds	r1, r0, #1
 8007c2e:	d1c8      	bne.n	8007bc2 <__sflush_r+0x36>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0c5      	beq.n	8007bc2 <__sflush_r+0x36>
 8007c36:	2b1d      	cmp	r3, #29
 8007c38:	d001      	beq.n	8007c3e <__sflush_r+0xb2>
 8007c3a:	2b16      	cmp	r3, #22
 8007c3c:	d101      	bne.n	8007c42 <__sflush_r+0xb6>
 8007c3e:	602f      	str	r7, [r5, #0]
 8007c40:	e7b1      	b.n	8007ba6 <__sflush_r+0x1a>
 8007c42:	89a3      	ldrh	r3, [r4, #12]
 8007c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c48:	81a3      	strh	r3, [r4, #12]
 8007c4a:	e7ad      	b.n	8007ba8 <__sflush_r+0x1c>
 8007c4c:	690f      	ldr	r7, [r1, #16]
 8007c4e:	2f00      	cmp	r7, #0
 8007c50:	d0a9      	beq.n	8007ba6 <__sflush_r+0x1a>
 8007c52:	0793      	lsls	r3, r2, #30
 8007c54:	680e      	ldr	r6, [r1, #0]
 8007c56:	bf08      	it	eq
 8007c58:	694b      	ldreq	r3, [r1, #20]
 8007c5a:	600f      	str	r7, [r1, #0]
 8007c5c:	bf18      	it	ne
 8007c5e:	2300      	movne	r3, #0
 8007c60:	eba6 0807 	sub.w	r8, r6, r7
 8007c64:	608b      	str	r3, [r1, #8]
 8007c66:	f1b8 0f00 	cmp.w	r8, #0
 8007c6a:	dd9c      	ble.n	8007ba6 <__sflush_r+0x1a>
 8007c6c:	6a21      	ldr	r1, [r4, #32]
 8007c6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c70:	4643      	mov	r3, r8
 8007c72:	463a      	mov	r2, r7
 8007c74:	4628      	mov	r0, r5
 8007c76:	47b0      	blx	r6
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	dc06      	bgt.n	8007c8a <__sflush_r+0xfe>
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c82:	81a3      	strh	r3, [r4, #12]
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c88:	e78e      	b.n	8007ba8 <__sflush_r+0x1c>
 8007c8a:	4407      	add	r7, r0
 8007c8c:	eba8 0800 	sub.w	r8, r8, r0
 8007c90:	e7e9      	b.n	8007c66 <__sflush_r+0xda>
 8007c92:	bf00      	nop
 8007c94:	dfbffffe 	.word	0xdfbffffe

08007c98 <_fflush_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	690b      	ldr	r3, [r1, #16]
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	b913      	cbnz	r3, 8007ca8 <_fflush_r+0x10>
 8007ca2:	2500      	movs	r5, #0
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	b118      	cbz	r0, 8007cb2 <_fflush_r+0x1a>
 8007caa:	6a03      	ldr	r3, [r0, #32]
 8007cac:	b90b      	cbnz	r3, 8007cb2 <_fflush_r+0x1a>
 8007cae:	f7ff f9a1 	bl	8006ff4 <__sinit>
 8007cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0f3      	beq.n	8007ca2 <_fflush_r+0xa>
 8007cba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007cbc:	07d0      	lsls	r0, r2, #31
 8007cbe:	d404      	bmi.n	8007cca <_fflush_r+0x32>
 8007cc0:	0599      	lsls	r1, r3, #22
 8007cc2:	d402      	bmi.n	8007cca <_fflush_r+0x32>
 8007cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cc6:	f7ff fb92 	bl	80073ee <__retarget_lock_acquire_recursive>
 8007cca:	4628      	mov	r0, r5
 8007ccc:	4621      	mov	r1, r4
 8007cce:	f7ff ff5d 	bl	8007b8c <__sflush_r>
 8007cd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cd4:	07da      	lsls	r2, r3, #31
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	d4e4      	bmi.n	8007ca4 <_fflush_r+0xc>
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	059b      	lsls	r3, r3, #22
 8007cde:	d4e1      	bmi.n	8007ca4 <_fflush_r+0xc>
 8007ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ce2:	f7ff fb85 	bl	80073f0 <__retarget_lock_release_recursive>
 8007ce6:	e7dd      	b.n	8007ca4 <_fflush_r+0xc>

08007ce8 <__swhatbuf_r>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	460c      	mov	r4, r1
 8007cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	b096      	sub	sp, #88	; 0x58
 8007cf4:	4615      	mov	r5, r2
 8007cf6:	461e      	mov	r6, r3
 8007cf8:	da0d      	bge.n	8007d16 <__swhatbuf_r+0x2e>
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d00:	f04f 0100 	mov.w	r1, #0
 8007d04:	bf0c      	ite	eq
 8007d06:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007d0a:	2340      	movne	r3, #64	; 0x40
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	6031      	str	r1, [r6, #0]
 8007d10:	602b      	str	r3, [r5, #0]
 8007d12:	b016      	add	sp, #88	; 0x58
 8007d14:	bd70      	pop	{r4, r5, r6, pc}
 8007d16:	466a      	mov	r2, sp
 8007d18:	f000 f87c 	bl	8007e14 <_fstat_r>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	dbec      	blt.n	8007cfa <__swhatbuf_r+0x12>
 8007d20:	9901      	ldr	r1, [sp, #4]
 8007d22:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007d26:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007d2a:	4259      	negs	r1, r3
 8007d2c:	4159      	adcs	r1, r3
 8007d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d32:	e7eb      	b.n	8007d0c <__swhatbuf_r+0x24>

08007d34 <__smakebuf_r>:
 8007d34:	898b      	ldrh	r3, [r1, #12]
 8007d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d38:	079d      	lsls	r5, r3, #30
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	d507      	bpl.n	8007d50 <__smakebuf_r+0x1c>
 8007d40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	6123      	str	r3, [r4, #16]
 8007d48:	2301      	movs	r3, #1
 8007d4a:	6163      	str	r3, [r4, #20]
 8007d4c:	b002      	add	sp, #8
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}
 8007d50:	ab01      	add	r3, sp, #4
 8007d52:	466a      	mov	r2, sp
 8007d54:	f7ff ffc8 	bl	8007ce8 <__swhatbuf_r>
 8007d58:	9900      	ldr	r1, [sp, #0]
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f7ff fbb5 	bl	80074cc <_malloc_r>
 8007d62:	b948      	cbnz	r0, 8007d78 <__smakebuf_r+0x44>
 8007d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d68:	059a      	lsls	r2, r3, #22
 8007d6a:	d4ef      	bmi.n	8007d4c <__smakebuf_r+0x18>
 8007d6c:	f023 0303 	bic.w	r3, r3, #3
 8007d70:	f043 0302 	orr.w	r3, r3, #2
 8007d74:	81a3      	strh	r3, [r4, #12]
 8007d76:	e7e3      	b.n	8007d40 <__smakebuf_r+0xc>
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	6020      	str	r0, [r4, #0]
 8007d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d80:	81a3      	strh	r3, [r4, #12]
 8007d82:	9b00      	ldr	r3, [sp, #0]
 8007d84:	6163      	str	r3, [r4, #20]
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	6120      	str	r0, [r4, #16]
 8007d8a:	b15b      	cbz	r3, 8007da4 <__smakebuf_r+0x70>
 8007d8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d90:	4630      	mov	r0, r6
 8007d92:	f000 f851 	bl	8007e38 <_isatty_r>
 8007d96:	b128      	cbz	r0, 8007da4 <__smakebuf_r+0x70>
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	f023 0303 	bic.w	r3, r3, #3
 8007d9e:	f043 0301 	orr.w	r3, r3, #1
 8007da2:	81a3      	strh	r3, [r4, #12]
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	431d      	orrs	r5, r3
 8007da8:	81a5      	strh	r5, [r4, #12]
 8007daa:	e7cf      	b.n	8007d4c <__smakebuf_r+0x18>

08007dac <_putc_r>:
 8007dac:	b570      	push	{r4, r5, r6, lr}
 8007dae:	460d      	mov	r5, r1
 8007db0:	4614      	mov	r4, r2
 8007db2:	4606      	mov	r6, r0
 8007db4:	b118      	cbz	r0, 8007dbe <_putc_r+0x12>
 8007db6:	6a03      	ldr	r3, [r0, #32]
 8007db8:	b90b      	cbnz	r3, 8007dbe <_putc_r+0x12>
 8007dba:	f7ff f91b 	bl	8006ff4 <__sinit>
 8007dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dc0:	07d8      	lsls	r0, r3, #31
 8007dc2:	d405      	bmi.n	8007dd0 <_putc_r+0x24>
 8007dc4:	89a3      	ldrh	r3, [r4, #12]
 8007dc6:	0599      	lsls	r1, r3, #22
 8007dc8:	d402      	bmi.n	8007dd0 <_putc_r+0x24>
 8007dca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dcc:	f7ff fb0f 	bl	80073ee <__retarget_lock_acquire_recursive>
 8007dd0:	68a3      	ldr	r3, [r4, #8]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	60a3      	str	r3, [r4, #8]
 8007dd8:	da05      	bge.n	8007de6 <_putc_r+0x3a>
 8007dda:	69a2      	ldr	r2, [r4, #24]
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	db12      	blt.n	8007e06 <_putc_r+0x5a>
 8007de0:	b2eb      	uxtb	r3, r5
 8007de2:	2b0a      	cmp	r3, #10
 8007de4:	d00f      	beq.n	8007e06 <_putc_r+0x5a>
 8007de6:	6823      	ldr	r3, [r4, #0]
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	6022      	str	r2, [r4, #0]
 8007dec:	701d      	strb	r5, [r3, #0]
 8007dee:	b2ed      	uxtb	r5, r5
 8007df0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007df2:	07da      	lsls	r2, r3, #31
 8007df4:	d405      	bmi.n	8007e02 <_putc_r+0x56>
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	059b      	lsls	r3, r3, #22
 8007dfa:	d402      	bmi.n	8007e02 <_putc_r+0x56>
 8007dfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dfe:	f7ff faf7 	bl	80073f0 <__retarget_lock_release_recursive>
 8007e02:	4628      	mov	r0, r5
 8007e04:	bd70      	pop	{r4, r5, r6, pc}
 8007e06:	4629      	mov	r1, r5
 8007e08:	4622      	mov	r2, r4
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f7ff f9e1 	bl	80071d2 <__swbuf_r>
 8007e10:	4605      	mov	r5, r0
 8007e12:	e7ed      	b.n	8007df0 <_putc_r+0x44>

08007e14 <_fstat_r>:
 8007e14:	b538      	push	{r3, r4, r5, lr}
 8007e16:	4d07      	ldr	r5, [pc, #28]	; (8007e34 <_fstat_r+0x20>)
 8007e18:	2300      	movs	r3, #0
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	4608      	mov	r0, r1
 8007e1e:	4611      	mov	r1, r2
 8007e20:	602b      	str	r3, [r5, #0]
 8007e22:	f7f9 fc50 	bl	80016c6 <_fstat>
 8007e26:	1c43      	adds	r3, r0, #1
 8007e28:	d102      	bne.n	8007e30 <_fstat_r+0x1c>
 8007e2a:	682b      	ldr	r3, [r5, #0]
 8007e2c:	b103      	cbz	r3, 8007e30 <_fstat_r+0x1c>
 8007e2e:	6023      	str	r3, [r4, #0]
 8007e30:	bd38      	pop	{r3, r4, r5, pc}
 8007e32:	bf00      	nop
 8007e34:	240002fc 	.word	0x240002fc

08007e38 <_isatty_r>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	4d06      	ldr	r5, [pc, #24]	; (8007e54 <_isatty_r+0x1c>)
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	4604      	mov	r4, r0
 8007e40:	4608      	mov	r0, r1
 8007e42:	602b      	str	r3, [r5, #0]
 8007e44:	f7f9 fc4f 	bl	80016e6 <_isatty>
 8007e48:	1c43      	adds	r3, r0, #1
 8007e4a:	d102      	bne.n	8007e52 <_isatty_r+0x1a>
 8007e4c:	682b      	ldr	r3, [r5, #0]
 8007e4e:	b103      	cbz	r3, 8007e52 <_isatty_r+0x1a>
 8007e50:	6023      	str	r3, [r4, #0]
 8007e52:	bd38      	pop	{r3, r4, r5, pc}
 8007e54:	240002fc 	.word	0x240002fc

08007e58 <_sbrk_r>:
 8007e58:	b538      	push	{r3, r4, r5, lr}
 8007e5a:	4d06      	ldr	r5, [pc, #24]	; (8007e74 <_sbrk_r+0x1c>)
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	4604      	mov	r4, r0
 8007e60:	4608      	mov	r0, r1
 8007e62:	602b      	str	r3, [r5, #0]
 8007e64:	f7f9 fc58 	bl	8001718 <_sbrk>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d102      	bne.n	8007e72 <_sbrk_r+0x1a>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	b103      	cbz	r3, 8007e72 <_sbrk_r+0x1a>
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	bd38      	pop	{r3, r4, r5, pc}
 8007e74:	240002fc 	.word	0x240002fc

08007e78 <_init>:
 8007e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7a:	bf00      	nop
 8007e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e7e:	bc08      	pop	{r3}
 8007e80:	469e      	mov	lr, r3
 8007e82:	4770      	bx	lr

08007e84 <_fini>:
 8007e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e86:	bf00      	nop
 8007e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8a:	bc08      	pop	{r3}
 8007e8c:	469e      	mov	lr, r3
 8007e8e:	4770      	bx	lr
