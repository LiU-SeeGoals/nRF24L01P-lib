
nrf-rx-h755-simple_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08007e78  08007e78  00017e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800805c  0800805c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800805c  0800805c  0001805c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008064  08008064  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008064  08008064  00018064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008068  08008068  00018068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  24000000  0800806c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2400006c  080080d8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400030c  080080d8  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013492  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026e9  00000000  00000000  0003356f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00035c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b20  00000000  00000000  00036ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003af75  00000000  00000000  00037608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e29  00000000  00000000  0007257d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00180b0e  00000000  00000000  000843a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004428  00000000  00000000  00204eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  002092dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007e60 	.word	0x08007e60

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08007e60 	.word	0x08007e60

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000680:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <SystemInit+0xfc>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a3c      	ldr	r2, [pc, #240]	; (8000778 <SystemInit+0xfc>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <SystemInit+0xfc>)
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	4a38      	ldr	r2, [pc, #224]	; (8000778 <SystemInit+0xfc>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800069c:	4b37      	ldr	r3, [pc, #220]	; (800077c <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	2b06      	cmp	r3, #6
 80006a6:	d807      	bhi.n	80006b8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a8:	4b34      	ldr	r3, [pc, #208]	; (800077c <SystemInit+0x100>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 030f 	bic.w	r3, r3, #15
 80006b0:	4a32      	ldr	r2, [pc, #200]	; (800077c <SystemInit+0x100>)
 80006b2:	f043 0307 	orr.w	r3, r3, #7
 80006b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <SystemInit+0x104>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a30      	ldr	r2, [pc, #192]	; (8000780 <SystemInit+0x104>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <SystemInit+0x104>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <SystemInit+0x104>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	492c      	ldr	r1, [pc, #176]	; (8000780 <SystemInit+0x104>)
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <SystemInit+0x108>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <SystemInit+0x100>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f023 030f 	bic.w	r3, r3, #15
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <SystemInit+0x100>)
 80006ec:	f043 0307 	orr.w	r3, r3, #7
 80006f0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <SystemInit+0x104>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <SystemInit+0x104>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <SystemInit+0x104>)
 8000706:	4a20      	ldr	r2, [pc, #128]	; (8000788 <SystemInit+0x10c>)
 8000708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <SystemInit+0x104>)
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <SystemInit+0x110>)
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <SystemInit+0x104>)
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <SystemInit+0x114>)
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <SystemInit+0x104>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <SystemInit+0x114>)
 8000720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <SystemInit+0x104>)
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <SystemInit+0x114>)
 800072c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <SystemInit+0x104>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <SystemInit+0x104>)
 800073a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <SystemInit+0x104>)
 8000742:	2200      	movs	r2, #0
 8000744:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <SystemInit+0x118>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <SystemInit+0x118>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <SystemInit+0x11c>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x120>)
 8000758:	4013      	ands	r3, r2
 800075a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075e:	d202      	bcs.n	8000766 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <SystemInit+0x124>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <SystemInit+0x128>)
 8000768:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800076c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	52002000 	.word	0x52002000
 8000780:	58024400 	.word	0x58024400
 8000784:	eaf6ed7f 	.word	0xeaf6ed7f
 8000788:	02020200 	.word	0x02020200
 800078c:	01ff0000 	.word	0x01ff0000
 8000790:	01010280 	.word	0x01010280
 8000794:	580000c0 	.word	0x580000c0
 8000798:	5c001000 	.word	0x5c001000
 800079c:	ffff0000 	.word	0xffff0000
 80007a0:	51008108 	.word	0x51008108
 80007a4:	52004000 	.word	0x52004000

080007a8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007b6:	2201      	movs	r2, #1
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <__io_putchar+0x20>)
 80007ba:	f005 fa6e 	bl	8005c9a <HAL_UART_Transmit>
  return ch;
 80007be:	687b      	ldr	r3, [r7, #4]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	24000110 	.word	0x24000110

080007cc <HAL_GPIO_EXTI_Callback>:
/*******************************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BTN_USER_Pin) {
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007dc:	d103      	bne.n	80007e6 <HAL_GPIO_EXTI_Callback+0x1a>
    NRF_PrintStatus();
 80007de:	f000 fd25 	bl	800122c <NRF_PrintStatus>
    NRF_PrintFIFOStatus();
 80007e2:	f000 fd91 	bl	8001308 <NRF_PrintFIFOStatus>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <runExample>:

void runExample() {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af02      	add	r7, sp, #8
  printf("Starting up simple receiver H7...\r\n\r\n");
 80007f6:	482a      	ldr	r0, [pc, #168]	; (80008a0 <runExample+0xb0>)
 80007f8:	f006 fc94 	bl	8007124 <puts>

  // Initialise the library and make the device enter standby-I mode
  NRF_Init(&hspi1, NRF_CSN_GPIO_Port, NRF_CSN_Pin, NRF_CE_GPIO_Port, NRF_CE_Pin);
 80007fc:	2340      	movs	r3, #64	; 0x40
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	4b28      	ldr	r3, [pc, #160]	; (80008a4 <runExample+0xb4>)
 8000802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000806:	4928      	ldr	r1, [pc, #160]	; (80008a8 <runExample+0xb8>)
 8000808:	4828      	ldr	r0, [pc, #160]	; (80008ac <runExample+0xbc>)
 800080a:	f000 fa9f 	bl	8000d4c <NRF_Init>

  // Resets all registers but keeps the device in standby-I mode
  NRF_Reset();
 800080e:	f000 fc77 	bl	8001100 <NRF_Reset>

  // Set the recieving adress.
  uint8_t address[5] = {1,2,3,4,5};
 8000812:	4a27      	ldr	r2, [pc, #156]	; (80008b0 <runExample+0xc0>)
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	e892 0003 	ldmia.w	r2, {r0, r1}
 800081c:	6018      	str	r0, [r3, #0]
 800081e:	3304      	adds	r3, #4
 8000820:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2205      	movs	r2, #5
 8000828:	4619      	mov	r1, r3
 800082a:	200a      	movs	r0, #10
 800082c:	f000 fb9a 	bl	8000f64 <NRF_WriteRegister>

  // Set the datawidth of the received data
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0, 10);
 8000830:	210a      	movs	r1, #10
 8000832:	2011      	movs	r0, #17
 8000834:	f000 fbac 	bl	8000f90 <NRF_WriteRegisterByte>

  // Enter RX mode
  NRF_EnterMode(NRF_MODE_RX);
 8000838:	2002      	movs	r0, #2
 800083a:	f000 fb45 	bl	8000ec8 <NRF_EnterMode>

  // wait for data
  uint8_t payload[10];
  uint8_t STATUS_REGISTER_RX_DR_BIT = 6;
 800083e:	2306      	movs	r3, #6
 8000840:	74fb      	strb	r3, [r7, #19]
  uint8_t status;
  printf("Waiting for data...\r\n");
 8000842:	481c      	ldr	r0, [pc, #112]	; (80008b4 <runExample+0xc4>)
 8000844:	f006 fc6e 	bl	8007124 <puts>
  for(;;) {
    status = NRF_ReadStatus();
 8000848:	f000 fc40 	bl	80010cc <NRF_ReadStatus>
 800084c:	4603      	mov	r3, r0
 800084e:	74bb      	strb	r3, [r7, #18]
    if (status & (1<<STATUS_REGISTER_RX_DR_BIT)) {
 8000850:	7cba      	ldrb	r2, [r7, #18]
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	fa42 f303 	asr.w	r3, r2, r3
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	2b00      	cmp	r3, #0
 800085e:	d0f3      	beq.n	8000848 <runExample+0x58>
      // We've received data
      NRF_ReadPayload(payload, 10);
 8000860:	463b      	mov	r3, r7
 8000862:	210a      	movs	r1, #10
 8000864:	4618      	mov	r0, r3
 8000866:	f000 fb6c 	bl	8000f42 <NRF_ReadPayload>
      printf("Payload: ");
 800086a:	4813      	ldr	r0, [pc, #76]	; (80008b8 <runExample+0xc8>)
 800086c:	f006 fbec 	bl	8007048 <iprintf>
      for (int i = 0; i < 10; i++) {
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	e009      	b.n	800088a <runExample+0x9a>
        printf("%c", payload[i]);
 8000876:	463a      	mov	r2, r7
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	4413      	add	r3, r2
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	4618      	mov	r0, r3
 8000880:	f006 fbf4 	bl	800706c <putchar>
      for (int i = 0; i < 10; i++) {
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	3301      	adds	r3, #1
 8000888:	617b      	str	r3, [r7, #20]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	2b09      	cmp	r3, #9
 800088e:	ddf2      	ble.n	8000876 <runExample+0x86>
      }
      printf("\r\n");
 8000890:	480a      	ldr	r0, [pc, #40]	; (80008bc <runExample+0xcc>)
 8000892:	f006 fc47 	bl	8007124 <puts>

      // reset RX_DR
      NRF_SetRegisterBit(NRF_REG_STATUS, 6);
 8000896:	2106      	movs	r1, #6
 8000898:	2007      	movs	r0, #7
 800089a:	f000 fb8f 	bl	8000fbc <NRF_SetRegisterBit>
    status = NRF_ReadStatus();
 800089e:	e7d3      	b.n	8000848 <runExample+0x58>
 80008a0:	08007e78 	.word	0x08007e78
 80008a4:	58020800 	.word	0x58020800
 80008a8:	58020400 	.word	0x58020400
 80008ac:	24000088 	.word	0x24000088
 80008b0:	08007ec8 	.word	0x08007ec8
 80008b4:	08007ea0 	.word	0x08007ea0
 80008b8:	08007eb8 	.word	0x08007eb8
 80008bc:	08007ec4 	.word	0x08007ec4

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ca:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008cc:	bf00      	nop
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <main+0x9c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d004      	beq.n	80008e4 <main+0x24>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	607a      	str	r2, [r7, #4]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	dcf4      	bgt.n	80008ce <main+0xe>
  if ( timeout < 0 )
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	da01      	bge.n	80008ee <main+0x2e>
  {
  Error_Handler();
 80008ea:	f000 f9e9 	bl	8000cc0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ee:	f000 ff67 	bl	80017c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f2:	f000 f835 	bl	8000960 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <main+0x9c>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	4a17      	ldr	r2, [pc, #92]	; (800095c <main+0x9c>)
 80008fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <main+0x9c>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000914:	2000      	movs	r0, #0
 8000916:	f001 fb21 	bl	8001f5c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800091a:	2100      	movs	r1, #0
 800091c:	2000      	movs	r0, #0
 800091e:	f001 fb37 	bl	8001f90 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000926:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000928:	bf00      	nop
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <main+0x9c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000932:	2b00      	cmp	r3, #0
 8000934:	d104      	bne.n	8000940 <main+0x80>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	1e5a      	subs	r2, r3, #1
 800093a:	607a      	str	r2, [r7, #4]
 800093c:	2b00      	cmp	r3, #0
 800093e:	dcf4      	bgt.n	800092a <main+0x6a>
if ( timeout < 0 )
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	da01      	bge.n	800094a <main+0x8a>
{
Error_Handler();
 8000946:	f000 f9bb 	bl	8000cc0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f000 f929 	bl	8000ba0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800094e:	f000 f885 	bl	8000a5c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000952:	f000 f8d9 	bl	8000b08 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  runExample();
 8000956:	f7ff ff4b 	bl	80007f0 <runExample>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800095a:	e7fe      	b.n	800095a <main+0x9a>
 800095c:	58024400 	.word	0x58024400

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	; 0x70
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096a:	224c      	movs	r2, #76	; 0x4c
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f006 fcb8 	bl	80072e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2220      	movs	r2, #32
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f006 fcb2 	bl	80072e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000980:	2004      	movs	r0, #4
 8000982:	f001 fb19 	bl	8001fb8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <SystemClock_Config+0xf4>)
 800098c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098e:	4a31      	ldr	r2, [pc, #196]	; (8000a54 <SystemClock_Config+0xf4>)
 8000990:	f023 0301 	bic.w	r3, r3, #1
 8000994:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000996:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <SystemClock_Config+0xf4>)
 8000998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <SystemClock_Config+0xf8>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009a8:	4a2b      	ldr	r2, [pc, #172]	; (8000a58 <SystemClock_Config+0xf8>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <SystemClock_Config+0xf8>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009bc:	bf00      	nop
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <SystemClock_Config+0xf8>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009ca:	d1f8      	bne.n	80009be <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009cc:	2302      	movs	r3, #2
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d4:	2340      	movs	r3, #64	; 0x40
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d8:	2302      	movs	r3, #2
 80009da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009dc:	2300      	movs	r3, #0
 80009de:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e0:	2304      	movs	r3, #4
 80009e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80009e4:	2309      	movs	r3, #9
 80009e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009f4:	230c      	movs	r3, #12
 80009f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80009f8:	2302      	movs	r3, #2
 80009fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80009fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a00:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 fb30 	bl	800206c <HAL_RCC_OscConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a12:	f000 f955 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a16:	233f      	movs	r3, #63	; 0x3f
 8000a18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2101      	movs	r1, #1
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 ff70 	bl	8002920 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a46:	f000 f93b 	bl	8000cc0 <Error_Handler>
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	3770      	adds	r7, #112	; 0x70
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	58000400 	.word	0x58000400
 8000a58:	58024800 	.word	0x58024800

08000a5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000a62:	4a28      	ldr	r2, [pc, #160]	; (8000b04 <MX_SPI1_Init+0xa8>)
 8000a64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000a68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a6e:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000a76:	2207      	movs	r2, #7
 8000a78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a80:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000a88:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000a90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aa2:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000ab0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ac8:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <MX_SPI1_Init+0xa4>)
 8000aee:	f004 f8cf 	bl	8004c90 <HAL_SPI_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000af8:	f000 f8e2 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	24000088 	.word	0x24000088
 8000b04:	40013000 	.word	0x40013000

08000b08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b0e:	4a23      	ldr	r2, [pc, #140]	; (8000b9c <MX_USART3_UART_Init+0x94>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b50:	4811      	ldr	r0, [pc, #68]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b52:	f005 f852 	bl	8005bfa <HAL_UART_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b5c:	f000 f8b0 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b60:	2100      	movs	r1, #0
 8000b62:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b64:	f006 f8e3 	bl	8006d2e <HAL_UARTEx_SetTxFifoThreshold>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b6e:	f000 f8a7 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b72:	2100      	movs	r1, #0
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b76:	f006 f918 	bl	8006daa <HAL_UARTEx_SetRxFifoThreshold>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b80:	f000 f89e 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_USART3_UART_Init+0x90>)
 8000b86:	f006 f899 	bl	8006cbc <HAL_UARTEx_DisableFifoMode>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b90:	f000 f896 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	24000110 	.word	0x24000110
 8000b9c:	40004800 	.word	0x40004800

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b3f      	ldr	r3, [pc, #252]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a3d      	ldr	r2, [pc, #244]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b3b      	ldr	r3, [pc, #236]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	4a36      	ldr	r2, [pc, #216]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be4:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b30      	ldr	r3, [pc, #192]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a2e      	ldr	r2, [pc, #184]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a27      	ldr	r2, [pc, #156]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <MX_GPIO_Init+0x114>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2140      	movs	r1, #64	; 0x40
 8000c32:	4821      	ldr	r0, [pc, #132]	; (8000cb8 <MX_GPIO_Init+0x118>)
 8000c34:	f001 f95e 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3e:	481f      	ldr	r0, [pc, #124]	; (8000cbc <MX_GPIO_Init+0x11c>)
 8000c40:	f001 f958 	bl	8001ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <MX_GPIO_Init+0x118>)
 8000c5c:	f000 ff82 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000c60:	2340      	movs	r3, #64	; 0x40
 8000c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c64:	2301      	movs	r3, #1
 8000c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <MX_GPIO_Init+0x118>)
 8000c78:	f000 ff74 	bl	8001b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 8000c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4809      	ldr	r0, [pc, #36]	; (8000cbc <MX_GPIO_Init+0x11c>)
 8000c96:	f000 ff65 	bl	8001b64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2028      	movs	r0, #40	; 0x28
 8000ca0:	f000 ff2b 	bl	8001afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ca4:	2028      	movs	r0, #40	; 0x28
 8000ca6:	f000 ff42 	bl	8001b2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	58020800 	.word	0x58020800
 8000cbc:	58020400 	.word	0x58020400

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <Error_Handler+0x8>
	...

08000ccc <csn_set>:

/*
 * Private functions
 */

void csn_set() {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <csn_set+0x18>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <csn_set+0x1c>)
 8000cd6:	8811      	ldrh	r1, [r2, #0]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 f90a 	bl	8001ef4 <HAL_GPIO_WritePin>
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	240001a8 	.word	0x240001a8
 8000ce8:	240001ac 	.word	0x240001ac

08000cec <csn_reset>:

void csn_reset() {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <csn_reset+0x18>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <csn_reset+0x1c>)
 8000cf6:	8811      	ldrh	r1, [r2, #0]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 f8fa 	bl	8001ef4 <HAL_GPIO_WritePin>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	240001a8 	.word	0x240001a8
 8000d08:	240001ac 	.word	0x240001ac

08000d0c <ce_set>:

void ce_set() {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <ce_set+0x18>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <ce_set+0x1c>)
 8000d16:	8811      	ldrh	r1, [r2, #0]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f8ea 	bl	8001ef4 <HAL_GPIO_WritePin>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	240001b0 	.word	0x240001b0
 8000d28:	240001b4 	.word	0x240001b4

08000d2c <ce_reset>:

void ce_reset() {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <ce_reset+0x18>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <ce_reset+0x1c>)
 8000d36:	8811      	ldrh	r1, [r2, #0]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 f8da 	bl	8001ef4 <HAL_GPIO_WritePin>
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	240001b0 	.word	0x240001b0
 8000d48:	240001b4 	.word	0x240001b4

08000d4c <NRF_Init>:
 *
 * Main functions
 *
 */

NRF_Status NRF_Init(SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCSN, uint16_t PinCSN, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	80fb      	strh	r3, [r7, #6]
  HSPI = handle;
 8000d5c:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <NRF_Init+0x48>)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	6013      	str	r3, [r2, #0]
  NRF_CSN_Port = PortCSN;
 8000d62:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <NRF_Init+0x4c>)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	6013      	str	r3, [r2, #0]
  NRF_CSN_Pin = PinCSN;
 8000d68:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <NRF_Init+0x50>)
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	8013      	strh	r3, [r2, #0]
  NRF_CE_Port = PortCE;
 8000d6e:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <NRF_Init+0x54>)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	6013      	str	r3, [r2, #0]
  NRF_CE_Pin = PinCE;
 8000d74:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <NRF_Init+0x58>)
 8000d76:	8b3b      	ldrh	r3, [r7, #24]
 8000d78:	8013      	strh	r3, [r2, #0]

  // Make sure CSN i pulled high
  csn_set();
 8000d7a:	f7ff ffa7 	bl	8000ccc <csn_set>

  // Takes ~100ms from power on to start up
  HAL_Delay(100);
 8000d7e:	2064      	movs	r0, #100	; 0x64
 8000d80:	f000 fdb0 	bl	80018e4 <HAL_Delay>

  NRF_EnterMode(NRF_MODE_STANDBY1);
 8000d84:	2001      	movs	r0, #1
 8000d86:	f000 f89f 	bl	8000ec8 <NRF_EnterMode>

  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	240001a4 	.word	0x240001a4
 8000d98:	240001a8 	.word	0x240001a8
 8000d9c:	240001ac 	.word	0x240001ac
 8000da0:	240001b0 	.word	0x240001b0
 8000da4:	240001b4 	.word	0x240001b4

08000da8 <NRF_SendCommand>:

NRF_Status NRF_SendCommand(uint8_t cmd) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000db6:	f7ff ff99 	bl	8000cec <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <NRF_SendCommand+0x44>)
 8000dbc:	6818      	ldr	r0, [r3, #0]
 8000dbe:	f107 020e 	add.w	r2, r7, #14
 8000dc2:	1df9      	adds	r1, r7, #7
 8000dc4:	230a      	movs	r3, #10
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f004 fc11 	bl	80055f0 <HAL_SPI_TransmitReceive>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <NRF_SendCommand+0x34>
    return ret;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	e002      	b.n	8000de2 <NRF_SendCommand+0x3a>
  }
  csn_set();
 8000ddc:	f7ff ff76 	bl	8000ccc <csn_set>

  return ret;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	240001a4 	.word	0x240001a4

08000df0 <NRF_SendWriteCommand>:

NRF_Status NRF_SendWriteCommand(uint8_t cmd, uint8_t *write, uint8_t length) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	4613      	mov	r3, r2
 8000dfe:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000e04:	f7ff ff72 	bl	8000cec <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <NRF_SendWriteCommand+0x68>)
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	f107 020e 	add.w	r2, r7, #14
 8000e10:	1df9      	adds	r1, r7, #7
 8000e12:	230a      	movs	r3, #10
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2301      	movs	r3, #1
 8000e18:	f004 fbea 	bl	80055f0 <HAL_SPI_TransmitReceive>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <NRF_SendWriteCommand+0x3a>
    return ret;
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	e011      	b.n	8000e4e <NRF_SendWriteCommand+0x5e>
  }
  ret = HAL_SPI_Transmit(HSPI, write, length, NRF_SPI_TIMEOUT);
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <NRF_SendWriteCommand+0x68>)
 8000e2c:	6818      	ldr	r0, [r3, #0]
 8000e2e:	79bb      	ldrb	r3, [r7, #6]
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	230a      	movs	r3, #10
 8000e34:	6839      	ldr	r1, [r7, #0]
 8000e36:	f004 f84f 	bl	8004ed8 <HAL_SPI_Transmit>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <NRF_SendWriteCommand+0x58>
    return ret;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	e002      	b.n	8000e4e <NRF_SendWriteCommand+0x5e>
  }
  csn_set();
 8000e48:	f7ff ff40 	bl	8000ccc <csn_set>

  return ret;
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	240001a4 	.word	0x240001a4

08000e5c <NRF_SendReadCommand>:

NRF_Status NRF_SendReadCommand(uint8_t cmd, uint8_t *read, uint8_t length) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000e70:	f7ff ff3c 	bl	8000cec <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <NRF_SendReadCommand+0x68>)
 8000e76:	6818      	ldr	r0, [r3, #0]
 8000e78:	f107 020e 	add.w	r2, r7, #14
 8000e7c:	1df9      	adds	r1, r7, #7
 8000e7e:	230a      	movs	r3, #10
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2301      	movs	r3, #1
 8000e84:	f004 fbb4 	bl	80055f0 <HAL_SPI_TransmitReceive>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK) {
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <NRF_SendReadCommand+0x3a>
    return ret;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	e011      	b.n	8000eba <NRF_SendReadCommand+0x5e>
  }
  ret = HAL_SPI_Receive(HSPI, read, length, NRF_SPI_TIMEOUT);
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <NRF_SendReadCommand+0x68>)
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	79bb      	ldrb	r3, [r7, #6]
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	6839      	ldr	r1, [r7, #0]
 8000ea2:	f004 fa15 	bl	80052d0 <HAL_SPI_Receive>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK) {
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <NRF_SendReadCommand+0x58>
    return ret;
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	e002      	b.n	8000eba <NRF_SendReadCommand+0x5e>
  }
  csn_set();
 8000eb4:	f7ff ff0a 	bl	8000ccc <csn_set>

  return ret;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	240001a4 	.word	0x240001a4

08000ec8 <NRF_EnterMode>:
 *
 * Device control
 *
 */

NRF_Status NRF_EnterMode(uint8_t mode) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = HAL_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73fb      	strb	r3, [r7, #15]

  switch(mode) {
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	dc2a      	bgt.n	8000f32 <NRF_EnterMode+0x6a>
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	da15      	bge.n	8000f0c <NRF_EnterMode+0x44>
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <NRF_EnterMode+0x22>
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d006      	beq.n	8000ef6 <NRF_EnterMode+0x2e>
 8000ee8:	e023      	b.n	8000f32 <NRF_EnterMode+0x6a>
    case NRF_MODE_POWERDOWN:
      // Can come from any mode
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000eea:	2101      	movs	r1, #1
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 f896 	bl	800101e <NRF_ResetRegisterBit>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	73fb      	strb	r3, [r7, #15]
    case NRF_MODE_STANDBY1:
      // We expect to come from powerdown
      ce_reset();
 8000ef6:	f7ff ff19 	bl	8000d2c <ce_reset>
      ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000efa:	2101      	movs	r1, #1
 8000efc:	2000      	movs	r0, #0
 8000efe:	f000 f85d 	bl	8000fbc <NRF_SetRegisterBit>
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(2);
 8000f06:	2002      	movs	r0, #2
 8000f08:	f000 fcec 	bl	80018e4 <HAL_Delay>
    case NRF_MODE_RX:
    case NRF_MODE_TX:
      // We expect to come from standby-I
      if (mode == NRF_MODE_TX) {
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	2b03      	cmp	r3, #3
 8000f10:	d106      	bne.n	8000f20 <NRF_EnterMode+0x58>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000f12:	2100      	movs	r1, #0
 8000f14:	2000      	movs	r0, #0
 8000f16:	f000 f882 	bl	800101e <NRF_ResetRegisterBit>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	73fb      	strb	r3, [r7, #15]
 8000f1e:	e005      	b.n	8000f2c <NRF_EnterMode+0x64>
      } else {
        ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000f20:	2100      	movs	r1, #0
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 f84a 	bl	8000fbc <NRF_SetRegisterBit>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
      }

      // Enter mode
      ce_set();
 8000f2c:	f7ff feee 	bl	8000d0c <ce_set>
      break;
 8000f30:	e002      	b.n	8000f38 <NRF_EnterMode+0x70>
    default:
      ret = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	73fb      	strb	r3, [r7, #15]
      break;
 8000f36:	bf00      	nop
  }

  return ret;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <NRF_ReadPayload>:

NRF_Status NRF_WritePayload(uint8_t *payload, uint8_t length) {
  return NRF_SendWriteCommand(NRF_CMD_W_TX_PAYLOAD, payload, length);
}

NRF_Status NRF_ReadPayload(uint8_t *read, uint8_t length) {
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	70fb      	strb	r3, [r7, #3]
  return NRF_SendReadCommand(NRF_CMD_R_RX_PAYLOAD, read, length);
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	461a      	mov	r2, r3
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	2061      	movs	r0, #97	; 0x61
 8000f56:	f7ff ff81 	bl	8000e5c <NRF_SendReadCommand>
 8000f5a:	4603      	mov	r3, r0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <NRF_WriteRegister>:
 * Register helpers
 *
 */

/* Writing */
NRF_Status NRF_WriteRegister(uint8_t reg, uint8_t *write, uint8_t length) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	4613      	mov	r3, r2
 8000f72:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_REGISTER | reg, write, length);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f043 0320 	orr.w	r3, r3, #32
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	79ba      	ldrb	r2, [r7, #6]
 8000f7e:	6839      	ldr	r1, [r7, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff35 	bl	8000df0 <NRF_SendWriteCommand>
 8000f86:	4603      	mov	r3, r0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <NRF_WriteRegisterByte>:

NRF_Status NRF_WriteRegisterByte(uint8_t reg, uint8_t byte) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	460a      	mov	r2, r1
 8000f9a:	71fb      	strb	r3, [r7, #7]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	71bb      	strb	r3, [r7, #6]
  uint8_t write = byte;
 8000fa0:	79bb      	ldrb	r3, [r7, #6]
 8000fa2:	73fb      	strb	r3, [r7, #15]
  return NRF_WriteRegister(reg, &write, 1);
 8000fa4:	f107 010f 	add.w	r1, r7, #15
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2201      	movs	r2, #1
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ffd9 	bl	8000f64 <NRF_WriteRegister>
 8000fb2:	4603      	mov	r3, r0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <NRF_SetRegisterBit>:

NRF_Status NRF_SetRegisterBit(uint8_t reg, uint8_t bit) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 8000fd4:	f107 010e 	add.w	r1, r7, #14
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f851 	bl	8001084 <NRF_ReadRegister>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <NRF_SetRegisterBit+0x34>
    return ret;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	e012      	b.n	8001016 <NRF_SetRegisterBit+0x5a>
  }
  cfg = cfg | (1 << bit);
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	b25a      	sxtb	r2, r3
 8000ffa:	7bbb      	ldrb	r3, [r7, #14]
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b25b      	sxtb	r3, r3
 8001002:	b2db      	uxtb	r3, r3
 8001004:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 8001006:	f107 010e 	add.w	r1, r7, #14
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2201      	movs	r2, #1
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ffa8 	bl	8000f64 <NRF_WriteRegister>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <NRF_ResetRegisterBit>:

NRF_Status NRF_ResetRegisterBit(uint8_t reg, uint8_t bit) {
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	460a      	mov	r2, r1
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	4613      	mov	r3, r2
 800102c:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8001032:	2300      	movs	r3, #0
 8001034:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 8001036:	f107 010e 	add.w	r1, r7, #14
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2201      	movs	r2, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f820 	bl	8001084 <NRF_ReadRegister>
 8001044:	4603      	mov	r3, r0
 8001046:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <NRF_ResetRegisterBit+0x34>
    return ret;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	e014      	b.n	800107c <NRF_ResetRegisterBit+0x5e>
  }
  cfg = cfg & ~(1 << bit);
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	2201      	movs	r2, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	b25b      	sxtb	r3, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	b25a      	sxtb	r2, r3
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	b25b      	sxtb	r3, r3
 8001064:	4013      	ands	r3, r2
 8001066:	b25b      	sxtb	r3, r3
 8001068:	b2db      	uxtb	r3, r3
 800106a:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 800106c:	f107 010e 	add.w	r1, r7, #14
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2201      	movs	r2, #1
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff75 	bl	8000f64 <NRF_WriteRegister>
 800107a:	4603      	mov	r3, r0
}
 800107c:	4618      	mov	r0, r3
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <NRF_ReadRegister>:


/* Reading */
NRF_Status NRF_ReadRegister(uint8_t reg, uint8_t *read, uint8_t length) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]
  return NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, read, length);
 8001094:	79ba      	ldrb	r2, [r7, #6]
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	6839      	ldr	r1, [r7, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fede 	bl	8000e5c <NRF_SendReadCommand>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <NRF_ReadRegisterByte>:

uint8_t NRF_ReadRegisterByte(uint8_t reg) {
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b084      	sub	sp, #16
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
  uint8_t read;
  NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, &read, 1);
 80010b4:	f107 010f 	add.w	r1, r7, #15
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2201      	movs	r2, #1
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fecd 	bl	8000e5c <NRF_SendReadCommand>
  return read;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <NRF_ReadStatus>:

uint8_t NRF_ReadStatus() {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af02      	add	r7, sp, #8
  uint8_t status;
  uint8_t cmd = NRF_CMD_NOP;
 80010d2:	23ff      	movs	r3, #255	; 0xff
 80010d4:	71bb      	strb	r3, [r7, #6]

  csn_reset();
 80010d6:	f7ff fe09 	bl	8000cec <csn_reset>
  HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <NRF_ReadStatus+0x30>)
 80010dc:	6818      	ldr	r0, [r3, #0]
 80010de:	1dfa      	adds	r2, r7, #7
 80010e0:	1db9      	adds	r1, r7, #6
 80010e2:	230a      	movs	r3, #10
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	f004 fa82 	bl	80055f0 <HAL_SPI_TransmitReceive>
  csn_set();
 80010ec:	f7ff fdee 	bl	8000ccc <csn_set>

  return status;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	240001a4 	.word	0x240001a4

08001100 <NRF_Reset>:
  }

  return ret;
}

void NRF_Reset() {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
  // Reset state (goto standby-I)
  csn_set();
 8001106:	f7ff fde1 	bl	8000ccc <csn_set>
  ce_reset();
 800110a:	f7ff fe0f 	bl	8000d2c <ce_reset>

  // Flush FIFOs
  NRF_EnterMode(NRF_MODE_TX);
 800110e:	2003      	movs	r0, #3
 8001110:	f7ff feda 	bl	8000ec8 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_TX);
 8001114:	20e1      	movs	r0, #225	; 0xe1
 8001116:	f7ff fe47 	bl	8000da8 <NRF_SendCommand>
  ce_reset();
 800111a:	f7ff fe07 	bl	8000d2c <ce_reset>
  NRF_EnterMode(NRF_MODE_RX);
 800111e:	2002      	movs	r0, #2
 8001120:	f7ff fed2 	bl	8000ec8 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_RX);
 8001124:	20e2      	movs	r0, #226	; 0xe2
 8001126:	f7ff fe3f 	bl	8000da8 <NRF_SendCommand>
  ce_reset();
 800112a:	f7ff fdff 	bl	8000d2c <ce_reset>

  // Flush register
  NRF_WriteRegisterByte(NRF_REG_CONFIG,       0x0A);
 800112e:	210a      	movs	r1, #10
 8001130:	2000      	movs	r0, #0
 8001132:	f7ff ff2d 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_AA,        0x3f);
 8001136:	213f      	movs	r1, #63	; 0x3f
 8001138:	2001      	movs	r0, #1
 800113a:	f7ff ff29 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_RXADDR,    0x03);
 800113e:	2103      	movs	r1, #3
 8001140:	2002      	movs	r0, #2
 8001142:	f7ff ff25 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_AW,     0x03);
 8001146:	2103      	movs	r1, #3
 8001148:	2003      	movs	r0, #3
 800114a:	f7ff ff21 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_RETR,   0x03);
 800114e:	2103      	movs	r1, #3
 8001150:	2004      	movs	r0, #4
 8001152:	f7ff ff1d 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_CH,        0x02);
 8001156:	2102      	movs	r1, #2
 8001158:	2005      	movs	r0, #5
 800115a:	f7ff ff19 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_SETUP,     0x0e);
 800115e:	210e      	movs	r1, #14
 8001160:	2006      	movs	r0, #6
 8001162:	f7ff ff15 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_STATUS,       0x70); // clear flags
 8001166:	2170      	movs	r1, #112	; 0x70
 8001168:	2007      	movs	r0, #7
 800116a:	f7ff ff11 	bl	8000f90 <NRF_WriteRegisterByte>

  uint8_t address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800116e:	4a2d      	ldr	r2, [pc, #180]	; (8001224 <NRF_Reset+0x124>)
 8001170:	f107 0308 	add.w	r3, r7, #8
 8001174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001178:	6018      	str	r0, [r3, #0]
 800117a:	3304      	adds	r3, #4
 800117c:	7019      	strb	r1, [r3, #0]
  uint8_t address2[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800117e:	4a2a      	ldr	r2, [pc, #168]	; (8001228 <NRF_Reset+0x128>)
 8001180:	463b      	mov	r3, r7
 8001182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001186:	6018      	str	r0, [r3, #0]
 8001188:	3304      	adds	r3, #4
 800118a:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 800118c:	f107 0308 	add.w	r3, r7, #8
 8001190:	2205      	movs	r2, #5
 8001192:	4619      	mov	r1, r3
 8001194:	200a      	movs	r0, #10
 8001196:	f7ff fee5 	bl	8000f64 <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P1, address2, 5);
 800119a:	463b      	mov	r3, r7
 800119c:	2205      	movs	r2, #5
 800119e:	4619      	mov	r1, r3
 80011a0:	200b      	movs	r0, #11
 80011a2:	f7ff fedf 	bl	8000f64 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P2,   0xC3);
 80011a6:	21c3      	movs	r1, #195	; 0xc3
 80011a8:	200c      	movs	r0, #12
 80011aa:	f7ff fef1 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P3,   0xC4);
 80011ae:	21c4      	movs	r1, #196	; 0xc4
 80011b0:	200d      	movs	r0, #13
 80011b2:	f7ff feed 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P4,   0xC5);
 80011b6:	21c5      	movs	r1, #197	; 0xc5
 80011b8:	200e      	movs	r0, #14
 80011ba:	f7ff fee9 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P5,   0xC6);
 80011be:	21c6      	movs	r1, #198	; 0xc6
 80011c0:	200f      	movs	r0, #15
 80011c2:	f7ff fee5 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	2205      	movs	r2, #5
 80011cc:	4619      	mov	r1, r3
 80011ce:	2010      	movs	r0, #16
 80011d0:	f7ff fec8 	bl	8000f64 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,     0x00);
 80011d4:	2100      	movs	r1, #0
 80011d6:	2011      	movs	r0, #17
 80011d8:	f7ff feda 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P1,     0x00);
 80011dc:	2100      	movs	r1, #0
 80011de:	2012      	movs	r0, #18
 80011e0:	f7ff fed6 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P2,     0x00);
 80011e4:	2100      	movs	r1, #0
 80011e6:	2013      	movs	r0, #19
 80011e8:	f7ff fed2 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P3,     0x00);
 80011ec:	2100      	movs	r1, #0
 80011ee:	2014      	movs	r0, #20
 80011f0:	f7ff fece 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P4,     0x00);
 80011f4:	2100      	movs	r1, #0
 80011f6:	2015      	movs	r0, #21
 80011f8:	f7ff feca 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P5,     0x00);
 80011fc:	2100      	movs	r1, #0
 80011fe:	2016      	movs	r0, #22
 8001200:	f7ff fec6 	bl	8000f90 <NRF_WriteRegisterByte>

  NRF_WriteRegisterByte(NRF_REG_FIFO_STATUS,  0x00);
 8001204:	2100      	movs	r1, #0
 8001206:	2017      	movs	r0, #23
 8001208:	f7ff fec2 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_DYNPD,        0x00);
 800120c:	2100      	movs	r1, #0
 800120e:	201c      	movs	r0, #28
 8001210:	f7ff febe 	bl	8000f90 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_FEATURE,      0x00);
 8001214:	2100      	movs	r1, #0
 8001216:	201d      	movs	r0, #29
 8001218:	f7ff feba 	bl	8000f90 <NRF_WriteRegisterByte>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	08007ed8 	.word	0x08007ed8
 8001228:	08007ee0 	.word	0x08007ee0

0800122c <NRF_PrintStatus>:

void NRF_PrintStatus() {
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  uint8_t status = NRF_ReadStatus();
 8001232:	f7ff ff4b 	bl	80010cc <NRF_ReadStatus>
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]

  printf("Status register: %02X\r\n", status);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4619      	mov	r1, r3
 800123e:	4825      	ldr	r0, [pc, #148]	; (80012d4 <NRF_PrintStatus+0xa8>)
 8001240:	f005 ff02 	bl	8007048 <iprintf>
  printf("CE: %d\r\n", HAL_GPIO_ReadPin(NRF_CE_Port, NRF_CE_Pin));
 8001244:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <NRF_PrintStatus+0xac>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a24      	ldr	r2, [pc, #144]	; (80012dc <NRF_PrintStatus+0xb0>)
 800124a:	8812      	ldrh	r2, [r2, #0]
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fe38 	bl	8001ec4 <HAL_GPIO_ReadPin>
 8001254:	4603      	mov	r3, r0
 8001256:	4619      	mov	r1, r3
 8001258:	4821      	ldr	r0, [pc, #132]	; (80012e0 <NRF_PrintStatus+0xb4>)
 800125a:	f005 fef5 	bl	8007048 <iprintf>
  printf("CSN: %d\r\n", HAL_GPIO_ReadPin(NRF_CSN_Port, NRF_CSN_Pin));
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <NRF_PrintStatus+0xb8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <NRF_PrintStatus+0xbc>)
 8001264:	8812      	ldrh	r2, [r2, #0]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fe2b 	bl	8001ec4 <HAL_GPIO_ReadPin>
 800126e:	4603      	mov	r3, r0
 8001270:	4619      	mov	r1, r3
 8001272:	481e      	ldr	r0, [pc, #120]	; (80012ec <NRF_PrintStatus+0xc0>)
 8001274:	f005 fee8 	bl	8007048 <iprintf>
  printf("TX_FULL:  %1X\r\n", status & (1<<STATUS_BIT_TX_FULL));
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	4619      	mov	r1, r3
 8001280:	481b      	ldr	r0, [pc, #108]	; (80012f0 <NRF_PrintStatus+0xc4>)
 8001282:	f005 fee1 	bl	8007048 <iprintf>
  printf("RX_P_NO:  %1X\r\n", (status & (0x3<<STATUS_BIT_RX_P_NO)) >> 1);
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	105b      	asrs	r3, r3, #1
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	4619      	mov	r1, r3
 8001290:	4818      	ldr	r0, [pc, #96]	; (80012f4 <NRF_PrintStatus+0xc8>)
 8001292:	f005 fed9 	bl	8007048 <iprintf>
  printf("MAX_RT:   %1X\r\n", (status & (1<<STATUS_BIT_MAX_RT))    >> 4);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	111b      	asrs	r3, r3, #4
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	4619      	mov	r1, r3
 80012a0:	4815      	ldr	r0, [pc, #84]	; (80012f8 <NRF_PrintStatus+0xcc>)
 80012a2:	f005 fed1 	bl	8007048 <iprintf>
  printf("TX_DS:    %1X\r\n", (status & (1<<STATUS_BIT_TX_DS))     >> 5);
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	115b      	asrs	r3, r3, #5
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	4619      	mov	r1, r3
 80012b0:	4812      	ldr	r0, [pc, #72]	; (80012fc <NRF_PrintStatus+0xd0>)
 80012b2:	f005 fec9 	bl	8007048 <iprintf>
  printf("RX_DR:    %1X\r\n", (status & (1<<STATUS_BIT_RX_DR))     >> 6);
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	119b      	asrs	r3, r3, #6
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	4619      	mov	r1, r3
 80012c0:	480f      	ldr	r0, [pc, #60]	; (8001300 <NRF_PrintStatus+0xd4>)
 80012c2:	f005 fec1 	bl	8007048 <iprintf>
  printf("\r\n");
 80012c6:	480f      	ldr	r0, [pc, #60]	; (8001304 <NRF_PrintStatus+0xd8>)
 80012c8:	f005 ff2c 	bl	8007124 <puts>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	08007ee8 	.word	0x08007ee8
 80012d8:	240001b0 	.word	0x240001b0
 80012dc:	240001b4 	.word	0x240001b4
 80012e0:	08007f00 	.word	0x08007f00
 80012e4:	240001a8 	.word	0x240001a8
 80012e8:	240001ac 	.word	0x240001ac
 80012ec:	08007f0c 	.word	0x08007f0c
 80012f0:	08007f18 	.word	0x08007f18
 80012f4:	08007f28 	.word	0x08007f28
 80012f8:	08007f38 	.word	0x08007f38
 80012fc:	08007f48 	.word	0x08007f48
 8001300:	08007f58 	.word	0x08007f58
 8001304:	08007f68 	.word	0x08007f68

08001308 <NRF_PrintFIFOStatus>:

void NRF_PrintFIFOStatus() {
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
  uint8_t reg = NRF_ReadRegisterByte(NRF_REG_FIFO_STATUS);
 800130e:	2017      	movs	r0, #23
 8001310:	f7ff fecb 	bl	80010aa <NRF_ReadRegisterByte>
 8001314:	4603      	mov	r3, r0
 8001316:	71fb      	strb	r3, [r7, #7]

  printf("FIFO status register: %02X\r\n", reg);
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4619      	mov	r1, r3
 800131c:	4818      	ldr	r0, [pc, #96]	; (8001380 <NRF_PrintFIFOStatus+0x78>)
 800131e:	f005 fe93 	bl	8007048 <iprintf>
  printf("RX_EMPTY:   %2X\r\n", reg &  (1<<FIFO_STATUS_BIT_RX_EMPTY));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	4619      	mov	r1, r3
 800132a:	4816      	ldr	r0, [pc, #88]	; (8001384 <NRF_PrintFIFOStatus+0x7c>)
 800132c:	f005 fe8c 	bl	8007048 <iprintf>
  printf("RX_FULL:    %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_RX_FULL))     >> 1);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	105b      	asrs	r3, r3, #1
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	4619      	mov	r1, r3
 800133a:	4813      	ldr	r0, [pc, #76]	; (8001388 <NRF_PrintFIFOStatus+0x80>)
 800133c:	f005 fe84 	bl	8007048 <iprintf>
  printf("TX_EMPTY:   %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_EMPTY))    >> 4);
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	111b      	asrs	r3, r3, #4
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	4619      	mov	r1, r3
 800134a:	4810      	ldr	r0, [pc, #64]	; (800138c <NRF_PrintFIFOStatus+0x84>)
 800134c:	f005 fe7c 	bl	8007048 <iprintf>
  printf("TX_FULL:    %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_FULL))     >> 5);
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	115b      	asrs	r3, r3, #5
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	4619      	mov	r1, r3
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <NRF_PrintFIFOStatus+0x88>)
 800135c:	f005 fe74 	bl	8007048 <iprintf>
  printf("TX_REUSE:   %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_REUSE))    >> 6);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	119b      	asrs	r3, r3, #6
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	4619      	mov	r1, r3
 800136a:	480a      	ldr	r0, [pc, #40]	; (8001394 <NRF_PrintFIFOStatus+0x8c>)
 800136c:	f005 fe6c 	bl	8007048 <iprintf>
  printf("\r\n");
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <NRF_PrintFIFOStatus+0x90>)
 8001372:	f005 fed7 	bl	8007124 <puts>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	08007f6c 	.word	0x08007f6c
 8001384:	08007f8c 	.word	0x08007f8c
 8001388:	08007fa0 	.word	0x08007fa0
 800138c:	08007fb4 	.word	0x08007fb4
 8001390:	08007fc8 	.word	0x08007fc8
 8001394:	08007fdc 	.word	0x08007fdc
 8001398:	08007f68 	.word	0x08007f68

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <HAL_MspInit+0x30>)
 80013a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013a8:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_MspInit+0x30>)
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_MspInit+0x30>)
 80013b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	58024400 	.word	0x58024400

080013d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0bc      	sub	sp, #240	; 0xf0
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e8:	f107 0318 	add.w	r3, r7, #24
 80013ec:	22c0      	movs	r2, #192	; 0xc0
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f005 ff77 	bl	80072e4 <memset>
  if(hspi->Instance==SPI1)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a38      	ldr	r2, [pc, #224]	; (80014dc <HAL_SPI_MspInit+0x10c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d168      	bne.n	80014d2 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001400:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800140c:	2300      	movs	r3, #0
 800140e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	4618      	mov	r0, r3
 8001416:	f001 fe0f 	bl	8003038 <HAL_RCCEx_PeriphCLKConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001420:	f7ff fc4e 	bl	8000cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001424:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <HAL_SPI_MspInit+0x110>)
 8001426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800142a:	4a2d      	ldr	r2, [pc, #180]	; (80014e0 <HAL_SPI_MspInit+0x110>)
 800142c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001430:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_SPI_MspInit+0x110>)
 8001436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800143a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_SPI_MspInit+0x110>)
 8001444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001448:	4a25      	ldr	r2, [pc, #148]	; (80014e0 <HAL_SPI_MspInit+0x110>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_SPI_MspInit+0x110>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <HAL_SPI_MspInit+0x110>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	4a1e      	ldr	r2, [pc, #120]	; (80014e0 <HAL_SPI_MspInit+0x110>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_SPI_MspInit+0x110>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MISO_Pin;
 800147e:	2360      	movs	r3, #96	; 0x60
 8001480:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001496:	2305      	movs	r3, #5
 8001498:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014a0:	4619      	mov	r1, r3
 80014a2:	4810      	ldr	r0, [pc, #64]	; (80014e4 <HAL_SPI_MspInit+0x114>)
 80014a4:	f000 fb5e 	bl	8001b64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MOSI_Pin;
 80014a8:	2320      	movs	r3, #32
 80014aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c0:	2305      	movs	r3, #5
 80014c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(NRF_MOSI_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014ca:	4619      	mov	r1, r3
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <HAL_SPI_MspInit+0x118>)
 80014ce:	f000 fb49 	bl	8001b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014d2:	bf00      	nop
 80014d4:	37f0      	adds	r7, #240	; 0xf0
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40013000 	.word	0x40013000
 80014e0:	58024400 	.word	0x58024400
 80014e4:	58020000 	.word	0x58020000
 80014e8:	58020400 	.word	0x58020400

080014ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b0ba      	sub	sp, #232	; 0xe8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	22c0      	movs	r2, #192	; 0xc0
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f005 fee9 	bl	80072e4 <memset>
  if(huart->Instance==USART3)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <HAL_UART_MspInit+0xc8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d146      	bne.n	80015aa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800151c:	f04f 0202 	mov.w	r2, #2
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4618      	mov	r0, r3
 8001534:	f001 fd80 	bl	8003038 <HAL_RCCEx_PeriphCLKConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800153e:	f7ff fbbf 	bl	8000cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_UART_MspInit+0xcc>)
 8001544:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_UART_MspInit+0xcc>)
 800154a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_UART_MspInit+0xcc>)
 8001554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_UART_MspInit+0xcc>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001566:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <HAL_UART_MspInit+0xcc>)
 8001568:	f043 0308 	orr.w	r3, r3, #8
 800156c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_UART_MspInit+0xcc>)
 8001572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	60bb      	str	r3, [r7, #8]
 800157c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800157e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001598:	2307      	movs	r3, #7
 800159a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800159e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_UART_MspInit+0xd0>)
 80015a6:	f000 fadd 	bl	8001b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015aa:	bf00      	nop
 80015ac:	37e8      	adds	r7, #232	; 0xe8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40004800 	.word	0x40004800
 80015b8:	58024400 	.word	0x58024400
 80015bc:	58020c00 	.word	0x58020c00

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160c:	f000 f94a 	bl	80018a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_USER_Pin);
 8001618:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800161c:	f000 fc83 	bl	8001f26 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e00a      	b.n	800164c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001636:	f3af 8000 	nop.w
 800163a:	4601      	mov	r1, r0
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	60ba      	str	r2, [r7, #8]
 8001642:	b2ca      	uxtb	r2, r1
 8001644:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	3301      	adds	r3, #1
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	dbf0      	blt.n	8001636 <_read+0x12>
  }

  return len;
 8001654:	687b      	ldr	r3, [r7, #4]
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b086      	sub	sp, #24
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	e009      	b.n	8001684 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff f895 	bl	80007a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	dbf1      	blt.n	8001670 <_write+0x12>
  }
  return len;
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_close>:

int _close(int file)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016be:	605a      	str	r2, [r3, #4]
  return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <_isatty>:

int _isatty(int file)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f005 fe26 	bl	8007380 <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	24080000 	.word	0x24080000
 8001760:	00000400 	.word	0x00000400
 8001764:	240001b8 	.word	0x240001b8
 8001768:	24000310 	.word	0x24000310

0800176c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800176c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001770:	f7fe ff84 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001774:	480c      	ldr	r0, [pc, #48]	; (80017a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001776:	490d      	ldr	r1, [pc, #52]	; (80017ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800177c:	e002      	b.n	8001784 <LoopCopyDataInit>

0800177e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800177e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001782:	3304      	adds	r3, #4

08001784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001788:	d3f9      	bcc.n	800177e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800178c:	4c0a      	ldr	r4, [pc, #40]	; (80017b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001790:	e001      	b.n	8001796 <LoopFillZerobss>

08001792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001794:	3204      	adds	r2, #4

08001796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001798:	d3fb      	bcc.n	8001792 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800179a:	f005 fdf7 	bl	800738c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800179e:	f7ff f88f 	bl	80008c0 <main>
  bx  lr
 80017a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017ac:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80017b0:	0800806c 	.word	0x0800806c
  ldr r2, =_sbss
 80017b4:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80017b8:	2400030c 	.word	0x2400030c

080017bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017bc:	e7fe      	b.n	80017bc <ADC3_IRQHandler>
	...

080017c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c6:	2003      	movs	r0, #3
 80017c8:	f000 f98c 	bl	8001ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017cc:	f001 fa5e 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 80017d0:	4602      	mov	r2, r0
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_Init+0x68>)
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	0a1b      	lsrs	r3, r3, #8
 80017d8:	f003 030f 	and.w	r3, r3, #15
 80017dc:	4913      	ldr	r1, [pc, #76]	; (800182c <HAL_Init+0x6c>)
 80017de:	5ccb      	ldrb	r3, [r1, r3]
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	fa22 f303 	lsr.w	r3, r2, r3
 80017e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <HAL_Init+0x68>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_Init+0x6c>)
 80017f4:	5cd3      	ldrb	r3, [r2, r3]
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_Init+0x70>)
 8001802:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HAL_Init+0x74>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180a:	200f      	movs	r0, #15
 800180c:	f000 f814 	bl	8001838 <HAL_InitTick>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e002      	b.n	8001820 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800181a:	f7ff fdbf 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	58024400 	.word	0x58024400
 800182c:	08007ff0 	.word	0x08007ff0
 8001830:	24000004 	.word	0x24000004
 8001834:	24000000 	.word	0x24000000

08001838 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_InitTick+0x60>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e021      	b.n	8001890 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <HAL_InitTick+0x64>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <HAL_InitTick+0x60>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4619      	mov	r1, r3
 8001856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800185a:	fbb3 f3f1 	udiv	r3, r3, r1
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f971 	bl	8001b4a <HAL_SYSTICK_Config>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e00e      	b.n	8001890 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b0f      	cmp	r3, #15
 8001876:	d80a      	bhi.n	800188e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001878:	2200      	movs	r2, #0
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001880:	f000 f93b 	bl	8001afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001884:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <HAL_InitTick+0x68>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	2400000c 	.word	0x2400000c
 800189c:	24000000 	.word	0x24000000
 80018a0:	24000008 	.word	0x24000008

080018a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_IncTick+0x20>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x24>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <HAL_IncTick+0x24>)
 80018b6:	6013      	str	r3, [r2, #0]
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2400000c 	.word	0x2400000c
 80018c8:	240001bc 	.word	0x240001bc

080018cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return uwTick;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <HAL_GetTick+0x14>)
 80018d2:	681b      	ldr	r3, [r3, #0]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	240001bc 	.word	0x240001bc

080018e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018ec:	f7ff ffee 	bl	80018cc <HAL_GetTick>
 80018f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018fc:	d005      	beq.n	800190a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_Delay+0x44>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190a:	bf00      	nop
 800190c:	f7ff ffde 	bl	80018cc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d8f7      	bhi.n	800190c <HAL_Delay+0x28>
  {
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2400000c 	.word	0x2400000c

0800192c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_GetREVID+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	0c1b      	lsrs	r3, r3, #16
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	5c001000 	.word	0x5c001000

08001944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <__NVIC_SetPriorityGrouping+0x40>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 800196e:	4313      	orrs	r3, r2
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <__NVIC_SetPriorityGrouping+0x40>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00
 8001988:	05fa0000 	.word	0x05fa0000

0800198c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <__NVIC_EnableIRQ+0x38>)
 80019c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	88fb      	ldrh	r3, [r7, #6]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab0:	d301      	bcc.n	8001ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00f      	b.n	8001ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <SysTick_Config+0x40>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001abe:	210f      	movs	r1, #15
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ac4:	f7ff ff8e 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <SysTick_Config+0x40>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <SysTick_Config+0x40>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff29 	bl	8001944 <__NVIC_SetPriorityGrouping>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff40 	bl	800198c <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff90 	bl	8001a38 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5f 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff33 	bl	80019a8 <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffa4 	bl	8001aa0 <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	; 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b72:	4b89      	ldr	r3, [pc, #548]	; (8001d98 <HAL_GPIO_Init+0x234>)
 8001b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b76:	e194      	b.n	8001ea2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	fa01 f303 	lsl.w	r3, r1, r3
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 8186 	beq.w	8001e9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 0303 	and.w	r3, r3, #3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d005      	beq.n	8001ba8 <HAL_GPIO_Init+0x44>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d130      	bne.n	8001c0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68da      	ldr	r2, [r3, #12]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bde:	2201      	movs	r2, #1
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	f003 0201 	and.w	r2, r3, #1
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	d017      	beq.n	8001c46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d123      	bne.n	8001c9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	08da      	lsrs	r2, r3, #3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3208      	adds	r2, #8
 8001c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	220f      	movs	r2, #15
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	08da      	lsrs	r2, r3, #3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3208      	adds	r2, #8
 8001c94:	69b9      	ldr	r1, [r7, #24]
 8001c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0203 	and.w	r2, r3, #3
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 80e0 	beq.w	8001e9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cdc:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <HAL_GPIO_Init+0x238>)
 8001cde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ce2:	4a2e      	ldr	r2, [pc, #184]	; (8001d9c <HAL_GPIO_Init+0x238>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cec:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <HAL_GPIO_Init+0x238>)
 8001cee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cfa:	4a29      	ldr	r2, [pc, #164]	; (8001da0 <HAL_GPIO_Init+0x23c>)
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	3302      	adds	r3, #2
 8001d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	220f      	movs	r2, #15
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a20      	ldr	r2, [pc, #128]	; (8001da4 <HAL_GPIO_Init+0x240>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d052      	beq.n	8001dcc <HAL_GPIO_Init+0x268>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <HAL_GPIO_Init+0x244>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d031      	beq.n	8001d92 <HAL_GPIO_Init+0x22e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a1e      	ldr	r2, [pc, #120]	; (8001dac <HAL_GPIO_Init+0x248>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d02b      	beq.n	8001d8e <HAL_GPIO_Init+0x22a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <HAL_GPIO_Init+0x24c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d025      	beq.n	8001d8a <HAL_GPIO_Init+0x226>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a1c      	ldr	r2, [pc, #112]	; (8001db4 <HAL_GPIO_Init+0x250>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d01f      	beq.n	8001d86 <HAL_GPIO_Init+0x222>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <HAL_GPIO_Init+0x254>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d019      	beq.n	8001d82 <HAL_GPIO_Init+0x21e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a1a      	ldr	r2, [pc, #104]	; (8001dbc <HAL_GPIO_Init+0x258>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0x21a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_GPIO_Init+0x25c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_GPIO_Init+0x216>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <HAL_GPIO_Init+0x260>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d007      	beq.n	8001d76 <HAL_GPIO_Init+0x212>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <HAL_GPIO_Init+0x264>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_GPIO_Init+0x20e>
 8001d6e:	2309      	movs	r3, #9
 8001d70:	e02d      	b.n	8001dce <HAL_GPIO_Init+0x26a>
 8001d72:	230a      	movs	r3, #10
 8001d74:	e02b      	b.n	8001dce <HAL_GPIO_Init+0x26a>
 8001d76:	2308      	movs	r3, #8
 8001d78:	e029      	b.n	8001dce <HAL_GPIO_Init+0x26a>
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	e027      	b.n	8001dce <HAL_GPIO_Init+0x26a>
 8001d7e:	2306      	movs	r3, #6
 8001d80:	e025      	b.n	8001dce <HAL_GPIO_Init+0x26a>
 8001d82:	2305      	movs	r3, #5
 8001d84:	e023      	b.n	8001dce <HAL_GPIO_Init+0x26a>
 8001d86:	2304      	movs	r3, #4
 8001d88:	e021      	b.n	8001dce <HAL_GPIO_Init+0x26a>
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e01f      	b.n	8001dce <HAL_GPIO_Init+0x26a>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e01d      	b.n	8001dce <HAL_GPIO_Init+0x26a>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e01b      	b.n	8001dce <HAL_GPIO_Init+0x26a>
 8001d96:	bf00      	nop
 8001d98:	58000080 	.word	0x58000080
 8001d9c:	58024400 	.word	0x58024400
 8001da0:	58000400 	.word	0x58000400
 8001da4:	58020000 	.word	0x58020000
 8001da8:	58020400 	.word	0x58020400
 8001dac:	58020800 	.word	0x58020800
 8001db0:	58020c00 	.word	0x58020c00
 8001db4:	58021000 	.word	0x58021000
 8001db8:	58021400 	.word	0x58021400
 8001dbc:	58021800 	.word	0x58021800
 8001dc0:	58021c00 	.word	0x58021c00
 8001dc4:	58022000 	.word	0x58022000
 8001dc8:	58022400 	.word	0x58022400
 8001dcc:	2300      	movs	r3, #0
 8001dce:	69fa      	ldr	r2, [r7, #28]
 8001dd0:	f002 0203 	and.w	r2, r2, #3
 8001dd4:	0092      	lsls	r2, r2, #2
 8001dd6:	4093      	lsls	r3, r2
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dde:	4938      	ldr	r1, [pc, #224]	; (8001ec0 <HAL_GPIO_Init+0x35c>)
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	3302      	adds	r3, #2
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f47f ae63 	bne.w	8001b78 <HAL_GPIO_Init+0x14>
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	3724      	adds	r7, #36	; 0x24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	58000400 	.word	0x58000400

08001ec4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	460b      	mov	r3, r1
 8001ece:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	887b      	ldrh	r3, [r7, #2]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	e001      	b.n	8001ee6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	807b      	strh	r3, [r7, #2]
 8001f00:	4613      	mov	r3, r2
 8001f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f04:	787b      	ldrb	r3, [r7, #1]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0a:	887a      	ldrh	r2, [r7, #2]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f10:	e003      	b.n	8001f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f12:	887b      	ldrh	r3, [r7, #2]
 8001f14:	041a      	lsls	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	619a      	str	r2, [r3, #24]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe fc3d 	bl	80007cc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001f64:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <HAL_HSEM_FastTake+0x2c>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3320      	adds	r3, #32
 8001f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_HSEM_FastTake+0x30>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d101      	bne.n	8001f78 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001f74:	2300      	movs	r3, #0
 8001f76:	e000      	b.n	8001f7a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	58026400 	.word	0x58026400
 8001f8c:	80000300 	.word	0x80000300

08001f90 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001f9a:	4906      	ldr	r1, [pc, #24]	; (8001fb4 <HAL_HSEM_Release+0x24>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	58026400 	.word	0x58026400

08001fb8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001fc0:	4b29      	ldr	r3, [pc, #164]	; (8002068 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	2b06      	cmp	r3, #6
 8001fca:	d00a      	beq.n	8001fe2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001fcc:	4b26      	ldr	r3, [pc, #152]	; (8002068 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d001      	beq.n	8001fde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e040      	b.n	8002060 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e03e      	b.n	8002060 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001fea:	491f      	ldr	r1, [pc, #124]	; (8002068 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001ff2:	f7ff fc6b 	bl	80018cc <HAL_GetTick>
 8001ff6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ff8:	e009      	b.n	800200e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ffa:	f7ff fc67 	bl	80018cc <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002008:	d901      	bls.n	800200e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e028      	b.n	8002060 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800200e:	4b16      	ldr	r3, [pc, #88]	; (8002068 <HAL_PWREx_ConfigSupply+0xb0>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800201a:	d1ee      	bne.n	8001ffa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b1e      	cmp	r3, #30
 8002020:	d008      	beq.n	8002034 <HAL_PWREx_ConfigSupply+0x7c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b2e      	cmp	r3, #46	; 0x2e
 8002026:	d005      	beq.n	8002034 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b1d      	cmp	r3, #29
 800202c:	d002      	beq.n	8002034 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b2d      	cmp	r3, #45	; 0x2d
 8002032:	d114      	bne.n	800205e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002034:	f7ff fc4a 	bl	80018cc <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800203a:	e009      	b.n	8002050 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800203c:	f7ff fc46 	bl	80018cc <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800204a:	d901      	bls.n	8002050 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e007      	b.n	8002060 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_PWREx_ConfigSupply+0xb0>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205c:	d1ee      	bne.n	800203c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	58024800 	.word	0x58024800

0800206c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08c      	sub	sp, #48	; 0x30
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	f000 bc48 	b.w	8002910 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8088 	beq.w	800219e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800208e:	4b99      	ldr	r3, [pc, #612]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002098:	4b96      	ldr	r3, [pc, #600]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 800209a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	2b10      	cmp	r3, #16
 80020a2:	d007      	beq.n	80020b4 <HAL_RCC_OscConfig+0x48>
 80020a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a6:	2b18      	cmp	r3, #24
 80020a8:	d111      	bne.n	80020ce <HAL_RCC_OscConfig+0x62>
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	4b8f      	ldr	r3, [pc, #572]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d06d      	beq.n	800219c <HAL_RCC_OscConfig+0x130>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d169      	bne.n	800219c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f000 bc21 	b.w	8002910 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x7a>
 80020d8:	4b86      	ldr	r3, [pc, #536]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a85      	ldr	r2, [pc, #532]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80020de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	e02e      	b.n	8002144 <HAL_RCC_OscConfig+0xd8>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x9c>
 80020ee:	4b81      	ldr	r3, [pc, #516]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a80      	ldr	r2, [pc, #512]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80020f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b7e      	ldr	r3, [pc, #504]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7d      	ldr	r2, [pc, #500]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 8002100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	e01d      	b.n	8002144 <HAL_RCC_OscConfig+0xd8>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0xc0>
 8002112:	4b78      	ldr	r3, [pc, #480]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a77      	ldr	r2, [pc, #476]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 8002118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	4b75      	ldr	r3, [pc, #468]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a74      	ldr	r2, [pc, #464]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0xd8>
 800212c:	4b71      	ldr	r3, [pc, #452]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a70      	ldr	r2, [pc, #448]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 8002132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	4b6e      	ldr	r3, [pc, #440]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6d      	ldr	r2, [pc, #436]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 800213e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002142:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d013      	beq.n	8002174 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff fbbe 	bl	80018cc <HAL_GetTick>
 8002150:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002154:	f7ff fbba 	bl	80018cc <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	; 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e3d4      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002166:	4b63      	ldr	r3, [pc, #396]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0xe8>
 8002172:	e014      	b.n	800219e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff fbaa 	bl	80018cc <HAL_GetTick>
 8002178:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff fba6 	bl	80018cc <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e3c0      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800218e:	4b59      	ldr	r3, [pc, #356]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x110>
 800219a:	e000      	b.n	800219e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800219c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80ca 	beq.w	8002340 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ac:	4b51      	ldr	r3, [pc, #324]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021b6:	4b4f      	ldr	r3, [pc, #316]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d007      	beq.n	80021d2 <HAL_RCC_OscConfig+0x166>
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	2b18      	cmp	r3, #24
 80021c6:	d156      	bne.n	8002276 <HAL_RCC_OscConfig+0x20a>
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d151      	bne.n	8002276 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d2:	4b48      	ldr	r3, [pc, #288]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_RCC_OscConfig+0x17e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e392      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021ea:	4b42      	ldr	r3, [pc, #264]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 0219 	bic.w	r2, r3, #25
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	493f      	ldr	r1, [pc, #252]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7ff fb66 	bl	80018cc <HAL_GetTick>
 8002200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002204:	f7ff fb62 	bl	80018cc <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e37c      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002216:	4b37      	ldr	r3, [pc, #220]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	f7ff fb83 	bl	800192c <HAL_GetREVID>
 8002226:	4603      	mov	r3, r0
 8002228:	f241 0203 	movw	r2, #4099	; 0x1003
 800222c:	4293      	cmp	r3, r2
 800222e:	d817      	bhi.n	8002260 <HAL_RCC_OscConfig+0x1f4>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2b40      	cmp	r3, #64	; 0x40
 8002236:	d108      	bne.n	800224a <HAL_RCC_OscConfig+0x1de>
 8002238:	4b2e      	ldr	r3, [pc, #184]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002240:	4a2c      	ldr	r2, [pc, #176]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 8002242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002246:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002248:	e07a      	b.n	8002340 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224a:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	031b      	lsls	r3, r3, #12
 8002258:	4926      	ldr	r1, [pc, #152]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800225e:	e06f      	b.n	8002340 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	4921      	ldr	r1, [pc, #132]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002274:	e064      	b.n	8002340 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d047      	beq.n	800230e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800227e:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 0219 	bic.w	r2, r3, #25
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	491a      	ldr	r1, [pc, #104]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff fb1c 	bl	80018cc <HAL_GetTick>
 8002294:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002298:	f7ff fb18 	bl	80018cc <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e332      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	f7ff fb39 	bl	800192c <HAL_GetREVID>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d819      	bhi.n	80022f8 <HAL_RCC_OscConfig+0x28c>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d108      	bne.n	80022de <HAL_RCC_OscConfig+0x272>
 80022cc:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80022d4:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80022d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022da:	6053      	str	r3, [r2, #4]
 80022dc:	e030      	b.n	8002340 <HAL_RCC_OscConfig+0x2d4>
 80022de:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	031b      	lsls	r3, r3, #12
 80022ec:	4901      	ldr	r1, [pc, #4]	; (80022f4 <HAL_RCC_OscConfig+0x288>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
 80022f2:	e025      	b.n	8002340 <HAL_RCC_OscConfig+0x2d4>
 80022f4:	58024400 	.word	0x58024400
 80022f8:	4b9a      	ldr	r3, [pc, #616]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	061b      	lsls	r3, r3, #24
 8002306:	4997      	ldr	r1, [pc, #604]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
 800230c:	e018      	b.n	8002340 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230e:	4b95      	ldr	r3, [pc, #596]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a94      	ldr	r2, [pc, #592]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231a:	f7ff fad7 	bl	80018cc <HAL_GetTick>
 800231e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002322:	f7ff fad3 	bl	80018cc <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e2ed      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002334:	4b8b      	ldr	r3, [pc, #556]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f0      	bne.n	8002322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0310 	and.w	r3, r3, #16
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80a9 	beq.w	80024a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234e:	4b85      	ldr	r3, [pc, #532]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002356:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002358:	4b82      	ldr	r3, [pc, #520]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	2b08      	cmp	r3, #8
 8002362:	d007      	beq.n	8002374 <HAL_RCC_OscConfig+0x308>
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	2b18      	cmp	r3, #24
 8002368:	d13a      	bne.n	80023e0 <HAL_RCC_OscConfig+0x374>
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d135      	bne.n	80023e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002374:	4b7b      	ldr	r3, [pc, #492]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_OscConfig+0x320>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b80      	cmp	r3, #128	; 0x80
 8002386:	d001      	beq.n	800238c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e2c1      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800238c:	f7ff face 	bl	800192c <HAL_GetREVID>
 8002390:	4603      	mov	r3, r0
 8002392:	f241 0203 	movw	r2, #4099	; 0x1003
 8002396:	4293      	cmp	r3, r2
 8002398:	d817      	bhi.n	80023ca <HAL_RCC_OscConfig+0x35e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d108      	bne.n	80023b4 <HAL_RCC_OscConfig+0x348>
 80023a2:	4b70      	ldr	r3, [pc, #448]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80023aa:	4a6e      	ldr	r2, [pc, #440]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 80023ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023b2:	e075      	b.n	80024a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023b4:	4b6b      	ldr	r3, [pc, #428]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	069b      	lsls	r3, r3, #26
 80023c2:	4968      	ldr	r1, [pc, #416]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023c8:	e06a      	b.n	80024a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023ca:	4b66      	ldr	r3, [pc, #408]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	061b      	lsls	r3, r3, #24
 80023d8:	4962      	ldr	r1, [pc, #392]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023de:	e05f      	b.n	80024a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d042      	beq.n	800246e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80023e8:	4b5e      	ldr	r3, [pc, #376]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5d      	ldr	r2, [pc, #372]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 80023ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff fa6a 	bl	80018cc <HAL_GetTick>
 80023f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80023fc:	f7ff fa66 	bl	80018cc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e280      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800240e:	4b55      	ldr	r3, [pc, #340]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800241a:	f7ff fa87 	bl	800192c <HAL_GetREVID>
 800241e:	4603      	mov	r3, r0
 8002420:	f241 0203 	movw	r2, #4099	; 0x1003
 8002424:	4293      	cmp	r3, r2
 8002426:	d817      	bhi.n	8002458 <HAL_RCC_OscConfig+0x3ec>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	2b20      	cmp	r3, #32
 800242e:	d108      	bne.n	8002442 <HAL_RCC_OscConfig+0x3d6>
 8002430:	4b4c      	ldr	r3, [pc, #304]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002438:	4a4a      	ldr	r2, [pc, #296]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 800243a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800243e:	6053      	str	r3, [r2, #4]
 8002440:	e02e      	b.n	80024a0 <HAL_RCC_OscConfig+0x434>
 8002442:	4b48      	ldr	r3, [pc, #288]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	069b      	lsls	r3, r3, #26
 8002450:	4944      	ldr	r1, [pc, #272]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
 8002456:	e023      	b.n	80024a0 <HAL_RCC_OscConfig+0x434>
 8002458:	4b42      	ldr	r3, [pc, #264]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	061b      	lsls	r3, r3, #24
 8002466:	493f      	ldr	r1, [pc, #252]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002468:	4313      	orrs	r3, r2
 800246a:	60cb      	str	r3, [r1, #12]
 800246c:	e018      	b.n	80024a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800246e:	4b3d      	ldr	r3, [pc, #244]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a3c      	ldr	r2, [pc, #240]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247a:	f7ff fa27 	bl	80018cc <HAL_GetTick>
 800247e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002482:	f7ff fa23 	bl	80018cc <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e23d      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002494:	4b33      	ldr	r3, [pc, #204]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f0      	bne.n	8002482 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d036      	beq.n	800251a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d019      	beq.n	80024e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b4:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 80024b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b8:	4a2a      	ldr	r2, [pc, #168]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7ff fa04 	bl	80018cc <HAL_GetTick>
 80024c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c8:	f7ff fa00 	bl	80018cc <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e21a      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024da:	4b22      	ldr	r3, [pc, #136]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 80024dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x45c>
 80024e6:	e018      	b.n	800251a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 80024ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ec:	4a1d      	ldr	r2, [pc, #116]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7ff f9ea 	bl	80018cc <HAL_GetTick>
 80024f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024fc:	f7ff f9e6 	bl	80018cc <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e200      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d039      	beq.n	800259a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01c      	beq.n	8002568 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002534:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002538:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800253a:	f7ff f9c7 	bl	80018cc <HAL_GetTick>
 800253e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002542:	f7ff f9c3 	bl	80018cc <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e1dd      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_RCC_OscConfig+0x4f8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_OscConfig+0x4d6>
 8002560:	e01b      	b.n	800259a <HAL_RCC_OscConfig+0x52e>
 8002562:	bf00      	nop
 8002564:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002568:	4b9b      	ldr	r3, [pc, #620]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a9a      	ldr	r2, [pc, #616]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 800256e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002572:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002574:	f7ff f9aa 	bl	80018cc <HAL_GetTick>
 8002578:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800257c:	f7ff f9a6 	bl	80018cc <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1c0      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800258e:	4b92      	ldr	r3, [pc, #584]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 8081 	beq.w	80026aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025a8:	4b8c      	ldr	r3, [pc, #560]	; (80027dc <HAL_RCC_OscConfig+0x770>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a8b      	ldr	r2, [pc, #556]	; (80027dc <HAL_RCC_OscConfig+0x770>)
 80025ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025b4:	f7ff f98a 	bl	80018cc <HAL_GetTick>
 80025b8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025bc:	f7ff f986 	bl	80018cc <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	; 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e1a0      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025ce:	4b83      	ldr	r3, [pc, #524]	; (80027dc <HAL_RCC_OscConfig+0x770>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d106      	bne.n	80025f0 <HAL_RCC_OscConfig+0x584>
 80025e2:	4b7d      	ldr	r3, [pc, #500]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	4a7c      	ldr	r2, [pc, #496]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6713      	str	r3, [r2, #112]	; 0x70
 80025ee:	e02d      	b.n	800264c <HAL_RCC_OscConfig+0x5e0>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10c      	bne.n	8002612 <HAL_RCC_OscConfig+0x5a6>
 80025f8:	4b77      	ldr	r3, [pc, #476]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4a76      	ldr	r2, [pc, #472]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	6713      	str	r3, [r2, #112]	; 0x70
 8002604:	4b74      	ldr	r3, [pc, #464]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	4a73      	ldr	r2, [pc, #460]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 800260a:	f023 0304 	bic.w	r3, r3, #4
 800260e:	6713      	str	r3, [r2, #112]	; 0x70
 8002610:	e01c      	b.n	800264c <HAL_RCC_OscConfig+0x5e0>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b05      	cmp	r3, #5
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x5c8>
 800261a:	4b6f      	ldr	r3, [pc, #444]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a6e      	ldr	r2, [pc, #440]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	4b6c      	ldr	r3, [pc, #432]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262a:	4a6b      	ldr	r2, [pc, #428]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6713      	str	r3, [r2, #112]	; 0x70
 8002632:	e00b      	b.n	800264c <HAL_RCC_OscConfig+0x5e0>
 8002634:	4b68      	ldr	r3, [pc, #416]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	4a67      	ldr	r2, [pc, #412]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6713      	str	r3, [r2, #112]	; 0x70
 8002640:	4b65      	ldr	r3, [pc, #404]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002644:	4a64      	ldr	r2, [pc, #400]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002646:	f023 0304 	bic.w	r3, r3, #4
 800264a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d015      	beq.n	8002680 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7ff f93a 	bl	80018cc <HAL_GetTick>
 8002658:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7ff f936 	bl	80018cc <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	; 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e14e      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002672:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0ee      	beq.n	800265c <HAL_RCC_OscConfig+0x5f0>
 800267e:	e014      	b.n	80026aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7ff f924 	bl	80018cc <HAL_GetTick>
 8002684:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002686:	e00a      	b.n	800269e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002688:	f7ff f920 	bl	80018cc <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	; 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e138      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800269e:	4b4e      	ldr	r3, [pc, #312]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1ee      	bne.n	8002688 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 812d 	beq.w	800290e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80026b4:	4b48      	ldr	r3, [pc, #288]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026bc:	2b18      	cmp	r3, #24
 80026be:	f000 80bd 	beq.w	800283c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	f040 809e 	bne.w	8002808 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026cc:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a41      	ldr	r2, [pc, #260]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80026d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7ff f8f8 	bl	80018cc <HAL_GetTick>
 80026dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff f8f4 	bl	80018cc <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e10e      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026f2:	4b39      	ldr	r3, [pc, #228]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fe:	4b36      	ldr	r3, [pc, #216]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002702:	4b37      	ldr	r3, [pc, #220]	; (80027e0 <HAL_RCC_OscConfig+0x774>)
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800270e:	0112      	lsls	r2, r2, #4
 8002710:	430a      	orrs	r2, r1
 8002712:	4931      	ldr	r1, [pc, #196]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002714:	4313      	orrs	r3, r2
 8002716:	628b      	str	r3, [r1, #40]	; 0x28
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	3b01      	subs	r3, #1
 800271e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002726:	3b01      	subs	r3, #1
 8002728:	025b      	lsls	r3, r3, #9
 800272a:	b29b      	uxth	r3, r3
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	3b01      	subs	r3, #1
 8002734:	041b      	lsls	r3, r3, #16
 8002736:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	3b01      	subs	r3, #1
 8002742:	061b      	lsls	r3, r3, #24
 8002744:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002748:	4923      	ldr	r1, [pc, #140]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 800274a:	4313      	orrs	r3, r2
 800274c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800274e:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002752:	4a21      	ldr	r2, [pc, #132]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800275a:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 800275c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800275e:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_RCC_OscConfig+0x778>)
 8002760:	4013      	ands	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002766:	00d2      	lsls	r2, r2, #3
 8002768:	491b      	ldr	r1, [pc, #108]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 800276a:	4313      	orrs	r3, r2
 800276c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	f023 020c 	bic.w	r2, r3, #12
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4917      	ldr	r1, [pc, #92]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 800277c:	4313      	orrs	r3, r2
 800277e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002780:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	f023 0202 	bic.w	r2, r3, #2
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278c:	4912      	ldr	r1, [pc, #72]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 800278e:	4313      	orrs	r3, r2
 8002790:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002792:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002796:	4a10      	ldr	r2, [pc, #64]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80027b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	4a07      	ldr	r2, [pc, #28]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <HAL_RCC_OscConfig+0x76c>)
 80027c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ce:	f7ff f87d 	bl	80018cc <HAL_GetTick>
 80027d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027d4:	e011      	b.n	80027fa <HAL_RCC_OscConfig+0x78e>
 80027d6:	bf00      	nop
 80027d8:	58024400 	.word	0x58024400
 80027dc:	58024800 	.word	0x58024800
 80027e0:	fffffc0c 	.word	0xfffffc0c
 80027e4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e8:	f7ff f870 	bl	80018cc <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e08a      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027fa:	4b47      	ldr	r3, [pc, #284]	; (8002918 <HAL_RCC_OscConfig+0x8ac>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x77c>
 8002806:	e082      	b.n	800290e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002808:	4b43      	ldr	r3, [pc, #268]	; (8002918 <HAL_RCC_OscConfig+0x8ac>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a42      	ldr	r2, [pc, #264]	; (8002918 <HAL_RCC_OscConfig+0x8ac>)
 800280e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7ff f85a 	bl	80018cc <HAL_GetTick>
 8002818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281c:	f7ff f856 	bl	80018cc <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e070      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800282e:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <HAL_RCC_OscConfig+0x8ac>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x7b0>
 800283a:	e068      	b.n	800290e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800283c:	4b36      	ldr	r3, [pc, #216]	; (8002918 <HAL_RCC_OscConfig+0x8ac>)
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002842:	4b35      	ldr	r3, [pc, #212]	; (8002918 <HAL_RCC_OscConfig+0x8ac>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	2b01      	cmp	r3, #1
 800284e:	d031      	beq.n	80028b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f003 0203 	and.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d12a      	bne.n	80028b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d122      	bne.n	80028b4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d11a      	bne.n	80028b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	0a5b      	lsrs	r3, r3, #9
 8002882:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d111      	bne.n	80028b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	0c1b      	lsrs	r3, r3, #16
 8002894:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d108      	bne.n	80028b4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	0e1b      	lsrs	r3, r3, #24
 80028a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e02b      	b.n	8002910 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80028b8:	4b17      	ldr	r3, [pc, #92]	; (8002918 <HAL_RCC_OscConfig+0x8ac>)
 80028ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028bc:	08db      	lsrs	r3, r3, #3
 80028be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028c2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d01f      	beq.n	800290e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <HAL_RCC_OscConfig+0x8ac>)
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	4a11      	ldr	r2, [pc, #68]	; (8002918 <HAL_RCC_OscConfig+0x8ac>)
 80028d4:	f023 0301 	bic.w	r3, r3, #1
 80028d8:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028da:	f7fe fff7 	bl	80018cc <HAL_GetTick>
 80028de:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80028e0:	bf00      	nop
 80028e2:	f7fe fff3 	bl	80018cc <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d0f9      	beq.n	80028e2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_RCC_OscConfig+0x8ac>)
 80028f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <HAL_RCC_OscConfig+0x8b0>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028fa:	00d2      	lsls	r2, r2, #3
 80028fc:	4906      	ldr	r1, [pc, #24]	; (8002918 <HAL_RCC_OscConfig+0x8ac>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_RCC_OscConfig+0x8ac>)
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	4a04      	ldr	r2, [pc, #16]	; (8002918 <HAL_RCC_OscConfig+0x8ac>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3730      	adds	r7, #48	; 0x30
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	58024400 	.word	0x58024400
 800291c:	ffff0007 	.word	0xffff0007

08002920 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e19c      	b.n	8002c6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002934:	4b8a      	ldr	r3, [pc, #552]	; (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d910      	bls.n	8002964 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002942:	4b87      	ldr	r3, [pc, #540]	; (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 020f 	bic.w	r2, r3, #15
 800294a:	4985      	ldr	r1, [pc, #532]	; (8002b60 <HAL_RCC_ClockConfig+0x240>)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b83      	ldr	r3, [pc, #524]	; (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e184      	b.n	8002c6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d010      	beq.n	8002992 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	4b7b      	ldr	r3, [pc, #492]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800297c:	429a      	cmp	r2, r3
 800297e:	d908      	bls.n	8002992 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002980:	4b78      	ldr	r3, [pc, #480]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	4975      	ldr	r1, [pc, #468]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 800298e:	4313      	orrs	r3, r2
 8002990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d010      	beq.n	80029c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	4b70      	ldr	r3, [pc, #448]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d908      	bls.n	80029c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029ae:	4b6d      	ldr	r3, [pc, #436]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	496a      	ldr	r1, [pc, #424]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0310 	and.w	r3, r3, #16
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d010      	beq.n	80029ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	4b64      	ldr	r3, [pc, #400]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029d8:	429a      	cmp	r2, r3
 80029da:	d908      	bls.n	80029ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029dc:	4b61      	ldr	r3, [pc, #388]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	495e      	ldr	r1, [pc, #376]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d010      	beq.n	8002a1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	4b59      	ldr	r3, [pc, #356]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d908      	bls.n	8002a1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a0a:	4b56      	ldr	r3, [pc, #344]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	4953      	ldr	r1, [pc, #332]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d010      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	4b4d      	ldr	r3, [pc, #308]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d908      	bls.n	8002a4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a38:	4b4a      	ldr	r3, [pc, #296]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f023 020f 	bic.w	r2, r3, #15
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4947      	ldr	r1, [pc, #284]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d055      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a56:	4b43      	ldr	r3, [pc, #268]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	4940      	ldr	r1, [pc, #256]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d107      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a70:	4b3c      	ldr	r3, [pc, #240]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d121      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0f6      	b.n	8002c6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d107      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a88:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d115      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0ea      	b.n	8002c6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d107      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002aa0:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0de      	b.n	8002c6e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ab0:	4b2c      	ldr	r3, [pc, #176]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d101      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0d6      	b.n	8002c6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ac0:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f023 0207 	bic.w	r2, r3, #7
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4925      	ldr	r1, [pc, #148]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad2:	f7fe fefb 	bl	80018cc <HAL_GetTick>
 8002ad6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ada:	f7fe fef7 	bl	80018cc <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e0be      	b.n	8002c6e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af0:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d1eb      	bne.n	8002ada <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d010      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d208      	bcs.n	8002b30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f023 020f 	bic.w	r2, r3, #15
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	490e      	ldr	r1, [pc, #56]	; (8002b64 <HAL_RCC_ClockConfig+0x244>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b30:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d214      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 020f 	bic.w	r2, r3, #15
 8002b46:	4906      	ldr	r1, [pc, #24]	; (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <HAL_RCC_ClockConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e086      	b.n	8002c6e <HAL_RCC_ClockConfig+0x34e>
 8002b60:	52002000 	.word	0x52002000
 8002b64:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d010      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_RCC_ClockConfig+0x358>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d208      	bcs.n	8002b96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b84:	4b3c      	ldr	r3, [pc, #240]	; (8002c78 <HAL_RCC_ClockConfig+0x358>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	4939      	ldr	r1, [pc, #228]	; (8002c78 <HAL_RCC_ClockConfig+0x358>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d010      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	4b34      	ldr	r3, [pc, #208]	; (8002c78 <HAL_RCC_ClockConfig+0x358>)
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d208      	bcs.n	8002bc4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bb2:	4b31      	ldr	r3, [pc, #196]	; (8002c78 <HAL_RCC_ClockConfig+0x358>)
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	492e      	ldr	r1, [pc, #184]	; (8002c78 <HAL_RCC_ClockConfig+0x358>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d010      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <HAL_RCC_ClockConfig+0x358>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d208      	bcs.n	8002bf2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <HAL_RCC_ClockConfig+0x358>)
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	4922      	ldr	r1, [pc, #136]	; (8002c78 <HAL_RCC_ClockConfig+0x358>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d010      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69da      	ldr	r2, [r3, #28]
 8002c02:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_RCC_ClockConfig+0x358>)
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d208      	bcs.n	8002c20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_RCC_ClockConfig+0x358>)
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	4917      	ldr	r1, [pc, #92]	; (8002c78 <HAL_RCC_ClockConfig+0x358>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c20:	f000 f834 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <HAL_RCC_ClockConfig+0x358>)
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	4912      	ldr	r1, [pc, #72]	; (8002c7c <HAL_RCC_ClockConfig+0x35c>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_RCC_ClockConfig+0x358>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <HAL_RCC_ClockConfig+0x35c>)
 8002c48:	5cd3      	ldrb	r3, [r2, r3]
 8002c4a:	f003 031f 	and.w	r3, r3, #31
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
 8002c54:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_RCC_ClockConfig+0x360>)
 8002c56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c58:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <HAL_RCC_ClockConfig+0x364>)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <HAL_RCC_ClockConfig+0x368>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fe fde8 	bl	8001838 <HAL_InitTick>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	58024400 	.word	0x58024400
 8002c7c:	08007ff0 	.word	0x08007ff0
 8002c80:	24000004 	.word	0x24000004
 8002c84:	24000000 	.word	0x24000000
 8002c88:	24000008 	.word	0x24000008

08002c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b089      	sub	sp, #36	; 0x24
 8002c90:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c92:	4bb3      	ldr	r3, [pc, #716]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c9a:	2b18      	cmp	r3, #24
 8002c9c:	f200 8155 	bhi.w	8002f4a <HAL_RCC_GetSysClockFreq+0x2be>
 8002ca0:	a201      	add	r2, pc, #4	; (adr r2, 8002ca8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca6:	bf00      	nop
 8002ca8:	08002d0d 	.word	0x08002d0d
 8002cac:	08002f4b 	.word	0x08002f4b
 8002cb0:	08002f4b 	.word	0x08002f4b
 8002cb4:	08002f4b 	.word	0x08002f4b
 8002cb8:	08002f4b 	.word	0x08002f4b
 8002cbc:	08002f4b 	.word	0x08002f4b
 8002cc0:	08002f4b 	.word	0x08002f4b
 8002cc4:	08002f4b 	.word	0x08002f4b
 8002cc8:	08002d33 	.word	0x08002d33
 8002ccc:	08002f4b 	.word	0x08002f4b
 8002cd0:	08002f4b 	.word	0x08002f4b
 8002cd4:	08002f4b 	.word	0x08002f4b
 8002cd8:	08002f4b 	.word	0x08002f4b
 8002cdc:	08002f4b 	.word	0x08002f4b
 8002ce0:	08002f4b 	.word	0x08002f4b
 8002ce4:	08002f4b 	.word	0x08002f4b
 8002ce8:	08002d39 	.word	0x08002d39
 8002cec:	08002f4b 	.word	0x08002f4b
 8002cf0:	08002f4b 	.word	0x08002f4b
 8002cf4:	08002f4b 	.word	0x08002f4b
 8002cf8:	08002f4b 	.word	0x08002f4b
 8002cfc:	08002f4b 	.word	0x08002f4b
 8002d00:	08002f4b 	.word	0x08002f4b
 8002d04:	08002f4b 	.word	0x08002f4b
 8002d08:	08002d3f 	.word	0x08002d3f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d0c:	4b94      	ldr	r3, [pc, #592]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d18:	4b91      	ldr	r3, [pc, #580]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	08db      	lsrs	r3, r3, #3
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	4a90      	ldr	r2, [pc, #576]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d24:	fa22 f303 	lsr.w	r3, r2, r3
 8002d28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002d2a:	e111      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d2c:	4b8d      	ldr	r3, [pc, #564]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d2e:	61bb      	str	r3, [r7, #24]
      break;
 8002d30:	e10e      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002d32:	4b8d      	ldr	r3, [pc, #564]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d34:	61bb      	str	r3, [r7, #24]
      break;
 8002d36:	e10b      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002d38:	4b8c      	ldr	r3, [pc, #560]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d3a:	61bb      	str	r3, [r7, #24]
      break;
 8002d3c:	e108      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d3e:	4b88      	ldr	r3, [pc, #544]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002d48:	4b85      	ldr	r3, [pc, #532]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	091b      	lsrs	r3, r3, #4
 8002d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d52:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d54:	4b82      	ldr	r3, [pc, #520]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d5e:	4b80      	ldr	r3, [pc, #512]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d62:	08db      	lsrs	r3, r3, #3
 8002d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	ee07 3a90 	vmov	s15, r3
 8002d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d76:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80e1 	beq.w	8002f44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	f000 8083 	beq.w	8002e90 <HAL_RCC_GetSysClockFreq+0x204>
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	f200 80a1 	bhi.w	8002ed4 <HAL_RCC_GetSysClockFreq+0x248>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0x114>
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d056      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d9e:	e099      	b.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002da0:	4b6f      	ldr	r3, [pc, #444]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0320 	and.w	r3, r3, #32
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d02d      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002dac:	4b6c      	ldr	r3, [pc, #432]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	08db      	lsrs	r3, r3, #3
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	4a6b      	ldr	r2, [pc, #428]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dbc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd6:	4b62      	ldr	r3, [pc, #392]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002de6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002df6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e02:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e06:	e087      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e12:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e1a:	4b51      	ldr	r3, [pc, #324]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e2e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e4a:	e065      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	ee07 3a90 	vmov	s15, r3
 8002e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e56:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002f78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e5e:	4b40      	ldr	r3, [pc, #256]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e66:	ee07 3a90 	vmov	s15, r3
 8002e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e72:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e8e:	e043      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	ee07 3a90 	vmov	s15, r3
 8002e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e9a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002f7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eaa:	ee07 3a90 	vmov	s15, r3
 8002eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eb6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ece:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ed2:	e021      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ede:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002f78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ee6:	4b1e      	ldr	r3, [pc, #120]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002efa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002f70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f16:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	0a5b      	lsrs	r3, r3, #9
 8002f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f22:	3301      	adds	r3, #1
 8002f24:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	ee07 3a90 	vmov	s15, r3
 8002f2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f3c:	ee17 3a90 	vmov	r3, s15
 8002f40:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002f42:	e005      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61bb      	str	r3, [r7, #24]
      break;
 8002f48:	e002      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f4c:	61bb      	str	r3, [r7, #24]
      break;
 8002f4e:	bf00      	nop
  }

  return sysclockfreq;
 8002f50:	69bb      	ldr	r3, [r7, #24]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3724      	adds	r7, #36	; 0x24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	58024400 	.word	0x58024400
 8002f64:	03d09000 	.word	0x03d09000
 8002f68:	003d0900 	.word	0x003d0900
 8002f6c:	017d7840 	.word	0x017d7840
 8002f70:	46000000 	.word	0x46000000
 8002f74:	4c742400 	.word	0x4c742400
 8002f78:	4a742400 	.word	0x4a742400
 8002f7c:	4bbebc20 	.word	0x4bbebc20

08002f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f86:	f7ff fe81 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	0a1b      	lsrs	r3, r3, #8
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	490f      	ldr	r1, [pc, #60]	; (8002fd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f98:	5ccb      	ldrb	r3, [r1, r3]
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	4a09      	ldr	r2, [pc, #36]	; (8002fd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002fae:	5cd3      	ldrb	r3, [r2, r3]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fba:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fbe:	4a07      	ldr	r2, [pc, #28]	; (8002fdc <HAL_RCC_GetHCLKFreq+0x5c>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	58024400 	.word	0x58024400
 8002fd4:	08007ff0 	.word	0x08007ff0
 8002fd8:	24000004 	.word	0x24000004
 8002fdc:	24000000 	.word	0x24000000

08002fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002fe4:	f7ff ffcc 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4904      	ldr	r1, [pc, #16]	; (8003008 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	58024400 	.word	0x58024400
 8003008:	08007ff0 	.word	0x08007ff0

0800300c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003010:	f7ff ffb6 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	4904      	ldr	r1, [pc, #16]	; (8003034 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800302c:	4618      	mov	r0, r3
 800302e:	bd80      	pop	{r7, pc}
 8003030:	58024400 	.word	0x58024400
 8003034:	08007ff0 	.word	0x08007ff0

08003038 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800303c:	b0ca      	sub	sp, #296	; 0x128
 800303e:	af00      	add	r7, sp, #0
 8003040:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003044:	2300      	movs	r3, #0
 8003046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800304a:	2300      	movs	r3, #0
 800304c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003058:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800305c:	2500      	movs	r5, #0
 800305e:	ea54 0305 	orrs.w	r3, r4, r5
 8003062:	d049      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800306a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800306e:	d02f      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003070:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003074:	d828      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800307a:	d01a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800307c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003080:	d822      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800308a:	d007      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800308c:	e01c      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800308e:	4bb8      	ldr	r3, [pc, #736]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	4ab7      	ldr	r2, [pc, #732]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003098:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800309a:	e01a      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800309c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030a0:	3308      	adds	r3, #8
 80030a2:	2102      	movs	r1, #2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 fc8f 	bl	80049c8 <RCCEx_PLL2_Config>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030b0:	e00f      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b6:	3328      	adds	r3, #40	; 0x28
 80030b8:	2102      	movs	r1, #2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f001 fd36 	bl	8004b2c <RCCEx_PLL3_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030c6:	e004      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030ce:	e000      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80030d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10a      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80030da:	4ba5      	ldr	r3, [pc, #660]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030de:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80030e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e8:	4aa1      	ldr	r2, [pc, #644]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030ea:	430b      	orrs	r3, r1
 80030ec:	6513      	str	r3, [r2, #80]	; 0x50
 80030ee:	e003      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003100:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003104:	f04f 0900 	mov.w	r9, #0
 8003108:	ea58 0309 	orrs.w	r3, r8, r9
 800310c:	d047      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800310e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	2b04      	cmp	r3, #4
 8003116:	d82a      	bhi.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003118:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003135 	.word	0x08003135
 8003124:	08003143 	.word	0x08003143
 8003128:	08003159 	.word	0x08003159
 800312c:	08003177 	.word	0x08003177
 8003130:	08003177 	.word	0x08003177
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003134:	4b8e      	ldr	r3, [pc, #568]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	4a8d      	ldr	r2, [pc, #564]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800313a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800313e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003140:	e01a      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003146:	3308      	adds	r3, #8
 8003148:	2100      	movs	r1, #0
 800314a:	4618      	mov	r0, r3
 800314c:	f001 fc3c 	bl	80049c8 <RCCEx_PLL2_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003156:	e00f      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800315c:	3328      	adds	r3, #40	; 0x28
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f001 fce3 	bl	8004b2c <RCCEx_PLL3_Config>
 8003166:	4603      	mov	r3, r0
 8003168:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800316c:	e004      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003174:	e000      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003178:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10a      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003180:	4b7b      	ldr	r3, [pc, #492]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003184:	f023 0107 	bic.w	r1, r3, #7
 8003188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	4a78      	ldr	r2, [pc, #480]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003190:	430b      	orrs	r3, r1
 8003192:	6513      	str	r3, [r2, #80]	; 0x50
 8003194:	e003      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003196:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800319a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80031aa:	f04f 0b00 	mov.w	fp, #0
 80031ae:	ea5a 030b 	orrs.w	r3, sl, fp
 80031b2:	d04c      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80031b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031be:	d030      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80031c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c4:	d829      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80031c6:	2bc0      	cmp	r3, #192	; 0xc0
 80031c8:	d02d      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80031ca:	2bc0      	cmp	r3, #192	; 0xc0
 80031cc:	d825      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80031ce:	2b80      	cmp	r3, #128	; 0x80
 80031d0:	d018      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80031d2:	2b80      	cmp	r3, #128	; 0x80
 80031d4:	d821      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80031da:	2b40      	cmp	r3, #64	; 0x40
 80031dc:	d007      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80031de:	e01c      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e0:	4b63      	ldr	r3, [pc, #396]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	4a62      	ldr	r2, [pc, #392]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031ec:	e01c      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f2:	3308      	adds	r3, #8
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f001 fbe6 	bl	80049c8 <RCCEx_PLL2_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003202:	e011      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003208:	3328      	adds	r3, #40	; 0x28
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f001 fc8d 	bl	8004b2c <RCCEx_PLL3_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003218:	e006      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003220:	e002      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003222:	bf00      	nop
 8003224:	e000      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003228:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003230:	4b4f      	ldr	r3, [pc, #316]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003234:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003238:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	4a4c      	ldr	r2, [pc, #304]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003240:	430b      	orrs	r3, r1
 8003242:	6513      	str	r3, [r2, #80]	; 0x50
 8003244:	e003      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800324a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800324e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800325a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800325e:	2300      	movs	r3, #0
 8003260:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003264:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003268:	460b      	mov	r3, r1
 800326a:	4313      	orrs	r3, r2
 800326c:	d053      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800326e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003272:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003276:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800327a:	d035      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800327c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003280:	d82e      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003282:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003286:	d031      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003288:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800328c:	d828      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800328e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003292:	d01a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003294:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003298:	d822      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800329e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032a2:	d007      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80032a4:	e01c      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a6:	4b32      	ldr	r3, [pc, #200]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	4a31      	ldr	r2, [pc, #196]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032b2:	e01c      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b8:	3308      	adds	r3, #8
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f001 fb83 	bl	80049c8 <RCCEx_PLL2_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80032c8:	e011      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ce:	3328      	adds	r3, #40	; 0x28
 80032d0:	2100      	movs	r1, #0
 80032d2:	4618      	mov	r0, r3
 80032d4:	f001 fc2a 	bl	8004b2c <RCCEx_PLL3_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032de:	e006      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032e6:	e002      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80032e8:	bf00      	nop
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80032ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80032f6:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80032fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003302:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003306:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003308:	430b      	orrs	r3, r1
 800330a:	6593      	str	r3, [r2, #88]	; 0x58
 800330c:	e003      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003312:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003322:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003326:	2300      	movs	r3, #0
 8003328:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800332c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003330:	460b      	mov	r3, r1
 8003332:	4313      	orrs	r3, r2
 8003334:	d056      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800333e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003342:	d038      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003344:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003348:	d831      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800334a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800334e:	d034      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003350:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003354:	d82b      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800335a:	d01d      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800335c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003360:	d825      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003362:	2b00      	cmp	r3, #0
 8003364:	d006      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003366:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800336c:	e01f      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800336e:	bf00      	nop
 8003370:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003374:	4ba2      	ldr	r3, [pc, #648]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	4aa1      	ldr	r2, [pc, #644]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800337a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003380:	e01c      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003386:	3308      	adds	r3, #8
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f001 fb1c 	bl	80049c8 <RCCEx_PLL2_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003396:	e011      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800339c:	3328      	adds	r3, #40	; 0x28
 800339e:	2100      	movs	r1, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f001 fbc3 	bl	8004b2c <RCCEx_PLL3_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033ac:	e006      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033b4:	e002      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80033b6:	bf00      	nop
 80033b8:	e000      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80033ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10b      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033c4:	4b8e      	ldr	r3, [pc, #568]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80033cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033d4:	4a8a      	ldr	r2, [pc, #552]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033d6:	430b      	orrs	r3, r1
 80033d8:	6593      	str	r3, [r2, #88]	; 0x58
 80033da:	e003      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80033f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80033fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80033fe:	460b      	mov	r3, r1
 8003400:	4313      	orrs	r3, r2
 8003402:	d03a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340a:	2b30      	cmp	r3, #48	; 0x30
 800340c:	d01f      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800340e:	2b30      	cmp	r3, #48	; 0x30
 8003410:	d819      	bhi.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003412:	2b20      	cmp	r3, #32
 8003414:	d00c      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003416:	2b20      	cmp	r3, #32
 8003418:	d815      	bhi.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d019      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800341e:	2b10      	cmp	r3, #16
 8003420:	d111      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003422:	4b77      	ldr	r3, [pc, #476]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	4a76      	ldr	r2, [pc, #472]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800342e:	e011      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003434:	3308      	adds	r3, #8
 8003436:	2102      	movs	r1, #2
 8003438:	4618      	mov	r0, r3
 800343a:	f001 fac5 	bl	80049c8 <RCCEx_PLL2_Config>
 800343e:	4603      	mov	r3, r0
 8003440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003444:	e006      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800344c:	e002      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800344e:	bf00      	nop
 8003450:	e000      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003454:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10a      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800345c:	4b68      	ldr	r3, [pc, #416]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800345e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003460:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346a:	4a65      	ldr	r2, [pc, #404]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800346c:	430b      	orrs	r3, r1
 800346e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003470:	e003      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003476:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800347a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003486:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800348a:	2300      	movs	r3, #0
 800348c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003490:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003494:	460b      	mov	r3, r1
 8003496:	4313      	orrs	r3, r2
 8003498:	d051      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800349a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800349e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a4:	d035      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80034a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034aa:	d82e      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80034ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034b0:	d031      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80034b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034b6:	d828      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80034b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034bc:	d01a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80034be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c2:	d822      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80034c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034cc:	d007      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80034ce:	e01c      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d0:	4b4b      	ldr	r3, [pc, #300]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	4a4a      	ldr	r2, [pc, #296]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034dc:	e01c      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e2:	3308      	adds	r3, #8
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 fa6e 	bl	80049c8 <RCCEx_PLL2_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034f2:	e011      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f8:	3328      	adds	r3, #40	; 0x28
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 fb15 	bl	8004b2c <RCCEx_PLL3_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003508:	e006      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003510:	e002      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003512:	bf00      	nop
 8003514:	e000      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003518:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10a      	bne.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003520:	4b37      	ldr	r3, [pc, #220]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003524:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800352c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352e:	4a34      	ldr	r2, [pc, #208]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003530:	430b      	orrs	r3, r1
 8003532:	6513      	str	r3, [r2, #80]	; 0x50
 8003534:	e003      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003536:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800353a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003546:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800354a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800354e:	2300      	movs	r3, #0
 8003550:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003554:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003558:	460b      	mov	r3, r1
 800355a:	4313      	orrs	r3, r2
 800355c:	d056      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800355e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003568:	d033      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800356a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800356e:	d82c      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003570:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003574:	d02f      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003576:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800357a:	d826      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800357c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003580:	d02b      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003582:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003586:	d820      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800358c:	d012      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800358e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003592:	d81a      	bhi.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d022      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359c:	d115      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a2:	3308      	adds	r3, #8
 80035a4:	2101      	movs	r1, #1
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 fa0e 	bl	80049c8 <RCCEx_PLL2_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035b2:	e015      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b8:	3328      	adds	r3, #40	; 0x28
 80035ba:	2101      	movs	r1, #1
 80035bc:	4618      	mov	r0, r3
 80035be:	f001 fab5 	bl	8004b2c <RCCEx_PLL3_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035c8:	e00a      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035d0:	e006      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035d2:	bf00      	nop
 80035d4:	e004      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035d6:	bf00      	nop
 80035d8:	e002      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035da:	bf00      	nop
 80035dc:	e000      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10d      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80035f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f6:	4a02      	ldr	r2, [pc, #8]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6513      	str	r3, [r2, #80]	; 0x50
 80035fc:	e006      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80035fe:	bf00      	nop
 8003600:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003604:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003608:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800361c:	2300      	movs	r3, #0
 800361e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003622:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003626:	460b      	mov	r3, r1
 8003628:	4313      	orrs	r3, r2
 800362a:	d055      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800362c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003630:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003638:	d033      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800363a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800363e:	d82c      	bhi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003644:	d02f      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364a:	d826      	bhi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800364c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003650:	d02b      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003652:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003656:	d820      	bhi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800365c:	d012      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800365e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003662:	d81a      	bhi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d022      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800366c:	d115      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800366e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003672:	3308      	adds	r3, #8
 8003674:	2101      	movs	r1, #1
 8003676:	4618      	mov	r0, r3
 8003678:	f001 f9a6 	bl	80049c8 <RCCEx_PLL2_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003682:	e015      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003688:	3328      	adds	r3, #40	; 0x28
 800368a:	2101      	movs	r1, #1
 800368c:	4618      	mov	r0, r3
 800368e:	f001 fa4d 	bl	8004b2c <RCCEx_PLL3_Config>
 8003692:	4603      	mov	r3, r0
 8003694:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003698:	e00a      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036a0:	e006      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036a2:	bf00      	nop
 80036a4:	e004      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036a6:	bf00      	nop
 80036a8:	e002      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10b      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80036b8:	4ba3      	ldr	r3, [pc, #652]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036bc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036c8:	4a9f      	ldr	r2, [pc, #636]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ca:	430b      	orrs	r3, r1
 80036cc:	6593      	str	r3, [r2, #88]	; 0x58
 80036ce:	e003      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80036e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80036ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	d037      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003702:	d00e      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003708:	d816      	bhi.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800370a:	2b00      	cmp	r3, #0
 800370c:	d018      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800370e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003712:	d111      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003714:	4b8c      	ldr	r3, [pc, #560]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	4a8b      	ldr	r2, [pc, #556]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800371a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003720:	e00f      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003726:	3308      	adds	r3, #8
 8003728:	2101      	movs	r1, #1
 800372a:	4618      	mov	r0, r3
 800372c:	f001 f94c 	bl	80049c8 <RCCEx_PLL2_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003736:	e004      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800373e:	e000      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10a      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800374a:	4b7f      	ldr	r3, [pc, #508]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800374c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003758:	4a7b      	ldr	r2, [pc, #492]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800375a:	430b      	orrs	r3, r1
 800375c:	6513      	str	r3, [r2, #80]	; 0x50
 800375e:	e003      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003764:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003778:	2300      	movs	r3, #0
 800377a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800377e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003782:	460b      	mov	r3, r1
 8003784:	4313      	orrs	r3, r2
 8003786:	d039      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800378c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378e:	2b03      	cmp	r3, #3
 8003790:	d81c      	bhi.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003792:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	080037d5 	.word	0x080037d5
 800379c:	080037a9 	.word	0x080037a9
 80037a0:	080037b7 	.word	0x080037b7
 80037a4:	080037d5 	.word	0x080037d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a8:	4b67      	ldr	r3, [pc, #412]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	4a66      	ldr	r2, [pc, #408]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037b4:	e00f      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ba:	3308      	adds	r3, #8
 80037bc:	2102      	movs	r1, #2
 80037be:	4618      	mov	r0, r3
 80037c0:	f001 f902 	bl	80049c8 <RCCEx_PLL2_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037ca:	e004      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037d2:	e000      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80037d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037de:	4b5a      	ldr	r3, [pc, #360]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e2:	f023 0103 	bic.w	r1, r3, #3
 80037e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ec:	4a56      	ldr	r2, [pc, #344]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037ee:	430b      	orrs	r3, r1
 80037f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037f2:	e003      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003804:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003808:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800380c:	2300      	movs	r3, #0
 800380e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003812:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003816:	460b      	mov	r3, r1
 8003818:	4313      	orrs	r3, r2
 800381a:	f000 809f 	beq.w	800395c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800381e:	4b4b      	ldr	r3, [pc, #300]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a4a      	ldr	r2, [pc, #296]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003828:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800382a:	f7fe f84f 	bl	80018cc <HAL_GetTick>
 800382e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003832:	e00b      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003834:	f7fe f84a 	bl	80018cc <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b64      	cmp	r3, #100	; 0x64
 8003842:	d903      	bls.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800384a:	e005      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800384c:	4b3f      	ldr	r3, [pc, #252]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ed      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003858:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800385c:	2b00      	cmp	r3, #0
 800385e:	d179      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003860:	4b39      	ldr	r3, [pc, #228]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003862:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003868:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800386c:	4053      	eors	r3, r2
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	2b00      	cmp	r3, #0
 8003874:	d015      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003876:	4b34      	ldr	r3, [pc, #208]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800387e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003882:	4b31      	ldr	r3, [pc, #196]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	4a30      	ldr	r2, [pc, #192]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800388c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800388e:	4b2e      	ldr	r3, [pc, #184]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	4a2d      	ldr	r2, [pc, #180]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003898:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800389a:	4a2b      	ldr	r2, [pc, #172]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800389c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ae:	d118      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b0:	f7fe f80c 	bl	80018cc <HAL_GetTick>
 80038b4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038b8:	e00d      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ba:	f7fe f807 	bl	80018cc <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80038c4:	1ad2      	subs	r2, r2, r3
 80038c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d903      	bls.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80038d4:	e005      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038d6:	4b1c      	ldr	r3, [pc, #112]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0eb      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80038e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d129      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038fa:	d10e      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80038fc:	4b12      	ldr	r3, [pc, #72]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003904:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003908:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800390c:	091a      	lsrs	r2, r3, #4
 800390e:	4b10      	ldr	r3, [pc, #64]	; (8003950 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003910:	4013      	ands	r3, r2
 8003912:	4a0d      	ldr	r2, [pc, #52]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003914:	430b      	orrs	r3, r1
 8003916:	6113      	str	r3, [r2, #16]
 8003918:	e005      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003920:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003924:	6113      	str	r3, [r2, #16]
 8003926:	4b08      	ldr	r3, [pc, #32]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003928:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800392e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003932:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003936:	4a04      	ldr	r2, [pc, #16]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003938:	430b      	orrs	r3, r1
 800393a:	6713      	str	r3, [r2, #112]	; 0x70
 800393c:	e00e      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800393e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003942:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003946:	e009      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003948:	58024400 	.word	0x58024400
 800394c:	58024800 	.word	0x58024800
 8003950:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003954:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003958:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f002 0301 	and.w	r3, r2, #1
 8003968:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800396c:	2300      	movs	r3, #0
 800396e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003972:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003976:	460b      	mov	r3, r1
 8003978:	4313      	orrs	r3, r2
 800397a:	f000 8089 	beq.w	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003984:	2b28      	cmp	r3, #40	; 0x28
 8003986:	d86b      	bhi.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	08003a69 	.word	0x08003a69
 8003994:	08003a61 	.word	0x08003a61
 8003998:	08003a61 	.word	0x08003a61
 800399c:	08003a61 	.word	0x08003a61
 80039a0:	08003a61 	.word	0x08003a61
 80039a4:	08003a61 	.word	0x08003a61
 80039a8:	08003a61 	.word	0x08003a61
 80039ac:	08003a61 	.word	0x08003a61
 80039b0:	08003a35 	.word	0x08003a35
 80039b4:	08003a61 	.word	0x08003a61
 80039b8:	08003a61 	.word	0x08003a61
 80039bc:	08003a61 	.word	0x08003a61
 80039c0:	08003a61 	.word	0x08003a61
 80039c4:	08003a61 	.word	0x08003a61
 80039c8:	08003a61 	.word	0x08003a61
 80039cc:	08003a61 	.word	0x08003a61
 80039d0:	08003a4b 	.word	0x08003a4b
 80039d4:	08003a61 	.word	0x08003a61
 80039d8:	08003a61 	.word	0x08003a61
 80039dc:	08003a61 	.word	0x08003a61
 80039e0:	08003a61 	.word	0x08003a61
 80039e4:	08003a61 	.word	0x08003a61
 80039e8:	08003a61 	.word	0x08003a61
 80039ec:	08003a61 	.word	0x08003a61
 80039f0:	08003a69 	.word	0x08003a69
 80039f4:	08003a61 	.word	0x08003a61
 80039f8:	08003a61 	.word	0x08003a61
 80039fc:	08003a61 	.word	0x08003a61
 8003a00:	08003a61 	.word	0x08003a61
 8003a04:	08003a61 	.word	0x08003a61
 8003a08:	08003a61 	.word	0x08003a61
 8003a0c:	08003a61 	.word	0x08003a61
 8003a10:	08003a69 	.word	0x08003a69
 8003a14:	08003a61 	.word	0x08003a61
 8003a18:	08003a61 	.word	0x08003a61
 8003a1c:	08003a61 	.word	0x08003a61
 8003a20:	08003a61 	.word	0x08003a61
 8003a24:	08003a61 	.word	0x08003a61
 8003a28:	08003a61 	.word	0x08003a61
 8003a2c:	08003a61 	.word	0x08003a61
 8003a30:	08003a69 	.word	0x08003a69
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a38:	3308      	adds	r3, #8
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 ffc3 	bl	80049c8 <RCCEx_PLL2_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a48:	e00f      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4e:	3328      	adds	r3, #40	; 0x28
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f001 f86a 	bl	8004b2c <RCCEx_PLL3_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a5e:	e004      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a66:	e000      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a72:	4bbf      	ldr	r3, [pc, #764]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a76:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a80:	4abb      	ldr	r2, [pc, #748]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a82:	430b      	orrs	r3, r1
 8003a84:	6553      	str	r3, [r2, #84]	; 0x54
 8003a86:	e003      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a98:	f002 0302 	and.w	r3, r2, #2
 8003a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003aa6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4313      	orrs	r3, r2
 8003aae:	d041      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d824      	bhi.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003aba:	a201      	add	r2, pc, #4	; (adr r2, 8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac0:	08003b0d 	.word	0x08003b0d
 8003ac4:	08003ad9 	.word	0x08003ad9
 8003ac8:	08003aef 	.word	0x08003aef
 8003acc:	08003b0d 	.word	0x08003b0d
 8003ad0:	08003b0d 	.word	0x08003b0d
 8003ad4:	08003b0d 	.word	0x08003b0d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003adc:	3308      	adds	r3, #8
 8003ade:	2101      	movs	r1, #1
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f000 ff71 	bl	80049c8 <RCCEx_PLL2_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003aec:	e00f      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af2:	3328      	adds	r3, #40	; 0x28
 8003af4:	2101      	movs	r1, #1
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 f818 	bl	8004b2c <RCCEx_PLL3_Config>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b02:	e004      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b0a:	e000      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b16:	4b96      	ldr	r3, [pc, #600]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	f023 0107 	bic.w	r1, r3, #7
 8003b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b24:	4a92      	ldr	r2, [pc, #584]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b26:	430b      	orrs	r3, r1
 8003b28:	6553      	str	r3, [r2, #84]	; 0x54
 8003b2a:	e003      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f002 0304 	and.w	r3, r2, #4
 8003b40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b4a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4313      	orrs	r3, r2
 8003b52:	d044      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5c:	2b05      	cmp	r3, #5
 8003b5e:	d825      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003b60:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003bb5 	.word	0x08003bb5
 8003b6c:	08003b81 	.word	0x08003b81
 8003b70:	08003b97 	.word	0x08003b97
 8003b74:	08003bb5 	.word	0x08003bb5
 8003b78:	08003bb5 	.word	0x08003bb5
 8003b7c:	08003bb5 	.word	0x08003bb5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b84:	3308      	adds	r3, #8
 8003b86:	2101      	movs	r1, #1
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 ff1d 	bl	80049c8 <RCCEx_PLL2_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b94:	e00f      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9a:	3328      	adds	r3, #40	; 0x28
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 ffc4 	bl	8004b2c <RCCEx_PLL3_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003baa:	e004      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bbe:	4b6c      	ldr	r3, [pc, #432]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	f023 0107 	bic.w	r1, r3, #7
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bce:	4a68      	ldr	r2, [pc, #416]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8003bd4:	e003      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	f002 0320 	and.w	r3, r2, #32
 8003bea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bf4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	d055      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c0a:	d033      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c10:	d82c      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c16:	d02f      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1c:	d826      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c22:	d02b      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003c24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c28:	d820      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c2e:	d012      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c34:	d81a      	bhi.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d022      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003c3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c3e:	d115      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c44:	3308      	adds	r3, #8
 8003c46:	2100      	movs	r1, #0
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 febd 	bl	80049c8 <RCCEx_PLL2_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c54:	e015      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5a:	3328      	adds	r3, #40	; 0x28
 8003c5c:	2102      	movs	r1, #2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 ff64 	bl	8004b2c <RCCEx_PLL3_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c72:	e006      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c74:	bf00      	nop
 8003c76:	e004      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c78:	bf00      	nop
 8003c7a:	e002      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c7c:	bf00      	nop
 8003c7e:	e000      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10b      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c8a:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9a:	4a35      	ldr	r2, [pc, #212]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6553      	str	r3, [r2, #84]	; 0x54
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ca6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003cc0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	d058      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cd2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cd6:	d033      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003cd8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cdc:	d82c      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce2:	d02f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce8:	d826      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cee:	d02b      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003cf0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cf4:	d820      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cfa:	d012      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d00:	d81a      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d022      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0a:	d115      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d10:	3308      	adds	r3, #8
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 fe57 	bl	80049c8 <RCCEx_PLL2_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d20:	e015      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d26:	3328      	adds	r3, #40	; 0x28
 8003d28:	2102      	movs	r1, #2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 fefe 	bl	8004b2c <RCCEx_PLL3_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d36:	e00a      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d3e:	e006      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d40:	bf00      	nop
 8003d42:	e004      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d44:	bf00      	nop
 8003d46:	e002      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d48:	bf00      	nop
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10e      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d66:	4a02      	ldr	r2, [pc, #8]	; (8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d6c:	e006      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003d6e:	bf00      	nop
 8003d70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003d88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d92:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003d96:	460b      	mov	r3, r1
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	d055      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003da4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003da8:	d033      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003daa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003dae:	d82c      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db4:	d02f      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dba:	d826      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003dbc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dc0:	d02b      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003dc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003dc6:	d820      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003dc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dcc:	d012      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003dce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dd2:	d81a      	bhi.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d022      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ddc:	d115      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de2:	3308      	adds	r3, #8
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fdee 	bl	80049c8 <RCCEx_PLL2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003df2:	e015      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df8:	3328      	adds	r3, #40	; 0x28
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fe95 	bl	8004b2c <RCCEx_PLL3_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e08:	e00a      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e10:	e006      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e12:	bf00      	nop
 8003e14:	e004      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e16:	bf00      	nop
 8003e18:	e002      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e1a:	bf00      	nop
 8003e1c:	e000      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10b      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e28:	4ba1      	ldr	r3, [pc, #644]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e38:	4a9d      	ldr	r2, [pc, #628]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e3e:	e003      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f002 0308 	and.w	r3, r2, #8
 8003e54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e5e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003e62:	460b      	mov	r3, r1
 8003e64:	4313      	orrs	r3, r2
 8003e66:	d01e      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e74:	d10c      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7a:	3328      	adds	r3, #40	; 0x28
 8003e7c:	2102      	movs	r1, #2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fe54 	bl	8004b2c <RCCEx_PLL3_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e90:	4b87      	ldr	r3, [pc, #540]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ea0:	4a83      	ldr	r2, [pc, #524]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ea2:	430b      	orrs	r3, r1
 8003ea4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	f002 0310 	and.w	r3, r2, #16
 8003eb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ebc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	d01e      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed2:	d10c      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed8:	3328      	adds	r3, #40	; 0x28
 8003eda:	2102      	movs	r1, #2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fe25 	bl	8004b2c <RCCEx_PLL3_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003eee:	4b70      	ldr	r3, [pc, #448]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003efe:	4a6c      	ldr	r2, [pc, #432]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003f10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f1a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4313      	orrs	r3, r2
 8003f22:	d03e      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f30:	d022      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f36:	d81b      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f40:	d00b      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003f42:	e015      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f48:	3308      	adds	r3, #8
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fd3b 	bl	80049c8 <RCCEx_PLL2_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f58:	e00f      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5e:	3328      	adds	r3, #40	; 0x28
 8003f60:	2102      	movs	r1, #2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fde2 	bl	8004b2c <RCCEx_PLL3_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f6e:	e004      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f76:	e000      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10b      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f82:	4b4b      	ldr	r3, [pc, #300]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f86:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f92:	4a47      	ldr	r2, [pc, #284]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6593      	str	r3, [r2, #88]	; 0x58
 8003f98:	e003      	b.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003faa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003fae:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fb4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	d03b      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fca:	d01f      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003fcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fd0:	d818      	bhi.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd6:	d003      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003fd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fdc:	d007      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003fde:	e011      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe0:	4b33      	ldr	r3, [pc, #204]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	4a32      	ldr	r2, [pc, #200]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fec:	e00f      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff2:	3328      	adds	r3, #40	; 0x28
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 fd98 	bl	8004b2c <RCCEx_PLL3_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004002:	e004      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800400a:	e000      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800400c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800400e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10b      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004016:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004028:	430b      	orrs	r3, r1
 800402a:	6553      	str	r3, [r2, #84]	; 0x54
 800402c:	e003      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004032:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004042:	673b      	str	r3, [r7, #112]	; 0x70
 8004044:	2300      	movs	r3, #0
 8004046:	677b      	str	r3, [r7, #116]	; 0x74
 8004048:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800404c:	460b      	mov	r3, r1
 800404e:	4313      	orrs	r3, r2
 8004050:	d034      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004060:	d007      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004062:	e011      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004064:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004068:	4a11      	ldr	r2, [pc, #68]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800406a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004070:	e00e      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004076:	3308      	adds	r3, #8
 8004078:	2102      	movs	r1, #2
 800407a:	4618      	mov	r0, r3
 800407c:	f000 fca4 	bl	80049c8 <RCCEx_PLL2_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004086:	e003      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800408e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004090:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10d      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800409a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040a6:	4a02      	ldr	r2, [pc, #8]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040a8:	430b      	orrs	r3, r1
 80040aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040ac:	e006      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80040ae:	bf00      	nop
 80040b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80040c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80040ca:	2300      	movs	r3, #0
 80040cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040ce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80040d2:	460b      	mov	r3, r1
 80040d4:	4313      	orrs	r3, r2
 80040d6:	d00c      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040dc:	3328      	adds	r3, #40	; 0x28
 80040de:	2102      	movs	r1, #2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f000 fd23 	bl	8004b2c <RCCEx_PLL3_Config>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d002      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80040fe:	663b      	str	r3, [r7, #96]	; 0x60
 8004100:	2300      	movs	r3, #0
 8004102:	667b      	str	r3, [r7, #100]	; 0x64
 8004104:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004108:	460b      	mov	r3, r1
 800410a:	4313      	orrs	r3, r2
 800410c:	d038      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411a:	d018      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800411c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004120:	d811      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004126:	d014      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412c:	d80b      	bhi.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d011      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004136:	d106      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004138:	4bc3      	ldr	r3, [pc, #780]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	4ac2      	ldr	r2, [pc, #776]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800413e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004142:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004144:	e008      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800414c:	e004      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800414e:	bf00      	nop
 8004150:	e002      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004152:	bf00      	nop
 8004154:	e000      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004158:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10b      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004160:	4bb9      	ldr	r3, [pc, #740]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004170:	4ab5      	ldr	r2, [pc, #724]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004172:	430b      	orrs	r3, r1
 8004174:	6553      	str	r3, [r2, #84]	; 0x54
 8004176:	e003      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004178:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800417c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004188:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800418c:	65bb      	str	r3, [r7, #88]	; 0x58
 800418e:	2300      	movs	r3, #0
 8004190:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004192:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004196:	460b      	mov	r3, r1
 8004198:	4313      	orrs	r3, r2
 800419a:	d009      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800419c:	4baa      	ldr	r3, [pc, #680]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800419e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041aa:	4aa7      	ldr	r2, [pc, #668]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80041bc:	653b      	str	r3, [r7, #80]	; 0x50
 80041be:	2300      	movs	r3, #0
 80041c0:	657b      	str	r3, [r7, #84]	; 0x54
 80041c2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80041c6:	460b      	mov	r3, r1
 80041c8:	4313      	orrs	r3, r2
 80041ca:	d00a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80041cc:	4b9e      	ldr	r3, [pc, #632]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80041d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80041dc:	4a9a      	ldr	r2, [pc, #616]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041de:	430b      	orrs	r3, r1
 80041e0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ea:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80041ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80041f0:	2300      	movs	r3, #0
 80041f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80041f8:	460b      	mov	r3, r1
 80041fa:	4313      	orrs	r3, r2
 80041fc:	d009      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041fe:	4b92      	ldr	r3, [pc, #584]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004202:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800420a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800420c:	4a8e      	ldr	r2, [pc, #568]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800420e:	430b      	orrs	r3, r1
 8004210:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800421e:	643b      	str	r3, [r7, #64]	; 0x40
 8004220:	2300      	movs	r3, #0
 8004222:	647b      	str	r3, [r7, #68]	; 0x44
 8004224:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004228:	460b      	mov	r3, r1
 800422a:	4313      	orrs	r3, r2
 800422c:	d00e      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800422e:	4b86      	ldr	r3, [pc, #536]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	4a85      	ldr	r2, [pc, #532]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004234:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004238:	6113      	str	r3, [r2, #16]
 800423a:	4b83      	ldr	r3, [pc, #524]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800423c:	6919      	ldr	r1, [r3, #16]
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004242:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004246:	4a80      	ldr	r2, [pc, #512]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004248:	430b      	orrs	r3, r1
 800424a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004258:	63bb      	str	r3, [r7, #56]	; 0x38
 800425a:	2300      	movs	r3, #0
 800425c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800425e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004262:	460b      	mov	r3, r1
 8004264:	4313      	orrs	r3, r2
 8004266:	d009      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004268:	4b77      	ldr	r3, [pc, #476]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800426a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800426c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	4a74      	ldr	r2, [pc, #464]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004278:	430b      	orrs	r3, r1
 800427a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800427c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004284:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004288:	633b      	str	r3, [r7, #48]	; 0x30
 800428a:	2300      	movs	r3, #0
 800428c:	637b      	str	r3, [r7, #52]	; 0x34
 800428e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004292:	460b      	mov	r3, r1
 8004294:	4313      	orrs	r3, r2
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004298:	4b6b      	ldr	r3, [pc, #428]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800429a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a8:	4a67      	ldr	r2, [pc, #412]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042aa:	430b      	orrs	r3, r1
 80042ac:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	2100      	movs	r1, #0
 80042b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80042c4:	460b      	mov	r3, r1
 80042c6:	4313      	orrs	r3, r2
 80042c8:	d011      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ce:	3308      	adds	r3, #8
 80042d0:	2100      	movs	r1, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fb78 	bl	80049c8 <RCCEx_PLL2_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80042de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f6:	2100      	movs	r1, #0
 80042f8:	6239      	str	r1, [r7, #32]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004300:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004304:	460b      	mov	r3, r1
 8004306:	4313      	orrs	r3, r2
 8004308:	d011      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800430a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800430e:	3308      	adds	r3, #8
 8004310:	2101      	movs	r1, #1
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fb58 	bl	80049c8 <RCCEx_PLL2_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800431e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800432a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	2100      	movs	r1, #0
 8004338:	61b9      	str	r1, [r7, #24]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	61fb      	str	r3, [r7, #28]
 8004340:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004344:	460b      	mov	r3, r1
 8004346:	4313      	orrs	r3, r2
 8004348:	d011      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800434a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800434e:	3308      	adds	r3, #8
 8004350:	2102      	movs	r1, #2
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fb38 	bl	80049c8 <RCCEx_PLL2_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800435e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004362:	2b00      	cmp	r3, #0
 8004364:	d003      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004366:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800436a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	2100      	movs	r1, #0
 8004378:	6139      	str	r1, [r7, #16]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004384:	460b      	mov	r3, r1
 8004386:	4313      	orrs	r3, r2
 8004388:	d011      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800438a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438e:	3328      	adds	r3, #40	; 0x28
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fbca 	bl	8004b2c <RCCEx_PLL3_Config>
 8004398:	4603      	mov	r3, r0
 800439a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800439e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	2100      	movs	r1, #0
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	f003 0310 	and.w	r3, r3, #16
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043c4:	460b      	mov	r3, r1
 80043c6:	4313      	orrs	r3, r2
 80043c8:	d011      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ce:	3328      	adds	r3, #40	; 0x28
 80043d0:	2101      	movs	r1, #1
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fbaa 	bl	8004b2c <RCCEx_PLL3_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80043de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	2100      	movs	r1, #0
 80043f8:	6039      	str	r1, [r7, #0]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004404:	460b      	mov	r3, r1
 8004406:	4313      	orrs	r3, r2
 8004408:	d011      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800440a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440e:	3328      	adds	r3, #40	; 0x28
 8004410:	2102      	movs	r1, #2
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fb8a 	bl	8004b2c <RCCEx_PLL3_Config>
 8004418:	4603      	mov	r3, r0
 800441a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800441e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800442a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800442e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	e000      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
}
 800443c:	4618      	mov	r0, r3
 800443e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004442:	46bd      	mov	sp, r7
 8004444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004448:	58024400 	.word	0x58024400

0800444c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004450:	f7fe fd96 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4904      	ldr	r1, [pc, #16]	; (8004474 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800446c:	4618      	mov	r0, r3
 800446e:	bd80      	pop	{r7, pc}
 8004470:	58024400 	.word	0x58024400
 8004474:	08007ff0 	.word	0x08007ff0

08004478 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004478:	b480      	push	{r7}
 800447a:	b089      	sub	sp, #36	; 0x24
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004480:	4ba1      	ldr	r3, [pc, #644]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800448a:	4b9f      	ldr	r3, [pc, #636]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	0b1b      	lsrs	r3, r3, #12
 8004490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004494:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004496:	4b9c      	ldr	r3, [pc, #624]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	091b      	lsrs	r3, r3, #4
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80044a2:	4b99      	ldr	r3, [pc, #612]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	08db      	lsrs	r3, r3, #3
 80044a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	fb02 f303 	mul.w	r3, r2, r3
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 8111 	beq.w	80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	f000 8083 	beq.w	80045d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	f200 80a1 	bhi.w	8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d056      	beq.n	8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80044e2:	e099      	b.n	8004618 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044e4:	4b88      	ldr	r3, [pc, #544]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0320 	and.w	r3, r3, #32
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d02d      	beq.n	800454c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044f0:	4b85      	ldr	r3, [pc, #532]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	08db      	lsrs	r3, r3, #3
 80044f6:	f003 0303 	and.w	r3, r3, #3
 80044fa:	4a84      	ldr	r2, [pc, #528]	; (800470c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80044fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004500:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	ee07 3a90 	vmov	s15, r3
 8004508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451a:	4b7b      	ldr	r3, [pc, #492]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800452a:	ed97 6a03 	vldr	s12, [r7, #12]
 800452e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004546:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800454a:	e087      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004556:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004714 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800455a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455e:	4b6a      	ldr	r3, [pc, #424]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004572:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800457a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800458e:	e065      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800459a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800459e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a2:	4b59      	ldr	r3, [pc, #356]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045d2:	e043      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800471c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80045e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e6:	4b48      	ldr	r3, [pc, #288]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004616:	e021      	b.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004622:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004718 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462a:	4b37      	ldr	r3, [pc, #220]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463a:	ed97 6a03 	vldr	s12, [r7, #12]
 800463e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004710 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800464e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800465a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800465c:	4b2a      	ldr	r3, [pc, #168]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	0a5b      	lsrs	r3, r3, #9
 8004662:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004672:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004676:	edd7 6a07 	vldr	s13, [r7, #28]
 800467a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800467e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004682:	ee17 2a90 	vmov	r2, s15
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800468a:	4b1f      	ldr	r3, [pc, #124]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	0c1b      	lsrs	r3, r3, #16
 8004690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80046a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b0:	ee17 2a90 	vmov	r2, s15
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80046b8:	4b13      	ldr	r3, [pc, #76]	; (8004708 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	0e1b      	lsrs	r3, r3, #24
 80046be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80046d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046de:	ee17 2a90 	vmov	r2, s15
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046e6:	e008      	b.n	80046fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	609a      	str	r2, [r3, #8]
}
 80046fa:	bf00      	nop
 80046fc:	3724      	adds	r7, #36	; 0x24
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	58024400 	.word	0x58024400
 800470c:	03d09000 	.word	0x03d09000
 8004710:	46000000 	.word	0x46000000
 8004714:	4c742400 	.word	0x4c742400
 8004718:	4a742400 	.word	0x4a742400
 800471c:	4bbebc20 	.word	0x4bbebc20

08004720 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004720:	b480      	push	{r7}
 8004722:	b089      	sub	sp, #36	; 0x24
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004728:	4ba1      	ldr	r3, [pc, #644]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004732:	4b9f      	ldr	r3, [pc, #636]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004736:	0d1b      	lsrs	r3, r3, #20
 8004738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800473c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800473e:	4b9c      	ldr	r3, [pc, #624]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	0a1b      	lsrs	r3, r3, #8
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800474a:	4b99      	ldr	r3, [pc, #612]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	08db      	lsrs	r3, r3, #3
 8004750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004762:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8111 	beq.w	8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	2b02      	cmp	r3, #2
 8004772:	f000 8083 	beq.w	800487c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	2b02      	cmp	r3, #2
 800477a:	f200 80a1 	bhi.w	80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d056      	beq.n	8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800478a:	e099      	b.n	80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800478c:	4b88      	ldr	r3, [pc, #544]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d02d      	beq.n	80047f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004798:	4b85      	ldr	r3, [pc, #532]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	08db      	lsrs	r3, r3, #3
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	4a84      	ldr	r2, [pc, #528]	; (80049b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
 80047a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	ee07 3a90 	vmov	s15, r3
 80047b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c2:	4b7b      	ldr	r3, [pc, #492]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047f2:	e087      	b.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004806:	4b6a      	ldr	r3, [pc, #424]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004816:	ed97 6a03 	vldr	s12, [r7, #12]
 800481a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800481e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800482a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004832:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004836:	e065      	b.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004842:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800484a:	4b59      	ldr	r3, [pc, #356]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800485a:	ed97 6a03 	vldr	s12, [r7, #12]
 800485e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800486a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800486e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800487a:	e043      	b.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004886:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800488a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488e:	4b48      	ldr	r3, [pc, #288]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489e:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048be:	e021      	b.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d2:	4b37      	ldr	r3, [pc, #220]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004902:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004904:	4b2a      	ldr	r3, [pc, #168]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	0a5b      	lsrs	r3, r3, #9
 800490a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800491a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800491e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800492a:	ee17 2a90 	vmov	r2, s15
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004932:	4b1f      	ldr	r3, [pc, #124]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	0c1b      	lsrs	r3, r3, #16
 8004938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004948:	ee37 7a87 	vadd.f32	s14, s15, s14
 800494c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004958:	ee17 2a90 	vmov	r2, s15
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004960:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	0e1b      	lsrs	r3, r3, #24
 8004966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800497a:	edd7 6a07 	vldr	s13, [r7, #28]
 800497e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004986:	ee17 2a90 	vmov	r2, s15
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800498e:	e008      	b.n	80049a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	609a      	str	r2, [r3, #8]
}
 80049a2:	bf00      	nop
 80049a4:	3724      	adds	r7, #36	; 0x24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	58024400 	.word	0x58024400
 80049b4:	03d09000 	.word	0x03d09000
 80049b8:	46000000 	.word	0x46000000
 80049bc:	4c742400 	.word	0x4c742400
 80049c0:	4a742400 	.word	0x4a742400
 80049c4:	4bbebc20 	.word	0x4bbebc20

080049c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049d6:	4b53      	ldr	r3, [pc, #332]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d101      	bne.n	80049e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e099      	b.n	8004b1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049e6:	4b4f      	ldr	r3, [pc, #316]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a4e      	ldr	r2, [pc, #312]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 80049ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f2:	f7fc ff6b 	bl	80018cc <HAL_GetTick>
 80049f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049f8:	e008      	b.n	8004a0c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049fa:	f7fc ff67 	bl	80018cc <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e086      	b.n	8004b1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a0c:	4b45      	ldr	r3, [pc, #276]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f0      	bne.n	80049fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a18:	4b42      	ldr	r3, [pc, #264]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	031b      	lsls	r3, r3, #12
 8004a26:	493f      	ldr	r1, [pc, #252]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	628b      	str	r3, [r1, #40]	; 0x28
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	3b01      	subs	r3, #1
 8004a32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	025b      	lsls	r3, r3, #9
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	041b      	lsls	r3, r3, #16
 8004a4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a5c:	4931      	ldr	r1, [pc, #196]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a62:	4b30      	ldr	r3, [pc, #192]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	492d      	ldr	r1, [pc, #180]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a74:	4b2b      	ldr	r3, [pc, #172]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	f023 0220 	bic.w	r2, r3, #32
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	4928      	ldr	r1, [pc, #160]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a86:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	4a26      	ldr	r2, [pc, #152]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a8c:	f023 0310 	bic.w	r3, r3, #16
 8004a90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a92:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a96:	4b24      	ldr	r3, [pc, #144]	; (8004b28 <RCCEx_PLL2_Config+0x160>)
 8004a98:	4013      	ands	r3, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	69d2      	ldr	r2, [r2, #28]
 8004a9e:	00d2      	lsls	r2, r2, #3
 8004aa0:	4920      	ldr	r1, [pc, #128]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004aa6:	4b1f      	ldr	r3, [pc, #124]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	4a1e      	ldr	r2, [pc, #120]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aac:	f043 0310 	orr.w	r3, r3, #16
 8004ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ab8:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	4a19      	ldr	r2, [pc, #100]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004abe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ac2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ac4:	e00f      	b.n	8004ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d106      	bne.n	8004ada <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004acc:	4b15      	ldr	r3, [pc, #84]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ad6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ad8:	e005      	b.n	8004ae6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ada:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ade:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ae4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ae6:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a0e      	ldr	r2, [pc, #56]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af2:	f7fc feeb 	bl	80018cc <HAL_GetTick>
 8004af6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004af8:	e008      	b.n	8004b0c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004afa:	f7fc fee7 	bl	80018cc <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e006      	b.n	8004b1a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b0c:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <RCCEx_PLL2_Config+0x15c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0f0      	beq.n	8004afa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	58024400 	.word	0x58024400
 8004b28:	ffff0007 	.word	0xffff0007

08004b2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b3a:	4b53      	ldr	r3, [pc, #332]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d101      	bne.n	8004b4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e099      	b.n	8004c7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b4a:	4b4f      	ldr	r3, [pc, #316]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a4e      	ldr	r2, [pc, #312]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b56:	f7fc feb9 	bl	80018cc <HAL_GetTick>
 8004b5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b5c:	e008      	b.n	8004b70 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b5e:	f7fc feb5 	bl	80018cc <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e086      	b.n	8004c7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b70:	4b45      	ldr	r3, [pc, #276]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1f0      	bne.n	8004b5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b7c:	4b42      	ldr	r3, [pc, #264]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	051b      	lsls	r3, r3, #20
 8004b8a:	493f      	ldr	r1, [pc, #252]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	628b      	str	r3, [r1, #40]	; 0x28
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	025b      	lsls	r3, r3, #9
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	061b      	lsls	r3, r3, #24
 8004bbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004bc0:	4931      	ldr	r1, [pc, #196]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bc6:	4b30      	ldr	r3, [pc, #192]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	492d      	ldr	r1, [pc, #180]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004bd8:	4b2b      	ldr	r3, [pc, #172]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	4928      	ldr	r1, [pc, #160]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004bea:	4b27      	ldr	r3, [pc, #156]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	4a26      	ldr	r2, [pc, #152]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bf6:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bfa:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <RCCEx_PLL3_Config+0x160>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	69d2      	ldr	r2, [r2, #28]
 8004c02:	00d2      	lsls	r2, r2, #3
 8004c04:	4920      	ldr	r1, [pc, #128]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c0a:	4b1f      	ldr	r3, [pc, #124]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	4a1e      	ldr	r2, [pc, #120]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d106      	bne.n	8004c2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c28:	e00f      	b.n	8004c4a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d106      	bne.n	8004c3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c30:	4b15      	ldr	r3, [pc, #84]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c34:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c3c:	e005      	b.n	8004c4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c3e:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c4a:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a0e      	ldr	r2, [pc, #56]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c56:	f7fc fe39 	bl	80018cc <HAL_GetTick>
 8004c5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c5c:	e008      	b.n	8004c70 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c5e:	f7fc fe35 	bl	80018cc <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e006      	b.n	8004c7e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c70:	4b05      	ldr	r3, [pc, #20]	; (8004c88 <RCCEx_PLL3_Config+0x15c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	58024400 	.word	0x58024400
 8004c8c:	ffff0007 	.word	0xffff0007

08004c90 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e10f      	b.n	8004ec2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a87      	ldr	r2, [pc, #540]	; (8004ecc <HAL_SPI_Init+0x23c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00f      	beq.n	8004cd2 <HAL_SPI_Init+0x42>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a86      	ldr	r2, [pc, #536]	; (8004ed0 <HAL_SPI_Init+0x240>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d00a      	beq.n	8004cd2 <HAL_SPI_Init+0x42>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a84      	ldr	r2, [pc, #528]	; (8004ed4 <HAL_SPI_Init+0x244>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d005      	beq.n	8004cd2 <HAL_SPI_Init+0x42>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	2b0f      	cmp	r3, #15
 8004ccc:	d901      	bls.n	8004cd2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e0f7      	b.n	8004ec2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 ff76 	bl	8005bc4 <SPI_GetPacketSize>
 8004cd8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a7b      	ldr	r2, [pc, #492]	; (8004ecc <HAL_SPI_Init+0x23c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00c      	beq.n	8004cfe <HAL_SPI_Init+0x6e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a79      	ldr	r2, [pc, #484]	; (8004ed0 <HAL_SPI_Init+0x240>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d007      	beq.n	8004cfe <HAL_SPI_Init+0x6e>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a78      	ldr	r2, [pc, #480]	; (8004ed4 <HAL_SPI_Init+0x244>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d002      	beq.n	8004cfe <HAL_SPI_Init+0x6e>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b08      	cmp	r3, #8
 8004cfc:	d811      	bhi.n	8004d22 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d02:	4a72      	ldr	r2, [pc, #456]	; (8004ecc <HAL_SPI_Init+0x23c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d009      	beq.n	8004d1c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a70      	ldr	r2, [pc, #448]	; (8004ed0 <HAL_SPI_Init+0x240>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d004      	beq.n	8004d1c <HAL_SPI_Init+0x8c>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6f      	ldr	r2, [pc, #444]	; (8004ed4 <HAL_SPI_Init+0x244>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d104      	bne.n	8004d26 <HAL_SPI_Init+0x96>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b10      	cmp	r3, #16
 8004d20:	d901      	bls.n	8004d26 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0cd      	b.n	8004ec2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7fc fb48 	bl	80013d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0201 	bic.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004d62:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d6c:	d119      	bne.n	8004da2 <HAL_SPI_Init+0x112>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d76:	d103      	bne.n	8004d80 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d008      	beq.n	8004d92 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10c      	bne.n	8004da2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d90:	d107      	bne.n	8004da2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004da0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00f      	beq.n	8004dce <HAL_SPI_Init+0x13e>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	2b06      	cmp	r3, #6
 8004db4:	d90b      	bls.n	8004dce <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	e007      	b.n	8004dde <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ddc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de6:	431a      	orrs	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df0:	ea42 0103 	orr.w	r1, r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3e:	ea42 0103 	orr.w	r1, r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d113      	bne.n	8004e7e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e68:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e7c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0201 	bic.w	r2, r2, #1
 8004e8c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00a      	beq.n	8004eb0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40013000 	.word	0x40013000
 8004ed0:	40003800 	.word	0x40003800
 8004ed4:	40003c00 	.word	0x40003c00

08004ed8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	; 0x28
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	603b      	str	r3, [r7, #0]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	3320      	adds	r3, #32
 8004eee:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d101      	bne.n	8004f02 <HAL_SPI_Transmit+0x2a>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e1e1      	b.n	80052c6 <HAL_SPI_Transmit+0x3ee>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f0a:	f7fc fcdf 	bl	80018cc <HAL_GetTick>
 8004f0e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d007      	beq.n	8004f2c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004f28:	7efb      	ldrb	r3, [r7, #27]
 8004f2a:	e1cc      	b.n	80052c6 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <HAL_SPI_Transmit+0x60>
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d107      	bne.n	8004f48 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004f44:	7efb      	ldrb	r3, [r7, #27]
 8004f46:	e1be      	b.n	80052c6 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2203      	movs	r2, #3
 8004f4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	88fa      	ldrh	r2, [r7, #6]
 8004f62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	88fa      	ldrh	r2, [r7, #6]
 8004f6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004f98:	d108      	bne.n	8004fac <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e009      	b.n	8004fc0 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004fbe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	4b96      	ldr	r3, [pc, #600]	; (8005220 <HAL_SPI_Transmit+0x348>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	88f9      	ldrh	r1, [r7, #6]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0201 	orr.w	r2, r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fec:	d107      	bne.n	8004ffe <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ffc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	2b0f      	cmp	r3, #15
 8005004:	d947      	bls.n	8005096 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005006:	e03f      	b.n	8005088 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b02      	cmp	r3, #2
 8005014:	d114      	bne.n	8005040 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6812      	ldr	r2, [r2, #0]
 8005020:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005026:	1d1a      	adds	r2, r3, #4
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005032:	b29b      	uxth	r3, r3
 8005034:	3b01      	subs	r3, #1
 8005036:	b29a      	uxth	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800503e:	e023      	b.n	8005088 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005040:	f7fc fc44 	bl	80018cc <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d803      	bhi.n	8005058 <HAL_SPI_Transmit+0x180>
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005056:	d102      	bne.n	800505e <HAL_SPI_Transmit+0x186>
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d114      	bne.n	8005088 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fce2 	bl	8005a28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005072:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e11e      	b.n	80052c6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1b9      	bne.n	8005008 <HAL_SPI_Transmit+0x130>
 8005094:	e0f1      	b.n	800527a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	2b07      	cmp	r3, #7
 800509c:	f240 80e6 	bls.w	800526c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80050a0:	e05d      	b.n	800515e <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d132      	bne.n	8005116 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d918      	bls.n	80050ee <HAL_SPI_Transmit+0x216>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d014      	beq.n	80050ee <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d4:	1d1a      	adds	r2, r3, #4
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b02      	subs	r3, #2
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80050ec:	e037      	b.n	800515e <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f2:	881a      	ldrh	r2, [r3, #0]
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fc:	1c9a      	adds	r2, r3, #2
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005114:	e023      	b.n	800515e <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005116:	f7fc fbd9 	bl	80018cc <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d803      	bhi.n	800512e <HAL_SPI_Transmit+0x256>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800512c:	d102      	bne.n	8005134 <HAL_SPI_Transmit+0x25c>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d114      	bne.n	800515e <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 fc77 	bl	8005a28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005148:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0b3      	b.n	80052c6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d19b      	bne.n	80050a2 <HAL_SPI_Transmit+0x1ca>
 800516a:	e086      	b.n	800527a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b02      	cmp	r3, #2
 8005178:	d154      	bne.n	8005224 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b03      	cmp	r3, #3
 8005184:	d918      	bls.n	80051b8 <HAL_SPI_Transmit+0x2e0>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518a:	2b40      	cmp	r3, #64	; 0x40
 800518c:	d914      	bls.n	80051b8 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6812      	ldr	r2, [r2, #0]
 8005198:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800519e:	1d1a      	adds	r2, r3, #4
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b04      	subs	r3, #4
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80051b6:	e059      	b.n	800526c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d917      	bls.n	80051f4 <HAL_SPI_Transmit+0x31c>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d013      	beq.n	80051f4 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d0:	881a      	ldrh	r2, [r3, #0]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051da:	1c9a      	adds	r2, r3, #2
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	3b02      	subs	r3, #2
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80051f2:	e03b      	b.n	800526c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	3320      	adds	r3, #32
 80051fe:	7812      	ldrb	r2, [r2, #0]
 8005200:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800521e:	e025      	b.n	800526c <HAL_SPI_Transmit+0x394>
 8005220:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005224:	f7fc fb52 	bl	80018cc <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d803      	bhi.n	800523c <HAL_SPI_Transmit+0x364>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800523a:	d102      	bne.n	8005242 <HAL_SPI_Transmit+0x36a>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d114      	bne.n	800526c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005242:	68f8      	ldr	r0, [r7, #12]
 8005244:	f000 fbf0 	bl	8005a28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005256:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e02c      	b.n	80052c6 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	f47f af79 	bne.w	800516c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2200      	movs	r2, #0
 8005282:	2108      	movs	r1, #8
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 fc6f 	bl	8005b68 <SPI_WaitOnFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005296:	f043 0220 	orr.w	r2, r3, #32
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 fbc1 	bl	8005a28 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e000      	b.n	80052c6 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 80052c4:	7efb      	ldrb	r3, [r7, #27]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop

080052d0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b088      	sub	sp, #32
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	4613      	mov	r3, r2
 80052de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3330      	adds	r3, #48	; 0x30
 80052ea:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_SPI_Receive+0x2a>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e173      	b.n	80055e2 <HAL_SPI_Receive+0x312>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005302:	f7fc fae3 	bl	80018cc <HAL_GetTick>
 8005306:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b01      	cmp	r3, #1
 8005312:	d007      	beq.n	8005324 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8005314:	2302      	movs	r3, #2
 8005316:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005320:	7ffb      	ldrb	r3, [r7, #31]
 8005322:	e15e      	b.n	80055e2 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <HAL_SPI_Receive+0x60>
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d107      	bne.n	8005340 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800533c:	7ffb      	ldrb	r3, [r7, #31]
 800533e:	e150      	b.n	80055e2 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2204      	movs	r2, #4
 8005344:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	68ba      	ldr	r2, [r7, #8]
 8005354:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	88fa      	ldrh	r2, [r7, #6]
 800535a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	88fa      	ldrh	r2, [r7, #6]
 8005362:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005390:	d108      	bne.n	80053a4 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	e009      	b.n	80053b8 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80053b6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	4b8b      	ldr	r3, [pc, #556]	; (80055ec <HAL_SPI_Receive+0x31c>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	88f9      	ldrh	r1, [r7, #6]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	6812      	ldr	r2, [r2, #0]
 80053c8:	430b      	orrs	r3, r1
 80053ca:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e4:	d107      	bne.n	80053f6 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	2b0f      	cmp	r3, #15
 80053fc:	d948      	bls.n	8005490 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80053fe:	e040      	b.n	8005482 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695a      	ldr	r2, [r3, #20]
 8005406:	f248 0308 	movw	r3, #32776	; 0x8008
 800540a:	4013      	ands	r3, r2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d014      	beq.n	800543a <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005418:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800541a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005420:	1d1a      	adds	r2, r3, #4
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005438:	e023      	b.n	8005482 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800543a:	f7fc fa47 	bl	80018cc <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	429a      	cmp	r2, r3
 8005448:	d803      	bhi.n	8005452 <HAL_SPI_Receive+0x182>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005450:	d102      	bne.n	8005458 <HAL_SPI_Receive+0x188>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d114      	bne.n	8005482 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 fae5 	bl	8005a28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800546c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e0af      	b.n	80055e2 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005488:	b29b      	uxth	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1b8      	bne.n	8005400 <HAL_SPI_Receive+0x130>
 800548e:	e095      	b.n	80055bc <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	2b07      	cmp	r3, #7
 8005496:	f240 808b 	bls.w	80055b0 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800549a:	e03f      	b.n	800551c <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d114      	bne.n	80054d4 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	8812      	ldrh	r2, [r2, #0]
 80054b2:	b292      	uxth	r2, r2
 80054b4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ba:	1c9a      	adds	r2, r3, #2
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80054d2:	e023      	b.n	800551c <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054d4:	f7fc f9fa 	bl	80018cc <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d803      	bhi.n	80054ec <HAL_SPI_Receive+0x21c>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ea:	d102      	bne.n	80054f2 <HAL_SPI_Receive+0x222>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d114      	bne.n	800551c <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 fa98 	bl	8005a28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005506:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e062      	b.n	80055e2 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1b9      	bne.n	800549c <HAL_SPI_Receive+0x1cc>
 8005528:	e048      	b.n	80055bc <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b01      	cmp	r3, #1
 8005536:	d117      	bne.n	8005568 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005544:	7812      	ldrb	r2, [r2, #0]
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005566:	e023      	b.n	80055b0 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005568:	f7fc f9b0 	bl	80018cc <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d803      	bhi.n	8005580 <HAL_SPI_Receive+0x2b0>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800557e:	d102      	bne.n	8005586 <HAL_SPI_Receive+0x2b6>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d114      	bne.n	80055b0 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fa4e 	bl	8005a28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800559a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e018      	b.n	80055e2 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1b6      	bne.n	800552a <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 fa33 	bl	8005a28 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 80055e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3720      	adds	r7, #32
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	ffff0000 	.word	0xffff0000

080055f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08c      	sub	sp, #48	; 0x30
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3320      	adds	r3, #32
 800560a:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3330      	adds	r3, #48	; 0x30
 8005612:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <HAL_SPI_TransmitReceive+0x32>
 800561e:	2302      	movs	r3, #2
 8005620:	e1fd      	b.n	8005a1e <HAL_SPI_TransmitReceive+0x42e>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800562a:	f7fc f94f 	bl	80018cc <HAL_GetTick>
 800562e:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8005630:	887b      	ldrh	r3, [r7, #2]
 8005632:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8005634:	887b      	ldrh	r3, [r7, #2]
 8005636:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	d009      	beq.n	8005658 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8005644:	2302      	movs	r3, #2
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005652:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005656:	e1e2      	b.n	8005a1e <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d005      	beq.n	800566a <HAL_SPI_TransmitReceive+0x7a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <HAL_SPI_TransmitReceive+0x7a>
 8005664:	887b      	ldrh	r3, [r7, #2]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005678:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800567c:	e1cf      	b.n	8005a1e <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2205      	movs	r2, #5
 8005682:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	887a      	ldrh	r2, [r7, #2]
 8005698:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	887a      	ldrh	r2, [r7, #2]
 80056a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	887a      	ldrh	r2, [r7, #2]
 80056ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	887a      	ldrh	r2, [r7, #2]
 80056b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 80056d4:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	4b82      	ldr	r3, [pc, #520]	; (80058e8 <HAL_SPI_TransmitReceive+0x2f8>)
 80056de:	4013      	ands	r3, r2
 80056e0:	8879      	ldrh	r1, [r7, #2]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	6812      	ldr	r2, [r2, #0]
 80056e6:	430b      	orrs	r3, r1
 80056e8:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005702:	d107      	bne.n	8005714 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005712:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	2b0f      	cmp	r3, #15
 800571a:	d970      	bls.n	80057fe <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800571c:	e068      	b.n	80057f0 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b02      	cmp	r3, #2
 800572a:	d11a      	bne.n	8005762 <HAL_SPI_TransmitReceive+0x172>
 800572c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800572e:	2b00      	cmp	r3, #0
 8005730:	d017      	beq.n	8005762 <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6812      	ldr	r2, [r2, #0]
 800573c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005742:	1d1a      	adds	r2, r3, #4
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800574e:	b29b      	uxth	r3, r3
 8005750:	3b01      	subs	r3, #1
 8005752:	b29a      	uxth	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005760:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	695a      	ldr	r2, [r3, #20]
 8005768:	f248 0308 	movw	r3, #32776	; 0x8008
 800576c:	4013      	ands	r3, r2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d01a      	beq.n	80057a8 <HAL_SPI_TransmitReceive+0x1b8>
 8005772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	d017      	beq.n	80057a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005780:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005782:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005788:	1d1a      	adds	r2, r3, #4
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80057a6:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057a8:	f7fc f890 	bl	80018cc <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d803      	bhi.n	80057c0 <HAL_SPI_TransmitReceive+0x1d0>
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057be:	d102      	bne.n	80057c6 <HAL_SPI_TransmitReceive+0x1d6>
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d114      	bne.n	80057f0 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f000 f92e 	bl	8005a28 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e116      	b.n	8005a1e <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80057f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d193      	bne.n	800571e <HAL_SPI_TransmitReceive+0x12e>
 80057f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d190      	bne.n	800571e <HAL_SPI_TransmitReceive+0x12e>
 80057fc:	e0e8      	b.n	80059d0 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	2b07      	cmp	r3, #7
 8005804:	f240 80de 	bls.w	80059c4 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005808:	e066      	b.n	80058d8 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b02      	cmp	r3, #2
 8005816:	d119      	bne.n	800584c <HAL_SPI_TransmitReceive+0x25c>
 8005818:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800581a:	2b00      	cmp	r3, #0
 800581c:	d016      	beq.n	800584c <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005822:	881a      	ldrh	r2, [r3, #0]
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582c:	1c9a      	adds	r2, r3, #2
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800584a:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b01      	cmp	r3, #1
 8005858:	d11a      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x2a0>
 800585a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800585c:	2b00      	cmp	r3, #0
 800585e:	d017      	beq.n	8005890 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	8812      	ldrh	r2, [r2, #0]
 8005868:	b292      	uxth	r2, r2
 800586a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005870:	1c9a      	adds	r2, r3, #2
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800587c:	b29b      	uxth	r3, r3
 800587e:	3b01      	subs	r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800588e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005890:	f7fc f81c 	bl	80018cc <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800589c:	429a      	cmp	r2, r3
 800589e:	d803      	bhi.n	80058a8 <HAL_SPI_TransmitReceive+0x2b8>
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058a6:	d102      	bne.n	80058ae <HAL_SPI_TransmitReceive+0x2be>
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d114      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 f8ba 	bl	8005a28 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e0a2      	b.n	8005a1e <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80058d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d195      	bne.n	800580a <HAL_SPI_TransmitReceive+0x21a>
 80058de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d192      	bne.n	800580a <HAL_SPI_TransmitReceive+0x21a>
 80058e4:	e074      	b.n	80059d0 <HAL_SPI_TransmitReceive+0x3e0>
 80058e6:	bf00      	nop
 80058e8:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d11b      	bne.n	8005932 <HAL_SPI_TransmitReceive+0x342>
 80058fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d018      	beq.n	8005932 <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3320      	adds	r3, #32
 800590a:	7812      	ldrb	r2, [r2, #0]
 800590c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005930:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d11d      	bne.n	800597c <HAL_SPI_TransmitReceive+0x38c>
 8005940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01a      	beq.n	800597c <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005952:	7812      	ldrb	r2, [r2, #0]
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800597a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800597c:	f7fb ffa6 	bl	80018cc <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005988:	429a      	cmp	r2, r3
 800598a:	d803      	bhi.n	8005994 <HAL_SPI_TransmitReceive+0x3a4>
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005992:	d102      	bne.n	800599a <HAL_SPI_TransmitReceive+0x3aa>
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	2b00      	cmp	r3, #0
 8005998:	d114      	bne.n	80059c4 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 f844 	bl	8005a28 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e02c      	b.n	8005a1e <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80059c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d190      	bne.n	80058ec <HAL_SPI_TransmitReceive+0x2fc>
 80059ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d18d      	bne.n	80058ec <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	2200      	movs	r2, #0
 80059d8:	2108      	movs	r1, #8
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 f8c4 	bl	8005b68 <SPI_WaitOnFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d007      	beq.n	80059f6 <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ec:	f043 0220 	orr.w	r2, r3, #32
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f000 f816 	bl	8005a28 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e001      	b.n	8005a1e <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 8005a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3728      	adds	r7, #40	; 0x28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop

08005a28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	699a      	ldr	r2, [r3, #24]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f042 0208 	orr.w	r2, r2, #8
 8005a46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	699a      	ldr	r2, [r3, #24]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f042 0210 	orr.w	r2, r2, #16
 8005a56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0201 	bic.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6919      	ldr	r1, [r3, #16]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	4b3c      	ldr	r3, [pc, #240]	; (8005b64 <SPI_CloseTransfer+0x13c>)
 8005a74:	400b      	ands	r3, r1
 8005a76:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689a      	ldr	r2, [r3, #8]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005a86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d014      	beq.n	8005abe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f003 0320 	and.w	r3, r3, #32
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00f      	beq.n	8005abe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	699a      	ldr	r2, [r3, #24]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f042 0220 	orr.w	r2, r2, #32
 8005abc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d014      	beq.n	8005af4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00f      	beq.n	8005af4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ada:	f043 0204 	orr.w	r2, r3, #4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005af2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00f      	beq.n	8005b1e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b04:	f043 0201 	orr.w	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	699a      	ldr	r2, [r3, #24]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00f      	beq.n	8005b48 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2e:	f043 0208 	orr.w	r2, r3, #8
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005b58:	bf00      	nop
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	fffffc90 	.word	0xfffffc90

08005b68 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005b78:	e010      	b.n	8005b9c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b7a:	f7fb fea7 	bl	80018cc <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d803      	bhi.n	8005b92 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b90:	d102      	bne.n	8005b98 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e00f      	b.n	8005bbc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695a      	ldr	r2, [r3, #20]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	bf0c      	ite	eq
 8005bac:	2301      	moveq	r3, #1
 8005bae:	2300      	movne	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d0df      	beq.n	8005b7a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd0:	095b      	lsrs	r3, r3, #5
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	3307      	adds	r3, #7
 8005be2:	08db      	lsrs	r3, r3, #3
 8005be4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	fb02 f303 	mul.w	r3, r2, r3
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e042      	b.n	8005c92 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7fb fc64 	bl	80014ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2224      	movs	r2, #36	; 0x24
 8005c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0201 	bic.w	r2, r2, #1
 8005c3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f8bb 	bl	8005db8 <UART_SetConfig>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e022      	b.n	8005c92 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d002      	beq.n	8005c5a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fe17 	bl	8006888 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0201 	orr.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 fe9e 	bl	80069cc <UART_CheckIdleState>
 8005c90:	4603      	mov	r3, r0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b08a      	sub	sp, #40	; 0x28
 8005c9e:	af02      	add	r7, sp, #8
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	603b      	str	r3, [r7, #0]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d17b      	bne.n	8005dac <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <HAL_UART_Transmit+0x26>
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e074      	b.n	8005dae <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2221      	movs	r2, #33	; 0x21
 8005cd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cd4:	f7fb fdfa 	bl	80018cc <HAL_GetTick>
 8005cd8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	88fa      	ldrh	r2, [r7, #6]
 8005cde:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	88fa      	ldrh	r2, [r7, #6]
 8005ce6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf2:	d108      	bne.n	8005d06 <HAL_UART_Transmit+0x6c>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	61bb      	str	r3, [r7, #24]
 8005d04:	e003      	b.n	8005d0e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d0e:	e030      	b.n	8005d72 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2200      	movs	r2, #0
 8005d18:	2180      	movs	r1, #128	; 0x80
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 ff00 	bl	8006b20 <UART_WaitOnFlagUntilTimeout>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e03d      	b.n	8005dae <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10b      	bne.n	8005d50 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	3302      	adds	r3, #2
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	e007      	b.n	8005d60 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	781a      	ldrb	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1c8      	bne.n	8005d10 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2200      	movs	r2, #0
 8005d86:	2140      	movs	r1, #64	; 0x40
 8005d88:	68f8      	ldr	r0, [r7, #12]
 8005d8a:	f000 fec9 	bl	8006b20 <UART_WaitOnFlagUntilTimeout>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d005      	beq.n	8005da0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e006      	b.n	8005dae <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2220      	movs	r2, #32
 8005da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	e000      	b.n	8005dae <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005dac:	2302      	movs	r3, #2
  }
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3720      	adds	r7, #32
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
	...

08005db8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dbc:	b092      	sub	sp, #72	; 0x48
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4bbe      	ldr	r3, [pc, #760]	; (80060e0 <UART_SetConfig+0x328>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005df0:	430b      	orrs	r3, r1
 8005df2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4ab3      	ldr	r2, [pc, #716]	; (80060e4 <UART_SetConfig+0x32c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e20:	4313      	orrs	r3, r2
 8005e22:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689a      	ldr	r2, [r3, #8]
 8005e2a:	4baf      	ldr	r3, [pc, #700]	; (80060e8 <UART_SetConfig+0x330>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	6812      	ldr	r2, [r2, #0]
 8005e32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e34:	430b      	orrs	r3, r1
 8005e36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3e:	f023 010f 	bic.w	r1, r3, #15
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4aa6      	ldr	r2, [pc, #664]	; (80060ec <UART_SetConfig+0x334>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d177      	bne.n	8005f48 <UART_SetConfig+0x190>
 8005e58:	4ba5      	ldr	r3, [pc, #660]	; (80060f0 <UART_SetConfig+0x338>)
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e60:	2b28      	cmp	r3, #40	; 0x28
 8005e62:	d86d      	bhi.n	8005f40 <UART_SetConfig+0x188>
 8005e64:	a201      	add	r2, pc, #4	; (adr r2, 8005e6c <UART_SetConfig+0xb4>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005f11 	.word	0x08005f11
 8005e70:	08005f41 	.word	0x08005f41
 8005e74:	08005f41 	.word	0x08005f41
 8005e78:	08005f41 	.word	0x08005f41
 8005e7c:	08005f41 	.word	0x08005f41
 8005e80:	08005f41 	.word	0x08005f41
 8005e84:	08005f41 	.word	0x08005f41
 8005e88:	08005f41 	.word	0x08005f41
 8005e8c:	08005f19 	.word	0x08005f19
 8005e90:	08005f41 	.word	0x08005f41
 8005e94:	08005f41 	.word	0x08005f41
 8005e98:	08005f41 	.word	0x08005f41
 8005e9c:	08005f41 	.word	0x08005f41
 8005ea0:	08005f41 	.word	0x08005f41
 8005ea4:	08005f41 	.word	0x08005f41
 8005ea8:	08005f41 	.word	0x08005f41
 8005eac:	08005f21 	.word	0x08005f21
 8005eb0:	08005f41 	.word	0x08005f41
 8005eb4:	08005f41 	.word	0x08005f41
 8005eb8:	08005f41 	.word	0x08005f41
 8005ebc:	08005f41 	.word	0x08005f41
 8005ec0:	08005f41 	.word	0x08005f41
 8005ec4:	08005f41 	.word	0x08005f41
 8005ec8:	08005f41 	.word	0x08005f41
 8005ecc:	08005f29 	.word	0x08005f29
 8005ed0:	08005f41 	.word	0x08005f41
 8005ed4:	08005f41 	.word	0x08005f41
 8005ed8:	08005f41 	.word	0x08005f41
 8005edc:	08005f41 	.word	0x08005f41
 8005ee0:	08005f41 	.word	0x08005f41
 8005ee4:	08005f41 	.word	0x08005f41
 8005ee8:	08005f41 	.word	0x08005f41
 8005eec:	08005f31 	.word	0x08005f31
 8005ef0:	08005f41 	.word	0x08005f41
 8005ef4:	08005f41 	.word	0x08005f41
 8005ef8:	08005f41 	.word	0x08005f41
 8005efc:	08005f41 	.word	0x08005f41
 8005f00:	08005f41 	.word	0x08005f41
 8005f04:	08005f41 	.word	0x08005f41
 8005f08:	08005f41 	.word	0x08005f41
 8005f0c:	08005f39 	.word	0x08005f39
 8005f10:	2301      	movs	r3, #1
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f16:	e222      	b.n	800635e <UART_SetConfig+0x5a6>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1e:	e21e      	b.n	800635e <UART_SetConfig+0x5a6>
 8005f20:	2308      	movs	r3, #8
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f26:	e21a      	b.n	800635e <UART_SetConfig+0x5a6>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2e:	e216      	b.n	800635e <UART_SetConfig+0x5a6>
 8005f30:	2320      	movs	r3, #32
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f36:	e212      	b.n	800635e <UART_SetConfig+0x5a6>
 8005f38:	2340      	movs	r3, #64	; 0x40
 8005f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3e:	e20e      	b.n	800635e <UART_SetConfig+0x5a6>
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f46:	e20a      	b.n	800635e <UART_SetConfig+0x5a6>
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a69      	ldr	r2, [pc, #420]	; (80060f4 <UART_SetConfig+0x33c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d130      	bne.n	8005fb4 <UART_SetConfig+0x1fc>
 8005f52:	4b67      	ldr	r3, [pc, #412]	; (80060f0 <UART_SetConfig+0x338>)
 8005f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	2b05      	cmp	r3, #5
 8005f5c:	d826      	bhi.n	8005fac <UART_SetConfig+0x1f4>
 8005f5e:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <UART_SetConfig+0x1ac>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08005f7d 	.word	0x08005f7d
 8005f68:	08005f85 	.word	0x08005f85
 8005f6c:	08005f8d 	.word	0x08005f8d
 8005f70:	08005f95 	.word	0x08005f95
 8005f74:	08005f9d 	.word	0x08005f9d
 8005f78:	08005fa5 	.word	0x08005fa5
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f82:	e1ec      	b.n	800635e <UART_SetConfig+0x5a6>
 8005f84:	2304      	movs	r3, #4
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8a:	e1e8      	b.n	800635e <UART_SetConfig+0x5a6>
 8005f8c:	2308      	movs	r3, #8
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f92:	e1e4      	b.n	800635e <UART_SetConfig+0x5a6>
 8005f94:	2310      	movs	r3, #16
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9a:	e1e0      	b.n	800635e <UART_SetConfig+0x5a6>
 8005f9c:	2320      	movs	r3, #32
 8005f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa2:	e1dc      	b.n	800635e <UART_SetConfig+0x5a6>
 8005fa4:	2340      	movs	r3, #64	; 0x40
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005faa:	e1d8      	b.n	800635e <UART_SetConfig+0x5a6>
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb2:	e1d4      	b.n	800635e <UART_SetConfig+0x5a6>
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a4f      	ldr	r2, [pc, #316]	; (80060f8 <UART_SetConfig+0x340>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d130      	bne.n	8006020 <UART_SetConfig+0x268>
 8005fbe:	4b4c      	ldr	r3, [pc, #304]	; (80060f0 <UART_SetConfig+0x338>)
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	2b05      	cmp	r3, #5
 8005fc8:	d826      	bhi.n	8006018 <UART_SetConfig+0x260>
 8005fca:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <UART_SetConfig+0x218>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08005fe9 	.word	0x08005fe9
 8005fd4:	08005ff1 	.word	0x08005ff1
 8005fd8:	08005ff9 	.word	0x08005ff9
 8005fdc:	08006001 	.word	0x08006001
 8005fe0:	08006009 	.word	0x08006009
 8005fe4:	08006011 	.word	0x08006011
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fee:	e1b6      	b.n	800635e <UART_SetConfig+0x5a6>
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ff6:	e1b2      	b.n	800635e <UART_SetConfig+0x5a6>
 8005ff8:	2308      	movs	r3, #8
 8005ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffe:	e1ae      	b.n	800635e <UART_SetConfig+0x5a6>
 8006000:	2310      	movs	r3, #16
 8006002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006006:	e1aa      	b.n	800635e <UART_SetConfig+0x5a6>
 8006008:	2320      	movs	r3, #32
 800600a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600e:	e1a6      	b.n	800635e <UART_SetConfig+0x5a6>
 8006010:	2340      	movs	r3, #64	; 0x40
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006016:	e1a2      	b.n	800635e <UART_SetConfig+0x5a6>
 8006018:	2380      	movs	r3, #128	; 0x80
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601e:	e19e      	b.n	800635e <UART_SetConfig+0x5a6>
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a35      	ldr	r2, [pc, #212]	; (80060fc <UART_SetConfig+0x344>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d130      	bne.n	800608c <UART_SetConfig+0x2d4>
 800602a:	4b31      	ldr	r3, [pc, #196]	; (80060f0 <UART_SetConfig+0x338>)
 800602c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	2b05      	cmp	r3, #5
 8006034:	d826      	bhi.n	8006084 <UART_SetConfig+0x2cc>
 8006036:	a201      	add	r2, pc, #4	; (adr r2, 800603c <UART_SetConfig+0x284>)
 8006038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603c:	08006055 	.word	0x08006055
 8006040:	0800605d 	.word	0x0800605d
 8006044:	08006065 	.word	0x08006065
 8006048:	0800606d 	.word	0x0800606d
 800604c:	08006075 	.word	0x08006075
 8006050:	0800607d 	.word	0x0800607d
 8006054:	2300      	movs	r3, #0
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605a:	e180      	b.n	800635e <UART_SetConfig+0x5a6>
 800605c:	2304      	movs	r3, #4
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006062:	e17c      	b.n	800635e <UART_SetConfig+0x5a6>
 8006064:	2308      	movs	r3, #8
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606a:	e178      	b.n	800635e <UART_SetConfig+0x5a6>
 800606c:	2310      	movs	r3, #16
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006072:	e174      	b.n	800635e <UART_SetConfig+0x5a6>
 8006074:	2320      	movs	r3, #32
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607a:	e170      	b.n	800635e <UART_SetConfig+0x5a6>
 800607c:	2340      	movs	r3, #64	; 0x40
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006082:	e16c      	b.n	800635e <UART_SetConfig+0x5a6>
 8006084:	2380      	movs	r3, #128	; 0x80
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608a:	e168      	b.n	800635e <UART_SetConfig+0x5a6>
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a1b      	ldr	r2, [pc, #108]	; (8006100 <UART_SetConfig+0x348>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d142      	bne.n	800611c <UART_SetConfig+0x364>
 8006096:	4b16      	ldr	r3, [pc, #88]	; (80060f0 <UART_SetConfig+0x338>)
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	f003 0307 	and.w	r3, r3, #7
 800609e:	2b05      	cmp	r3, #5
 80060a0:	d838      	bhi.n	8006114 <UART_SetConfig+0x35c>
 80060a2:	a201      	add	r2, pc, #4	; (adr r2, 80060a8 <UART_SetConfig+0x2f0>)
 80060a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a8:	080060c1 	.word	0x080060c1
 80060ac:	080060c9 	.word	0x080060c9
 80060b0:	080060d1 	.word	0x080060d1
 80060b4:	080060d9 	.word	0x080060d9
 80060b8:	08006105 	.word	0x08006105
 80060bc:	0800610d 	.word	0x0800610d
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c6:	e14a      	b.n	800635e <UART_SetConfig+0x5a6>
 80060c8:	2304      	movs	r3, #4
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ce:	e146      	b.n	800635e <UART_SetConfig+0x5a6>
 80060d0:	2308      	movs	r3, #8
 80060d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d6:	e142      	b.n	800635e <UART_SetConfig+0x5a6>
 80060d8:	2310      	movs	r3, #16
 80060da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060de:	e13e      	b.n	800635e <UART_SetConfig+0x5a6>
 80060e0:	cfff69f3 	.word	0xcfff69f3
 80060e4:	58000c00 	.word	0x58000c00
 80060e8:	11fff4ff 	.word	0x11fff4ff
 80060ec:	40011000 	.word	0x40011000
 80060f0:	58024400 	.word	0x58024400
 80060f4:	40004400 	.word	0x40004400
 80060f8:	40004800 	.word	0x40004800
 80060fc:	40004c00 	.word	0x40004c00
 8006100:	40005000 	.word	0x40005000
 8006104:	2320      	movs	r3, #32
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610a:	e128      	b.n	800635e <UART_SetConfig+0x5a6>
 800610c:	2340      	movs	r3, #64	; 0x40
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006112:	e124      	b.n	800635e <UART_SetConfig+0x5a6>
 8006114:	2380      	movs	r3, #128	; 0x80
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611a:	e120      	b.n	800635e <UART_SetConfig+0x5a6>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4acb      	ldr	r2, [pc, #812]	; (8006450 <UART_SetConfig+0x698>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d176      	bne.n	8006214 <UART_SetConfig+0x45c>
 8006126:	4bcb      	ldr	r3, [pc, #812]	; (8006454 <UART_SetConfig+0x69c>)
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800612e:	2b28      	cmp	r3, #40	; 0x28
 8006130:	d86c      	bhi.n	800620c <UART_SetConfig+0x454>
 8006132:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <UART_SetConfig+0x380>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	080061dd 	.word	0x080061dd
 800613c:	0800620d 	.word	0x0800620d
 8006140:	0800620d 	.word	0x0800620d
 8006144:	0800620d 	.word	0x0800620d
 8006148:	0800620d 	.word	0x0800620d
 800614c:	0800620d 	.word	0x0800620d
 8006150:	0800620d 	.word	0x0800620d
 8006154:	0800620d 	.word	0x0800620d
 8006158:	080061e5 	.word	0x080061e5
 800615c:	0800620d 	.word	0x0800620d
 8006160:	0800620d 	.word	0x0800620d
 8006164:	0800620d 	.word	0x0800620d
 8006168:	0800620d 	.word	0x0800620d
 800616c:	0800620d 	.word	0x0800620d
 8006170:	0800620d 	.word	0x0800620d
 8006174:	0800620d 	.word	0x0800620d
 8006178:	080061ed 	.word	0x080061ed
 800617c:	0800620d 	.word	0x0800620d
 8006180:	0800620d 	.word	0x0800620d
 8006184:	0800620d 	.word	0x0800620d
 8006188:	0800620d 	.word	0x0800620d
 800618c:	0800620d 	.word	0x0800620d
 8006190:	0800620d 	.word	0x0800620d
 8006194:	0800620d 	.word	0x0800620d
 8006198:	080061f5 	.word	0x080061f5
 800619c:	0800620d 	.word	0x0800620d
 80061a0:	0800620d 	.word	0x0800620d
 80061a4:	0800620d 	.word	0x0800620d
 80061a8:	0800620d 	.word	0x0800620d
 80061ac:	0800620d 	.word	0x0800620d
 80061b0:	0800620d 	.word	0x0800620d
 80061b4:	0800620d 	.word	0x0800620d
 80061b8:	080061fd 	.word	0x080061fd
 80061bc:	0800620d 	.word	0x0800620d
 80061c0:	0800620d 	.word	0x0800620d
 80061c4:	0800620d 	.word	0x0800620d
 80061c8:	0800620d 	.word	0x0800620d
 80061cc:	0800620d 	.word	0x0800620d
 80061d0:	0800620d 	.word	0x0800620d
 80061d4:	0800620d 	.word	0x0800620d
 80061d8:	08006205 	.word	0x08006205
 80061dc:	2301      	movs	r3, #1
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e2:	e0bc      	b.n	800635e <UART_SetConfig+0x5a6>
 80061e4:	2304      	movs	r3, #4
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ea:	e0b8      	b.n	800635e <UART_SetConfig+0x5a6>
 80061ec:	2308      	movs	r3, #8
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f2:	e0b4      	b.n	800635e <UART_SetConfig+0x5a6>
 80061f4:	2310      	movs	r3, #16
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fa:	e0b0      	b.n	800635e <UART_SetConfig+0x5a6>
 80061fc:	2320      	movs	r3, #32
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006202:	e0ac      	b.n	800635e <UART_SetConfig+0x5a6>
 8006204:	2340      	movs	r3, #64	; 0x40
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620a:	e0a8      	b.n	800635e <UART_SetConfig+0x5a6>
 800620c:	2380      	movs	r3, #128	; 0x80
 800620e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006212:	e0a4      	b.n	800635e <UART_SetConfig+0x5a6>
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a8f      	ldr	r2, [pc, #572]	; (8006458 <UART_SetConfig+0x6a0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d130      	bne.n	8006280 <UART_SetConfig+0x4c8>
 800621e:	4b8d      	ldr	r3, [pc, #564]	; (8006454 <UART_SetConfig+0x69c>)
 8006220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	2b05      	cmp	r3, #5
 8006228:	d826      	bhi.n	8006278 <UART_SetConfig+0x4c0>
 800622a:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <UART_SetConfig+0x478>)
 800622c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006230:	08006249 	.word	0x08006249
 8006234:	08006251 	.word	0x08006251
 8006238:	08006259 	.word	0x08006259
 800623c:	08006261 	.word	0x08006261
 8006240:	08006269 	.word	0x08006269
 8006244:	08006271 	.word	0x08006271
 8006248:	2300      	movs	r3, #0
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624e:	e086      	b.n	800635e <UART_SetConfig+0x5a6>
 8006250:	2304      	movs	r3, #4
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006256:	e082      	b.n	800635e <UART_SetConfig+0x5a6>
 8006258:	2308      	movs	r3, #8
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800625e:	e07e      	b.n	800635e <UART_SetConfig+0x5a6>
 8006260:	2310      	movs	r3, #16
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006266:	e07a      	b.n	800635e <UART_SetConfig+0x5a6>
 8006268:	2320      	movs	r3, #32
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800626e:	e076      	b.n	800635e <UART_SetConfig+0x5a6>
 8006270:	2340      	movs	r3, #64	; 0x40
 8006272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006276:	e072      	b.n	800635e <UART_SetConfig+0x5a6>
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627e:	e06e      	b.n	800635e <UART_SetConfig+0x5a6>
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a75      	ldr	r2, [pc, #468]	; (800645c <UART_SetConfig+0x6a4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d130      	bne.n	80062ec <UART_SetConfig+0x534>
 800628a:	4b72      	ldr	r3, [pc, #456]	; (8006454 <UART_SetConfig+0x69c>)
 800628c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	2b05      	cmp	r3, #5
 8006294:	d826      	bhi.n	80062e4 <UART_SetConfig+0x52c>
 8006296:	a201      	add	r2, pc, #4	; (adr r2, 800629c <UART_SetConfig+0x4e4>)
 8006298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629c:	080062b5 	.word	0x080062b5
 80062a0:	080062bd 	.word	0x080062bd
 80062a4:	080062c5 	.word	0x080062c5
 80062a8:	080062cd 	.word	0x080062cd
 80062ac:	080062d5 	.word	0x080062d5
 80062b0:	080062dd 	.word	0x080062dd
 80062b4:	2300      	movs	r3, #0
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ba:	e050      	b.n	800635e <UART_SetConfig+0x5a6>
 80062bc:	2304      	movs	r3, #4
 80062be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c2:	e04c      	b.n	800635e <UART_SetConfig+0x5a6>
 80062c4:	2308      	movs	r3, #8
 80062c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ca:	e048      	b.n	800635e <UART_SetConfig+0x5a6>
 80062cc:	2310      	movs	r3, #16
 80062ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d2:	e044      	b.n	800635e <UART_SetConfig+0x5a6>
 80062d4:	2320      	movs	r3, #32
 80062d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062da:	e040      	b.n	800635e <UART_SetConfig+0x5a6>
 80062dc:	2340      	movs	r3, #64	; 0x40
 80062de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e2:	e03c      	b.n	800635e <UART_SetConfig+0x5a6>
 80062e4:	2380      	movs	r3, #128	; 0x80
 80062e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ea:	e038      	b.n	800635e <UART_SetConfig+0x5a6>
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a5b      	ldr	r2, [pc, #364]	; (8006460 <UART_SetConfig+0x6a8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d130      	bne.n	8006358 <UART_SetConfig+0x5a0>
 80062f6:	4b57      	ldr	r3, [pc, #348]	; (8006454 <UART_SetConfig+0x69c>)
 80062f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	2b05      	cmp	r3, #5
 8006300:	d826      	bhi.n	8006350 <UART_SetConfig+0x598>
 8006302:	a201      	add	r2, pc, #4	; (adr r2, 8006308 <UART_SetConfig+0x550>)
 8006304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006308:	08006321 	.word	0x08006321
 800630c:	08006329 	.word	0x08006329
 8006310:	08006331 	.word	0x08006331
 8006314:	08006339 	.word	0x08006339
 8006318:	08006341 	.word	0x08006341
 800631c:	08006349 	.word	0x08006349
 8006320:	2302      	movs	r3, #2
 8006322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006326:	e01a      	b.n	800635e <UART_SetConfig+0x5a6>
 8006328:	2304      	movs	r3, #4
 800632a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632e:	e016      	b.n	800635e <UART_SetConfig+0x5a6>
 8006330:	2308      	movs	r3, #8
 8006332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006336:	e012      	b.n	800635e <UART_SetConfig+0x5a6>
 8006338:	2310      	movs	r3, #16
 800633a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633e:	e00e      	b.n	800635e <UART_SetConfig+0x5a6>
 8006340:	2320      	movs	r3, #32
 8006342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006346:	e00a      	b.n	800635e <UART_SetConfig+0x5a6>
 8006348:	2340      	movs	r3, #64	; 0x40
 800634a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634e:	e006      	b.n	800635e <UART_SetConfig+0x5a6>
 8006350:	2380      	movs	r3, #128	; 0x80
 8006352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006356:	e002      	b.n	800635e <UART_SetConfig+0x5a6>
 8006358:	2380      	movs	r3, #128	; 0x80
 800635a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a3f      	ldr	r2, [pc, #252]	; (8006460 <UART_SetConfig+0x6a8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	f040 80f8 	bne.w	800655a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800636a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800636e:	2b20      	cmp	r3, #32
 8006370:	dc46      	bgt.n	8006400 <UART_SetConfig+0x648>
 8006372:	2b02      	cmp	r3, #2
 8006374:	f2c0 8082 	blt.w	800647c <UART_SetConfig+0x6c4>
 8006378:	3b02      	subs	r3, #2
 800637a:	2b1e      	cmp	r3, #30
 800637c:	d87e      	bhi.n	800647c <UART_SetConfig+0x6c4>
 800637e:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <UART_SetConfig+0x5cc>)
 8006380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006384:	08006407 	.word	0x08006407
 8006388:	0800647d 	.word	0x0800647d
 800638c:	0800640f 	.word	0x0800640f
 8006390:	0800647d 	.word	0x0800647d
 8006394:	0800647d 	.word	0x0800647d
 8006398:	0800647d 	.word	0x0800647d
 800639c:	0800641f 	.word	0x0800641f
 80063a0:	0800647d 	.word	0x0800647d
 80063a4:	0800647d 	.word	0x0800647d
 80063a8:	0800647d 	.word	0x0800647d
 80063ac:	0800647d 	.word	0x0800647d
 80063b0:	0800647d 	.word	0x0800647d
 80063b4:	0800647d 	.word	0x0800647d
 80063b8:	0800647d 	.word	0x0800647d
 80063bc:	0800642f 	.word	0x0800642f
 80063c0:	0800647d 	.word	0x0800647d
 80063c4:	0800647d 	.word	0x0800647d
 80063c8:	0800647d 	.word	0x0800647d
 80063cc:	0800647d 	.word	0x0800647d
 80063d0:	0800647d 	.word	0x0800647d
 80063d4:	0800647d 	.word	0x0800647d
 80063d8:	0800647d 	.word	0x0800647d
 80063dc:	0800647d 	.word	0x0800647d
 80063e0:	0800647d 	.word	0x0800647d
 80063e4:	0800647d 	.word	0x0800647d
 80063e8:	0800647d 	.word	0x0800647d
 80063ec:	0800647d 	.word	0x0800647d
 80063f0:	0800647d 	.word	0x0800647d
 80063f4:	0800647d 	.word	0x0800647d
 80063f8:	0800647d 	.word	0x0800647d
 80063fc:	0800646f 	.word	0x0800646f
 8006400:	2b40      	cmp	r3, #64	; 0x40
 8006402:	d037      	beq.n	8006474 <UART_SetConfig+0x6bc>
 8006404:	e03a      	b.n	800647c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006406:	f7fe f821 	bl	800444c <HAL_RCCEx_GetD3PCLK1Freq>
 800640a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800640c:	e03c      	b.n	8006488 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800640e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe f830 	bl	8004478 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800641c:	e034      	b.n	8006488 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800641e:	f107 0318 	add.w	r3, r7, #24
 8006422:	4618      	mov	r0, r3
 8006424:	f7fe f97c 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800642c:	e02c      	b.n	8006488 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800642e:	4b09      	ldr	r3, [pc, #36]	; (8006454 <UART_SetConfig+0x69c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0320 	and.w	r3, r3, #32
 8006436:	2b00      	cmp	r3, #0
 8006438:	d016      	beq.n	8006468 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800643a:	4b06      	ldr	r3, [pc, #24]	; (8006454 <UART_SetConfig+0x69c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	08db      	lsrs	r3, r3, #3
 8006440:	f003 0303 	and.w	r3, r3, #3
 8006444:	4a07      	ldr	r2, [pc, #28]	; (8006464 <UART_SetConfig+0x6ac>)
 8006446:	fa22 f303 	lsr.w	r3, r2, r3
 800644a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800644c:	e01c      	b.n	8006488 <UART_SetConfig+0x6d0>
 800644e:	bf00      	nop
 8006450:	40011400 	.word	0x40011400
 8006454:	58024400 	.word	0x58024400
 8006458:	40007800 	.word	0x40007800
 800645c:	40007c00 	.word	0x40007c00
 8006460:	58000c00 	.word	0x58000c00
 8006464:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006468:	4b9d      	ldr	r3, [pc, #628]	; (80066e0 <UART_SetConfig+0x928>)
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800646c:	e00c      	b.n	8006488 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800646e:	4b9d      	ldr	r3, [pc, #628]	; (80066e4 <UART_SetConfig+0x92c>)
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006472:	e009      	b.n	8006488 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006478:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800647a:	e005      	b.n	8006488 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006486:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 81de 	beq.w	800684c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	4a94      	ldr	r2, [pc, #592]	; (80066e8 <UART_SetConfig+0x930>)
 8006496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800649a:	461a      	mov	r2, r3
 800649c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800649e:	fbb3 f3f2 	udiv	r3, r3, r2
 80064a2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	4613      	mov	r3, r2
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	4413      	add	r3, r2
 80064ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d305      	bcc.n	80064c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064bc:	429a      	cmp	r2, r3
 80064be:	d903      	bls.n	80064c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80064c6:	e1c1      	b.n	800684c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ca:	2200      	movs	r2, #0
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	60fa      	str	r2, [r7, #12]
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	4a84      	ldr	r2, [pc, #528]	; (80066e8 <UART_SetConfig+0x930>)
 80064d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2200      	movs	r2, #0
 80064de:	603b      	str	r3, [r7, #0]
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064ea:	f7f9 ff49 	bl	8000380 <__aeabi_uldivmod>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4610      	mov	r0, r2
 80064f4:	4619      	mov	r1, r3
 80064f6:	f04f 0200 	mov.w	r2, #0
 80064fa:	f04f 0300 	mov.w	r3, #0
 80064fe:	020b      	lsls	r3, r1, #8
 8006500:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006504:	0202      	lsls	r2, r0, #8
 8006506:	6979      	ldr	r1, [r7, #20]
 8006508:	6849      	ldr	r1, [r1, #4]
 800650a:	0849      	lsrs	r1, r1, #1
 800650c:	2000      	movs	r0, #0
 800650e:	460c      	mov	r4, r1
 8006510:	4605      	mov	r5, r0
 8006512:	eb12 0804 	adds.w	r8, r2, r4
 8006516:	eb43 0905 	adc.w	r9, r3, r5
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	469a      	mov	sl, r3
 8006522:	4693      	mov	fp, r2
 8006524:	4652      	mov	r2, sl
 8006526:	465b      	mov	r3, fp
 8006528:	4640      	mov	r0, r8
 800652a:	4649      	mov	r1, r9
 800652c:	f7f9 ff28 	bl	8000380 <__aeabi_uldivmod>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4613      	mov	r3, r2
 8006536:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800653e:	d308      	bcc.n	8006552 <UART_SetConfig+0x79a>
 8006540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006546:	d204      	bcs.n	8006552 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800654e:	60da      	str	r2, [r3, #12]
 8006550:	e17c      	b.n	800684c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006558:	e178      	b.n	800684c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	69db      	ldr	r3, [r3, #28]
 800655e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006562:	f040 80c5 	bne.w	80066f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006566:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800656a:	2b20      	cmp	r3, #32
 800656c:	dc48      	bgt.n	8006600 <UART_SetConfig+0x848>
 800656e:	2b00      	cmp	r3, #0
 8006570:	db7b      	blt.n	800666a <UART_SetConfig+0x8b2>
 8006572:	2b20      	cmp	r3, #32
 8006574:	d879      	bhi.n	800666a <UART_SetConfig+0x8b2>
 8006576:	a201      	add	r2, pc, #4	; (adr r2, 800657c <UART_SetConfig+0x7c4>)
 8006578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800657c:	08006607 	.word	0x08006607
 8006580:	0800660f 	.word	0x0800660f
 8006584:	0800666b 	.word	0x0800666b
 8006588:	0800666b 	.word	0x0800666b
 800658c:	08006617 	.word	0x08006617
 8006590:	0800666b 	.word	0x0800666b
 8006594:	0800666b 	.word	0x0800666b
 8006598:	0800666b 	.word	0x0800666b
 800659c:	08006627 	.word	0x08006627
 80065a0:	0800666b 	.word	0x0800666b
 80065a4:	0800666b 	.word	0x0800666b
 80065a8:	0800666b 	.word	0x0800666b
 80065ac:	0800666b 	.word	0x0800666b
 80065b0:	0800666b 	.word	0x0800666b
 80065b4:	0800666b 	.word	0x0800666b
 80065b8:	0800666b 	.word	0x0800666b
 80065bc:	08006637 	.word	0x08006637
 80065c0:	0800666b 	.word	0x0800666b
 80065c4:	0800666b 	.word	0x0800666b
 80065c8:	0800666b 	.word	0x0800666b
 80065cc:	0800666b 	.word	0x0800666b
 80065d0:	0800666b 	.word	0x0800666b
 80065d4:	0800666b 	.word	0x0800666b
 80065d8:	0800666b 	.word	0x0800666b
 80065dc:	0800666b 	.word	0x0800666b
 80065e0:	0800666b 	.word	0x0800666b
 80065e4:	0800666b 	.word	0x0800666b
 80065e8:	0800666b 	.word	0x0800666b
 80065ec:	0800666b 	.word	0x0800666b
 80065f0:	0800666b 	.word	0x0800666b
 80065f4:	0800666b 	.word	0x0800666b
 80065f8:	0800666b 	.word	0x0800666b
 80065fc:	0800665d 	.word	0x0800665d
 8006600:	2b40      	cmp	r3, #64	; 0x40
 8006602:	d02e      	beq.n	8006662 <UART_SetConfig+0x8aa>
 8006604:	e031      	b.n	800666a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006606:	f7fc fceb 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 800660a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800660c:	e033      	b.n	8006676 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800660e:	f7fc fcfd 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 8006612:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006614:	e02f      	b.n	8006676 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800661a:	4618      	mov	r0, r3
 800661c:	f7fd ff2c 	bl	8004478 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006624:	e027      	b.n	8006676 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006626:	f107 0318 	add.w	r3, r7, #24
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe f878 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006634:	e01f      	b.n	8006676 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006636:	4b2d      	ldr	r3, [pc, #180]	; (80066ec <UART_SetConfig+0x934>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b00      	cmp	r3, #0
 8006640:	d009      	beq.n	8006656 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006642:	4b2a      	ldr	r3, [pc, #168]	; (80066ec <UART_SetConfig+0x934>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	08db      	lsrs	r3, r3, #3
 8006648:	f003 0303 	and.w	r3, r3, #3
 800664c:	4a24      	ldr	r2, [pc, #144]	; (80066e0 <UART_SetConfig+0x928>)
 800664e:	fa22 f303 	lsr.w	r3, r2, r3
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006654:	e00f      	b.n	8006676 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006656:	4b22      	ldr	r3, [pc, #136]	; (80066e0 <UART_SetConfig+0x928>)
 8006658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800665a:	e00c      	b.n	8006676 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800665c:	4b21      	ldr	r3, [pc, #132]	; (80066e4 <UART_SetConfig+0x92c>)
 800665e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006660:	e009      	b.n	8006676 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006668:	e005      	b.n	8006676 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006674:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 80e7 	beq.w	800684c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006682:	4a19      	ldr	r2, [pc, #100]	; (80066e8 <UART_SetConfig+0x930>)
 8006684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006688:	461a      	mov	r2, r3
 800668a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006690:	005a      	lsls	r2, r3, #1
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	085b      	lsrs	r3, r3, #1
 8006698:	441a      	add	r2, r3
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a6:	2b0f      	cmp	r3, #15
 80066a8:	d916      	bls.n	80066d8 <UART_SetConfig+0x920>
 80066aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066b0:	d212      	bcs.n	80066d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f023 030f 	bic.w	r3, r3, #15
 80066ba:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	085b      	lsrs	r3, r3, #1
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066ca:	4313      	orrs	r3, r2
 80066cc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80066d4:	60da      	str	r2, [r3, #12]
 80066d6:	e0b9      	b.n	800684c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80066de:	e0b5      	b.n	800684c <UART_SetConfig+0xa94>
 80066e0:	03d09000 	.word	0x03d09000
 80066e4:	003d0900 	.word	0x003d0900
 80066e8:	08008000 	.word	0x08008000
 80066ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80066f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066f4:	2b20      	cmp	r3, #32
 80066f6:	dc49      	bgt.n	800678c <UART_SetConfig+0x9d4>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	db7c      	blt.n	80067f6 <UART_SetConfig+0xa3e>
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	d87a      	bhi.n	80067f6 <UART_SetConfig+0xa3e>
 8006700:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <UART_SetConfig+0x950>)
 8006702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006706:	bf00      	nop
 8006708:	08006793 	.word	0x08006793
 800670c:	0800679b 	.word	0x0800679b
 8006710:	080067f7 	.word	0x080067f7
 8006714:	080067f7 	.word	0x080067f7
 8006718:	080067a3 	.word	0x080067a3
 800671c:	080067f7 	.word	0x080067f7
 8006720:	080067f7 	.word	0x080067f7
 8006724:	080067f7 	.word	0x080067f7
 8006728:	080067b3 	.word	0x080067b3
 800672c:	080067f7 	.word	0x080067f7
 8006730:	080067f7 	.word	0x080067f7
 8006734:	080067f7 	.word	0x080067f7
 8006738:	080067f7 	.word	0x080067f7
 800673c:	080067f7 	.word	0x080067f7
 8006740:	080067f7 	.word	0x080067f7
 8006744:	080067f7 	.word	0x080067f7
 8006748:	080067c3 	.word	0x080067c3
 800674c:	080067f7 	.word	0x080067f7
 8006750:	080067f7 	.word	0x080067f7
 8006754:	080067f7 	.word	0x080067f7
 8006758:	080067f7 	.word	0x080067f7
 800675c:	080067f7 	.word	0x080067f7
 8006760:	080067f7 	.word	0x080067f7
 8006764:	080067f7 	.word	0x080067f7
 8006768:	080067f7 	.word	0x080067f7
 800676c:	080067f7 	.word	0x080067f7
 8006770:	080067f7 	.word	0x080067f7
 8006774:	080067f7 	.word	0x080067f7
 8006778:	080067f7 	.word	0x080067f7
 800677c:	080067f7 	.word	0x080067f7
 8006780:	080067f7 	.word	0x080067f7
 8006784:	080067f7 	.word	0x080067f7
 8006788:	080067e9 	.word	0x080067e9
 800678c:	2b40      	cmp	r3, #64	; 0x40
 800678e:	d02e      	beq.n	80067ee <UART_SetConfig+0xa36>
 8006790:	e031      	b.n	80067f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006792:	f7fc fc25 	bl	8002fe0 <HAL_RCC_GetPCLK1Freq>
 8006796:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006798:	e033      	b.n	8006802 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800679a:	f7fc fc37 	bl	800300c <HAL_RCC_GetPCLK2Freq>
 800679e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80067a0:	e02f      	b.n	8006802 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7fd fe66 	bl	8004478 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067b0:	e027      	b.n	8006802 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067b2:	f107 0318 	add.w	r3, r7, #24
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fd ffb2 	bl	8004720 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067c0:	e01f      	b.n	8006802 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067c2:	4b2d      	ldr	r3, [pc, #180]	; (8006878 <UART_SetConfig+0xac0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d009      	beq.n	80067e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067ce:	4b2a      	ldr	r3, [pc, #168]	; (8006878 <UART_SetConfig+0xac0>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	08db      	lsrs	r3, r3, #3
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	4a28      	ldr	r2, [pc, #160]	; (800687c <UART_SetConfig+0xac4>)
 80067da:	fa22 f303 	lsr.w	r3, r2, r3
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067e0:	e00f      	b.n	8006802 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80067e2:	4b26      	ldr	r3, [pc, #152]	; (800687c <UART_SetConfig+0xac4>)
 80067e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e6:	e00c      	b.n	8006802 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067e8:	4b25      	ldr	r3, [pc, #148]	; (8006880 <UART_SetConfig+0xac8>)
 80067ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ec:	e009      	b.n	8006802 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067f4:	e005      	b.n	8006802 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006800:	bf00      	nop
    }

    if (pclk != 0U)
 8006802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006804:	2b00      	cmp	r3, #0
 8006806:	d021      	beq.n	800684c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	4a1d      	ldr	r2, [pc, #116]	; (8006884 <UART_SetConfig+0xacc>)
 800680e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006812:	461a      	mov	r2, r3
 8006814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006816:	fbb3 f2f2 	udiv	r2, r3, r2
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	085b      	lsrs	r3, r3, #1
 8006820:	441a      	add	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	fbb2 f3f3 	udiv	r3, r2, r3
 800682a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800682c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682e:	2b0f      	cmp	r3, #15
 8006830:	d909      	bls.n	8006846 <UART_SetConfig+0xa8e>
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006838:	d205      	bcs.n	8006846 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683c:	b29a      	uxth	r2, r3
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60da      	str	r2, [r3, #12]
 8006844:	e002      	b.n	800684c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2201      	movs	r2, #1
 8006850:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2201      	movs	r2, #1
 8006858:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2200      	movs	r2, #0
 8006860:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2200      	movs	r2, #0
 8006866:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006868:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800686c:	4618      	mov	r0, r3
 800686e:	3748      	adds	r7, #72	; 0x48
 8006870:	46bd      	mov	sp, r7
 8006872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006876:	bf00      	nop
 8006878:	58024400 	.word	0x58024400
 800687c:	03d09000 	.word	0x03d09000
 8006880:	003d0900 	.word	0x003d0900
 8006884:	08008000 	.word	0x08008000

08006888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00a      	beq.n	80068f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fa:	f003 0308 	and.w	r3, r3, #8
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691c:	f003 0310 	and.w	r3, r3, #16
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693e:	f003 0320 	and.w	r3, r3, #32
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006964:	2b00      	cmp	r3, #0
 8006966:	d01a      	beq.n	800699e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006982:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006986:	d10a      	bne.n	800699e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	605a      	str	r2, [r3, #4]
  }
}
 80069c0:	bf00      	nop
 80069c2:	370c      	adds	r7, #12
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b098      	sub	sp, #96	; 0x60
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069dc:	f7fa ff76 	bl	80018cc <HAL_GetTick>
 80069e0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0308 	and.w	r3, r3, #8
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d12f      	bne.n	8006a50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069f8:	2200      	movs	r2, #0
 80069fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f88e 	bl	8006b20 <UART_WaitOnFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d022      	beq.n	8006a50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	e853 3f00 	ldrex	r3, [r3]
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a1e:	653b      	str	r3, [r7, #80]	; 0x50
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	461a      	mov	r2, r3
 8006a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a28:	647b      	str	r3, [r7, #68]	; 0x44
 8006a2a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a30:	e841 2300 	strex	r3, r2, [r1]
 8006a34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1e6      	bne.n	8006a0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e063      	b.n	8006b18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f003 0304 	and.w	r3, r3, #4
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d149      	bne.n	8006af2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a66:	2200      	movs	r2, #0
 8006a68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f857 	bl	8006b20 <UART_WaitOnFlagUntilTimeout>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d03c      	beq.n	8006af2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	623b      	str	r3, [r7, #32]
   return(result);
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a96:	633b      	str	r3, [r7, #48]	; 0x30
 8006a98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a9e:	e841 2300 	strex	r3, r2, [r1]
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1e6      	bne.n	8006a78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	3308      	adds	r3, #8
 8006ab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	e853 3f00 	ldrex	r3, [r3]
 8006ab8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f023 0301 	bic.w	r3, r3, #1
 8006ac0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3308      	adds	r3, #8
 8006ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aca:	61fa      	str	r2, [r7, #28]
 8006acc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	69b9      	ldr	r1, [r7, #24]
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	617b      	str	r3, [r7, #20]
   return(result);
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e5      	bne.n	8006aaa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e012      	b.n	8006b18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3758      	adds	r7, #88	; 0x58
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b30:	e049      	b.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b38:	d045      	beq.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b3a:	f7fa fec7 	bl	80018cc <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d302      	bcc.n	8006b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e048      	b.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d031      	beq.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	f003 0308 	and.w	r3, r3, #8
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d110      	bne.n	8006b92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2208      	movs	r2, #8
 8006b76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f839 	bl	8006bf0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2208      	movs	r2, #8
 8006b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e029      	b.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ba0:	d111      	bne.n	8006bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 f81f 	bl	8006bf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e00f      	b.n	8006be6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	69da      	ldr	r2, [r3, #28]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	bf0c      	ite	eq
 8006bd6:	2301      	moveq	r3, #1
 8006bd8:	2300      	movne	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	461a      	mov	r2, r3
 8006bde:	79fb      	ldrb	r3, [r7, #7]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d0a6      	beq.n	8006b32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
	...

08006bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b095      	sub	sp, #84	; 0x54
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	461a      	mov	r2, r3
 8006c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c16:	643b      	str	r3, [r7, #64]	; 0x40
 8006c18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e6      	bne.n	8006bf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	4b1e      	ldr	r3, [pc, #120]	; (8006cb8 <UART_EndRxTransfer+0xc8>)
 8006c3e:	4013      	ands	r3, r2
 8006c40:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3308      	adds	r3, #8
 8006c48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e5      	bne.n	8006c2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d118      	bne.n	8006c98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	e853 3f00 	ldrex	r3, [r3]
 8006c72:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	f023 0310 	bic.w	r3, r3, #16
 8006c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
 8006c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	6979      	ldr	r1, [r7, #20]
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	e841 2300 	strex	r3, r2, [r1]
 8006c90:	613b      	str	r3, [r7, #16]
   return(result);
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e6      	bne.n	8006c66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006cac:	bf00      	nop
 8006cae:	3754      	adds	r7, #84	; 0x54
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	effffffe 	.word	0xeffffffe

08006cbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e027      	b.n	8006d22 <HAL_UARTEx_DisableFifoMode+0x66>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2224      	movs	r2, #36	; 0x24
 8006cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0201 	bic.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e02d      	b.n	8006da2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2224      	movs	r2, #36	; 0x24
 8006d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0201 	bic.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f850 	bl	8006e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e02d      	b.n	8006e1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2224      	movs	r2, #36	; 0x24
 8006dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0201 	bic.w	r2, r2, #1
 8006de8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f812 	bl	8006e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d108      	bne.n	8006e4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e48:	e031      	b.n	8006eae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e4a:	2310      	movs	r3, #16
 8006e4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e4e:	2310      	movs	r3, #16
 8006e50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	0e5b      	lsrs	r3, r3, #25
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	0f5b      	lsrs	r3, r3, #29
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	7b3a      	ldrb	r2, [r7, #12]
 8006e76:	4911      	ldr	r1, [pc, #68]	; (8006ebc <UARTEx_SetNbDataToProcess+0x94>)
 8006e78:	5c8a      	ldrb	r2, [r1, r2]
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e7e:	7b3a      	ldrb	r2, [r7, #12]
 8006e80:	490f      	ldr	r1, [pc, #60]	; (8006ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8006e82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	7b7a      	ldrb	r2, [r7, #13]
 8006e94:	4909      	ldr	r1, [pc, #36]	; (8006ebc <UARTEx_SetNbDataToProcess+0x94>)
 8006e96:	5c8a      	ldrb	r2, [r1, r2]
 8006e98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e9c:	7b7a      	ldrb	r2, [r7, #13]
 8006e9e:	4908      	ldr	r1, [pc, #32]	; (8006ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8006ea0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006eae:	bf00      	nop
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	08008018 	.word	0x08008018
 8006ec0:	08008020 	.word	0x08008020

08006ec4 <std>:
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	b510      	push	{r4, lr}
 8006ec8:	4604      	mov	r4, r0
 8006eca:	e9c0 3300 	strd	r3, r3, [r0]
 8006ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ed2:	6083      	str	r3, [r0, #8]
 8006ed4:	8181      	strh	r1, [r0, #12]
 8006ed6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ed8:	81c2      	strh	r2, [r0, #14]
 8006eda:	6183      	str	r3, [r0, #24]
 8006edc:	4619      	mov	r1, r3
 8006ede:	2208      	movs	r2, #8
 8006ee0:	305c      	adds	r0, #92	; 0x5c
 8006ee2:	f000 f9ff 	bl	80072e4 <memset>
 8006ee6:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <std+0x58>)
 8006ee8:	6263      	str	r3, [r4, #36]	; 0x24
 8006eea:	4b0d      	ldr	r3, [pc, #52]	; (8006f20 <std+0x5c>)
 8006eec:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eee:	4b0d      	ldr	r3, [pc, #52]	; (8006f24 <std+0x60>)
 8006ef0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ef2:	4b0d      	ldr	r3, [pc, #52]	; (8006f28 <std+0x64>)
 8006ef4:	6323      	str	r3, [r4, #48]	; 0x30
 8006ef6:	4b0d      	ldr	r3, [pc, #52]	; (8006f2c <std+0x68>)
 8006ef8:	6224      	str	r4, [r4, #32]
 8006efa:	429c      	cmp	r4, r3
 8006efc:	d006      	beq.n	8006f0c <std+0x48>
 8006efe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006f02:	4294      	cmp	r4, r2
 8006f04:	d002      	beq.n	8006f0c <std+0x48>
 8006f06:	33d0      	adds	r3, #208	; 0xd0
 8006f08:	429c      	cmp	r4, r3
 8006f0a:	d105      	bne.n	8006f18 <std+0x54>
 8006f0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f14:	f000 ba5e 	b.w	80073d4 <__retarget_lock_init_recursive>
 8006f18:	bd10      	pop	{r4, pc}
 8006f1a:	bf00      	nop
 8006f1c:	08007135 	.word	0x08007135
 8006f20:	08007157 	.word	0x08007157
 8006f24:	0800718f 	.word	0x0800718f
 8006f28:	080071b3 	.word	0x080071b3
 8006f2c:	240001c0 	.word	0x240001c0

08006f30 <stdio_exit_handler>:
 8006f30:	4a02      	ldr	r2, [pc, #8]	; (8006f3c <stdio_exit_handler+0xc>)
 8006f32:	4903      	ldr	r1, [pc, #12]	; (8006f40 <stdio_exit_handler+0x10>)
 8006f34:	4803      	ldr	r0, [pc, #12]	; (8006f44 <stdio_exit_handler+0x14>)
 8006f36:	f000 b869 	b.w	800700c <_fwalk_sglue>
 8006f3a:	bf00      	nop
 8006f3c:	24000010 	.word	0x24000010
 8006f40:	08007c81 	.word	0x08007c81
 8006f44:	2400001c 	.word	0x2400001c

08006f48 <cleanup_stdio>:
 8006f48:	6841      	ldr	r1, [r0, #4]
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <cleanup_stdio+0x34>)
 8006f4c:	4299      	cmp	r1, r3
 8006f4e:	b510      	push	{r4, lr}
 8006f50:	4604      	mov	r4, r0
 8006f52:	d001      	beq.n	8006f58 <cleanup_stdio+0x10>
 8006f54:	f000 fe94 	bl	8007c80 <_fflush_r>
 8006f58:	68a1      	ldr	r1, [r4, #8]
 8006f5a:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <cleanup_stdio+0x38>)
 8006f5c:	4299      	cmp	r1, r3
 8006f5e:	d002      	beq.n	8006f66 <cleanup_stdio+0x1e>
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fe8d 	bl	8007c80 <_fflush_r>
 8006f66:	68e1      	ldr	r1, [r4, #12]
 8006f68:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <cleanup_stdio+0x3c>)
 8006f6a:	4299      	cmp	r1, r3
 8006f6c:	d004      	beq.n	8006f78 <cleanup_stdio+0x30>
 8006f6e:	4620      	mov	r0, r4
 8006f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f74:	f000 be84 	b.w	8007c80 <_fflush_r>
 8006f78:	bd10      	pop	{r4, pc}
 8006f7a:	bf00      	nop
 8006f7c:	240001c0 	.word	0x240001c0
 8006f80:	24000228 	.word	0x24000228
 8006f84:	24000290 	.word	0x24000290

08006f88 <global_stdio_init.part.0>:
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	4b0b      	ldr	r3, [pc, #44]	; (8006fb8 <global_stdio_init.part.0+0x30>)
 8006f8c:	4c0b      	ldr	r4, [pc, #44]	; (8006fbc <global_stdio_init.part.0+0x34>)
 8006f8e:	4a0c      	ldr	r2, [pc, #48]	; (8006fc0 <global_stdio_init.part.0+0x38>)
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	4620      	mov	r0, r4
 8006f94:	2200      	movs	r2, #0
 8006f96:	2104      	movs	r1, #4
 8006f98:	f7ff ff94 	bl	8006ec4 <std>
 8006f9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	2109      	movs	r1, #9
 8006fa4:	f7ff ff8e 	bl	8006ec4 <std>
 8006fa8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006fac:	2202      	movs	r2, #2
 8006fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fb2:	2112      	movs	r1, #18
 8006fb4:	f7ff bf86 	b.w	8006ec4 <std>
 8006fb8:	240002f8 	.word	0x240002f8
 8006fbc:	240001c0 	.word	0x240001c0
 8006fc0:	08006f31 	.word	0x08006f31

08006fc4 <__sfp_lock_acquire>:
 8006fc4:	4801      	ldr	r0, [pc, #4]	; (8006fcc <__sfp_lock_acquire+0x8>)
 8006fc6:	f000 ba06 	b.w	80073d6 <__retarget_lock_acquire_recursive>
 8006fca:	bf00      	nop
 8006fcc:	24000301 	.word	0x24000301

08006fd0 <__sfp_lock_release>:
 8006fd0:	4801      	ldr	r0, [pc, #4]	; (8006fd8 <__sfp_lock_release+0x8>)
 8006fd2:	f000 ba01 	b.w	80073d8 <__retarget_lock_release_recursive>
 8006fd6:	bf00      	nop
 8006fd8:	24000301 	.word	0x24000301

08006fdc <__sinit>:
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	4604      	mov	r4, r0
 8006fe0:	f7ff fff0 	bl	8006fc4 <__sfp_lock_acquire>
 8006fe4:	6a23      	ldr	r3, [r4, #32]
 8006fe6:	b11b      	cbz	r3, 8006ff0 <__sinit+0x14>
 8006fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fec:	f7ff bff0 	b.w	8006fd0 <__sfp_lock_release>
 8006ff0:	4b04      	ldr	r3, [pc, #16]	; (8007004 <__sinit+0x28>)
 8006ff2:	6223      	str	r3, [r4, #32]
 8006ff4:	4b04      	ldr	r3, [pc, #16]	; (8007008 <__sinit+0x2c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1f5      	bne.n	8006fe8 <__sinit+0xc>
 8006ffc:	f7ff ffc4 	bl	8006f88 <global_stdio_init.part.0>
 8007000:	e7f2      	b.n	8006fe8 <__sinit+0xc>
 8007002:	bf00      	nop
 8007004:	08006f49 	.word	0x08006f49
 8007008:	240002f8 	.word	0x240002f8

0800700c <_fwalk_sglue>:
 800700c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007010:	4607      	mov	r7, r0
 8007012:	4688      	mov	r8, r1
 8007014:	4614      	mov	r4, r2
 8007016:	2600      	movs	r6, #0
 8007018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800701c:	f1b9 0901 	subs.w	r9, r9, #1
 8007020:	d505      	bpl.n	800702e <_fwalk_sglue+0x22>
 8007022:	6824      	ldr	r4, [r4, #0]
 8007024:	2c00      	cmp	r4, #0
 8007026:	d1f7      	bne.n	8007018 <_fwalk_sglue+0xc>
 8007028:	4630      	mov	r0, r6
 800702a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800702e:	89ab      	ldrh	r3, [r5, #12]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d907      	bls.n	8007044 <_fwalk_sglue+0x38>
 8007034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007038:	3301      	adds	r3, #1
 800703a:	d003      	beq.n	8007044 <_fwalk_sglue+0x38>
 800703c:	4629      	mov	r1, r5
 800703e:	4638      	mov	r0, r7
 8007040:	47c0      	blx	r8
 8007042:	4306      	orrs	r6, r0
 8007044:	3568      	adds	r5, #104	; 0x68
 8007046:	e7e9      	b.n	800701c <_fwalk_sglue+0x10>

08007048 <iprintf>:
 8007048:	b40f      	push	{r0, r1, r2, r3}
 800704a:	b507      	push	{r0, r1, r2, lr}
 800704c:	4906      	ldr	r1, [pc, #24]	; (8007068 <iprintf+0x20>)
 800704e:	ab04      	add	r3, sp, #16
 8007050:	6808      	ldr	r0, [r1, #0]
 8007052:	f853 2b04 	ldr.w	r2, [r3], #4
 8007056:	6881      	ldr	r1, [r0, #8]
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	f000 fae1 	bl	8007620 <_vfiprintf_r>
 800705e:	b003      	add	sp, #12
 8007060:	f85d eb04 	ldr.w	lr, [sp], #4
 8007064:	b004      	add	sp, #16
 8007066:	4770      	bx	lr
 8007068:	24000068 	.word	0x24000068

0800706c <putchar>:
 800706c:	4b02      	ldr	r3, [pc, #8]	; (8007078 <putchar+0xc>)
 800706e:	4601      	mov	r1, r0
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	6882      	ldr	r2, [r0, #8]
 8007074:	f000 be8e 	b.w	8007d94 <_putc_r>
 8007078:	24000068 	.word	0x24000068

0800707c <_puts_r>:
 800707c:	6a03      	ldr	r3, [r0, #32]
 800707e:	b570      	push	{r4, r5, r6, lr}
 8007080:	6884      	ldr	r4, [r0, #8]
 8007082:	4605      	mov	r5, r0
 8007084:	460e      	mov	r6, r1
 8007086:	b90b      	cbnz	r3, 800708c <_puts_r+0x10>
 8007088:	f7ff ffa8 	bl	8006fdc <__sinit>
 800708c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800708e:	07db      	lsls	r3, r3, #31
 8007090:	d405      	bmi.n	800709e <_puts_r+0x22>
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	0598      	lsls	r0, r3, #22
 8007096:	d402      	bmi.n	800709e <_puts_r+0x22>
 8007098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800709a:	f000 f99c 	bl	80073d6 <__retarget_lock_acquire_recursive>
 800709e:	89a3      	ldrh	r3, [r4, #12]
 80070a0:	0719      	lsls	r1, r3, #28
 80070a2:	d513      	bpl.n	80070cc <_puts_r+0x50>
 80070a4:	6923      	ldr	r3, [r4, #16]
 80070a6:	b18b      	cbz	r3, 80070cc <_puts_r+0x50>
 80070a8:	3e01      	subs	r6, #1
 80070aa:	68a3      	ldr	r3, [r4, #8]
 80070ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80070b0:	3b01      	subs	r3, #1
 80070b2:	60a3      	str	r3, [r4, #8]
 80070b4:	b9e9      	cbnz	r1, 80070f2 <_puts_r+0x76>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	da2e      	bge.n	8007118 <_puts_r+0x9c>
 80070ba:	4622      	mov	r2, r4
 80070bc:	210a      	movs	r1, #10
 80070be:	4628      	mov	r0, r5
 80070c0:	f000 f87b 	bl	80071ba <__swbuf_r>
 80070c4:	3001      	adds	r0, #1
 80070c6:	d007      	beq.n	80070d8 <_puts_r+0x5c>
 80070c8:	250a      	movs	r5, #10
 80070ca:	e007      	b.n	80070dc <_puts_r+0x60>
 80070cc:	4621      	mov	r1, r4
 80070ce:	4628      	mov	r0, r5
 80070d0:	f000 f8b0 	bl	8007234 <__swsetup_r>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d0e7      	beq.n	80070a8 <_puts_r+0x2c>
 80070d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80070dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070de:	07da      	lsls	r2, r3, #31
 80070e0:	d405      	bmi.n	80070ee <_puts_r+0x72>
 80070e2:	89a3      	ldrh	r3, [r4, #12]
 80070e4:	059b      	lsls	r3, r3, #22
 80070e6:	d402      	bmi.n	80070ee <_puts_r+0x72>
 80070e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070ea:	f000 f975 	bl	80073d8 <__retarget_lock_release_recursive>
 80070ee:	4628      	mov	r0, r5
 80070f0:	bd70      	pop	{r4, r5, r6, pc}
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	da04      	bge.n	8007100 <_puts_r+0x84>
 80070f6:	69a2      	ldr	r2, [r4, #24]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	dc06      	bgt.n	800710a <_puts_r+0x8e>
 80070fc:	290a      	cmp	r1, #10
 80070fe:	d004      	beq.n	800710a <_puts_r+0x8e>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	1c5a      	adds	r2, r3, #1
 8007104:	6022      	str	r2, [r4, #0]
 8007106:	7019      	strb	r1, [r3, #0]
 8007108:	e7cf      	b.n	80070aa <_puts_r+0x2e>
 800710a:	4622      	mov	r2, r4
 800710c:	4628      	mov	r0, r5
 800710e:	f000 f854 	bl	80071ba <__swbuf_r>
 8007112:	3001      	adds	r0, #1
 8007114:	d1c9      	bne.n	80070aa <_puts_r+0x2e>
 8007116:	e7df      	b.n	80070d8 <_puts_r+0x5c>
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	250a      	movs	r5, #10
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	6022      	str	r2, [r4, #0]
 8007120:	701d      	strb	r5, [r3, #0]
 8007122:	e7db      	b.n	80070dc <_puts_r+0x60>

08007124 <puts>:
 8007124:	4b02      	ldr	r3, [pc, #8]	; (8007130 <puts+0xc>)
 8007126:	4601      	mov	r1, r0
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	f7ff bfa7 	b.w	800707c <_puts_r>
 800712e:	bf00      	nop
 8007130:	24000068 	.word	0x24000068

08007134 <__sread>:
 8007134:	b510      	push	{r4, lr}
 8007136:	460c      	mov	r4, r1
 8007138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800713c:	f000 f8fc 	bl	8007338 <_read_r>
 8007140:	2800      	cmp	r0, #0
 8007142:	bfab      	itete	ge
 8007144:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007146:	89a3      	ldrhlt	r3, [r4, #12]
 8007148:	181b      	addge	r3, r3, r0
 800714a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800714e:	bfac      	ite	ge
 8007150:	6563      	strge	r3, [r4, #84]	; 0x54
 8007152:	81a3      	strhlt	r3, [r4, #12]
 8007154:	bd10      	pop	{r4, pc}

08007156 <__swrite>:
 8007156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800715a:	461f      	mov	r7, r3
 800715c:	898b      	ldrh	r3, [r1, #12]
 800715e:	05db      	lsls	r3, r3, #23
 8007160:	4605      	mov	r5, r0
 8007162:	460c      	mov	r4, r1
 8007164:	4616      	mov	r6, r2
 8007166:	d505      	bpl.n	8007174 <__swrite+0x1e>
 8007168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800716c:	2302      	movs	r3, #2
 800716e:	2200      	movs	r2, #0
 8007170:	f000 f8d0 	bl	8007314 <_lseek_r>
 8007174:	89a3      	ldrh	r3, [r4, #12]
 8007176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800717a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800717e:	81a3      	strh	r3, [r4, #12]
 8007180:	4632      	mov	r2, r6
 8007182:	463b      	mov	r3, r7
 8007184:	4628      	mov	r0, r5
 8007186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800718a:	f000 b8e7 	b.w	800735c <_write_r>

0800718e <__sseek>:
 800718e:	b510      	push	{r4, lr}
 8007190:	460c      	mov	r4, r1
 8007192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007196:	f000 f8bd 	bl	8007314 <_lseek_r>
 800719a:	1c43      	adds	r3, r0, #1
 800719c:	89a3      	ldrh	r3, [r4, #12]
 800719e:	bf15      	itete	ne
 80071a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80071a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80071a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80071aa:	81a3      	strheq	r3, [r4, #12]
 80071ac:	bf18      	it	ne
 80071ae:	81a3      	strhne	r3, [r4, #12]
 80071b0:	bd10      	pop	{r4, pc}

080071b2 <__sclose>:
 80071b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b6:	f000 b89d 	b.w	80072f4 <_close_r>

080071ba <__swbuf_r>:
 80071ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071bc:	460e      	mov	r6, r1
 80071be:	4614      	mov	r4, r2
 80071c0:	4605      	mov	r5, r0
 80071c2:	b118      	cbz	r0, 80071cc <__swbuf_r+0x12>
 80071c4:	6a03      	ldr	r3, [r0, #32]
 80071c6:	b90b      	cbnz	r3, 80071cc <__swbuf_r+0x12>
 80071c8:	f7ff ff08 	bl	8006fdc <__sinit>
 80071cc:	69a3      	ldr	r3, [r4, #24]
 80071ce:	60a3      	str	r3, [r4, #8]
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	071a      	lsls	r2, r3, #28
 80071d4:	d525      	bpl.n	8007222 <__swbuf_r+0x68>
 80071d6:	6923      	ldr	r3, [r4, #16]
 80071d8:	b31b      	cbz	r3, 8007222 <__swbuf_r+0x68>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	6922      	ldr	r2, [r4, #16]
 80071de:	1a98      	subs	r0, r3, r2
 80071e0:	6963      	ldr	r3, [r4, #20]
 80071e2:	b2f6      	uxtb	r6, r6
 80071e4:	4283      	cmp	r3, r0
 80071e6:	4637      	mov	r7, r6
 80071e8:	dc04      	bgt.n	80071f4 <__swbuf_r+0x3a>
 80071ea:	4621      	mov	r1, r4
 80071ec:	4628      	mov	r0, r5
 80071ee:	f000 fd47 	bl	8007c80 <_fflush_r>
 80071f2:	b9e0      	cbnz	r0, 800722e <__swbuf_r+0x74>
 80071f4:	68a3      	ldr	r3, [r4, #8]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	60a3      	str	r3, [r4, #8]
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	1c5a      	adds	r2, r3, #1
 80071fe:	6022      	str	r2, [r4, #0]
 8007200:	701e      	strb	r6, [r3, #0]
 8007202:	6962      	ldr	r2, [r4, #20]
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	429a      	cmp	r2, r3
 8007208:	d004      	beq.n	8007214 <__swbuf_r+0x5a>
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	07db      	lsls	r3, r3, #31
 800720e:	d506      	bpl.n	800721e <__swbuf_r+0x64>
 8007210:	2e0a      	cmp	r6, #10
 8007212:	d104      	bne.n	800721e <__swbuf_r+0x64>
 8007214:	4621      	mov	r1, r4
 8007216:	4628      	mov	r0, r5
 8007218:	f000 fd32 	bl	8007c80 <_fflush_r>
 800721c:	b938      	cbnz	r0, 800722e <__swbuf_r+0x74>
 800721e:	4638      	mov	r0, r7
 8007220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007222:	4621      	mov	r1, r4
 8007224:	4628      	mov	r0, r5
 8007226:	f000 f805 	bl	8007234 <__swsetup_r>
 800722a:	2800      	cmp	r0, #0
 800722c:	d0d5      	beq.n	80071da <__swbuf_r+0x20>
 800722e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007232:	e7f4      	b.n	800721e <__swbuf_r+0x64>

08007234 <__swsetup_r>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	4b2a      	ldr	r3, [pc, #168]	; (80072e0 <__swsetup_r+0xac>)
 8007238:	4605      	mov	r5, r0
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	460c      	mov	r4, r1
 800723e:	b118      	cbz	r0, 8007248 <__swsetup_r+0x14>
 8007240:	6a03      	ldr	r3, [r0, #32]
 8007242:	b90b      	cbnz	r3, 8007248 <__swsetup_r+0x14>
 8007244:	f7ff feca 	bl	8006fdc <__sinit>
 8007248:	89a3      	ldrh	r3, [r4, #12]
 800724a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800724e:	0718      	lsls	r0, r3, #28
 8007250:	d422      	bmi.n	8007298 <__swsetup_r+0x64>
 8007252:	06d9      	lsls	r1, r3, #27
 8007254:	d407      	bmi.n	8007266 <__swsetup_r+0x32>
 8007256:	2309      	movs	r3, #9
 8007258:	602b      	str	r3, [r5, #0]
 800725a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800725e:	81a3      	strh	r3, [r4, #12]
 8007260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007264:	e034      	b.n	80072d0 <__swsetup_r+0x9c>
 8007266:	0758      	lsls	r0, r3, #29
 8007268:	d512      	bpl.n	8007290 <__swsetup_r+0x5c>
 800726a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800726c:	b141      	cbz	r1, 8007280 <__swsetup_r+0x4c>
 800726e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007272:	4299      	cmp	r1, r3
 8007274:	d002      	beq.n	800727c <__swsetup_r+0x48>
 8007276:	4628      	mov	r0, r5
 8007278:	f000 f8b0 	bl	80073dc <_free_r>
 800727c:	2300      	movs	r3, #0
 800727e:	6363      	str	r3, [r4, #52]	; 0x34
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007286:	81a3      	strh	r3, [r4, #12]
 8007288:	2300      	movs	r3, #0
 800728a:	6063      	str	r3, [r4, #4]
 800728c:	6923      	ldr	r3, [r4, #16]
 800728e:	6023      	str	r3, [r4, #0]
 8007290:	89a3      	ldrh	r3, [r4, #12]
 8007292:	f043 0308 	orr.w	r3, r3, #8
 8007296:	81a3      	strh	r3, [r4, #12]
 8007298:	6923      	ldr	r3, [r4, #16]
 800729a:	b94b      	cbnz	r3, 80072b0 <__swsetup_r+0x7c>
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a6:	d003      	beq.n	80072b0 <__swsetup_r+0x7c>
 80072a8:	4621      	mov	r1, r4
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 fd36 	bl	8007d1c <__smakebuf_r>
 80072b0:	89a0      	ldrh	r0, [r4, #12]
 80072b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072b6:	f010 0301 	ands.w	r3, r0, #1
 80072ba:	d00a      	beq.n	80072d2 <__swsetup_r+0x9e>
 80072bc:	2300      	movs	r3, #0
 80072be:	60a3      	str	r3, [r4, #8]
 80072c0:	6963      	ldr	r3, [r4, #20]
 80072c2:	425b      	negs	r3, r3
 80072c4:	61a3      	str	r3, [r4, #24]
 80072c6:	6923      	ldr	r3, [r4, #16]
 80072c8:	b943      	cbnz	r3, 80072dc <__swsetup_r+0xa8>
 80072ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072ce:	d1c4      	bne.n	800725a <__swsetup_r+0x26>
 80072d0:	bd38      	pop	{r3, r4, r5, pc}
 80072d2:	0781      	lsls	r1, r0, #30
 80072d4:	bf58      	it	pl
 80072d6:	6963      	ldrpl	r3, [r4, #20]
 80072d8:	60a3      	str	r3, [r4, #8]
 80072da:	e7f4      	b.n	80072c6 <__swsetup_r+0x92>
 80072dc:	2000      	movs	r0, #0
 80072de:	e7f7      	b.n	80072d0 <__swsetup_r+0x9c>
 80072e0:	24000068 	.word	0x24000068

080072e4 <memset>:
 80072e4:	4402      	add	r2, r0
 80072e6:	4603      	mov	r3, r0
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d100      	bne.n	80072ee <memset+0xa>
 80072ec:	4770      	bx	lr
 80072ee:	f803 1b01 	strb.w	r1, [r3], #1
 80072f2:	e7f9      	b.n	80072e8 <memset+0x4>

080072f4 <_close_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4d06      	ldr	r5, [pc, #24]	; (8007310 <_close_r+0x1c>)
 80072f8:	2300      	movs	r3, #0
 80072fa:	4604      	mov	r4, r0
 80072fc:	4608      	mov	r0, r1
 80072fe:	602b      	str	r3, [r5, #0]
 8007300:	f7fa f9c9 	bl	8001696 <_close>
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	d102      	bne.n	800730e <_close_r+0x1a>
 8007308:	682b      	ldr	r3, [r5, #0]
 800730a:	b103      	cbz	r3, 800730e <_close_r+0x1a>
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	bd38      	pop	{r3, r4, r5, pc}
 8007310:	240002fc 	.word	0x240002fc

08007314 <_lseek_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	4d07      	ldr	r5, [pc, #28]	; (8007334 <_lseek_r+0x20>)
 8007318:	4604      	mov	r4, r0
 800731a:	4608      	mov	r0, r1
 800731c:	4611      	mov	r1, r2
 800731e:	2200      	movs	r2, #0
 8007320:	602a      	str	r2, [r5, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	f7fa f9de 	bl	80016e4 <_lseek>
 8007328:	1c43      	adds	r3, r0, #1
 800732a:	d102      	bne.n	8007332 <_lseek_r+0x1e>
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	b103      	cbz	r3, 8007332 <_lseek_r+0x1e>
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	bd38      	pop	{r3, r4, r5, pc}
 8007334:	240002fc 	.word	0x240002fc

08007338 <_read_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4d07      	ldr	r5, [pc, #28]	; (8007358 <_read_r+0x20>)
 800733c:	4604      	mov	r4, r0
 800733e:	4608      	mov	r0, r1
 8007340:	4611      	mov	r1, r2
 8007342:	2200      	movs	r2, #0
 8007344:	602a      	str	r2, [r5, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	f7fa f96c 	bl	8001624 <_read>
 800734c:	1c43      	adds	r3, r0, #1
 800734e:	d102      	bne.n	8007356 <_read_r+0x1e>
 8007350:	682b      	ldr	r3, [r5, #0]
 8007352:	b103      	cbz	r3, 8007356 <_read_r+0x1e>
 8007354:	6023      	str	r3, [r4, #0]
 8007356:	bd38      	pop	{r3, r4, r5, pc}
 8007358:	240002fc 	.word	0x240002fc

0800735c <_write_r>:
 800735c:	b538      	push	{r3, r4, r5, lr}
 800735e:	4d07      	ldr	r5, [pc, #28]	; (800737c <_write_r+0x20>)
 8007360:	4604      	mov	r4, r0
 8007362:	4608      	mov	r0, r1
 8007364:	4611      	mov	r1, r2
 8007366:	2200      	movs	r2, #0
 8007368:	602a      	str	r2, [r5, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	f7fa f977 	bl	800165e <_write>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_write_r+0x1e>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_write_r+0x1e>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	240002fc 	.word	0x240002fc

08007380 <__errno>:
 8007380:	4b01      	ldr	r3, [pc, #4]	; (8007388 <__errno+0x8>)
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	24000068 	.word	0x24000068

0800738c <__libc_init_array>:
 800738c:	b570      	push	{r4, r5, r6, lr}
 800738e:	4d0d      	ldr	r5, [pc, #52]	; (80073c4 <__libc_init_array+0x38>)
 8007390:	4c0d      	ldr	r4, [pc, #52]	; (80073c8 <__libc_init_array+0x3c>)
 8007392:	1b64      	subs	r4, r4, r5
 8007394:	10a4      	asrs	r4, r4, #2
 8007396:	2600      	movs	r6, #0
 8007398:	42a6      	cmp	r6, r4
 800739a:	d109      	bne.n	80073b0 <__libc_init_array+0x24>
 800739c:	4d0b      	ldr	r5, [pc, #44]	; (80073cc <__libc_init_array+0x40>)
 800739e:	4c0c      	ldr	r4, [pc, #48]	; (80073d0 <__libc_init_array+0x44>)
 80073a0:	f000 fd5e 	bl	8007e60 <_init>
 80073a4:	1b64      	subs	r4, r4, r5
 80073a6:	10a4      	asrs	r4, r4, #2
 80073a8:	2600      	movs	r6, #0
 80073aa:	42a6      	cmp	r6, r4
 80073ac:	d105      	bne.n	80073ba <__libc_init_array+0x2e>
 80073ae:	bd70      	pop	{r4, r5, r6, pc}
 80073b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b4:	4798      	blx	r3
 80073b6:	3601      	adds	r6, #1
 80073b8:	e7ee      	b.n	8007398 <__libc_init_array+0xc>
 80073ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80073be:	4798      	blx	r3
 80073c0:	3601      	adds	r6, #1
 80073c2:	e7f2      	b.n	80073aa <__libc_init_array+0x1e>
 80073c4:	08008064 	.word	0x08008064
 80073c8:	08008064 	.word	0x08008064
 80073cc:	08008064 	.word	0x08008064
 80073d0:	08008068 	.word	0x08008068

080073d4 <__retarget_lock_init_recursive>:
 80073d4:	4770      	bx	lr

080073d6 <__retarget_lock_acquire_recursive>:
 80073d6:	4770      	bx	lr

080073d8 <__retarget_lock_release_recursive>:
 80073d8:	4770      	bx	lr
	...

080073dc <_free_r>:
 80073dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073de:	2900      	cmp	r1, #0
 80073e0:	d044      	beq.n	800746c <_free_r+0x90>
 80073e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073e6:	9001      	str	r0, [sp, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f1a1 0404 	sub.w	r4, r1, #4
 80073ee:	bfb8      	it	lt
 80073f0:	18e4      	addlt	r4, r4, r3
 80073f2:	f000 f8df 	bl	80075b4 <__malloc_lock>
 80073f6:	4a1e      	ldr	r2, [pc, #120]	; (8007470 <_free_r+0x94>)
 80073f8:	9801      	ldr	r0, [sp, #4]
 80073fa:	6813      	ldr	r3, [r2, #0]
 80073fc:	b933      	cbnz	r3, 800740c <_free_r+0x30>
 80073fe:	6063      	str	r3, [r4, #4]
 8007400:	6014      	str	r4, [r2, #0]
 8007402:	b003      	add	sp, #12
 8007404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007408:	f000 b8da 	b.w	80075c0 <__malloc_unlock>
 800740c:	42a3      	cmp	r3, r4
 800740e:	d908      	bls.n	8007422 <_free_r+0x46>
 8007410:	6825      	ldr	r5, [r4, #0]
 8007412:	1961      	adds	r1, r4, r5
 8007414:	428b      	cmp	r3, r1
 8007416:	bf01      	itttt	eq
 8007418:	6819      	ldreq	r1, [r3, #0]
 800741a:	685b      	ldreq	r3, [r3, #4]
 800741c:	1949      	addeq	r1, r1, r5
 800741e:	6021      	streq	r1, [r4, #0]
 8007420:	e7ed      	b.n	80073fe <_free_r+0x22>
 8007422:	461a      	mov	r2, r3
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	b10b      	cbz	r3, 800742c <_free_r+0x50>
 8007428:	42a3      	cmp	r3, r4
 800742a:	d9fa      	bls.n	8007422 <_free_r+0x46>
 800742c:	6811      	ldr	r1, [r2, #0]
 800742e:	1855      	adds	r5, r2, r1
 8007430:	42a5      	cmp	r5, r4
 8007432:	d10b      	bne.n	800744c <_free_r+0x70>
 8007434:	6824      	ldr	r4, [r4, #0]
 8007436:	4421      	add	r1, r4
 8007438:	1854      	adds	r4, r2, r1
 800743a:	42a3      	cmp	r3, r4
 800743c:	6011      	str	r1, [r2, #0]
 800743e:	d1e0      	bne.n	8007402 <_free_r+0x26>
 8007440:	681c      	ldr	r4, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	6053      	str	r3, [r2, #4]
 8007446:	440c      	add	r4, r1
 8007448:	6014      	str	r4, [r2, #0]
 800744a:	e7da      	b.n	8007402 <_free_r+0x26>
 800744c:	d902      	bls.n	8007454 <_free_r+0x78>
 800744e:	230c      	movs	r3, #12
 8007450:	6003      	str	r3, [r0, #0]
 8007452:	e7d6      	b.n	8007402 <_free_r+0x26>
 8007454:	6825      	ldr	r5, [r4, #0]
 8007456:	1961      	adds	r1, r4, r5
 8007458:	428b      	cmp	r3, r1
 800745a:	bf04      	itt	eq
 800745c:	6819      	ldreq	r1, [r3, #0]
 800745e:	685b      	ldreq	r3, [r3, #4]
 8007460:	6063      	str	r3, [r4, #4]
 8007462:	bf04      	itt	eq
 8007464:	1949      	addeq	r1, r1, r5
 8007466:	6021      	streq	r1, [r4, #0]
 8007468:	6054      	str	r4, [r2, #4]
 800746a:	e7ca      	b.n	8007402 <_free_r+0x26>
 800746c:	b003      	add	sp, #12
 800746e:	bd30      	pop	{r4, r5, pc}
 8007470:	24000304 	.word	0x24000304

08007474 <sbrk_aligned>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	4e0e      	ldr	r6, [pc, #56]	; (80074b0 <sbrk_aligned+0x3c>)
 8007478:	460c      	mov	r4, r1
 800747a:	6831      	ldr	r1, [r6, #0]
 800747c:	4605      	mov	r5, r0
 800747e:	b911      	cbnz	r1, 8007486 <sbrk_aligned+0x12>
 8007480:	f000 fcde 	bl	8007e40 <_sbrk_r>
 8007484:	6030      	str	r0, [r6, #0]
 8007486:	4621      	mov	r1, r4
 8007488:	4628      	mov	r0, r5
 800748a:	f000 fcd9 	bl	8007e40 <_sbrk_r>
 800748e:	1c43      	adds	r3, r0, #1
 8007490:	d00a      	beq.n	80074a8 <sbrk_aligned+0x34>
 8007492:	1cc4      	adds	r4, r0, #3
 8007494:	f024 0403 	bic.w	r4, r4, #3
 8007498:	42a0      	cmp	r0, r4
 800749a:	d007      	beq.n	80074ac <sbrk_aligned+0x38>
 800749c:	1a21      	subs	r1, r4, r0
 800749e:	4628      	mov	r0, r5
 80074a0:	f000 fcce 	bl	8007e40 <_sbrk_r>
 80074a4:	3001      	adds	r0, #1
 80074a6:	d101      	bne.n	80074ac <sbrk_aligned+0x38>
 80074a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80074ac:	4620      	mov	r0, r4
 80074ae:	bd70      	pop	{r4, r5, r6, pc}
 80074b0:	24000308 	.word	0x24000308

080074b4 <_malloc_r>:
 80074b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b8:	1ccd      	adds	r5, r1, #3
 80074ba:	f025 0503 	bic.w	r5, r5, #3
 80074be:	3508      	adds	r5, #8
 80074c0:	2d0c      	cmp	r5, #12
 80074c2:	bf38      	it	cc
 80074c4:	250c      	movcc	r5, #12
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	4607      	mov	r7, r0
 80074ca:	db01      	blt.n	80074d0 <_malloc_r+0x1c>
 80074cc:	42a9      	cmp	r1, r5
 80074ce:	d905      	bls.n	80074dc <_malloc_r+0x28>
 80074d0:	230c      	movs	r3, #12
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	2600      	movs	r6, #0
 80074d6:	4630      	mov	r0, r6
 80074d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80075b0 <_malloc_r+0xfc>
 80074e0:	f000 f868 	bl	80075b4 <__malloc_lock>
 80074e4:	f8d8 3000 	ldr.w	r3, [r8]
 80074e8:	461c      	mov	r4, r3
 80074ea:	bb5c      	cbnz	r4, 8007544 <_malloc_r+0x90>
 80074ec:	4629      	mov	r1, r5
 80074ee:	4638      	mov	r0, r7
 80074f0:	f7ff ffc0 	bl	8007474 <sbrk_aligned>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	4604      	mov	r4, r0
 80074f8:	d155      	bne.n	80075a6 <_malloc_r+0xf2>
 80074fa:	f8d8 4000 	ldr.w	r4, [r8]
 80074fe:	4626      	mov	r6, r4
 8007500:	2e00      	cmp	r6, #0
 8007502:	d145      	bne.n	8007590 <_malloc_r+0xdc>
 8007504:	2c00      	cmp	r4, #0
 8007506:	d048      	beq.n	800759a <_malloc_r+0xe6>
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	4631      	mov	r1, r6
 800750c:	4638      	mov	r0, r7
 800750e:	eb04 0903 	add.w	r9, r4, r3
 8007512:	f000 fc95 	bl	8007e40 <_sbrk_r>
 8007516:	4581      	cmp	r9, r0
 8007518:	d13f      	bne.n	800759a <_malloc_r+0xe6>
 800751a:	6821      	ldr	r1, [r4, #0]
 800751c:	1a6d      	subs	r5, r5, r1
 800751e:	4629      	mov	r1, r5
 8007520:	4638      	mov	r0, r7
 8007522:	f7ff ffa7 	bl	8007474 <sbrk_aligned>
 8007526:	3001      	adds	r0, #1
 8007528:	d037      	beq.n	800759a <_malloc_r+0xe6>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	442b      	add	r3, r5
 800752e:	6023      	str	r3, [r4, #0]
 8007530:	f8d8 3000 	ldr.w	r3, [r8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d038      	beq.n	80075aa <_malloc_r+0xf6>
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	42a2      	cmp	r2, r4
 800753c:	d12b      	bne.n	8007596 <_malloc_r+0xe2>
 800753e:	2200      	movs	r2, #0
 8007540:	605a      	str	r2, [r3, #4]
 8007542:	e00f      	b.n	8007564 <_malloc_r+0xb0>
 8007544:	6822      	ldr	r2, [r4, #0]
 8007546:	1b52      	subs	r2, r2, r5
 8007548:	d41f      	bmi.n	800758a <_malloc_r+0xd6>
 800754a:	2a0b      	cmp	r2, #11
 800754c:	d917      	bls.n	800757e <_malloc_r+0xca>
 800754e:	1961      	adds	r1, r4, r5
 8007550:	42a3      	cmp	r3, r4
 8007552:	6025      	str	r5, [r4, #0]
 8007554:	bf18      	it	ne
 8007556:	6059      	strne	r1, [r3, #4]
 8007558:	6863      	ldr	r3, [r4, #4]
 800755a:	bf08      	it	eq
 800755c:	f8c8 1000 	streq.w	r1, [r8]
 8007560:	5162      	str	r2, [r4, r5]
 8007562:	604b      	str	r3, [r1, #4]
 8007564:	4638      	mov	r0, r7
 8007566:	f104 060b 	add.w	r6, r4, #11
 800756a:	f000 f829 	bl	80075c0 <__malloc_unlock>
 800756e:	f026 0607 	bic.w	r6, r6, #7
 8007572:	1d23      	adds	r3, r4, #4
 8007574:	1af2      	subs	r2, r6, r3
 8007576:	d0ae      	beq.n	80074d6 <_malloc_r+0x22>
 8007578:	1b9b      	subs	r3, r3, r6
 800757a:	50a3      	str	r3, [r4, r2]
 800757c:	e7ab      	b.n	80074d6 <_malloc_r+0x22>
 800757e:	42a3      	cmp	r3, r4
 8007580:	6862      	ldr	r2, [r4, #4]
 8007582:	d1dd      	bne.n	8007540 <_malloc_r+0x8c>
 8007584:	f8c8 2000 	str.w	r2, [r8]
 8007588:	e7ec      	b.n	8007564 <_malloc_r+0xb0>
 800758a:	4623      	mov	r3, r4
 800758c:	6864      	ldr	r4, [r4, #4]
 800758e:	e7ac      	b.n	80074ea <_malloc_r+0x36>
 8007590:	4634      	mov	r4, r6
 8007592:	6876      	ldr	r6, [r6, #4]
 8007594:	e7b4      	b.n	8007500 <_malloc_r+0x4c>
 8007596:	4613      	mov	r3, r2
 8007598:	e7cc      	b.n	8007534 <_malloc_r+0x80>
 800759a:	230c      	movs	r3, #12
 800759c:	603b      	str	r3, [r7, #0]
 800759e:	4638      	mov	r0, r7
 80075a0:	f000 f80e 	bl	80075c0 <__malloc_unlock>
 80075a4:	e797      	b.n	80074d6 <_malloc_r+0x22>
 80075a6:	6025      	str	r5, [r4, #0]
 80075a8:	e7dc      	b.n	8007564 <_malloc_r+0xb0>
 80075aa:	605b      	str	r3, [r3, #4]
 80075ac:	deff      	udf	#255	; 0xff
 80075ae:	bf00      	nop
 80075b0:	24000304 	.word	0x24000304

080075b4 <__malloc_lock>:
 80075b4:	4801      	ldr	r0, [pc, #4]	; (80075bc <__malloc_lock+0x8>)
 80075b6:	f7ff bf0e 	b.w	80073d6 <__retarget_lock_acquire_recursive>
 80075ba:	bf00      	nop
 80075bc:	24000300 	.word	0x24000300

080075c0 <__malloc_unlock>:
 80075c0:	4801      	ldr	r0, [pc, #4]	; (80075c8 <__malloc_unlock+0x8>)
 80075c2:	f7ff bf09 	b.w	80073d8 <__retarget_lock_release_recursive>
 80075c6:	bf00      	nop
 80075c8:	24000300 	.word	0x24000300

080075cc <__sfputc_r>:
 80075cc:	6893      	ldr	r3, [r2, #8]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	b410      	push	{r4}
 80075d4:	6093      	str	r3, [r2, #8]
 80075d6:	da08      	bge.n	80075ea <__sfputc_r+0x1e>
 80075d8:	6994      	ldr	r4, [r2, #24]
 80075da:	42a3      	cmp	r3, r4
 80075dc:	db01      	blt.n	80075e2 <__sfputc_r+0x16>
 80075de:	290a      	cmp	r1, #10
 80075e0:	d103      	bne.n	80075ea <__sfputc_r+0x1e>
 80075e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075e6:	f7ff bde8 	b.w	80071ba <__swbuf_r>
 80075ea:	6813      	ldr	r3, [r2, #0]
 80075ec:	1c58      	adds	r0, r3, #1
 80075ee:	6010      	str	r0, [r2, #0]
 80075f0:	7019      	strb	r1, [r3, #0]
 80075f2:	4608      	mov	r0, r1
 80075f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <__sfputs_r>:
 80075fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fc:	4606      	mov	r6, r0
 80075fe:	460f      	mov	r7, r1
 8007600:	4614      	mov	r4, r2
 8007602:	18d5      	adds	r5, r2, r3
 8007604:	42ac      	cmp	r4, r5
 8007606:	d101      	bne.n	800760c <__sfputs_r+0x12>
 8007608:	2000      	movs	r0, #0
 800760a:	e007      	b.n	800761c <__sfputs_r+0x22>
 800760c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007610:	463a      	mov	r2, r7
 8007612:	4630      	mov	r0, r6
 8007614:	f7ff ffda 	bl	80075cc <__sfputc_r>
 8007618:	1c43      	adds	r3, r0, #1
 800761a:	d1f3      	bne.n	8007604 <__sfputs_r+0xa>
 800761c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007620 <_vfiprintf_r>:
 8007620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007624:	460d      	mov	r5, r1
 8007626:	b09d      	sub	sp, #116	; 0x74
 8007628:	4614      	mov	r4, r2
 800762a:	4698      	mov	r8, r3
 800762c:	4606      	mov	r6, r0
 800762e:	b118      	cbz	r0, 8007638 <_vfiprintf_r+0x18>
 8007630:	6a03      	ldr	r3, [r0, #32]
 8007632:	b90b      	cbnz	r3, 8007638 <_vfiprintf_r+0x18>
 8007634:	f7ff fcd2 	bl	8006fdc <__sinit>
 8007638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800763a:	07d9      	lsls	r1, r3, #31
 800763c:	d405      	bmi.n	800764a <_vfiprintf_r+0x2a>
 800763e:	89ab      	ldrh	r3, [r5, #12]
 8007640:	059a      	lsls	r2, r3, #22
 8007642:	d402      	bmi.n	800764a <_vfiprintf_r+0x2a>
 8007644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007646:	f7ff fec6 	bl	80073d6 <__retarget_lock_acquire_recursive>
 800764a:	89ab      	ldrh	r3, [r5, #12]
 800764c:	071b      	lsls	r3, r3, #28
 800764e:	d501      	bpl.n	8007654 <_vfiprintf_r+0x34>
 8007650:	692b      	ldr	r3, [r5, #16]
 8007652:	b99b      	cbnz	r3, 800767c <_vfiprintf_r+0x5c>
 8007654:	4629      	mov	r1, r5
 8007656:	4630      	mov	r0, r6
 8007658:	f7ff fdec 	bl	8007234 <__swsetup_r>
 800765c:	b170      	cbz	r0, 800767c <_vfiprintf_r+0x5c>
 800765e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007660:	07dc      	lsls	r4, r3, #31
 8007662:	d504      	bpl.n	800766e <_vfiprintf_r+0x4e>
 8007664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007668:	b01d      	add	sp, #116	; 0x74
 800766a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766e:	89ab      	ldrh	r3, [r5, #12]
 8007670:	0598      	lsls	r0, r3, #22
 8007672:	d4f7      	bmi.n	8007664 <_vfiprintf_r+0x44>
 8007674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007676:	f7ff feaf 	bl	80073d8 <__retarget_lock_release_recursive>
 800767a:	e7f3      	b.n	8007664 <_vfiprintf_r+0x44>
 800767c:	2300      	movs	r3, #0
 800767e:	9309      	str	r3, [sp, #36]	; 0x24
 8007680:	2320      	movs	r3, #32
 8007682:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007686:	f8cd 800c 	str.w	r8, [sp, #12]
 800768a:	2330      	movs	r3, #48	; 0x30
 800768c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007840 <_vfiprintf_r+0x220>
 8007690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007694:	f04f 0901 	mov.w	r9, #1
 8007698:	4623      	mov	r3, r4
 800769a:	469a      	mov	sl, r3
 800769c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076a0:	b10a      	cbz	r2, 80076a6 <_vfiprintf_r+0x86>
 80076a2:	2a25      	cmp	r2, #37	; 0x25
 80076a4:	d1f9      	bne.n	800769a <_vfiprintf_r+0x7a>
 80076a6:	ebba 0b04 	subs.w	fp, sl, r4
 80076aa:	d00b      	beq.n	80076c4 <_vfiprintf_r+0xa4>
 80076ac:	465b      	mov	r3, fp
 80076ae:	4622      	mov	r2, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	4630      	mov	r0, r6
 80076b4:	f7ff ffa1 	bl	80075fa <__sfputs_r>
 80076b8:	3001      	adds	r0, #1
 80076ba:	f000 80a9 	beq.w	8007810 <_vfiprintf_r+0x1f0>
 80076be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076c0:	445a      	add	r2, fp
 80076c2:	9209      	str	r2, [sp, #36]	; 0x24
 80076c4:	f89a 3000 	ldrb.w	r3, [sl]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 80a1 	beq.w	8007810 <_vfiprintf_r+0x1f0>
 80076ce:	2300      	movs	r3, #0
 80076d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076d8:	f10a 0a01 	add.w	sl, sl, #1
 80076dc:	9304      	str	r3, [sp, #16]
 80076de:	9307      	str	r3, [sp, #28]
 80076e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076e4:	931a      	str	r3, [sp, #104]	; 0x68
 80076e6:	4654      	mov	r4, sl
 80076e8:	2205      	movs	r2, #5
 80076ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ee:	4854      	ldr	r0, [pc, #336]	; (8007840 <_vfiprintf_r+0x220>)
 80076f0:	f7f8 fdf6 	bl	80002e0 <memchr>
 80076f4:	9a04      	ldr	r2, [sp, #16]
 80076f6:	b9d8      	cbnz	r0, 8007730 <_vfiprintf_r+0x110>
 80076f8:	06d1      	lsls	r1, r2, #27
 80076fa:	bf44      	itt	mi
 80076fc:	2320      	movmi	r3, #32
 80076fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007702:	0713      	lsls	r3, r2, #28
 8007704:	bf44      	itt	mi
 8007706:	232b      	movmi	r3, #43	; 0x2b
 8007708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800770c:	f89a 3000 	ldrb.w	r3, [sl]
 8007710:	2b2a      	cmp	r3, #42	; 0x2a
 8007712:	d015      	beq.n	8007740 <_vfiprintf_r+0x120>
 8007714:	9a07      	ldr	r2, [sp, #28]
 8007716:	4654      	mov	r4, sl
 8007718:	2000      	movs	r0, #0
 800771a:	f04f 0c0a 	mov.w	ip, #10
 800771e:	4621      	mov	r1, r4
 8007720:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007724:	3b30      	subs	r3, #48	; 0x30
 8007726:	2b09      	cmp	r3, #9
 8007728:	d94d      	bls.n	80077c6 <_vfiprintf_r+0x1a6>
 800772a:	b1b0      	cbz	r0, 800775a <_vfiprintf_r+0x13a>
 800772c:	9207      	str	r2, [sp, #28]
 800772e:	e014      	b.n	800775a <_vfiprintf_r+0x13a>
 8007730:	eba0 0308 	sub.w	r3, r0, r8
 8007734:	fa09 f303 	lsl.w	r3, r9, r3
 8007738:	4313      	orrs	r3, r2
 800773a:	9304      	str	r3, [sp, #16]
 800773c:	46a2      	mov	sl, r4
 800773e:	e7d2      	b.n	80076e6 <_vfiprintf_r+0xc6>
 8007740:	9b03      	ldr	r3, [sp, #12]
 8007742:	1d19      	adds	r1, r3, #4
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	9103      	str	r1, [sp, #12]
 8007748:	2b00      	cmp	r3, #0
 800774a:	bfbb      	ittet	lt
 800774c:	425b      	neglt	r3, r3
 800774e:	f042 0202 	orrlt.w	r2, r2, #2
 8007752:	9307      	strge	r3, [sp, #28]
 8007754:	9307      	strlt	r3, [sp, #28]
 8007756:	bfb8      	it	lt
 8007758:	9204      	strlt	r2, [sp, #16]
 800775a:	7823      	ldrb	r3, [r4, #0]
 800775c:	2b2e      	cmp	r3, #46	; 0x2e
 800775e:	d10c      	bne.n	800777a <_vfiprintf_r+0x15a>
 8007760:	7863      	ldrb	r3, [r4, #1]
 8007762:	2b2a      	cmp	r3, #42	; 0x2a
 8007764:	d134      	bne.n	80077d0 <_vfiprintf_r+0x1b0>
 8007766:	9b03      	ldr	r3, [sp, #12]
 8007768:	1d1a      	adds	r2, r3, #4
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	9203      	str	r2, [sp, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	bfb8      	it	lt
 8007772:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007776:	3402      	adds	r4, #2
 8007778:	9305      	str	r3, [sp, #20]
 800777a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007850 <_vfiprintf_r+0x230>
 800777e:	7821      	ldrb	r1, [r4, #0]
 8007780:	2203      	movs	r2, #3
 8007782:	4650      	mov	r0, sl
 8007784:	f7f8 fdac 	bl	80002e0 <memchr>
 8007788:	b138      	cbz	r0, 800779a <_vfiprintf_r+0x17a>
 800778a:	9b04      	ldr	r3, [sp, #16]
 800778c:	eba0 000a 	sub.w	r0, r0, sl
 8007790:	2240      	movs	r2, #64	; 0x40
 8007792:	4082      	lsls	r2, r0
 8007794:	4313      	orrs	r3, r2
 8007796:	3401      	adds	r4, #1
 8007798:	9304      	str	r3, [sp, #16]
 800779a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800779e:	4829      	ldr	r0, [pc, #164]	; (8007844 <_vfiprintf_r+0x224>)
 80077a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077a4:	2206      	movs	r2, #6
 80077a6:	f7f8 fd9b 	bl	80002e0 <memchr>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d03f      	beq.n	800782e <_vfiprintf_r+0x20e>
 80077ae:	4b26      	ldr	r3, [pc, #152]	; (8007848 <_vfiprintf_r+0x228>)
 80077b0:	bb1b      	cbnz	r3, 80077fa <_vfiprintf_r+0x1da>
 80077b2:	9b03      	ldr	r3, [sp, #12]
 80077b4:	3307      	adds	r3, #7
 80077b6:	f023 0307 	bic.w	r3, r3, #7
 80077ba:	3308      	adds	r3, #8
 80077bc:	9303      	str	r3, [sp, #12]
 80077be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c0:	443b      	add	r3, r7
 80077c2:	9309      	str	r3, [sp, #36]	; 0x24
 80077c4:	e768      	b.n	8007698 <_vfiprintf_r+0x78>
 80077c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80077ca:	460c      	mov	r4, r1
 80077cc:	2001      	movs	r0, #1
 80077ce:	e7a6      	b.n	800771e <_vfiprintf_r+0xfe>
 80077d0:	2300      	movs	r3, #0
 80077d2:	3401      	adds	r4, #1
 80077d4:	9305      	str	r3, [sp, #20]
 80077d6:	4619      	mov	r1, r3
 80077d8:	f04f 0c0a 	mov.w	ip, #10
 80077dc:	4620      	mov	r0, r4
 80077de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077e2:	3a30      	subs	r2, #48	; 0x30
 80077e4:	2a09      	cmp	r2, #9
 80077e6:	d903      	bls.n	80077f0 <_vfiprintf_r+0x1d0>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d0c6      	beq.n	800777a <_vfiprintf_r+0x15a>
 80077ec:	9105      	str	r1, [sp, #20]
 80077ee:	e7c4      	b.n	800777a <_vfiprintf_r+0x15a>
 80077f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80077f4:	4604      	mov	r4, r0
 80077f6:	2301      	movs	r3, #1
 80077f8:	e7f0      	b.n	80077dc <_vfiprintf_r+0x1bc>
 80077fa:	ab03      	add	r3, sp, #12
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	462a      	mov	r2, r5
 8007800:	4b12      	ldr	r3, [pc, #72]	; (800784c <_vfiprintf_r+0x22c>)
 8007802:	a904      	add	r1, sp, #16
 8007804:	4630      	mov	r0, r6
 8007806:	f3af 8000 	nop.w
 800780a:	4607      	mov	r7, r0
 800780c:	1c78      	adds	r0, r7, #1
 800780e:	d1d6      	bne.n	80077be <_vfiprintf_r+0x19e>
 8007810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007812:	07d9      	lsls	r1, r3, #31
 8007814:	d405      	bmi.n	8007822 <_vfiprintf_r+0x202>
 8007816:	89ab      	ldrh	r3, [r5, #12]
 8007818:	059a      	lsls	r2, r3, #22
 800781a:	d402      	bmi.n	8007822 <_vfiprintf_r+0x202>
 800781c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800781e:	f7ff fddb 	bl	80073d8 <__retarget_lock_release_recursive>
 8007822:	89ab      	ldrh	r3, [r5, #12]
 8007824:	065b      	lsls	r3, r3, #25
 8007826:	f53f af1d 	bmi.w	8007664 <_vfiprintf_r+0x44>
 800782a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800782c:	e71c      	b.n	8007668 <_vfiprintf_r+0x48>
 800782e:	ab03      	add	r3, sp, #12
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	462a      	mov	r2, r5
 8007834:	4b05      	ldr	r3, [pc, #20]	; (800784c <_vfiprintf_r+0x22c>)
 8007836:	a904      	add	r1, sp, #16
 8007838:	4630      	mov	r0, r6
 800783a:	f000 f879 	bl	8007930 <_printf_i>
 800783e:	e7e4      	b.n	800780a <_vfiprintf_r+0x1ea>
 8007840:	08008028 	.word	0x08008028
 8007844:	08008032 	.word	0x08008032
 8007848:	00000000 	.word	0x00000000
 800784c:	080075fb 	.word	0x080075fb
 8007850:	0800802e 	.word	0x0800802e

08007854 <_printf_common>:
 8007854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	4616      	mov	r6, r2
 800785a:	4699      	mov	r9, r3
 800785c:	688a      	ldr	r2, [r1, #8]
 800785e:	690b      	ldr	r3, [r1, #16]
 8007860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007864:	4293      	cmp	r3, r2
 8007866:	bfb8      	it	lt
 8007868:	4613      	movlt	r3, r2
 800786a:	6033      	str	r3, [r6, #0]
 800786c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007870:	4607      	mov	r7, r0
 8007872:	460c      	mov	r4, r1
 8007874:	b10a      	cbz	r2, 800787a <_printf_common+0x26>
 8007876:	3301      	adds	r3, #1
 8007878:	6033      	str	r3, [r6, #0]
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	0699      	lsls	r1, r3, #26
 800787e:	bf42      	ittt	mi
 8007880:	6833      	ldrmi	r3, [r6, #0]
 8007882:	3302      	addmi	r3, #2
 8007884:	6033      	strmi	r3, [r6, #0]
 8007886:	6825      	ldr	r5, [r4, #0]
 8007888:	f015 0506 	ands.w	r5, r5, #6
 800788c:	d106      	bne.n	800789c <_printf_common+0x48>
 800788e:	f104 0a19 	add.w	sl, r4, #25
 8007892:	68e3      	ldr	r3, [r4, #12]
 8007894:	6832      	ldr	r2, [r6, #0]
 8007896:	1a9b      	subs	r3, r3, r2
 8007898:	42ab      	cmp	r3, r5
 800789a:	dc26      	bgt.n	80078ea <_printf_common+0x96>
 800789c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078a0:	1e13      	subs	r3, r2, #0
 80078a2:	6822      	ldr	r2, [r4, #0]
 80078a4:	bf18      	it	ne
 80078a6:	2301      	movne	r3, #1
 80078a8:	0692      	lsls	r2, r2, #26
 80078aa:	d42b      	bmi.n	8007904 <_printf_common+0xb0>
 80078ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078b0:	4649      	mov	r1, r9
 80078b2:	4638      	mov	r0, r7
 80078b4:	47c0      	blx	r8
 80078b6:	3001      	adds	r0, #1
 80078b8:	d01e      	beq.n	80078f8 <_printf_common+0xa4>
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	6922      	ldr	r2, [r4, #16]
 80078be:	f003 0306 	and.w	r3, r3, #6
 80078c2:	2b04      	cmp	r3, #4
 80078c4:	bf02      	ittt	eq
 80078c6:	68e5      	ldreq	r5, [r4, #12]
 80078c8:	6833      	ldreq	r3, [r6, #0]
 80078ca:	1aed      	subeq	r5, r5, r3
 80078cc:	68a3      	ldr	r3, [r4, #8]
 80078ce:	bf0c      	ite	eq
 80078d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078d4:	2500      	movne	r5, #0
 80078d6:	4293      	cmp	r3, r2
 80078d8:	bfc4      	itt	gt
 80078da:	1a9b      	subgt	r3, r3, r2
 80078dc:	18ed      	addgt	r5, r5, r3
 80078de:	2600      	movs	r6, #0
 80078e0:	341a      	adds	r4, #26
 80078e2:	42b5      	cmp	r5, r6
 80078e4:	d11a      	bne.n	800791c <_printf_common+0xc8>
 80078e6:	2000      	movs	r0, #0
 80078e8:	e008      	b.n	80078fc <_printf_common+0xa8>
 80078ea:	2301      	movs	r3, #1
 80078ec:	4652      	mov	r2, sl
 80078ee:	4649      	mov	r1, r9
 80078f0:	4638      	mov	r0, r7
 80078f2:	47c0      	blx	r8
 80078f4:	3001      	adds	r0, #1
 80078f6:	d103      	bne.n	8007900 <_printf_common+0xac>
 80078f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007900:	3501      	adds	r5, #1
 8007902:	e7c6      	b.n	8007892 <_printf_common+0x3e>
 8007904:	18e1      	adds	r1, r4, r3
 8007906:	1c5a      	adds	r2, r3, #1
 8007908:	2030      	movs	r0, #48	; 0x30
 800790a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800790e:	4422      	add	r2, r4
 8007910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007918:	3302      	adds	r3, #2
 800791a:	e7c7      	b.n	80078ac <_printf_common+0x58>
 800791c:	2301      	movs	r3, #1
 800791e:	4622      	mov	r2, r4
 8007920:	4649      	mov	r1, r9
 8007922:	4638      	mov	r0, r7
 8007924:	47c0      	blx	r8
 8007926:	3001      	adds	r0, #1
 8007928:	d0e6      	beq.n	80078f8 <_printf_common+0xa4>
 800792a:	3601      	adds	r6, #1
 800792c:	e7d9      	b.n	80078e2 <_printf_common+0x8e>
	...

08007930 <_printf_i>:
 8007930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007934:	7e0f      	ldrb	r7, [r1, #24]
 8007936:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007938:	2f78      	cmp	r7, #120	; 0x78
 800793a:	4691      	mov	r9, r2
 800793c:	4680      	mov	r8, r0
 800793e:	460c      	mov	r4, r1
 8007940:	469a      	mov	sl, r3
 8007942:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007946:	d807      	bhi.n	8007958 <_printf_i+0x28>
 8007948:	2f62      	cmp	r7, #98	; 0x62
 800794a:	d80a      	bhi.n	8007962 <_printf_i+0x32>
 800794c:	2f00      	cmp	r7, #0
 800794e:	f000 80d4 	beq.w	8007afa <_printf_i+0x1ca>
 8007952:	2f58      	cmp	r7, #88	; 0x58
 8007954:	f000 80c0 	beq.w	8007ad8 <_printf_i+0x1a8>
 8007958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800795c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007960:	e03a      	b.n	80079d8 <_printf_i+0xa8>
 8007962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007966:	2b15      	cmp	r3, #21
 8007968:	d8f6      	bhi.n	8007958 <_printf_i+0x28>
 800796a:	a101      	add	r1, pc, #4	; (adr r1, 8007970 <_printf_i+0x40>)
 800796c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007970:	080079c9 	.word	0x080079c9
 8007974:	080079dd 	.word	0x080079dd
 8007978:	08007959 	.word	0x08007959
 800797c:	08007959 	.word	0x08007959
 8007980:	08007959 	.word	0x08007959
 8007984:	08007959 	.word	0x08007959
 8007988:	080079dd 	.word	0x080079dd
 800798c:	08007959 	.word	0x08007959
 8007990:	08007959 	.word	0x08007959
 8007994:	08007959 	.word	0x08007959
 8007998:	08007959 	.word	0x08007959
 800799c:	08007ae1 	.word	0x08007ae1
 80079a0:	08007a09 	.word	0x08007a09
 80079a4:	08007a9b 	.word	0x08007a9b
 80079a8:	08007959 	.word	0x08007959
 80079ac:	08007959 	.word	0x08007959
 80079b0:	08007b03 	.word	0x08007b03
 80079b4:	08007959 	.word	0x08007959
 80079b8:	08007a09 	.word	0x08007a09
 80079bc:	08007959 	.word	0x08007959
 80079c0:	08007959 	.word	0x08007959
 80079c4:	08007aa3 	.word	0x08007aa3
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	1d1a      	adds	r2, r3, #4
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	602a      	str	r2, [r5, #0]
 80079d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079d8:	2301      	movs	r3, #1
 80079da:	e09f      	b.n	8007b1c <_printf_i+0x1ec>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	682b      	ldr	r3, [r5, #0]
 80079e0:	0607      	lsls	r7, r0, #24
 80079e2:	f103 0104 	add.w	r1, r3, #4
 80079e6:	6029      	str	r1, [r5, #0]
 80079e8:	d501      	bpl.n	80079ee <_printf_i+0xbe>
 80079ea:	681e      	ldr	r6, [r3, #0]
 80079ec:	e003      	b.n	80079f6 <_printf_i+0xc6>
 80079ee:	0646      	lsls	r6, r0, #25
 80079f0:	d5fb      	bpl.n	80079ea <_printf_i+0xba>
 80079f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80079f6:	2e00      	cmp	r6, #0
 80079f8:	da03      	bge.n	8007a02 <_printf_i+0xd2>
 80079fa:	232d      	movs	r3, #45	; 0x2d
 80079fc:	4276      	negs	r6, r6
 80079fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a02:	485a      	ldr	r0, [pc, #360]	; (8007b6c <_printf_i+0x23c>)
 8007a04:	230a      	movs	r3, #10
 8007a06:	e012      	b.n	8007a2e <_printf_i+0xfe>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	6820      	ldr	r0, [r4, #0]
 8007a0c:	1d19      	adds	r1, r3, #4
 8007a0e:	6029      	str	r1, [r5, #0]
 8007a10:	0605      	lsls	r5, r0, #24
 8007a12:	d501      	bpl.n	8007a18 <_printf_i+0xe8>
 8007a14:	681e      	ldr	r6, [r3, #0]
 8007a16:	e002      	b.n	8007a1e <_printf_i+0xee>
 8007a18:	0641      	lsls	r1, r0, #25
 8007a1a:	d5fb      	bpl.n	8007a14 <_printf_i+0xe4>
 8007a1c:	881e      	ldrh	r6, [r3, #0]
 8007a1e:	4853      	ldr	r0, [pc, #332]	; (8007b6c <_printf_i+0x23c>)
 8007a20:	2f6f      	cmp	r7, #111	; 0x6f
 8007a22:	bf0c      	ite	eq
 8007a24:	2308      	moveq	r3, #8
 8007a26:	230a      	movne	r3, #10
 8007a28:	2100      	movs	r1, #0
 8007a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a2e:	6865      	ldr	r5, [r4, #4]
 8007a30:	60a5      	str	r5, [r4, #8]
 8007a32:	2d00      	cmp	r5, #0
 8007a34:	bfa2      	ittt	ge
 8007a36:	6821      	ldrge	r1, [r4, #0]
 8007a38:	f021 0104 	bicge.w	r1, r1, #4
 8007a3c:	6021      	strge	r1, [r4, #0]
 8007a3e:	b90e      	cbnz	r6, 8007a44 <_printf_i+0x114>
 8007a40:	2d00      	cmp	r5, #0
 8007a42:	d04b      	beq.n	8007adc <_printf_i+0x1ac>
 8007a44:	4615      	mov	r5, r2
 8007a46:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a4a:	fb03 6711 	mls	r7, r3, r1, r6
 8007a4e:	5dc7      	ldrb	r7, [r0, r7]
 8007a50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a54:	4637      	mov	r7, r6
 8007a56:	42bb      	cmp	r3, r7
 8007a58:	460e      	mov	r6, r1
 8007a5a:	d9f4      	bls.n	8007a46 <_printf_i+0x116>
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d10b      	bne.n	8007a78 <_printf_i+0x148>
 8007a60:	6823      	ldr	r3, [r4, #0]
 8007a62:	07de      	lsls	r6, r3, #31
 8007a64:	d508      	bpl.n	8007a78 <_printf_i+0x148>
 8007a66:	6923      	ldr	r3, [r4, #16]
 8007a68:	6861      	ldr	r1, [r4, #4]
 8007a6a:	4299      	cmp	r1, r3
 8007a6c:	bfde      	ittt	le
 8007a6e:	2330      	movle	r3, #48	; 0x30
 8007a70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007a78:	1b52      	subs	r2, r2, r5
 8007a7a:	6122      	str	r2, [r4, #16]
 8007a7c:	f8cd a000 	str.w	sl, [sp]
 8007a80:	464b      	mov	r3, r9
 8007a82:	aa03      	add	r2, sp, #12
 8007a84:	4621      	mov	r1, r4
 8007a86:	4640      	mov	r0, r8
 8007a88:	f7ff fee4 	bl	8007854 <_printf_common>
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	d14a      	bne.n	8007b26 <_printf_i+0x1f6>
 8007a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a94:	b004      	add	sp, #16
 8007a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	f043 0320 	orr.w	r3, r3, #32
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	4833      	ldr	r0, [pc, #204]	; (8007b70 <_printf_i+0x240>)
 8007aa4:	2778      	movs	r7, #120	; 0x78
 8007aa6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	6829      	ldr	r1, [r5, #0]
 8007aae:	061f      	lsls	r7, r3, #24
 8007ab0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ab4:	d402      	bmi.n	8007abc <_printf_i+0x18c>
 8007ab6:	065f      	lsls	r7, r3, #25
 8007ab8:	bf48      	it	mi
 8007aba:	b2b6      	uxthmi	r6, r6
 8007abc:	07df      	lsls	r7, r3, #31
 8007abe:	bf48      	it	mi
 8007ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8007ac4:	6029      	str	r1, [r5, #0]
 8007ac6:	bf48      	it	mi
 8007ac8:	6023      	strmi	r3, [r4, #0]
 8007aca:	b91e      	cbnz	r6, 8007ad4 <_printf_i+0x1a4>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	f023 0320 	bic.w	r3, r3, #32
 8007ad2:	6023      	str	r3, [r4, #0]
 8007ad4:	2310      	movs	r3, #16
 8007ad6:	e7a7      	b.n	8007a28 <_printf_i+0xf8>
 8007ad8:	4824      	ldr	r0, [pc, #144]	; (8007b6c <_printf_i+0x23c>)
 8007ada:	e7e4      	b.n	8007aa6 <_printf_i+0x176>
 8007adc:	4615      	mov	r5, r2
 8007ade:	e7bd      	b.n	8007a5c <_printf_i+0x12c>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	6826      	ldr	r6, [r4, #0]
 8007ae4:	6961      	ldr	r1, [r4, #20]
 8007ae6:	1d18      	adds	r0, r3, #4
 8007ae8:	6028      	str	r0, [r5, #0]
 8007aea:	0635      	lsls	r5, r6, #24
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	d501      	bpl.n	8007af4 <_printf_i+0x1c4>
 8007af0:	6019      	str	r1, [r3, #0]
 8007af2:	e002      	b.n	8007afa <_printf_i+0x1ca>
 8007af4:	0670      	lsls	r0, r6, #25
 8007af6:	d5fb      	bpl.n	8007af0 <_printf_i+0x1c0>
 8007af8:	8019      	strh	r1, [r3, #0]
 8007afa:	2300      	movs	r3, #0
 8007afc:	6123      	str	r3, [r4, #16]
 8007afe:	4615      	mov	r5, r2
 8007b00:	e7bc      	b.n	8007a7c <_printf_i+0x14c>
 8007b02:	682b      	ldr	r3, [r5, #0]
 8007b04:	1d1a      	adds	r2, r3, #4
 8007b06:	602a      	str	r2, [r5, #0]
 8007b08:	681d      	ldr	r5, [r3, #0]
 8007b0a:	6862      	ldr	r2, [r4, #4]
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f7f8 fbe6 	bl	80002e0 <memchr>
 8007b14:	b108      	cbz	r0, 8007b1a <_printf_i+0x1ea>
 8007b16:	1b40      	subs	r0, r0, r5
 8007b18:	6060      	str	r0, [r4, #4]
 8007b1a:	6863      	ldr	r3, [r4, #4]
 8007b1c:	6123      	str	r3, [r4, #16]
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b24:	e7aa      	b.n	8007a7c <_printf_i+0x14c>
 8007b26:	6923      	ldr	r3, [r4, #16]
 8007b28:	462a      	mov	r2, r5
 8007b2a:	4649      	mov	r1, r9
 8007b2c:	4640      	mov	r0, r8
 8007b2e:	47d0      	blx	sl
 8007b30:	3001      	adds	r0, #1
 8007b32:	d0ad      	beq.n	8007a90 <_printf_i+0x160>
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	079b      	lsls	r3, r3, #30
 8007b38:	d413      	bmi.n	8007b62 <_printf_i+0x232>
 8007b3a:	68e0      	ldr	r0, [r4, #12]
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	4298      	cmp	r0, r3
 8007b40:	bfb8      	it	lt
 8007b42:	4618      	movlt	r0, r3
 8007b44:	e7a6      	b.n	8007a94 <_printf_i+0x164>
 8007b46:	2301      	movs	r3, #1
 8007b48:	4632      	mov	r2, r6
 8007b4a:	4649      	mov	r1, r9
 8007b4c:	4640      	mov	r0, r8
 8007b4e:	47d0      	blx	sl
 8007b50:	3001      	adds	r0, #1
 8007b52:	d09d      	beq.n	8007a90 <_printf_i+0x160>
 8007b54:	3501      	adds	r5, #1
 8007b56:	68e3      	ldr	r3, [r4, #12]
 8007b58:	9903      	ldr	r1, [sp, #12]
 8007b5a:	1a5b      	subs	r3, r3, r1
 8007b5c:	42ab      	cmp	r3, r5
 8007b5e:	dcf2      	bgt.n	8007b46 <_printf_i+0x216>
 8007b60:	e7eb      	b.n	8007b3a <_printf_i+0x20a>
 8007b62:	2500      	movs	r5, #0
 8007b64:	f104 0619 	add.w	r6, r4, #25
 8007b68:	e7f5      	b.n	8007b56 <_printf_i+0x226>
 8007b6a:	bf00      	nop
 8007b6c:	08008039 	.word	0x08008039
 8007b70:	0800804a 	.word	0x0800804a

08007b74 <__sflush_r>:
 8007b74:	898a      	ldrh	r2, [r1, #12]
 8007b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7a:	4605      	mov	r5, r0
 8007b7c:	0710      	lsls	r0, r2, #28
 8007b7e:	460c      	mov	r4, r1
 8007b80:	d458      	bmi.n	8007c34 <__sflush_r+0xc0>
 8007b82:	684b      	ldr	r3, [r1, #4]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	dc05      	bgt.n	8007b94 <__sflush_r+0x20>
 8007b88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	dc02      	bgt.n	8007b94 <__sflush_r+0x20>
 8007b8e:	2000      	movs	r0, #0
 8007b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b96:	2e00      	cmp	r6, #0
 8007b98:	d0f9      	beq.n	8007b8e <__sflush_r+0x1a>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ba0:	682f      	ldr	r7, [r5, #0]
 8007ba2:	6a21      	ldr	r1, [r4, #32]
 8007ba4:	602b      	str	r3, [r5, #0]
 8007ba6:	d032      	beq.n	8007c0e <__sflush_r+0x9a>
 8007ba8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007baa:	89a3      	ldrh	r3, [r4, #12]
 8007bac:	075a      	lsls	r2, r3, #29
 8007bae:	d505      	bpl.n	8007bbc <__sflush_r+0x48>
 8007bb0:	6863      	ldr	r3, [r4, #4]
 8007bb2:	1ac0      	subs	r0, r0, r3
 8007bb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bb6:	b10b      	cbz	r3, 8007bbc <__sflush_r+0x48>
 8007bb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bba:	1ac0      	subs	r0, r0, r3
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bc2:	6a21      	ldr	r1, [r4, #32]
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	47b0      	blx	r6
 8007bc8:	1c43      	adds	r3, r0, #1
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	d106      	bne.n	8007bdc <__sflush_r+0x68>
 8007bce:	6829      	ldr	r1, [r5, #0]
 8007bd0:	291d      	cmp	r1, #29
 8007bd2:	d82b      	bhi.n	8007c2c <__sflush_r+0xb8>
 8007bd4:	4a29      	ldr	r2, [pc, #164]	; (8007c7c <__sflush_r+0x108>)
 8007bd6:	410a      	asrs	r2, r1
 8007bd8:	07d6      	lsls	r6, r2, #31
 8007bda:	d427      	bmi.n	8007c2c <__sflush_r+0xb8>
 8007bdc:	2200      	movs	r2, #0
 8007bde:	6062      	str	r2, [r4, #4]
 8007be0:	04d9      	lsls	r1, r3, #19
 8007be2:	6922      	ldr	r2, [r4, #16]
 8007be4:	6022      	str	r2, [r4, #0]
 8007be6:	d504      	bpl.n	8007bf2 <__sflush_r+0x7e>
 8007be8:	1c42      	adds	r2, r0, #1
 8007bea:	d101      	bne.n	8007bf0 <__sflush_r+0x7c>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b903      	cbnz	r3, 8007bf2 <__sflush_r+0x7e>
 8007bf0:	6560      	str	r0, [r4, #84]	; 0x54
 8007bf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bf4:	602f      	str	r7, [r5, #0]
 8007bf6:	2900      	cmp	r1, #0
 8007bf8:	d0c9      	beq.n	8007b8e <__sflush_r+0x1a>
 8007bfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bfe:	4299      	cmp	r1, r3
 8007c00:	d002      	beq.n	8007c08 <__sflush_r+0x94>
 8007c02:	4628      	mov	r0, r5
 8007c04:	f7ff fbea 	bl	80073dc <_free_r>
 8007c08:	2000      	movs	r0, #0
 8007c0a:	6360      	str	r0, [r4, #52]	; 0x34
 8007c0c:	e7c0      	b.n	8007b90 <__sflush_r+0x1c>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	4628      	mov	r0, r5
 8007c12:	47b0      	blx	r6
 8007c14:	1c41      	adds	r1, r0, #1
 8007c16:	d1c8      	bne.n	8007baa <__sflush_r+0x36>
 8007c18:	682b      	ldr	r3, [r5, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d0c5      	beq.n	8007baa <__sflush_r+0x36>
 8007c1e:	2b1d      	cmp	r3, #29
 8007c20:	d001      	beq.n	8007c26 <__sflush_r+0xb2>
 8007c22:	2b16      	cmp	r3, #22
 8007c24:	d101      	bne.n	8007c2a <__sflush_r+0xb6>
 8007c26:	602f      	str	r7, [r5, #0]
 8007c28:	e7b1      	b.n	8007b8e <__sflush_r+0x1a>
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c30:	81a3      	strh	r3, [r4, #12]
 8007c32:	e7ad      	b.n	8007b90 <__sflush_r+0x1c>
 8007c34:	690f      	ldr	r7, [r1, #16]
 8007c36:	2f00      	cmp	r7, #0
 8007c38:	d0a9      	beq.n	8007b8e <__sflush_r+0x1a>
 8007c3a:	0793      	lsls	r3, r2, #30
 8007c3c:	680e      	ldr	r6, [r1, #0]
 8007c3e:	bf08      	it	eq
 8007c40:	694b      	ldreq	r3, [r1, #20]
 8007c42:	600f      	str	r7, [r1, #0]
 8007c44:	bf18      	it	ne
 8007c46:	2300      	movne	r3, #0
 8007c48:	eba6 0807 	sub.w	r8, r6, r7
 8007c4c:	608b      	str	r3, [r1, #8]
 8007c4e:	f1b8 0f00 	cmp.w	r8, #0
 8007c52:	dd9c      	ble.n	8007b8e <__sflush_r+0x1a>
 8007c54:	6a21      	ldr	r1, [r4, #32]
 8007c56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c58:	4643      	mov	r3, r8
 8007c5a:	463a      	mov	r2, r7
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	47b0      	blx	r6
 8007c60:	2800      	cmp	r0, #0
 8007c62:	dc06      	bgt.n	8007c72 <__sflush_r+0xfe>
 8007c64:	89a3      	ldrh	r3, [r4, #12]
 8007c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c6a:	81a3      	strh	r3, [r4, #12]
 8007c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c70:	e78e      	b.n	8007b90 <__sflush_r+0x1c>
 8007c72:	4407      	add	r7, r0
 8007c74:	eba8 0800 	sub.w	r8, r8, r0
 8007c78:	e7e9      	b.n	8007c4e <__sflush_r+0xda>
 8007c7a:	bf00      	nop
 8007c7c:	dfbffffe 	.word	0xdfbffffe

08007c80 <_fflush_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	690b      	ldr	r3, [r1, #16]
 8007c84:	4605      	mov	r5, r0
 8007c86:	460c      	mov	r4, r1
 8007c88:	b913      	cbnz	r3, 8007c90 <_fflush_r+0x10>
 8007c8a:	2500      	movs	r5, #0
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	b118      	cbz	r0, 8007c9a <_fflush_r+0x1a>
 8007c92:	6a03      	ldr	r3, [r0, #32]
 8007c94:	b90b      	cbnz	r3, 8007c9a <_fflush_r+0x1a>
 8007c96:	f7ff f9a1 	bl	8006fdc <__sinit>
 8007c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d0f3      	beq.n	8007c8a <_fflush_r+0xa>
 8007ca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ca4:	07d0      	lsls	r0, r2, #31
 8007ca6:	d404      	bmi.n	8007cb2 <_fflush_r+0x32>
 8007ca8:	0599      	lsls	r1, r3, #22
 8007caa:	d402      	bmi.n	8007cb2 <_fflush_r+0x32>
 8007cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cae:	f7ff fb92 	bl	80073d6 <__retarget_lock_acquire_recursive>
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	f7ff ff5d 	bl	8007b74 <__sflush_r>
 8007cba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cbc:	07da      	lsls	r2, r3, #31
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	d4e4      	bmi.n	8007c8c <_fflush_r+0xc>
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	059b      	lsls	r3, r3, #22
 8007cc6:	d4e1      	bmi.n	8007c8c <_fflush_r+0xc>
 8007cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cca:	f7ff fb85 	bl	80073d8 <__retarget_lock_release_recursive>
 8007cce:	e7dd      	b.n	8007c8c <_fflush_r+0xc>

08007cd0 <__swhatbuf_r>:
 8007cd0:	b570      	push	{r4, r5, r6, lr}
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd8:	2900      	cmp	r1, #0
 8007cda:	b096      	sub	sp, #88	; 0x58
 8007cdc:	4615      	mov	r5, r2
 8007cde:	461e      	mov	r6, r3
 8007ce0:	da0d      	bge.n	8007cfe <__swhatbuf_r+0x2e>
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ce8:	f04f 0100 	mov.w	r1, #0
 8007cec:	bf0c      	ite	eq
 8007cee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007cf2:	2340      	movne	r3, #64	; 0x40
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	6031      	str	r1, [r6, #0]
 8007cf8:	602b      	str	r3, [r5, #0]
 8007cfa:	b016      	add	sp, #88	; 0x58
 8007cfc:	bd70      	pop	{r4, r5, r6, pc}
 8007cfe:	466a      	mov	r2, sp
 8007d00:	f000 f87c 	bl	8007dfc <_fstat_r>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	dbec      	blt.n	8007ce2 <__swhatbuf_r+0x12>
 8007d08:	9901      	ldr	r1, [sp, #4]
 8007d0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007d0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007d12:	4259      	negs	r1, r3
 8007d14:	4159      	adcs	r1, r3
 8007d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d1a:	e7eb      	b.n	8007cf4 <__swhatbuf_r+0x24>

08007d1c <__smakebuf_r>:
 8007d1c:	898b      	ldrh	r3, [r1, #12]
 8007d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d20:	079d      	lsls	r5, r3, #30
 8007d22:	4606      	mov	r6, r0
 8007d24:	460c      	mov	r4, r1
 8007d26:	d507      	bpl.n	8007d38 <__smakebuf_r+0x1c>
 8007d28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	6123      	str	r3, [r4, #16]
 8007d30:	2301      	movs	r3, #1
 8007d32:	6163      	str	r3, [r4, #20]
 8007d34:	b002      	add	sp, #8
 8007d36:	bd70      	pop	{r4, r5, r6, pc}
 8007d38:	ab01      	add	r3, sp, #4
 8007d3a:	466a      	mov	r2, sp
 8007d3c:	f7ff ffc8 	bl	8007cd0 <__swhatbuf_r>
 8007d40:	9900      	ldr	r1, [sp, #0]
 8007d42:	4605      	mov	r5, r0
 8007d44:	4630      	mov	r0, r6
 8007d46:	f7ff fbb5 	bl	80074b4 <_malloc_r>
 8007d4a:	b948      	cbnz	r0, 8007d60 <__smakebuf_r+0x44>
 8007d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d50:	059a      	lsls	r2, r3, #22
 8007d52:	d4ef      	bmi.n	8007d34 <__smakebuf_r+0x18>
 8007d54:	f023 0303 	bic.w	r3, r3, #3
 8007d58:	f043 0302 	orr.w	r3, r3, #2
 8007d5c:	81a3      	strh	r3, [r4, #12]
 8007d5e:	e7e3      	b.n	8007d28 <__smakebuf_r+0xc>
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	6020      	str	r0, [r4, #0]
 8007d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d68:	81a3      	strh	r3, [r4, #12]
 8007d6a:	9b00      	ldr	r3, [sp, #0]
 8007d6c:	6163      	str	r3, [r4, #20]
 8007d6e:	9b01      	ldr	r3, [sp, #4]
 8007d70:	6120      	str	r0, [r4, #16]
 8007d72:	b15b      	cbz	r3, 8007d8c <__smakebuf_r+0x70>
 8007d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f000 f851 	bl	8007e20 <_isatty_r>
 8007d7e:	b128      	cbz	r0, 8007d8c <__smakebuf_r+0x70>
 8007d80:	89a3      	ldrh	r3, [r4, #12]
 8007d82:	f023 0303 	bic.w	r3, r3, #3
 8007d86:	f043 0301 	orr.w	r3, r3, #1
 8007d8a:	81a3      	strh	r3, [r4, #12]
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	431d      	orrs	r5, r3
 8007d90:	81a5      	strh	r5, [r4, #12]
 8007d92:	e7cf      	b.n	8007d34 <__smakebuf_r+0x18>

08007d94 <_putc_r>:
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	460d      	mov	r5, r1
 8007d98:	4614      	mov	r4, r2
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	b118      	cbz	r0, 8007da6 <_putc_r+0x12>
 8007d9e:	6a03      	ldr	r3, [r0, #32]
 8007da0:	b90b      	cbnz	r3, 8007da6 <_putc_r+0x12>
 8007da2:	f7ff f91b 	bl	8006fdc <__sinit>
 8007da6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007da8:	07d8      	lsls	r0, r3, #31
 8007daa:	d405      	bmi.n	8007db8 <_putc_r+0x24>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	0599      	lsls	r1, r3, #22
 8007db0:	d402      	bmi.n	8007db8 <_putc_r+0x24>
 8007db2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007db4:	f7ff fb0f 	bl	80073d6 <__retarget_lock_acquire_recursive>
 8007db8:	68a3      	ldr	r3, [r4, #8]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	60a3      	str	r3, [r4, #8]
 8007dc0:	da05      	bge.n	8007dce <_putc_r+0x3a>
 8007dc2:	69a2      	ldr	r2, [r4, #24]
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	db12      	blt.n	8007dee <_putc_r+0x5a>
 8007dc8:	b2eb      	uxtb	r3, r5
 8007dca:	2b0a      	cmp	r3, #10
 8007dcc:	d00f      	beq.n	8007dee <_putc_r+0x5a>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	6022      	str	r2, [r4, #0]
 8007dd4:	701d      	strb	r5, [r3, #0]
 8007dd6:	b2ed      	uxtb	r5, r5
 8007dd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dda:	07da      	lsls	r2, r3, #31
 8007ddc:	d405      	bmi.n	8007dea <_putc_r+0x56>
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	059b      	lsls	r3, r3, #22
 8007de2:	d402      	bmi.n	8007dea <_putc_r+0x56>
 8007de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007de6:	f7ff faf7 	bl	80073d8 <__retarget_lock_release_recursive>
 8007dea:	4628      	mov	r0, r5
 8007dec:	bd70      	pop	{r4, r5, r6, pc}
 8007dee:	4629      	mov	r1, r5
 8007df0:	4622      	mov	r2, r4
 8007df2:	4630      	mov	r0, r6
 8007df4:	f7ff f9e1 	bl	80071ba <__swbuf_r>
 8007df8:	4605      	mov	r5, r0
 8007dfa:	e7ed      	b.n	8007dd8 <_putc_r+0x44>

08007dfc <_fstat_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	4d07      	ldr	r5, [pc, #28]	; (8007e1c <_fstat_r+0x20>)
 8007e00:	2300      	movs	r3, #0
 8007e02:	4604      	mov	r4, r0
 8007e04:	4608      	mov	r0, r1
 8007e06:	4611      	mov	r1, r2
 8007e08:	602b      	str	r3, [r5, #0]
 8007e0a:	f7f9 fc50 	bl	80016ae <_fstat>
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	d102      	bne.n	8007e18 <_fstat_r+0x1c>
 8007e12:	682b      	ldr	r3, [r5, #0]
 8007e14:	b103      	cbz	r3, 8007e18 <_fstat_r+0x1c>
 8007e16:	6023      	str	r3, [r4, #0]
 8007e18:	bd38      	pop	{r3, r4, r5, pc}
 8007e1a:	bf00      	nop
 8007e1c:	240002fc 	.word	0x240002fc

08007e20 <_isatty_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4d06      	ldr	r5, [pc, #24]	; (8007e3c <_isatty_r+0x1c>)
 8007e24:	2300      	movs	r3, #0
 8007e26:	4604      	mov	r4, r0
 8007e28:	4608      	mov	r0, r1
 8007e2a:	602b      	str	r3, [r5, #0]
 8007e2c:	f7f9 fc4f 	bl	80016ce <_isatty>
 8007e30:	1c43      	adds	r3, r0, #1
 8007e32:	d102      	bne.n	8007e3a <_isatty_r+0x1a>
 8007e34:	682b      	ldr	r3, [r5, #0]
 8007e36:	b103      	cbz	r3, 8007e3a <_isatty_r+0x1a>
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	bd38      	pop	{r3, r4, r5, pc}
 8007e3c:	240002fc 	.word	0x240002fc

08007e40 <_sbrk_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4d06      	ldr	r5, [pc, #24]	; (8007e5c <_sbrk_r+0x1c>)
 8007e44:	2300      	movs	r3, #0
 8007e46:	4604      	mov	r4, r0
 8007e48:	4608      	mov	r0, r1
 8007e4a:	602b      	str	r3, [r5, #0]
 8007e4c:	f7f9 fc58 	bl	8001700 <_sbrk>
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	d102      	bne.n	8007e5a <_sbrk_r+0x1a>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	b103      	cbz	r3, 8007e5a <_sbrk_r+0x1a>
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	240002fc 	.word	0x240002fc

08007e60 <_init>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	bf00      	nop
 8007e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e66:	bc08      	pop	{r3}
 8007e68:	469e      	mov	lr, r3
 8007e6a:	4770      	bx	lr

08007e6c <_fini>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	bf00      	nop
 8007e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e72:	bc08      	pop	{r3}
 8007e74:	469e      	mov	lr, r3
 8007e76:	4770      	bx	lr
