
nrf-rx-h755-complete_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c68  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08007f08  08007f08  00017f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080fc  080080fc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080080fc  080080fc  000180fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008104  08008104  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008104  08008104  00018104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008108  08008108  00018108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  24000000  0800810c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  2400006c  08008178  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400030c  08008178  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000134c1  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ea  00000000  00000000  0003359e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00035c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b21  00000000  00000000  00036b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003af87  00000000  00000000  00037639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e54  00000000  00000000  000725c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00180b5d  00000000  00000000  00084414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000442c  00000000  00000000  00204f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  002093a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007ef0 	.word	0x08007ef0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08007ef0 	.word	0x08007ef0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000680:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <SystemInit+0xfc>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a3c      	ldr	r2, [pc, #240]	; (8000778 <SystemInit+0xfc>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <SystemInit+0xfc>)
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	4a38      	ldr	r2, [pc, #224]	; (8000778 <SystemInit+0xfc>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800069c:	4b37      	ldr	r3, [pc, #220]	; (800077c <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	2b06      	cmp	r3, #6
 80006a6:	d807      	bhi.n	80006b8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a8:	4b34      	ldr	r3, [pc, #208]	; (800077c <SystemInit+0x100>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 030f 	bic.w	r3, r3, #15
 80006b0:	4a32      	ldr	r2, [pc, #200]	; (800077c <SystemInit+0x100>)
 80006b2:	f043 0307 	orr.w	r3, r3, #7
 80006b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <SystemInit+0x104>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a30      	ldr	r2, [pc, #192]	; (8000780 <SystemInit+0x104>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <SystemInit+0x104>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <SystemInit+0x104>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	492c      	ldr	r1, [pc, #176]	; (8000780 <SystemInit+0x104>)
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <SystemInit+0x108>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <SystemInit+0x100>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f023 030f 	bic.w	r3, r3, #15
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <SystemInit+0x100>)
 80006ec:	f043 0307 	orr.w	r3, r3, #7
 80006f0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <SystemInit+0x104>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <SystemInit+0x104>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <SystemInit+0x104>)
 8000706:	4a20      	ldr	r2, [pc, #128]	; (8000788 <SystemInit+0x10c>)
 8000708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <SystemInit+0x104>)
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <SystemInit+0x110>)
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <SystemInit+0x104>)
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <SystemInit+0x114>)
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <SystemInit+0x104>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <SystemInit+0x114>)
 8000720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <SystemInit+0x104>)
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <SystemInit+0x114>)
 800072c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <SystemInit+0x104>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <SystemInit+0x104>)
 800073a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <SystemInit+0x104>)
 8000742:	2200      	movs	r2, #0
 8000744:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <SystemInit+0x118>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <SystemInit+0x118>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <SystemInit+0x11c>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x120>)
 8000758:	4013      	ands	r3, r2
 800075a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075e:	d202      	bcs.n	8000766 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <SystemInit+0x124>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <SystemInit+0x128>)
 8000768:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800076c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	52002000 	.word	0x52002000
 8000780:	58024400 	.word	0x58024400
 8000784:	eaf6ed7f 	.word	0xeaf6ed7f
 8000788:	02020200 	.word	0x02020200
 800078c:	01ff0000 	.word	0x01ff0000
 8000790:	01010280 	.word	0x01010280
 8000794:	580000c0 	.word	0x580000c0
 8000798:	5c001000 	.word	0x5c001000
 800079c:	ffff0000 	.word	0xffff0000
 80007a0:	51008108 	.word	0x51008108
 80007a4:	52004000 	.word	0x52004000

080007a8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007b6:	2201      	movs	r2, #1
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <__io_putchar+0x20>)
 80007ba:	f005 fab6 	bl	8005d2a <HAL_UART_Transmit>
  return ch;
 80007be:	687b      	ldr	r3, [r7, #4]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	24000110 	.word	0x24000110

080007cc <HAL_GPIO_EXTI_Callback>:
/*******************************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin) {
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007dc:	d003      	beq.n	80007e6 <HAL_GPIO_EXTI_Callback+0x1a>
 80007de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007e2:	d005      	beq.n	80007f0 <HAL_GPIO_EXTI_Callback+0x24>
 80007e4:	e02f      	b.n	8000846 <HAL_GPIO_EXTI_Callback+0x7a>
    case BTN_USER_Pin:
      NRF_PrintFIFOStatus();
 80007e6:	f000 fdd3 	bl	8001390 <NRF_PrintFIFOStatus>
      NRF_PrintStatus();
 80007ea:	f000 fd63 	bl	80012b4 <NRF_PrintStatus>
      break;
 80007ee:	e02f      	b.n	8000850 <HAL_GPIO_EXTI_Callback+0x84>
    case NRF_IRQ_Pin:
      {
        uint8_t status = NRF_ReadStatus();
 80007f0:	f000 fcb0 	bl	8001154 <NRF_ReadStatus>
 80007f4:	4603      	mov	r3, r0
 80007f6:	74fb      	strb	r3, [r7, #19]
        if (status & 0x40) {
 80007f8:	7cfb      	ldrb	r3, [r7, #19]
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d025      	beq.n	800084e <HAL_GPIO_EXTI_Callback+0x82>
          // RX_DR (Data Ready RX FIFO interrupt) set
          uint8_t payload[10];
          NRF_ReadPayload(payload, 10);
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	210a      	movs	r1, #10
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fbcc 	bl	8000fa6 <NRF_ReadPayload>
          printf("Payload:");
 800080e:	4812      	ldr	r0, [pc, #72]	; (8000858 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000810:	f006 fc62 	bl	80070d8 <iprintf>
          for (int i = 0; i < 10; i++) {
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	e00a      	b.n	8000830 <HAL_GPIO_EXTI_Callback+0x64>
            printf("%c", payload[i]);
 800081a:	f107 0208 	add.w	r2, r7, #8
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f006 fc69 	bl	80070fc <putchar>
          for (int i = 0; i < 10; i++) {
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	3301      	adds	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	2b09      	cmp	r3, #9
 8000834:	ddf1      	ble.n	800081a <HAL_GPIO_EXTI_Callback+0x4e>
          }
          printf("\r\n");
 8000836:	4809      	ldr	r0, [pc, #36]	; (800085c <HAL_GPIO_EXTI_Callback+0x90>)
 8000838:	f006 fcbc 	bl	80071b4 <puts>
          NRF_SetRegisterBit(NRF_REG_STATUS, 6); // reset RX_DR
 800083c:	2106      	movs	r1, #6
 800083e:	2007      	movs	r0, #7
 8000840:	f000 fbff 	bl	8001042 <NRF_SetRegisterBit>
        }
      }
      break;
 8000844:	e003      	b.n	800084e <HAL_GPIO_EXTI_Callback+0x82>
    default:
      printf("Unhandled interrupt...\r\n");
 8000846:	4806      	ldr	r0, [pc, #24]	; (8000860 <HAL_GPIO_EXTI_Callback+0x94>)
 8000848:	f006 fcb4 	bl	80071b4 <puts>
      break;
 800084c:	e000      	b.n	8000850 <HAL_GPIO_EXTI_Callback+0x84>
      break;
 800084e:	bf00      	nop
  }
}
 8000850:	bf00      	nop
 8000852:	3718      	adds	r7, #24
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	08007f08 	.word	0x08007f08
 800085c:	08007f14 	.word	0x08007f14
 8000860:	08007f18 	.word	0x08007f18

08000864 <runExample>:

void runExample() {
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af02      	add	r7, sp, #8
  printf("... starting up H7\r\n\r\n");
 800086a:	4820      	ldr	r0, [pc, #128]	; (80008ec <runExample+0x88>)
 800086c:	f006 fca2 	bl	80071b4 <puts>
  NRF_Init(&hspi1, NRF_CSN_GPIO_Port, NRF_CSN_Pin, NRF_CE_GPIO_Port, NRF_CE_Pin);
 8000870:	2340      	movs	r3, #64	; 0x40
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <runExample+0x8c>)
 8000876:	f44f 7280 	mov.w	r2, #256	; 0x100
 800087a:	491e      	ldr	r1, [pc, #120]	; (80008f4 <runExample+0x90>)
 800087c:	481e      	ldr	r0, [pc, #120]	; (80008f8 <runExample+0x94>)
 800087e:	f000 fa97 	bl	8000db0 <NRF_Init>
  NRF_Reset();
 8000882:	f000 fc81 	bl	8001188 <NRF_Reset>

  // Config
  uint8_t address[5] = {1,2,3,4,5};
 8000886:	4a1d      	ldr	r2, [pc, #116]	; (80008fc <runExample+0x98>)
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000890:	6018      	str	r0, [r3, #0]
 8000892:	3304      	adds	r3, #4
 8000894:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	2205      	movs	r2, #5
 800089c:	4619      	mov	r1, r3
 800089e:	200a      	movs	r0, #10
 80008a0:	f000 fba3 	bl	8000fea <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0, 10); // datawidth
 80008a4:	210a      	movs	r1, #10
 80008a6:	2011      	movs	r0, #17
 80008a8:	f000 fbb5 	bl	8001016 <NRF_WriteRegisterByte>
 
  // Enable ACK payloads (which needs dynamic payload length enabled)
  NRF_SetRegisterBit(NRF_REG_FEATURE, 1);
 80008ac:	2101      	movs	r1, #1
 80008ae:	201d      	movs	r0, #29
 80008b0:	f000 fbc7 	bl	8001042 <NRF_SetRegisterBit>
  NRF_SetRegisterBit(NRF_REG_FEATURE, 2);
 80008b4:	2102      	movs	r1, #2
 80008b6:	201d      	movs	r0, #29
 80008b8:	f000 fbc3 	bl	8001042 <NRF_SetRegisterBit>
  NRF_SetRegisterBit(NRF_REG_DYNPD, 0);
 80008bc:	2100      	movs	r1, #0
 80008be:	201c      	movs	r0, #28
 80008c0:	f000 fbbf 	bl	8001042 <NRF_SetRegisterBit>
  uint8_t msg[10] = "HelloThere";
 80008c4:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <runExample+0x9c>)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80008ca:	c303      	stmia	r3!, {r0, r1}
 80008cc:	801a      	strh	r2, [r3, #0]
  NRF_WriteAckPayload(msg, 10);
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	210a      	movs	r1, #10
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fb78 	bl	8000fc8 <NRF_WriteAckPayload>

  // Start
  NRF_EnterMode(NRF_MODE_RX);
 80008d8:	2002      	movs	r0, #2
 80008da:	f000 fb27 	bl	8000f2c <NRF_EnterMode>
  printf("Entered RX mode...\r\n");
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <runExample+0xa0>)
 80008e0:	f006 fc68 	bl	80071b4 <puts>
}
 80008e4:	bf00      	nop
 80008e6:	3718      	adds	r7, #24
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	08007f30 	.word	0x08007f30
 80008f0:	58020800 	.word	0x58020800
 80008f4:	58020400 	.word	0x58020400
 80008f8:	24000088 	.word	0x24000088
 80008fc:	08007f5c 	.word	0x08007f5c
 8000900:	08007f64 	.word	0x08007f64
 8000904:	08007f48 	.word	0x08007f48

08000908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800090e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000912:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000914:	bf00      	nop
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <main+0x9c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800091e:	2b00      	cmp	r3, #0
 8000920:	d004      	beq.n	800092c <main+0x24>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	1e5a      	subs	r2, r3, #1
 8000926:	607a      	str	r2, [r7, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	dcf4      	bgt.n	8000916 <main+0xe>
  if ( timeout < 0 )
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	da01      	bge.n	8000936 <main+0x2e>
  {
  Error_Handler();
 8000932:	f000 f9f7 	bl	8000d24 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000936:	f000 ff8b 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093a:	f000 f835 	bl	80009a8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <main+0x9c>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <main+0x9c>)
 8000946:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800094a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <main+0x9c>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800095c:	2000      	movs	r0, #0
 800095e:	f001 fb45 	bl	8001fec <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000962:	2100      	movs	r1, #0
 8000964:	2000      	movs	r0, #0
 8000966:	f001 fb5b 	bl	8002020 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800096a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800096e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000970:	bf00      	nop
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <main+0x9c>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800097a:	2b00      	cmp	r3, #0
 800097c:	d104      	bne.n	8000988 <main+0x80>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	1e5a      	subs	r2, r3, #1
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	dcf4      	bgt.n	8000972 <main+0x6a>
if ( timeout < 0 )
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
 800098c:	da01      	bge.n	8000992 <main+0x8a>
{
Error_Handler();
 800098e:	f000 f9c9 	bl	8000d24 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f000 f929 	bl	8000be8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000996:	f000 f885 	bl	8000aa4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800099a:	f000 f8d9 	bl	8000b50 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  runExample();
 800099e:	f7ff ff61 	bl	8000864 <runExample>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <main+0x9a>
 80009a4:	58024400 	.word	0x58024400

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b09c      	sub	sp, #112	; 0x70
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	224c      	movs	r2, #76	; 0x4c
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f006 fcdc 	bl	8007374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2220      	movs	r2, #32
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f006 fcd6 	bl	8007374 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80009c8:	2004      	movs	r0, #4
 80009ca:	f001 fb3d 	bl	8002048 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <SystemClock_Config+0xf4>)
 80009d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d6:	4a31      	ldr	r2, [pc, #196]	; (8000a9c <SystemClock_Config+0xf4>)
 80009d8:	f023 0301 	bic.w	r3, r3, #1
 80009dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <SystemClock_Config+0xf4>)
 80009e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <SystemClock_Config+0xf8>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009f0:	4a2b      	ldr	r2, [pc, #172]	; (8000aa0 <SystemClock_Config+0xf8>)
 80009f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <SystemClock_Config+0xf8>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a04:	bf00      	nop
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <SystemClock_Config+0xf8>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a12:	d1f8      	bne.n	8000a06 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a14:	2302      	movs	r3, #2
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1c:	2340      	movs	r3, #64	; 0x40
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a20:	2302      	movs	r3, #2
 8000a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a24:	2300      	movs	r3, #0
 8000a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000a2c:	2309      	movs	r3, #9
 8000a2e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a40:	2302      	movs	r3, #2
 8000a42:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000a44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a48:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 fb54 	bl	80020fc <HAL_RCC_OscConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a5a:	f000 f963 	bl	8000d24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5e:	233f      	movs	r3, #63	; 0x3f
 8000a60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a72:	2340      	movs	r3, #64	; 0x40
 8000a74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2101      	movs	r1, #1
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 ff94 	bl	80029b0 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000a8e:	f000 f949 	bl	8000d24 <Error_Handler>
  }
}
 8000a92:	bf00      	nop
 8000a94:	3770      	adds	r7, #112	; 0x70
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	58000400 	.word	0x58000400
 8000aa0:	58024800 	.word	0x58024800

08000aa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aa8:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000aaa:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <MX_SPI1_Init+0xa8>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000ab0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000abe:	2207      	movs	r2, #7
 8000ac0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000ad0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ad4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000ad8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000adc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000af8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000afc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_SPI1_Init+0xa4>)
 8000b36:	f004 f8f3 	bl	8004d20 <HAL_SPI_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000b40:	f000 f8f0 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	24000088 	.word	0x24000088
 8000b4c:	40013000 	.word	0x40013000

08000b50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b54:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b56:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <MX_USART3_UART_Init+0x94>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b8c:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b98:	4811      	ldr	r0, [pc, #68]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000b9a:	f005 f876 	bl	8005c8a <HAL_UART_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ba4:	f000 f8be 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ba8:	2100      	movs	r1, #0
 8000baa:	480d      	ldr	r0, [pc, #52]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000bac:	f006 f907 	bl	8006dbe <HAL_UARTEx_SetTxFifoThreshold>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bb6:	f000 f8b5 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4808      	ldr	r0, [pc, #32]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000bbe:	f006 f93c 	bl	8006e3a <HAL_UARTEx_SetRxFifoThreshold>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bc8:	f000 f8ac 	bl	8000d24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bcc:	4804      	ldr	r0, [pc, #16]	; (8000be0 <MX_USART3_UART_Init+0x90>)
 8000bce:	f006 f8bd 	bl	8006d4c <HAL_UARTEx_DisableFifoMode>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000bd8:	f000 f8a4 	bl	8000d24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	24000110 	.word	0x24000110
 8000be4:	40004800 	.word	0x40004800

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b46      	ldr	r3, [pc, #280]	; (8000d18 <MX_GPIO_Init+0x130>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	4a44      	ldr	r2, [pc, #272]	; (8000d18 <MX_GPIO_Init+0x130>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0e:	4b42      	ldr	r3, [pc, #264]	; (8000d18 <MX_GPIO_Init+0x130>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b3e      	ldr	r3, [pc, #248]	; (8000d18 <MX_GPIO_Init+0x130>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	4a3d      	ldr	r2, [pc, #244]	; (8000d18 <MX_GPIO_Init+0x130>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2c:	4b3a      	ldr	r3, [pc, #232]	; (8000d18 <MX_GPIO_Init+0x130>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b37      	ldr	r3, [pc, #220]	; (8000d18 <MX_GPIO_Init+0x130>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	4a35      	ldr	r2, [pc, #212]	; (8000d18 <MX_GPIO_Init+0x130>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4a:	4b33      	ldr	r3, [pc, #204]	; (8000d18 <MX_GPIO_Init+0x130>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c58:	4b2f      	ldr	r3, [pc, #188]	; (8000d18 <MX_GPIO_Init+0x130>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5e:	4a2e      	ldr	r2, [pc, #184]	; (8000d18 <MX_GPIO_Init+0x130>)
 8000c60:	f043 0308 	orr.w	r3, r3, #8
 8000c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <MX_GPIO_Init+0x130>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2140      	movs	r1, #64	; 0x40
 8000c7a:	4828      	ldr	r0, [pc, #160]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000c7c:	f001 f982 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c86:	4826      	ldr	r0, [pc, #152]	; (8000d20 <MX_GPIO_Init+0x138>)
 8000c88:	f001 f97c 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c92:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	481e      	ldr	r0, [pc, #120]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000ca4:	f000 ffa6 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4818      	ldr	r0, [pc, #96]	; (8000d20 <MX_GPIO_Init+0x138>)
 8000cc0:	f000 ff98 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000cc4:	2340      	movs	r3, #64	; 0x40
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4810      	ldr	r0, [pc, #64]	; (8000d1c <MX_GPIO_Init+0x134>)
 8000cdc:	f000 ff8a 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 8000ce0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4809      	ldr	r0, [pc, #36]	; (8000d20 <MX_GPIO_Init+0x138>)
 8000cfa:	f000 ff7b 	bl	8001bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	2028      	movs	r0, #40	; 0x28
 8000d04:	f000 ff41 	bl	8001b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d08:	2028      	movs	r0, #40	; 0x28
 8000d0a:	f000 ff58 	bl	8001bbe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0e:	bf00      	nop
 8000d10:	3728      	adds	r7, #40	; 0x28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	58024400 	.word	0x58024400
 8000d1c:	58020800 	.word	0x58020800
 8000d20:	58020400 	.word	0x58020400

08000d24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d28:	b672      	cpsid	i
}
 8000d2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <Error_Handler+0x8>
	...

08000d30 <csn_set>:

/*
 * Private functions
 */

void csn_set() {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000d34:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <csn_set+0x18>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <csn_set+0x1c>)
 8000d3a:	8811      	ldrh	r1, [r2, #0]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 f920 	bl	8001f84 <HAL_GPIO_WritePin>
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	240001a8 	.word	0x240001a8
 8000d4c:	240001ac 	.word	0x240001ac

08000d50 <csn_reset>:

void csn_reset() {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <csn_reset+0x18>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <csn_reset+0x1c>)
 8000d5a:	8811      	ldrh	r1, [r2, #0]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 f910 	bl	8001f84 <HAL_GPIO_WritePin>
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	240001a8 	.word	0x240001a8
 8000d6c:	240001ac 	.word	0x240001ac

08000d70 <ce_set>:

void ce_set() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <ce_set+0x18>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <ce_set+0x1c>)
 8000d7a:	8811      	ldrh	r1, [r2, #0]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 f900 	bl	8001f84 <HAL_GPIO_WritePin>
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	240001b0 	.word	0x240001b0
 8000d8c:	240001b4 	.word	0x240001b4

08000d90 <ce_reset>:

void ce_reset() {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <ce_reset+0x18>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <ce_reset+0x1c>)
 8000d9a:	8811      	ldrh	r1, [r2, #0]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 f8f0 	bl	8001f84 <HAL_GPIO_WritePin>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	240001b0 	.word	0x240001b0
 8000dac:	240001b4 	.word	0x240001b4

08000db0 <NRF_Init>:
 *
 * Main functions
 *
 */

NRF_Status NRF_Init(SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCSN, uint16_t PinCSN, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	80fb      	strh	r3, [r7, #6]
  HSPI = handle;
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <NRF_Init+0x48>)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6013      	str	r3, [r2, #0]
  NRF_CSN_Port = PortCSN;
 8000dc6:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <NRF_Init+0x4c>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	6013      	str	r3, [r2, #0]
  NRF_CSN_Pin = PinCSN;
 8000dcc:	4a0c      	ldr	r2, [pc, #48]	; (8000e00 <NRF_Init+0x50>)
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	8013      	strh	r3, [r2, #0]
  NRF_CE_Port = PortCE;
 8000dd2:	4a0c      	ldr	r2, [pc, #48]	; (8000e04 <NRF_Init+0x54>)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	6013      	str	r3, [r2, #0]
  NRF_CE_Pin = PinCE;
 8000dd8:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <NRF_Init+0x58>)
 8000dda:	8b3b      	ldrh	r3, [r7, #24]
 8000ddc:	8013      	strh	r3, [r2, #0]

  // Make sure CSN i pulled high
  csn_set();
 8000dde:	f7ff ffa7 	bl	8000d30 <csn_set>

  // Takes ~100ms from power on to start up
  HAL_Delay(100);
 8000de2:	2064      	movs	r0, #100	; 0x64
 8000de4:	f000 fdc6 	bl	8001974 <HAL_Delay>

  NRF_EnterMode(NRF_MODE_STANDBY1);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f000 f89f 	bl	8000f2c <NRF_EnterMode>

  return HAL_OK;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	240001a4 	.word	0x240001a4
 8000dfc:	240001a8 	.word	0x240001a8
 8000e00:	240001ac 	.word	0x240001ac
 8000e04:	240001b0 	.word	0x240001b0
 8000e08:	240001b4 	.word	0x240001b4

08000e0c <NRF_SendCommand>:

NRF_Status NRF_SendCommand(uint8_t cmd) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000e1a:	f7ff ff99 	bl	8000d50 <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <NRF_SendCommand+0x44>)
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	f107 020e 	add.w	r2, r7, #14
 8000e26:	1df9      	adds	r1, r7, #7
 8000e28:	230a      	movs	r3, #10
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f004 fc27 	bl	8005680 <HAL_SPI_TransmitReceive>
 8000e32:	4603      	mov	r3, r0
 8000e34:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <NRF_SendCommand+0x34>
    return ret;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	e002      	b.n	8000e46 <NRF_SendCommand+0x3a>
  }
  csn_set();
 8000e40:	f7ff ff76 	bl	8000d30 <csn_set>

  return ret;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	240001a4 	.word	0x240001a4

08000e54 <NRF_SendWriteCommand>:

NRF_Status NRF_SendWriteCommand(uint8_t cmd, uint8_t *write, uint8_t length) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	4613      	mov	r3, r2
 8000e62:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000e68:	f7ff ff72 	bl	8000d50 <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <NRF_SendWriteCommand+0x68>)
 8000e6e:	6818      	ldr	r0, [r3, #0]
 8000e70:	f107 020e 	add.w	r2, r7, #14
 8000e74:	1df9      	adds	r1, r7, #7
 8000e76:	230a      	movs	r3, #10
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f004 fc00 	bl	8005680 <HAL_SPI_TransmitReceive>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <NRF_SendWriteCommand+0x3a>
    return ret;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	e011      	b.n	8000eb2 <NRF_SendWriteCommand+0x5e>
  }
  ret = HAL_SPI_Transmit(HSPI, write, length, NRF_SPI_TIMEOUT);
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <NRF_SendWriteCommand+0x68>)
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	79bb      	ldrb	r3, [r7, #6]
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	230a      	movs	r3, #10
 8000e98:	6839      	ldr	r1, [r7, #0]
 8000e9a:	f004 f865 	bl	8004f68 <HAL_SPI_Transmit>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <NRF_SendWriteCommand+0x58>
    return ret;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	e002      	b.n	8000eb2 <NRF_SendWriteCommand+0x5e>
  }
  csn_set();
 8000eac:	f7ff ff40 	bl	8000d30 <csn_set>

  return ret;
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	240001a4 	.word	0x240001a4

08000ec0 <NRF_SendReadCommand>:

NRF_Status NRF_SendReadCommand(uint8_t cmd, uint8_t *read, uint8_t length) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af02      	add	r7, sp, #8
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000ed4:	f7ff ff3c 	bl	8000d50 <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <NRF_SendReadCommand+0x68>)
 8000eda:	6818      	ldr	r0, [r3, #0]
 8000edc:	f107 020e 	add.w	r2, r7, #14
 8000ee0:	1df9      	adds	r1, r7, #7
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f004 fbca 	bl	8005680 <HAL_SPI_TransmitReceive>
 8000eec:	4603      	mov	r3, r0
 8000eee:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK) {
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <NRF_SendReadCommand+0x3a>
    return ret;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	e011      	b.n	8000f1e <NRF_SendReadCommand+0x5e>
  }
  ret = HAL_SPI_Receive(HSPI, read, length, NRF_SPI_TIMEOUT);
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <NRF_SendReadCommand+0x68>)
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	79bb      	ldrb	r3, [r7, #6]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	230a      	movs	r3, #10
 8000f04:	6839      	ldr	r1, [r7, #0]
 8000f06:	f004 fa2b 	bl	8005360 <HAL_SPI_Receive>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK) {
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <NRF_SendReadCommand+0x58>
    return ret;
 8000f14:	7bfb      	ldrb	r3, [r7, #15]
 8000f16:	e002      	b.n	8000f1e <NRF_SendReadCommand+0x5e>
  }
  csn_set();
 8000f18:	f7ff ff0a 	bl	8000d30 <csn_set>

  return ret;
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	240001a4 	.word	0x240001a4

08000f2c <NRF_EnterMode>:
 *
 * Device control
 *
 */

NRF_Status NRF_EnterMode(uint8_t mode) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]

  switch(mode) {
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	dc2a      	bgt.n	8000f96 <NRF_EnterMode+0x6a>
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	da15      	bge.n	8000f70 <NRF_EnterMode+0x44>
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <NRF_EnterMode+0x22>
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d006      	beq.n	8000f5a <NRF_EnterMode+0x2e>
 8000f4c:	e023      	b.n	8000f96 <NRF_EnterMode+0x6a>
    case NRF_MODE_POWERDOWN:
      // Can come from any mode
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000f4e:	2101      	movs	r1, #1
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 f8a7 	bl	80010a4 <NRF_ResetRegisterBit>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
    case NRF_MODE_STANDBY1:
      // We expect to come from powerdown
      ce_reset();
 8000f5a:	f7ff ff19 	bl	8000d90 <ce_reset>
      ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000f5e:	2101      	movs	r1, #1
 8000f60:	2000      	movs	r0, #0
 8000f62:	f000 f86e 	bl	8001042 <NRF_SetRegisterBit>
 8000f66:	4603      	mov	r3, r0
 8000f68:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(2);
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f000 fd02 	bl	8001974 <HAL_Delay>
    case NRF_MODE_RX:
    case NRF_MODE_TX:
      // We expect to come from standby-I
      if (mode == NRF_MODE_TX) {
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d106      	bne.n	8000f84 <NRF_EnterMode+0x58>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000f76:	2100      	movs	r1, #0
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 f893 	bl	80010a4 <NRF_ResetRegisterBit>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e005      	b.n	8000f90 <NRF_EnterMode+0x64>
      } else {
        ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000f84:	2100      	movs	r1, #0
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 f85b 	bl	8001042 <NRF_SetRegisterBit>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
      }

      // Enter mode
      ce_set();
 8000f90:	f7ff feee 	bl	8000d70 <ce_set>
      break;
 8000f94:	e002      	b.n	8000f9c <NRF_EnterMode+0x70>
    default:
      ret = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	73fb      	strb	r3, [r7, #15]
      break;
 8000f9a:	bf00      	nop
  }

  return ret;
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <NRF_ReadPayload>:

NRF_Status NRF_WritePayload(uint8_t *payload, uint8_t length) {
  return NRF_SendWriteCommand(NRF_CMD_W_TX_PAYLOAD, payload, length);
}

NRF_Status NRF_ReadPayload(uint8_t *read, uint8_t length) {
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	70fb      	strb	r3, [r7, #3]
  return NRF_SendReadCommand(NRF_CMD_R_RX_PAYLOAD, read, length);
 8000fb2:	78fb      	ldrb	r3, [r7, #3]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	2061      	movs	r0, #97	; 0x61
 8000fba:	f7ff ff81 	bl	8000ec0 <NRF_SendReadCommand>
 8000fbe:	4603      	mov	r3, r0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <NRF_WriteAckPayload>:

NRF_Status NRF_WritePayloadNoAck(uint8_t *payload, uint8_t length) {
  return NRF_SendWriteCommand(NRF_CMD_W_TX_PAYLOAD_NO_ACK, payload, length);
}

NRF_Status NRF_WriteAckPayload(uint8_t *payload, uint8_t length) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	70fb      	strb	r3, [r7, #3]
  return NRF_SendWriteCommand(NRF_CMD_W_ACK_PAYLOAD, payload, length);
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	20a8      	movs	r0, #168	; 0xa8
 8000fdc:	f7ff ff3a 	bl	8000e54 <NRF_SendWriteCommand>
 8000fe0:	4603      	mov	r3, r0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <NRF_WriteRegister>:
 * Register helpers
 *
 */

/* Writing */
NRF_Status NRF_WriteRegister(uint8_t reg, uint8_t *write, uint8_t length) {
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	6039      	str	r1, [r7, #0]
 8000ff4:	71fb      	strb	r3, [r7, #7]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_REGISTER | reg, write, length);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	b2db      	uxtb	r3, r3
 8001002:	79ba      	ldrb	r2, [r7, #6]
 8001004:	6839      	ldr	r1, [r7, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ff24 	bl	8000e54 <NRF_SendWriteCommand>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <NRF_WriteRegisterByte>:

NRF_Status NRF_WriteRegisterByte(uint8_t reg, uint8_t byte) {
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	460a      	mov	r2, r1
 8001020:	71fb      	strb	r3, [r7, #7]
 8001022:	4613      	mov	r3, r2
 8001024:	71bb      	strb	r3, [r7, #6]
  uint8_t write = byte;
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	73fb      	strb	r3, [r7, #15]
  return NRF_WriteRegister(reg, &write, 1);
 800102a:	f107 010f 	add.w	r1, r7, #15
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2201      	movs	r2, #1
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff ffd9 	bl	8000fea <NRF_WriteRegister>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <NRF_SetRegisterBit>:

NRF_Status NRF_SetRegisterBit(uint8_t reg, uint8_t bit) {
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	460a      	mov	r2, r1
 800104c:	71fb      	strb	r3, [r7, #7]
 800104e:	4613      	mov	r3, r2
 8001050:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8001056:	2300      	movs	r3, #0
 8001058:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 800105a:	f107 010e 	add.w	r1, r7, #14
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2201      	movs	r2, #1
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f851 	bl	800110a <NRF_ReadRegister>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <NRF_SetRegisterBit+0x34>
    return ret;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	e012      	b.n	800109c <NRF_SetRegisterBit+0x5a>
  }
  cfg = cfg | (1 << bit);
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	2201      	movs	r2, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	b25a      	sxtb	r2, r3
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	b25b      	sxtb	r3, r3
 8001084:	4313      	orrs	r3, r2
 8001086:	b25b      	sxtb	r3, r3
 8001088:	b2db      	uxtb	r3, r3
 800108a:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 800108c:	f107 010e 	add.w	r1, r7, #14
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2201      	movs	r2, #1
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ffa8 	bl	8000fea <NRF_WriteRegister>
 800109a:	4603      	mov	r3, r0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <NRF_ResetRegisterBit>:

NRF_Status NRF_ResetRegisterBit(uint8_t reg, uint8_t bit) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	460a      	mov	r2, r1
 80010ae:	71fb      	strb	r3, [r7, #7]
 80010b0:	4613      	mov	r3, r2
 80010b2:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 80010bc:	f107 010e 	add.w	r1, r7, #14
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	2201      	movs	r2, #1
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f820 	bl	800110a <NRF_ReadRegister>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <NRF_ResetRegisterBit+0x34>
    return ret;
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	e014      	b.n	8001102 <NRF_ResetRegisterBit+0x5e>
  }
  cfg = cfg & ~(1 << bit);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	2201      	movs	r2, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	b25a      	sxtb	r2, r3
 80010e6:	7bbb      	ldrb	r3, [r7, #14]
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	4013      	ands	r3, r2
 80010ec:	b25b      	sxtb	r3, r3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 80010f2:	f107 010e 	add.w	r1, r7, #14
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2201      	movs	r2, #1
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff75 	bl	8000fea <NRF_WriteRegister>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <NRF_ReadRegister>:


/* Reading */
NRF_Status NRF_ReadRegister(uint8_t reg, uint8_t *read, uint8_t length) {
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	6039      	str	r1, [r7, #0]
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	4613      	mov	r3, r2
 8001118:	71bb      	strb	r3, [r7, #6]
  return NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, read, length);
 800111a:	79ba      	ldrb	r2, [r7, #6]
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	6839      	ldr	r1, [r7, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fecd 	bl	8000ec0 <NRF_SendReadCommand>
 8001126:	4603      	mov	r3, r0
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <NRF_ReadRegisterByte>:

uint8_t NRF_ReadRegisterByte(uint8_t reg) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
  uint8_t read;
  NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, &read, 1);
 800113a:	f107 010f 	add.w	r1, r7, #15
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2201      	movs	r2, #1
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff febc 	bl	8000ec0 <NRF_SendReadCommand>
  return read;
 8001148:	7bfb      	ldrb	r3, [r7, #15]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <NRF_ReadStatus>:

uint8_t NRF_ReadStatus() {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af02      	add	r7, sp, #8
  uint8_t status;
  uint8_t cmd = NRF_CMD_NOP;
 800115a:	23ff      	movs	r3, #255	; 0xff
 800115c:	71bb      	strb	r3, [r7, #6]

  csn_reset();
 800115e:	f7ff fdf7 	bl	8000d50 <csn_reset>
  HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <NRF_ReadStatus+0x30>)
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	1dfa      	adds	r2, r7, #7
 8001168:	1db9      	adds	r1, r7, #6
 800116a:	230a      	movs	r3, #10
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2301      	movs	r3, #1
 8001170:	f004 fa86 	bl	8005680 <HAL_SPI_TransmitReceive>
  csn_set();
 8001174:	f7ff fddc 	bl	8000d30 <csn_set>

  return status;
 8001178:	79fb      	ldrb	r3, [r7, #7]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	240001a4 	.word	0x240001a4

08001188 <NRF_Reset>:
  }

  return ret;
}

void NRF_Reset() {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
  // Reset state (goto standby-I)
  csn_set();
 800118e:	f7ff fdcf 	bl	8000d30 <csn_set>
  ce_reset();
 8001192:	f7ff fdfd 	bl	8000d90 <ce_reset>

  // Flush FIFOs
  NRF_EnterMode(NRF_MODE_TX);
 8001196:	2003      	movs	r0, #3
 8001198:	f7ff fec8 	bl	8000f2c <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_TX);
 800119c:	20e1      	movs	r0, #225	; 0xe1
 800119e:	f7ff fe35 	bl	8000e0c <NRF_SendCommand>
  ce_reset();
 80011a2:	f7ff fdf5 	bl	8000d90 <ce_reset>
  NRF_EnterMode(NRF_MODE_RX);
 80011a6:	2002      	movs	r0, #2
 80011a8:	f7ff fec0 	bl	8000f2c <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_RX);
 80011ac:	20e2      	movs	r0, #226	; 0xe2
 80011ae:	f7ff fe2d 	bl	8000e0c <NRF_SendCommand>
  ce_reset();
 80011b2:	f7ff fded 	bl	8000d90 <ce_reset>

  // Flush register
  NRF_WriteRegisterByte(NRF_REG_CONFIG,       0x0A);
 80011b6:	210a      	movs	r1, #10
 80011b8:	2000      	movs	r0, #0
 80011ba:	f7ff ff2c 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_AA,        0x3f);
 80011be:	213f      	movs	r1, #63	; 0x3f
 80011c0:	2001      	movs	r0, #1
 80011c2:	f7ff ff28 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_RXADDR,    0x03);
 80011c6:	2103      	movs	r1, #3
 80011c8:	2002      	movs	r0, #2
 80011ca:	f7ff ff24 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_AW,     0x03);
 80011ce:	2103      	movs	r1, #3
 80011d0:	2003      	movs	r0, #3
 80011d2:	f7ff ff20 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_RETR,   0x03);
 80011d6:	2103      	movs	r1, #3
 80011d8:	2004      	movs	r0, #4
 80011da:	f7ff ff1c 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_CH,        0x02);
 80011de:	2102      	movs	r1, #2
 80011e0:	2005      	movs	r0, #5
 80011e2:	f7ff ff18 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_SETUP,     0x0e);
 80011e6:	210e      	movs	r1, #14
 80011e8:	2006      	movs	r0, #6
 80011ea:	f7ff ff14 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_STATUS,       0x70); // clear flags
 80011ee:	2170      	movs	r1, #112	; 0x70
 80011f0:	2007      	movs	r0, #7
 80011f2:	f7ff ff10 	bl	8001016 <NRF_WriteRegisterByte>

  uint8_t address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80011f6:	4a2d      	ldr	r2, [pc, #180]	; (80012ac <NRF_Reset+0x124>)
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001200:	6018      	str	r0, [r3, #0]
 8001202:	3304      	adds	r3, #4
 8001204:	7019      	strb	r1, [r3, #0]
  uint8_t address2[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001206:	4a2a      	ldr	r2, [pc, #168]	; (80012b0 <NRF_Reset+0x128>)
 8001208:	463b      	mov	r3, r7
 800120a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120e:	6018      	str	r0, [r3, #0]
 8001210:	3304      	adds	r3, #4
 8001212:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	2205      	movs	r2, #5
 800121a:	4619      	mov	r1, r3
 800121c:	200a      	movs	r0, #10
 800121e:	f7ff fee4 	bl	8000fea <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P1, address2, 5);
 8001222:	463b      	mov	r3, r7
 8001224:	2205      	movs	r2, #5
 8001226:	4619      	mov	r1, r3
 8001228:	200b      	movs	r0, #11
 800122a:	f7ff fede 	bl	8000fea <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P2,   0xC3);
 800122e:	21c3      	movs	r1, #195	; 0xc3
 8001230:	200c      	movs	r0, #12
 8001232:	f7ff fef0 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P3,   0xC4);
 8001236:	21c4      	movs	r1, #196	; 0xc4
 8001238:	200d      	movs	r0, #13
 800123a:	f7ff feec 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P4,   0xC5);
 800123e:	21c5      	movs	r1, #197	; 0xc5
 8001240:	200e      	movs	r0, #14
 8001242:	f7ff fee8 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P5,   0xC6);
 8001246:	21c6      	movs	r1, #198	; 0xc6
 8001248:	200f      	movs	r0, #15
 800124a:	f7ff fee4 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	2205      	movs	r2, #5
 8001254:	4619      	mov	r1, r3
 8001256:	2010      	movs	r0, #16
 8001258:	f7ff fec7 	bl	8000fea <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,     0x00);
 800125c:	2100      	movs	r1, #0
 800125e:	2011      	movs	r0, #17
 8001260:	f7ff fed9 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P1,     0x00);
 8001264:	2100      	movs	r1, #0
 8001266:	2012      	movs	r0, #18
 8001268:	f7ff fed5 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P2,     0x00);
 800126c:	2100      	movs	r1, #0
 800126e:	2013      	movs	r0, #19
 8001270:	f7ff fed1 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P3,     0x00);
 8001274:	2100      	movs	r1, #0
 8001276:	2014      	movs	r0, #20
 8001278:	f7ff fecd 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P4,     0x00);
 800127c:	2100      	movs	r1, #0
 800127e:	2015      	movs	r0, #21
 8001280:	f7ff fec9 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P5,     0x00);
 8001284:	2100      	movs	r1, #0
 8001286:	2016      	movs	r0, #22
 8001288:	f7ff fec5 	bl	8001016 <NRF_WriteRegisterByte>

  NRF_WriteRegisterByte(NRF_REG_FIFO_STATUS,  0x00);
 800128c:	2100      	movs	r1, #0
 800128e:	2017      	movs	r0, #23
 8001290:	f7ff fec1 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_DYNPD,        0x00);
 8001294:	2100      	movs	r1, #0
 8001296:	201c      	movs	r0, #28
 8001298:	f7ff febd 	bl	8001016 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_FEATURE,      0x00);
 800129c:	2100      	movs	r1, #0
 800129e:	201d      	movs	r0, #29
 80012a0:	f7ff feb9 	bl	8001016 <NRF_WriteRegisterByte>
}
 80012a4:	bf00      	nop
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	08007f78 	.word	0x08007f78
 80012b0:	08007f80 	.word	0x08007f80

080012b4 <NRF_PrintStatus>:

void NRF_PrintStatus() {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
  uint8_t status = NRF_ReadStatus();
 80012ba:	f7ff ff4b 	bl	8001154 <NRF_ReadStatus>
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]

  printf("Status register: %02X\r\n", status);
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4825      	ldr	r0, [pc, #148]	; (800135c <NRF_PrintStatus+0xa8>)
 80012c8:	f005 ff06 	bl	80070d8 <iprintf>
  printf("CE: %d\r\n", HAL_GPIO_ReadPin(NRF_CE_Port, NRF_CE_Pin));
 80012cc:	4b24      	ldr	r3, [pc, #144]	; (8001360 <NRF_PrintStatus+0xac>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a24      	ldr	r2, [pc, #144]	; (8001364 <NRF_PrintStatus+0xb0>)
 80012d2:	8812      	ldrh	r2, [r2, #0]
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 fe3c 	bl	8001f54 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	4619      	mov	r1, r3
 80012e0:	4821      	ldr	r0, [pc, #132]	; (8001368 <NRF_PrintStatus+0xb4>)
 80012e2:	f005 fef9 	bl	80070d8 <iprintf>
  printf("CSN: %d\r\n", HAL_GPIO_ReadPin(NRF_CSN_Port, NRF_CSN_Pin));
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <NRF_PrintStatus+0xb8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a21      	ldr	r2, [pc, #132]	; (8001370 <NRF_PrintStatus+0xbc>)
 80012ec:	8812      	ldrh	r2, [r2, #0]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fe2f 	bl	8001f54 <HAL_GPIO_ReadPin>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4619      	mov	r1, r3
 80012fa:	481e      	ldr	r0, [pc, #120]	; (8001374 <NRF_PrintStatus+0xc0>)
 80012fc:	f005 feec 	bl	80070d8 <iprintf>
  printf("TX_FULL:  %1X\r\n", status & (1<<STATUS_BIT_TX_FULL));
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	4619      	mov	r1, r3
 8001308:	481b      	ldr	r0, [pc, #108]	; (8001378 <NRF_PrintStatus+0xc4>)
 800130a:	f005 fee5 	bl	80070d8 <iprintf>
  printf("RX_P_NO:  %1X\r\n", (status & (0x3<<STATUS_BIT_RX_P_NO)) >> 1);
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	105b      	asrs	r3, r3, #1
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	4619      	mov	r1, r3
 8001318:	4818      	ldr	r0, [pc, #96]	; (800137c <NRF_PrintStatus+0xc8>)
 800131a:	f005 fedd 	bl	80070d8 <iprintf>
  printf("MAX_RT:   %1X\r\n", (status & (1<<STATUS_BIT_MAX_RT))    >> 4);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	111b      	asrs	r3, r3, #4
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	4619      	mov	r1, r3
 8001328:	4815      	ldr	r0, [pc, #84]	; (8001380 <NRF_PrintStatus+0xcc>)
 800132a:	f005 fed5 	bl	80070d8 <iprintf>
  printf("TX_DS:    %1X\r\n", (status & (1<<STATUS_BIT_TX_DS))     >> 5);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	115b      	asrs	r3, r3, #5
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	4619      	mov	r1, r3
 8001338:	4812      	ldr	r0, [pc, #72]	; (8001384 <NRF_PrintStatus+0xd0>)
 800133a:	f005 fecd 	bl	80070d8 <iprintf>
  printf("RX_DR:    %1X\r\n", (status & (1<<STATUS_BIT_RX_DR))     >> 6);
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	119b      	asrs	r3, r3, #6
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	4619      	mov	r1, r3
 8001348:	480f      	ldr	r0, [pc, #60]	; (8001388 <NRF_PrintStatus+0xd4>)
 800134a:	f005 fec5 	bl	80070d8 <iprintf>
  printf("\r\n");
 800134e:	480f      	ldr	r0, [pc, #60]	; (800138c <NRF_PrintStatus+0xd8>)
 8001350:	f005 ff30 	bl	80071b4 <puts>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	08007f88 	.word	0x08007f88
 8001360:	240001b0 	.word	0x240001b0
 8001364:	240001b4 	.word	0x240001b4
 8001368:	08007fa0 	.word	0x08007fa0
 800136c:	240001a8 	.word	0x240001a8
 8001370:	240001ac 	.word	0x240001ac
 8001374:	08007fac 	.word	0x08007fac
 8001378:	08007fb8 	.word	0x08007fb8
 800137c:	08007fc8 	.word	0x08007fc8
 8001380:	08007fd8 	.word	0x08007fd8
 8001384:	08007fe8 	.word	0x08007fe8
 8001388:	08007ff8 	.word	0x08007ff8
 800138c:	08008008 	.word	0x08008008

08001390 <NRF_PrintFIFOStatus>:

void NRF_PrintFIFOStatus() {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  uint8_t reg = NRF_ReadRegisterByte(NRF_REG_FIFO_STATUS);
 8001396:	2017      	movs	r0, #23
 8001398:	f7ff feca 	bl	8001130 <NRF_ReadRegisterByte>
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]

  printf("FIFO status register: %02X\r\n", reg);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	4619      	mov	r1, r3
 80013a4:	4818      	ldr	r0, [pc, #96]	; (8001408 <NRF_PrintFIFOStatus+0x78>)
 80013a6:	f005 fe97 	bl	80070d8 <iprintf>
  printf("RX_EMPTY:   %2X\r\n", reg &  (1<<FIFO_STATUS_BIT_RX_EMPTY));
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	4619      	mov	r1, r3
 80013b2:	4816      	ldr	r0, [pc, #88]	; (800140c <NRF_PrintFIFOStatus+0x7c>)
 80013b4:	f005 fe90 	bl	80070d8 <iprintf>
  printf("RX_FULL:    %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_RX_FULL))     >> 1);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	105b      	asrs	r3, r3, #1
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	4619      	mov	r1, r3
 80013c2:	4813      	ldr	r0, [pc, #76]	; (8001410 <NRF_PrintFIFOStatus+0x80>)
 80013c4:	f005 fe88 	bl	80070d8 <iprintf>
  printf("TX_EMPTY:   %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_EMPTY))    >> 4);
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	111b      	asrs	r3, r3, #4
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	4810      	ldr	r0, [pc, #64]	; (8001414 <NRF_PrintFIFOStatus+0x84>)
 80013d4:	f005 fe80 	bl	80070d8 <iprintf>
  printf("TX_FULL:    %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_FULL))     >> 5);
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	115b      	asrs	r3, r3, #5
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	4619      	mov	r1, r3
 80013e2:	480d      	ldr	r0, [pc, #52]	; (8001418 <NRF_PrintFIFOStatus+0x88>)
 80013e4:	f005 fe78 	bl	80070d8 <iprintf>
  printf("TX_REUSE:   %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_REUSE))    >> 6);
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	119b      	asrs	r3, r3, #6
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	4619      	mov	r1, r3
 80013f2:	480a      	ldr	r0, [pc, #40]	; (800141c <NRF_PrintFIFOStatus+0x8c>)
 80013f4:	f005 fe70 	bl	80070d8 <iprintf>
  printf("\r\n");
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <NRF_PrintFIFOStatus+0x90>)
 80013fa:	f005 fedb 	bl	80071b4 <puts>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	0800800c 	.word	0x0800800c
 800140c:	0800802c 	.word	0x0800802c
 8001410:	08008040 	.word	0x08008040
 8001414:	08008054 	.word	0x08008054
 8001418:	08008068 	.word	0x08008068
 800141c:	0800807c 	.word	0x0800807c
 8001420:	08008008 	.word	0x08008008

08001424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_MspInit+0x30>)
 800142c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001430:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_MspInit+0x30>)
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_MspInit+0x30>)
 800143c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	58024400 	.word	0x58024400

08001458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b0bc      	sub	sp, #240	; 0xf0
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001470:	f107 0318 	add.w	r3, r7, #24
 8001474:	22c0      	movs	r2, #192	; 0xc0
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f005 ff7b 	bl	8007374 <memset>
  if(hspi->Instance==SPI1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a38      	ldr	r2, [pc, #224]	; (8001564 <HAL_SPI_MspInit+0x10c>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d168      	bne.n	800155a <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001488:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001494:	2300      	movs	r3, #0
 8001496:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001498:	f107 0318 	add.w	r3, r7, #24
 800149c:	4618      	mov	r0, r3
 800149e:	f001 fe13 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80014a8:	f7ff fc3c 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ac:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <HAL_SPI_MspInit+0x110>)
 80014ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014b2:	4a2d      	ldr	r2, [pc, #180]	; (8001568 <HAL_SPI_MspInit+0x110>)
 80014b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <HAL_SPI_MspInit+0x110>)
 80014be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b27      	ldr	r3, [pc, #156]	; (8001568 <HAL_SPI_MspInit+0x110>)
 80014cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d0:	4a25      	ldr	r2, [pc, #148]	; (8001568 <HAL_SPI_MspInit+0x110>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_SPI_MspInit+0x110>)
 80014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_SPI_MspInit+0x110>)
 80014ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ee:	4a1e      	ldr	r2, [pc, #120]	; (8001568 <HAL_SPI_MspInit+0x110>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_SPI_MspInit+0x110>)
 80014fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MISO_Pin;
 8001506:	2360      	movs	r3, #96	; 0x60
 8001508:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800151e:	2305      	movs	r3, #5
 8001520:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001528:	4619      	mov	r1, r3
 800152a:	4810      	ldr	r0, [pc, #64]	; (800156c <HAL_SPI_MspInit+0x114>)
 800152c:	f000 fb62 	bl	8001bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MOSI_Pin;
 8001530:	2320      	movs	r3, #32
 8001532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001548:	2305      	movs	r3, #5
 800154a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(NRF_MOSI_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001552:	4619      	mov	r1, r3
 8001554:	4806      	ldr	r0, [pc, #24]	; (8001570 <HAL_SPI_MspInit+0x118>)
 8001556:	f000 fb4d 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800155a:	bf00      	nop
 800155c:	37f0      	adds	r7, #240	; 0xf0
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40013000 	.word	0x40013000
 8001568:	58024400 	.word	0x58024400
 800156c:	58020000 	.word	0x58020000
 8001570:	58020400 	.word	0x58020400

08001574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0ba      	sub	sp, #232	; 0xe8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	22c0      	movs	r2, #192	; 0xc0
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f005 feed 	bl	8007374 <memset>
  if(huart->Instance==USART3)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a27      	ldr	r2, [pc, #156]	; (800163c <HAL_UART_MspInit+0xc8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d146      	bne.n	8001632 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015a4:	f04f 0202 	mov.w	r2, #2
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b6:	f107 0310 	add.w	r3, r7, #16
 80015ba:	4618      	mov	r0, r3
 80015bc:	f001 fd84 	bl	80030c8 <HAL_RCCEx_PeriphCLKConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80015c6:	f7ff fbad 	bl	8000d24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_UART_MspInit+0xcc>)
 80015cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015d0:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <HAL_UART_MspInit+0xcc>)
 80015d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_UART_MspInit+0xcc>)
 80015dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_UART_MspInit+0xcc>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ee:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_UART_MspInit+0xcc>)
 80015f0:	f043 0308 	orr.w	r3, r3, #8
 80015f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_UART_MspInit+0xcc>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001606:	f44f 7340 	mov.w	r3, #768	; 0x300
 800160a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001620:	2307      	movs	r3, #7
 8001622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001626:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_UART_MspInit+0xd0>)
 800162e:	f000 fae1 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	37e8      	adds	r7, #232	; 0xe8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40004800 	.word	0x40004800
 8001640:	58024400 	.word	0x58024400
 8001644:	58020c00 	.word	0x58020c00

08001648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800164c:	e7fe      	b.n	800164c <NMI_Handler+0x4>

0800164e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001652:	e7fe      	b.n	8001652 <HardFault_Handler+0x4>

08001654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001658:	e7fe      	b.n	8001658 <MemManage_Handler+0x4>

0800165a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165e:	e7fe      	b.n	800165e <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	e7fe      	b.n	8001664 <UsageFault_Handler+0x4>

08001666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001694:	f000 f94e 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_USER_Pin);
 80016a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016a4:	f000 fc87 	bl	8001fb6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 80016a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016ac:	f000 fc83 	bl	8001fb6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e00a      	b.n	80016dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016c6:	f3af 8000 	nop.w
 80016ca:	4601      	mov	r1, r0
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	60ba      	str	r2, [r7, #8]
 80016d2:	b2ca      	uxtb	r2, r1
 80016d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf0      	blt.n	80016c6 <_read+0x12>
  }

  return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e009      	b.n	8001714 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	60ba      	str	r2, [r7, #8]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff f84d 	bl	80007a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	429a      	cmp	r2, r3
 800171a:	dbf1      	blt.n	8001700 <_write+0x12>
  }
  return len;
 800171c:	687b      	ldr	r3, [r7, #4]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <_close>:

int _close(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800174e:	605a      	str	r2, [r3, #4]
  return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_isatty>:

int _isatty(int file)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <_sbrk+0x5c>)
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <_sbrk+0x60>)
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <_sbrk+0x64>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <_sbrk+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d207      	bcs.n	80017d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c0:	f005 fe26 	bl	8007410 <__errno>
 80017c4:	4603      	mov	r3, r0
 80017c6:	220c      	movs	r2, #12
 80017c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ce:	e009      	b.n	80017e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <_sbrk+0x64>)
 80017e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	24080000 	.word	0x24080000
 80017f0:	00000400 	.word	0x00000400
 80017f4:	240001b8 	.word	0x240001b8
 80017f8:	24000310 	.word	0x24000310

080017fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001834 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001800:	f7fe ff3c 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001806:	490d      	ldr	r1, [pc, #52]	; (800183c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001808:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800181c:	4c0a      	ldr	r4, [pc, #40]	; (8001848 <LoopFillZerobss+0x22>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182a:	f005 fdf7 	bl	800741c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182e:	f7ff f86b 	bl	8000908 <main>
  bx  lr
 8001832:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001834:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001838:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800183c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001840:	0800810c 	.word	0x0800810c
  ldr r2, =_sbss
 8001844:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001848:	2400030c 	.word	0x2400030c

0800184c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC3_IRQHandler>
	...

08001850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001856:	2003      	movs	r0, #3
 8001858:	f000 f98c 	bl	8001b74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800185c:	f001 fa5e 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8001860:	4602      	mov	r2, r0
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <HAL_Init+0x68>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	0a1b      	lsrs	r3, r3, #8
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	4913      	ldr	r1, [pc, #76]	; (80018bc <HAL_Init+0x6c>)
 800186e:	5ccb      	ldrb	r3, [r1, r3]
 8001870:	f003 031f 	and.w	r3, r3, #31
 8001874:	fa22 f303 	lsr.w	r3, r2, r3
 8001878:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_Init+0x68>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <HAL_Init+0x6c>)
 8001884:	5cd3      	ldrb	r3, [r2, r3]
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	fa22 f303 	lsr.w	r3, r2, r3
 8001890:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <HAL_Init+0x70>)
 8001892:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001894:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <HAL_Init+0x74>)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800189a:	200f      	movs	r0, #15
 800189c:	f000 f814 	bl	80018c8 <HAL_InitTick>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e002      	b.n	80018b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018aa:	f7ff fdbb 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	58024400 	.word	0x58024400
 80018bc:	08008090 	.word	0x08008090
 80018c0:	24000004 	.word	0x24000004
 80018c4:	24000000 	.word	0x24000000

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_InitTick+0x60>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e021      	b.n	8001920 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_InitTick+0x64>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <HAL_InitTick+0x60>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	4619      	mov	r1, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 f971 	bl	8001bda <HAL_SYSTICK_Config>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e00e      	b.n	8001920 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d80a      	bhi.n	800191e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001910:	f000 f93b 	bl	8001b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <HAL_InitTick+0x68>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
 800191c:	e000      	b.n	8001920 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2400000c 	.word	0x2400000c
 800192c:	24000000 	.word	0x24000000
 8001930:	24000008 	.word	0x24000008

08001934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_IncTick+0x20>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x24>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
 8001944:	4a04      	ldr	r2, [pc, #16]	; (8001958 <HAL_IncTick+0x24>)
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	2400000c 	.word	0x2400000c
 8001958:	240001bc 	.word	0x240001bc

0800195c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return uwTick;
 8001960:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_GetTick+0x14>)
 8001962:	681b      	ldr	r3, [r3, #0]
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	240001bc 	.word	0x240001bc

08001974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff ffee 	bl	800195c <HAL_GetTick>
 8001980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800198c:	d005      	beq.n	800199a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_Delay+0x44>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800199a:	bf00      	nop
 800199c:	f7ff ffde 	bl	800195c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d8f7      	bhi.n	800199c <HAL_Delay+0x28>
  {
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2400000c 	.word	0x2400000c

080019bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_GetREVID+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	0c1b      	lsrs	r3, r3, #16
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	5c001000 	.word	0x5c001000

080019d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <__NVIC_SetPriorityGrouping+0x40>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f0:	4013      	ands	r3, r2
 80019f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <__NVIC_SetPriorityGrouping+0x44>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <__NVIC_SetPriorityGrouping+0x40>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00
 8001a18:	05fa0000 	.word	0x05fa0000

08001a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a20:	4b04      	ldr	r3, [pc, #16]	; (8001a34 <__NVIC_GetPriorityGrouping+0x18>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	f003 0307 	and.w	r3, r3, #7
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db0b      	blt.n	8001a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4a:	88fb      	ldrh	r3, [r7, #6]
 8001a4c:	f003 021f 	and.w	r2, r3, #31
 8001a50:	4907      	ldr	r1, [pc, #28]	; (8001a70 <__NVIC_EnableIRQ+0x38>)
 8001a52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a56:	095b      	lsrs	r3, r3, #5
 8001a58:	2001      	movs	r0, #1
 8001a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	; (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	; 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b40:	d301      	bcc.n	8001b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b42:	2301      	movs	r3, #1
 8001b44:	e00f      	b.n	8001b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <SysTick_Config+0x40>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4e:	210f      	movs	r1, #15
 8001b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b54:	f7ff ff8e 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b58:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <SysTick_Config+0x40>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <SysTick_Config+0x40>)
 8001b60:	2207      	movs	r2, #7
 8001b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	e000e010 	.word	0xe000e010

08001b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff29 	bl	80019d4 <__NVIC_SetPriorityGrouping>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	4603      	mov	r3, r0
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
 8001b96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff40 	bl	8001a1c <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff90 	bl	8001ac8 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5f 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff33 	bl	8001a38 <__NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffa4 	bl	8001b30 <SysTick_Config>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	; 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c02:	4b89      	ldr	r3, [pc, #548]	; (8001e28 <HAL_GPIO_Init+0x234>)
 8001c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c06:	e194      	b.n	8001f32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 8186 	beq.w	8001f2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d005      	beq.n	8001c38 <HAL_GPIO_Init+0x44>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d130      	bne.n	8001c9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c6e:	2201      	movs	r2, #1
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	091b      	lsrs	r3, r3, #4
 8001c84:	f003 0201 	and.w	r2, r3, #1
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d017      	beq.n	8001cd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d123      	bne.n	8001d2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	08da      	lsrs	r2, r3, #3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3208      	adds	r2, #8
 8001cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	08da      	lsrs	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3208      	adds	r2, #8
 8001d24:	69b9      	ldr	r1, [r7, #24]
 8001d26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0203 	and.w	r2, r3, #3
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80e0 	beq.w	8001f2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <HAL_GPIO_Init+0x238>)
 8001d6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d72:	4a2e      	ldr	r2, [pc, #184]	; (8001e2c <HAL_GPIO_Init+0x238>)
 8001d74:	f043 0302 	orr.w	r3, r3, #2
 8001d78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_GPIO_Init+0x238>)
 8001d7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d8a:	4a29      	ldr	r2, [pc, #164]	; (8001e30 <HAL_GPIO_Init+0x23c>)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	089b      	lsrs	r3, r3, #2
 8001d90:	3302      	adds	r3, #2
 8001d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	220f      	movs	r2, #15
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a20      	ldr	r2, [pc, #128]	; (8001e34 <HAL_GPIO_Init+0x240>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d052      	beq.n	8001e5c <HAL_GPIO_Init+0x268>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <HAL_GPIO_Init+0x244>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d031      	beq.n	8001e22 <HAL_GPIO_Init+0x22e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a1e      	ldr	r2, [pc, #120]	; (8001e3c <HAL_GPIO_Init+0x248>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d02b      	beq.n	8001e1e <HAL_GPIO_Init+0x22a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_GPIO_Init+0x24c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d025      	beq.n	8001e1a <HAL_GPIO_Init+0x226>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <HAL_GPIO_Init+0x250>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d01f      	beq.n	8001e16 <HAL_GPIO_Init+0x222>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <HAL_GPIO_Init+0x254>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d019      	beq.n	8001e12 <HAL_GPIO_Init+0x21e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_GPIO_Init+0x258>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0x21a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <HAL_GPIO_Init+0x25c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00d      	beq.n	8001e0a <HAL_GPIO_Init+0x216>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <HAL_GPIO_Init+0x260>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d007      	beq.n	8001e06 <HAL_GPIO_Init+0x212>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_GPIO_Init+0x264>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_GPIO_Init+0x20e>
 8001dfe:	2309      	movs	r3, #9
 8001e00:	e02d      	b.n	8001e5e <HAL_GPIO_Init+0x26a>
 8001e02:	230a      	movs	r3, #10
 8001e04:	e02b      	b.n	8001e5e <HAL_GPIO_Init+0x26a>
 8001e06:	2308      	movs	r3, #8
 8001e08:	e029      	b.n	8001e5e <HAL_GPIO_Init+0x26a>
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e027      	b.n	8001e5e <HAL_GPIO_Init+0x26a>
 8001e0e:	2306      	movs	r3, #6
 8001e10:	e025      	b.n	8001e5e <HAL_GPIO_Init+0x26a>
 8001e12:	2305      	movs	r3, #5
 8001e14:	e023      	b.n	8001e5e <HAL_GPIO_Init+0x26a>
 8001e16:	2304      	movs	r3, #4
 8001e18:	e021      	b.n	8001e5e <HAL_GPIO_Init+0x26a>
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e01f      	b.n	8001e5e <HAL_GPIO_Init+0x26a>
 8001e1e:	2302      	movs	r3, #2
 8001e20:	e01d      	b.n	8001e5e <HAL_GPIO_Init+0x26a>
 8001e22:	2301      	movs	r3, #1
 8001e24:	e01b      	b.n	8001e5e <HAL_GPIO_Init+0x26a>
 8001e26:	bf00      	nop
 8001e28:	58000080 	.word	0x58000080
 8001e2c:	58024400 	.word	0x58024400
 8001e30:	58000400 	.word	0x58000400
 8001e34:	58020000 	.word	0x58020000
 8001e38:	58020400 	.word	0x58020400
 8001e3c:	58020800 	.word	0x58020800
 8001e40:	58020c00 	.word	0x58020c00
 8001e44:	58021000 	.word	0x58021000
 8001e48:	58021400 	.word	0x58021400
 8001e4c:	58021800 	.word	0x58021800
 8001e50:	58021c00 	.word	0x58021c00
 8001e54:	58022000 	.word	0x58022000
 8001e58:	58022400 	.word	0x58022400
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	f002 0203 	and.w	r2, r2, #3
 8001e64:	0092      	lsls	r2, r2, #2
 8001e66:	4093      	lsls	r3, r2
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e6e:	4938      	ldr	r1, [pc, #224]	; (8001f50 <HAL_GPIO_Init+0x35c>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f47f ae63 	bne.w	8001c08 <HAL_GPIO_Init+0x14>
  }
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	3724      	adds	r7, #36	; 0x24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	58000400 	.word	0x58000400

08001f54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	887b      	ldrh	r3, [r7, #2]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e001      	b.n	8001f76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f72:	2300      	movs	r3, #0
 8001f74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	619a      	str	r2, [r3, #24]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fbf5 	bl	80007cc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001ff4:	4a08      	ldr	r2, [pc, #32]	; (8002018 <HAL_HSEM_FastTake+0x2c>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3320      	adds	r3, #32
 8001ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ffe:	4a07      	ldr	r2, [pc, #28]	; (800201c <HAL_HSEM_FastTake+0x30>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d101      	bne.n	8002008 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	e000      	b.n	800200a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	58026400 	.word	0x58026400
 800201c:	80000300 	.word	0x80000300

08002020 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800202a:	4906      	ldr	r1, [pc, #24]	; (8002044 <HAL_HSEM_Release+0x24>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	58026400 	.word	0x58026400

08002048 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	2b06      	cmp	r3, #6
 800205a:	d00a      	beq.n	8002072 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800205c:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	429a      	cmp	r2, r3
 8002068:	d001      	beq.n	800206e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e040      	b.n	80020f0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	e03e      	b.n	80020f0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002072:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800207a:	491f      	ldr	r1, [pc, #124]	; (80020f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4313      	orrs	r3, r2
 8002080:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002082:	f7ff fc6b 	bl	800195c <HAL_GetTick>
 8002086:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002088:	e009      	b.n	800209e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800208a:	f7ff fc67 	bl	800195c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002098:	d901      	bls.n	800209e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e028      	b.n	80020f0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020aa:	d1ee      	bne.n	800208a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b1e      	cmp	r3, #30
 80020b0:	d008      	beq.n	80020c4 <HAL_PWREx_ConfigSupply+0x7c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b2e      	cmp	r3, #46	; 0x2e
 80020b6:	d005      	beq.n	80020c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b1d      	cmp	r3, #29
 80020bc:	d002      	beq.n	80020c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b2d      	cmp	r3, #45	; 0x2d
 80020c2:	d114      	bne.n	80020ee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80020c4:	f7ff fc4a 	bl	800195c <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80020ca:	e009      	b.n	80020e0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020cc:	f7ff fc46 	bl	800195c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020da:	d901      	bls.n	80020e0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e007      	b.n	80020f0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ec:	d1ee      	bne.n	80020cc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	58024800 	.word	0x58024800

080020fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08c      	sub	sp, #48	; 0x30
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	f000 bc48 	b.w	80029a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8088 	beq.w	800222e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211e:	4b99      	ldr	r3, [pc, #612]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002128:	4b96      	ldr	r3, [pc, #600]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	2b10      	cmp	r3, #16
 8002132:	d007      	beq.n	8002144 <HAL_RCC_OscConfig+0x48>
 8002134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002136:	2b18      	cmp	r3, #24
 8002138:	d111      	bne.n	800215e <HAL_RCC_OscConfig+0x62>
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d10c      	bne.n	800215e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	4b8f      	ldr	r3, [pc, #572]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d06d      	beq.n	800222c <HAL_RCC_OscConfig+0x130>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d169      	bne.n	800222c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	f000 bc21 	b.w	80029a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x7a>
 8002168:	4b86      	ldr	r3, [pc, #536]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a85      	ldr	r2, [pc, #532]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800216e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002172:	6013      	str	r3, [r2, #0]
 8002174:	e02e      	b.n	80021d4 <HAL_RCC_OscConfig+0xd8>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x9c>
 800217e:	4b81      	ldr	r3, [pc, #516]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a80      	ldr	r2, [pc, #512]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b7e      	ldr	r3, [pc, #504]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a7d      	ldr	r2, [pc, #500]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e01d      	b.n	80021d4 <HAL_RCC_OscConfig+0xd8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a0:	d10c      	bne.n	80021bc <HAL_RCC_OscConfig+0xc0>
 80021a2:	4b78      	ldr	r3, [pc, #480]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a77      	ldr	r2, [pc, #476]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	4b75      	ldr	r3, [pc, #468]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a74      	ldr	r2, [pc, #464]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	e00b      	b.n	80021d4 <HAL_RCC_OscConfig+0xd8>
 80021bc:	4b71      	ldr	r3, [pc, #452]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a70      	ldr	r2, [pc, #448]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b6e      	ldr	r3, [pc, #440]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a6d      	ldr	r2, [pc, #436]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7ff fbbe 	bl	800195c <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7ff fbba 	bl	800195c <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e3d4      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0xe8>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7ff fbaa 	bl	800195c <HAL_GetTick>
 8002208:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7ff fba6 	bl	800195c <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e3c0      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800221e:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x110>
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80ca 	beq.w	80023d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223c:	4b51      	ldr	r3, [pc, #324]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002244:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002246:	4b4f      	ldr	r3, [pc, #316]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d007      	beq.n	8002262 <HAL_RCC_OscConfig+0x166>
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	2b18      	cmp	r3, #24
 8002256:	d156      	bne.n	8002306 <HAL_RCC_OscConfig+0x20a>
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d151      	bne.n	8002306 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002262:	4b48      	ldr	r3, [pc, #288]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_RCC_OscConfig+0x17e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e392      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800227a:	4b42      	ldr	r3, [pc, #264]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 0219 	bic.w	r2, r3, #25
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	493f      	ldr	r1, [pc, #252]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7ff fb66 	bl	800195c <HAL_GetTick>
 8002290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002294:	f7ff fb62 	bl	800195c <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e37c      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022a6:	4b37      	ldr	r3, [pc, #220]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0304 	and.w	r3, r3, #4
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b2:	f7ff fb83 	bl	80019bc <HAL_GetREVID>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80022bc:	4293      	cmp	r3, r2
 80022be:	d817      	bhi.n	80022f0 <HAL_RCC_OscConfig+0x1f4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b40      	cmp	r3, #64	; 0x40
 80022c6:	d108      	bne.n	80022da <HAL_RCC_OscConfig+0x1de>
 80022c8:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80022d0:	4a2c      	ldr	r2, [pc, #176]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80022d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d8:	e07a      	b.n	80023d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022da:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	031b      	lsls	r3, r3, #12
 80022e8:	4926      	ldr	r1, [pc, #152]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ee:	e06f      	b.n	80023d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f0:	4b24      	ldr	r3, [pc, #144]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	061b      	lsls	r3, r3, #24
 80022fe:	4921      	ldr	r1, [pc, #132]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002304:	e064      	b.n	80023d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d047      	beq.n	800239e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800230e:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 0219 	bic.w	r2, r3, #25
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	491a      	ldr	r1, [pc, #104]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7ff fb1c 	bl	800195c <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002328:	f7ff fb18 	bl	800195c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e332      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800233a:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002346:	f7ff fb39 	bl	80019bc <HAL_GetREVID>
 800234a:	4603      	mov	r3, r0
 800234c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002350:	4293      	cmp	r3, r2
 8002352:	d819      	bhi.n	8002388 <HAL_RCC_OscConfig+0x28c>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	2b40      	cmp	r3, #64	; 0x40
 800235a:	d108      	bne.n	800236e <HAL_RCC_OscConfig+0x272>
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002364:	4a07      	ldr	r2, [pc, #28]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800236a:	6053      	str	r3, [r2, #4]
 800236c:	e030      	b.n	80023d0 <HAL_RCC_OscConfig+0x2d4>
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	031b      	lsls	r3, r3, #12
 800237c:	4901      	ldr	r1, [pc, #4]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
 8002382:	e025      	b.n	80023d0 <HAL_RCC_OscConfig+0x2d4>
 8002384:	58024400 	.word	0x58024400
 8002388:	4b9a      	ldr	r3, [pc, #616]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	061b      	lsls	r3, r3, #24
 8002396:	4997      	ldr	r1, [pc, #604]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
 800239c:	e018      	b.n	80023d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239e:	4b95      	ldr	r3, [pc, #596]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a94      	ldr	r2, [pc, #592]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7ff fad7 	bl	800195c <HAL_GetTick>
 80023ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b2:	f7ff fad3 	bl	800195c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e2ed      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023c4:	4b8b      	ldr	r3, [pc, #556]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f0      	bne.n	80023b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80a9 	beq.w	8002530 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023de:	4b85      	ldr	r3, [pc, #532]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023e8:	4b82      	ldr	r3, [pc, #520]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d007      	beq.n	8002404 <HAL_RCC_OscConfig+0x308>
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b18      	cmp	r3, #24
 80023f8:	d13a      	bne.n	8002470 <HAL_RCC_OscConfig+0x374>
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d135      	bne.n	8002470 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002404:	4b7b      	ldr	r3, [pc, #492]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_OscConfig+0x320>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2b80      	cmp	r3, #128	; 0x80
 8002416:	d001      	beq.n	800241c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e2c1      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800241c:	f7ff face 	bl	80019bc <HAL_GetREVID>
 8002420:	4603      	mov	r3, r0
 8002422:	f241 0203 	movw	r2, #4099	; 0x1003
 8002426:	4293      	cmp	r3, r2
 8002428:	d817      	bhi.n	800245a <HAL_RCC_OscConfig+0x35e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	2b20      	cmp	r3, #32
 8002430:	d108      	bne.n	8002444 <HAL_RCC_OscConfig+0x348>
 8002432:	4b70      	ldr	r3, [pc, #448]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800243a:	4a6e      	ldr	r2, [pc, #440]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800243c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002440:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002442:	e075      	b.n	8002530 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002444:	4b6b      	ldr	r3, [pc, #428]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	069b      	lsls	r3, r3, #26
 8002452:	4968      	ldr	r1, [pc, #416]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002458:	e06a      	b.n	8002530 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800245a:	4b66      	ldr	r3, [pc, #408]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	061b      	lsls	r3, r3, #24
 8002468:	4962      	ldr	r1, [pc, #392]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800246a:	4313      	orrs	r3, r2
 800246c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800246e:	e05f      	b.n	8002530 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d042      	beq.n	80024fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002478:	4b5e      	ldr	r3, [pc, #376]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a5d      	ldr	r2, [pc, #372]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800247e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7ff fa6a 	bl	800195c <HAL_GetTick>
 8002488:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800248c:	f7ff fa66 	bl	800195c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e280      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800249e:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024aa:	f7ff fa87 	bl	80019bc <HAL_GetREVID>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d817      	bhi.n	80024e8 <HAL_RCC_OscConfig+0x3ec>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d108      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3d6>
 80024c0:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80024c8:	4a4a      	ldr	r2, [pc, #296]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80024ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024ce:	6053      	str	r3, [r2, #4]
 80024d0:	e02e      	b.n	8002530 <HAL_RCC_OscConfig+0x434>
 80024d2:	4b48      	ldr	r3, [pc, #288]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	069b      	lsls	r3, r3, #26
 80024e0:	4944      	ldr	r1, [pc, #272]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
 80024e6:	e023      	b.n	8002530 <HAL_RCC_OscConfig+0x434>
 80024e8:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	061b      	lsls	r3, r3, #24
 80024f6:	493f      	ldr	r1, [pc, #252]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60cb      	str	r3, [r1, #12]
 80024fc:	e018      	b.n	8002530 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024fe:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a3c      	ldr	r2, [pc, #240]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7ff fa27 	bl	800195c <HAL_GetTick>
 800250e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002512:	f7ff fa23 	bl	800195c <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e23d      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002524:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d036      	beq.n	80025aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d019      	beq.n	8002578 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002548:	4a2a      	ldr	r2, [pc, #168]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7ff fa04 	bl	800195c <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002558:	f7ff fa00 	bl	800195c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e21a      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800256a:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800256c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x45c>
 8002576:	e018      	b.n	80025aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7ff f9ea 	bl	800195c <HAL_GetTick>
 8002588:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258c:	f7ff f9e6 	bl	800195c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e200      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80025a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d039      	beq.n	800262a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d01c      	beq.n	80025f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025ca:	f7ff f9c7 	bl	800195c <HAL_GetTick>
 80025ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d2:	f7ff f9c3 	bl	800195c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1dd      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x4d6>
 80025f0:	e01b      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
 80025f2:	bf00      	nop
 80025f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025f8:	4b9b      	ldr	r3, [pc, #620]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a9a      	ldr	r2, [pc, #616]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80025fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002602:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002604:	f7ff f9aa 	bl	800195c <HAL_GetTick>
 8002608:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800260c:	f7ff f9a6 	bl	800195c <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e1c0      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800261e:	4b92      	ldr	r3, [pc, #584]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8081 	beq.w	800273a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002638:	4b8c      	ldr	r3, [pc, #560]	; (800286c <HAL_RCC_OscConfig+0x770>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a8b      	ldr	r2, [pc, #556]	; (800286c <HAL_RCC_OscConfig+0x770>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002644:	f7ff f98a 	bl	800195c <HAL_GetTick>
 8002648:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7ff f986 	bl	800195c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e1a0      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800265e:	4b83      	ldr	r3, [pc, #524]	; (800286c <HAL_RCC_OscConfig+0x770>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d106      	bne.n	8002680 <HAL_RCC_OscConfig+0x584>
 8002672:	4b7d      	ldr	r3, [pc, #500]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	4a7c      	ldr	r2, [pc, #496]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6713      	str	r3, [r2, #112]	; 0x70
 800267e:	e02d      	b.n	80026dc <HAL_RCC_OscConfig+0x5e0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10c      	bne.n	80026a2 <HAL_RCC_OscConfig+0x5a6>
 8002688:	4b77      	ldr	r3, [pc, #476]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	4a76      	ldr	r2, [pc, #472]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	6713      	str	r3, [r2, #112]	; 0x70
 8002694:	4b74      	ldr	r3, [pc, #464]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	4a73      	ldr	r2, [pc, #460]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800269a:	f023 0304 	bic.w	r3, r3, #4
 800269e:	6713      	str	r3, [r2, #112]	; 0x70
 80026a0:	e01c      	b.n	80026dc <HAL_RCC_OscConfig+0x5e0>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x5c8>
 80026aa:	4b6f      	ldr	r3, [pc, #444]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	4a6e      	ldr	r2, [pc, #440]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	6713      	str	r3, [r2, #112]	; 0x70
 80026b6:	4b6c      	ldr	r3, [pc, #432]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a6b      	ldr	r2, [pc, #428]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
 80026c2:	e00b      	b.n	80026dc <HAL_RCC_OscConfig+0x5e0>
 80026c4:	4b68      	ldr	r3, [pc, #416]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	4a67      	ldr	r2, [pc, #412]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	6713      	str	r3, [r2, #112]	; 0x70
 80026d0:	4b65      	ldr	r3, [pc, #404]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a64      	ldr	r2, [pc, #400]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026d6:	f023 0304 	bic.w	r3, r3, #4
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d015      	beq.n	8002710 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7ff f93a 	bl	800195c <HAL_GetTick>
 80026e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7ff f936 	bl	800195c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e14e      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002702:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0ee      	beq.n	80026ec <HAL_RCC_OscConfig+0x5f0>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7ff f924 	bl	800195c <HAL_GetTick>
 8002714:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7ff f920 	bl	800195c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	; 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e138      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800272e:	4b4e      	ldr	r3, [pc, #312]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1ee      	bne.n	8002718 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 812d 	beq.w	800299e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002744:	4b48      	ldr	r3, [pc, #288]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800274c:	2b18      	cmp	r3, #24
 800274e:	f000 80bd 	beq.w	80028cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	2b02      	cmp	r3, #2
 8002758:	f040 809e 	bne.w	8002898 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275c:	4b42      	ldr	r3, [pc, #264]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a41      	ldr	r2, [pc, #260]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7ff f8f8 	bl	800195c <HAL_GetTick>
 800276c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002770:	f7ff f8f4 	bl	800195c <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e10e      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002782:	4b39      	ldr	r3, [pc, #228]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800278e:	4b36      	ldr	r3, [pc, #216]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002792:	4b37      	ldr	r3, [pc, #220]	; (8002870 <HAL_RCC_OscConfig+0x774>)
 8002794:	4013      	ands	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	430a      	orrs	r2, r1
 80027a2:	4931      	ldr	r1, [pc, #196]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	628b      	str	r3, [r1, #40]	; 0x28
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	3b01      	subs	r3, #1
 80027ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b6:	3b01      	subs	r3, #1
 80027b8:	025b      	lsls	r3, r3, #9
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	3b01      	subs	r3, #1
 80027c4:	041b      	lsls	r3, r3, #16
 80027c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	3b01      	subs	r3, #1
 80027d2:	061b      	lsls	r3, r3, #24
 80027d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80027d8:	4923      	ldr	r1, [pc, #140]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80027de:	4b22      	ldr	r3, [pc, #136]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	4a21      	ldr	r2, [pc, #132]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027ea:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80027ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <HAL_RCC_OscConfig+0x778>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027f6:	00d2      	lsls	r2, r2, #3
 80027f8:	491b      	ldr	r1, [pc, #108]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027fe:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	f023 020c 	bic.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4917      	ldr	r1, [pc, #92]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800280c:	4313      	orrs	r3, r2
 800280e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	f023 0202 	bic.w	r2, r3, #2
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	4912      	ldr	r1, [pc, #72]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800281e:	4313      	orrs	r3, r2
 8002820:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002838:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002844:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	4a07      	ldr	r2, [pc, #28]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a04      	ldr	r2, [pc, #16]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002858:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7ff f87d 	bl	800195c <HAL_GetTick>
 8002862:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002864:	e011      	b.n	800288a <HAL_RCC_OscConfig+0x78e>
 8002866:	bf00      	nop
 8002868:	58024400 	.word	0x58024400
 800286c:	58024800 	.word	0x58024800
 8002870:	fffffc0c 	.word	0xfffffc0c
 8002874:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002878:	f7ff f870 	bl	800195c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e08a      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_RCC_OscConfig+0x8ac>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x77c>
 8002896:	e082      	b.n	800299e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002898:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <HAL_RCC_OscConfig+0x8ac>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a42      	ldr	r2, [pc, #264]	; (80029a8 <HAL_RCC_OscConfig+0x8ac>)
 800289e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7ff f85a 	bl	800195c <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ac:	f7ff f856 	bl	800195c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e070      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028be:	4b3a      	ldr	r3, [pc, #232]	; (80029a8 <HAL_RCC_OscConfig+0x8ac>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x7b0>
 80028ca:	e068      	b.n	800299e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028cc:	4b36      	ldr	r3, [pc, #216]	; (80029a8 <HAL_RCC_OscConfig+0x8ac>)
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028d2:	4b35      	ldr	r3, [pc, #212]	; (80029a8 <HAL_RCC_OscConfig+0x8ac>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d031      	beq.n	8002944 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f003 0203 	and.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d12a      	bne.n	8002944 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d122      	bne.n	8002944 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d11a      	bne.n	8002944 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	0a5b      	lsrs	r3, r3, #9
 8002912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d111      	bne.n	8002944 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	0c1b      	lsrs	r3, r3, #16
 8002924:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d108      	bne.n	8002944 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	0e1b      	lsrs	r3, r3, #24
 8002936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e02b      	b.n	80029a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002948:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <HAL_RCC_OscConfig+0x8ac>)
 800294a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294c:	08db      	lsrs	r3, r3, #3
 800294e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002952:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	429a      	cmp	r2, r3
 800295c:	d01f      	beq.n	800299e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800295e:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_RCC_OscConfig+0x8ac>)
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <HAL_RCC_OscConfig+0x8ac>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800296a:	f7fe fff7 	bl	800195c <HAL_GetTick>
 800296e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002970:	bf00      	nop
 8002972:	f7fe fff3 	bl	800195c <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	4293      	cmp	r3, r2
 800297c:	d0f9      	beq.n	8002972 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_RCC_OscConfig+0x8ac>)
 8002980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <HAL_RCC_OscConfig+0x8b0>)
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800298a:	00d2      	lsls	r2, r2, #3
 800298c:	4906      	ldr	r1, [pc, #24]	; (80029a8 <HAL_RCC_OscConfig+0x8ac>)
 800298e:	4313      	orrs	r3, r2
 8002990:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_RCC_OscConfig+0x8ac>)
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	4a04      	ldr	r2, [pc, #16]	; (80029a8 <HAL_RCC_OscConfig+0x8ac>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3730      	adds	r7, #48	; 0x30
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	58024400 	.word	0x58024400
 80029ac:	ffff0007 	.word	0xffff0007

080029b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e19c      	b.n	8002cfe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029c4:	4b8a      	ldr	r3, [pc, #552]	; (8002bf0 <HAL_RCC_ClockConfig+0x240>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d910      	bls.n	80029f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b87      	ldr	r3, [pc, #540]	; (8002bf0 <HAL_RCC_ClockConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 020f 	bic.w	r2, r3, #15
 80029da:	4985      	ldr	r1, [pc, #532]	; (8002bf0 <HAL_RCC_ClockConfig+0x240>)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	4313      	orrs	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029e2:	4b83      	ldr	r3, [pc, #524]	; (8002bf0 <HAL_RCC_ClockConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e184      	b.n	8002cfe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d010      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691a      	ldr	r2, [r3, #16]
 8002a04:	4b7b      	ldr	r3, [pc, #492]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d908      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a10:	4b78      	ldr	r3, [pc, #480]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	4975      	ldr	r1, [pc, #468]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d010      	beq.n	8002a50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	4b70      	ldr	r3, [pc, #448]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d908      	bls.n	8002a50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a3e:	4b6d      	ldr	r3, [pc, #436]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	496a      	ldr	r1, [pc, #424]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d010      	beq.n	8002a7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699a      	ldr	r2, [r3, #24]
 8002a60:	4b64      	ldr	r3, [pc, #400]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d908      	bls.n	8002a7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a6c:	4b61      	ldr	r3, [pc, #388]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	495e      	ldr	r1, [pc, #376]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d010      	beq.n	8002aac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69da      	ldr	r2, [r3, #28]
 8002a8e:	4b59      	ldr	r3, [pc, #356]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d908      	bls.n	8002aac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a9a:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	4953      	ldr	r1, [pc, #332]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d010      	beq.n	8002ada <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	4b4d      	ldr	r3, [pc, #308]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d908      	bls.n	8002ada <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac8:	4b4a      	ldr	r3, [pc, #296]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f023 020f 	bic.w	r2, r3, #15
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4947      	ldr	r1, [pc, #284]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d055      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ae6:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	4940      	ldr	r1, [pc, #256]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b00:	4b3c      	ldr	r3, [pc, #240]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d121      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0f6      	b.n	8002cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d107      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b18:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d115      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0ea      	b.n	8002cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d107      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b30:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d109      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0de      	b.n	8002cfe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b40:	4b2c      	ldr	r3, [pc, #176]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e0d6      	b.n	8002cfe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b50:	4b28      	ldr	r3, [pc, #160]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f023 0207 	bic.w	r2, r3, #7
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	4925      	ldr	r1, [pc, #148]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b62:	f7fe fefb 	bl	800195c <HAL_GetTick>
 8002b66:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6a:	f7fe fef7 	bl	800195c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e0be      	b.n	8002cfe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b80:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d1eb      	bne.n	8002b6a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d010      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d208      	bcs.n	8002bc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bae:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f023 020f 	bic.w	r2, r3, #15
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	490e      	ldr	r1, [pc, #56]	; (8002bf4 <HAL_RCC_ClockConfig+0x244>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCC_ClockConfig+0x240>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d214      	bcs.n	8002bf8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <HAL_RCC_ClockConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 020f 	bic.w	r2, r3, #15
 8002bd6:	4906      	ldr	r1, [pc, #24]	; (8002bf0 <HAL_RCC_ClockConfig+0x240>)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <HAL_RCC_ClockConfig+0x240>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e086      	b.n	8002cfe <HAL_RCC_ClockConfig+0x34e>
 8002bf0:	52002000 	.word	0x52002000
 8002bf4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d010      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691a      	ldr	r2, [r3, #16]
 8002c08:	4b3f      	ldr	r3, [pc, #252]	; (8002d08 <HAL_RCC_ClockConfig+0x358>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d208      	bcs.n	8002c26 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c14:	4b3c      	ldr	r3, [pc, #240]	; (8002d08 <HAL_RCC_ClockConfig+0x358>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	4939      	ldr	r1, [pc, #228]	; (8002d08 <HAL_RCC_ClockConfig+0x358>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d010      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCC_ClockConfig+0x358>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d208      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c42:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <HAL_RCC_ClockConfig+0x358>)
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	492e      	ldr	r1, [pc, #184]	; (8002d08 <HAL_RCC_ClockConfig+0x358>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d010      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699a      	ldr	r2, [r3, #24]
 8002c64:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <HAL_RCC_ClockConfig+0x358>)
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d208      	bcs.n	8002c82 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <HAL_RCC_ClockConfig+0x358>)
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	4922      	ldr	r1, [pc, #136]	; (8002d08 <HAL_RCC_ClockConfig+0x358>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d010      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69da      	ldr	r2, [r3, #28]
 8002c92:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_RCC_ClockConfig+0x358>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d208      	bcs.n	8002cb0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <HAL_RCC_ClockConfig+0x358>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4917      	ldr	r1, [pc, #92]	; (8002d08 <HAL_RCC_ClockConfig+0x358>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cb0:	f000 f834 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <HAL_RCC_ClockConfig+0x358>)
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	4912      	ldr	r1, [pc, #72]	; (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ccc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_RCC_ClockConfig+0x358>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <HAL_RCC_ClockConfig+0x35c>)
 8002cd8:	5cd3      	ldrb	r3, [r2, r3]
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce4:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <HAL_RCC_ClockConfig+0x360>)
 8002ce6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ce8:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <HAL_RCC_ClockConfig+0x364>)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_RCC_ClockConfig+0x368>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fde8 	bl	80018c8 <HAL_InitTick>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	58024400 	.word	0x58024400
 8002d0c:	08008090 	.word	0x08008090
 8002d10:	24000004 	.word	0x24000004
 8002d14:	24000000 	.word	0x24000000
 8002d18:	24000008 	.word	0x24000008

08002d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	; 0x24
 8002d20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d22:	4bb3      	ldr	r3, [pc, #716]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d2a:	2b18      	cmp	r3, #24
 8002d2c:	f200 8155 	bhi.w	8002fda <HAL_RCC_GetSysClockFreq+0x2be>
 8002d30:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d36:	bf00      	nop
 8002d38:	08002d9d 	.word	0x08002d9d
 8002d3c:	08002fdb 	.word	0x08002fdb
 8002d40:	08002fdb 	.word	0x08002fdb
 8002d44:	08002fdb 	.word	0x08002fdb
 8002d48:	08002fdb 	.word	0x08002fdb
 8002d4c:	08002fdb 	.word	0x08002fdb
 8002d50:	08002fdb 	.word	0x08002fdb
 8002d54:	08002fdb 	.word	0x08002fdb
 8002d58:	08002dc3 	.word	0x08002dc3
 8002d5c:	08002fdb 	.word	0x08002fdb
 8002d60:	08002fdb 	.word	0x08002fdb
 8002d64:	08002fdb 	.word	0x08002fdb
 8002d68:	08002fdb 	.word	0x08002fdb
 8002d6c:	08002fdb 	.word	0x08002fdb
 8002d70:	08002fdb 	.word	0x08002fdb
 8002d74:	08002fdb 	.word	0x08002fdb
 8002d78:	08002dc9 	.word	0x08002dc9
 8002d7c:	08002fdb 	.word	0x08002fdb
 8002d80:	08002fdb 	.word	0x08002fdb
 8002d84:	08002fdb 	.word	0x08002fdb
 8002d88:	08002fdb 	.word	0x08002fdb
 8002d8c:	08002fdb 	.word	0x08002fdb
 8002d90:	08002fdb 	.word	0x08002fdb
 8002d94:	08002fdb 	.word	0x08002fdb
 8002d98:	08002dcf 	.word	0x08002dcf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d9c:	4b94      	ldr	r3, [pc, #592]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d009      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002da8:	4b91      	ldr	r3, [pc, #580]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	08db      	lsrs	r3, r3, #3
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	4a90      	ldr	r2, [pc, #576]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002db4:	fa22 f303 	lsr.w	r3, r2, r3
 8002db8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002dba:	e111      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002dbc:	4b8d      	ldr	r3, [pc, #564]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dbe:	61bb      	str	r3, [r7, #24]
      break;
 8002dc0:	e10e      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002dc2:	4b8d      	ldr	r3, [pc, #564]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002dc4:	61bb      	str	r3, [r7, #24]
      break;
 8002dc6:	e10b      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002dc8:	4b8c      	ldr	r3, [pc, #560]	; (8002ffc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002dca:	61bb      	str	r3, [r7, #24]
      break;
 8002dcc:	e108      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002dce:	4b88      	ldr	r3, [pc, #544]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002dd8:	4b85      	ldr	r3, [pc, #532]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002de4:	4b82      	ldr	r3, [pc, #520]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002dee:	4b80      	ldr	r3, [pc, #512]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df2:	08db      	lsrs	r3, r3, #3
 8002df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80e1 	beq.w	8002fd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	f000 8083 	beq.w	8002f20 <HAL_RCC_GetSysClockFreq+0x204>
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	f200 80a1 	bhi.w	8002f64 <HAL_RCC_GetSysClockFreq+0x248>
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x114>
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d056      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e2e:	e099      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e30:	4b6f      	ldr	r3, [pc, #444]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d02d      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e3c:	4b6c      	ldr	r3, [pc, #432]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	08db      	lsrs	r3, r3, #3
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	4a6b      	ldr	r2, [pc, #428]	; (8002ff4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	ee07 3a90 	vmov	s15, r3
 8002e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e66:	4b62      	ldr	r3, [pc, #392]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e6e:	ee07 3a90 	vmov	s15, r3
 8002e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e96:	e087      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	ee07 3a90 	vmov	s15, r3
 8002e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003004 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eaa:	4b51      	ldr	r3, [pc, #324]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eb2:	ee07 3a90 	vmov	s15, r3
 8002eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ebe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eda:	e065      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	ee07 3a90 	vmov	s15, r3
 8002ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eee:	4b40      	ldr	r3, [pc, #256]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f1e:	e043      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	ee07 3a90 	vmov	s15, r3
 8002f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800300c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f32:	4b2f      	ldr	r3, [pc, #188]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f3a:	ee07 3a90 	vmov	s15, r3
 8002f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f62:	e021      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	ee07 3a90 	vmov	s15, r3
 8002f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003008 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f76:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003000 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fa6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fac:	0a5b      	lsrs	r3, r3, #9
 8002fae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	ee07 3a90 	vmov	s15, r3
 8002fbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fcc:	ee17 3a90 	vmov	r3, s15
 8002fd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002fd2:	e005      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61bb      	str	r3, [r7, #24]
      break;
 8002fd8:	e002      	b.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fdc:	61bb      	str	r3, [r7, #24]
      break;
 8002fde:	bf00      	nop
  }

  return sysclockfreq;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3724      	adds	r7, #36	; 0x24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	58024400 	.word	0x58024400
 8002ff4:	03d09000 	.word	0x03d09000
 8002ff8:	003d0900 	.word	0x003d0900
 8002ffc:	017d7840 	.word	0x017d7840
 8003000:	46000000 	.word	0x46000000
 8003004:	4c742400 	.word	0x4c742400
 8003008:	4a742400 	.word	0x4a742400
 800300c:	4bbebc20 	.word	0x4bbebc20

08003010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003016:	f7ff fe81 	bl	8002d1c <HAL_RCC_GetSysClockFreq>
 800301a:	4602      	mov	r2, r0
 800301c:	4b10      	ldr	r3, [pc, #64]	; (8003060 <HAL_RCC_GetHCLKFreq+0x50>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	0a1b      	lsrs	r3, r3, #8
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	490f      	ldr	r1, [pc, #60]	; (8003064 <HAL_RCC_GetHCLKFreq+0x54>)
 8003028:	5ccb      	ldrb	r3, [r1, r3]
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	fa22 f303 	lsr.w	r3, r2, r3
 8003032:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003034:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <HAL_RCC_GetHCLKFreq+0x50>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 030f 	and.w	r3, r3, #15
 800303c:	4a09      	ldr	r2, [pc, #36]	; (8003064 <HAL_RCC_GetHCLKFreq+0x54>)
 800303e:	5cd3      	ldrb	r3, [r2, r3]
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	fa22 f303 	lsr.w	r3, r2, r3
 800304a:	4a07      	ldr	r2, [pc, #28]	; (8003068 <HAL_RCC_GetHCLKFreq+0x58>)
 800304c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800304e:	4a07      	ldr	r2, [pc, #28]	; (800306c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003054:	4b04      	ldr	r3, [pc, #16]	; (8003068 <HAL_RCC_GetHCLKFreq+0x58>)
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	58024400 	.word	0x58024400
 8003064:	08008090 	.word	0x08008090
 8003068:	24000004 	.word	0x24000004
 800306c:	24000000 	.word	0x24000000

08003070 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003074:	f7ff ffcc 	bl	8003010 <HAL_RCC_GetHCLKFreq>
 8003078:	4602      	mov	r2, r0
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <HAL_RCC_GetPCLK1Freq+0x24>)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	091b      	lsrs	r3, r3, #4
 8003080:	f003 0307 	and.w	r3, r3, #7
 8003084:	4904      	ldr	r1, [pc, #16]	; (8003098 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003086:	5ccb      	ldrb	r3, [r1, r3]
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	58024400 	.word	0x58024400
 8003098:	08008090 	.word	0x08008090

0800309c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80030a0:	f7ff ffb6 	bl	8003010 <HAL_RCC_GetHCLKFreq>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	0a1b      	lsrs	r3, r3, #8
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	4904      	ldr	r1, [pc, #16]	; (80030c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	58024400 	.word	0x58024400
 80030c4:	08008090 	.word	0x08008090

080030c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030cc:	b0ca      	sub	sp, #296	; 0x128
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030da:	2300      	movs	r3, #0
 80030dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80030ec:	2500      	movs	r5, #0
 80030ee:	ea54 0305 	orrs.w	r3, r4, r5
 80030f2:	d049      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80030f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030fe:	d02f      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003100:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003104:	d828      	bhi.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800310a:	d01a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800310c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003110:	d822      	bhi.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800311a:	d007      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800311c:	e01c      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800311e:	4bb8      	ldr	r3, [pc, #736]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	4ab7      	ldr	r2, [pc, #732]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003128:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800312a:	e01a      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800312c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003130:	3308      	adds	r3, #8
 8003132:	2102      	movs	r1, #2
 8003134:	4618      	mov	r0, r3
 8003136:	f001 fc8f 	bl	8004a58 <RCCEx_PLL2_Config>
 800313a:	4603      	mov	r3, r0
 800313c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003140:	e00f      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003146:	3328      	adds	r3, #40	; 0x28
 8003148:	2102      	movs	r1, #2
 800314a:	4618      	mov	r0, r3
 800314c:	f001 fd36 	bl	8004bbc <RCCEx_PLL3_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003156:	e004      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800315e:	e000      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003162:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800316a:	4ba5      	ldr	r3, [pc, #660]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800316c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003178:	4aa1      	ldr	r2, [pc, #644]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800317a:	430b      	orrs	r3, r1
 800317c:	6513      	str	r3, [r2, #80]	; 0x50
 800317e:	e003      	b.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003184:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800318c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003190:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003194:	f04f 0900 	mov.w	r9, #0
 8003198:	ea58 0309 	orrs.w	r3, r8, r9
 800319c:	d047      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d82a      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80031a8:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ae:	bf00      	nop
 80031b0:	080031c5 	.word	0x080031c5
 80031b4:	080031d3 	.word	0x080031d3
 80031b8:	080031e9 	.word	0x080031e9
 80031bc:	08003207 	.word	0x08003207
 80031c0:	08003207 	.word	0x08003207
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c4:	4b8e      	ldr	r3, [pc, #568]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	4a8d      	ldr	r2, [pc, #564]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031d0:	e01a      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031d6:	3308      	adds	r3, #8
 80031d8:	2100      	movs	r1, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	f001 fc3c 	bl	8004a58 <RCCEx_PLL2_Config>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031e6:	e00f      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031ec:	3328      	adds	r3, #40	; 0x28
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f001 fce3 	bl	8004bbc <RCCEx_PLL3_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031fc:	e004      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003204:	e000      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003208:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003210:	4b7b      	ldr	r3, [pc, #492]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003214:	f023 0107 	bic.w	r1, r3, #7
 8003218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	4a78      	ldr	r2, [pc, #480]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003220:	430b      	orrs	r3, r1
 8003222:	6513      	str	r3, [r2, #80]	; 0x50
 8003224:	e003      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800322a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800322e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003236:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800323a:	f04f 0b00 	mov.w	fp, #0
 800323e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003242:	d04c      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324e:	d030      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003254:	d829      	bhi.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003256:	2bc0      	cmp	r3, #192	; 0xc0
 8003258:	d02d      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800325a:	2bc0      	cmp	r3, #192	; 0xc0
 800325c:	d825      	bhi.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800325e:	2b80      	cmp	r3, #128	; 0x80
 8003260:	d018      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003262:	2b80      	cmp	r3, #128	; 0x80
 8003264:	d821      	bhi.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d007      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800326e:	e01c      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003270:	4b63      	ldr	r3, [pc, #396]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	4a62      	ldr	r2, [pc, #392]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800327a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800327c:	e01c      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800327e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003282:	3308      	adds	r3, #8
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f001 fbe6 	bl	8004a58 <RCCEx_PLL2_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003292:	e011      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003298:	3328      	adds	r3, #40	; 0x28
 800329a:	2100      	movs	r1, #0
 800329c:	4618      	mov	r0, r3
 800329e:	f001 fc8d 	bl	8004bbc <RCCEx_PLL3_Config>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80032a8:	e006      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032b0:	e002      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80032b2:	bf00      	nop
 80032b4:	e000      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80032b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80032c0:	4b4f      	ldr	r3, [pc, #316]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80032c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	4a4c      	ldr	r2, [pc, #304]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032d0:	430b      	orrs	r3, r1
 80032d2:	6513      	str	r3, [r2, #80]	; 0x50
 80032d4:	e003      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80032ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80032ee:	2300      	movs	r3, #0
 80032f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80032f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80032f8:	460b      	mov	r3, r1
 80032fa:	4313      	orrs	r3, r2
 80032fc:	d053      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80032fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003302:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003306:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800330a:	d035      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800330c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003310:	d82e      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003312:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003316:	d031      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003318:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800331c:	d828      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800331e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003322:	d01a      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003324:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003328:	d822      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800332e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003332:	d007      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003334:	e01c      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003336:	4b32      	ldr	r3, [pc, #200]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	4a31      	ldr	r2, [pc, #196]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800333c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003340:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003342:	e01c      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003348:	3308      	adds	r3, #8
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f001 fb83 	bl	8004a58 <RCCEx_PLL2_Config>
 8003352:	4603      	mov	r3, r0
 8003354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003358:	e011      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800335e:	3328      	adds	r3, #40	; 0x28
 8003360:	2100      	movs	r1, #0
 8003362:	4618      	mov	r0, r3
 8003364:	f001 fc2a 	bl	8004bbc <RCCEx_PLL3_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800336e:	e006      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003376:	e002      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003378:	bf00      	nop
 800337a:	e000      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800337c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800337e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003386:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800338e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003392:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003396:	4a1a      	ldr	r2, [pc, #104]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003398:	430b      	orrs	r3, r1
 800339a:	6593      	str	r3, [r2, #88]	; 0x58
 800339c:	e003      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80033a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80033b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80033b6:	2300      	movs	r3, #0
 80033b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80033bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80033c0:	460b      	mov	r3, r1
 80033c2:	4313      	orrs	r3, r2
 80033c4:	d056      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033d2:	d038      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80033d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033d8:	d831      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033de:	d034      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80033e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033e4:	d82b      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ea:	d01d      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80033ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033f0:	d825      	bhi.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d006      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80033f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80033fc:	e01f      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033fe:	bf00      	nop
 8003400:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003404:	4ba2      	ldr	r3, [pc, #648]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	4aa1      	ldr	r2, [pc, #644]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800340a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003410:	e01c      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003416:	3308      	adds	r3, #8
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f001 fb1c 	bl	8004a58 <RCCEx_PLL2_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003426:	e011      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003428:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800342c:	3328      	adds	r3, #40	; 0x28
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f001 fbc3 	bl	8004bbc <RCCEx_PLL3_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800343c:	e006      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003444:	e002      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003446:	bf00      	nop
 8003448:	e000      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800344a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800344c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10b      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003454:	4b8e      	ldr	r3, [pc, #568]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003458:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800345c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003460:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003464:	4a8a      	ldr	r2, [pc, #552]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003466:	430b      	orrs	r3, r1
 8003468:	6593      	str	r3, [r2, #88]	; 0x58
 800346a:	e003      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003470:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003474:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003480:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003484:	2300      	movs	r3, #0
 8003486:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800348a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800348e:	460b      	mov	r3, r1
 8003490:	4313      	orrs	r3, r2
 8003492:	d03a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349a:	2b30      	cmp	r3, #48	; 0x30
 800349c:	d01f      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800349e:	2b30      	cmp	r3, #48	; 0x30
 80034a0:	d819      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d00c      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d815      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d019      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80034ae:	2b10      	cmp	r3, #16
 80034b0:	d111      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b2:	4b77      	ldr	r3, [pc, #476]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	4a76      	ldr	r2, [pc, #472]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80034be:	e011      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c4:	3308      	adds	r3, #8
 80034c6:	2102      	movs	r1, #2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 fac5 	bl	8004a58 <RCCEx_PLL2_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80034d4:	e006      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034dc:	e002      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80034de:	bf00      	nop
 80034e0:	e000      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80034e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10a      	bne.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80034ec:	4b68      	ldr	r3, [pc, #416]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	4a65      	ldr	r2, [pc, #404]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034fc:	430b      	orrs	r3, r1
 80034fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003500:	e003      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003512:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003516:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003520:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003524:	460b      	mov	r3, r1
 8003526:	4313      	orrs	r3, r2
 8003528:	d051      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800352a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800352e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003534:	d035      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800353a:	d82e      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800353c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003540:	d031      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003542:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003546:	d828      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354c:	d01a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800354e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003552:	d822      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355c:	d007      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800355e:	e01c      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003560:	4b4b      	ldr	r3, [pc, #300]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	4a4a      	ldr	r2, [pc, #296]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800356a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800356c:	e01c      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800356e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003572:	3308      	adds	r3, #8
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f001 fa6e 	bl	8004a58 <RCCEx_PLL2_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003582:	e011      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003588:	3328      	adds	r3, #40	; 0x28
 800358a:	2100      	movs	r1, #0
 800358c:	4618      	mov	r0, r3
 800358e:	f001 fb15 	bl	8004bbc <RCCEx_PLL3_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003598:	e006      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035a0:	e002      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80035a2:	bf00      	nop
 80035a4:	e000      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80035a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035b0:	4b37      	ldr	r3, [pc, #220]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035be:	4a34      	ldr	r2, [pc, #208]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035c0:	430b      	orrs	r3, r1
 80035c2:	6513      	str	r3, [r2, #80]	; 0x50
 80035c4:	e003      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80035da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035de:	2300      	movs	r3, #0
 80035e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80035e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80035e8:	460b      	mov	r3, r1
 80035ea:	4313      	orrs	r3, r2
 80035ec:	d056      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80035ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f8:	d033      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80035fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035fe:	d82c      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003600:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003604:	d02f      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003606:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800360a:	d826      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800360c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003610:	d02b      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003612:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003616:	d820      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800361c:	d012      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800361e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003622:	d81a      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d022      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362c:	d115      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800362e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003632:	3308      	adds	r3, #8
 8003634:	2101      	movs	r1, #1
 8003636:	4618      	mov	r0, r3
 8003638:	f001 fa0e 	bl	8004a58 <RCCEx_PLL2_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003642:	e015      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003648:	3328      	adds	r3, #40	; 0x28
 800364a:	2101      	movs	r1, #1
 800364c:	4618      	mov	r0, r3
 800364e:	f001 fab5 	bl	8004bbc <RCCEx_PLL3_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003658:	e00a      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003660:	e006      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003662:	bf00      	nop
 8003664:	e004      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003666:	bf00      	nop
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800366e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10d      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003678:	4b05      	ldr	r3, [pc, #20]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800367a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003686:	4a02      	ldr	r2, [pc, #8]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003688:	430b      	orrs	r3, r1
 800368a:	6513      	str	r3, [r2, #80]	; 0x50
 800368c:	e006      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800368e:	bf00      	nop
 8003690:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003694:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003698:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800369c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80036a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036ac:	2300      	movs	r3, #0
 80036ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4313      	orrs	r3, r2
 80036ba:	d055      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80036bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c8:	d033      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80036ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ce:	d82c      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d4:	d02f      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80036d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036da:	d826      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036e0:	d02b      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80036e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036e6:	d820      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ec:	d012      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80036ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036f2:	d81a      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d022      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80036f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036fc:	d115      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003702:	3308      	adds	r3, #8
 8003704:	2101      	movs	r1, #1
 8003706:	4618      	mov	r0, r3
 8003708:	f001 f9a6 	bl	8004a58 <RCCEx_PLL2_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003712:	e015      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003714:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003718:	3328      	adds	r3, #40	; 0x28
 800371a:	2101      	movs	r1, #1
 800371c:	4618      	mov	r0, r3
 800371e:	f001 fa4d 	bl	8004bbc <RCCEx_PLL3_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003728:	e00a      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003730:	e006      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003732:	bf00      	nop
 8003734:	e004      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003736:	bf00      	nop
 8003738:	e002      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800373e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003740:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10b      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003748:	4ba3      	ldr	r3, [pc, #652]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003758:	4a9f      	ldr	r2, [pc, #636]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800375a:	430b      	orrs	r3, r1
 800375c:	6593      	str	r3, [r2, #88]	; 0x58
 800375e:	e003      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003760:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003764:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003778:	2300      	movs	r3, #0
 800377a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800377e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003782:	460b      	mov	r3, r1
 8003784:	4313      	orrs	r3, r2
 8003786:	d037      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003792:	d00e      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003798:	d816      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d018      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800379e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037a2:	d111      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a4:	4b8c      	ldr	r3, [pc, #560]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	4a8b      	ldr	r2, [pc, #556]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037b0:	e00f      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b6:	3308      	adds	r3, #8
 80037b8:	2101      	movs	r1, #1
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 f94c 	bl	8004a58 <RCCEx_PLL2_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037c6:	e004      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037ce:	e000      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80037d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10a      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037da:	4b7f      	ldr	r3, [pc, #508]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037de:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e8:	4a7b      	ldr	r2, [pc, #492]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037ea:	430b      	orrs	r3, r1
 80037ec:	6513      	str	r3, [r2, #80]	; 0x50
 80037ee:	e003      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003808:	2300      	movs	r3, #0
 800380a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800380e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003812:	460b      	mov	r3, r1
 8003814:	4313      	orrs	r3, r2
 8003816:	d039      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800381c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800381e:	2b03      	cmp	r3, #3
 8003820:	d81c      	bhi.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	08003865 	.word	0x08003865
 800382c:	08003839 	.word	0x08003839
 8003830:	08003847 	.word	0x08003847
 8003834:	08003865 	.word	0x08003865
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003838:	4b67      	ldr	r3, [pc, #412]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	4a66      	ldr	r2, [pc, #408]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800383e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003842:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003844:	e00f      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384a:	3308      	adds	r3, #8
 800384c:	2102      	movs	r1, #2
 800384e:	4618      	mov	r0, r3
 8003850:	f001 f902 	bl	8004a58 <RCCEx_PLL2_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800385a:	e004      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003862:	e000      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10a      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800386e:	4b5a      	ldr	r3, [pc, #360]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003872:	f023 0103 	bic.w	r1, r3, #3
 8003876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800387a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387c:	4a56      	ldr	r2, [pc, #344]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800387e:	430b      	orrs	r3, r1
 8003880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003882:	e003      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003884:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003888:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003898:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80038a6:	460b      	mov	r3, r1
 80038a8:	4313      	orrs	r3, r2
 80038aa:	f000 809f 	beq.w	80039ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ae:	4b4b      	ldr	r3, [pc, #300]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a4a      	ldr	r2, [pc, #296]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038ba:	f7fe f84f 	bl	800195c <HAL_GetTick>
 80038be:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038c2:	e00b      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c4:	f7fe f84a 	bl	800195c <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b64      	cmp	r3, #100	; 0x64
 80038d2:	d903      	bls.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038da:	e005      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038dc:	4b3f      	ldr	r3, [pc, #252]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ed      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80038e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d179      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80038f0:	4b39      	ldr	r3, [pc, #228]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038fc:	4053      	eors	r3, r2
 80038fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003902:	2b00      	cmp	r3, #0
 8003904:	d015      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003906:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800390e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003912:	4b31      	ldr	r3, [pc, #196]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	4a30      	ldr	r2, [pc, #192]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800391e:	4b2e      	ldr	r3, [pc, #184]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003922:	4a2d      	ldr	r2, [pc, #180]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003928:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800392a:	4a2b      	ldr	r2, [pc, #172]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800392c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003930:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003936:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800393a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393e:	d118      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fe f80c 	bl	800195c <HAL_GetTick>
 8003944:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003948:	e00d      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fe f807 	bl	800195c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003954:	1ad2      	subs	r2, r2, r3
 8003956:	f241 3388 	movw	r3, #5000	; 0x1388
 800395a:	429a      	cmp	r2, r3
 800395c:	d903      	bls.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003964:	e005      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003966:	4b1c      	ldr	r3, [pc, #112]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0eb      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003976:	2b00      	cmp	r3, #0
 8003978:	d129      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800397a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800397e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800398a:	d10e      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800398c:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003998:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800399c:	091a      	lsrs	r2, r3, #4
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6113      	str	r3, [r2, #16]
 80039a8:	e005      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	4a0a      	ldr	r2, [pc, #40]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039b4:	6113      	str	r3, [r2, #16]
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80039ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c6:	4a04      	ldr	r2, [pc, #16]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6713      	str	r3, [r2, #112]	; 0x70
 80039cc:	e00e      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80039d6:	e009      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 80039d8:	58024400 	.word	0x58024400
 80039dc:	58024800 	.word	0x58024800
 80039e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f002 0301 	and.w	r3, r2, #1
 80039f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f000 8089 	beq.w	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a14:	2b28      	cmp	r3, #40	; 0x28
 8003a16:	d86b      	bhi.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003a18:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1e:	bf00      	nop
 8003a20:	08003af9 	.word	0x08003af9
 8003a24:	08003af1 	.word	0x08003af1
 8003a28:	08003af1 	.word	0x08003af1
 8003a2c:	08003af1 	.word	0x08003af1
 8003a30:	08003af1 	.word	0x08003af1
 8003a34:	08003af1 	.word	0x08003af1
 8003a38:	08003af1 	.word	0x08003af1
 8003a3c:	08003af1 	.word	0x08003af1
 8003a40:	08003ac5 	.word	0x08003ac5
 8003a44:	08003af1 	.word	0x08003af1
 8003a48:	08003af1 	.word	0x08003af1
 8003a4c:	08003af1 	.word	0x08003af1
 8003a50:	08003af1 	.word	0x08003af1
 8003a54:	08003af1 	.word	0x08003af1
 8003a58:	08003af1 	.word	0x08003af1
 8003a5c:	08003af1 	.word	0x08003af1
 8003a60:	08003adb 	.word	0x08003adb
 8003a64:	08003af1 	.word	0x08003af1
 8003a68:	08003af1 	.word	0x08003af1
 8003a6c:	08003af1 	.word	0x08003af1
 8003a70:	08003af1 	.word	0x08003af1
 8003a74:	08003af1 	.word	0x08003af1
 8003a78:	08003af1 	.word	0x08003af1
 8003a7c:	08003af1 	.word	0x08003af1
 8003a80:	08003af9 	.word	0x08003af9
 8003a84:	08003af1 	.word	0x08003af1
 8003a88:	08003af1 	.word	0x08003af1
 8003a8c:	08003af1 	.word	0x08003af1
 8003a90:	08003af1 	.word	0x08003af1
 8003a94:	08003af1 	.word	0x08003af1
 8003a98:	08003af1 	.word	0x08003af1
 8003a9c:	08003af1 	.word	0x08003af1
 8003aa0:	08003af9 	.word	0x08003af9
 8003aa4:	08003af1 	.word	0x08003af1
 8003aa8:	08003af1 	.word	0x08003af1
 8003aac:	08003af1 	.word	0x08003af1
 8003ab0:	08003af1 	.word	0x08003af1
 8003ab4:	08003af1 	.word	0x08003af1
 8003ab8:	08003af1 	.word	0x08003af1
 8003abc:	08003af1 	.word	0x08003af1
 8003ac0:	08003af9 	.word	0x08003af9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac8:	3308      	adds	r3, #8
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 ffc3 	bl	8004a58 <RCCEx_PLL2_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ad8:	e00f      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ade:	3328      	adds	r3, #40	; 0x28
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f001 f86a 	bl	8004bbc <RCCEx_PLL3_Config>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003aee:	e004      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003af6:	e000      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003afa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d10a      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b02:	4bbf      	ldr	r3, [pc, #764]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b06:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b10:	4abb      	ldr	r2, [pc, #748]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b12:	430b      	orrs	r3, r1
 8003b14:	6553      	str	r3, [r2, #84]	; 0x54
 8003b16:	e003      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f002 0302 	and.w	r3, r2, #2
 8003b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	d041      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d824      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b9d 	.word	0x08003b9d
 8003b54:	08003b69 	.word	0x08003b69
 8003b58:	08003b7f 	.word	0x08003b7f
 8003b5c:	08003b9d 	.word	0x08003b9d
 8003b60:	08003b9d 	.word	0x08003b9d
 8003b64:	08003b9d 	.word	0x08003b9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6c:	3308      	adds	r3, #8
 8003b6e:	2101      	movs	r1, #1
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 ff71 	bl	8004a58 <RCCEx_PLL2_Config>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b7c:	e00f      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b82:	3328      	adds	r3, #40	; 0x28
 8003b84:	2101      	movs	r1, #1
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 f818 	bl	8004bbc <RCCEx_PLL3_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b92:	e004      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b9a:	e000      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10a      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ba6:	4b96      	ldr	r3, [pc, #600]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	f023 0107 	bic.w	r1, r3, #7
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bb4:	4a92      	ldr	r2, [pc, #584]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	6553      	str	r3, [r2, #84]	; 0x54
 8003bba:	e003      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bcc:	f002 0304 	and.w	r3, r2, #4
 8003bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bda:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4313      	orrs	r3, r2
 8003be2:	d044      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bec:	2b05      	cmp	r3, #5
 8003bee:	d825      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003bf0:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c45 	.word	0x08003c45
 8003bfc:	08003c11 	.word	0x08003c11
 8003c00:	08003c27 	.word	0x08003c27
 8003c04:	08003c45 	.word	0x08003c45
 8003c08:	08003c45 	.word	0x08003c45
 8003c0c:	08003c45 	.word	0x08003c45
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c14:	3308      	adds	r3, #8
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 ff1d 	bl	8004a58 <RCCEx_PLL2_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c24:	e00f      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2a:	3328      	adds	r3, #40	; 0x28
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 ffc4 	bl	8004bbc <RCCEx_PLL3_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c3a:	e004      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c42:	e000      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10b      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c4e:	4b6c      	ldr	r3, [pc, #432]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c52:	f023 0107 	bic.w	r1, r3, #7
 8003c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5e:	4a68      	ldr	r2, [pc, #416]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c60:	430b      	orrs	r3, r1
 8003c62:	6593      	str	r3, [r2, #88]	; 0x58
 8003c64:	e003      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c76:	f002 0320 	and.w	r3, r2, #32
 8003c7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003c7e:	2300      	movs	r3, #0
 8003c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	d055      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c9a:	d033      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ca0:	d82c      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca6:	d02f      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cac:	d826      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cb2:	d02b      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003cb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cb8:	d820      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cbe:	d012      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cc4:	d81a      	bhi.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d022      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cce:	d115      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 febd 	bl	8004a58 <RCCEx_PLL2_Config>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ce4:	e015      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cea:	3328      	adds	r3, #40	; 0x28
 8003cec:	2102      	movs	r1, #2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 ff64 	bl	8004bbc <RCCEx_PLL3_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d02:	e006      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d04:	bf00      	nop
 8003d06:	e004      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d08:	bf00      	nop
 8003d0a:	e002      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d0c:	bf00      	nop
 8003d0e:	e000      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d1a:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d2a:	4a35      	ldr	r2, [pc, #212]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6553      	str	r3, [r2, #84]	; 0x54
 8003d30:	e003      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4313      	orrs	r3, r2
 8003d58:	d058      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d66:	d033      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003d68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003d6c:	d82c      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d72:	d02f      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d78:	d826      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d7e:	d02b      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003d80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d84:	d820      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d8a:	d012      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d90:	d81a      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d022      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d9a:	d115      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da0:	3308      	adds	r3, #8
 8003da2:	2100      	movs	r1, #0
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fe57 	bl	8004a58 <RCCEx_PLL2_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003db0:	e015      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db6:	3328      	adds	r3, #40	; 0x28
 8003db8:	2102      	movs	r1, #2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fefe 	bl	8004bbc <RCCEx_PLL3_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003dc6:	e00a      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dce:	e006      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dd0:	bf00      	nop
 8003dd2:	e004      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dd4:	bf00      	nop
 8003dd6:	e002      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dd8:	bf00      	nop
 8003dda:	e000      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10e      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003df6:	4a02      	ldr	r2, [pc, #8]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003dfc:	e006      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003dfe:	bf00      	nop
 8003e00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e22:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003e26:	460b      	mov	r3, r1
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	d055      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e38:	d033      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003e3a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e3e:	d82c      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e44:	d02f      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e4a:	d826      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e50:	d02b      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003e52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e56:	d820      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e5c:	d012      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e62:	d81a      	bhi.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d022      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6c:	d115      	bne.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e72:	3308      	adds	r3, #8
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fdee 	bl	8004a58 <RCCEx_PLL2_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e82:	e015      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e88:	3328      	adds	r3, #40	; 0x28
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fe95 	bl	8004bbc <RCCEx_PLL3_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ea0:	e006      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ea2:	bf00      	nop
 8003ea4:	e004      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ea6:	bf00      	nop
 8003ea8:	e002      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003eaa:	bf00      	nop
 8003eac:	e000      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003eb8:	4ba1      	ldr	r3, [pc, #644]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ec8:	4a9d      	ldr	r2, [pc, #628]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8003ece:	e003      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ed4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f002 0308 	and.w	r3, r2, #8
 8003ee4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003eee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	d01e      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0a:	3328      	adds	r3, #40	; 0x28
 8003f0c:	2102      	movs	r1, #2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fe54 	bl	8004bbc <RCCEx_PLL3_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f20:	4b87      	ldr	r3, [pc, #540]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f30:	4a83      	ldr	r2, [pc, #524]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f32:	430b      	orrs	r3, r1
 8003f34:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f002 0310 	and.w	r3, r2, #16
 8003f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f46:	2300      	movs	r3, #0
 8003f48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f4c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003f50:	460b      	mov	r3, r1
 8003f52:	4313      	orrs	r3, r2
 8003f54:	d01e      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f62:	d10c      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f68:	3328      	adds	r3, #40	; 0x28
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fe25 	bl	8004bbc <RCCEx_PLL3_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f7e:	4b70      	ldr	r3, [pc, #448]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f8e:	4a6c      	ldr	r2, [pc, #432]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f90:	430b      	orrs	r3, r1
 8003f92:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003fa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003faa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	d03e      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fc0:	d022      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fc6:	d81b      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd0:	d00b      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003fd2:	e015      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd8:	3308      	adds	r3, #8
 8003fda:	2100      	movs	r1, #0
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fd3b 	bl	8004a58 <RCCEx_PLL2_Config>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fe8:	e00f      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fee:	3328      	adds	r3, #40	; 0x28
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fde2 	bl	8004bbc <RCCEx_PLL3_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ffe:	e004      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004006:	e000      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800400a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10b      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004012:	4b4b      	ldr	r3, [pc, #300]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004016:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800401a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800401e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004022:	4a47      	ldr	r2, [pc, #284]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004024:	430b      	orrs	r3, r1
 8004026:	6593      	str	r3, [r2, #88]	; 0x58
 8004028:	e003      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800402a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800402e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800403e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004040:	2300      	movs	r3, #0
 8004042:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004044:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004048:	460b      	mov	r3, r1
 800404a:	4313      	orrs	r3, r2
 800404c:	d03b      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800404e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800405a:	d01f      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800405c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004060:	d818      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004066:	d003      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004068:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800406c:	d007      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800406e:	e011      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004070:	4b33      	ldr	r3, [pc, #204]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	4a32      	ldr	r2, [pc, #200]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800407a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800407c:	e00f      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004082:	3328      	adds	r3, #40	; 0x28
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f000 fd98 	bl	8004bbc <RCCEx_PLL3_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004092:	e004      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800409c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10b      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a6:	4b26      	ldr	r3, [pc, #152]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	4a22      	ldr	r2, [pc, #136]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6553      	str	r3, [r2, #84]	; 0x54
 80040bc:	e003      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80040d2:	673b      	str	r3, [r7, #112]	; 0x70
 80040d4:	2300      	movs	r3, #0
 80040d6:	677b      	str	r3, [r7, #116]	; 0x74
 80040d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80040dc:	460b      	mov	r3, r1
 80040de:	4313      	orrs	r3, r2
 80040e0:	d034      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d007      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80040f2:	e011      	b.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f4:	4b12      	ldr	r3, [pc, #72]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	4a11      	ldr	r2, [pc, #68]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004100:	e00e      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004106:	3308      	adds	r3, #8
 8004108:	2102      	movs	r1, #2
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fca4 	bl	8004a58 <RCCEx_PLL2_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004116:	e003      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800411e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004120:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10d      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800412a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004136:	4a02      	ldr	r2, [pc, #8]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004138:	430b      	orrs	r3, r1
 800413a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800413c:	e006      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800413e:	bf00      	nop
 8004140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004144:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004148:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004158:	66bb      	str	r3, [r7, #104]	; 0x68
 800415a:	2300      	movs	r3, #0
 800415c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800415e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004162:	460b      	mov	r3, r1
 8004164:	4313      	orrs	r3, r2
 8004166:	d00c      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800416c:	3328      	adds	r3, #40	; 0x28
 800416e:	2102      	movs	r1, #2
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fd23 	bl	8004bbc <RCCEx_PLL3_Config>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800418e:	663b      	str	r3, [r7, #96]	; 0x60
 8004190:	2300      	movs	r3, #0
 8004192:	667b      	str	r3, [r7, #100]	; 0x64
 8004194:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004198:	460b      	mov	r3, r1
 800419a:	4313      	orrs	r3, r2
 800419c:	d038      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041aa:	d018      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80041ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b0:	d811      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80041b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b6:	d014      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80041b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041bc:	d80b      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d011      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80041c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041c6:	d106      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041c8:	4bc3      	ldr	r3, [pc, #780]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	4ac2      	ldr	r2, [pc, #776]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80041d4:	e008      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041dc:	e004      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041de:	bf00      	nop
 80041e0:	e002      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041e2:	bf00      	nop
 80041e4:	e000      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041f0:	4bb9      	ldr	r3, [pc, #740]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004200:	4ab5      	ldr	r2, [pc, #724]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004202:	430b      	orrs	r3, r1
 8004204:	6553      	str	r3, [r2, #84]	; 0x54
 8004206:	e003      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800420c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800421c:	65bb      	str	r3, [r7, #88]	; 0x58
 800421e:	2300      	movs	r3, #0
 8004220:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004222:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004226:	460b      	mov	r3, r1
 8004228:	4313      	orrs	r3, r2
 800422a:	d009      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800422c:	4baa      	ldr	r3, [pc, #680]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800422e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004230:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800423a:	4aa7      	ldr	r2, [pc, #668]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800423c:	430b      	orrs	r3, r1
 800423e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800424c:	653b      	str	r3, [r7, #80]	; 0x50
 800424e:	2300      	movs	r3, #0
 8004250:	657b      	str	r3, [r7, #84]	; 0x54
 8004252:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004256:	460b      	mov	r3, r1
 8004258:	4313      	orrs	r3, r2
 800425a:	d00a      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800425c:	4b9e      	ldr	r3, [pc, #632]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004268:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800426c:	4a9a      	ldr	r2, [pc, #616]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800426e:	430b      	orrs	r3, r1
 8004270:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800427e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004280:	2300      	movs	r3, #0
 8004282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004284:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004288:	460b      	mov	r3, r1
 800428a:	4313      	orrs	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800428e:	4b92      	ldr	r3, [pc, #584]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004292:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004296:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800429a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800429c:	4a8e      	ldr	r2, [pc, #568]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800429e:	430b      	orrs	r3, r1
 80042a0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042aa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80042ae:	643b      	str	r3, [r7, #64]	; 0x40
 80042b0:	2300      	movs	r3, #0
 80042b2:	647b      	str	r3, [r7, #68]	; 0x44
 80042b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80042b8:	460b      	mov	r3, r1
 80042ba:	4313      	orrs	r3, r2
 80042bc:	d00e      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042be:	4b86      	ldr	r3, [pc, #536]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	4a85      	ldr	r2, [pc, #532]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042c8:	6113      	str	r3, [r2, #16]
 80042ca:	4b83      	ldr	r3, [pc, #524]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042cc:	6919      	ldr	r1, [r3, #16]
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80042d6:	4a80      	ldr	r2, [pc, #512]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042d8:	430b      	orrs	r3, r1
 80042da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80042e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ea:	2300      	movs	r3, #0
 80042ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80042f2:	460b      	mov	r3, r1
 80042f4:	4313      	orrs	r3, r2
 80042f6:	d009      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042f8:	4b77      	ldr	r3, [pc, #476]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004306:	4a74      	ldr	r2, [pc, #464]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004308:	430b      	orrs	r3, r1
 800430a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800430c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004318:	633b      	str	r3, [r7, #48]	; 0x30
 800431a:	2300      	movs	r3, #0
 800431c:	637b      	str	r3, [r7, #52]	; 0x34
 800431e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004322:	460b      	mov	r3, r1
 8004324:	4313      	orrs	r3, r2
 8004326:	d00a      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004328:	4b6b      	ldr	r3, [pc, #428]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800432a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004338:	4a67      	ldr	r2, [pc, #412]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800433a:	430b      	orrs	r3, r1
 800433c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004346:	2100      	movs	r1, #0
 8004348:	62b9      	str	r1, [r7, #40]	; 0x28
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004350:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004354:	460b      	mov	r3, r1
 8004356:	4313      	orrs	r3, r2
 8004358:	d011      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800435a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435e:	3308      	adds	r3, #8
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fb78 	bl	8004a58 <RCCEx_PLL2_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800436e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800437a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	2100      	movs	r1, #0
 8004388:	6239      	str	r1, [r7, #32]
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
 8004390:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004394:	460b      	mov	r3, r1
 8004396:	4313      	orrs	r3, r2
 8004398:	d011      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439e:	3308      	adds	r3, #8
 80043a0:	2101      	movs	r1, #1
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fb58 	bl	8004a58 <RCCEx_PLL2_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80043ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80043be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c6:	2100      	movs	r1, #0
 80043c8:	61b9      	str	r1, [r7, #24]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80043d4:	460b      	mov	r3, r1
 80043d6:	4313      	orrs	r3, r2
 80043d8:	d011      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043de:	3308      	adds	r3, #8
 80043e0:	2102      	movs	r1, #2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fb38 	bl	8004a58 <RCCEx_PLL2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80043ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004406:	2100      	movs	r1, #0
 8004408:	6139      	str	r1, [r7, #16]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004414:	460b      	mov	r3, r1
 8004416:	4313      	orrs	r3, r2
 8004418:	d011      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800441e:	3328      	adds	r3, #40	; 0x28
 8004420:	2100      	movs	r1, #0
 8004422:	4618      	mov	r0, r3
 8004424:	f000 fbca 	bl	8004bbc <RCCEx_PLL3_Config>
 8004428:	4603      	mov	r3, r0
 800442a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800442e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800443a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800443e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	2100      	movs	r1, #0
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004454:	460b      	mov	r3, r1
 8004456:	4313      	orrs	r3, r2
 8004458:	d011      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445e:	3328      	adds	r3, #40	; 0x28
 8004460:	2101      	movs	r1, #1
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fbaa 	bl	8004bbc <RCCEx_PLL3_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800446e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004476:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800447a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800447e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	2100      	movs	r1, #0
 8004488:	6039      	str	r1, [r7, #0]
 800448a:	f003 0320 	and.w	r3, r3, #32
 800448e:	607b      	str	r3, [r7, #4]
 8004490:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004494:	460b      	mov	r3, r1
 8004496:	4313      	orrs	r3, r2
 8004498:	d011      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449e:	3328      	adds	r3, #40	; 0x28
 80044a0:	2102      	movs	r1, #2
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fb8a 	bl	8004bbc <RCCEx_PLL3_Config>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80044ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80044be:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	e000      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80044d2:	46bd      	mov	sp, r7
 80044d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044d8:	58024400 	.word	0x58024400

080044dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80044e0:	f7fe fd96 	bl	8003010 <HAL_RCC_GetHCLKFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	4904      	ldr	r1, [pc, #16]	; (8004504 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	58024400 	.word	0x58024400
 8004504:	08008090 	.word	0x08008090

08004508 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004508:	b480      	push	{r7}
 800450a:	b089      	sub	sp, #36	; 0x24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004510:	4ba1      	ldr	r3, [pc, #644]	; (8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800451a:	4b9f      	ldr	r3, [pc, #636]	; (8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	0b1b      	lsrs	r3, r3, #12
 8004520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004524:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004526:	4b9c      	ldr	r3, [pc, #624]	; (8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	091b      	lsrs	r3, r3, #4
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004532:	4b99      	ldr	r3, [pc, #612]	; (8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004536:	08db      	lsrs	r3, r3, #3
 8004538:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	fb02 f303 	mul.w	r3, r2, r3
 8004542:	ee07 3a90 	vmov	s15, r3
 8004546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8111 	beq.w	8004778 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	2b02      	cmp	r3, #2
 800455a:	f000 8083 	beq.w	8004664 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	2b02      	cmp	r3, #2
 8004562:	f200 80a1 	bhi.w	80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d056      	beq.n	8004620 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004572:	e099      	b.n	80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004574:	4b88      	ldr	r3, [pc, #544]	; (8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d02d      	beq.n	80045dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004580:	4b85      	ldr	r3, [pc, #532]	; (8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	08db      	lsrs	r3, r3, #3
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	4a84      	ldr	r2, [pc, #528]	; (800479c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
 8004590:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	ee07 3a90 	vmov	s15, r3
 8004598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045aa:	4b7b      	ldr	r3, [pc, #492]	; (8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80045be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045da:	e087      	b.n	80046ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80045ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ee:	4b6a      	ldr	r3, [pc, #424]	; (8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004602:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800460a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800460e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800461a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800461e:	e065      	b.n	80046ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800462e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004632:	4b59      	ldr	r3, [pc, #356]	; (8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004642:	ed97 6a03 	vldr	s12, [r7, #12]
 8004646:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800464a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800464e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800465a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004662:	e043      	b.n	80046ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	ee07 3a90 	vmov	s15, r3
 800466a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004676:	4b48      	ldr	r3, [pc, #288]	; (8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004686:	ed97 6a03 	vldr	s12, [r7, #12]
 800468a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800468e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800469a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800469e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046a6:	e021      	b.n	80046ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ba:	4b37      	ldr	r3, [pc, #220]	; (8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80046ec:	4b2a      	ldr	r3, [pc, #168]	; (8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	0a5b      	lsrs	r3, r3, #9
 80046f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004702:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004706:	edd7 6a07 	vldr	s13, [r7, #28]
 800470a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800470e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004712:	ee17 2a90 	vmov	r2, s15
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800471a:	4b1f      	ldr	r3, [pc, #124]	; (8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	0c1b      	lsrs	r3, r3, #16
 8004720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004724:	ee07 3a90 	vmov	s15, r3
 8004728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004734:	edd7 6a07 	vldr	s13, [r7, #28]
 8004738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800473c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004740:	ee17 2a90 	vmov	r2, s15
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004748:	4b13      	ldr	r3, [pc, #76]	; (8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474c:	0e1b      	lsrs	r3, r3, #24
 800474e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800475e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004762:	edd7 6a07 	vldr	s13, [r7, #28]
 8004766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800476e:	ee17 2a90 	vmov	r2, s15
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004776:	e008      	b.n	800478a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	609a      	str	r2, [r3, #8]
}
 800478a:	bf00      	nop
 800478c:	3724      	adds	r7, #36	; 0x24
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	58024400 	.word	0x58024400
 800479c:	03d09000 	.word	0x03d09000
 80047a0:	46000000 	.word	0x46000000
 80047a4:	4c742400 	.word	0x4c742400
 80047a8:	4a742400 	.word	0x4a742400
 80047ac:	4bbebc20 	.word	0x4bbebc20

080047b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b089      	sub	sp, #36	; 0x24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047b8:	4ba1      	ldr	r3, [pc, #644]	; (8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80047c2:	4b9f      	ldr	r3, [pc, #636]	; (8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	0d1b      	lsrs	r3, r3, #20
 80047c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80047ce:	4b9c      	ldr	r3, [pc, #624]	; (8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	0a1b      	lsrs	r3, r3, #8
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80047da:	4b99      	ldr	r3, [pc, #612]	; (8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	08db      	lsrs	r3, r3, #3
 80047e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	fb02 f303 	mul.w	r3, r2, r3
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8111 	beq.w	8004a20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b02      	cmp	r3, #2
 8004802:	f000 8083 	beq.w	800490c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b02      	cmp	r3, #2
 800480a:	f200 80a1 	bhi.w	8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d003      	beq.n	800481c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d056      	beq.n	80048c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800481a:	e099      	b.n	8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800481c:	4b88      	ldr	r3, [pc, #544]	; (8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d02d      	beq.n	8004884 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004828:	4b85      	ldr	r3, [pc, #532]	; (8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	08db      	lsrs	r3, r3, #3
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	4a84      	ldr	r2, [pc, #528]	; (8004a44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004834:	fa22 f303 	lsr.w	r3, r2, r3
 8004838:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	ee07 3a90 	vmov	s15, r3
 8004840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004852:	4b7b      	ldr	r3, [pc, #492]	; (8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004862:	ed97 6a03 	vldr	s12, [r7, #12]
 8004866:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800486a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800486e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800487e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004882:	e087      	b.n	8004994 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004896:	4b6a      	ldr	r3, [pc, #424]	; (8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048c6:	e065      	b.n	8004994 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048da:	4b59      	ldr	r3, [pc, #356]	; (8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004906:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800490a:	e043      	b.n	8004994 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004916:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800491a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800491e:	4b48      	ldr	r3, [pc, #288]	; (8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800492e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004932:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800493a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800493e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800494a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800494e:	e021      	b.n	8004994 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800495e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004962:	4b37      	ldr	r3, [pc, #220]	; (8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496a:	ee07 3a90 	vmov	s15, r3
 800496e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004972:	ed97 6a03 	vldr	s12, [r7, #12]
 8004976:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800497a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800497e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800498a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004992:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004994:	4b2a      	ldr	r3, [pc, #168]	; (8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004998:	0a5b      	lsrs	r3, r3, #9
 800499a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ba:	ee17 2a90 	vmov	r2, s15
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80049c2:	4b1f      	ldr	r3, [pc, #124]	; (8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	0c1b      	lsrs	r3, r3, #16
 80049c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049cc:	ee07 3a90 	vmov	s15, r3
 80049d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80049e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e8:	ee17 2a90 	vmov	r2, s15
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80049f0:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	0e1b      	lsrs	r3, r3, #24
 80049f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a16:	ee17 2a90 	vmov	r2, s15
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a1e:	e008      	b.n	8004a32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	609a      	str	r2, [r3, #8]
}
 8004a32:	bf00      	nop
 8004a34:	3724      	adds	r7, #36	; 0x24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	58024400 	.word	0x58024400
 8004a44:	03d09000 	.word	0x03d09000
 8004a48:	46000000 	.word	0x46000000
 8004a4c:	4c742400 	.word	0x4c742400
 8004a50:	4a742400 	.word	0x4a742400
 8004a54:	4bbebc20 	.word	0x4bbebc20

08004a58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a66:	4b53      	ldr	r3, [pc, #332]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	d101      	bne.n	8004a76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e099      	b.n	8004baa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a76:	4b4f      	ldr	r3, [pc, #316]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a4e      	ldr	r2, [pc, #312]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004a7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a82:	f7fc ff6b 	bl	800195c <HAL_GetTick>
 8004a86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a88:	e008      	b.n	8004a9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a8a:	f7fc ff67 	bl	800195c <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e086      	b.n	8004baa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a9c:	4b45      	ldr	r3, [pc, #276]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f0      	bne.n	8004a8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004aa8:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	031b      	lsls	r3, r3, #12
 8004ab6:	493f      	ldr	r1, [pc, #252]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	628b      	str	r3, [r1, #40]	; 0x28
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	025b      	lsls	r3, r3, #9
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	041b      	lsls	r3, r3, #16
 8004ada:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004aec:	4931      	ldr	r1, [pc, #196]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004af2:	4b30      	ldr	r3, [pc, #192]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	492d      	ldr	r1, [pc, #180]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b04:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	f023 0220 	bic.w	r2, r3, #32
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	4928      	ldr	r1, [pc, #160]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b16:	4b27      	ldr	r3, [pc, #156]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b1c:	f023 0310 	bic.w	r3, r3, #16
 8004b20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b26:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <RCCEx_PLL2_Config+0x160>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	69d2      	ldr	r2, [r2, #28]
 8004b2e:	00d2      	lsls	r2, r2, #3
 8004b30:	4920      	ldr	r1, [pc, #128]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b36:	4b1f      	ldr	r3, [pc, #124]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b3c:	f043 0310 	orr.w	r3, r3, #16
 8004b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d106      	bne.n	8004b56 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b48:	4b1a      	ldr	r3, [pc, #104]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b54:	e00f      	b.n	8004b76 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d106      	bne.n	8004b6a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b5c:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b60:	4a14      	ldr	r2, [pc, #80]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b68:	e005      	b.n	8004b76 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b6a:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	4a11      	ldr	r2, [pc, #68]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b76:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a0e      	ldr	r2, [pc, #56]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b82:	f7fc feeb 	bl	800195c <HAL_GetTick>
 8004b86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b88:	e008      	b.n	8004b9c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b8a:	f7fc fee7 	bl	800195c <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e006      	b.n	8004baa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <RCCEx_PLL2_Config+0x15c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0f0      	beq.n	8004b8a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	58024400 	.word	0x58024400
 8004bb8:	ffff0007 	.word	0xffff0007

08004bbc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bca:	4b53      	ldr	r3, [pc, #332]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d101      	bne.n	8004bda <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e099      	b.n	8004d0e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bda:	4b4f      	ldr	r3, [pc, #316]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a4e      	ldr	r2, [pc, #312]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be6:	f7fc feb9 	bl	800195c <HAL_GetTick>
 8004bea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004bec:	e008      	b.n	8004c00 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bee:	f7fc feb5 	bl	800195c <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e086      	b.n	8004d0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c00:	4b45      	ldr	r3, [pc, #276]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f0      	bne.n	8004bee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c0c:	4b42      	ldr	r3, [pc, #264]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	051b      	lsls	r3, r3, #20
 8004c1a:	493f      	ldr	r1, [pc, #252]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	628b      	str	r3, [r1, #40]	; 0x28
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	025b      	lsls	r3, r3, #9
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	041b      	lsls	r3, r3, #16
 8004c3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	061b      	lsls	r3, r3, #24
 8004c4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c50:	4931      	ldr	r1, [pc, #196]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c56:	4b30      	ldr	r3, [pc, #192]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	492d      	ldr	r1, [pc, #180]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c68:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	4928      	ldr	r1, [pc, #160]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c7a:	4b27      	ldr	r3, [pc, #156]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7e:	4a26      	ldr	r2, [pc, #152]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c86:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c8a:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <RCCEx_PLL3_Config+0x160>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	69d2      	ldr	r2, [r2, #28]
 8004c92:	00d2      	lsls	r2, r2, #3
 8004c94:	4920      	ldr	r1, [pc, #128]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c9a:	4b1f      	ldr	r3, [pc, #124]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d106      	bne.n	8004cba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004cac:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	4a19      	ldr	r2, [pc, #100]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cb8:	e00f      	b.n	8004cda <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d106      	bne.n	8004cce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004cc0:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004cc6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ccc:	e005      	b.n	8004cda <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004cce:	4b12      	ldr	r3, [pc, #72]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	4a11      	ldr	r2, [pc, #68]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cd8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cda:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a0e      	ldr	r2, [pc, #56]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce6:	f7fc fe39 	bl	800195c <HAL_GetTick>
 8004cea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004cec:	e008      	b.n	8004d00 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cee:	f7fc fe35 	bl	800195c <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e006      	b.n	8004d0e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <RCCEx_PLL3_Config+0x15c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f0      	beq.n	8004cee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	58024400 	.word	0x58024400
 8004d1c:	ffff0007 	.word	0xffff0007

08004d20 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e10f      	b.n	8004f52 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a87      	ldr	r2, [pc, #540]	; (8004f5c <HAL_SPI_Init+0x23c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00f      	beq.n	8004d62 <HAL_SPI_Init+0x42>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a86      	ldr	r2, [pc, #536]	; (8004f60 <HAL_SPI_Init+0x240>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00a      	beq.n	8004d62 <HAL_SPI_Init+0x42>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a84      	ldr	r2, [pc, #528]	; (8004f64 <HAL_SPI_Init+0x244>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d005      	beq.n	8004d62 <HAL_SPI_Init+0x42>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	d901      	bls.n	8004d62 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e0f7      	b.n	8004f52 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 ff76 	bl	8005c54 <SPI_GetPacketSize>
 8004d68:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a7b      	ldr	r2, [pc, #492]	; (8004f5c <HAL_SPI_Init+0x23c>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d00c      	beq.n	8004d8e <HAL_SPI_Init+0x6e>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a79      	ldr	r2, [pc, #484]	; (8004f60 <HAL_SPI_Init+0x240>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d007      	beq.n	8004d8e <HAL_SPI_Init+0x6e>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a78      	ldr	r2, [pc, #480]	; (8004f64 <HAL_SPI_Init+0x244>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d002      	beq.n	8004d8e <HAL_SPI_Init+0x6e>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d811      	bhi.n	8004db2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004d92:	4a72      	ldr	r2, [pc, #456]	; (8004f5c <HAL_SPI_Init+0x23c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d009      	beq.n	8004dac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a70      	ldr	r2, [pc, #448]	; (8004f60 <HAL_SPI_Init+0x240>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d004      	beq.n	8004dac <HAL_SPI_Init+0x8c>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a6f      	ldr	r2, [pc, #444]	; (8004f64 <HAL_SPI_Init+0x244>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d104      	bne.n	8004db6 <HAL_SPI_Init+0x96>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b10      	cmp	r3, #16
 8004db0:	d901      	bls.n	8004db6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e0cd      	b.n	8004f52 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fc fb44 	bl	8001458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0201 	bic.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004df2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dfc:	d119      	bne.n	8004e32 <HAL_SPI_Init+0x112>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e06:	d103      	bne.n	8004e10 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d008      	beq.n	8004e22 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10c      	bne.n	8004e32 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004e1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e20:	d107      	bne.n	8004e32 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00f      	beq.n	8004e5e <HAL_SPI_Init+0x13e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d90b      	bls.n	8004e5e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	601a      	str	r2, [r3, #0]
 8004e5c:	e007      	b.n	8004e6e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69da      	ldr	r2, [r3, #28]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e76:	431a      	orrs	r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e80:	ea42 0103 	orr.w	r1, r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ece:	ea42 0103 	orr.w	r1, r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d113      	bne.n	8004f0e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f0c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40013000 	.word	0x40013000
 8004f60:	40003800 	.word	0x40003800
 8004f64:	40003c00 	.word	0x40003c00

08004f68 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4613      	mov	r3, r2
 8004f76:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	3320      	adds	r3, #32
 8004f7e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f80:	2300      	movs	r3, #0
 8004f82:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_SPI_Transmit+0x2a>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e1e1      	b.n	8005356 <HAL_SPI_Transmit+0x3ee>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f9a:	f7fc fcdf 	bl	800195c <HAL_GetTick>
 8004f9e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d007      	beq.n	8004fbc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
 8004fae:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004fb8:	7efb      	ldrb	r3, [r7, #27]
 8004fba:	e1cc      	b.n	8005356 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <HAL_SPI_Transmit+0x60>
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d107      	bne.n	8004fd8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004fd4:	7efb      	ldrb	r3, [r7, #27]
 8004fd6:	e1be      	b.n	8005356 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2203      	movs	r2, #3
 8004fdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	88fa      	ldrh	r2, [r7, #6]
 8004ff2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	88fa      	ldrh	r2, [r7, #6]
 8004ffa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005028:	d108      	bne.n	800503c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	e009      	b.n	8005050 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800504e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	4b96      	ldr	r3, [pc, #600]	; (80052b0 <HAL_SPI_Transmit+0x348>)
 8005058:	4013      	ands	r3, r2
 800505a:	88f9      	ldrh	r1, [r7, #6]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	430b      	orrs	r3, r1
 8005062:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800507c:	d107      	bne.n	800508e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800508c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	2b0f      	cmp	r3, #15
 8005094:	d947      	bls.n	8005126 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005096:	e03f      	b.n	8005118 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d114      	bne.n	80050d0 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b6:	1d1a      	adds	r2, r3, #4
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80050ce:	e023      	b.n	8005118 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050d0:	f7fc fc44 	bl	800195c <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d803      	bhi.n	80050e8 <HAL_SPI_Transmit+0x180>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e6:	d102      	bne.n	80050ee <HAL_SPI_Transmit+0x186>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d114      	bne.n	8005118 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 fce2 	bl	8005ab8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005102:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e11e      	b.n	8005356 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1b9      	bne.n	8005098 <HAL_SPI_Transmit+0x130>
 8005124:	e0f1      	b.n	800530a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b07      	cmp	r3, #7
 800512c:	f240 80e6 	bls.w	80052fc <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005130:	e05d      	b.n	80051ee <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b02      	cmp	r3, #2
 800513e:	d132      	bne.n	80051a6 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	d918      	bls.n	800517e <HAL_SPI_Transmit+0x216>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d014      	beq.n	800517e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005164:	1d1a      	adds	r2, r3, #4
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b02      	subs	r3, #2
 8005174:	b29a      	uxth	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800517c:	e037      	b.n	80051ee <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005182:	881a      	ldrh	r2, [r3, #0]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518c:	1c9a      	adds	r2, r3, #2
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80051a4:	e023      	b.n	80051ee <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051a6:	f7fc fbd9 	bl	800195c <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d803      	bhi.n	80051be <HAL_SPI_Transmit+0x256>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051bc:	d102      	bne.n	80051c4 <HAL_SPI_Transmit+0x25c>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d114      	bne.n	80051ee <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fc77 	bl	8005ab8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e0b3      	b.n	8005356 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d19b      	bne.n	8005132 <HAL_SPI_Transmit+0x1ca>
 80051fa:	e086      	b.n	800530a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b02      	cmp	r3, #2
 8005208:	d154      	bne.n	80052b4 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b03      	cmp	r3, #3
 8005214:	d918      	bls.n	8005248 <HAL_SPI_Transmit+0x2e0>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	d914      	bls.n	8005248 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522e:	1d1a      	adds	r2, r3, #4
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b04      	subs	r3, #4
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005246:	e059      	b.n	80052fc <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	d917      	bls.n	8005284 <HAL_SPI_Transmit+0x31c>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005258:	2b00      	cmp	r3, #0
 800525a:	d013      	beq.n	8005284 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005260:	881a      	ldrh	r2, [r3, #0]
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526a:	1c9a      	adds	r2, r3, #2
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b02      	subs	r3, #2
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005282:	e03b      	b.n	80052fc <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3320      	adds	r3, #32
 800528e:	7812      	ldrb	r2, [r2, #0]
 8005290:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80052ae:	e025      	b.n	80052fc <HAL_SPI_Transmit+0x394>
 80052b0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052b4:	f7fc fb52 	bl	800195c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d803      	bhi.n	80052cc <HAL_SPI_Transmit+0x364>
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052ca:	d102      	bne.n	80052d2 <HAL_SPI_Transmit+0x36a>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d114      	bne.n	80052fc <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fbf0 	bl	8005ab8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e02c      	b.n	8005356 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	f47f af79 	bne.w	80051fc <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2200      	movs	r2, #0
 8005312:	2108      	movs	r1, #8
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 fc6f 	bl	8005bf8 <SPI_WaitOnFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005326:	f043 0220 	orr.w	r2, r3, #32
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 fbc1 	bl	8005ab8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8005354:	7efb      	ldrb	r3, [r7, #27]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3720      	adds	r7, #32
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop

08005360 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	603b      	str	r3, [r7, #0]
 800536c:	4613      	mov	r3, r2
 800536e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3330      	adds	r3, #48	; 0x30
 800537a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_SPI_Receive+0x2a>
 8005386:	2302      	movs	r3, #2
 8005388:	e173      	b.n	8005672 <HAL_SPI_Receive+0x312>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005392:	f7fc fae3 	bl	800195c <HAL_GetTick>
 8005396:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d007      	beq.n	80053b4 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80053a4:	2302      	movs	r3, #2
 80053a6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80053b0:	7ffb      	ldrb	r3, [r7, #31]
 80053b2:	e15e      	b.n	8005672 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d002      	beq.n	80053c0 <HAL_SPI_Receive+0x60>
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d107      	bne.n	80053d0 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80053cc:	7ffb      	ldrb	r3, [r7, #31]
 80053ce:	e150      	b.n	8005672 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2204      	movs	r2, #4
 80053d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	88fa      	ldrh	r2, [r7, #6]
 80053ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	88fa      	ldrh	r2, [r7, #6]
 80053f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005420:	d108      	bne.n	8005434 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e009      	b.n	8005448 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005446:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	4b8b      	ldr	r3, [pc, #556]	; (800567c <HAL_SPI_Receive+0x31c>)
 8005450:	4013      	ands	r3, r2
 8005452:	88f9      	ldrh	r1, [r7, #6]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	6812      	ldr	r2, [r2, #0]
 8005458:	430b      	orrs	r3, r1
 800545a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005474:	d107      	bne.n	8005486 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005484:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	2b0f      	cmp	r3, #15
 800548c:	d948      	bls.n	8005520 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800548e:	e040      	b.n	8005512 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	695a      	ldr	r2, [r3, #20]
 8005496:	f248 0308 	movw	r3, #32776	; 0x8008
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d014      	beq.n	80054ca <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054aa:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054b0:	1d1a      	adds	r2, r3, #4
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80054c8:	e023      	b.n	8005512 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ca:	f7fc fa47 	bl	800195c <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d803      	bhi.n	80054e2 <HAL_SPI_Receive+0x182>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054e0:	d102      	bne.n	80054e8 <HAL_SPI_Receive+0x188>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d114      	bne.n	8005512 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 fae5 	bl	8005ab8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e0af      	b.n	8005672 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1b8      	bne.n	8005490 <HAL_SPI_Receive+0x130>
 800551e:	e095      	b.n	800564c <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	2b07      	cmp	r3, #7
 8005526:	f240 808b 	bls.w	8005640 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800552a:	e03f      	b.n	80055ac <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b01      	cmp	r3, #1
 8005538:	d114      	bne.n	8005564 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	8812      	ldrh	r2, [r2, #0]
 8005542:	b292      	uxth	r2, r2
 8005544:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800554a:	1c9a      	adds	r2, r3, #2
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005562:	e023      	b.n	80055ac <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005564:	f7fc f9fa 	bl	800195c <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d803      	bhi.n	800557c <HAL_SPI_Receive+0x21c>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800557a:	d102      	bne.n	8005582 <HAL_SPI_Receive+0x222>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d114      	bne.n	80055ac <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 fa98 	bl	8005ab8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005596:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e062      	b.n	8005672 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1b9      	bne.n	800552c <HAL_SPI_Receive+0x1cc>
 80055b8:	e048      	b.n	800564c <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d117      	bne.n	80055f8 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d4:	7812      	ldrb	r2, [r2, #0]
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80055f6:	e023      	b.n	8005640 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055f8:	f7fc f9b0 	bl	800195c <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d803      	bhi.n	8005610 <HAL_SPI_Receive+0x2b0>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800560e:	d102      	bne.n	8005616 <HAL_SPI_Receive+0x2b6>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d114      	bne.n	8005640 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fa4e 	bl	8005ab8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800562a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e018      	b.n	8005672 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005646:	b29b      	uxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1b6      	bne.n	80055ba <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 fa33 	bl	8005ab8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005668:	2b00      	cmp	r3, #0
 800566a:	d001      	beq.n	8005670 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e000      	b.n	8005672 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8005670:	7ffb      	ldrb	r3, [r7, #31]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3720      	adds	r7, #32
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	ffff0000 	.word	0xffff0000

08005680 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08c      	sub	sp, #48	; 0x30
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3320      	adds	r3, #32
 800569a:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3330      	adds	r3, #48	; 0x30
 80056a2:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <HAL_SPI_TransmitReceive+0x32>
 80056ae:	2302      	movs	r3, #2
 80056b0:	e1fd      	b.n	8005aae <HAL_SPI_TransmitReceive+0x42e>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ba:	f7fc f94f 	bl	800195c <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80056c0:	887b      	ldrh	r3, [r7, #2]
 80056c2:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 80056c4:	887b      	ldrh	r3, [r7, #2]
 80056c6:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d009      	beq.n	80056e8 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 80056d4:	2302      	movs	r3, #2
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80056e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056e6:	e1e2      	b.n	8005aae <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_SPI_TransmitReceive+0x7a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <HAL_SPI_TransmitReceive+0x7a>
 80056f4:	887b      	ldrh	r3, [r7, #2]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d109      	bne.n	800570e <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005708:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800570c:	e1cf      	b.n	8005aae <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2205      	movs	r2, #5
 8005712:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	887a      	ldrh	r2, [r7, #2]
 8005728:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	887a      	ldrh	r2, [r7, #2]
 8005730:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	887a      	ldrh	r2, [r7, #2]
 800573e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	887a      	ldrh	r2, [r7, #2]
 8005746:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8005764:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	4b82      	ldr	r3, [pc, #520]	; (8005978 <HAL_SPI_TransmitReceive+0x2f8>)
 800576e:	4013      	ands	r3, r2
 8005770:	8879      	ldrh	r1, [r7, #2]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	6812      	ldr	r2, [r2, #0]
 8005776:	430b      	orrs	r3, r1
 8005778:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0201 	orr.w	r2, r2, #1
 8005788:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005792:	d107      	bne.n	80057a4 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b0f      	cmp	r3, #15
 80057aa:	d970      	bls.n	800588e <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80057ac:	e068      	b.n	8005880 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d11a      	bne.n	80057f2 <HAL_SPI_TransmitReceive+0x172>
 80057bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d017      	beq.n	80057f2 <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	6812      	ldr	r2, [r2, #0]
 80057cc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d2:	1d1a      	adds	r2, r3, #4
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80057f0:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695a      	ldr	r2, [r3, #20]
 80057f8:	f248 0308 	movw	r3, #32776	; 0x8008
 80057fc:	4013      	ands	r3, r2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d01a      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x1b8>
 8005802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005804:	2b00      	cmp	r3, #0
 8005806:	d017      	beq.n	8005838 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005810:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005812:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005818:	1d1a      	adds	r2, r3, #4
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005836:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005838:	f7fc f890 	bl	800195c <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005844:	429a      	cmp	r2, r3
 8005846:	d803      	bhi.n	8005850 <HAL_SPI_TransmitReceive+0x1d0>
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800584e:	d102      	bne.n	8005856 <HAL_SPI_TransmitReceive+0x1d6>
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	2b00      	cmp	r3, #0
 8005854:	d114      	bne.n	8005880 <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 f92e 	bl	8005ab8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800586a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e116      	b.n	8005aae <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005880:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005882:	2b00      	cmp	r3, #0
 8005884:	d193      	bne.n	80057ae <HAL_SPI_TransmitReceive+0x12e>
 8005886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005888:	2b00      	cmp	r3, #0
 800588a:	d190      	bne.n	80057ae <HAL_SPI_TransmitReceive+0x12e>
 800588c:	e0e8      	b.n	8005a60 <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	2b07      	cmp	r3, #7
 8005894:	f240 80de 	bls.w	8005a54 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005898:	e066      	b.n	8005968 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d119      	bne.n	80058dc <HAL_SPI_TransmitReceive+0x25c>
 80058a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d016      	beq.n	80058dc <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b2:	881a      	ldrh	r2, [r3, #0]
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058bc:	1c9a      	adds	r2, r3, #2
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80058da:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d11a      	bne.n	8005920 <HAL_SPI_TransmitReceive+0x2a0>
 80058ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d017      	beq.n	8005920 <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	8812      	ldrh	r2, [r2, #0]
 80058f8:	b292      	uxth	r2, r2
 80058fa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005900:	1c9a      	adds	r2, r3, #2
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800590c:	b29b      	uxth	r3, r3
 800590e:	3b01      	subs	r3, #1
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800591e:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005920:	f7fc f81c 	bl	800195c <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800592c:	429a      	cmp	r2, r3
 800592e:	d803      	bhi.n	8005938 <HAL_SPI_TransmitReceive+0x2b8>
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005936:	d102      	bne.n	800593e <HAL_SPI_TransmitReceive+0x2be>
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	2b00      	cmp	r3, #0
 800593c:	d114      	bne.n	8005968 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 f8ba 	bl	8005ab8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005952:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e0a2      	b.n	8005aae <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005968:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800596a:	2b00      	cmp	r3, #0
 800596c:	d195      	bne.n	800589a <HAL_SPI_TransmitReceive+0x21a>
 800596e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	d192      	bne.n	800589a <HAL_SPI_TransmitReceive+0x21a>
 8005974:	e074      	b.n	8005a60 <HAL_SPI_TransmitReceive+0x3e0>
 8005976:	bf00      	nop
 8005978:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b02      	cmp	r3, #2
 8005988:	d11b      	bne.n	80059c2 <HAL_SPI_TransmitReceive+0x342>
 800598a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800598c:	2b00      	cmp	r3, #0
 800598e:	d018      	beq.n	80059c2 <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3320      	adds	r3, #32
 800599a:	7812      	ldrb	r2, [r2, #0]
 800599c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a2:	1c5a      	adds	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059c0:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f003 0301 	and.w	r3, r3, #1
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d11d      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x38c>
 80059d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d01a      	beq.n	8005a0c <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e2:	7812      	ldrb	r2, [r2, #0]
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a0a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a0c:	f7fb ffa6 	bl	800195c <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d803      	bhi.n	8005a24 <HAL_SPI_TransmitReceive+0x3a4>
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a22:	d102      	bne.n	8005a2a <HAL_SPI_TransmitReceive+0x3aa>
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d114      	bne.n	8005a54 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f844 	bl	8005ab8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e02c      	b.n	8005aae <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d190      	bne.n	800597c <HAL_SPI_TransmitReceive+0x2fc>
 8005a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d18d      	bne.n	800597c <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	2200      	movs	r2, #0
 8005a68:	2108      	movs	r1, #8
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 f8c4 	bl	8005bf8 <SPI_WaitOnFlagUntilTimeout>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d007      	beq.n	8005a86 <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a7c:	f043 0220 	orr.w	r2, r3, #32
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f816 	bl	8005ab8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e001      	b.n	8005aae <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 8005aaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3728      	adds	r7, #40	; 0x28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop

08005ab8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	699a      	ldr	r2, [r3, #24]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0208 	orr.w	r2, r2, #8
 8005ad6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699a      	ldr	r2, [r3, #24]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0210 	orr.w	r2, r2, #16
 8005ae6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0201 	bic.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6919      	ldr	r1, [r3, #16]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	4b3c      	ldr	r3, [pc, #240]	; (8005bf4 <SPI_CloseTransfer+0x13c>)
 8005b04:	400b      	ands	r3, r1
 8005b06:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005b16:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b04      	cmp	r3, #4
 8005b22:	d014      	beq.n	8005b4e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00f      	beq.n	8005b4e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0220 	orr.w	r2, r2, #32
 8005b4c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b03      	cmp	r3, #3
 8005b58:	d014      	beq.n	8005b84 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00f      	beq.n	8005b84 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6a:	f043 0204 	orr.w	r2, r3, #4
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b82:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00f      	beq.n	8005bae <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b94:	f043 0201 	orr.w	r2, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	699a      	ldr	r2, [r3, #24]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bac:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00f      	beq.n	8005bd8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bbe:	f043 0208 	orr.w	r2, r3, #8
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	699a      	ldr	r2, [r3, #24]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bd6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005be8:	bf00      	nop
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	fffffc90 	.word	0xfffffc90

08005bf8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	4613      	mov	r3, r2
 8005c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005c08:	e010      	b.n	8005c2c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c0a:	f7fb fea7 	bl	800195c <HAL_GetTick>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d803      	bhi.n	8005c22 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c20:	d102      	bne.n	8005c28 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e00f      	b.n	8005c4c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	695a      	ldr	r2, [r3, #20]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	4013      	ands	r3, r2
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	bf0c      	ite	eq
 8005c3c:	2301      	moveq	r3, #1
 8005c3e:	2300      	movne	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	461a      	mov	r2, r3
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d0df      	beq.n	8005c0a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	095b      	lsrs	r3, r3, #5
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	3307      	adds	r3, #7
 8005c72:	08db      	lsrs	r3, r3, #3
 8005c74:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	fb02 f303 	mul.w	r3, r2, r3
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b082      	sub	sp, #8
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e042      	b.n	8005d22 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7fb fc60 	bl	8001574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2224      	movs	r2, #36	; 0x24
 8005cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0201 	bic.w	r2, r2, #1
 8005cca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f8bb 	bl	8005e48 <UART_SetConfig>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d101      	bne.n	8005cdc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e022      	b.n	8005d22 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fe17 	bl	8006918 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cf8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f042 0201 	orr.w	r2, r2, #1
 8005d18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fe9e 	bl	8006a5c <UART_CheckIdleState>
 8005d20:	4603      	mov	r3, r0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b08a      	sub	sp, #40	; 0x28
 8005d2e:	af02      	add	r7, sp, #8
 8005d30:	60f8      	str	r0, [r7, #12]
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	603b      	str	r3, [r7, #0]
 8005d36:	4613      	mov	r3, r2
 8005d38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d40:	2b20      	cmp	r3, #32
 8005d42:	d17b      	bne.n	8005e3c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_UART_Transmit+0x26>
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e074      	b.n	8005e3e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2221      	movs	r2, #33	; 0x21
 8005d60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d64:	f7fb fdfa 	bl	800195c <HAL_GetTick>
 8005d68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	88fa      	ldrh	r2, [r7, #6]
 8005d6e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	88fa      	ldrh	r2, [r7, #6]
 8005d76:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d82:	d108      	bne.n	8005d96 <HAL_UART_Transmit+0x6c>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d104      	bne.n	8005d96 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	61bb      	str	r3, [r7, #24]
 8005d94:	e003      	b.n	8005d9e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d9e:	e030      	b.n	8005e02 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	2200      	movs	r2, #0
 8005da8:	2180      	movs	r1, #128	; 0x80
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 ff00 	bl	8006bb0 <UART_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d005      	beq.n	8005dc2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e03d      	b.n	8005e3e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10b      	bne.n	8005de0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dd6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	3302      	adds	r3, #2
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	e007      	b.n	8005df0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	781a      	ldrb	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	3301      	adds	r3, #1
 8005dee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1c8      	bne.n	8005da0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2200      	movs	r2, #0
 8005e16:	2140      	movs	r1, #64	; 0x40
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f000 fec9 	bl	8006bb0 <UART_WaitOnFlagUntilTimeout>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2220      	movs	r2, #32
 8005e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e006      	b.n	8005e3e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	e000      	b.n	8005e3e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005e3c:	2302      	movs	r3, #2
  }
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3720      	adds	r7, #32
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e4c:	b092      	sub	sp, #72	; 0x48
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	431a      	orrs	r2, r3
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	431a      	orrs	r2, r3
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	4bbe      	ldr	r3, [pc, #760]	; (8006170 <UART_SetConfig+0x328>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	6812      	ldr	r2, [r2, #0]
 8005e7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e80:	430b      	orrs	r3, r1
 8005e82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4ab3      	ldr	r2, [pc, #716]	; (8006174 <UART_SetConfig+0x32c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d004      	beq.n	8005eb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	4baf      	ldr	r3, [pc, #700]	; (8006178 <UART_SetConfig+0x330>)
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	6812      	ldr	r2, [r2, #0]
 8005ec2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	f023 010f 	bic.w	r1, r3, #15
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4aa6      	ldr	r2, [pc, #664]	; (800617c <UART_SetConfig+0x334>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d177      	bne.n	8005fd8 <UART_SetConfig+0x190>
 8005ee8:	4ba5      	ldr	r3, [pc, #660]	; (8006180 <UART_SetConfig+0x338>)
 8005eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ef0:	2b28      	cmp	r3, #40	; 0x28
 8005ef2:	d86d      	bhi.n	8005fd0 <UART_SetConfig+0x188>
 8005ef4:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <UART_SetConfig+0xb4>)
 8005ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efa:	bf00      	nop
 8005efc:	08005fa1 	.word	0x08005fa1
 8005f00:	08005fd1 	.word	0x08005fd1
 8005f04:	08005fd1 	.word	0x08005fd1
 8005f08:	08005fd1 	.word	0x08005fd1
 8005f0c:	08005fd1 	.word	0x08005fd1
 8005f10:	08005fd1 	.word	0x08005fd1
 8005f14:	08005fd1 	.word	0x08005fd1
 8005f18:	08005fd1 	.word	0x08005fd1
 8005f1c:	08005fa9 	.word	0x08005fa9
 8005f20:	08005fd1 	.word	0x08005fd1
 8005f24:	08005fd1 	.word	0x08005fd1
 8005f28:	08005fd1 	.word	0x08005fd1
 8005f2c:	08005fd1 	.word	0x08005fd1
 8005f30:	08005fd1 	.word	0x08005fd1
 8005f34:	08005fd1 	.word	0x08005fd1
 8005f38:	08005fd1 	.word	0x08005fd1
 8005f3c:	08005fb1 	.word	0x08005fb1
 8005f40:	08005fd1 	.word	0x08005fd1
 8005f44:	08005fd1 	.word	0x08005fd1
 8005f48:	08005fd1 	.word	0x08005fd1
 8005f4c:	08005fd1 	.word	0x08005fd1
 8005f50:	08005fd1 	.word	0x08005fd1
 8005f54:	08005fd1 	.word	0x08005fd1
 8005f58:	08005fd1 	.word	0x08005fd1
 8005f5c:	08005fb9 	.word	0x08005fb9
 8005f60:	08005fd1 	.word	0x08005fd1
 8005f64:	08005fd1 	.word	0x08005fd1
 8005f68:	08005fd1 	.word	0x08005fd1
 8005f6c:	08005fd1 	.word	0x08005fd1
 8005f70:	08005fd1 	.word	0x08005fd1
 8005f74:	08005fd1 	.word	0x08005fd1
 8005f78:	08005fd1 	.word	0x08005fd1
 8005f7c:	08005fc1 	.word	0x08005fc1
 8005f80:	08005fd1 	.word	0x08005fd1
 8005f84:	08005fd1 	.word	0x08005fd1
 8005f88:	08005fd1 	.word	0x08005fd1
 8005f8c:	08005fd1 	.word	0x08005fd1
 8005f90:	08005fd1 	.word	0x08005fd1
 8005f94:	08005fd1 	.word	0x08005fd1
 8005f98:	08005fd1 	.word	0x08005fd1
 8005f9c:	08005fc9 	.word	0x08005fc9
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa6:	e222      	b.n	80063ee <UART_SetConfig+0x5a6>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fae:	e21e      	b.n	80063ee <UART_SetConfig+0x5a6>
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb6:	e21a      	b.n	80063ee <UART_SetConfig+0x5a6>
 8005fb8:	2310      	movs	r3, #16
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fbe:	e216      	b.n	80063ee <UART_SetConfig+0x5a6>
 8005fc0:	2320      	movs	r3, #32
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc6:	e212      	b.n	80063ee <UART_SetConfig+0x5a6>
 8005fc8:	2340      	movs	r3, #64	; 0x40
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fce:	e20e      	b.n	80063ee <UART_SetConfig+0x5a6>
 8005fd0:	2380      	movs	r3, #128	; 0x80
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fd6:	e20a      	b.n	80063ee <UART_SetConfig+0x5a6>
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a69      	ldr	r2, [pc, #420]	; (8006184 <UART_SetConfig+0x33c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d130      	bne.n	8006044 <UART_SetConfig+0x1fc>
 8005fe2:	4b67      	ldr	r3, [pc, #412]	; (8006180 <UART_SetConfig+0x338>)
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe6:	f003 0307 	and.w	r3, r3, #7
 8005fea:	2b05      	cmp	r3, #5
 8005fec:	d826      	bhi.n	800603c <UART_SetConfig+0x1f4>
 8005fee:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <UART_SetConfig+0x1ac>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	0800600d 	.word	0x0800600d
 8005ff8:	08006015 	.word	0x08006015
 8005ffc:	0800601d 	.word	0x0800601d
 8006000:	08006025 	.word	0x08006025
 8006004:	0800602d 	.word	0x0800602d
 8006008:	08006035 	.word	0x08006035
 800600c:	2300      	movs	r3, #0
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006012:	e1ec      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006014:	2304      	movs	r3, #4
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601a:	e1e8      	b.n	80063ee <UART_SetConfig+0x5a6>
 800601c:	2308      	movs	r3, #8
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006022:	e1e4      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006024:	2310      	movs	r3, #16
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602a:	e1e0      	b.n	80063ee <UART_SetConfig+0x5a6>
 800602c:	2320      	movs	r3, #32
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006032:	e1dc      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006034:	2340      	movs	r3, #64	; 0x40
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603a:	e1d8      	b.n	80063ee <UART_SetConfig+0x5a6>
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006042:	e1d4      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a4f      	ldr	r2, [pc, #316]	; (8006188 <UART_SetConfig+0x340>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d130      	bne.n	80060b0 <UART_SetConfig+0x268>
 800604e:	4b4c      	ldr	r3, [pc, #304]	; (8006180 <UART_SetConfig+0x338>)
 8006050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	2b05      	cmp	r3, #5
 8006058:	d826      	bhi.n	80060a8 <UART_SetConfig+0x260>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x218>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006079 	.word	0x08006079
 8006064:	08006081 	.word	0x08006081
 8006068:	08006089 	.word	0x08006089
 800606c:	08006091 	.word	0x08006091
 8006070:	08006099 	.word	0x08006099
 8006074:	080060a1 	.word	0x080060a1
 8006078:	2300      	movs	r3, #0
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607e:	e1b6      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006080:	2304      	movs	r3, #4
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006086:	e1b2      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006088:	2308      	movs	r3, #8
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608e:	e1ae      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006090:	2310      	movs	r3, #16
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006096:	e1aa      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006098:	2320      	movs	r3, #32
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609e:	e1a6      	b.n	80063ee <UART_SetConfig+0x5a6>
 80060a0:	2340      	movs	r3, #64	; 0x40
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a6:	e1a2      	b.n	80063ee <UART_SetConfig+0x5a6>
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ae:	e19e      	b.n	80063ee <UART_SetConfig+0x5a6>
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a35      	ldr	r2, [pc, #212]	; (800618c <UART_SetConfig+0x344>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d130      	bne.n	800611c <UART_SetConfig+0x2d4>
 80060ba:	4b31      	ldr	r3, [pc, #196]	; (8006180 <UART_SetConfig+0x338>)
 80060bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	2b05      	cmp	r3, #5
 80060c4:	d826      	bhi.n	8006114 <UART_SetConfig+0x2cc>
 80060c6:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <UART_SetConfig+0x284>)
 80060c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060cc:	080060e5 	.word	0x080060e5
 80060d0:	080060ed 	.word	0x080060ed
 80060d4:	080060f5 	.word	0x080060f5
 80060d8:	080060fd 	.word	0x080060fd
 80060dc:	08006105 	.word	0x08006105
 80060e0:	0800610d 	.word	0x0800610d
 80060e4:	2300      	movs	r3, #0
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ea:	e180      	b.n	80063ee <UART_SetConfig+0x5a6>
 80060ec:	2304      	movs	r3, #4
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060f2:	e17c      	b.n	80063ee <UART_SetConfig+0x5a6>
 80060f4:	2308      	movs	r3, #8
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060fa:	e178      	b.n	80063ee <UART_SetConfig+0x5a6>
 80060fc:	2310      	movs	r3, #16
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006102:	e174      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006104:	2320      	movs	r3, #32
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610a:	e170      	b.n	80063ee <UART_SetConfig+0x5a6>
 800610c:	2340      	movs	r3, #64	; 0x40
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006112:	e16c      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006114:	2380      	movs	r3, #128	; 0x80
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611a:	e168      	b.n	80063ee <UART_SetConfig+0x5a6>
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a1b      	ldr	r2, [pc, #108]	; (8006190 <UART_SetConfig+0x348>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d142      	bne.n	80061ac <UART_SetConfig+0x364>
 8006126:	4b16      	ldr	r3, [pc, #88]	; (8006180 <UART_SetConfig+0x338>)
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	f003 0307 	and.w	r3, r3, #7
 800612e:	2b05      	cmp	r3, #5
 8006130:	d838      	bhi.n	80061a4 <UART_SetConfig+0x35c>
 8006132:	a201      	add	r2, pc, #4	; (adr r2, 8006138 <UART_SetConfig+0x2f0>)
 8006134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006138:	08006151 	.word	0x08006151
 800613c:	08006159 	.word	0x08006159
 8006140:	08006161 	.word	0x08006161
 8006144:	08006169 	.word	0x08006169
 8006148:	08006195 	.word	0x08006195
 800614c:	0800619d 	.word	0x0800619d
 8006150:	2300      	movs	r3, #0
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006156:	e14a      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006158:	2304      	movs	r3, #4
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800615e:	e146      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006160:	2308      	movs	r3, #8
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006166:	e142      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006168:	2310      	movs	r3, #16
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616e:	e13e      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006170:	cfff69f3 	.word	0xcfff69f3
 8006174:	58000c00 	.word	0x58000c00
 8006178:	11fff4ff 	.word	0x11fff4ff
 800617c:	40011000 	.word	0x40011000
 8006180:	58024400 	.word	0x58024400
 8006184:	40004400 	.word	0x40004400
 8006188:	40004800 	.word	0x40004800
 800618c:	40004c00 	.word	0x40004c00
 8006190:	40005000 	.word	0x40005000
 8006194:	2320      	movs	r3, #32
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619a:	e128      	b.n	80063ee <UART_SetConfig+0x5a6>
 800619c:	2340      	movs	r3, #64	; 0x40
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061a2:	e124      	b.n	80063ee <UART_SetConfig+0x5a6>
 80061a4:	2380      	movs	r3, #128	; 0x80
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061aa:	e120      	b.n	80063ee <UART_SetConfig+0x5a6>
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4acb      	ldr	r2, [pc, #812]	; (80064e0 <UART_SetConfig+0x698>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d176      	bne.n	80062a4 <UART_SetConfig+0x45c>
 80061b6:	4bcb      	ldr	r3, [pc, #812]	; (80064e4 <UART_SetConfig+0x69c>)
 80061b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061be:	2b28      	cmp	r3, #40	; 0x28
 80061c0:	d86c      	bhi.n	800629c <UART_SetConfig+0x454>
 80061c2:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <UART_SetConfig+0x380>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	0800626d 	.word	0x0800626d
 80061cc:	0800629d 	.word	0x0800629d
 80061d0:	0800629d 	.word	0x0800629d
 80061d4:	0800629d 	.word	0x0800629d
 80061d8:	0800629d 	.word	0x0800629d
 80061dc:	0800629d 	.word	0x0800629d
 80061e0:	0800629d 	.word	0x0800629d
 80061e4:	0800629d 	.word	0x0800629d
 80061e8:	08006275 	.word	0x08006275
 80061ec:	0800629d 	.word	0x0800629d
 80061f0:	0800629d 	.word	0x0800629d
 80061f4:	0800629d 	.word	0x0800629d
 80061f8:	0800629d 	.word	0x0800629d
 80061fc:	0800629d 	.word	0x0800629d
 8006200:	0800629d 	.word	0x0800629d
 8006204:	0800629d 	.word	0x0800629d
 8006208:	0800627d 	.word	0x0800627d
 800620c:	0800629d 	.word	0x0800629d
 8006210:	0800629d 	.word	0x0800629d
 8006214:	0800629d 	.word	0x0800629d
 8006218:	0800629d 	.word	0x0800629d
 800621c:	0800629d 	.word	0x0800629d
 8006220:	0800629d 	.word	0x0800629d
 8006224:	0800629d 	.word	0x0800629d
 8006228:	08006285 	.word	0x08006285
 800622c:	0800629d 	.word	0x0800629d
 8006230:	0800629d 	.word	0x0800629d
 8006234:	0800629d 	.word	0x0800629d
 8006238:	0800629d 	.word	0x0800629d
 800623c:	0800629d 	.word	0x0800629d
 8006240:	0800629d 	.word	0x0800629d
 8006244:	0800629d 	.word	0x0800629d
 8006248:	0800628d 	.word	0x0800628d
 800624c:	0800629d 	.word	0x0800629d
 8006250:	0800629d 	.word	0x0800629d
 8006254:	0800629d 	.word	0x0800629d
 8006258:	0800629d 	.word	0x0800629d
 800625c:	0800629d 	.word	0x0800629d
 8006260:	0800629d 	.word	0x0800629d
 8006264:	0800629d 	.word	0x0800629d
 8006268:	08006295 	.word	0x08006295
 800626c:	2301      	movs	r3, #1
 800626e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006272:	e0bc      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006274:	2304      	movs	r3, #4
 8006276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800627a:	e0b8      	b.n	80063ee <UART_SetConfig+0x5a6>
 800627c:	2308      	movs	r3, #8
 800627e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006282:	e0b4      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006284:	2310      	movs	r3, #16
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628a:	e0b0      	b.n	80063ee <UART_SetConfig+0x5a6>
 800628c:	2320      	movs	r3, #32
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006292:	e0ac      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006294:	2340      	movs	r3, #64	; 0x40
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629a:	e0a8      	b.n	80063ee <UART_SetConfig+0x5a6>
 800629c:	2380      	movs	r3, #128	; 0x80
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062a2:	e0a4      	b.n	80063ee <UART_SetConfig+0x5a6>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a8f      	ldr	r2, [pc, #572]	; (80064e8 <UART_SetConfig+0x6a0>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d130      	bne.n	8006310 <UART_SetConfig+0x4c8>
 80062ae:	4b8d      	ldr	r3, [pc, #564]	; (80064e4 <UART_SetConfig+0x69c>)
 80062b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	2b05      	cmp	r3, #5
 80062b8:	d826      	bhi.n	8006308 <UART_SetConfig+0x4c0>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <UART_SetConfig+0x478>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	080062d9 	.word	0x080062d9
 80062c4:	080062e1 	.word	0x080062e1
 80062c8:	080062e9 	.word	0x080062e9
 80062cc:	080062f1 	.word	0x080062f1
 80062d0:	080062f9 	.word	0x080062f9
 80062d4:	08006301 	.word	0x08006301
 80062d8:	2300      	movs	r3, #0
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062de:	e086      	b.n	80063ee <UART_SetConfig+0x5a6>
 80062e0:	2304      	movs	r3, #4
 80062e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062e6:	e082      	b.n	80063ee <UART_SetConfig+0x5a6>
 80062e8:	2308      	movs	r3, #8
 80062ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ee:	e07e      	b.n	80063ee <UART_SetConfig+0x5a6>
 80062f0:	2310      	movs	r3, #16
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062f6:	e07a      	b.n	80063ee <UART_SetConfig+0x5a6>
 80062f8:	2320      	movs	r3, #32
 80062fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062fe:	e076      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006300:	2340      	movs	r3, #64	; 0x40
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006306:	e072      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800630e:	e06e      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a75      	ldr	r2, [pc, #468]	; (80064ec <UART_SetConfig+0x6a4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d130      	bne.n	800637c <UART_SetConfig+0x534>
 800631a:	4b72      	ldr	r3, [pc, #456]	; (80064e4 <UART_SetConfig+0x69c>)
 800631c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	2b05      	cmp	r3, #5
 8006324:	d826      	bhi.n	8006374 <UART_SetConfig+0x52c>
 8006326:	a201      	add	r2, pc, #4	; (adr r2, 800632c <UART_SetConfig+0x4e4>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	08006345 	.word	0x08006345
 8006330:	0800634d 	.word	0x0800634d
 8006334:	08006355 	.word	0x08006355
 8006338:	0800635d 	.word	0x0800635d
 800633c:	08006365 	.word	0x08006365
 8006340:	0800636d 	.word	0x0800636d
 8006344:	2300      	movs	r3, #0
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634a:	e050      	b.n	80063ee <UART_SetConfig+0x5a6>
 800634c:	2304      	movs	r3, #4
 800634e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006352:	e04c      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006354:	2308      	movs	r3, #8
 8006356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800635a:	e048      	b.n	80063ee <UART_SetConfig+0x5a6>
 800635c:	2310      	movs	r3, #16
 800635e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006362:	e044      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006364:	2320      	movs	r3, #32
 8006366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636a:	e040      	b.n	80063ee <UART_SetConfig+0x5a6>
 800636c:	2340      	movs	r3, #64	; 0x40
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006372:	e03c      	b.n	80063ee <UART_SetConfig+0x5a6>
 8006374:	2380      	movs	r3, #128	; 0x80
 8006376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637a:	e038      	b.n	80063ee <UART_SetConfig+0x5a6>
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a5b      	ldr	r2, [pc, #364]	; (80064f0 <UART_SetConfig+0x6a8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d130      	bne.n	80063e8 <UART_SetConfig+0x5a0>
 8006386:	4b57      	ldr	r3, [pc, #348]	; (80064e4 <UART_SetConfig+0x69c>)
 8006388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	2b05      	cmp	r3, #5
 8006390:	d826      	bhi.n	80063e0 <UART_SetConfig+0x598>
 8006392:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <UART_SetConfig+0x550>)
 8006394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006398:	080063b1 	.word	0x080063b1
 800639c:	080063b9 	.word	0x080063b9
 80063a0:	080063c1 	.word	0x080063c1
 80063a4:	080063c9 	.word	0x080063c9
 80063a8:	080063d1 	.word	0x080063d1
 80063ac:	080063d9 	.word	0x080063d9
 80063b0:	2302      	movs	r3, #2
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b6:	e01a      	b.n	80063ee <UART_SetConfig+0x5a6>
 80063b8:	2304      	movs	r3, #4
 80063ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063be:	e016      	b.n	80063ee <UART_SetConfig+0x5a6>
 80063c0:	2308      	movs	r3, #8
 80063c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063c6:	e012      	b.n	80063ee <UART_SetConfig+0x5a6>
 80063c8:	2310      	movs	r3, #16
 80063ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ce:	e00e      	b.n	80063ee <UART_SetConfig+0x5a6>
 80063d0:	2320      	movs	r3, #32
 80063d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d6:	e00a      	b.n	80063ee <UART_SetConfig+0x5a6>
 80063d8:	2340      	movs	r3, #64	; 0x40
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063de:	e006      	b.n	80063ee <UART_SetConfig+0x5a6>
 80063e0:	2380      	movs	r3, #128	; 0x80
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e6:	e002      	b.n	80063ee <UART_SetConfig+0x5a6>
 80063e8:	2380      	movs	r3, #128	; 0x80
 80063ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a3f      	ldr	r2, [pc, #252]	; (80064f0 <UART_SetConfig+0x6a8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	f040 80f8 	bne.w	80065ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80063fe:	2b20      	cmp	r3, #32
 8006400:	dc46      	bgt.n	8006490 <UART_SetConfig+0x648>
 8006402:	2b02      	cmp	r3, #2
 8006404:	f2c0 8082 	blt.w	800650c <UART_SetConfig+0x6c4>
 8006408:	3b02      	subs	r3, #2
 800640a:	2b1e      	cmp	r3, #30
 800640c:	d87e      	bhi.n	800650c <UART_SetConfig+0x6c4>
 800640e:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <UART_SetConfig+0x5cc>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006497 	.word	0x08006497
 8006418:	0800650d 	.word	0x0800650d
 800641c:	0800649f 	.word	0x0800649f
 8006420:	0800650d 	.word	0x0800650d
 8006424:	0800650d 	.word	0x0800650d
 8006428:	0800650d 	.word	0x0800650d
 800642c:	080064af 	.word	0x080064af
 8006430:	0800650d 	.word	0x0800650d
 8006434:	0800650d 	.word	0x0800650d
 8006438:	0800650d 	.word	0x0800650d
 800643c:	0800650d 	.word	0x0800650d
 8006440:	0800650d 	.word	0x0800650d
 8006444:	0800650d 	.word	0x0800650d
 8006448:	0800650d 	.word	0x0800650d
 800644c:	080064bf 	.word	0x080064bf
 8006450:	0800650d 	.word	0x0800650d
 8006454:	0800650d 	.word	0x0800650d
 8006458:	0800650d 	.word	0x0800650d
 800645c:	0800650d 	.word	0x0800650d
 8006460:	0800650d 	.word	0x0800650d
 8006464:	0800650d 	.word	0x0800650d
 8006468:	0800650d 	.word	0x0800650d
 800646c:	0800650d 	.word	0x0800650d
 8006470:	0800650d 	.word	0x0800650d
 8006474:	0800650d 	.word	0x0800650d
 8006478:	0800650d 	.word	0x0800650d
 800647c:	0800650d 	.word	0x0800650d
 8006480:	0800650d 	.word	0x0800650d
 8006484:	0800650d 	.word	0x0800650d
 8006488:	0800650d 	.word	0x0800650d
 800648c:	080064ff 	.word	0x080064ff
 8006490:	2b40      	cmp	r3, #64	; 0x40
 8006492:	d037      	beq.n	8006504 <UART_SetConfig+0x6bc>
 8006494:	e03a      	b.n	800650c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006496:	f7fe f821 	bl	80044dc <HAL_RCCEx_GetD3PCLK1Freq>
 800649a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800649c:	e03c      	b.n	8006518 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800649e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe f830 	bl	8004508 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064ac:	e034      	b.n	8006518 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064ae:	f107 0318 	add.w	r3, r7, #24
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe f97c 	bl	80047b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064bc:	e02c      	b.n	8006518 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064be:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <UART_SetConfig+0x69c>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d016      	beq.n	80064f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064ca:	4b06      	ldr	r3, [pc, #24]	; (80064e4 <UART_SetConfig+0x69c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	08db      	lsrs	r3, r3, #3
 80064d0:	f003 0303 	and.w	r3, r3, #3
 80064d4:	4a07      	ldr	r2, [pc, #28]	; (80064f4 <UART_SetConfig+0x6ac>)
 80064d6:	fa22 f303 	lsr.w	r3, r2, r3
 80064da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064dc:	e01c      	b.n	8006518 <UART_SetConfig+0x6d0>
 80064de:	bf00      	nop
 80064e0:	40011400 	.word	0x40011400
 80064e4:	58024400 	.word	0x58024400
 80064e8:	40007800 	.word	0x40007800
 80064ec:	40007c00 	.word	0x40007c00
 80064f0:	58000c00 	.word	0x58000c00
 80064f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80064f8:	4b9d      	ldr	r3, [pc, #628]	; (8006770 <UART_SetConfig+0x928>)
 80064fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064fc:	e00c      	b.n	8006518 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064fe:	4b9d      	ldr	r3, [pc, #628]	; (8006774 <UART_SetConfig+0x92c>)
 8006500:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006502:	e009      	b.n	8006518 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006504:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800650a:	e005      	b.n	8006518 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006516:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 81de 	beq.w	80068dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	4a94      	ldr	r2, [pc, #592]	; (8006778 <UART_SetConfig+0x930>)
 8006526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800652a:	461a      	mov	r2, r3
 800652c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800652e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006532:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	4613      	mov	r3, r2
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	4413      	add	r3, r2
 800653e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006540:	429a      	cmp	r2, r3
 8006542:	d305      	bcc.n	8006550 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800654a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654c:	429a      	cmp	r2, r3
 800654e:	d903      	bls.n	8006558 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006556:	e1c1      	b.n	80068dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800655a:	2200      	movs	r2, #0
 800655c:	60bb      	str	r3, [r7, #8]
 800655e:	60fa      	str	r2, [r7, #12]
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	4a84      	ldr	r2, [pc, #528]	; (8006778 <UART_SetConfig+0x930>)
 8006566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800656a:	b29b      	uxth	r3, r3
 800656c:	2200      	movs	r2, #0
 800656e:	603b      	str	r3, [r7, #0]
 8006570:	607a      	str	r2, [r7, #4]
 8006572:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006576:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800657a:	f7f9 ff01 	bl	8000380 <__aeabi_uldivmod>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4610      	mov	r0, r2
 8006584:	4619      	mov	r1, r3
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	020b      	lsls	r3, r1, #8
 8006590:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006594:	0202      	lsls	r2, r0, #8
 8006596:	6979      	ldr	r1, [r7, #20]
 8006598:	6849      	ldr	r1, [r1, #4]
 800659a:	0849      	lsrs	r1, r1, #1
 800659c:	2000      	movs	r0, #0
 800659e:	460c      	mov	r4, r1
 80065a0:	4605      	mov	r5, r0
 80065a2:	eb12 0804 	adds.w	r8, r2, r4
 80065a6:	eb43 0905 	adc.w	r9, r3, r5
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	469a      	mov	sl, r3
 80065b2:	4693      	mov	fp, r2
 80065b4:	4652      	mov	r2, sl
 80065b6:	465b      	mov	r3, fp
 80065b8:	4640      	mov	r0, r8
 80065ba:	4649      	mov	r1, r9
 80065bc:	f7f9 fee0 	bl	8000380 <__aeabi_uldivmod>
 80065c0:	4602      	mov	r2, r0
 80065c2:	460b      	mov	r3, r1
 80065c4:	4613      	mov	r3, r2
 80065c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ce:	d308      	bcc.n	80065e2 <UART_SetConfig+0x79a>
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065d6:	d204      	bcs.n	80065e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065de:	60da      	str	r2, [r3, #12]
 80065e0:	e17c      	b.n	80068dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80065e8:	e178      	b.n	80068dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065f2:	f040 80c5 	bne.w	8006780 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80065f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80065fa:	2b20      	cmp	r3, #32
 80065fc:	dc48      	bgt.n	8006690 <UART_SetConfig+0x848>
 80065fe:	2b00      	cmp	r3, #0
 8006600:	db7b      	blt.n	80066fa <UART_SetConfig+0x8b2>
 8006602:	2b20      	cmp	r3, #32
 8006604:	d879      	bhi.n	80066fa <UART_SetConfig+0x8b2>
 8006606:	a201      	add	r2, pc, #4	; (adr r2, 800660c <UART_SetConfig+0x7c4>)
 8006608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800660c:	08006697 	.word	0x08006697
 8006610:	0800669f 	.word	0x0800669f
 8006614:	080066fb 	.word	0x080066fb
 8006618:	080066fb 	.word	0x080066fb
 800661c:	080066a7 	.word	0x080066a7
 8006620:	080066fb 	.word	0x080066fb
 8006624:	080066fb 	.word	0x080066fb
 8006628:	080066fb 	.word	0x080066fb
 800662c:	080066b7 	.word	0x080066b7
 8006630:	080066fb 	.word	0x080066fb
 8006634:	080066fb 	.word	0x080066fb
 8006638:	080066fb 	.word	0x080066fb
 800663c:	080066fb 	.word	0x080066fb
 8006640:	080066fb 	.word	0x080066fb
 8006644:	080066fb 	.word	0x080066fb
 8006648:	080066fb 	.word	0x080066fb
 800664c:	080066c7 	.word	0x080066c7
 8006650:	080066fb 	.word	0x080066fb
 8006654:	080066fb 	.word	0x080066fb
 8006658:	080066fb 	.word	0x080066fb
 800665c:	080066fb 	.word	0x080066fb
 8006660:	080066fb 	.word	0x080066fb
 8006664:	080066fb 	.word	0x080066fb
 8006668:	080066fb 	.word	0x080066fb
 800666c:	080066fb 	.word	0x080066fb
 8006670:	080066fb 	.word	0x080066fb
 8006674:	080066fb 	.word	0x080066fb
 8006678:	080066fb 	.word	0x080066fb
 800667c:	080066fb 	.word	0x080066fb
 8006680:	080066fb 	.word	0x080066fb
 8006684:	080066fb 	.word	0x080066fb
 8006688:	080066fb 	.word	0x080066fb
 800668c:	080066ed 	.word	0x080066ed
 8006690:	2b40      	cmp	r3, #64	; 0x40
 8006692:	d02e      	beq.n	80066f2 <UART_SetConfig+0x8aa>
 8006694:	e031      	b.n	80066fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006696:	f7fc fceb 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 800669a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800669c:	e033      	b.n	8006706 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800669e:	f7fc fcfd 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 80066a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80066a4:	e02f      	b.n	8006706 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fd ff2c 	bl	8004508 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066b4:	e027      	b.n	8006706 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066b6:	f107 0318 	add.w	r3, r7, #24
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fe f878 	bl	80047b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066c4:	e01f      	b.n	8006706 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066c6:	4b2d      	ldr	r3, [pc, #180]	; (800677c <UART_SetConfig+0x934>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066d2:	4b2a      	ldr	r3, [pc, #168]	; (800677c <UART_SetConfig+0x934>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	08db      	lsrs	r3, r3, #3
 80066d8:	f003 0303 	and.w	r3, r3, #3
 80066dc:	4a24      	ldr	r2, [pc, #144]	; (8006770 <UART_SetConfig+0x928>)
 80066de:	fa22 f303 	lsr.w	r3, r2, r3
 80066e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066e4:	e00f      	b.n	8006706 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80066e6:	4b22      	ldr	r3, [pc, #136]	; (8006770 <UART_SetConfig+0x928>)
 80066e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066ea:	e00c      	b.n	8006706 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066ec:	4b21      	ldr	r3, [pc, #132]	; (8006774 <UART_SetConfig+0x92c>)
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066f0:	e009      	b.n	8006706 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066f8:	e005      	b.n	8006706 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006704:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 80e7 	beq.w	80068dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	4a19      	ldr	r2, [pc, #100]	; (8006778 <UART_SetConfig+0x930>)
 8006714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006718:	461a      	mov	r2, r3
 800671a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006720:	005a      	lsls	r2, r3, #1
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	085b      	lsrs	r3, r3, #1
 8006728:	441a      	add	r2, r3
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006732:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006736:	2b0f      	cmp	r3, #15
 8006738:	d916      	bls.n	8006768 <UART_SetConfig+0x920>
 800673a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006740:	d212      	bcs.n	8006768 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	b29b      	uxth	r3, r3
 8006746:	f023 030f 	bic.w	r3, r3, #15
 800674a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800674c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	b29b      	uxth	r3, r3
 8006752:	f003 0307 	and.w	r3, r3, #7
 8006756:	b29a      	uxth	r2, r3
 8006758:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800675a:	4313      	orrs	r3, r2
 800675c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006764:	60da      	str	r2, [r3, #12]
 8006766:	e0b9      	b.n	80068dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800676e:	e0b5      	b.n	80068dc <UART_SetConfig+0xa94>
 8006770:	03d09000 	.word	0x03d09000
 8006774:	003d0900 	.word	0x003d0900
 8006778:	080080a0 	.word	0x080080a0
 800677c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006780:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006784:	2b20      	cmp	r3, #32
 8006786:	dc49      	bgt.n	800681c <UART_SetConfig+0x9d4>
 8006788:	2b00      	cmp	r3, #0
 800678a:	db7c      	blt.n	8006886 <UART_SetConfig+0xa3e>
 800678c:	2b20      	cmp	r3, #32
 800678e:	d87a      	bhi.n	8006886 <UART_SetConfig+0xa3e>
 8006790:	a201      	add	r2, pc, #4	; (adr r2, 8006798 <UART_SetConfig+0x950>)
 8006792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006796:	bf00      	nop
 8006798:	08006823 	.word	0x08006823
 800679c:	0800682b 	.word	0x0800682b
 80067a0:	08006887 	.word	0x08006887
 80067a4:	08006887 	.word	0x08006887
 80067a8:	08006833 	.word	0x08006833
 80067ac:	08006887 	.word	0x08006887
 80067b0:	08006887 	.word	0x08006887
 80067b4:	08006887 	.word	0x08006887
 80067b8:	08006843 	.word	0x08006843
 80067bc:	08006887 	.word	0x08006887
 80067c0:	08006887 	.word	0x08006887
 80067c4:	08006887 	.word	0x08006887
 80067c8:	08006887 	.word	0x08006887
 80067cc:	08006887 	.word	0x08006887
 80067d0:	08006887 	.word	0x08006887
 80067d4:	08006887 	.word	0x08006887
 80067d8:	08006853 	.word	0x08006853
 80067dc:	08006887 	.word	0x08006887
 80067e0:	08006887 	.word	0x08006887
 80067e4:	08006887 	.word	0x08006887
 80067e8:	08006887 	.word	0x08006887
 80067ec:	08006887 	.word	0x08006887
 80067f0:	08006887 	.word	0x08006887
 80067f4:	08006887 	.word	0x08006887
 80067f8:	08006887 	.word	0x08006887
 80067fc:	08006887 	.word	0x08006887
 8006800:	08006887 	.word	0x08006887
 8006804:	08006887 	.word	0x08006887
 8006808:	08006887 	.word	0x08006887
 800680c:	08006887 	.word	0x08006887
 8006810:	08006887 	.word	0x08006887
 8006814:	08006887 	.word	0x08006887
 8006818:	08006879 	.word	0x08006879
 800681c:	2b40      	cmp	r3, #64	; 0x40
 800681e:	d02e      	beq.n	800687e <UART_SetConfig+0xa36>
 8006820:	e031      	b.n	8006886 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006822:	f7fc fc25 	bl	8003070 <HAL_RCC_GetPCLK1Freq>
 8006826:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006828:	e033      	b.n	8006892 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800682a:	f7fc fc37 	bl	800309c <HAL_RCC_GetPCLK2Freq>
 800682e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006830:	e02f      	b.n	8006892 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006836:	4618      	mov	r0, r3
 8006838:	f7fd fe66 	bl	8004508 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800683c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006840:	e027      	b.n	8006892 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006842:	f107 0318 	add.w	r3, r7, #24
 8006846:	4618      	mov	r0, r3
 8006848:	f7fd ffb2 	bl	80047b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006850:	e01f      	b.n	8006892 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006852:	4b2d      	ldr	r3, [pc, #180]	; (8006908 <UART_SetConfig+0xac0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b00      	cmp	r3, #0
 800685c:	d009      	beq.n	8006872 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800685e:	4b2a      	ldr	r3, [pc, #168]	; (8006908 <UART_SetConfig+0xac0>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	08db      	lsrs	r3, r3, #3
 8006864:	f003 0303 	and.w	r3, r3, #3
 8006868:	4a28      	ldr	r2, [pc, #160]	; (800690c <UART_SetConfig+0xac4>)
 800686a:	fa22 f303 	lsr.w	r3, r2, r3
 800686e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006870:	e00f      	b.n	8006892 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006872:	4b26      	ldr	r3, [pc, #152]	; (800690c <UART_SetConfig+0xac4>)
 8006874:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006876:	e00c      	b.n	8006892 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006878:	4b25      	ldr	r3, [pc, #148]	; (8006910 <UART_SetConfig+0xac8>)
 800687a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800687c:	e009      	b.n	8006892 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800687e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006884:	e005      	b.n	8006892 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006890:	bf00      	nop
    }

    if (pclk != 0U)
 8006892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d021      	beq.n	80068dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800689c:	4a1d      	ldr	r2, [pc, #116]	; (8006914 <UART_SetConfig+0xacc>)
 800689e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068a2:	461a      	mov	r2, r3
 80068a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	085b      	lsrs	r3, r3, #1
 80068b0:	441a      	add	r2, r3
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068be:	2b0f      	cmp	r3, #15
 80068c0:	d909      	bls.n	80068d6 <UART_SetConfig+0xa8e>
 80068c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c8:	d205      	bcs.n	80068d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	60da      	str	r2, [r3, #12]
 80068d4:	e002      	b.n	80068dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	2201      	movs	r2, #1
 80068e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	2200      	movs	r2, #0
 80068f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2200      	movs	r2, #0
 80068f6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80068f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3748      	adds	r7, #72	; 0x48
 8006900:	46bd      	mov	sp, r7
 8006902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006906:	bf00      	nop
 8006908:	58024400 	.word	0x58024400
 800690c:	03d09000 	.word	0x03d09000
 8006910:	003d0900 	.word	0x003d0900
 8006914:	080080a0 	.word	0x080080a0

08006918 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00a      	beq.n	8006964 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00a      	beq.n	8006986 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	430a      	orrs	r2, r1
 8006984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698a:	f003 0308 	and.w	r3, r3, #8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	430a      	orrs	r2, r1
 80069a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ac:	f003 0310 	and.w	r3, r3, #16
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00a      	beq.n	80069ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01a      	beq.n	8006a2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a16:	d10a      	bne.n	8006a2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	605a      	str	r2, [r3, #4]
  }
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b098      	sub	sp, #96	; 0x60
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a6c:	f7fa ff76 	bl	800195c <HAL_GetTick>
 8006a70:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0308 	and.w	r3, r3, #8
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d12f      	bne.n	8006ae0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f88e 	bl	8006bb0 <UART_WaitOnFlagUntilTimeout>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d022      	beq.n	8006ae0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	e853 3f00 	ldrex	r3, [r3]
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aae:	653b      	str	r3, [r7, #80]	; 0x50
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8006aba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ac0:	e841 2300 	strex	r3, r2, [r1]
 8006ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1e6      	bne.n	8006a9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e063      	b.n	8006ba8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0304 	and.w	r3, r3, #4
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d149      	bne.n	8006b82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006aee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af6:	2200      	movs	r2, #0
 8006af8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f857 	bl	8006bb0 <UART_WaitOnFlagUntilTimeout>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d03c      	beq.n	8006b82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	e853 3f00 	ldrex	r3, [r3]
 8006b14:	623b      	str	r3, [r7, #32]
   return(result);
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b26:	633b      	str	r3, [r7, #48]	; 0x30
 8006b28:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2e:	e841 2300 	strex	r3, r2, [r1]
 8006b32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1e6      	bne.n	8006b08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3308      	adds	r3, #8
 8006b40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f023 0301 	bic.w	r3, r3, #1
 8006b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3308      	adds	r3, #8
 8006b58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b5a:	61fa      	str	r2, [r7, #28]
 8006b5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	69b9      	ldr	r1, [r7, #24]
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	617b      	str	r3, [r7, #20]
   return(result);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e5      	bne.n	8006b3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e012      	b.n	8006ba8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2220      	movs	r2, #32
 8006b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3758      	adds	r7, #88	; 0x58
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	603b      	str	r3, [r7, #0]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bc0:	e049      	b.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc8:	d045      	beq.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bca:	f7fa fec7 	bl	800195c <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d302      	bcc.n	8006be0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e048      	b.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0304 	and.w	r3, r3, #4
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d031      	beq.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f003 0308 	and.w	r3, r3, #8
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d110      	bne.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2208      	movs	r2, #8
 8006c06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f000 f839 	bl	8006c80 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2208      	movs	r2, #8
 8006c12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e029      	b.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c30:	d111      	bne.n	8006c56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f81f 	bl	8006c80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e00f      	b.n	8006c76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	69da      	ldr	r2, [r3, #28]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	bf0c      	ite	eq
 8006c66:	2301      	moveq	r3, #1
 8006c68:	2300      	movne	r3, #0
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	79fb      	ldrb	r3, [r7, #7]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d0a6      	beq.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b095      	sub	sp, #84	; 0x54
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006cac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e6      	bne.n	8006c88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3308      	adds	r3, #8
 8006cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	6a3b      	ldr	r3, [r7, #32]
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <UART_EndRxTransfer+0xc8>)
 8006cce:	4013      	ands	r3, r2
 8006cd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	3308      	adds	r3, #8
 8006cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e5      	bne.n	8006cba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d118      	bne.n	8006d28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	f023 0310 	bic.w	r3, r3, #16
 8006d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	461a      	mov	r2, r3
 8006d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	6979      	ldr	r1, [r7, #20]
 8006d1a:	69ba      	ldr	r2, [r7, #24]
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	613b      	str	r3, [r7, #16]
   return(result);
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e6      	bne.n	8006cf6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2220      	movs	r2, #32
 8006d2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006d3c:	bf00      	nop
 8006d3e:	3754      	adds	r7, #84	; 0x54
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	effffffe 	.word	0xeffffffe

08006d4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d101      	bne.n	8006d62 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d5e:	2302      	movs	r3, #2
 8006d60:	e027      	b.n	8006db2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2224      	movs	r2, #36	; 0x24
 8006d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0201 	bic.w	r2, r2, #1
 8006d88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d101      	bne.n	8006dd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e02d      	b.n	8006e32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2224      	movs	r2, #36	; 0x24
 8006de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0201 	bic.w	r2, r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f850 	bl	8006eb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b084      	sub	sp, #16
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d101      	bne.n	8006e52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e4e:	2302      	movs	r3, #2
 8006e50:	e02d      	b.n	8006eae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2224      	movs	r2, #36	; 0x24
 8006e5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0201 	bic.w	r2, r2, #1
 8006e78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f812 	bl	8006eb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d108      	bne.n	8006eda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ed8:	e031      	b.n	8006f3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006eda:	2310      	movs	r3, #16
 8006edc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ede:	2310      	movs	r3, #16
 8006ee0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	0e5b      	lsrs	r3, r3, #25
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	f003 0307 	and.w	r3, r3, #7
 8006ef0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	0f5b      	lsrs	r3, r3, #29
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	f003 0307 	and.w	r3, r3, #7
 8006f00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	7b3a      	ldrb	r2, [r7, #12]
 8006f06:	4911      	ldr	r1, [pc, #68]	; (8006f4c <UARTEx_SetNbDataToProcess+0x94>)
 8006f08:	5c8a      	ldrb	r2, [r1, r2]
 8006f0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f0e:	7b3a      	ldrb	r2, [r7, #12]
 8006f10:	490f      	ldr	r1, [pc, #60]	; (8006f50 <UARTEx_SetNbDataToProcess+0x98>)
 8006f12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f14:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
 8006f22:	7b7a      	ldrb	r2, [r7, #13]
 8006f24:	4909      	ldr	r1, [pc, #36]	; (8006f4c <UARTEx_SetNbDataToProcess+0x94>)
 8006f26:	5c8a      	ldrb	r2, [r1, r2]
 8006f28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f2c:	7b7a      	ldrb	r2, [r7, #13]
 8006f2e:	4908      	ldr	r1, [pc, #32]	; (8006f50 <UARTEx_SetNbDataToProcess+0x98>)
 8006f30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f32:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f3e:	bf00      	nop
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	080080b8 	.word	0x080080b8
 8006f50:	080080c0 	.word	0x080080c0

08006f54 <std>:
 8006f54:	2300      	movs	r3, #0
 8006f56:	b510      	push	{r4, lr}
 8006f58:	4604      	mov	r4, r0
 8006f5a:	e9c0 3300 	strd	r3, r3, [r0]
 8006f5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f62:	6083      	str	r3, [r0, #8]
 8006f64:	8181      	strh	r1, [r0, #12]
 8006f66:	6643      	str	r3, [r0, #100]	; 0x64
 8006f68:	81c2      	strh	r2, [r0, #14]
 8006f6a:	6183      	str	r3, [r0, #24]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	2208      	movs	r2, #8
 8006f70:	305c      	adds	r0, #92	; 0x5c
 8006f72:	f000 f9ff 	bl	8007374 <memset>
 8006f76:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <std+0x58>)
 8006f78:	6263      	str	r3, [r4, #36]	; 0x24
 8006f7a:	4b0d      	ldr	r3, [pc, #52]	; (8006fb0 <std+0x5c>)
 8006f7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <std+0x60>)
 8006f80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f82:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <std+0x64>)
 8006f84:	6323      	str	r3, [r4, #48]	; 0x30
 8006f86:	4b0d      	ldr	r3, [pc, #52]	; (8006fbc <std+0x68>)
 8006f88:	6224      	str	r4, [r4, #32]
 8006f8a:	429c      	cmp	r4, r3
 8006f8c:	d006      	beq.n	8006f9c <std+0x48>
 8006f8e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006f92:	4294      	cmp	r4, r2
 8006f94:	d002      	beq.n	8006f9c <std+0x48>
 8006f96:	33d0      	adds	r3, #208	; 0xd0
 8006f98:	429c      	cmp	r4, r3
 8006f9a:	d105      	bne.n	8006fa8 <std+0x54>
 8006f9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa4:	f000 ba5e 	b.w	8007464 <__retarget_lock_init_recursive>
 8006fa8:	bd10      	pop	{r4, pc}
 8006faa:	bf00      	nop
 8006fac:	080071c5 	.word	0x080071c5
 8006fb0:	080071e7 	.word	0x080071e7
 8006fb4:	0800721f 	.word	0x0800721f
 8006fb8:	08007243 	.word	0x08007243
 8006fbc:	240001c0 	.word	0x240001c0

08006fc0 <stdio_exit_handler>:
 8006fc0:	4a02      	ldr	r2, [pc, #8]	; (8006fcc <stdio_exit_handler+0xc>)
 8006fc2:	4903      	ldr	r1, [pc, #12]	; (8006fd0 <stdio_exit_handler+0x10>)
 8006fc4:	4803      	ldr	r0, [pc, #12]	; (8006fd4 <stdio_exit_handler+0x14>)
 8006fc6:	f000 b869 	b.w	800709c <_fwalk_sglue>
 8006fca:	bf00      	nop
 8006fcc:	24000010 	.word	0x24000010
 8006fd0:	08007d11 	.word	0x08007d11
 8006fd4:	2400001c 	.word	0x2400001c

08006fd8 <cleanup_stdio>:
 8006fd8:	6841      	ldr	r1, [r0, #4]
 8006fda:	4b0c      	ldr	r3, [pc, #48]	; (800700c <cleanup_stdio+0x34>)
 8006fdc:	4299      	cmp	r1, r3
 8006fde:	b510      	push	{r4, lr}
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	d001      	beq.n	8006fe8 <cleanup_stdio+0x10>
 8006fe4:	f000 fe94 	bl	8007d10 <_fflush_r>
 8006fe8:	68a1      	ldr	r1, [r4, #8]
 8006fea:	4b09      	ldr	r3, [pc, #36]	; (8007010 <cleanup_stdio+0x38>)
 8006fec:	4299      	cmp	r1, r3
 8006fee:	d002      	beq.n	8006ff6 <cleanup_stdio+0x1e>
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f000 fe8d 	bl	8007d10 <_fflush_r>
 8006ff6:	68e1      	ldr	r1, [r4, #12]
 8006ff8:	4b06      	ldr	r3, [pc, #24]	; (8007014 <cleanup_stdio+0x3c>)
 8006ffa:	4299      	cmp	r1, r3
 8006ffc:	d004      	beq.n	8007008 <cleanup_stdio+0x30>
 8006ffe:	4620      	mov	r0, r4
 8007000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007004:	f000 be84 	b.w	8007d10 <_fflush_r>
 8007008:	bd10      	pop	{r4, pc}
 800700a:	bf00      	nop
 800700c:	240001c0 	.word	0x240001c0
 8007010:	24000228 	.word	0x24000228
 8007014:	24000290 	.word	0x24000290

08007018 <global_stdio_init.part.0>:
 8007018:	b510      	push	{r4, lr}
 800701a:	4b0b      	ldr	r3, [pc, #44]	; (8007048 <global_stdio_init.part.0+0x30>)
 800701c:	4c0b      	ldr	r4, [pc, #44]	; (800704c <global_stdio_init.part.0+0x34>)
 800701e:	4a0c      	ldr	r2, [pc, #48]	; (8007050 <global_stdio_init.part.0+0x38>)
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	4620      	mov	r0, r4
 8007024:	2200      	movs	r2, #0
 8007026:	2104      	movs	r1, #4
 8007028:	f7ff ff94 	bl	8006f54 <std>
 800702c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007030:	2201      	movs	r2, #1
 8007032:	2109      	movs	r1, #9
 8007034:	f7ff ff8e 	bl	8006f54 <std>
 8007038:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800703c:	2202      	movs	r2, #2
 800703e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007042:	2112      	movs	r1, #18
 8007044:	f7ff bf86 	b.w	8006f54 <std>
 8007048:	240002f8 	.word	0x240002f8
 800704c:	240001c0 	.word	0x240001c0
 8007050:	08006fc1 	.word	0x08006fc1

08007054 <__sfp_lock_acquire>:
 8007054:	4801      	ldr	r0, [pc, #4]	; (800705c <__sfp_lock_acquire+0x8>)
 8007056:	f000 ba06 	b.w	8007466 <__retarget_lock_acquire_recursive>
 800705a:	bf00      	nop
 800705c:	24000301 	.word	0x24000301

08007060 <__sfp_lock_release>:
 8007060:	4801      	ldr	r0, [pc, #4]	; (8007068 <__sfp_lock_release+0x8>)
 8007062:	f000 ba01 	b.w	8007468 <__retarget_lock_release_recursive>
 8007066:	bf00      	nop
 8007068:	24000301 	.word	0x24000301

0800706c <__sinit>:
 800706c:	b510      	push	{r4, lr}
 800706e:	4604      	mov	r4, r0
 8007070:	f7ff fff0 	bl	8007054 <__sfp_lock_acquire>
 8007074:	6a23      	ldr	r3, [r4, #32]
 8007076:	b11b      	cbz	r3, 8007080 <__sinit+0x14>
 8007078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800707c:	f7ff bff0 	b.w	8007060 <__sfp_lock_release>
 8007080:	4b04      	ldr	r3, [pc, #16]	; (8007094 <__sinit+0x28>)
 8007082:	6223      	str	r3, [r4, #32]
 8007084:	4b04      	ldr	r3, [pc, #16]	; (8007098 <__sinit+0x2c>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1f5      	bne.n	8007078 <__sinit+0xc>
 800708c:	f7ff ffc4 	bl	8007018 <global_stdio_init.part.0>
 8007090:	e7f2      	b.n	8007078 <__sinit+0xc>
 8007092:	bf00      	nop
 8007094:	08006fd9 	.word	0x08006fd9
 8007098:	240002f8 	.word	0x240002f8

0800709c <_fwalk_sglue>:
 800709c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a0:	4607      	mov	r7, r0
 80070a2:	4688      	mov	r8, r1
 80070a4:	4614      	mov	r4, r2
 80070a6:	2600      	movs	r6, #0
 80070a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070ac:	f1b9 0901 	subs.w	r9, r9, #1
 80070b0:	d505      	bpl.n	80070be <_fwalk_sglue+0x22>
 80070b2:	6824      	ldr	r4, [r4, #0]
 80070b4:	2c00      	cmp	r4, #0
 80070b6:	d1f7      	bne.n	80070a8 <_fwalk_sglue+0xc>
 80070b8:	4630      	mov	r0, r6
 80070ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070be:	89ab      	ldrh	r3, [r5, #12]
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d907      	bls.n	80070d4 <_fwalk_sglue+0x38>
 80070c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070c8:	3301      	adds	r3, #1
 80070ca:	d003      	beq.n	80070d4 <_fwalk_sglue+0x38>
 80070cc:	4629      	mov	r1, r5
 80070ce:	4638      	mov	r0, r7
 80070d0:	47c0      	blx	r8
 80070d2:	4306      	orrs	r6, r0
 80070d4:	3568      	adds	r5, #104	; 0x68
 80070d6:	e7e9      	b.n	80070ac <_fwalk_sglue+0x10>

080070d8 <iprintf>:
 80070d8:	b40f      	push	{r0, r1, r2, r3}
 80070da:	b507      	push	{r0, r1, r2, lr}
 80070dc:	4906      	ldr	r1, [pc, #24]	; (80070f8 <iprintf+0x20>)
 80070de:	ab04      	add	r3, sp, #16
 80070e0:	6808      	ldr	r0, [r1, #0]
 80070e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070e6:	6881      	ldr	r1, [r0, #8]
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	f000 fae1 	bl	80076b0 <_vfiprintf_r>
 80070ee:	b003      	add	sp, #12
 80070f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070f4:	b004      	add	sp, #16
 80070f6:	4770      	bx	lr
 80070f8:	24000068 	.word	0x24000068

080070fc <putchar>:
 80070fc:	4b02      	ldr	r3, [pc, #8]	; (8007108 <putchar+0xc>)
 80070fe:	4601      	mov	r1, r0
 8007100:	6818      	ldr	r0, [r3, #0]
 8007102:	6882      	ldr	r2, [r0, #8]
 8007104:	f000 be8e 	b.w	8007e24 <_putc_r>
 8007108:	24000068 	.word	0x24000068

0800710c <_puts_r>:
 800710c:	6a03      	ldr	r3, [r0, #32]
 800710e:	b570      	push	{r4, r5, r6, lr}
 8007110:	6884      	ldr	r4, [r0, #8]
 8007112:	4605      	mov	r5, r0
 8007114:	460e      	mov	r6, r1
 8007116:	b90b      	cbnz	r3, 800711c <_puts_r+0x10>
 8007118:	f7ff ffa8 	bl	800706c <__sinit>
 800711c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800711e:	07db      	lsls	r3, r3, #31
 8007120:	d405      	bmi.n	800712e <_puts_r+0x22>
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	0598      	lsls	r0, r3, #22
 8007126:	d402      	bmi.n	800712e <_puts_r+0x22>
 8007128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800712a:	f000 f99c 	bl	8007466 <__retarget_lock_acquire_recursive>
 800712e:	89a3      	ldrh	r3, [r4, #12]
 8007130:	0719      	lsls	r1, r3, #28
 8007132:	d513      	bpl.n	800715c <_puts_r+0x50>
 8007134:	6923      	ldr	r3, [r4, #16]
 8007136:	b18b      	cbz	r3, 800715c <_puts_r+0x50>
 8007138:	3e01      	subs	r6, #1
 800713a:	68a3      	ldr	r3, [r4, #8]
 800713c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007140:	3b01      	subs	r3, #1
 8007142:	60a3      	str	r3, [r4, #8]
 8007144:	b9e9      	cbnz	r1, 8007182 <_puts_r+0x76>
 8007146:	2b00      	cmp	r3, #0
 8007148:	da2e      	bge.n	80071a8 <_puts_r+0x9c>
 800714a:	4622      	mov	r2, r4
 800714c:	210a      	movs	r1, #10
 800714e:	4628      	mov	r0, r5
 8007150:	f000 f87b 	bl	800724a <__swbuf_r>
 8007154:	3001      	adds	r0, #1
 8007156:	d007      	beq.n	8007168 <_puts_r+0x5c>
 8007158:	250a      	movs	r5, #10
 800715a:	e007      	b.n	800716c <_puts_r+0x60>
 800715c:	4621      	mov	r1, r4
 800715e:	4628      	mov	r0, r5
 8007160:	f000 f8b0 	bl	80072c4 <__swsetup_r>
 8007164:	2800      	cmp	r0, #0
 8007166:	d0e7      	beq.n	8007138 <_puts_r+0x2c>
 8007168:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800716c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800716e:	07da      	lsls	r2, r3, #31
 8007170:	d405      	bmi.n	800717e <_puts_r+0x72>
 8007172:	89a3      	ldrh	r3, [r4, #12]
 8007174:	059b      	lsls	r3, r3, #22
 8007176:	d402      	bmi.n	800717e <_puts_r+0x72>
 8007178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800717a:	f000 f975 	bl	8007468 <__retarget_lock_release_recursive>
 800717e:	4628      	mov	r0, r5
 8007180:	bd70      	pop	{r4, r5, r6, pc}
 8007182:	2b00      	cmp	r3, #0
 8007184:	da04      	bge.n	8007190 <_puts_r+0x84>
 8007186:	69a2      	ldr	r2, [r4, #24]
 8007188:	429a      	cmp	r2, r3
 800718a:	dc06      	bgt.n	800719a <_puts_r+0x8e>
 800718c:	290a      	cmp	r1, #10
 800718e:	d004      	beq.n	800719a <_puts_r+0x8e>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	1c5a      	adds	r2, r3, #1
 8007194:	6022      	str	r2, [r4, #0]
 8007196:	7019      	strb	r1, [r3, #0]
 8007198:	e7cf      	b.n	800713a <_puts_r+0x2e>
 800719a:	4622      	mov	r2, r4
 800719c:	4628      	mov	r0, r5
 800719e:	f000 f854 	bl	800724a <__swbuf_r>
 80071a2:	3001      	adds	r0, #1
 80071a4:	d1c9      	bne.n	800713a <_puts_r+0x2e>
 80071a6:	e7df      	b.n	8007168 <_puts_r+0x5c>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	250a      	movs	r5, #10
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	6022      	str	r2, [r4, #0]
 80071b0:	701d      	strb	r5, [r3, #0]
 80071b2:	e7db      	b.n	800716c <_puts_r+0x60>

080071b4 <puts>:
 80071b4:	4b02      	ldr	r3, [pc, #8]	; (80071c0 <puts+0xc>)
 80071b6:	4601      	mov	r1, r0
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	f7ff bfa7 	b.w	800710c <_puts_r>
 80071be:	bf00      	nop
 80071c0:	24000068 	.word	0x24000068

080071c4 <__sread>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	460c      	mov	r4, r1
 80071c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071cc:	f000 f8fc 	bl	80073c8 <_read_r>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	bfab      	itete	ge
 80071d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071d6:	89a3      	ldrhlt	r3, [r4, #12]
 80071d8:	181b      	addge	r3, r3, r0
 80071da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071de:	bfac      	ite	ge
 80071e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80071e2:	81a3      	strhlt	r3, [r4, #12]
 80071e4:	bd10      	pop	{r4, pc}

080071e6 <__swrite>:
 80071e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ea:	461f      	mov	r7, r3
 80071ec:	898b      	ldrh	r3, [r1, #12]
 80071ee:	05db      	lsls	r3, r3, #23
 80071f0:	4605      	mov	r5, r0
 80071f2:	460c      	mov	r4, r1
 80071f4:	4616      	mov	r6, r2
 80071f6:	d505      	bpl.n	8007204 <__swrite+0x1e>
 80071f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071fc:	2302      	movs	r3, #2
 80071fe:	2200      	movs	r2, #0
 8007200:	f000 f8d0 	bl	80073a4 <_lseek_r>
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800720a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800720e:	81a3      	strh	r3, [r4, #12]
 8007210:	4632      	mov	r2, r6
 8007212:	463b      	mov	r3, r7
 8007214:	4628      	mov	r0, r5
 8007216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800721a:	f000 b8e7 	b.w	80073ec <_write_r>

0800721e <__sseek>:
 800721e:	b510      	push	{r4, lr}
 8007220:	460c      	mov	r4, r1
 8007222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007226:	f000 f8bd 	bl	80073a4 <_lseek_r>
 800722a:	1c43      	adds	r3, r0, #1
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	bf15      	itete	ne
 8007230:	6560      	strne	r0, [r4, #84]	; 0x54
 8007232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800723a:	81a3      	strheq	r3, [r4, #12]
 800723c:	bf18      	it	ne
 800723e:	81a3      	strhne	r3, [r4, #12]
 8007240:	bd10      	pop	{r4, pc}

08007242 <__sclose>:
 8007242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007246:	f000 b89d 	b.w	8007384 <_close_r>

0800724a <__swbuf_r>:
 800724a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724c:	460e      	mov	r6, r1
 800724e:	4614      	mov	r4, r2
 8007250:	4605      	mov	r5, r0
 8007252:	b118      	cbz	r0, 800725c <__swbuf_r+0x12>
 8007254:	6a03      	ldr	r3, [r0, #32]
 8007256:	b90b      	cbnz	r3, 800725c <__swbuf_r+0x12>
 8007258:	f7ff ff08 	bl	800706c <__sinit>
 800725c:	69a3      	ldr	r3, [r4, #24]
 800725e:	60a3      	str	r3, [r4, #8]
 8007260:	89a3      	ldrh	r3, [r4, #12]
 8007262:	071a      	lsls	r2, r3, #28
 8007264:	d525      	bpl.n	80072b2 <__swbuf_r+0x68>
 8007266:	6923      	ldr	r3, [r4, #16]
 8007268:	b31b      	cbz	r3, 80072b2 <__swbuf_r+0x68>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	6922      	ldr	r2, [r4, #16]
 800726e:	1a98      	subs	r0, r3, r2
 8007270:	6963      	ldr	r3, [r4, #20]
 8007272:	b2f6      	uxtb	r6, r6
 8007274:	4283      	cmp	r3, r0
 8007276:	4637      	mov	r7, r6
 8007278:	dc04      	bgt.n	8007284 <__swbuf_r+0x3a>
 800727a:	4621      	mov	r1, r4
 800727c:	4628      	mov	r0, r5
 800727e:	f000 fd47 	bl	8007d10 <_fflush_r>
 8007282:	b9e0      	cbnz	r0, 80072be <__swbuf_r+0x74>
 8007284:	68a3      	ldr	r3, [r4, #8]
 8007286:	3b01      	subs	r3, #1
 8007288:	60a3      	str	r3, [r4, #8]
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	6022      	str	r2, [r4, #0]
 8007290:	701e      	strb	r6, [r3, #0]
 8007292:	6962      	ldr	r2, [r4, #20]
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	429a      	cmp	r2, r3
 8007298:	d004      	beq.n	80072a4 <__swbuf_r+0x5a>
 800729a:	89a3      	ldrh	r3, [r4, #12]
 800729c:	07db      	lsls	r3, r3, #31
 800729e:	d506      	bpl.n	80072ae <__swbuf_r+0x64>
 80072a0:	2e0a      	cmp	r6, #10
 80072a2:	d104      	bne.n	80072ae <__swbuf_r+0x64>
 80072a4:	4621      	mov	r1, r4
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 fd32 	bl	8007d10 <_fflush_r>
 80072ac:	b938      	cbnz	r0, 80072be <__swbuf_r+0x74>
 80072ae:	4638      	mov	r0, r7
 80072b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b2:	4621      	mov	r1, r4
 80072b4:	4628      	mov	r0, r5
 80072b6:	f000 f805 	bl	80072c4 <__swsetup_r>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d0d5      	beq.n	800726a <__swbuf_r+0x20>
 80072be:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80072c2:	e7f4      	b.n	80072ae <__swbuf_r+0x64>

080072c4 <__swsetup_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	4b2a      	ldr	r3, [pc, #168]	; (8007370 <__swsetup_r+0xac>)
 80072c8:	4605      	mov	r5, r0
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	460c      	mov	r4, r1
 80072ce:	b118      	cbz	r0, 80072d8 <__swsetup_r+0x14>
 80072d0:	6a03      	ldr	r3, [r0, #32]
 80072d2:	b90b      	cbnz	r3, 80072d8 <__swsetup_r+0x14>
 80072d4:	f7ff feca 	bl	800706c <__sinit>
 80072d8:	89a3      	ldrh	r3, [r4, #12]
 80072da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072de:	0718      	lsls	r0, r3, #28
 80072e0:	d422      	bmi.n	8007328 <__swsetup_r+0x64>
 80072e2:	06d9      	lsls	r1, r3, #27
 80072e4:	d407      	bmi.n	80072f6 <__swsetup_r+0x32>
 80072e6:	2309      	movs	r3, #9
 80072e8:	602b      	str	r3, [r5, #0]
 80072ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80072ee:	81a3      	strh	r3, [r4, #12]
 80072f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f4:	e034      	b.n	8007360 <__swsetup_r+0x9c>
 80072f6:	0758      	lsls	r0, r3, #29
 80072f8:	d512      	bpl.n	8007320 <__swsetup_r+0x5c>
 80072fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072fc:	b141      	cbz	r1, 8007310 <__swsetup_r+0x4c>
 80072fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007302:	4299      	cmp	r1, r3
 8007304:	d002      	beq.n	800730c <__swsetup_r+0x48>
 8007306:	4628      	mov	r0, r5
 8007308:	f000 f8b0 	bl	800746c <_free_r>
 800730c:	2300      	movs	r3, #0
 800730e:	6363      	str	r3, [r4, #52]	; 0x34
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007316:	81a3      	strh	r3, [r4, #12]
 8007318:	2300      	movs	r3, #0
 800731a:	6063      	str	r3, [r4, #4]
 800731c:	6923      	ldr	r3, [r4, #16]
 800731e:	6023      	str	r3, [r4, #0]
 8007320:	89a3      	ldrh	r3, [r4, #12]
 8007322:	f043 0308 	orr.w	r3, r3, #8
 8007326:	81a3      	strh	r3, [r4, #12]
 8007328:	6923      	ldr	r3, [r4, #16]
 800732a:	b94b      	cbnz	r3, 8007340 <__swsetup_r+0x7c>
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007336:	d003      	beq.n	8007340 <__swsetup_r+0x7c>
 8007338:	4621      	mov	r1, r4
 800733a:	4628      	mov	r0, r5
 800733c:	f000 fd36 	bl	8007dac <__smakebuf_r>
 8007340:	89a0      	ldrh	r0, [r4, #12]
 8007342:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007346:	f010 0301 	ands.w	r3, r0, #1
 800734a:	d00a      	beq.n	8007362 <__swsetup_r+0x9e>
 800734c:	2300      	movs	r3, #0
 800734e:	60a3      	str	r3, [r4, #8]
 8007350:	6963      	ldr	r3, [r4, #20]
 8007352:	425b      	negs	r3, r3
 8007354:	61a3      	str	r3, [r4, #24]
 8007356:	6923      	ldr	r3, [r4, #16]
 8007358:	b943      	cbnz	r3, 800736c <__swsetup_r+0xa8>
 800735a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800735e:	d1c4      	bne.n	80072ea <__swsetup_r+0x26>
 8007360:	bd38      	pop	{r3, r4, r5, pc}
 8007362:	0781      	lsls	r1, r0, #30
 8007364:	bf58      	it	pl
 8007366:	6963      	ldrpl	r3, [r4, #20]
 8007368:	60a3      	str	r3, [r4, #8]
 800736a:	e7f4      	b.n	8007356 <__swsetup_r+0x92>
 800736c:	2000      	movs	r0, #0
 800736e:	e7f7      	b.n	8007360 <__swsetup_r+0x9c>
 8007370:	24000068 	.word	0x24000068

08007374 <memset>:
 8007374:	4402      	add	r2, r0
 8007376:	4603      	mov	r3, r0
 8007378:	4293      	cmp	r3, r2
 800737a:	d100      	bne.n	800737e <memset+0xa>
 800737c:	4770      	bx	lr
 800737e:	f803 1b01 	strb.w	r1, [r3], #1
 8007382:	e7f9      	b.n	8007378 <memset+0x4>

08007384 <_close_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4d06      	ldr	r5, [pc, #24]	; (80073a0 <_close_r+0x1c>)
 8007388:	2300      	movs	r3, #0
 800738a:	4604      	mov	r4, r0
 800738c:	4608      	mov	r0, r1
 800738e:	602b      	str	r3, [r5, #0]
 8007390:	f7fa f9c9 	bl	8001726 <_close>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	d102      	bne.n	800739e <_close_r+0x1a>
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	b103      	cbz	r3, 800739e <_close_r+0x1a>
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	bd38      	pop	{r3, r4, r5, pc}
 80073a0:	240002fc 	.word	0x240002fc

080073a4 <_lseek_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4d07      	ldr	r5, [pc, #28]	; (80073c4 <_lseek_r+0x20>)
 80073a8:	4604      	mov	r4, r0
 80073aa:	4608      	mov	r0, r1
 80073ac:	4611      	mov	r1, r2
 80073ae:	2200      	movs	r2, #0
 80073b0:	602a      	str	r2, [r5, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	f7fa f9de 	bl	8001774 <_lseek>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d102      	bne.n	80073c2 <_lseek_r+0x1e>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	b103      	cbz	r3, 80073c2 <_lseek_r+0x1e>
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	240002fc 	.word	0x240002fc

080073c8 <_read_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	4d07      	ldr	r5, [pc, #28]	; (80073e8 <_read_r+0x20>)
 80073cc:	4604      	mov	r4, r0
 80073ce:	4608      	mov	r0, r1
 80073d0:	4611      	mov	r1, r2
 80073d2:	2200      	movs	r2, #0
 80073d4:	602a      	str	r2, [r5, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	f7fa f96c 	bl	80016b4 <_read>
 80073dc:	1c43      	adds	r3, r0, #1
 80073de:	d102      	bne.n	80073e6 <_read_r+0x1e>
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	b103      	cbz	r3, 80073e6 <_read_r+0x1e>
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	bd38      	pop	{r3, r4, r5, pc}
 80073e8:	240002fc 	.word	0x240002fc

080073ec <_write_r>:
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4d07      	ldr	r5, [pc, #28]	; (800740c <_write_r+0x20>)
 80073f0:	4604      	mov	r4, r0
 80073f2:	4608      	mov	r0, r1
 80073f4:	4611      	mov	r1, r2
 80073f6:	2200      	movs	r2, #0
 80073f8:	602a      	str	r2, [r5, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	f7fa f977 	bl	80016ee <_write>
 8007400:	1c43      	adds	r3, r0, #1
 8007402:	d102      	bne.n	800740a <_write_r+0x1e>
 8007404:	682b      	ldr	r3, [r5, #0]
 8007406:	b103      	cbz	r3, 800740a <_write_r+0x1e>
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	bd38      	pop	{r3, r4, r5, pc}
 800740c:	240002fc 	.word	0x240002fc

08007410 <__errno>:
 8007410:	4b01      	ldr	r3, [pc, #4]	; (8007418 <__errno+0x8>)
 8007412:	6818      	ldr	r0, [r3, #0]
 8007414:	4770      	bx	lr
 8007416:	bf00      	nop
 8007418:	24000068 	.word	0x24000068

0800741c <__libc_init_array>:
 800741c:	b570      	push	{r4, r5, r6, lr}
 800741e:	4d0d      	ldr	r5, [pc, #52]	; (8007454 <__libc_init_array+0x38>)
 8007420:	4c0d      	ldr	r4, [pc, #52]	; (8007458 <__libc_init_array+0x3c>)
 8007422:	1b64      	subs	r4, r4, r5
 8007424:	10a4      	asrs	r4, r4, #2
 8007426:	2600      	movs	r6, #0
 8007428:	42a6      	cmp	r6, r4
 800742a:	d109      	bne.n	8007440 <__libc_init_array+0x24>
 800742c:	4d0b      	ldr	r5, [pc, #44]	; (800745c <__libc_init_array+0x40>)
 800742e:	4c0c      	ldr	r4, [pc, #48]	; (8007460 <__libc_init_array+0x44>)
 8007430:	f000 fd5e 	bl	8007ef0 <_init>
 8007434:	1b64      	subs	r4, r4, r5
 8007436:	10a4      	asrs	r4, r4, #2
 8007438:	2600      	movs	r6, #0
 800743a:	42a6      	cmp	r6, r4
 800743c:	d105      	bne.n	800744a <__libc_init_array+0x2e>
 800743e:	bd70      	pop	{r4, r5, r6, pc}
 8007440:	f855 3b04 	ldr.w	r3, [r5], #4
 8007444:	4798      	blx	r3
 8007446:	3601      	adds	r6, #1
 8007448:	e7ee      	b.n	8007428 <__libc_init_array+0xc>
 800744a:	f855 3b04 	ldr.w	r3, [r5], #4
 800744e:	4798      	blx	r3
 8007450:	3601      	adds	r6, #1
 8007452:	e7f2      	b.n	800743a <__libc_init_array+0x1e>
 8007454:	08008104 	.word	0x08008104
 8007458:	08008104 	.word	0x08008104
 800745c:	08008104 	.word	0x08008104
 8007460:	08008108 	.word	0x08008108

08007464 <__retarget_lock_init_recursive>:
 8007464:	4770      	bx	lr

08007466 <__retarget_lock_acquire_recursive>:
 8007466:	4770      	bx	lr

08007468 <__retarget_lock_release_recursive>:
 8007468:	4770      	bx	lr
	...

0800746c <_free_r>:
 800746c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800746e:	2900      	cmp	r1, #0
 8007470:	d044      	beq.n	80074fc <_free_r+0x90>
 8007472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007476:	9001      	str	r0, [sp, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	f1a1 0404 	sub.w	r4, r1, #4
 800747e:	bfb8      	it	lt
 8007480:	18e4      	addlt	r4, r4, r3
 8007482:	f000 f8df 	bl	8007644 <__malloc_lock>
 8007486:	4a1e      	ldr	r2, [pc, #120]	; (8007500 <_free_r+0x94>)
 8007488:	9801      	ldr	r0, [sp, #4]
 800748a:	6813      	ldr	r3, [r2, #0]
 800748c:	b933      	cbnz	r3, 800749c <_free_r+0x30>
 800748e:	6063      	str	r3, [r4, #4]
 8007490:	6014      	str	r4, [r2, #0]
 8007492:	b003      	add	sp, #12
 8007494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007498:	f000 b8da 	b.w	8007650 <__malloc_unlock>
 800749c:	42a3      	cmp	r3, r4
 800749e:	d908      	bls.n	80074b2 <_free_r+0x46>
 80074a0:	6825      	ldr	r5, [r4, #0]
 80074a2:	1961      	adds	r1, r4, r5
 80074a4:	428b      	cmp	r3, r1
 80074a6:	bf01      	itttt	eq
 80074a8:	6819      	ldreq	r1, [r3, #0]
 80074aa:	685b      	ldreq	r3, [r3, #4]
 80074ac:	1949      	addeq	r1, r1, r5
 80074ae:	6021      	streq	r1, [r4, #0]
 80074b0:	e7ed      	b.n	800748e <_free_r+0x22>
 80074b2:	461a      	mov	r2, r3
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	b10b      	cbz	r3, 80074bc <_free_r+0x50>
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d9fa      	bls.n	80074b2 <_free_r+0x46>
 80074bc:	6811      	ldr	r1, [r2, #0]
 80074be:	1855      	adds	r5, r2, r1
 80074c0:	42a5      	cmp	r5, r4
 80074c2:	d10b      	bne.n	80074dc <_free_r+0x70>
 80074c4:	6824      	ldr	r4, [r4, #0]
 80074c6:	4421      	add	r1, r4
 80074c8:	1854      	adds	r4, r2, r1
 80074ca:	42a3      	cmp	r3, r4
 80074cc:	6011      	str	r1, [r2, #0]
 80074ce:	d1e0      	bne.n	8007492 <_free_r+0x26>
 80074d0:	681c      	ldr	r4, [r3, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	6053      	str	r3, [r2, #4]
 80074d6:	440c      	add	r4, r1
 80074d8:	6014      	str	r4, [r2, #0]
 80074da:	e7da      	b.n	8007492 <_free_r+0x26>
 80074dc:	d902      	bls.n	80074e4 <_free_r+0x78>
 80074de:	230c      	movs	r3, #12
 80074e0:	6003      	str	r3, [r0, #0]
 80074e2:	e7d6      	b.n	8007492 <_free_r+0x26>
 80074e4:	6825      	ldr	r5, [r4, #0]
 80074e6:	1961      	adds	r1, r4, r5
 80074e8:	428b      	cmp	r3, r1
 80074ea:	bf04      	itt	eq
 80074ec:	6819      	ldreq	r1, [r3, #0]
 80074ee:	685b      	ldreq	r3, [r3, #4]
 80074f0:	6063      	str	r3, [r4, #4]
 80074f2:	bf04      	itt	eq
 80074f4:	1949      	addeq	r1, r1, r5
 80074f6:	6021      	streq	r1, [r4, #0]
 80074f8:	6054      	str	r4, [r2, #4]
 80074fa:	e7ca      	b.n	8007492 <_free_r+0x26>
 80074fc:	b003      	add	sp, #12
 80074fe:	bd30      	pop	{r4, r5, pc}
 8007500:	24000304 	.word	0x24000304

08007504 <sbrk_aligned>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	4e0e      	ldr	r6, [pc, #56]	; (8007540 <sbrk_aligned+0x3c>)
 8007508:	460c      	mov	r4, r1
 800750a:	6831      	ldr	r1, [r6, #0]
 800750c:	4605      	mov	r5, r0
 800750e:	b911      	cbnz	r1, 8007516 <sbrk_aligned+0x12>
 8007510:	f000 fcde 	bl	8007ed0 <_sbrk_r>
 8007514:	6030      	str	r0, [r6, #0]
 8007516:	4621      	mov	r1, r4
 8007518:	4628      	mov	r0, r5
 800751a:	f000 fcd9 	bl	8007ed0 <_sbrk_r>
 800751e:	1c43      	adds	r3, r0, #1
 8007520:	d00a      	beq.n	8007538 <sbrk_aligned+0x34>
 8007522:	1cc4      	adds	r4, r0, #3
 8007524:	f024 0403 	bic.w	r4, r4, #3
 8007528:	42a0      	cmp	r0, r4
 800752a:	d007      	beq.n	800753c <sbrk_aligned+0x38>
 800752c:	1a21      	subs	r1, r4, r0
 800752e:	4628      	mov	r0, r5
 8007530:	f000 fcce 	bl	8007ed0 <_sbrk_r>
 8007534:	3001      	adds	r0, #1
 8007536:	d101      	bne.n	800753c <sbrk_aligned+0x38>
 8007538:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800753c:	4620      	mov	r0, r4
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	24000308 	.word	0x24000308

08007544 <_malloc_r>:
 8007544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007548:	1ccd      	adds	r5, r1, #3
 800754a:	f025 0503 	bic.w	r5, r5, #3
 800754e:	3508      	adds	r5, #8
 8007550:	2d0c      	cmp	r5, #12
 8007552:	bf38      	it	cc
 8007554:	250c      	movcc	r5, #12
 8007556:	2d00      	cmp	r5, #0
 8007558:	4607      	mov	r7, r0
 800755a:	db01      	blt.n	8007560 <_malloc_r+0x1c>
 800755c:	42a9      	cmp	r1, r5
 800755e:	d905      	bls.n	800756c <_malloc_r+0x28>
 8007560:	230c      	movs	r3, #12
 8007562:	603b      	str	r3, [r7, #0]
 8007564:	2600      	movs	r6, #0
 8007566:	4630      	mov	r0, r6
 8007568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800756c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007640 <_malloc_r+0xfc>
 8007570:	f000 f868 	bl	8007644 <__malloc_lock>
 8007574:	f8d8 3000 	ldr.w	r3, [r8]
 8007578:	461c      	mov	r4, r3
 800757a:	bb5c      	cbnz	r4, 80075d4 <_malloc_r+0x90>
 800757c:	4629      	mov	r1, r5
 800757e:	4638      	mov	r0, r7
 8007580:	f7ff ffc0 	bl	8007504 <sbrk_aligned>
 8007584:	1c43      	adds	r3, r0, #1
 8007586:	4604      	mov	r4, r0
 8007588:	d155      	bne.n	8007636 <_malloc_r+0xf2>
 800758a:	f8d8 4000 	ldr.w	r4, [r8]
 800758e:	4626      	mov	r6, r4
 8007590:	2e00      	cmp	r6, #0
 8007592:	d145      	bne.n	8007620 <_malloc_r+0xdc>
 8007594:	2c00      	cmp	r4, #0
 8007596:	d048      	beq.n	800762a <_malloc_r+0xe6>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	4631      	mov	r1, r6
 800759c:	4638      	mov	r0, r7
 800759e:	eb04 0903 	add.w	r9, r4, r3
 80075a2:	f000 fc95 	bl	8007ed0 <_sbrk_r>
 80075a6:	4581      	cmp	r9, r0
 80075a8:	d13f      	bne.n	800762a <_malloc_r+0xe6>
 80075aa:	6821      	ldr	r1, [r4, #0]
 80075ac:	1a6d      	subs	r5, r5, r1
 80075ae:	4629      	mov	r1, r5
 80075b0:	4638      	mov	r0, r7
 80075b2:	f7ff ffa7 	bl	8007504 <sbrk_aligned>
 80075b6:	3001      	adds	r0, #1
 80075b8:	d037      	beq.n	800762a <_malloc_r+0xe6>
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	442b      	add	r3, r5
 80075be:	6023      	str	r3, [r4, #0]
 80075c0:	f8d8 3000 	ldr.w	r3, [r8]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d038      	beq.n	800763a <_malloc_r+0xf6>
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	42a2      	cmp	r2, r4
 80075cc:	d12b      	bne.n	8007626 <_malloc_r+0xe2>
 80075ce:	2200      	movs	r2, #0
 80075d0:	605a      	str	r2, [r3, #4]
 80075d2:	e00f      	b.n	80075f4 <_malloc_r+0xb0>
 80075d4:	6822      	ldr	r2, [r4, #0]
 80075d6:	1b52      	subs	r2, r2, r5
 80075d8:	d41f      	bmi.n	800761a <_malloc_r+0xd6>
 80075da:	2a0b      	cmp	r2, #11
 80075dc:	d917      	bls.n	800760e <_malloc_r+0xca>
 80075de:	1961      	adds	r1, r4, r5
 80075e0:	42a3      	cmp	r3, r4
 80075e2:	6025      	str	r5, [r4, #0]
 80075e4:	bf18      	it	ne
 80075e6:	6059      	strne	r1, [r3, #4]
 80075e8:	6863      	ldr	r3, [r4, #4]
 80075ea:	bf08      	it	eq
 80075ec:	f8c8 1000 	streq.w	r1, [r8]
 80075f0:	5162      	str	r2, [r4, r5]
 80075f2:	604b      	str	r3, [r1, #4]
 80075f4:	4638      	mov	r0, r7
 80075f6:	f104 060b 	add.w	r6, r4, #11
 80075fa:	f000 f829 	bl	8007650 <__malloc_unlock>
 80075fe:	f026 0607 	bic.w	r6, r6, #7
 8007602:	1d23      	adds	r3, r4, #4
 8007604:	1af2      	subs	r2, r6, r3
 8007606:	d0ae      	beq.n	8007566 <_malloc_r+0x22>
 8007608:	1b9b      	subs	r3, r3, r6
 800760a:	50a3      	str	r3, [r4, r2]
 800760c:	e7ab      	b.n	8007566 <_malloc_r+0x22>
 800760e:	42a3      	cmp	r3, r4
 8007610:	6862      	ldr	r2, [r4, #4]
 8007612:	d1dd      	bne.n	80075d0 <_malloc_r+0x8c>
 8007614:	f8c8 2000 	str.w	r2, [r8]
 8007618:	e7ec      	b.n	80075f4 <_malloc_r+0xb0>
 800761a:	4623      	mov	r3, r4
 800761c:	6864      	ldr	r4, [r4, #4]
 800761e:	e7ac      	b.n	800757a <_malloc_r+0x36>
 8007620:	4634      	mov	r4, r6
 8007622:	6876      	ldr	r6, [r6, #4]
 8007624:	e7b4      	b.n	8007590 <_malloc_r+0x4c>
 8007626:	4613      	mov	r3, r2
 8007628:	e7cc      	b.n	80075c4 <_malloc_r+0x80>
 800762a:	230c      	movs	r3, #12
 800762c:	603b      	str	r3, [r7, #0]
 800762e:	4638      	mov	r0, r7
 8007630:	f000 f80e 	bl	8007650 <__malloc_unlock>
 8007634:	e797      	b.n	8007566 <_malloc_r+0x22>
 8007636:	6025      	str	r5, [r4, #0]
 8007638:	e7dc      	b.n	80075f4 <_malloc_r+0xb0>
 800763a:	605b      	str	r3, [r3, #4]
 800763c:	deff      	udf	#255	; 0xff
 800763e:	bf00      	nop
 8007640:	24000304 	.word	0x24000304

08007644 <__malloc_lock>:
 8007644:	4801      	ldr	r0, [pc, #4]	; (800764c <__malloc_lock+0x8>)
 8007646:	f7ff bf0e 	b.w	8007466 <__retarget_lock_acquire_recursive>
 800764a:	bf00      	nop
 800764c:	24000300 	.word	0x24000300

08007650 <__malloc_unlock>:
 8007650:	4801      	ldr	r0, [pc, #4]	; (8007658 <__malloc_unlock+0x8>)
 8007652:	f7ff bf09 	b.w	8007468 <__retarget_lock_release_recursive>
 8007656:	bf00      	nop
 8007658:	24000300 	.word	0x24000300

0800765c <__sfputc_r>:
 800765c:	6893      	ldr	r3, [r2, #8]
 800765e:	3b01      	subs	r3, #1
 8007660:	2b00      	cmp	r3, #0
 8007662:	b410      	push	{r4}
 8007664:	6093      	str	r3, [r2, #8]
 8007666:	da08      	bge.n	800767a <__sfputc_r+0x1e>
 8007668:	6994      	ldr	r4, [r2, #24]
 800766a:	42a3      	cmp	r3, r4
 800766c:	db01      	blt.n	8007672 <__sfputc_r+0x16>
 800766e:	290a      	cmp	r1, #10
 8007670:	d103      	bne.n	800767a <__sfputc_r+0x1e>
 8007672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007676:	f7ff bde8 	b.w	800724a <__swbuf_r>
 800767a:	6813      	ldr	r3, [r2, #0]
 800767c:	1c58      	adds	r0, r3, #1
 800767e:	6010      	str	r0, [r2, #0]
 8007680:	7019      	strb	r1, [r3, #0]
 8007682:	4608      	mov	r0, r1
 8007684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007688:	4770      	bx	lr

0800768a <__sfputs_r>:
 800768a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800768c:	4606      	mov	r6, r0
 800768e:	460f      	mov	r7, r1
 8007690:	4614      	mov	r4, r2
 8007692:	18d5      	adds	r5, r2, r3
 8007694:	42ac      	cmp	r4, r5
 8007696:	d101      	bne.n	800769c <__sfputs_r+0x12>
 8007698:	2000      	movs	r0, #0
 800769a:	e007      	b.n	80076ac <__sfputs_r+0x22>
 800769c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a0:	463a      	mov	r2, r7
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7ff ffda 	bl	800765c <__sfputc_r>
 80076a8:	1c43      	adds	r3, r0, #1
 80076aa:	d1f3      	bne.n	8007694 <__sfputs_r+0xa>
 80076ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076b0 <_vfiprintf_r>:
 80076b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b4:	460d      	mov	r5, r1
 80076b6:	b09d      	sub	sp, #116	; 0x74
 80076b8:	4614      	mov	r4, r2
 80076ba:	4698      	mov	r8, r3
 80076bc:	4606      	mov	r6, r0
 80076be:	b118      	cbz	r0, 80076c8 <_vfiprintf_r+0x18>
 80076c0:	6a03      	ldr	r3, [r0, #32]
 80076c2:	b90b      	cbnz	r3, 80076c8 <_vfiprintf_r+0x18>
 80076c4:	f7ff fcd2 	bl	800706c <__sinit>
 80076c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ca:	07d9      	lsls	r1, r3, #31
 80076cc:	d405      	bmi.n	80076da <_vfiprintf_r+0x2a>
 80076ce:	89ab      	ldrh	r3, [r5, #12]
 80076d0:	059a      	lsls	r2, r3, #22
 80076d2:	d402      	bmi.n	80076da <_vfiprintf_r+0x2a>
 80076d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076d6:	f7ff fec6 	bl	8007466 <__retarget_lock_acquire_recursive>
 80076da:	89ab      	ldrh	r3, [r5, #12]
 80076dc:	071b      	lsls	r3, r3, #28
 80076de:	d501      	bpl.n	80076e4 <_vfiprintf_r+0x34>
 80076e0:	692b      	ldr	r3, [r5, #16]
 80076e2:	b99b      	cbnz	r3, 800770c <_vfiprintf_r+0x5c>
 80076e4:	4629      	mov	r1, r5
 80076e6:	4630      	mov	r0, r6
 80076e8:	f7ff fdec 	bl	80072c4 <__swsetup_r>
 80076ec:	b170      	cbz	r0, 800770c <_vfiprintf_r+0x5c>
 80076ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076f0:	07dc      	lsls	r4, r3, #31
 80076f2:	d504      	bpl.n	80076fe <_vfiprintf_r+0x4e>
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076f8:	b01d      	add	sp, #116	; 0x74
 80076fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076fe:	89ab      	ldrh	r3, [r5, #12]
 8007700:	0598      	lsls	r0, r3, #22
 8007702:	d4f7      	bmi.n	80076f4 <_vfiprintf_r+0x44>
 8007704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007706:	f7ff feaf 	bl	8007468 <__retarget_lock_release_recursive>
 800770a:	e7f3      	b.n	80076f4 <_vfiprintf_r+0x44>
 800770c:	2300      	movs	r3, #0
 800770e:	9309      	str	r3, [sp, #36]	; 0x24
 8007710:	2320      	movs	r3, #32
 8007712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007716:	f8cd 800c 	str.w	r8, [sp, #12]
 800771a:	2330      	movs	r3, #48	; 0x30
 800771c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80078d0 <_vfiprintf_r+0x220>
 8007720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007724:	f04f 0901 	mov.w	r9, #1
 8007728:	4623      	mov	r3, r4
 800772a:	469a      	mov	sl, r3
 800772c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007730:	b10a      	cbz	r2, 8007736 <_vfiprintf_r+0x86>
 8007732:	2a25      	cmp	r2, #37	; 0x25
 8007734:	d1f9      	bne.n	800772a <_vfiprintf_r+0x7a>
 8007736:	ebba 0b04 	subs.w	fp, sl, r4
 800773a:	d00b      	beq.n	8007754 <_vfiprintf_r+0xa4>
 800773c:	465b      	mov	r3, fp
 800773e:	4622      	mov	r2, r4
 8007740:	4629      	mov	r1, r5
 8007742:	4630      	mov	r0, r6
 8007744:	f7ff ffa1 	bl	800768a <__sfputs_r>
 8007748:	3001      	adds	r0, #1
 800774a:	f000 80a9 	beq.w	80078a0 <_vfiprintf_r+0x1f0>
 800774e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007750:	445a      	add	r2, fp
 8007752:	9209      	str	r2, [sp, #36]	; 0x24
 8007754:	f89a 3000 	ldrb.w	r3, [sl]
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80a1 	beq.w	80078a0 <_vfiprintf_r+0x1f0>
 800775e:	2300      	movs	r3, #0
 8007760:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007768:	f10a 0a01 	add.w	sl, sl, #1
 800776c:	9304      	str	r3, [sp, #16]
 800776e:	9307      	str	r3, [sp, #28]
 8007770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007774:	931a      	str	r3, [sp, #104]	; 0x68
 8007776:	4654      	mov	r4, sl
 8007778:	2205      	movs	r2, #5
 800777a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800777e:	4854      	ldr	r0, [pc, #336]	; (80078d0 <_vfiprintf_r+0x220>)
 8007780:	f7f8 fdae 	bl	80002e0 <memchr>
 8007784:	9a04      	ldr	r2, [sp, #16]
 8007786:	b9d8      	cbnz	r0, 80077c0 <_vfiprintf_r+0x110>
 8007788:	06d1      	lsls	r1, r2, #27
 800778a:	bf44      	itt	mi
 800778c:	2320      	movmi	r3, #32
 800778e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007792:	0713      	lsls	r3, r2, #28
 8007794:	bf44      	itt	mi
 8007796:	232b      	movmi	r3, #43	; 0x2b
 8007798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800779c:	f89a 3000 	ldrb.w	r3, [sl]
 80077a0:	2b2a      	cmp	r3, #42	; 0x2a
 80077a2:	d015      	beq.n	80077d0 <_vfiprintf_r+0x120>
 80077a4:	9a07      	ldr	r2, [sp, #28]
 80077a6:	4654      	mov	r4, sl
 80077a8:	2000      	movs	r0, #0
 80077aa:	f04f 0c0a 	mov.w	ip, #10
 80077ae:	4621      	mov	r1, r4
 80077b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077b4:	3b30      	subs	r3, #48	; 0x30
 80077b6:	2b09      	cmp	r3, #9
 80077b8:	d94d      	bls.n	8007856 <_vfiprintf_r+0x1a6>
 80077ba:	b1b0      	cbz	r0, 80077ea <_vfiprintf_r+0x13a>
 80077bc:	9207      	str	r2, [sp, #28]
 80077be:	e014      	b.n	80077ea <_vfiprintf_r+0x13a>
 80077c0:	eba0 0308 	sub.w	r3, r0, r8
 80077c4:	fa09 f303 	lsl.w	r3, r9, r3
 80077c8:	4313      	orrs	r3, r2
 80077ca:	9304      	str	r3, [sp, #16]
 80077cc:	46a2      	mov	sl, r4
 80077ce:	e7d2      	b.n	8007776 <_vfiprintf_r+0xc6>
 80077d0:	9b03      	ldr	r3, [sp, #12]
 80077d2:	1d19      	adds	r1, r3, #4
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	9103      	str	r1, [sp, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	bfbb      	ittet	lt
 80077dc:	425b      	neglt	r3, r3
 80077de:	f042 0202 	orrlt.w	r2, r2, #2
 80077e2:	9307      	strge	r3, [sp, #28]
 80077e4:	9307      	strlt	r3, [sp, #28]
 80077e6:	bfb8      	it	lt
 80077e8:	9204      	strlt	r2, [sp, #16]
 80077ea:	7823      	ldrb	r3, [r4, #0]
 80077ec:	2b2e      	cmp	r3, #46	; 0x2e
 80077ee:	d10c      	bne.n	800780a <_vfiprintf_r+0x15a>
 80077f0:	7863      	ldrb	r3, [r4, #1]
 80077f2:	2b2a      	cmp	r3, #42	; 0x2a
 80077f4:	d134      	bne.n	8007860 <_vfiprintf_r+0x1b0>
 80077f6:	9b03      	ldr	r3, [sp, #12]
 80077f8:	1d1a      	adds	r2, r3, #4
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	9203      	str	r2, [sp, #12]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	bfb8      	it	lt
 8007802:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007806:	3402      	adds	r4, #2
 8007808:	9305      	str	r3, [sp, #20]
 800780a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80078e0 <_vfiprintf_r+0x230>
 800780e:	7821      	ldrb	r1, [r4, #0]
 8007810:	2203      	movs	r2, #3
 8007812:	4650      	mov	r0, sl
 8007814:	f7f8 fd64 	bl	80002e0 <memchr>
 8007818:	b138      	cbz	r0, 800782a <_vfiprintf_r+0x17a>
 800781a:	9b04      	ldr	r3, [sp, #16]
 800781c:	eba0 000a 	sub.w	r0, r0, sl
 8007820:	2240      	movs	r2, #64	; 0x40
 8007822:	4082      	lsls	r2, r0
 8007824:	4313      	orrs	r3, r2
 8007826:	3401      	adds	r4, #1
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800782e:	4829      	ldr	r0, [pc, #164]	; (80078d4 <_vfiprintf_r+0x224>)
 8007830:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007834:	2206      	movs	r2, #6
 8007836:	f7f8 fd53 	bl	80002e0 <memchr>
 800783a:	2800      	cmp	r0, #0
 800783c:	d03f      	beq.n	80078be <_vfiprintf_r+0x20e>
 800783e:	4b26      	ldr	r3, [pc, #152]	; (80078d8 <_vfiprintf_r+0x228>)
 8007840:	bb1b      	cbnz	r3, 800788a <_vfiprintf_r+0x1da>
 8007842:	9b03      	ldr	r3, [sp, #12]
 8007844:	3307      	adds	r3, #7
 8007846:	f023 0307 	bic.w	r3, r3, #7
 800784a:	3308      	adds	r3, #8
 800784c:	9303      	str	r3, [sp, #12]
 800784e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007850:	443b      	add	r3, r7
 8007852:	9309      	str	r3, [sp, #36]	; 0x24
 8007854:	e768      	b.n	8007728 <_vfiprintf_r+0x78>
 8007856:	fb0c 3202 	mla	r2, ip, r2, r3
 800785a:	460c      	mov	r4, r1
 800785c:	2001      	movs	r0, #1
 800785e:	e7a6      	b.n	80077ae <_vfiprintf_r+0xfe>
 8007860:	2300      	movs	r3, #0
 8007862:	3401      	adds	r4, #1
 8007864:	9305      	str	r3, [sp, #20]
 8007866:	4619      	mov	r1, r3
 8007868:	f04f 0c0a 	mov.w	ip, #10
 800786c:	4620      	mov	r0, r4
 800786e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007872:	3a30      	subs	r2, #48	; 0x30
 8007874:	2a09      	cmp	r2, #9
 8007876:	d903      	bls.n	8007880 <_vfiprintf_r+0x1d0>
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0c6      	beq.n	800780a <_vfiprintf_r+0x15a>
 800787c:	9105      	str	r1, [sp, #20]
 800787e:	e7c4      	b.n	800780a <_vfiprintf_r+0x15a>
 8007880:	fb0c 2101 	mla	r1, ip, r1, r2
 8007884:	4604      	mov	r4, r0
 8007886:	2301      	movs	r3, #1
 8007888:	e7f0      	b.n	800786c <_vfiprintf_r+0x1bc>
 800788a:	ab03      	add	r3, sp, #12
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	462a      	mov	r2, r5
 8007890:	4b12      	ldr	r3, [pc, #72]	; (80078dc <_vfiprintf_r+0x22c>)
 8007892:	a904      	add	r1, sp, #16
 8007894:	4630      	mov	r0, r6
 8007896:	f3af 8000 	nop.w
 800789a:	4607      	mov	r7, r0
 800789c:	1c78      	adds	r0, r7, #1
 800789e:	d1d6      	bne.n	800784e <_vfiprintf_r+0x19e>
 80078a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078a2:	07d9      	lsls	r1, r3, #31
 80078a4:	d405      	bmi.n	80078b2 <_vfiprintf_r+0x202>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	059a      	lsls	r2, r3, #22
 80078aa:	d402      	bmi.n	80078b2 <_vfiprintf_r+0x202>
 80078ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ae:	f7ff fddb 	bl	8007468 <__retarget_lock_release_recursive>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	065b      	lsls	r3, r3, #25
 80078b6:	f53f af1d 	bmi.w	80076f4 <_vfiprintf_r+0x44>
 80078ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078bc:	e71c      	b.n	80076f8 <_vfiprintf_r+0x48>
 80078be:	ab03      	add	r3, sp, #12
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	462a      	mov	r2, r5
 80078c4:	4b05      	ldr	r3, [pc, #20]	; (80078dc <_vfiprintf_r+0x22c>)
 80078c6:	a904      	add	r1, sp, #16
 80078c8:	4630      	mov	r0, r6
 80078ca:	f000 f879 	bl	80079c0 <_printf_i>
 80078ce:	e7e4      	b.n	800789a <_vfiprintf_r+0x1ea>
 80078d0:	080080c8 	.word	0x080080c8
 80078d4:	080080d2 	.word	0x080080d2
 80078d8:	00000000 	.word	0x00000000
 80078dc:	0800768b 	.word	0x0800768b
 80078e0:	080080ce 	.word	0x080080ce

080078e4 <_printf_common>:
 80078e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e8:	4616      	mov	r6, r2
 80078ea:	4699      	mov	r9, r3
 80078ec:	688a      	ldr	r2, [r1, #8]
 80078ee:	690b      	ldr	r3, [r1, #16]
 80078f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078f4:	4293      	cmp	r3, r2
 80078f6:	bfb8      	it	lt
 80078f8:	4613      	movlt	r3, r2
 80078fa:	6033      	str	r3, [r6, #0]
 80078fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007900:	4607      	mov	r7, r0
 8007902:	460c      	mov	r4, r1
 8007904:	b10a      	cbz	r2, 800790a <_printf_common+0x26>
 8007906:	3301      	adds	r3, #1
 8007908:	6033      	str	r3, [r6, #0]
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	0699      	lsls	r1, r3, #26
 800790e:	bf42      	ittt	mi
 8007910:	6833      	ldrmi	r3, [r6, #0]
 8007912:	3302      	addmi	r3, #2
 8007914:	6033      	strmi	r3, [r6, #0]
 8007916:	6825      	ldr	r5, [r4, #0]
 8007918:	f015 0506 	ands.w	r5, r5, #6
 800791c:	d106      	bne.n	800792c <_printf_common+0x48>
 800791e:	f104 0a19 	add.w	sl, r4, #25
 8007922:	68e3      	ldr	r3, [r4, #12]
 8007924:	6832      	ldr	r2, [r6, #0]
 8007926:	1a9b      	subs	r3, r3, r2
 8007928:	42ab      	cmp	r3, r5
 800792a:	dc26      	bgt.n	800797a <_printf_common+0x96>
 800792c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007930:	1e13      	subs	r3, r2, #0
 8007932:	6822      	ldr	r2, [r4, #0]
 8007934:	bf18      	it	ne
 8007936:	2301      	movne	r3, #1
 8007938:	0692      	lsls	r2, r2, #26
 800793a:	d42b      	bmi.n	8007994 <_printf_common+0xb0>
 800793c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007940:	4649      	mov	r1, r9
 8007942:	4638      	mov	r0, r7
 8007944:	47c0      	blx	r8
 8007946:	3001      	adds	r0, #1
 8007948:	d01e      	beq.n	8007988 <_printf_common+0xa4>
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	6922      	ldr	r2, [r4, #16]
 800794e:	f003 0306 	and.w	r3, r3, #6
 8007952:	2b04      	cmp	r3, #4
 8007954:	bf02      	ittt	eq
 8007956:	68e5      	ldreq	r5, [r4, #12]
 8007958:	6833      	ldreq	r3, [r6, #0]
 800795a:	1aed      	subeq	r5, r5, r3
 800795c:	68a3      	ldr	r3, [r4, #8]
 800795e:	bf0c      	ite	eq
 8007960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007964:	2500      	movne	r5, #0
 8007966:	4293      	cmp	r3, r2
 8007968:	bfc4      	itt	gt
 800796a:	1a9b      	subgt	r3, r3, r2
 800796c:	18ed      	addgt	r5, r5, r3
 800796e:	2600      	movs	r6, #0
 8007970:	341a      	adds	r4, #26
 8007972:	42b5      	cmp	r5, r6
 8007974:	d11a      	bne.n	80079ac <_printf_common+0xc8>
 8007976:	2000      	movs	r0, #0
 8007978:	e008      	b.n	800798c <_printf_common+0xa8>
 800797a:	2301      	movs	r3, #1
 800797c:	4652      	mov	r2, sl
 800797e:	4649      	mov	r1, r9
 8007980:	4638      	mov	r0, r7
 8007982:	47c0      	blx	r8
 8007984:	3001      	adds	r0, #1
 8007986:	d103      	bne.n	8007990 <_printf_common+0xac>
 8007988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800798c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007990:	3501      	adds	r5, #1
 8007992:	e7c6      	b.n	8007922 <_printf_common+0x3e>
 8007994:	18e1      	adds	r1, r4, r3
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	2030      	movs	r0, #48	; 0x30
 800799a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800799e:	4422      	add	r2, r4
 80079a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079a8:	3302      	adds	r3, #2
 80079aa:	e7c7      	b.n	800793c <_printf_common+0x58>
 80079ac:	2301      	movs	r3, #1
 80079ae:	4622      	mov	r2, r4
 80079b0:	4649      	mov	r1, r9
 80079b2:	4638      	mov	r0, r7
 80079b4:	47c0      	blx	r8
 80079b6:	3001      	adds	r0, #1
 80079b8:	d0e6      	beq.n	8007988 <_printf_common+0xa4>
 80079ba:	3601      	adds	r6, #1
 80079bc:	e7d9      	b.n	8007972 <_printf_common+0x8e>
	...

080079c0 <_printf_i>:
 80079c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079c4:	7e0f      	ldrb	r7, [r1, #24]
 80079c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079c8:	2f78      	cmp	r7, #120	; 0x78
 80079ca:	4691      	mov	r9, r2
 80079cc:	4680      	mov	r8, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	469a      	mov	sl, r3
 80079d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079d6:	d807      	bhi.n	80079e8 <_printf_i+0x28>
 80079d8:	2f62      	cmp	r7, #98	; 0x62
 80079da:	d80a      	bhi.n	80079f2 <_printf_i+0x32>
 80079dc:	2f00      	cmp	r7, #0
 80079de:	f000 80d4 	beq.w	8007b8a <_printf_i+0x1ca>
 80079e2:	2f58      	cmp	r7, #88	; 0x58
 80079e4:	f000 80c0 	beq.w	8007b68 <_printf_i+0x1a8>
 80079e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079f0:	e03a      	b.n	8007a68 <_printf_i+0xa8>
 80079f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079f6:	2b15      	cmp	r3, #21
 80079f8:	d8f6      	bhi.n	80079e8 <_printf_i+0x28>
 80079fa:	a101      	add	r1, pc, #4	; (adr r1, 8007a00 <_printf_i+0x40>)
 80079fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a00:	08007a59 	.word	0x08007a59
 8007a04:	08007a6d 	.word	0x08007a6d
 8007a08:	080079e9 	.word	0x080079e9
 8007a0c:	080079e9 	.word	0x080079e9
 8007a10:	080079e9 	.word	0x080079e9
 8007a14:	080079e9 	.word	0x080079e9
 8007a18:	08007a6d 	.word	0x08007a6d
 8007a1c:	080079e9 	.word	0x080079e9
 8007a20:	080079e9 	.word	0x080079e9
 8007a24:	080079e9 	.word	0x080079e9
 8007a28:	080079e9 	.word	0x080079e9
 8007a2c:	08007b71 	.word	0x08007b71
 8007a30:	08007a99 	.word	0x08007a99
 8007a34:	08007b2b 	.word	0x08007b2b
 8007a38:	080079e9 	.word	0x080079e9
 8007a3c:	080079e9 	.word	0x080079e9
 8007a40:	08007b93 	.word	0x08007b93
 8007a44:	080079e9 	.word	0x080079e9
 8007a48:	08007a99 	.word	0x08007a99
 8007a4c:	080079e9 	.word	0x080079e9
 8007a50:	080079e9 	.word	0x080079e9
 8007a54:	08007b33 	.word	0x08007b33
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	1d1a      	adds	r2, r3, #4
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	602a      	str	r2, [r5, #0]
 8007a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e09f      	b.n	8007bac <_printf_i+0x1ec>
 8007a6c:	6820      	ldr	r0, [r4, #0]
 8007a6e:	682b      	ldr	r3, [r5, #0]
 8007a70:	0607      	lsls	r7, r0, #24
 8007a72:	f103 0104 	add.w	r1, r3, #4
 8007a76:	6029      	str	r1, [r5, #0]
 8007a78:	d501      	bpl.n	8007a7e <_printf_i+0xbe>
 8007a7a:	681e      	ldr	r6, [r3, #0]
 8007a7c:	e003      	b.n	8007a86 <_printf_i+0xc6>
 8007a7e:	0646      	lsls	r6, r0, #25
 8007a80:	d5fb      	bpl.n	8007a7a <_printf_i+0xba>
 8007a82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a86:	2e00      	cmp	r6, #0
 8007a88:	da03      	bge.n	8007a92 <_printf_i+0xd2>
 8007a8a:	232d      	movs	r3, #45	; 0x2d
 8007a8c:	4276      	negs	r6, r6
 8007a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a92:	485a      	ldr	r0, [pc, #360]	; (8007bfc <_printf_i+0x23c>)
 8007a94:	230a      	movs	r3, #10
 8007a96:	e012      	b.n	8007abe <_printf_i+0xfe>
 8007a98:	682b      	ldr	r3, [r5, #0]
 8007a9a:	6820      	ldr	r0, [r4, #0]
 8007a9c:	1d19      	adds	r1, r3, #4
 8007a9e:	6029      	str	r1, [r5, #0]
 8007aa0:	0605      	lsls	r5, r0, #24
 8007aa2:	d501      	bpl.n	8007aa8 <_printf_i+0xe8>
 8007aa4:	681e      	ldr	r6, [r3, #0]
 8007aa6:	e002      	b.n	8007aae <_printf_i+0xee>
 8007aa8:	0641      	lsls	r1, r0, #25
 8007aaa:	d5fb      	bpl.n	8007aa4 <_printf_i+0xe4>
 8007aac:	881e      	ldrh	r6, [r3, #0]
 8007aae:	4853      	ldr	r0, [pc, #332]	; (8007bfc <_printf_i+0x23c>)
 8007ab0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ab2:	bf0c      	ite	eq
 8007ab4:	2308      	moveq	r3, #8
 8007ab6:	230a      	movne	r3, #10
 8007ab8:	2100      	movs	r1, #0
 8007aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007abe:	6865      	ldr	r5, [r4, #4]
 8007ac0:	60a5      	str	r5, [r4, #8]
 8007ac2:	2d00      	cmp	r5, #0
 8007ac4:	bfa2      	ittt	ge
 8007ac6:	6821      	ldrge	r1, [r4, #0]
 8007ac8:	f021 0104 	bicge.w	r1, r1, #4
 8007acc:	6021      	strge	r1, [r4, #0]
 8007ace:	b90e      	cbnz	r6, 8007ad4 <_printf_i+0x114>
 8007ad0:	2d00      	cmp	r5, #0
 8007ad2:	d04b      	beq.n	8007b6c <_printf_i+0x1ac>
 8007ad4:	4615      	mov	r5, r2
 8007ad6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ada:	fb03 6711 	mls	r7, r3, r1, r6
 8007ade:	5dc7      	ldrb	r7, [r0, r7]
 8007ae0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ae4:	4637      	mov	r7, r6
 8007ae6:	42bb      	cmp	r3, r7
 8007ae8:	460e      	mov	r6, r1
 8007aea:	d9f4      	bls.n	8007ad6 <_printf_i+0x116>
 8007aec:	2b08      	cmp	r3, #8
 8007aee:	d10b      	bne.n	8007b08 <_printf_i+0x148>
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	07de      	lsls	r6, r3, #31
 8007af4:	d508      	bpl.n	8007b08 <_printf_i+0x148>
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	6861      	ldr	r1, [r4, #4]
 8007afa:	4299      	cmp	r1, r3
 8007afc:	bfde      	ittt	le
 8007afe:	2330      	movle	r3, #48	; 0x30
 8007b00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b04:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007b08:	1b52      	subs	r2, r2, r5
 8007b0a:	6122      	str	r2, [r4, #16]
 8007b0c:	f8cd a000 	str.w	sl, [sp]
 8007b10:	464b      	mov	r3, r9
 8007b12:	aa03      	add	r2, sp, #12
 8007b14:	4621      	mov	r1, r4
 8007b16:	4640      	mov	r0, r8
 8007b18:	f7ff fee4 	bl	80078e4 <_printf_common>
 8007b1c:	3001      	adds	r0, #1
 8007b1e:	d14a      	bne.n	8007bb6 <_printf_i+0x1f6>
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b24:	b004      	add	sp, #16
 8007b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	f043 0320 	orr.w	r3, r3, #32
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	4833      	ldr	r0, [pc, #204]	; (8007c00 <_printf_i+0x240>)
 8007b34:	2778      	movs	r7, #120	; 0x78
 8007b36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	6829      	ldr	r1, [r5, #0]
 8007b3e:	061f      	lsls	r7, r3, #24
 8007b40:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b44:	d402      	bmi.n	8007b4c <_printf_i+0x18c>
 8007b46:	065f      	lsls	r7, r3, #25
 8007b48:	bf48      	it	mi
 8007b4a:	b2b6      	uxthmi	r6, r6
 8007b4c:	07df      	lsls	r7, r3, #31
 8007b4e:	bf48      	it	mi
 8007b50:	f043 0320 	orrmi.w	r3, r3, #32
 8007b54:	6029      	str	r1, [r5, #0]
 8007b56:	bf48      	it	mi
 8007b58:	6023      	strmi	r3, [r4, #0]
 8007b5a:	b91e      	cbnz	r6, 8007b64 <_printf_i+0x1a4>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	f023 0320 	bic.w	r3, r3, #32
 8007b62:	6023      	str	r3, [r4, #0]
 8007b64:	2310      	movs	r3, #16
 8007b66:	e7a7      	b.n	8007ab8 <_printf_i+0xf8>
 8007b68:	4824      	ldr	r0, [pc, #144]	; (8007bfc <_printf_i+0x23c>)
 8007b6a:	e7e4      	b.n	8007b36 <_printf_i+0x176>
 8007b6c:	4615      	mov	r5, r2
 8007b6e:	e7bd      	b.n	8007aec <_printf_i+0x12c>
 8007b70:	682b      	ldr	r3, [r5, #0]
 8007b72:	6826      	ldr	r6, [r4, #0]
 8007b74:	6961      	ldr	r1, [r4, #20]
 8007b76:	1d18      	adds	r0, r3, #4
 8007b78:	6028      	str	r0, [r5, #0]
 8007b7a:	0635      	lsls	r5, r6, #24
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	d501      	bpl.n	8007b84 <_printf_i+0x1c4>
 8007b80:	6019      	str	r1, [r3, #0]
 8007b82:	e002      	b.n	8007b8a <_printf_i+0x1ca>
 8007b84:	0670      	lsls	r0, r6, #25
 8007b86:	d5fb      	bpl.n	8007b80 <_printf_i+0x1c0>
 8007b88:	8019      	strh	r1, [r3, #0]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	6123      	str	r3, [r4, #16]
 8007b8e:	4615      	mov	r5, r2
 8007b90:	e7bc      	b.n	8007b0c <_printf_i+0x14c>
 8007b92:	682b      	ldr	r3, [r5, #0]
 8007b94:	1d1a      	adds	r2, r3, #4
 8007b96:	602a      	str	r2, [r5, #0]
 8007b98:	681d      	ldr	r5, [r3, #0]
 8007b9a:	6862      	ldr	r2, [r4, #4]
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	f7f8 fb9e 	bl	80002e0 <memchr>
 8007ba4:	b108      	cbz	r0, 8007baa <_printf_i+0x1ea>
 8007ba6:	1b40      	subs	r0, r0, r5
 8007ba8:	6060      	str	r0, [r4, #4]
 8007baa:	6863      	ldr	r3, [r4, #4]
 8007bac:	6123      	str	r3, [r4, #16]
 8007bae:	2300      	movs	r3, #0
 8007bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bb4:	e7aa      	b.n	8007b0c <_printf_i+0x14c>
 8007bb6:	6923      	ldr	r3, [r4, #16]
 8007bb8:	462a      	mov	r2, r5
 8007bba:	4649      	mov	r1, r9
 8007bbc:	4640      	mov	r0, r8
 8007bbe:	47d0      	blx	sl
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d0ad      	beq.n	8007b20 <_printf_i+0x160>
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	079b      	lsls	r3, r3, #30
 8007bc8:	d413      	bmi.n	8007bf2 <_printf_i+0x232>
 8007bca:	68e0      	ldr	r0, [r4, #12]
 8007bcc:	9b03      	ldr	r3, [sp, #12]
 8007bce:	4298      	cmp	r0, r3
 8007bd0:	bfb8      	it	lt
 8007bd2:	4618      	movlt	r0, r3
 8007bd4:	e7a6      	b.n	8007b24 <_printf_i+0x164>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	4632      	mov	r2, r6
 8007bda:	4649      	mov	r1, r9
 8007bdc:	4640      	mov	r0, r8
 8007bde:	47d0      	blx	sl
 8007be0:	3001      	adds	r0, #1
 8007be2:	d09d      	beq.n	8007b20 <_printf_i+0x160>
 8007be4:	3501      	adds	r5, #1
 8007be6:	68e3      	ldr	r3, [r4, #12]
 8007be8:	9903      	ldr	r1, [sp, #12]
 8007bea:	1a5b      	subs	r3, r3, r1
 8007bec:	42ab      	cmp	r3, r5
 8007bee:	dcf2      	bgt.n	8007bd6 <_printf_i+0x216>
 8007bf0:	e7eb      	b.n	8007bca <_printf_i+0x20a>
 8007bf2:	2500      	movs	r5, #0
 8007bf4:	f104 0619 	add.w	r6, r4, #25
 8007bf8:	e7f5      	b.n	8007be6 <_printf_i+0x226>
 8007bfa:	bf00      	nop
 8007bfc:	080080d9 	.word	0x080080d9
 8007c00:	080080ea 	.word	0x080080ea

08007c04 <__sflush_r>:
 8007c04:	898a      	ldrh	r2, [r1, #12]
 8007c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	0710      	lsls	r0, r2, #28
 8007c0e:	460c      	mov	r4, r1
 8007c10:	d458      	bmi.n	8007cc4 <__sflush_r+0xc0>
 8007c12:	684b      	ldr	r3, [r1, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	dc05      	bgt.n	8007c24 <__sflush_r+0x20>
 8007c18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	dc02      	bgt.n	8007c24 <__sflush_r+0x20>
 8007c1e:	2000      	movs	r0, #0
 8007c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c26:	2e00      	cmp	r6, #0
 8007c28:	d0f9      	beq.n	8007c1e <__sflush_r+0x1a>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c30:	682f      	ldr	r7, [r5, #0]
 8007c32:	6a21      	ldr	r1, [r4, #32]
 8007c34:	602b      	str	r3, [r5, #0]
 8007c36:	d032      	beq.n	8007c9e <__sflush_r+0x9a>
 8007c38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	075a      	lsls	r2, r3, #29
 8007c3e:	d505      	bpl.n	8007c4c <__sflush_r+0x48>
 8007c40:	6863      	ldr	r3, [r4, #4]
 8007c42:	1ac0      	subs	r0, r0, r3
 8007c44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c46:	b10b      	cbz	r3, 8007c4c <__sflush_r+0x48>
 8007c48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c4a:	1ac0      	subs	r0, r0, r3
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4602      	mov	r2, r0
 8007c50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c52:	6a21      	ldr	r1, [r4, #32]
 8007c54:	4628      	mov	r0, r5
 8007c56:	47b0      	blx	r6
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	d106      	bne.n	8007c6c <__sflush_r+0x68>
 8007c5e:	6829      	ldr	r1, [r5, #0]
 8007c60:	291d      	cmp	r1, #29
 8007c62:	d82b      	bhi.n	8007cbc <__sflush_r+0xb8>
 8007c64:	4a29      	ldr	r2, [pc, #164]	; (8007d0c <__sflush_r+0x108>)
 8007c66:	410a      	asrs	r2, r1
 8007c68:	07d6      	lsls	r6, r2, #31
 8007c6a:	d427      	bmi.n	8007cbc <__sflush_r+0xb8>
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	6062      	str	r2, [r4, #4]
 8007c70:	04d9      	lsls	r1, r3, #19
 8007c72:	6922      	ldr	r2, [r4, #16]
 8007c74:	6022      	str	r2, [r4, #0]
 8007c76:	d504      	bpl.n	8007c82 <__sflush_r+0x7e>
 8007c78:	1c42      	adds	r2, r0, #1
 8007c7a:	d101      	bne.n	8007c80 <__sflush_r+0x7c>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	b903      	cbnz	r3, 8007c82 <__sflush_r+0x7e>
 8007c80:	6560      	str	r0, [r4, #84]	; 0x54
 8007c82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c84:	602f      	str	r7, [r5, #0]
 8007c86:	2900      	cmp	r1, #0
 8007c88:	d0c9      	beq.n	8007c1e <__sflush_r+0x1a>
 8007c8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c8e:	4299      	cmp	r1, r3
 8007c90:	d002      	beq.n	8007c98 <__sflush_r+0x94>
 8007c92:	4628      	mov	r0, r5
 8007c94:	f7ff fbea 	bl	800746c <_free_r>
 8007c98:	2000      	movs	r0, #0
 8007c9a:	6360      	str	r0, [r4, #52]	; 0x34
 8007c9c:	e7c0      	b.n	8007c20 <__sflush_r+0x1c>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	47b0      	blx	r6
 8007ca4:	1c41      	adds	r1, r0, #1
 8007ca6:	d1c8      	bne.n	8007c3a <__sflush_r+0x36>
 8007ca8:	682b      	ldr	r3, [r5, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0c5      	beq.n	8007c3a <__sflush_r+0x36>
 8007cae:	2b1d      	cmp	r3, #29
 8007cb0:	d001      	beq.n	8007cb6 <__sflush_r+0xb2>
 8007cb2:	2b16      	cmp	r3, #22
 8007cb4:	d101      	bne.n	8007cba <__sflush_r+0xb6>
 8007cb6:	602f      	str	r7, [r5, #0]
 8007cb8:	e7b1      	b.n	8007c1e <__sflush_r+0x1a>
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc0:	81a3      	strh	r3, [r4, #12]
 8007cc2:	e7ad      	b.n	8007c20 <__sflush_r+0x1c>
 8007cc4:	690f      	ldr	r7, [r1, #16]
 8007cc6:	2f00      	cmp	r7, #0
 8007cc8:	d0a9      	beq.n	8007c1e <__sflush_r+0x1a>
 8007cca:	0793      	lsls	r3, r2, #30
 8007ccc:	680e      	ldr	r6, [r1, #0]
 8007cce:	bf08      	it	eq
 8007cd0:	694b      	ldreq	r3, [r1, #20]
 8007cd2:	600f      	str	r7, [r1, #0]
 8007cd4:	bf18      	it	ne
 8007cd6:	2300      	movne	r3, #0
 8007cd8:	eba6 0807 	sub.w	r8, r6, r7
 8007cdc:	608b      	str	r3, [r1, #8]
 8007cde:	f1b8 0f00 	cmp.w	r8, #0
 8007ce2:	dd9c      	ble.n	8007c1e <__sflush_r+0x1a>
 8007ce4:	6a21      	ldr	r1, [r4, #32]
 8007ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ce8:	4643      	mov	r3, r8
 8007cea:	463a      	mov	r2, r7
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b0      	blx	r6
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	dc06      	bgt.n	8007d02 <__sflush_r+0xfe>
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cfa:	81a3      	strh	r3, [r4, #12]
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d00:	e78e      	b.n	8007c20 <__sflush_r+0x1c>
 8007d02:	4407      	add	r7, r0
 8007d04:	eba8 0800 	sub.w	r8, r8, r0
 8007d08:	e7e9      	b.n	8007cde <__sflush_r+0xda>
 8007d0a:	bf00      	nop
 8007d0c:	dfbffffe 	.word	0xdfbffffe

08007d10 <_fflush_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	690b      	ldr	r3, [r1, #16]
 8007d14:	4605      	mov	r5, r0
 8007d16:	460c      	mov	r4, r1
 8007d18:	b913      	cbnz	r3, 8007d20 <_fflush_r+0x10>
 8007d1a:	2500      	movs	r5, #0
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	bd38      	pop	{r3, r4, r5, pc}
 8007d20:	b118      	cbz	r0, 8007d2a <_fflush_r+0x1a>
 8007d22:	6a03      	ldr	r3, [r0, #32]
 8007d24:	b90b      	cbnz	r3, 8007d2a <_fflush_r+0x1a>
 8007d26:	f7ff f9a1 	bl	800706c <__sinit>
 8007d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0f3      	beq.n	8007d1a <_fflush_r+0xa>
 8007d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d34:	07d0      	lsls	r0, r2, #31
 8007d36:	d404      	bmi.n	8007d42 <_fflush_r+0x32>
 8007d38:	0599      	lsls	r1, r3, #22
 8007d3a:	d402      	bmi.n	8007d42 <_fflush_r+0x32>
 8007d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d3e:	f7ff fb92 	bl	8007466 <__retarget_lock_acquire_recursive>
 8007d42:	4628      	mov	r0, r5
 8007d44:	4621      	mov	r1, r4
 8007d46:	f7ff ff5d 	bl	8007c04 <__sflush_r>
 8007d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d4c:	07da      	lsls	r2, r3, #31
 8007d4e:	4605      	mov	r5, r0
 8007d50:	d4e4      	bmi.n	8007d1c <_fflush_r+0xc>
 8007d52:	89a3      	ldrh	r3, [r4, #12]
 8007d54:	059b      	lsls	r3, r3, #22
 8007d56:	d4e1      	bmi.n	8007d1c <_fflush_r+0xc>
 8007d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d5a:	f7ff fb85 	bl	8007468 <__retarget_lock_release_recursive>
 8007d5e:	e7dd      	b.n	8007d1c <_fflush_r+0xc>

08007d60 <__swhatbuf_r>:
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	460c      	mov	r4, r1
 8007d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d68:	2900      	cmp	r1, #0
 8007d6a:	b096      	sub	sp, #88	; 0x58
 8007d6c:	4615      	mov	r5, r2
 8007d6e:	461e      	mov	r6, r3
 8007d70:	da0d      	bge.n	8007d8e <__swhatbuf_r+0x2e>
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007d78:	f04f 0100 	mov.w	r1, #0
 8007d7c:	bf0c      	ite	eq
 8007d7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007d82:	2340      	movne	r3, #64	; 0x40
 8007d84:	2000      	movs	r0, #0
 8007d86:	6031      	str	r1, [r6, #0]
 8007d88:	602b      	str	r3, [r5, #0]
 8007d8a:	b016      	add	sp, #88	; 0x58
 8007d8c:	bd70      	pop	{r4, r5, r6, pc}
 8007d8e:	466a      	mov	r2, sp
 8007d90:	f000 f87c 	bl	8007e8c <_fstat_r>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	dbec      	blt.n	8007d72 <__swhatbuf_r+0x12>
 8007d98:	9901      	ldr	r1, [sp, #4]
 8007d9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007d9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007da2:	4259      	negs	r1, r3
 8007da4:	4159      	adcs	r1, r3
 8007da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007daa:	e7eb      	b.n	8007d84 <__swhatbuf_r+0x24>

08007dac <__smakebuf_r>:
 8007dac:	898b      	ldrh	r3, [r1, #12]
 8007dae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007db0:	079d      	lsls	r5, r3, #30
 8007db2:	4606      	mov	r6, r0
 8007db4:	460c      	mov	r4, r1
 8007db6:	d507      	bpl.n	8007dc8 <__smakebuf_r+0x1c>
 8007db8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	6123      	str	r3, [r4, #16]
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	6163      	str	r3, [r4, #20]
 8007dc4:	b002      	add	sp, #8
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	ab01      	add	r3, sp, #4
 8007dca:	466a      	mov	r2, sp
 8007dcc:	f7ff ffc8 	bl	8007d60 <__swhatbuf_r>
 8007dd0:	9900      	ldr	r1, [sp, #0]
 8007dd2:	4605      	mov	r5, r0
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f7ff fbb5 	bl	8007544 <_malloc_r>
 8007dda:	b948      	cbnz	r0, 8007df0 <__smakebuf_r+0x44>
 8007ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007de0:	059a      	lsls	r2, r3, #22
 8007de2:	d4ef      	bmi.n	8007dc4 <__smakebuf_r+0x18>
 8007de4:	f023 0303 	bic.w	r3, r3, #3
 8007de8:	f043 0302 	orr.w	r3, r3, #2
 8007dec:	81a3      	strh	r3, [r4, #12]
 8007dee:	e7e3      	b.n	8007db8 <__smakebuf_r+0xc>
 8007df0:	89a3      	ldrh	r3, [r4, #12]
 8007df2:	6020      	str	r0, [r4, #0]
 8007df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df8:	81a3      	strh	r3, [r4, #12]
 8007dfa:	9b00      	ldr	r3, [sp, #0]
 8007dfc:	6163      	str	r3, [r4, #20]
 8007dfe:	9b01      	ldr	r3, [sp, #4]
 8007e00:	6120      	str	r0, [r4, #16]
 8007e02:	b15b      	cbz	r3, 8007e1c <__smakebuf_r+0x70>
 8007e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f000 f851 	bl	8007eb0 <_isatty_r>
 8007e0e:	b128      	cbz	r0, 8007e1c <__smakebuf_r+0x70>
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	f023 0303 	bic.w	r3, r3, #3
 8007e16:	f043 0301 	orr.w	r3, r3, #1
 8007e1a:	81a3      	strh	r3, [r4, #12]
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	431d      	orrs	r5, r3
 8007e20:	81a5      	strh	r5, [r4, #12]
 8007e22:	e7cf      	b.n	8007dc4 <__smakebuf_r+0x18>

08007e24 <_putc_r>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	460d      	mov	r5, r1
 8007e28:	4614      	mov	r4, r2
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	b118      	cbz	r0, 8007e36 <_putc_r+0x12>
 8007e2e:	6a03      	ldr	r3, [r0, #32]
 8007e30:	b90b      	cbnz	r3, 8007e36 <_putc_r+0x12>
 8007e32:	f7ff f91b 	bl	800706c <__sinit>
 8007e36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e38:	07d8      	lsls	r0, r3, #31
 8007e3a:	d405      	bmi.n	8007e48 <_putc_r+0x24>
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
 8007e3e:	0599      	lsls	r1, r3, #22
 8007e40:	d402      	bmi.n	8007e48 <_putc_r+0x24>
 8007e42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e44:	f7ff fb0f 	bl	8007466 <__retarget_lock_acquire_recursive>
 8007e48:	68a3      	ldr	r3, [r4, #8]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	60a3      	str	r3, [r4, #8]
 8007e50:	da05      	bge.n	8007e5e <_putc_r+0x3a>
 8007e52:	69a2      	ldr	r2, [r4, #24]
 8007e54:	4293      	cmp	r3, r2
 8007e56:	db12      	blt.n	8007e7e <_putc_r+0x5a>
 8007e58:	b2eb      	uxtb	r3, r5
 8007e5a:	2b0a      	cmp	r3, #10
 8007e5c:	d00f      	beq.n	8007e7e <_putc_r+0x5a>
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	1c5a      	adds	r2, r3, #1
 8007e62:	6022      	str	r2, [r4, #0]
 8007e64:	701d      	strb	r5, [r3, #0]
 8007e66:	b2ed      	uxtb	r5, r5
 8007e68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e6a:	07da      	lsls	r2, r3, #31
 8007e6c:	d405      	bmi.n	8007e7a <_putc_r+0x56>
 8007e6e:	89a3      	ldrh	r3, [r4, #12]
 8007e70:	059b      	lsls	r3, r3, #22
 8007e72:	d402      	bmi.n	8007e7a <_putc_r+0x56>
 8007e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e76:	f7ff faf7 	bl	8007468 <__retarget_lock_release_recursive>
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	bd70      	pop	{r4, r5, r6, pc}
 8007e7e:	4629      	mov	r1, r5
 8007e80:	4622      	mov	r2, r4
 8007e82:	4630      	mov	r0, r6
 8007e84:	f7ff f9e1 	bl	800724a <__swbuf_r>
 8007e88:	4605      	mov	r5, r0
 8007e8a:	e7ed      	b.n	8007e68 <_putc_r+0x44>

08007e8c <_fstat_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4d07      	ldr	r5, [pc, #28]	; (8007eac <_fstat_r+0x20>)
 8007e90:	2300      	movs	r3, #0
 8007e92:	4604      	mov	r4, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	4611      	mov	r1, r2
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	f7f9 fc50 	bl	800173e <_fstat>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	d102      	bne.n	8007ea8 <_fstat_r+0x1c>
 8007ea2:	682b      	ldr	r3, [r5, #0]
 8007ea4:	b103      	cbz	r3, 8007ea8 <_fstat_r+0x1c>
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	bd38      	pop	{r3, r4, r5, pc}
 8007eaa:	bf00      	nop
 8007eac:	240002fc 	.word	0x240002fc

08007eb0 <_isatty_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4d06      	ldr	r5, [pc, #24]	; (8007ecc <_isatty_r+0x1c>)
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	4608      	mov	r0, r1
 8007eba:	602b      	str	r3, [r5, #0]
 8007ebc:	f7f9 fc4f 	bl	800175e <_isatty>
 8007ec0:	1c43      	adds	r3, r0, #1
 8007ec2:	d102      	bne.n	8007eca <_isatty_r+0x1a>
 8007ec4:	682b      	ldr	r3, [r5, #0]
 8007ec6:	b103      	cbz	r3, 8007eca <_isatty_r+0x1a>
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	bd38      	pop	{r3, r4, r5, pc}
 8007ecc:	240002fc 	.word	0x240002fc

08007ed0 <_sbrk_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4d06      	ldr	r5, [pc, #24]	; (8007eec <_sbrk_r+0x1c>)
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	4608      	mov	r0, r1
 8007eda:	602b      	str	r3, [r5, #0]
 8007edc:	f7f9 fc58 	bl	8001790 <_sbrk>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	d102      	bne.n	8007eea <_sbrk_r+0x1a>
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	b103      	cbz	r3, 8007eea <_sbrk_r+0x1a>
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	bd38      	pop	{r3, r4, r5, pc}
 8007eec:	240002fc 	.word	0x240002fc

08007ef0 <_init>:
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef2:	bf00      	nop
 8007ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef6:	bc08      	pop	{r3}
 8007ef8:	469e      	mov	lr, r3
 8007efa:	4770      	bx	lr

08007efc <_fini>:
 8007efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efe:	bf00      	nop
 8007f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f02:	bc08      	pop	{r3}
 8007f04:	469e      	mov	lr, r3
 8007f06:	4770      	bx	lr
