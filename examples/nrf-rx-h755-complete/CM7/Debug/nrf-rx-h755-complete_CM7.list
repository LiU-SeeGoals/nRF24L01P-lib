
nrf-rx-h755-complete_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ca4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08007f44  08007f44  00017f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008180  08008180  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008180  08008180  00018180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008188  08008188  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800818c  0800818c  0001818c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  24000000  08008190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2400006c  080081fc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000310  080081fc  00020310  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001353c  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026eb  00000000  00000000  00033619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00035d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b21  00000000  00000000  00036b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003af87  00000000  00000000  000376b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e80  00000000  00000000  00072640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00180ba8  00000000  00000000  000844c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000442c  00000000  00000000  00205068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00209494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007f2c 	.word	0x08007f2c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08007f2c 	.word	0x08007f2c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000680:	4b3d      	ldr	r3, [pc, #244]	; (8000778 <SystemInit+0xfc>)
 8000682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000686:	4a3c      	ldr	r2, [pc, #240]	; (8000778 <SystemInit+0xfc>)
 8000688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000690:	4b39      	ldr	r3, [pc, #228]	; (8000778 <SystemInit+0xfc>)
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	4a38      	ldr	r2, [pc, #224]	; (8000778 <SystemInit+0xfc>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800069c:	4b37      	ldr	r3, [pc, #220]	; (800077c <SystemInit+0x100>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	2b06      	cmp	r3, #6
 80006a6:	d807      	bhi.n	80006b8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006a8:	4b34      	ldr	r3, [pc, #208]	; (800077c <SystemInit+0x100>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f023 030f 	bic.w	r3, r3, #15
 80006b0:	4a32      	ldr	r2, [pc, #200]	; (800077c <SystemInit+0x100>)
 80006b2:	f043 0307 	orr.w	r3, r3, #7
 80006b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006b8:	4b31      	ldr	r3, [pc, #196]	; (8000780 <SystemInit+0x104>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a30      	ldr	r2, [pc, #192]	; (8000780 <SystemInit+0x104>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c4:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <SystemInit+0x104>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ca:	4b2d      	ldr	r3, [pc, #180]	; (8000780 <SystemInit+0x104>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	492c      	ldr	r1, [pc, #176]	; (8000780 <SystemInit+0x104>)
 80006d0:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <SystemInit+0x108>)
 80006d2:	4013      	ands	r3, r2
 80006d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <SystemInit+0x100>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e2:	4b26      	ldr	r3, [pc, #152]	; (800077c <SystemInit+0x100>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f023 030f 	bic.w	r3, r3, #15
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <SystemInit+0x100>)
 80006ec:	f043 0307 	orr.w	r3, r3, #7
 80006f0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <SystemInit+0x104>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <SystemInit+0x104>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <SystemInit+0x104>)
 8000700:	2200      	movs	r2, #0
 8000702:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <SystemInit+0x104>)
 8000706:	4a20      	ldr	r2, [pc, #128]	; (8000788 <SystemInit+0x10c>)
 8000708:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070a:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <SystemInit+0x104>)
 800070c:	4a1f      	ldr	r2, [pc, #124]	; (800078c <SystemInit+0x110>)
 800070e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000710:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <SystemInit+0x104>)
 8000712:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <SystemInit+0x114>)
 8000714:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000716:	4b1a      	ldr	r3, [pc, #104]	; (8000780 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <SystemInit+0x104>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <SystemInit+0x114>)
 8000720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000728:	4b15      	ldr	r3, [pc, #84]	; (8000780 <SystemInit+0x104>)
 800072a:	4a19      	ldr	r2, [pc, #100]	; (8000790 <SystemInit+0x114>)
 800072c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <SystemInit+0x104>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a11      	ldr	r2, [pc, #68]	; (8000780 <SystemInit+0x104>)
 800073a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800073e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <SystemInit+0x104>)
 8000742:	2200      	movs	r2, #0
 8000744:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <SystemInit+0x118>)
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	4a12      	ldr	r2, [pc, #72]	; (8000794 <SystemInit+0x118>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000750:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <SystemInit+0x11c>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <SystemInit+0x120>)
 8000758:	4013      	ands	r3, r2
 800075a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800075e:	d202      	bcs.n	8000766 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <SystemInit+0x124>)
 8000762:	2201      	movs	r2, #1
 8000764:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <SystemInit+0x128>)
 8000768:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800076c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	52002000 	.word	0x52002000
 8000780:	58024400 	.word	0x58024400
 8000784:	eaf6ed7f 	.word	0xeaf6ed7f
 8000788:	02020200 	.word	0x02020200
 800078c:	01ff0000 	.word	0x01ff0000
 8000790:	01010280 	.word	0x01010280
 8000794:	580000c0 	.word	0x580000c0
 8000798:	5c001000 	.word	0x5c001000
 800079c:	ffff0000 	.word	0xffff0000
 80007a0:	51008108 	.word	0x51008108
 80007a4:	52004000 	.word	0x52004000

080007a8 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007b0:	1d39      	adds	r1, r7, #4
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007b6:	2201      	movs	r2, #1
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <__io_putchar+0x20>)
 80007ba:	f005 fad4 	bl	8005d66 <HAL_UART_Transmit>
  return ch;
 80007be:	687b      	ldr	r3, [r7, #4]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	24000110 	.word	0x24000110

080007cc <HAL_GPIO_EXTI_Callback>:
// END REDIRECT

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin) {
 80007d6:	88fb      	ldrh	r3, [r7, #6]
 80007d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007dc:	d003      	beq.n	80007e6 <HAL_GPIO_EXTI_Callback+0x1a>
 80007de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007e2:	d005      	beq.n	80007f0 <HAL_GPIO_EXTI_Callback+0x24>
 80007e4:	e04a      	b.n	800087c <HAL_GPIO_EXTI_Callback+0xb0>
    case BTN_USER_Pin:
      NRF_PrintFIFOStatus();
 80007e6:	f000 fdf1 	bl	80013cc <NRF_PrintFIFOStatus>
      NRF_PrintStatus();
 80007ea:	f000 fd81 	bl	80012f0 <NRF_PrintStatus>
      break;
 80007ee:	e04a      	b.n	8000886 <HAL_GPIO_EXTI_Callback+0xba>
    case NRF_IRQ_Pin:
      {
        uint8_t status = NRF_ReadStatus();
 80007f0:	f000 fccc 	bl	800118c <NRF_ReadStatus>
 80007f4:	4603      	mov	r3, r0
 80007f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (status & 0x40) {
 80007fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80007fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000802:	2b00      	cmp	r3, #0
 8000804:	d03e      	beq.n	8000884 <HAL_GPIO_EXTI_Callback+0xb8>
          // RX_DR (Data Ready RX FIFO interrupt) set

          // Read the data
          uint8_t payload[10];
          NRF_ReadPayload(payload, 10);
 8000806:	f107 0318 	add.w	r3, r7, #24
 800080a:	210a      	movs	r1, #10
 800080c:	4618      	mov	r0, r3
 800080e:	f000 fbe6 	bl	8000fde <NRF_ReadPayload>
          printf("Payload:");
 8000812:	481f      	ldr	r0, [pc, #124]	; (8000890 <HAL_GPIO_EXTI_Callback+0xc4>)
 8000814:	f006 fc7e 	bl	8007114 <iprintf>
          for (int i = 0; i < 10; i++) {
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
 800081c:	e00a      	b.n	8000834 <HAL_GPIO_EXTI_Callback+0x68>
            printf("%c", payload[i]);
 800081e:	f107 0218 	add.w	r2, r7, #24
 8000822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000824:	4413      	add	r3, r2
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f006 fc85 	bl	8007138 <putchar>
          for (int i = 0; i < 10; i++) {
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	3301      	adds	r3, #1
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
 8000834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000836:	2b09      	cmp	r3, #9
 8000838:	ddf1      	ble.n	800081e <HAL_GPIO_EXTI_Callback+0x52>
          }
          printf("\r\n");
 800083a:	4816      	ldr	r0, [pc, #88]	; (8000894 <HAL_GPIO_EXTI_Callback+0xc8>)
 800083c:	f006 fcd8 	bl	80071f0 <puts>

          // Reset RX_DR
          NRF_SetRegisterBit(NRF_REG_STATUS, 6);
 8000840:	2106      	movs	r1, #6
 8000842:	2007      	movs	r0, #7
 8000844:	f000 fc19 	bl	800107a <NRF_SetRegisterBit>

          // If we've received two messages, send
          // something back next time
          if (count == 3) {
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <HAL_GPIO_EXTI_Callback+0xcc>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b03      	cmp	r3, #3
 800084e:	d10e      	bne.n	800086e <HAL_GPIO_EXTI_Callback+0xa2>
            // Write the payload to send with the ACK
            uint8_t msg[10] = "HelloThere";
 8000850:	4a12      	ldr	r2, [pc, #72]	; (800089c <HAL_GPIO_EXTI_Callback+0xd0>)
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	ca07      	ldmia	r2, {r0, r1, r2}
 8000858:	c303      	stmia	r3!, {r0, r1}
 800085a:	801a      	strh	r2, [r3, #0]
            NRF_WriteAckPayload(msg, 10);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	210a      	movs	r1, #10
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fbcc 	bl	8001000 <NRF_WriteAckPayload>
            count = 0;
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <HAL_GPIO_EXTI_Callback+0xcc>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
          }

          count++;
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000878:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 800087a:	e003      	b.n	8000884 <HAL_GPIO_EXTI_Callback+0xb8>
    default:
      printf("Unhandled interrupt...\r\n");
 800087c:	4808      	ldr	r0, [pc, #32]	; (80008a0 <HAL_GPIO_EXTI_Callback+0xd4>)
 800087e:	f006 fcb7 	bl	80071f0 <puts>
      break;
 8000882:	e000      	b.n	8000886 <HAL_GPIO_EXTI_Callback+0xba>
      break;
 8000884:	bf00      	nop
  }
}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	08007f44 	.word	0x08007f44
 8000894:	08007f50 	.word	0x08007f50
 8000898:	240001a4 	.word	0x240001a4
 800089c:	08007f6c 	.word	0x08007f6c
 80008a0:	08007f54 	.word	0x08007f54

080008a4 <runExample>:

void runExample() {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af02      	add	r7, sp, #8
  printf("\r\nStarting up complete RX H7...\r\n");
 80008aa:	481e      	ldr	r0, [pc, #120]	; (8000924 <runExample+0x80>)
 80008ac:	f006 fca0 	bl	80071f0 <puts>

  // Initialise the library and make the device enter standby-I mode
  if(NRF_Init(&hspi1, NRF_CSN_GPIO_Port, NRF_CSN_Pin, NRF_CE_GPIO_Port, NRF_CE_Pin) != NRF_OK) {
 80008b0:	2340      	movs	r3, #64	; 0x40
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <runExample+0x84>)
 80008b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ba:	491c      	ldr	r1, [pc, #112]	; (800092c <runExample+0x88>)
 80008bc:	481c      	ldr	r0, [pc, #112]	; (8000930 <runExample+0x8c>)
 80008be:	f000 fa93 	bl	8000de8 <NRF_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d004      	beq.n	80008d2 <runExample+0x2e>
    printf("Couldn't initialise device, are pins correctly connected?\r\n");
 80008c8:	481a      	ldr	r0, [pc, #104]	; (8000934 <runExample+0x90>)
 80008ca:	f006 fc91 	bl	80071f0 <puts>
    Error_Handler();
 80008ce:	f000 fa45 	bl	8000d5c <Error_Handler>
  }

  // Resets all registers but keeps the device in standby-I mode
  NRF_Reset();
 80008d2:	f000 fc77 	bl	80011c4 <NRF_Reset>

  // Config
  uint8_t address[5] = {1,2,3,4,5};
 80008d6:	4a18      	ldr	r2, [pc, #96]	; (8000938 <runExample+0x94>)
 80008d8:	463b      	mov	r3, r7
 80008da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008de:	6018      	str	r0, [r3, #0]
 80008e0:	3304      	adds	r3, #4
 80008e2:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 80008e4:	463b      	mov	r3, r7
 80008e6:	2205      	movs	r2, #5
 80008e8:	4619      	mov	r1, r3
 80008ea:	200a      	movs	r0, #10
 80008ec:	f000 fb99 	bl	8001022 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0, 10); // datawidth
 80008f0:	210a      	movs	r1, #10
 80008f2:	2011      	movs	r0, #17
 80008f4:	f000 fbab 	bl	800104e <NRF_WriteRegisterByte>
 
  // Enable ACK payloads (which needs dynamic payload length enabled)
  NRF_SetRegisterBit(NRF_REG_FEATURE, 1);
 80008f8:	2101      	movs	r1, #1
 80008fa:	201d      	movs	r0, #29
 80008fc:	f000 fbbd 	bl	800107a <NRF_SetRegisterBit>
  NRF_SetRegisterBit(NRF_REG_FEATURE, 2);
 8000900:	2102      	movs	r1, #2
 8000902:	201d      	movs	r0, #29
 8000904:	f000 fbb9 	bl	800107a <NRF_SetRegisterBit>
  NRF_SetRegisterBit(NRF_REG_DYNPD, 0);
 8000908:	2100      	movs	r1, #0
 800090a:	201c      	movs	r0, #28
 800090c:	f000 fbb5 	bl	800107a <NRF_SetRegisterBit>

  // Start
  NRF_EnterMode(NRF_MODE_RX);
 8000910:	2002      	movs	r0, #2
 8000912:	f000 fb27 	bl	8000f64 <NRF_EnterMode>
  printf("Entered RX mode...\r\n");
 8000916:	4809      	ldr	r0, [pc, #36]	; (800093c <runExample+0x98>)
 8000918:	f006 fc6a 	bl	80071f0 <puts>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	08007f78 	.word	0x08007f78
 8000928:	58020800 	.word	0x58020800
 800092c:	58020400 	.word	0x58020400
 8000930:	24000088 	.word	0x24000088
 8000934:	08007f9c 	.word	0x08007f9c
 8000938:	08007fec 	.word	0x08007fec
 800093c:	08007fd8 	.word	0x08007fd8

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800094a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800094c:	bf00      	nop
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <main+0x9c>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000956:	2b00      	cmp	r3, #0
 8000958:	d004      	beq.n	8000964 <main+0x24>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	1e5a      	subs	r2, r3, #1
 800095e:	607a      	str	r2, [r7, #4]
 8000960:	2b00      	cmp	r3, #0
 8000962:	dcf4      	bgt.n	800094e <main+0xe>
  if ( timeout < 0 )
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	da01      	bge.n	800096e <main+0x2e>
  {
  Error_Handler();
 800096a:	f000 f9f7 	bl	8000d5c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f000 ff8d 	bl	800188c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000972:	f000 f835 	bl	80009e0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <main+0x9c>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	4a17      	ldr	r2, [pc, #92]	; (80009dc <main+0x9c>)
 800097e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <main+0x9c>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000994:	2000      	movs	r0, #0
 8000996:	f001 fb47 	bl	8002028 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800099a:	2100      	movs	r1, #0
 800099c:	2000      	movs	r0, #0
 800099e:	f001 fb5d 	bl	800205c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009a8:	bf00      	nop
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <main+0x9c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d104      	bne.n	80009c0 <main+0x80>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	1e5a      	subs	r2, r3, #1
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	dcf4      	bgt.n	80009aa <main+0x6a>
if ( timeout < 0 )
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	da01      	bge.n	80009ca <main+0x8a>
{
Error_Handler();
 80009c6:	f000 f9c9 	bl	8000d5c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ca:	f000 f929 	bl	8000c20 <MX_GPIO_Init>
  MX_SPI1_Init();
 80009ce:	f000 f885 	bl	8000adc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80009d2:	f000 f8d9 	bl	8000b88 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  runExample();
 80009d6:	f7ff ff65 	bl	80008a4 <runExample>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009da:	e7fe      	b.n	80009da <main+0x9a>
 80009dc:	58024400 	.word	0x58024400

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b09c      	sub	sp, #112	; 0x70
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	224c      	movs	r2, #76	; 0x4c
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f006 fcde 	bl	80073b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2220      	movs	r2, #32
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f006 fcd8 	bl	80073b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a00:	2004      	movs	r0, #4
 8000a02:	f001 fb3f 	bl	8002084 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <SystemClock_Config+0xf4>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	4a31      	ldr	r2, [pc, #196]	; (8000ad4 <SystemClock_Config+0xf4>)
 8000a10:	f023 0301 	bic.w	r3, r3, #1
 8000a14:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a16:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <SystemClock_Config+0xf4>)
 8000a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <SystemClock_Config+0xf8>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a28:	4a2b      	ldr	r2, [pc, #172]	; (8000ad8 <SystemClock_Config+0xf8>)
 8000a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <SystemClock_Config+0xf8>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a3c:	bf00      	nop
 8000a3e:	4b26      	ldr	r3, [pc, #152]	; (8000ad8 <SystemClock_Config+0xf8>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a4a:	d1f8      	bne.n	8000a3e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a54:	2340      	movs	r3, #64	; 0x40
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a60:	2304      	movs	r3, #4
 8000a62:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000a64:	2309      	movs	r3, #9
 8000a66:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a74:	230c      	movs	r3, #12
 8000a76:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000a7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a80:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 fb56 	bl	8002138 <HAL_RCC_OscConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000a92:	f000 f963 	bl	8000d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a96:	233f      	movs	r3, #63	; 0x3f
 8000a98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000aaa:	2340      	movs	r3, #64	; 0x40
 8000aac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2101      	movs	r1, #1
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 ff96 	bl	80029ec <HAL_RCC_ClockConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000ac6:	f000 f949 	bl	8000d5c <Error_Handler>
  }
}
 8000aca:	bf00      	nop
 8000acc:	3770      	adds	r7, #112	; 0x70
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	58000400 	.word	0x58000400
 8000ad8:	58024800 	.word	0x58024800

08000adc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000ae2:	4a28      	ldr	r2, [pc, #160]	; (8000b84 <MX_SPI1_Init+0xa8>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000ae8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000aec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aee:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000af6:	2207      	movs	r2, #7
 8000af8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afa:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b06:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b10:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000b14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b16:	4b1a      	ldr	r3, [pc, #104]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b34:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b3c:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_SPI1_Init+0xa4>)
 8000b6e:	f004 f8f5 	bl	8004d5c <HAL_SPI_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000b78:	f000 f8f0 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	24000088 	.word	0x24000088
 8000b84:	40013000 	.word	0x40013000

08000b88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <MX_USART3_UART_Init+0x94>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bd0:	4811      	ldr	r0, [pc, #68]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bd2:	f005 f878 	bl	8005cc6 <HAL_UART_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 f8be 	bl	8000d5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be0:	2100      	movs	r1, #0
 8000be2:	480d      	ldr	r0, [pc, #52]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000be4:	f006 f909 	bl	8006dfa <HAL_UARTEx_SetTxFifoThreshold>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bee:	f000 f8b5 	bl	8000d5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4808      	ldr	r0, [pc, #32]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000bf6:	f006 f93e 	bl	8006e76 <HAL_UARTEx_SetRxFifoThreshold>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c00:	f000 f8ac 	bl	8000d5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_USART3_UART_Init+0x90>)
 8000c06:	f006 f8bf 	bl	8006d88 <HAL_UARTEx_DisableFifoMode>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 f8a4 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	24000110 	.word	0x24000110
 8000c1c:	40004800 	.word	0x40004800

08000c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	605a      	str	r2, [r3, #4]
 8000c30:	609a      	str	r2, [r3, #8]
 8000c32:	60da      	str	r2, [r3, #12]
 8000c34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c36:	4b46      	ldr	r3, [pc, #280]	; (8000d50 <MX_GPIO_Init+0x130>)
 8000c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3c:	4a44      	ldr	r2, [pc, #272]	; (8000d50 <MX_GPIO_Init+0x130>)
 8000c3e:	f043 0304 	orr.w	r3, r3, #4
 8000c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c46:	4b42      	ldr	r3, [pc, #264]	; (8000d50 <MX_GPIO_Init+0x130>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4c:	f003 0304 	and.w	r3, r3, #4
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b3e      	ldr	r3, [pc, #248]	; (8000d50 <MX_GPIO_Init+0x130>)
 8000c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5a:	4a3d      	ldr	r2, [pc, #244]	; (8000d50 <MX_GPIO_Init+0x130>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c64:	4b3a      	ldr	r3, [pc, #232]	; (8000d50 <MX_GPIO_Init+0x130>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b37      	ldr	r3, [pc, #220]	; (8000d50 <MX_GPIO_Init+0x130>)
 8000c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c78:	4a35      	ldr	r2, [pc, #212]	; (8000d50 <MX_GPIO_Init+0x130>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c82:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <MX_GPIO_Init+0x130>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c90:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <MX_GPIO_Init+0x130>)
 8000c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c96:	4a2e      	ldr	r2, [pc, #184]	; (8000d50 <MX_GPIO_Init+0x130>)
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <MX_GPIO_Init+0x130>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca6:	f003 0308 	and.w	r3, r3, #8
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2140      	movs	r1, #64	; 0x40
 8000cb2:	4828      	ldr	r0, [pc, #160]	; (8000d54 <MX_GPIO_Init+0x134>)
 8000cb4:	f001 f984 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cbe:	4826      	ldr	r0, [pc, #152]	; (8000d58 <MX_GPIO_Init+0x138>)
 8000cc0:	f001 f97e 	bl	8001fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	481e      	ldr	r0, [pc, #120]	; (8000d54 <MX_GPIO_Init+0x134>)
 8000cdc:	f000 ffa8 	bl	8001c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ce6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4818      	ldr	r0, [pc, #96]	; (8000d58 <MX_GPIO_Init+0x138>)
 8000cf8:	f000 ff9a 	bl	8001c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000cfc:	2340      	movs	r3, #64	; 0x40
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4810      	ldr	r0, [pc, #64]	; (8000d54 <MX_GPIO_Init+0x134>)
 8000d14:	f000 ff8c 	bl	8001c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 8000d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4809      	ldr	r0, [pc, #36]	; (8000d58 <MX_GPIO_Init+0x138>)
 8000d32:	f000 ff7d 	bl	8001c30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2028      	movs	r0, #40	; 0x28
 8000d3c:	f000 ff43 	bl	8001bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d40:	2028      	movs	r0, #40	; 0x28
 8000d42:	f000 ff5a 	bl	8001bfa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	; 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58024400 	.word	0x58024400
 8000d54:	58020800 	.word	0x58020800
 8000d58:	58020400 	.word	0x58020400

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <Error_Handler+0x8>
	...

08000d68 <csn_set>:

/*
 * Private functions
 */

void csn_set() {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <csn_set+0x18>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <csn_set+0x1c>)
 8000d72:	8811      	ldrh	r1, [r2, #0]
 8000d74:	2201      	movs	r2, #1
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 f922 	bl	8001fc0 <HAL_GPIO_WritePin>
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	240001ac 	.word	0x240001ac
 8000d84:	240001b0 	.word	0x240001b0

08000d88 <csn_reset>:

void csn_reset() {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <csn_reset+0x18>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <csn_reset+0x1c>)
 8000d92:	8811      	ldrh	r1, [r2, #0]
 8000d94:	2200      	movs	r2, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 f912 	bl	8001fc0 <HAL_GPIO_WritePin>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	240001ac 	.word	0x240001ac
 8000da4:	240001b0 	.word	0x240001b0

08000da8 <ce_set>:

void ce_set() {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <ce_set+0x18>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <ce_set+0x1c>)
 8000db2:	8811      	ldrh	r1, [r2, #0]
 8000db4:	2201      	movs	r2, #1
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 f902 	bl	8001fc0 <HAL_GPIO_WritePin>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	240001b4 	.word	0x240001b4
 8000dc4:	240001b8 	.word	0x240001b8

08000dc8 <ce_reset>:

void ce_reset() {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <ce_reset+0x18>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <ce_reset+0x1c>)
 8000dd2:	8811      	ldrh	r1, [r2, #0]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 f8f2 	bl	8001fc0 <HAL_GPIO_WritePin>
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	240001b4 	.word	0x240001b4
 8000de4:	240001b8 	.word	0x240001b8

08000de8 <NRF_Init>:
 *
 * Main functions
 *
 */

NRF_Status NRF_Init(SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCSN, uint16_t PinCSN, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	4613      	mov	r3, r2
 8000df6:	80fb      	strh	r3, [r7, #6]
  HSPI = handle;
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <NRF_Init+0x48>)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	6013      	str	r3, [r2, #0]
  NRF_CSN_Port = PortCSN;
 8000dfe:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <NRF_Init+0x4c>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	6013      	str	r3, [r2, #0]
  NRF_CSN_Pin = PinCSN;
 8000e04:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <NRF_Init+0x50>)
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	8013      	strh	r3, [r2, #0]
  NRF_CE_Port = PortCE;
 8000e0a:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <NRF_Init+0x54>)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	6013      	str	r3, [r2, #0]
  NRF_CE_Pin = PinCE;
 8000e10:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <NRF_Init+0x58>)
 8000e12:	8b3b      	ldrh	r3, [r7, #24]
 8000e14:	8013      	strh	r3, [r2, #0]

  // Make sure CSN i pulled high
  csn_set();
 8000e16:	f7ff ffa7 	bl	8000d68 <csn_set>

  // Takes ~100ms from power on to start up
  HAL_Delay(100);
 8000e1a:	2064      	movs	r0, #100	; 0x64
 8000e1c:	f000 fdc8 	bl	80019b0 <HAL_Delay>

  return NRF_EnterMode(NRF_MODE_STANDBY1);
 8000e20:	2001      	movs	r0, #1
 8000e22:	f000 f89f 	bl	8000f64 <NRF_EnterMode>
 8000e26:	4603      	mov	r3, r0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	240001a8 	.word	0x240001a8
 8000e34:	240001ac 	.word	0x240001ac
 8000e38:	240001b0 	.word	0x240001b0
 8000e3c:	240001b4 	.word	0x240001b4
 8000e40:	240001b8 	.word	0x240001b8

08000e44 <NRF_SendCommand>:

NRF_Status NRF_SendCommand(uint8_t cmd) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af02      	add	r7, sp, #8
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000e52:	f7ff ff99 	bl	8000d88 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <NRF_SendCommand+0x44>)
 8000e58:	6818      	ldr	r0, [r3, #0]
 8000e5a:	f107 020e 	add.w	r2, r7, #14
 8000e5e:	1df9      	adds	r1, r7, #7
 8000e60:	230a      	movs	r3, #10
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	f004 fc29 	bl	80056bc <HAL_SPI_TransmitReceive>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <NRF_SendCommand+0x34>
    return ret;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	e002      	b.n	8000e7e <NRF_SendCommand+0x3a>
  }
  csn_set();
 8000e78:	f7ff ff76 	bl	8000d68 <csn_set>

  return ret;
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	240001a8 	.word	0x240001a8

08000e8c <NRF_SendWriteCommand>:

NRF_Status NRF_SendWriteCommand(uint8_t cmd, uint8_t *write, uint8_t length) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af02      	add	r7, sp, #8
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000ea0:	f7ff ff72 	bl	8000d88 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <NRF_SendWriteCommand+0x68>)
 8000ea6:	6818      	ldr	r0, [r3, #0]
 8000ea8:	f107 020e 	add.w	r2, r7, #14
 8000eac:	1df9      	adds	r1, r7, #7
 8000eae:	230a      	movs	r3, #10
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f004 fc02 	bl	80056bc <HAL_SPI_TransmitReceive>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <NRF_SendWriteCommand+0x3a>
    return ret;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	e011      	b.n	8000eea <NRF_SendWriteCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Transmit(HSPI, write, length, NRF_SPI_TIMEOUT_DUR);
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <NRF_SendWriteCommand+0x68>)
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	79bb      	ldrb	r3, [r7, #6]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	230a      	movs	r3, #10
 8000ed0:	6839      	ldr	r1, [r7, #0]
 8000ed2:	f004 f867 	bl	8004fa4 <HAL_SPI_Transmit>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <NRF_SendWriteCommand+0x58>
    return ret;
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	e002      	b.n	8000eea <NRF_SendWriteCommand+0x5e>
  }
  csn_set();
 8000ee4:	f7ff ff40 	bl	8000d68 <csn_set>

  return ret;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	240001a8 	.word	0x240001a8

08000ef8 <NRF_SendReadCommand>:

NRF_Status NRF_SendReadCommand(uint8_t cmd, uint8_t *read, uint8_t length) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af02      	add	r7, sp, #8
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	4613      	mov	r3, r2
 8000f06:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000f0c:	f7ff ff3c 	bl	8000d88 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000f10:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <NRF_SendReadCommand+0x68>)
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	f107 020e 	add.w	r2, r7, #14
 8000f18:	1df9      	adds	r1, r7, #7
 8000f1a:	230a      	movs	r3, #10
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	f004 fbcc 	bl	80056bc <HAL_SPI_TransmitReceive>
 8000f24:	4603      	mov	r3, r0
 8000f26:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <NRF_SendReadCommand+0x3a>
    return ret;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	e011      	b.n	8000f56 <NRF_SendReadCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Receive(HSPI, read, length, NRF_SPI_TIMEOUT_DUR);
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <NRF_SendReadCommand+0x68>)
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	79bb      	ldrb	r3, [r7, #6]
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	230a      	movs	r3, #10
 8000f3c:	6839      	ldr	r1, [r7, #0]
 8000f3e:	f004 fa2d 	bl	800539c <HAL_SPI_Receive>
 8000f42:	4603      	mov	r3, r0
 8000f44:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <NRF_SendReadCommand+0x58>
    return ret;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	e002      	b.n	8000f56 <NRF_SendReadCommand+0x5e>
  }
  csn_set();
 8000f50:	f7ff ff0a 	bl	8000d68 <csn_set>

  return ret;
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	240001a8 	.word	0x240001a8

08000f64 <NRF_EnterMode>:
 *
 * Device control
 *
 */

NRF_Status NRF_EnterMode(uint8_t mode) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]

  switch(mode) {
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	2b03      	cmp	r3, #3
 8000f76:	dc2a      	bgt.n	8000fce <NRF_EnterMode+0x6a>
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	da15      	bge.n	8000fa8 <NRF_EnterMode+0x44>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <NRF_EnterMode+0x22>
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d006      	beq.n	8000f92 <NRF_EnterMode+0x2e>
 8000f84:	e023      	b.n	8000fce <NRF_EnterMode+0x6a>
    case NRF_MODE_POWERDOWN:
      // Can come from any mode
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000f86:	2101      	movs	r1, #1
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 f8a7 	bl	80010dc <NRF_ResetRegisterBit>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]
    case NRF_MODE_STANDBY1:
      // We expect to come from powerdown
      ce_reset();
 8000f92:	f7ff ff19 	bl	8000dc8 <ce_reset>
      ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000f96:	2101      	movs	r1, #1
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f000 f86e 	bl	800107a <NRF_SetRegisterBit>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(2);
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f000 fd04 	bl	80019b0 <HAL_Delay>
    case NRF_MODE_RX:
    case NRF_MODE_TX:
      // We expect to come from standby-I
      if (mode == NRF_MODE_TX) {
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	d106      	bne.n	8000fbc <NRF_EnterMode+0x58>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 f893 	bl	80010dc <NRF_ResetRegisterBit>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73fb      	strb	r3, [r7, #15]
 8000fba:	e005      	b.n	8000fc8 <NRF_EnterMode+0x64>
      } else {
        ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f85b 	bl	800107a <NRF_SetRegisterBit>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73fb      	strb	r3, [r7, #15]
      }

      // Enter mode
      ce_set();
 8000fc8:	f7ff feee 	bl	8000da8 <ce_set>
      break;
 8000fcc:	e002      	b.n	8000fd4 <NRF_EnterMode+0x70>
    default:
      ret = NRF_ERROR;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8000fd2:	bf00      	nop
  }

  return ret;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <NRF_ReadPayload>:

NRF_Status NRF_WritePayload(uint8_t *payload, uint8_t length) {
  return NRF_SendWriteCommand(NRF_CMD_W_TX_PAYLOAD, payload, length);
}

NRF_Status NRF_ReadPayload(uint8_t *read, uint8_t length) {
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	70fb      	strb	r3, [r7, #3]
  return NRF_SendReadCommand(NRF_CMD_R_RX_PAYLOAD, read, length);
 8000fea:	78fb      	ldrb	r3, [r7, #3]
 8000fec:	461a      	mov	r2, r3
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	2061      	movs	r0, #97	; 0x61
 8000ff2:	f7ff ff81 	bl	8000ef8 <NRF_SendReadCommand>
 8000ff6:	4603      	mov	r3, r0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <NRF_WriteAckPayload>:

NRF_Status NRF_WritePayloadNoAck(uint8_t *payload, uint8_t length) {
  return NRF_SendWriteCommand(NRF_CMD_W_TX_PAYLOAD_NO_ACK, payload, length);
}

NRF_Status NRF_WriteAckPayload(uint8_t *payload, uint8_t length) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
  return NRF_SendWriteCommand(NRF_CMD_W_ACK_PAYLOAD, payload, length);
 800100c:	78fb      	ldrb	r3, [r7, #3]
 800100e:	461a      	mov	r2, r3
 8001010:	6879      	ldr	r1, [r7, #4]
 8001012:	20a8      	movs	r0, #168	; 0xa8
 8001014:	f7ff ff3a 	bl	8000e8c <NRF_SendWriteCommand>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <NRF_WriteRegister>:
 * Register helpers
 *
 */

/* Writing */
NRF_Status NRF_WriteRegister(uint8_t reg, uint8_t *write, uint8_t length) {
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	6039      	str	r1, [r7, #0]
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	4613      	mov	r3, r2
 8001030:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_REGISTER | reg, write, length);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f043 0320 	orr.w	r3, r3, #32
 8001038:	b2db      	uxtb	r3, r3
 800103a:	79ba      	ldrb	r2, [r7, #6]
 800103c:	6839      	ldr	r1, [r7, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff24 	bl	8000e8c <NRF_SendWriteCommand>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <NRF_WriteRegisterByte>:

NRF_Status NRF_WriteRegisterByte(uint8_t reg, uint8_t byte) {
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	460a      	mov	r2, r1
 8001058:	71fb      	strb	r3, [r7, #7]
 800105a:	4613      	mov	r3, r2
 800105c:	71bb      	strb	r3, [r7, #6]
  uint8_t write = byte;
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	73fb      	strb	r3, [r7, #15]
  return NRF_WriteRegister(reg, &write, 1);
 8001062:	f107 010f 	add.w	r1, r7, #15
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2201      	movs	r2, #1
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ffd9 	bl	8001022 <NRF_WriteRegister>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <NRF_SetRegisterBit>:

NRF_Status NRF_SetRegisterBit(uint8_t reg, uint8_t bit) {
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	460a      	mov	r2, r1
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	4613      	mov	r3, r2
 8001088:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 800108e:	2300      	movs	r3, #0
 8001090:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 8001092:	f107 010e 	add.w	r1, r7, #14
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2201      	movs	r2, #1
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f851 	bl	8001142 <NRF_ReadRegister>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <NRF_SetRegisterBit+0x34>
    return ret;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	e012      	b.n	80010d4 <NRF_SetRegisterBit+0x5a>
  }

  cfg = cfg | (1 << bit);
 80010ae:	79bb      	ldrb	r3, [r7, #6]
 80010b0:	2201      	movs	r2, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	b25a      	sxtb	r2, r3
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 80010c4:	f107 010e 	add.w	r1, r7, #14
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	2201      	movs	r2, #1
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ffa8 	bl	8001022 <NRF_WriteRegister>
 80010d2:	4603      	mov	r3, r0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <NRF_ResetRegisterBit>:

NRF_Status NRF_ResetRegisterBit(uint8_t reg, uint8_t bit) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	460a      	mov	r2, r1
 80010e6:	71fb      	strb	r3, [r7, #7]
 80010e8:	4613      	mov	r3, r2
 80010ea:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 80010f4:	f107 010e 	add.w	r1, r7, #14
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	2201      	movs	r2, #1
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f820 	bl	8001142 <NRF_ReadRegister>
 8001102:	4603      	mov	r3, r0
 8001104:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <NRF_ResetRegisterBit+0x34>
    return ret;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	e014      	b.n	800113a <NRF_ResetRegisterBit+0x5e>
  }

  cfg = cfg & ~(1 << bit);
 8001110:	79bb      	ldrb	r3, [r7, #6]
 8001112:	2201      	movs	r2, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	b25b      	sxtb	r3, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	b25a      	sxtb	r2, r3
 800111e:	7bbb      	ldrb	r3, [r7, #14]
 8001120:	b25b      	sxtb	r3, r3
 8001122:	4013      	ands	r3, r2
 8001124:	b25b      	sxtb	r3, r3
 8001126:	b2db      	uxtb	r3, r3
 8001128:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 800112a:	f107 010e 	add.w	r1, r7, #14
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2201      	movs	r2, #1
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff75 	bl	8001022 <NRF_WriteRegister>
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <NRF_ReadRegister>:


/* Reading */
NRF_Status NRF_ReadRegister(uint8_t reg, uint8_t *read, uint8_t length) {
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	6039      	str	r1, [r7, #0]
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	4613      	mov	r3, r2
 8001150:	71bb      	strb	r3, [r7, #6]
  return NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, read, length);
 8001152:	79ba      	ldrb	r2, [r7, #6]
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	6839      	ldr	r1, [r7, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fecd 	bl	8000ef8 <NRF_SendReadCommand>
 800115e:	4603      	mov	r3, r0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <NRF_ReadRegisterByte>:

uint8_t NRF_ReadRegisterByte(uint8_t reg) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
  uint8_t read;
  NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, &read, 1);
 8001172:	f107 010f 	add.w	r1, r7, #15
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2201      	movs	r2, #1
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff febc 	bl	8000ef8 <NRF_SendReadCommand>
  return read;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <NRF_ReadStatus>:

uint8_t NRF_ReadStatus() {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af02      	add	r7, sp, #8
  uint8_t status = 0x00;
 8001192:	2300      	movs	r3, #0
 8001194:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd = NRF_CMD_NOP;
 8001196:	23ff      	movs	r3, #255	; 0xff
 8001198:	71bb      	strb	r3, [r7, #6]

  csn_reset();
 800119a:	f7ff fdf5 	bl	8000d88 <csn_reset>
  HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <NRF_ReadStatus+0x34>)
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	1dfa      	adds	r2, r7, #7
 80011a4:	1db9      	adds	r1, r7, #6
 80011a6:	230a      	movs	r3, #10
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	f004 fa86 	bl	80056bc <HAL_SPI_TransmitReceive>
  csn_set();
 80011b0:	f7ff fdda 	bl	8000d68 <csn_set>

  return status;
 80011b4:	79fb      	ldrb	r3, [r7, #7]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	240001a8 	.word	0x240001a8

080011c4 <NRF_Reset>:
  }

  return ret;
}

void NRF_Reset() {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
  // Reset state (goto standby-I)
  csn_set();
 80011ca:	f7ff fdcd 	bl	8000d68 <csn_set>
  ce_reset();
 80011ce:	f7ff fdfb 	bl	8000dc8 <ce_reset>

  // Flush FIFOs
  NRF_EnterMode(NRF_MODE_TX);
 80011d2:	2003      	movs	r0, #3
 80011d4:	f7ff fec6 	bl	8000f64 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_TX);
 80011d8:	20e1      	movs	r0, #225	; 0xe1
 80011da:	f7ff fe33 	bl	8000e44 <NRF_SendCommand>
  ce_reset();
 80011de:	f7ff fdf3 	bl	8000dc8 <ce_reset>
  NRF_EnterMode(NRF_MODE_RX);
 80011e2:	2002      	movs	r0, #2
 80011e4:	f7ff febe 	bl	8000f64 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_RX);
 80011e8:	20e2      	movs	r0, #226	; 0xe2
 80011ea:	f7ff fe2b 	bl	8000e44 <NRF_SendCommand>
  ce_reset();
 80011ee:	f7ff fdeb 	bl	8000dc8 <ce_reset>

  // Flush register
  NRF_WriteRegisterByte(NRF_REG_CONFIG,       0x0A);
 80011f2:	210a      	movs	r1, #10
 80011f4:	2000      	movs	r0, #0
 80011f6:	f7ff ff2a 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_AA,        0x3f);
 80011fa:	213f      	movs	r1, #63	; 0x3f
 80011fc:	2001      	movs	r0, #1
 80011fe:	f7ff ff26 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_RXADDR,    0x03);
 8001202:	2103      	movs	r1, #3
 8001204:	2002      	movs	r0, #2
 8001206:	f7ff ff22 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_AW,     0x03);
 800120a:	2103      	movs	r1, #3
 800120c:	2003      	movs	r0, #3
 800120e:	f7ff ff1e 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_RETR,   0x03);
 8001212:	2103      	movs	r1, #3
 8001214:	2004      	movs	r0, #4
 8001216:	f7ff ff1a 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_CH,        0x02);
 800121a:	2102      	movs	r1, #2
 800121c:	2005      	movs	r0, #5
 800121e:	f7ff ff16 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_SETUP,     0x0e);
 8001222:	210e      	movs	r1, #14
 8001224:	2006      	movs	r0, #6
 8001226:	f7ff ff12 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_STATUS,       0x70); // clear flags
 800122a:	2170      	movs	r1, #112	; 0x70
 800122c:	2007      	movs	r0, #7
 800122e:	f7ff ff0e 	bl	800104e <NRF_WriteRegisterByte>

  uint8_t address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8001232:	4a2d      	ldr	r2, [pc, #180]	; (80012e8 <NRF_Reset+0x124>)
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800123c:	6018      	str	r0, [r3, #0]
 800123e:	3304      	adds	r3, #4
 8001240:	7019      	strb	r1, [r3, #0]
  uint8_t address2[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8001242:	4a2a      	ldr	r2, [pc, #168]	; (80012ec <NRF_Reset+0x128>)
 8001244:	463b      	mov	r3, r7
 8001246:	e892 0003 	ldmia.w	r2, {r0, r1}
 800124a:	6018      	str	r0, [r3, #0]
 800124c:	3304      	adds	r3, #4
 800124e:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	2205      	movs	r2, #5
 8001256:	4619      	mov	r1, r3
 8001258:	200a      	movs	r0, #10
 800125a:	f7ff fee2 	bl	8001022 <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P1, address2, 5);
 800125e:	463b      	mov	r3, r7
 8001260:	2205      	movs	r2, #5
 8001262:	4619      	mov	r1, r3
 8001264:	200b      	movs	r0, #11
 8001266:	f7ff fedc 	bl	8001022 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P2,   0xC3);
 800126a:	21c3      	movs	r1, #195	; 0xc3
 800126c:	200c      	movs	r0, #12
 800126e:	f7ff feee 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P3,   0xC4);
 8001272:	21c4      	movs	r1, #196	; 0xc4
 8001274:	200d      	movs	r0, #13
 8001276:	f7ff feea 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P4,   0xC5);
 800127a:	21c5      	movs	r1, #197	; 0xc5
 800127c:	200e      	movs	r0, #14
 800127e:	f7ff fee6 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P5,   0xC6);
 8001282:	21c6      	movs	r1, #198	; 0xc6
 8001284:	200f      	movs	r0, #15
 8001286:	f7ff fee2 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	2205      	movs	r2, #5
 8001290:	4619      	mov	r1, r3
 8001292:	2010      	movs	r0, #16
 8001294:	f7ff fec5 	bl	8001022 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,     0x00);
 8001298:	2100      	movs	r1, #0
 800129a:	2011      	movs	r0, #17
 800129c:	f7ff fed7 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P1,     0x00);
 80012a0:	2100      	movs	r1, #0
 80012a2:	2012      	movs	r0, #18
 80012a4:	f7ff fed3 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P2,     0x00);
 80012a8:	2100      	movs	r1, #0
 80012aa:	2013      	movs	r0, #19
 80012ac:	f7ff fecf 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P3,     0x00);
 80012b0:	2100      	movs	r1, #0
 80012b2:	2014      	movs	r0, #20
 80012b4:	f7ff fecb 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P4,     0x00);
 80012b8:	2100      	movs	r1, #0
 80012ba:	2015      	movs	r0, #21
 80012bc:	f7ff fec7 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P5,     0x00);
 80012c0:	2100      	movs	r1, #0
 80012c2:	2016      	movs	r0, #22
 80012c4:	f7ff fec3 	bl	800104e <NRF_WriteRegisterByte>

  NRF_WriteRegisterByte(NRF_REG_FIFO_STATUS,  0x00);
 80012c8:	2100      	movs	r1, #0
 80012ca:	2017      	movs	r0, #23
 80012cc:	f7ff febf 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_DYNPD,        0x00);
 80012d0:	2100      	movs	r1, #0
 80012d2:	201c      	movs	r0, #28
 80012d4:	f7ff febb 	bl	800104e <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_FEATURE,      0x00);
 80012d8:	2100      	movs	r1, #0
 80012da:	201d      	movs	r0, #29
 80012dc:	f7ff feb7 	bl	800104e <NRF_WriteRegisterByte>
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	08007ffc 	.word	0x08007ffc
 80012ec:	08008004 	.word	0x08008004

080012f0 <NRF_PrintStatus>:

void NRF_PrintStatus() {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  uint8_t status = NRF_ReadStatus();
 80012f6:	f7ff ff49 	bl	800118c <NRF_ReadStatus>
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]

  printf("Status register: %02X\r\n", status);
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	4619      	mov	r1, r3
 8001302:	4825      	ldr	r0, [pc, #148]	; (8001398 <NRF_PrintStatus+0xa8>)
 8001304:	f005 ff06 	bl	8007114 <iprintf>
  printf("CE: %d\r\n", HAL_GPIO_ReadPin(NRF_CE_Port, NRF_CE_Pin));
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <NRF_PrintStatus+0xac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <NRF_PrintStatus+0xb0>)
 800130e:	8812      	ldrh	r2, [r2, #0]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fe3c 	bl	8001f90 <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	4619      	mov	r1, r3
 800131c:	4821      	ldr	r0, [pc, #132]	; (80013a4 <NRF_PrintStatus+0xb4>)
 800131e:	f005 fef9 	bl	8007114 <iprintf>
  printf("CSN: %d\r\n", HAL_GPIO_ReadPin(NRF_CSN_Port, NRF_CSN_Pin));
 8001322:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <NRF_PrintStatus+0xb8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a21      	ldr	r2, [pc, #132]	; (80013ac <NRF_PrintStatus+0xbc>)
 8001328:	8812      	ldrh	r2, [r2, #0]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fe2f 	bl	8001f90 <HAL_GPIO_ReadPin>
 8001332:	4603      	mov	r3, r0
 8001334:	4619      	mov	r1, r3
 8001336:	481e      	ldr	r0, [pc, #120]	; (80013b0 <NRF_PrintStatus+0xc0>)
 8001338:	f005 feec 	bl	8007114 <iprintf>
  printf("TX_FULL:  %1X\r\n", status & (1<<STATUS_BIT_TX_FULL));
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	4619      	mov	r1, r3
 8001344:	481b      	ldr	r0, [pc, #108]	; (80013b4 <NRF_PrintStatus+0xc4>)
 8001346:	f005 fee5 	bl	8007114 <iprintf>
  printf("RX_P_NO:  %1X\r\n", (status & (0x3<<STATUS_BIT_RX_P_NO)) >> 1);
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	105b      	asrs	r3, r3, #1
 800134e:	f003 0303 	and.w	r3, r3, #3
 8001352:	4619      	mov	r1, r3
 8001354:	4818      	ldr	r0, [pc, #96]	; (80013b8 <NRF_PrintStatus+0xc8>)
 8001356:	f005 fedd 	bl	8007114 <iprintf>
  printf("MAX_RT:   %1X\r\n", (status & (1<<STATUS_BIT_MAX_RT))    >> 4);
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	111b      	asrs	r3, r3, #4
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	4619      	mov	r1, r3
 8001364:	4815      	ldr	r0, [pc, #84]	; (80013bc <NRF_PrintStatus+0xcc>)
 8001366:	f005 fed5 	bl	8007114 <iprintf>
  printf("TX_DS:    %1X\r\n", (status & (1<<STATUS_BIT_TX_DS))     >> 5);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	115b      	asrs	r3, r3, #5
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	4619      	mov	r1, r3
 8001374:	4812      	ldr	r0, [pc, #72]	; (80013c0 <NRF_PrintStatus+0xd0>)
 8001376:	f005 fecd 	bl	8007114 <iprintf>
  printf("RX_DR:    %1X\r\n", (status & (1<<STATUS_BIT_RX_DR))     >> 6);
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	119b      	asrs	r3, r3, #6
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	4619      	mov	r1, r3
 8001384:	480f      	ldr	r0, [pc, #60]	; (80013c4 <NRF_PrintStatus+0xd4>)
 8001386:	f005 fec5 	bl	8007114 <iprintf>
  printf("\r\n");
 800138a:	480f      	ldr	r0, [pc, #60]	; (80013c8 <NRF_PrintStatus+0xd8>)
 800138c:	f005 ff30 	bl	80071f0 <puts>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	0800800c 	.word	0x0800800c
 800139c:	240001b4 	.word	0x240001b4
 80013a0:	240001b8 	.word	0x240001b8
 80013a4:	08008024 	.word	0x08008024
 80013a8:	240001ac 	.word	0x240001ac
 80013ac:	240001b0 	.word	0x240001b0
 80013b0:	08008030 	.word	0x08008030
 80013b4:	0800803c 	.word	0x0800803c
 80013b8:	0800804c 	.word	0x0800804c
 80013bc:	0800805c 	.word	0x0800805c
 80013c0:	0800806c 	.word	0x0800806c
 80013c4:	0800807c 	.word	0x0800807c
 80013c8:	0800808c 	.word	0x0800808c

080013cc <NRF_PrintFIFOStatus>:

void NRF_PrintFIFOStatus() {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
  uint8_t reg = NRF_ReadRegisterByte(NRF_REG_FIFO_STATUS);
 80013d2:	2017      	movs	r0, #23
 80013d4:	f7ff fec8 	bl	8001168 <NRF_ReadRegisterByte>
 80013d8:	4603      	mov	r3, r0
 80013da:	71fb      	strb	r3, [r7, #7]

  printf("FIFO status register: %02X\r\n", reg);
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	4619      	mov	r1, r3
 80013e0:	4818      	ldr	r0, [pc, #96]	; (8001444 <NRF_PrintFIFOStatus+0x78>)
 80013e2:	f005 fe97 	bl	8007114 <iprintf>
  printf("RX_EMPTY:   %2X\r\n", reg &  (1<<FIFO_STATUS_BIT_RX_EMPTY));
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	4619      	mov	r1, r3
 80013ee:	4816      	ldr	r0, [pc, #88]	; (8001448 <NRF_PrintFIFOStatus+0x7c>)
 80013f0:	f005 fe90 	bl	8007114 <iprintf>
  printf("RX_FULL:    %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_RX_FULL))     >> 1);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	105b      	asrs	r3, r3, #1
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	4619      	mov	r1, r3
 80013fe:	4813      	ldr	r0, [pc, #76]	; (800144c <NRF_PrintFIFOStatus+0x80>)
 8001400:	f005 fe88 	bl	8007114 <iprintf>
  printf("TX_EMPTY:   %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_EMPTY))    >> 4);
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	111b      	asrs	r3, r3, #4
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	4619      	mov	r1, r3
 800140e:	4810      	ldr	r0, [pc, #64]	; (8001450 <NRF_PrintFIFOStatus+0x84>)
 8001410:	f005 fe80 	bl	8007114 <iprintf>
  printf("TX_FULL:    %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_FULL))     >> 5);
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	115b      	asrs	r3, r3, #5
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	4619      	mov	r1, r3
 800141e:	480d      	ldr	r0, [pc, #52]	; (8001454 <NRF_PrintFIFOStatus+0x88>)
 8001420:	f005 fe78 	bl	8007114 <iprintf>
  printf("TX_REUSE:   %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_REUSE))    >> 6);
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	119b      	asrs	r3, r3, #6
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	4619      	mov	r1, r3
 800142e:	480a      	ldr	r0, [pc, #40]	; (8001458 <NRF_PrintFIFOStatus+0x8c>)
 8001430:	f005 fe70 	bl	8007114 <iprintf>
  printf("\r\n");
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <NRF_PrintFIFOStatus+0x90>)
 8001436:	f005 fedb 	bl	80071f0 <puts>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	08008090 	.word	0x08008090
 8001448:	080080b0 	.word	0x080080b0
 800144c:	080080c4 	.word	0x080080c4
 8001450:	080080d8 	.word	0x080080d8
 8001454:	080080ec 	.word	0x080080ec
 8001458:	08008100 	.word	0x08008100
 800145c:	0800808c 	.word	0x0800808c

08001460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_MspInit+0x30>)
 8001468:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800146c:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_MspInit+0x30>)
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_MspInit+0x30>)
 8001478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	58024400 	.word	0x58024400

08001494 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0bc      	sub	sp, #240	; 0xf0
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ac:	f107 0318 	add.w	r3, r7, #24
 80014b0:	22c0      	movs	r2, #192	; 0xc0
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f005 ff7b 	bl	80073b0 <memset>
  if(hspi->Instance==SPI1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a38      	ldr	r2, [pc, #224]	; (80015a0 <HAL_SPI_MspInit+0x10c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d168      	bne.n	8001596 <HAL_SPI_MspInit+0x102>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80014c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014c8:	f04f 0300 	mov.w	r3, #0
 80014cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 fe13 	bl	8003104 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 80014e4:	f7ff fc3a 	bl	8000d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014e8:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <HAL_SPI_MspInit+0x110>)
 80014ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014ee:	4a2d      	ldr	r2, [pc, #180]	; (80015a4 <HAL_SPI_MspInit+0x110>)
 80014f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <HAL_SPI_MspInit+0x110>)
 80014fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <HAL_SPI_MspInit+0x110>)
 8001508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150c:	4a25      	ldr	r2, [pc, #148]	; (80015a4 <HAL_SPI_MspInit+0x110>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001516:	4b23      	ldr	r3, [pc, #140]	; (80015a4 <HAL_SPI_MspInit+0x110>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <HAL_SPI_MspInit+0x110>)
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152a:	4a1e      	ldr	r2, [pc, #120]	; (80015a4 <HAL_SPI_MspInit+0x110>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <HAL_SPI_MspInit+0x110>)
 8001536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin|NRF_MISO_Pin;
 8001542:	2360      	movs	r3, #96	; 0x60
 8001544:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800155a:	2305      	movs	r3, #5
 800155c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001560:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001564:	4619      	mov	r1, r3
 8001566:	4810      	ldr	r0, [pc, #64]	; (80015a8 <HAL_SPI_MspInit+0x114>)
 8001568:	f000 fb62 	bl	8001c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MOSI_Pin;
 800156c:	2320      	movs	r3, #32
 800156e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001584:	2305      	movs	r3, #5
 8001586:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(NRF_MOSI_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800158e:	4619      	mov	r1, r3
 8001590:	4806      	ldr	r0, [pc, #24]	; (80015ac <HAL_SPI_MspInit+0x118>)
 8001592:	f000 fb4d 	bl	8001c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	37f0      	adds	r7, #240	; 0xf0
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40013000 	.word	0x40013000
 80015a4:	58024400 	.word	0x58024400
 80015a8:	58020000 	.word	0x58020000
 80015ac:	58020400 	.word	0x58020400

080015b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b0ba      	sub	sp, #232	; 0xe8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c8:	f107 0310 	add.w	r3, r7, #16
 80015cc:	22c0      	movs	r2, #192	; 0xc0
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f005 feed 	bl	80073b0 <memset>
  if(huart->Instance==USART3)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a27      	ldr	r2, [pc, #156]	; (8001678 <HAL_UART_MspInit+0xc8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d146      	bne.n	800166e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015e0:	f04f 0202 	mov.w	r2, #2
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f2:	f107 0310 	add.w	r3, r7, #16
 80015f6:	4618      	mov	r0, r3
 80015f8:	f001 fd84 	bl	8003104 <HAL_RCCEx_PeriphCLKConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001602:	f7ff fbab 	bl	8000d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <HAL_UART_MspInit+0xcc>)
 8001608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <HAL_UART_MspInit+0xcc>)
 800160e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001612:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_UART_MspInit+0xcc>)
 8001618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800161c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <HAL_UART_MspInit+0xcc>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162a:	4a14      	ldr	r2, [pc, #80]	; (800167c <HAL_UART_MspInit+0xcc>)
 800162c:	f043 0308 	orr.w	r3, r3, #8
 8001630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001634:	4b11      	ldr	r3, [pc, #68]	; (800167c <HAL_UART_MspInit+0xcc>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	60bb      	str	r3, [r7, #8]
 8001640:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800165c:	2307      	movs	r3, #7
 800165e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001662:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <HAL_UART_MspInit+0xd0>)
 800166a:	f000 fae1 	bl	8001c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	37e8      	adds	r7, #232	; 0xe8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40004800 	.word	0x40004800
 800167c:	58024400 	.word	0x58024400
 8001680:	58020c00 	.word	0x58020c00

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d0:	f000 f94e 	bl	8001970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_USER_Pin);
 80016dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016e0:	f000 fc87 	bl	8001ff2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 80016e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016e8:	f000 fc83 	bl	8001ff2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e00a      	b.n	8001718 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001702:	f3af 8000 	nop.w
 8001706:	4601      	mov	r1, r0
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbf0      	blt.n	8001702 <_read+0x12>
  }

  return len;
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e009      	b.n	8001750 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	60ba      	str	r2, [r7, #8]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff f82f 	bl	80007a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	dbf1      	blt.n	800173c <_write+0x12>
  }
  return len;
 8001758:	687b      	ldr	r3, [r7, #4]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_close>:

int _close(int file)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800178a:	605a      	str	r2, [r3, #4]
  return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_isatty>:

int _isatty(int file)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d207      	bcs.n	800180c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017fc:	f005 fe26 	bl	800744c <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	220c      	movs	r2, #12
 8001804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800180a:	e009      	b.n	8001820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <_sbrk+0x64>)
 800181c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	24080000 	.word	0x24080000
 800182c:	00000400 	.word	0x00000400
 8001830:	240001bc 	.word	0x240001bc
 8001834:	24000310 	.word	0x24000310

08001838 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001838:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001870 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800183c:	f7fe ff1e 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001840:	480c      	ldr	r0, [pc, #48]	; (8001874 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001842:	490d      	ldr	r1, [pc, #52]	; (8001878 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001848:	e002      	b.n	8001850 <LoopCopyDataInit>

0800184a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800184c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184e:	3304      	adds	r3, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001854:	d3f9      	bcc.n	800184a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001858:	4c0a      	ldr	r4, [pc, #40]	; (8001884 <LoopFillZerobss+0x22>)
  movs r3, #0
 800185a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800185c:	e001      	b.n	8001862 <LoopFillZerobss>

0800185e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001860:	3204      	adds	r2, #4

08001862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001864:	d3fb      	bcc.n	800185e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001866:	f005 fdf7 	bl	8007458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186a:	f7ff f869 	bl	8000940 <main>
  bx  lr
 800186e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001870:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001874:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001878:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 800187c:	08008190 	.word	0x08008190
  ldr r2, =_sbss
 8001880:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001884:	24000310 	.word	0x24000310

08001888 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001888:	e7fe      	b.n	8001888 <ADC3_IRQHandler>
	...

0800188c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001892:	2003      	movs	r0, #3
 8001894:	f000 f98c 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001898:	f001 fa5e 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 800189c:	4602      	mov	r2, r0
 800189e:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <HAL_Init+0x68>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	4913      	ldr	r1, [pc, #76]	; (80018f8 <HAL_Init+0x6c>)
 80018aa:	5ccb      	ldrb	r3, [r1, r3]
 80018ac:	f003 031f 	and.w	r3, r3, #31
 80018b0:	fa22 f303 	lsr.w	r3, r2, r3
 80018b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_Init+0x68>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <HAL_Init+0x6c>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	fa22 f303 	lsr.w	r3, r2, r3
 80018cc:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <HAL_Init+0x70>)
 80018ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018d0:	4a0b      	ldr	r2, [pc, #44]	; (8001900 <HAL_Init+0x74>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d6:	200f      	movs	r0, #15
 80018d8:	f000 f814 	bl	8001904 <HAL_InitTick>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e002      	b.n	80018ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018e6:	f7ff fdbb 	bl	8001460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	58024400 	.word	0x58024400
 80018f8:	08008114 	.word	0x08008114
 80018fc:	24000004 	.word	0x24000004
 8001900:	24000000 	.word	0x24000000

08001904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800190c:	4b15      	ldr	r3, [pc, #84]	; (8001964 <HAL_InitTick+0x60>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e021      	b.n	800195c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <HAL_InitTick+0x64>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <HAL_InitTick+0x60>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001926:	fbb3 f3f1 	udiv	r3, r3, r1
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f971 	bl	8001c16 <HAL_SYSTICK_Config>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e00e      	b.n	800195c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b0f      	cmp	r3, #15
 8001942:	d80a      	bhi.n	800195a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001944:	2200      	movs	r2, #0
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800194c:	f000 f93b 	bl	8001bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001950:	4a06      	ldr	r2, [pc, #24]	; (800196c <HAL_InitTick+0x68>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	2400000c 	.word	0x2400000c
 8001968:	24000000 	.word	0x24000000
 800196c:	24000008 	.word	0x24000008

08001970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_IncTick+0x20>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_IncTick+0x24>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4413      	add	r3, r2
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <HAL_IncTick+0x24>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2400000c 	.word	0x2400000c
 8001994:	240001c0 	.word	0x240001c0

08001998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_GetTick+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	240001c0 	.word	0x240001c0

080019b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b8:	f7ff ffee 	bl	8001998 <HAL_GetTick>
 80019bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019c8:	d005      	beq.n	80019d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <HAL_Delay+0x44>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4413      	add	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d6:	bf00      	nop
 80019d8:	f7ff ffde 	bl	8001998 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d8f7      	bhi.n	80019d8 <HAL_Delay+0x28>
  {
  }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	2400000c 	.word	0x2400000c

080019f8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <HAL_GetREVID+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0c1b      	lsrs	r3, r3, #16
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	5c001000 	.word	0x5c001000

08001a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <__NVIC_SetPriorityGrouping+0x40>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <__NVIC_SetPriorityGrouping+0x40>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00
 8001a54:	05fa0000 	.word	0x05fa0000

08001a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <__NVIC_GetPriorityGrouping+0x18>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	f003 0307 	and.w	r3, r3, #7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	db0b      	blt.n	8001a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	f003 021f 	and.w	r2, r3, #31
 8001a8c:	4907      	ldr	r1, [pc, #28]	; (8001aac <__NVIC_EnableIRQ+0x38>)
 8001a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	2001      	movs	r0, #1
 8001a96:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	; (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	88fb      	ldrh	r3, [r7, #6]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b7c:	d301      	bcc.n	8001b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00f      	b.n	8001ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <SysTick_Config+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b90:	f7ff ff8e 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <SysTick_Config+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <SysTick_Config+0x40>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff29 	bl	8001a10 <__NVIC_SetPriorityGrouping>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd4:	f7ff ff40 	bl	8001a58 <__NVIC_GetPriorityGrouping>
 8001bd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	6978      	ldr	r0, [r7, #20]
 8001be0:	f7ff ff90 	bl	8001b04 <NVIC_EncodePriority>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff5f 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff33 	bl	8001a74 <__NVIC_EnableIRQ>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ffa4 	bl	8001b6c <SysTick_Config>
 8001c24:	4603      	mov	r3, r0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
	...

08001c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b089      	sub	sp, #36	; 0x24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c3e:	4b89      	ldr	r3, [pc, #548]	; (8001e64 <HAL_GPIO_Init+0x234>)
 8001c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c42:	e194      	b.n	8001f6e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	2101      	movs	r1, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 8186 	beq.w	8001f68 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d005      	beq.n	8001c74 <HAL_GPIO_Init+0x44>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d130      	bne.n	8001cd6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2203      	movs	r2, #3
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001caa:	2201      	movs	r2, #1
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	091b      	lsrs	r3, r3, #4
 8001cc0:	f003 0201 	and.w	r2, r3, #1
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d017      	beq.n	8001d12 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	2203      	movs	r2, #3
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d123      	bne.n	8001d66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	08da      	lsrs	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3208      	adds	r2, #8
 8001d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	220f      	movs	r2, #15
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f003 0307 	and.w	r3, r3, #7
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	08da      	lsrs	r2, r3, #3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3208      	adds	r2, #8
 8001d60:	69b9      	ldr	r1, [r7, #24]
 8001d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2203      	movs	r2, #3
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0203 	and.w	r2, r3, #3
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 80e0 	beq.w	8001f68 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da8:	4b2f      	ldr	r3, [pc, #188]	; (8001e68 <HAL_GPIO_Init+0x238>)
 8001daa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dae:	4a2e      	ldr	r2, [pc, #184]	; (8001e68 <HAL_GPIO_Init+0x238>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001db8:	4b2b      	ldr	r3, [pc, #172]	; (8001e68 <HAL_GPIO_Init+0x238>)
 8001dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc6:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <HAL_GPIO_Init+0x23c>)
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <HAL_GPIO_Init+0x240>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d052      	beq.n	8001e98 <HAL_GPIO_Init+0x268>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a1f      	ldr	r2, [pc, #124]	; (8001e74 <HAL_GPIO_Init+0x244>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d031      	beq.n	8001e5e <HAL_GPIO_Init+0x22e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a1e      	ldr	r2, [pc, #120]	; (8001e78 <HAL_GPIO_Init+0x248>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d02b      	beq.n	8001e5a <HAL_GPIO_Init+0x22a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <HAL_GPIO_Init+0x24c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d025      	beq.n	8001e56 <HAL_GPIO_Init+0x226>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <HAL_GPIO_Init+0x250>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d01f      	beq.n	8001e52 <HAL_GPIO_Init+0x222>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <HAL_GPIO_Init+0x254>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d019      	beq.n	8001e4e <HAL_GPIO_Init+0x21e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a1a      	ldr	r2, [pc, #104]	; (8001e88 <HAL_GPIO_Init+0x258>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d013      	beq.n	8001e4a <HAL_GPIO_Init+0x21a>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a19      	ldr	r2, [pc, #100]	; (8001e8c <HAL_GPIO_Init+0x25c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00d      	beq.n	8001e46 <HAL_GPIO_Init+0x216>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a18      	ldr	r2, [pc, #96]	; (8001e90 <HAL_GPIO_Init+0x260>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d007      	beq.n	8001e42 <HAL_GPIO_Init+0x212>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_GPIO_Init+0x264>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d101      	bne.n	8001e3e <HAL_GPIO_Init+0x20e>
 8001e3a:	2309      	movs	r3, #9
 8001e3c:	e02d      	b.n	8001e9a <HAL_GPIO_Init+0x26a>
 8001e3e:	230a      	movs	r3, #10
 8001e40:	e02b      	b.n	8001e9a <HAL_GPIO_Init+0x26a>
 8001e42:	2308      	movs	r3, #8
 8001e44:	e029      	b.n	8001e9a <HAL_GPIO_Init+0x26a>
 8001e46:	2307      	movs	r3, #7
 8001e48:	e027      	b.n	8001e9a <HAL_GPIO_Init+0x26a>
 8001e4a:	2306      	movs	r3, #6
 8001e4c:	e025      	b.n	8001e9a <HAL_GPIO_Init+0x26a>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	e023      	b.n	8001e9a <HAL_GPIO_Init+0x26a>
 8001e52:	2304      	movs	r3, #4
 8001e54:	e021      	b.n	8001e9a <HAL_GPIO_Init+0x26a>
 8001e56:	2303      	movs	r3, #3
 8001e58:	e01f      	b.n	8001e9a <HAL_GPIO_Init+0x26a>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e01d      	b.n	8001e9a <HAL_GPIO_Init+0x26a>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e01b      	b.n	8001e9a <HAL_GPIO_Init+0x26a>
 8001e62:	bf00      	nop
 8001e64:	58000080 	.word	0x58000080
 8001e68:	58024400 	.word	0x58024400
 8001e6c:	58000400 	.word	0x58000400
 8001e70:	58020000 	.word	0x58020000
 8001e74:	58020400 	.word	0x58020400
 8001e78:	58020800 	.word	0x58020800
 8001e7c:	58020c00 	.word	0x58020c00
 8001e80:	58021000 	.word	0x58021000
 8001e84:	58021400 	.word	0x58021400
 8001e88:	58021800 	.word	0x58021800
 8001e8c:	58021c00 	.word	0x58021c00
 8001e90:	58022000 	.word	0x58022000
 8001e94:	58022400 	.word	0x58022400
 8001e98:	2300      	movs	r3, #0
 8001e9a:	69fa      	ldr	r2, [r7, #28]
 8001e9c:	f002 0203 	and.w	r2, r2, #3
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	4093      	lsls	r3, r2
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eaa:	4938      	ldr	r1, [pc, #224]	; (8001f8c <HAL_GPIO_Init+0x35c>)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f47f ae63 	bne.w	8001c44 <HAL_GPIO_Init+0x14>
  }
}
 8001f7e:	bf00      	nop
 8001f80:	bf00      	nop
 8001f82:	3724      	adds	r7, #36	; 0x24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	58000400 	.word	0x58000400

08001f90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	887b      	ldrh	r3, [r7, #2]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	e001      	b.n	8001fb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	807b      	strh	r3, [r7, #2]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fd0:	787b      	ldrb	r3, [r7, #1]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fd6:	887a      	ldrh	r2, [r7, #2]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001fdc:	e003      	b.n	8001fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	041a      	lsls	r2, r3, #16
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	619a      	str	r2, [r3, #24]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002000:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002004:	88fb      	ldrh	r3, [r7, #6]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800200c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fbd7 	bl	80007cc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800201e:	bf00      	nop
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002030:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_HSEM_FastTake+0x2c>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	3320      	adds	r3, #32
 8002036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203a:	4a07      	ldr	r2, [pc, #28]	; (8002058 <HAL_HSEM_FastTake+0x30>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d101      	bne.n	8002044 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	e000      	b.n	8002046 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	58026400 	.word	0x58026400
 8002058:	80000300 	.word	0x80000300

0800205c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002066:	4906      	ldr	r1, [pc, #24]	; (8002080 <HAL_HSEM_Release+0x24>)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	58026400 	.word	0x58026400

08002084 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800208c:	4b29      	ldr	r3, [pc, #164]	; (8002134 <HAL_PWREx_ConfigSupply+0xb0>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	2b06      	cmp	r3, #6
 8002096:	d00a      	beq.n	80020ae <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002098:	4b26      	ldr	r3, [pc, #152]	; (8002134 <HAL_PWREx_ConfigSupply+0xb0>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e040      	b.n	800212c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e03e      	b.n	800212c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_PWREx_ConfigSupply+0xb0>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80020b6:	491f      	ldr	r1, [pc, #124]	; (8002134 <HAL_PWREx_ConfigSupply+0xb0>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020be:	f7ff fc6b 	bl	8001998 <HAL_GetTick>
 80020c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020c4:	e009      	b.n	80020da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020c6:	f7ff fc67 	bl	8001998 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020d4:	d901      	bls.n	80020da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e028      	b.n	800212c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <HAL_PWREx_ConfigSupply+0xb0>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e6:	d1ee      	bne.n	80020c6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b1e      	cmp	r3, #30
 80020ec:	d008      	beq.n	8002100 <HAL_PWREx_ConfigSupply+0x7c>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b2e      	cmp	r3, #46	; 0x2e
 80020f2:	d005      	beq.n	8002100 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b1d      	cmp	r3, #29
 80020f8:	d002      	beq.n	8002100 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b2d      	cmp	r3, #45	; 0x2d
 80020fe:	d114      	bne.n	800212a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002100:	f7ff fc4a 	bl	8001998 <HAL_GetTick>
 8002104:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002106:	e009      	b.n	800211c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002108:	f7ff fc46 	bl	8001998 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002116:	d901      	bls.n	800211c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e007      	b.n	800212c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_PWREx_ConfigSupply+0xb0>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d1ee      	bne.n	8002108 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	58024800 	.word	0x58024800

08002138 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08c      	sub	sp, #48	; 0x30
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	f000 bc48 	b.w	80029dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8088 	beq.w	800226a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215a:	4b99      	ldr	r3, [pc, #612]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002164:	4b96      	ldr	r3, [pc, #600]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800216a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216c:	2b10      	cmp	r3, #16
 800216e:	d007      	beq.n	8002180 <HAL_RCC_OscConfig+0x48>
 8002170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002172:	2b18      	cmp	r3, #24
 8002174:	d111      	bne.n	800219a <HAL_RCC_OscConfig+0x62>
 8002176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d10c      	bne.n	800219a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002180:	4b8f      	ldr	r3, [pc, #572]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d06d      	beq.n	8002268 <HAL_RCC_OscConfig+0x130>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d169      	bne.n	8002268 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	f000 bc21 	b.w	80029dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a2:	d106      	bne.n	80021b2 <HAL_RCC_OscConfig+0x7a>
 80021a4:	4b86      	ldr	r3, [pc, #536]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a85      	ldr	r2, [pc, #532]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80021aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	e02e      	b.n	8002210 <HAL_RCC_OscConfig+0xd8>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x9c>
 80021ba:	4b81      	ldr	r3, [pc, #516]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a80      	ldr	r2, [pc, #512]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80021c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b7e      	ldr	r3, [pc, #504]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a7d      	ldr	r2, [pc, #500]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80021cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e01d      	b.n	8002210 <HAL_RCC_OscConfig+0xd8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0xc0>
 80021de:	4b78      	ldr	r3, [pc, #480]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a77      	ldr	r2, [pc, #476]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80021e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	4b75      	ldr	r3, [pc, #468]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a74      	ldr	r2, [pc, #464]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80021f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	e00b      	b.n	8002210 <HAL_RCC_OscConfig+0xd8>
 80021f8:	4b71      	ldr	r3, [pc, #452]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a70      	ldr	r2, [pc, #448]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80021fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b6e      	ldr	r3, [pc, #440]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a6d      	ldr	r2, [pc, #436]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 800220a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800220e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d013      	beq.n	8002240 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7ff fbbe 	bl	8001998 <HAL_GetTick>
 800221c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7ff fbba 	bl	8001998 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e3d4      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002232:	4b63      	ldr	r3, [pc, #396]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0f0      	beq.n	8002220 <HAL_RCC_OscConfig+0xe8>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002240:	f7ff fbaa 	bl	8001998 <HAL_GetTick>
 8002244:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002248:	f7ff fba6 	bl	8001998 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b64      	cmp	r3, #100	; 0x64
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e3c0      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800225a:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x110>
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80ca 	beq.w	800240c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002278:	4b51      	ldr	r3, [pc, #324]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002280:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002282:	4b4f      	ldr	r3, [pc, #316]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d007      	beq.n	800229e <HAL_RCC_OscConfig+0x166>
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	2b18      	cmp	r3, #24
 8002292:	d156      	bne.n	8002342 <HAL_RCC_OscConfig+0x20a>
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0303 	and.w	r3, r3, #3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d151      	bne.n	8002342 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800229e:	4b48      	ldr	r3, [pc, #288]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_RCC_OscConfig+0x17e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e392      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022b6:	4b42      	ldr	r3, [pc, #264]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 0219 	bic.w	r2, r3, #25
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	493f      	ldr	r1, [pc, #252]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7ff fb66 	bl	8001998 <HAL_GetTick>
 80022cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d0:	f7ff fb62 	bl	8001998 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e37c      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022e2:	4b37      	ldr	r3, [pc, #220]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ee:	f7ff fb83 	bl	80019f8 <HAL_GetREVID>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d817      	bhi.n	800232c <HAL_RCC_OscConfig+0x1f4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b40      	cmp	r3, #64	; 0x40
 8002302:	d108      	bne.n	8002316 <HAL_RCC_OscConfig+0x1de>
 8002304:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800230c:	4a2c      	ldr	r2, [pc, #176]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 800230e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002312:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002314:	e07a      	b.n	800240c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002316:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	031b      	lsls	r3, r3, #12
 8002324:	4926      	ldr	r1, [pc, #152]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800232a:	e06f      	b.n	800240c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	4921      	ldr	r1, [pc, #132]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002340:	e064      	b.n	800240c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d047      	beq.n	80023da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f023 0219 	bic.w	r2, r3, #25
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	491a      	ldr	r1, [pc, #104]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 8002358:	4313      	orrs	r3, r2
 800235a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7ff fb1c 	bl	8001998 <HAL_GetTick>
 8002360:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002364:	f7ff fb18 	bl	8001998 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e332      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002376:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002382:	f7ff fb39 	bl	80019f8 <HAL_GetREVID>
 8002386:	4603      	mov	r3, r0
 8002388:	f241 0203 	movw	r2, #4099	; 0x1003
 800238c:	4293      	cmp	r3, r2
 800238e:	d819      	bhi.n	80023c4 <HAL_RCC_OscConfig+0x28c>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b40      	cmp	r3, #64	; 0x40
 8002396:	d108      	bne.n	80023aa <HAL_RCC_OscConfig+0x272>
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80023a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a6:	6053      	str	r3, [r2, #4]
 80023a8:	e030      	b.n	800240c <HAL_RCC_OscConfig+0x2d4>
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	031b      	lsls	r3, r3, #12
 80023b8:	4901      	ldr	r1, [pc, #4]	; (80023c0 <HAL_RCC_OscConfig+0x288>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
 80023be:	e025      	b.n	800240c <HAL_RCC_OscConfig+0x2d4>
 80023c0:	58024400 	.word	0x58024400
 80023c4:	4b9a      	ldr	r3, [pc, #616]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	061b      	lsls	r3, r3, #24
 80023d2:	4997      	ldr	r1, [pc, #604]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
 80023d8:	e018      	b.n	800240c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023da:	4b95      	ldr	r3, [pc, #596]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a94      	ldr	r2, [pc, #592]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e6:	f7ff fad7 	bl	8001998 <HAL_GetTick>
 80023ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ee:	f7ff fad3 	bl	8001998 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e2ed      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002400:	4b8b      	ldr	r3, [pc, #556]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f0      	bne.n	80023ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a9 	beq.w	800256c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800241a:	4b85      	ldr	r3, [pc, #532]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002422:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002424:	4b82      	ldr	r3, [pc, #520]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002428:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2b08      	cmp	r3, #8
 800242e:	d007      	beq.n	8002440 <HAL_RCC_OscConfig+0x308>
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2b18      	cmp	r3, #24
 8002434:	d13a      	bne.n	80024ac <HAL_RCC_OscConfig+0x374>
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d135      	bne.n	80024ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002440:	4b7b      	ldr	r3, [pc, #492]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_OscConfig+0x320>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b80      	cmp	r3, #128	; 0x80
 8002452:	d001      	beq.n	8002458 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e2c1      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002458:	f7ff face 	bl	80019f8 <HAL_GetREVID>
 800245c:	4603      	mov	r3, r0
 800245e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002462:	4293      	cmp	r3, r2
 8002464:	d817      	bhi.n	8002496 <HAL_RCC_OscConfig+0x35e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	2b20      	cmp	r3, #32
 800246c:	d108      	bne.n	8002480 <HAL_RCC_OscConfig+0x348>
 800246e:	4b70      	ldr	r3, [pc, #448]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002476:	4a6e      	ldr	r2, [pc, #440]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002478:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800247c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800247e:	e075      	b.n	800256c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002480:	4b6b      	ldr	r3, [pc, #428]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	069b      	lsls	r3, r3, #26
 800248e:	4968      	ldr	r1, [pc, #416]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002494:	e06a      	b.n	800256c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002496:	4b66      	ldr	r3, [pc, #408]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	061b      	lsls	r3, r3, #24
 80024a4:	4962      	ldr	r1, [pc, #392]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024aa:	e05f      	b.n	800256c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d042      	beq.n	800253a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024b4:	4b5e      	ldr	r3, [pc, #376]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a5d      	ldr	r2, [pc, #372]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80024ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7ff fa6a 	bl	8001998 <HAL_GetTick>
 80024c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024c8:	f7ff fa66 	bl	8001998 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e280      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024da:	4b55      	ldr	r3, [pc, #340]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024e6:	f7ff fa87 	bl	80019f8 <HAL_GetREVID>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d817      	bhi.n	8002524 <HAL_RCC_OscConfig+0x3ec>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d108      	bne.n	800250e <HAL_RCC_OscConfig+0x3d6>
 80024fc:	4b4c      	ldr	r3, [pc, #304]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002504:	4a4a      	ldr	r2, [pc, #296]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002506:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800250a:	6053      	str	r3, [r2, #4]
 800250c:	e02e      	b.n	800256c <HAL_RCC_OscConfig+0x434>
 800250e:	4b48      	ldr	r3, [pc, #288]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	069b      	lsls	r3, r3, #26
 800251c:	4944      	ldr	r1, [pc, #272]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
 8002522:	e023      	b.n	800256c <HAL_RCC_OscConfig+0x434>
 8002524:	4b42      	ldr	r3, [pc, #264]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	493f      	ldr	r1, [pc, #252]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002534:	4313      	orrs	r3, r2
 8002536:	60cb      	str	r3, [r1, #12]
 8002538:	e018      	b.n	800256c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a3c      	ldr	r2, [pc, #240]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7ff fa27 	bl	8001998 <HAL_GetTick>
 800254a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800254e:	f7ff fa23 	bl	8001998 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e23d      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002560:	4b33      	ldr	r3, [pc, #204]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d036      	beq.n	80025e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d019      	beq.n	80025b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002580:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002584:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258c:	f7ff fa04 	bl	8001998 <HAL_GetTick>
 8002590:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002594:	f7ff fa00 	bl	8001998 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e21a      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80025a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x45c>
 80025b2:	e018      	b.n	80025e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b4:	4b1e      	ldr	r3, [pc, #120]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80025b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b8:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f7ff f9ea 	bl	8001998 <HAL_GetTick>
 80025c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c8:	f7ff f9e6 	bl	8001998 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e200      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d039      	beq.n	8002666 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01c      	beq.n	8002634 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a0c      	ldr	r2, [pc, #48]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002604:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002606:	f7ff f9c7 	bl	8001998 <HAL_GetTick>
 800260a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800260e:	f7ff f9c3 	bl	8001998 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e1dd      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002620:	4b03      	ldr	r3, [pc, #12]	; (8002630 <HAL_RCC_OscConfig+0x4f8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x4d6>
 800262c:	e01b      	b.n	8002666 <HAL_RCC_OscConfig+0x52e>
 800262e:	bf00      	nop
 8002630:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002634:	4b9b      	ldr	r3, [pc, #620]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a9a      	ldr	r2, [pc, #616]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 800263a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800263e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002640:	f7ff f9aa 	bl	8001998 <HAL_GetTick>
 8002644:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002648:	f7ff f9a6 	bl	8001998 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e1c0      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800265a:	4b92      	ldr	r3, [pc, #584]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8081 	beq.w	8002776 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002674:	4b8c      	ldr	r3, [pc, #560]	; (80028a8 <HAL_RCC_OscConfig+0x770>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a8b      	ldr	r2, [pc, #556]	; (80028a8 <HAL_RCC_OscConfig+0x770>)
 800267a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002680:	f7ff f98a 	bl	8001998 <HAL_GetTick>
 8002684:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002688:	f7ff f986 	bl	8001998 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e1a0      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800269a:	4b83      	ldr	r3, [pc, #524]	; (80028a8 <HAL_RCC_OscConfig+0x770>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d106      	bne.n	80026bc <HAL_RCC_OscConfig+0x584>
 80026ae:	4b7d      	ldr	r3, [pc, #500]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b2:	4a7c      	ldr	r2, [pc, #496]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6713      	str	r3, [r2, #112]	; 0x70
 80026ba:	e02d      	b.n	8002718 <HAL_RCC_OscConfig+0x5e0>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10c      	bne.n	80026de <HAL_RCC_OscConfig+0x5a6>
 80026c4:	4b77      	ldr	r3, [pc, #476]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	4a76      	ldr	r2, [pc, #472]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	6713      	str	r3, [r2, #112]	; 0x70
 80026d0:	4b74      	ldr	r3, [pc, #464]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a73      	ldr	r2, [pc, #460]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 80026d6:	f023 0304 	bic.w	r3, r3, #4
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
 80026dc:	e01c      	b.n	8002718 <HAL_RCC_OscConfig+0x5e0>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x5c8>
 80026e6:	4b6f      	ldr	r3, [pc, #444]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a6e      	ldr	r2, [pc, #440]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
 80026f2:	4b6c      	ldr	r3, [pc, #432]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a6b      	ldr	r2, [pc, #428]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0x5e0>
 8002700:	4b68      	ldr	r3, [pc, #416]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a67      	ldr	r2, [pc, #412]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
 800270c:	4b65      	ldr	r3, [pc, #404]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a64      	ldr	r2, [pc, #400]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002712:	f023 0304 	bic.w	r3, r3, #4
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d015      	beq.n	800274c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7ff f93a 	bl	8001998 <HAL_GetTick>
 8002724:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002726:	e00a      	b.n	800273e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002728:	f7ff f936 	bl	8001998 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e14e      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800273e:	4b59      	ldr	r3, [pc, #356]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0ee      	beq.n	8002728 <HAL_RCC_OscConfig+0x5f0>
 800274a:	e014      	b.n	8002776 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7ff f924 	bl	8001998 <HAL_GetTick>
 8002750:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7ff f920 	bl	8001998 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e138      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800276a:	4b4e      	ldr	r3, [pc, #312]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1ee      	bne.n	8002754 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 812d 	beq.w	80029da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002780:	4b48      	ldr	r3, [pc, #288]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002788:	2b18      	cmp	r3, #24
 800278a:	f000 80bd 	beq.w	8002908 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	2b02      	cmp	r3, #2
 8002794:	f040 809e 	bne.w	80028d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002798:	4b42      	ldr	r3, [pc, #264]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a41      	ldr	r2, [pc, #260]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 800279e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7ff f8f8 	bl	8001998 <HAL_GetTick>
 80027a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7ff f8f4 	bl	8001998 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e10e      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027be:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ca:	4b36      	ldr	r3, [pc, #216]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 80027cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ce:	4b37      	ldr	r3, [pc, #220]	; (80028ac <HAL_RCC_OscConfig+0x774>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027da:	0112      	lsls	r2, r2, #4
 80027dc:	430a      	orrs	r2, r1
 80027de:	4931      	ldr	r1, [pc, #196]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	628b      	str	r3, [r1, #40]	; 0x28
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e8:	3b01      	subs	r3, #1
 80027ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f2:	3b01      	subs	r3, #1
 80027f4:	025b      	lsls	r3, r3, #9
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fe:	3b01      	subs	r3, #1
 8002800:	041b      	lsls	r3, r3, #16
 8002802:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280c:	3b01      	subs	r3, #1
 800280e:	061b      	lsls	r3, r3, #24
 8002810:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002814:	4923      	ldr	r1, [pc, #140]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002816:	4313      	orrs	r3, r2
 8002818:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800281a:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	4a21      	ldr	r2, [pc, #132]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002826:	4b1f      	ldr	r3, [pc, #124]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800282a:	4b21      	ldr	r3, [pc, #132]	; (80028b0 <HAL_RCC_OscConfig+0x778>)
 800282c:	4013      	ands	r3, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002832:	00d2      	lsls	r2, r2, #3
 8002834:	491b      	ldr	r1, [pc, #108]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002836:	4313      	orrs	r3, r2
 8002838:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	f023 020c 	bic.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4917      	ldr	r1, [pc, #92]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002848:	4313      	orrs	r3, r2
 800284a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800284c:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	f023 0202 	bic.w	r2, r3, #2
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	4912      	ldr	r1, [pc, #72]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 800285a:	4313      	orrs	r3, r2
 800285c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	4a10      	ldr	r2, [pc, #64]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	4a0d      	ldr	r2, [pc, #52]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002874:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 800287c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002880:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288e:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <HAL_RCC_OscConfig+0x76c>)
 8002894:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7ff f87d 	bl	8001998 <HAL_GetTick>
 800289e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028a0:	e011      	b.n	80028c6 <HAL_RCC_OscConfig+0x78e>
 80028a2:	bf00      	nop
 80028a4:	58024400 	.word	0x58024400
 80028a8:	58024800 	.word	0x58024800
 80028ac:	fffffc0c 	.word	0xfffffc0c
 80028b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7ff f870 	bl	8001998 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e08a      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_OscConfig+0x8ac>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x77c>
 80028d2:	e082      	b.n	80029da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d4:	4b43      	ldr	r3, [pc, #268]	; (80029e4 <HAL_RCC_OscConfig+0x8ac>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a42      	ldr	r2, [pc, #264]	; (80029e4 <HAL_RCC_OscConfig+0x8ac>)
 80028da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7ff f85a 	bl	8001998 <HAL_GetTick>
 80028e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7ff f856 	bl	8001998 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e070      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028fa:	4b3a      	ldr	r3, [pc, #232]	; (80029e4 <HAL_RCC_OscConfig+0x8ac>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x7b0>
 8002906:	e068      	b.n	80029da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002908:	4b36      	ldr	r3, [pc, #216]	; (80029e4 <HAL_RCC_OscConfig+0x8ac>)
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800290e:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <HAL_RCC_OscConfig+0x8ac>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	2b01      	cmp	r3, #1
 800291a:	d031      	beq.n	8002980 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f003 0203 	and.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002926:	429a      	cmp	r2, r3
 8002928:	d12a      	bne.n	8002980 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d122      	bne.n	8002980 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d11a      	bne.n	8002980 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	0a5b      	lsrs	r3, r3, #9
 800294e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002956:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d111      	bne.n	8002980 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	0c1b      	lsrs	r3, r3, #16
 8002960:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d108      	bne.n	8002980 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	0e1b      	lsrs	r3, r3, #24
 8002972:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e02b      	b.n	80029dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002984:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <HAL_RCC_OscConfig+0x8ac>)
 8002986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002988:	08db      	lsrs	r3, r3, #3
 800298a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800298e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	429a      	cmp	r2, r3
 8002998:	d01f      	beq.n	80029da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_RCC_OscConfig+0x8ac>)
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	4a11      	ldr	r2, [pc, #68]	; (80029e4 <HAL_RCC_OscConfig+0x8ac>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029a6:	f7fe fff7 	bl	8001998 <HAL_GetTick>
 80029aa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80029ac:	bf00      	nop
 80029ae:	f7fe fff3 	bl	8001998 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d0f9      	beq.n	80029ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <HAL_RCC_OscConfig+0x8ac>)
 80029bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_RCC_OscConfig+0x8b0>)
 80029c0:	4013      	ands	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029c6:	00d2      	lsls	r2, r2, #3
 80029c8:	4906      	ldr	r1, [pc, #24]	; (80029e4 <HAL_RCC_OscConfig+0x8ac>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_OscConfig+0x8ac>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <HAL_RCC_OscConfig+0x8ac>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3730      	adds	r7, #48	; 0x30
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	58024400 	.word	0x58024400
 80029e8:	ffff0007 	.word	0xffff0007

080029ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e19c      	b.n	8002d3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b8a      	ldr	r3, [pc, #552]	; (8002c2c <HAL_RCC_ClockConfig+0x240>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d910      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b87      	ldr	r3, [pc, #540]	; (8002c2c <HAL_RCC_ClockConfig+0x240>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 020f 	bic.w	r2, r3, #15
 8002a16:	4985      	ldr	r1, [pc, #532]	; (8002c2c <HAL_RCC_ClockConfig+0x240>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b83      	ldr	r3, [pc, #524]	; (8002c2c <HAL_RCC_ClockConfig+0x240>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e184      	b.n	8002d3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d010      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	4b7b      	ldr	r3, [pc, #492]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d908      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a4c:	4b78      	ldr	r3, [pc, #480]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	4975      	ldr	r1, [pc, #468]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d010      	beq.n	8002a8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	4b70      	ldr	r3, [pc, #448]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d908      	bls.n	8002a8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a7a:	4b6d      	ldr	r3, [pc, #436]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	496a      	ldr	r1, [pc, #424]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d010      	beq.n	8002aba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699a      	ldr	r2, [r3, #24]
 8002a9c:	4b64      	ldr	r3, [pc, #400]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d908      	bls.n	8002aba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002aa8:	4b61      	ldr	r3, [pc, #388]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002aaa:	69db      	ldr	r3, [r3, #28]
 8002aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	495e      	ldr	r1, [pc, #376]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d010      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	4b59      	ldr	r3, [pc, #356]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d908      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ad6:	4b56      	ldr	r3, [pc, #344]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4953      	ldr	r1, [pc, #332]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d010      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	4b4d      	ldr	r3, [pc, #308]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d908      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b04:	4b4a      	ldr	r3, [pc, #296]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f023 020f 	bic.w	r2, r3, #15
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4947      	ldr	r1, [pc, #284]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d055      	beq.n	8002bce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b22:	4b43      	ldr	r3, [pc, #268]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	4940      	ldr	r1, [pc, #256]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b3c:	4b3c      	ldr	r3, [pc, #240]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d121      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0f6      	b.n	8002d3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b54:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d115      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0ea      	b.n	8002d3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d107      	bne.n	8002b7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b6c:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0de      	b.n	8002d3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b7c:	4b2c      	ldr	r3, [pc, #176]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e0d6      	b.n	8002d3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b8c:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f023 0207 	bic.w	r2, r3, #7
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	4925      	ldr	r1, [pc, #148]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9e:	f7fe fefb 	bl	8001998 <HAL_GetTick>
 8002ba2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba4:	e00a      	b.n	8002bbc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ba6:	f7fe fef7 	bl	8001998 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e0be      	b.n	8002d3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbc:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d1eb      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d010      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	4b14      	ldr	r3, [pc, #80]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d208      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bea:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f023 020f 	bic.w	r2, r3, #15
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	490e      	ldr	r1, [pc, #56]	; (8002c30 <HAL_RCC_ClockConfig+0x244>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCC_ClockConfig+0x240>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d214      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0a:	4b08      	ldr	r3, [pc, #32]	; (8002c2c <HAL_RCC_ClockConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f023 020f 	bic.w	r2, r3, #15
 8002c12:	4906      	ldr	r1, [pc, #24]	; (8002c2c <HAL_RCC_ClockConfig+0x240>)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <HAL_RCC_ClockConfig+0x240>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e086      	b.n	8002d3a <HAL_RCC_ClockConfig+0x34e>
 8002c2c:	52002000 	.word	0x52002000
 8002c30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d010      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691a      	ldr	r2, [r3, #16]
 8002c44:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <HAL_RCC_ClockConfig+0x358>)
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d208      	bcs.n	8002c62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c50:	4b3c      	ldr	r3, [pc, #240]	; (8002d44 <HAL_RCC_ClockConfig+0x358>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	4939      	ldr	r1, [pc, #228]	; (8002d44 <HAL_RCC_ClockConfig+0x358>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d010      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695a      	ldr	r2, [r3, #20]
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <HAL_RCC_ClockConfig+0x358>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d208      	bcs.n	8002c90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c7e:	4b31      	ldr	r3, [pc, #196]	; (8002d44 <HAL_RCC_ClockConfig+0x358>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	492e      	ldr	r1, [pc, #184]	; (8002d44 <HAL_RCC_ClockConfig+0x358>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d010      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699a      	ldr	r2, [r3, #24]
 8002ca0:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <HAL_RCC_ClockConfig+0x358>)
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d208      	bcs.n	8002cbe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cac:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <HAL_RCC_ClockConfig+0x358>)
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	4922      	ldr	r1, [pc, #136]	; (8002d44 <HAL_RCC_ClockConfig+0x358>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d010      	beq.n	8002cec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69da      	ldr	r2, [r3, #28]
 8002cce:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <HAL_RCC_ClockConfig+0x358>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d208      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <HAL_RCC_ClockConfig+0x358>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4917      	ldr	r1, [pc, #92]	; (8002d44 <HAL_RCC_ClockConfig+0x358>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cec:	f000 f834 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_RCC_ClockConfig+0x358>)
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	f003 030f 	and.w	r3, r3, #15
 8002cfc:	4912      	ldr	r1, [pc, #72]	; (8002d48 <HAL_RCC_ClockConfig+0x35c>)
 8002cfe:	5ccb      	ldrb	r3, [r1, r3]
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
 8002d08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <HAL_RCC_ClockConfig+0x358>)
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	4a0d      	ldr	r2, [pc, #52]	; (8002d48 <HAL_RCC_ClockConfig+0x35c>)
 8002d14:	5cd3      	ldrb	r3, [r2, r3]
 8002d16:	f003 031f 	and.w	r3, r3, #31
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d20:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <HAL_RCC_ClockConfig+0x360>)
 8002d22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d24:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <HAL_RCC_ClockConfig+0x364>)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_RCC_ClockConfig+0x368>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fde8 	bl	8001904 <HAL_InitTick>
 8002d34:	4603      	mov	r3, r0
 8002d36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	58024400 	.word	0x58024400
 8002d48:	08008114 	.word	0x08008114
 8002d4c:	24000004 	.word	0x24000004
 8002d50:	24000000 	.word	0x24000000
 8002d54:	24000008 	.word	0x24000008

08002d58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d5e:	4bb3      	ldr	r3, [pc, #716]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d66:	2b18      	cmp	r3, #24
 8002d68:	f200 8155 	bhi.w	8003016 <HAL_RCC_GetSysClockFreq+0x2be>
 8002d6c:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002dd9 	.word	0x08002dd9
 8002d78:	08003017 	.word	0x08003017
 8002d7c:	08003017 	.word	0x08003017
 8002d80:	08003017 	.word	0x08003017
 8002d84:	08003017 	.word	0x08003017
 8002d88:	08003017 	.word	0x08003017
 8002d8c:	08003017 	.word	0x08003017
 8002d90:	08003017 	.word	0x08003017
 8002d94:	08002dff 	.word	0x08002dff
 8002d98:	08003017 	.word	0x08003017
 8002d9c:	08003017 	.word	0x08003017
 8002da0:	08003017 	.word	0x08003017
 8002da4:	08003017 	.word	0x08003017
 8002da8:	08003017 	.word	0x08003017
 8002dac:	08003017 	.word	0x08003017
 8002db0:	08003017 	.word	0x08003017
 8002db4:	08002e05 	.word	0x08002e05
 8002db8:	08003017 	.word	0x08003017
 8002dbc:	08003017 	.word	0x08003017
 8002dc0:	08003017 	.word	0x08003017
 8002dc4:	08003017 	.word	0x08003017
 8002dc8:	08003017 	.word	0x08003017
 8002dcc:	08003017 	.word	0x08003017
 8002dd0:	08003017 	.word	0x08003017
 8002dd4:	08002e0b 	.word	0x08002e0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dd8:	4b94      	ldr	r3, [pc, #592]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d009      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002de4:	4b91      	ldr	r3, [pc, #580]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	08db      	lsrs	r3, r3, #3
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	4a90      	ldr	r2, [pc, #576]	; (8003030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
 8002df4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002df6:	e111      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002df8:	4b8d      	ldr	r3, [pc, #564]	; (8003030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dfa:	61bb      	str	r3, [r7, #24]
      break;
 8002dfc:	e10e      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002dfe:	4b8d      	ldr	r3, [pc, #564]	; (8003034 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e00:	61bb      	str	r3, [r7, #24]
      break;
 8002e02:	e10b      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002e04:	4b8c      	ldr	r3, [pc, #560]	; (8003038 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e06:	61bb      	str	r3, [r7, #24]
      break;
 8002e08:	e108      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e0a:	4b88      	ldr	r3, [pc, #544]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002e14:	4b85      	ldr	r3, [pc, #532]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	091b      	lsrs	r3, r3, #4
 8002e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e20:	4b82      	ldr	r3, [pc, #520]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e2a:	4b80      	ldr	r3, [pc, #512]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2e:	08db      	lsrs	r3, r3, #3
 8002e30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	fb02 f303 	mul.w	r3, r2, r3
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80e1 	beq.w	8003010 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	f000 8083 	beq.w	8002f5c <HAL_RCC_GetSysClockFreq+0x204>
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	f200 80a1 	bhi.w	8002fa0 <HAL_RCC_GetSysClockFreq+0x248>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x114>
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d056      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e6a:	e099      	b.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e6c:	4b6f      	ldr	r3, [pc, #444]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d02d      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e78:	4b6c      	ldr	r3, [pc, #432]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	08db      	lsrs	r3, r3, #3
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	4a6b      	ldr	r2, [pc, #428]	; (8003030 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e84:	fa22 f303 	lsr.w	r3, r2, r3
 8002e88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	ee07 3a90 	vmov	s15, r3
 8002e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	ee07 3a90 	vmov	s15, r3
 8002e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ea2:	4b62      	ldr	r3, [pc, #392]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eaa:	ee07 3a90 	vmov	s15, r3
 8002eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eb6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800303c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ece:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002ed2:	e087      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	ee07 3a90 	vmov	s15, r3
 8002eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ede:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003040 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ee6:	4b51      	ldr	r3, [pc, #324]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ef6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002efa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800303c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f16:	e065      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	ee07 3a90 	vmov	s15, r3
 8002f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f22:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003044 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f2a:	4b40      	ldr	r3, [pc, #256]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f3e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800303c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f5a:	e043      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f66:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003048 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f6e:	4b2f      	ldr	r3, [pc, #188]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f82:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800303c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f9e:	e021      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002faa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003044 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fb2:	4b1e      	ldr	r3, [pc, #120]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fc6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800303c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fe2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002fe4:	4b11      	ldr	r3, [pc, #68]	; (800302c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	0a5b      	lsrs	r3, r3, #9
 8002fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fee:	3301      	adds	r3, #1
 8002ff0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	ee07 3a90 	vmov	s15, r3
 8002ff8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ffc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003008:	ee17 3a90 	vmov	r3, s15
 800300c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800300e:	e005      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	61bb      	str	r3, [r7, #24]
      break;
 8003014:	e002      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003016:	4b07      	ldr	r3, [pc, #28]	; (8003034 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003018:	61bb      	str	r3, [r7, #24]
      break;
 800301a:	bf00      	nop
  }

  return sysclockfreq;
 800301c:	69bb      	ldr	r3, [r7, #24]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3724      	adds	r7, #36	; 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	58024400 	.word	0x58024400
 8003030:	03d09000 	.word	0x03d09000
 8003034:	003d0900 	.word	0x003d0900
 8003038:	017d7840 	.word	0x017d7840
 800303c:	46000000 	.word	0x46000000
 8003040:	4c742400 	.word	0x4c742400
 8003044:	4a742400 	.word	0x4a742400
 8003048:	4bbebc20 	.word	0x4bbebc20

0800304c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003052:	f7ff fe81 	bl	8002d58 <HAL_RCC_GetSysClockFreq>
 8003056:	4602      	mov	r2, r0
 8003058:	4b10      	ldr	r3, [pc, #64]	; (800309c <HAL_RCC_GetHCLKFreq+0x50>)
 800305a:	699b      	ldr	r3, [r3, #24]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	490f      	ldr	r1, [pc, #60]	; (80030a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003064:	5ccb      	ldrb	r3, [r1, r3]
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	fa22 f303 	lsr.w	r3, r2, r3
 800306e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003070:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_RCC_GetHCLKFreq+0x50>)
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	4a09      	ldr	r2, [pc, #36]	; (80030a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800307a:	5cd3      	ldrb	r3, [r2, r3]
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	fa22 f303 	lsr.w	r3, r2, r3
 8003086:	4a07      	ldr	r2, [pc, #28]	; (80030a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003088:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800308a:	4a07      	ldr	r2, [pc, #28]	; (80030a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	58024400 	.word	0x58024400
 80030a0:	08008114 	.word	0x08008114
 80030a4:	24000004 	.word	0x24000004
 80030a8:	24000000 	.word	0x24000000

080030ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80030b0:	f7ff ffcc 	bl	800304c <HAL_RCC_GetHCLKFreq>
 80030b4:	4602      	mov	r2, r0
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	4904      	ldr	r1, [pc, #16]	; (80030d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	58024400 	.word	0x58024400
 80030d4:	08008114 	.word	0x08008114

080030d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80030dc:	f7ff ffb6 	bl	800304c <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4904      	ldr	r1, [pc, #16]	; (8003100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	58024400 	.word	0x58024400
 8003100:	08008114 	.word	0x08008114

08003104 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003108:	b0ca      	sub	sp, #296	; 0x128
 800310a:	af00      	add	r7, sp, #0
 800310c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003110:	2300      	movs	r3, #0
 8003112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003116:	2300      	movs	r3, #0
 8003118:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800311c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003124:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003128:	2500      	movs	r5, #0
 800312a:	ea54 0305 	orrs.w	r3, r4, r5
 800312e:	d049      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003136:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800313a:	d02f      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800313c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003140:	d828      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003146:	d01a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003148:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800314c:	d822      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003156:	d007      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003158:	e01c      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800315a:	4bb8      	ldr	r3, [pc, #736]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	4ab7      	ldr	r2, [pc, #732]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003164:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003166:	e01a      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800316c:	3308      	adds	r3, #8
 800316e:	2102      	movs	r1, #2
 8003170:	4618      	mov	r0, r3
 8003172:	f001 fc8f 	bl	8004a94 <RCCEx_PLL2_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800317c:	e00f      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800317e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003182:	3328      	adds	r3, #40	; 0x28
 8003184:	2102      	movs	r1, #2
 8003186:	4618      	mov	r0, r3
 8003188:	f001 fd36 	bl	8004bf8 <RCCEx_PLL3_Config>
 800318c:	4603      	mov	r3, r0
 800318e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003192:	e004      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800319a:	e000      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800319c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800319e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031a6:	4ba5      	ldr	r3, [pc, #660]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80031ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b4:	4aa1      	ldr	r2, [pc, #644]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031b6:	430b      	orrs	r3, r1
 80031b8:	6513      	str	r3, [r2, #80]	; 0x50
 80031ba:	e003      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80031d0:	f04f 0900 	mov.w	r9, #0
 80031d4:	ea58 0309 	orrs.w	r3, r8, r9
 80031d8:	d047      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80031da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d82a      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80031e4:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ea:	bf00      	nop
 80031ec:	08003201 	.word	0x08003201
 80031f0:	0800320f 	.word	0x0800320f
 80031f4:	08003225 	.word	0x08003225
 80031f8:	08003243 	.word	0x08003243
 80031fc:	08003243 	.word	0x08003243
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003200:	4b8e      	ldr	r3, [pc, #568]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003204:	4a8d      	ldr	r2, [pc, #564]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800320c:	e01a      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800320e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003212:	3308      	adds	r3, #8
 8003214:	2100      	movs	r1, #0
 8003216:	4618      	mov	r0, r3
 8003218:	f001 fc3c 	bl	8004a94 <RCCEx_PLL2_Config>
 800321c:	4603      	mov	r3, r0
 800321e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003222:	e00f      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003228:	3328      	adds	r3, #40	; 0x28
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f001 fce3 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003238:	e004      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003240:	e000      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003244:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800324c:	4b7b      	ldr	r3, [pc, #492]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800324e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003250:	f023 0107 	bic.w	r1, r3, #7
 8003254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	4a78      	ldr	r2, [pc, #480]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800325c:	430b      	orrs	r3, r1
 800325e:	6513      	str	r3, [r2, #80]	; 0x50
 8003260:	e003      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003262:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003266:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800326a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800326e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003272:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003276:	f04f 0b00 	mov.w	fp, #0
 800327a:	ea5a 030b 	orrs.w	r3, sl, fp
 800327e:	d04c      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800328a:	d030      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800328c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003290:	d829      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003292:	2bc0      	cmp	r3, #192	; 0xc0
 8003294:	d02d      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003296:	2bc0      	cmp	r3, #192	; 0xc0
 8003298:	d825      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800329a:	2b80      	cmp	r3, #128	; 0x80
 800329c:	d018      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800329e:	2b80      	cmp	r3, #128	; 0x80
 80032a0:	d821      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80032a6:	2b40      	cmp	r3, #64	; 0x40
 80032a8:	d007      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80032aa:	e01c      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ac:	4b63      	ldr	r3, [pc, #396]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	4a62      	ldr	r2, [pc, #392]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80032b8:	e01c      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032be:	3308      	adds	r3, #8
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 fbe6 	bl	8004a94 <RCCEx_PLL2_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80032ce:	e011      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032d4:	3328      	adds	r3, #40	; 0x28
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 fc8d 	bl	8004bf8 <RCCEx_PLL3_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80032e4:	e006      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032ec:	e002      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80032ee:	bf00      	nop
 80032f0:	e000      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80032f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80032fc:	4b4f      	ldr	r3, [pc, #316]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003300:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330a:	4a4c      	ldr	r2, [pc, #304]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800330c:	430b      	orrs	r3, r1
 800330e:	6513      	str	r3, [r2, #80]	; 0x50
 8003310:	e003      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003312:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003316:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800331a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003326:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800332a:	2300      	movs	r3, #0
 800332c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003330:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003334:	460b      	mov	r3, r1
 8003336:	4313      	orrs	r3, r2
 8003338:	d053      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800333a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003342:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003346:	d035      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003348:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800334c:	d82e      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800334e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003352:	d031      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003354:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003358:	d828      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800335a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800335e:	d01a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003364:	d822      	bhi.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800336a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800336e:	d007      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003370:	e01c      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003372:	4b32      	ldr	r3, [pc, #200]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003376:	4a31      	ldr	r2, [pc, #196]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800337e:	e01c      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003384:	3308      	adds	r3, #8
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f001 fb83 	bl	8004a94 <RCCEx_PLL2_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003394:	e011      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800339a:	3328      	adds	r3, #40	; 0x28
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f001 fc2a 	bl	8004bf8 <RCCEx_PLL3_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033aa:	e006      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033b2:	e002      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80033b4:	bf00      	nop
 80033b6:	e000      	b.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80033b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10b      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80033c2:	4b1e      	ldr	r3, [pc, #120]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80033ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033d2:	4a1a      	ldr	r2, [pc, #104]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6593      	str	r3, [r2, #88]	; 0x58
 80033d8:	e003      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80033ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80033f2:	2300      	movs	r3, #0
 80033f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80033f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80033fc:	460b      	mov	r3, r1
 80033fe:	4313      	orrs	r3, r2
 8003400:	d056      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003406:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800340a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800340e:	d038      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003410:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003414:	d831      	bhi.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003416:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800341a:	d034      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800341c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003420:	d82b      	bhi.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003422:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003426:	d01d      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800342c:	d825      	bhi.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d006      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003432:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003438:	e01f      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800343a:	bf00      	nop
 800343c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003440:	4ba2      	ldr	r3, [pc, #648]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	4aa1      	ldr	r2, [pc, #644]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800344c:	e01c      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800344e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003452:	3308      	adds	r3, #8
 8003454:	2100      	movs	r1, #0
 8003456:	4618      	mov	r0, r3
 8003458:	f001 fb1c 	bl	8004a94 <RCCEx_PLL2_Config>
 800345c:	4603      	mov	r3, r0
 800345e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003462:	e011      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003468:	3328      	adds	r3, #40	; 0x28
 800346a:	2100      	movs	r1, #0
 800346c:	4618      	mov	r0, r3
 800346e:	f001 fbc3 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003472:	4603      	mov	r3, r0
 8003474:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003478:	e006      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003480:	e002      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003482:	bf00      	nop
 8003484:	e000      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10b      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003490:	4b8e      	ldr	r3, [pc, #568]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800349c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034a0:	4a8a      	ldr	r2, [pc, #552]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034a2:	430b      	orrs	r3, r1
 80034a4:	6593      	str	r3, [r2, #88]	; 0x58
 80034a6:	e003      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80034b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80034bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80034c0:	2300      	movs	r3, #0
 80034c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80034c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80034ca:	460b      	mov	r3, r1
 80034cc:	4313      	orrs	r3, r2
 80034ce:	d03a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80034d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d6:	2b30      	cmp	r3, #48	; 0x30
 80034d8:	d01f      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80034da:	2b30      	cmp	r3, #48	; 0x30
 80034dc:	d819      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d00c      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d815      	bhi.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d019      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80034ea:	2b10      	cmp	r3, #16
 80034ec:	d111      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ee:	4b77      	ldr	r3, [pc, #476]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	4a76      	ldr	r2, [pc, #472]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80034fa:	e011      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003500:	3308      	adds	r3, #8
 8003502:	2102      	movs	r1, #2
 8003504:	4618      	mov	r0, r3
 8003506:	f001 fac5 	bl	8004a94 <RCCEx_PLL2_Config>
 800350a:	4603      	mov	r3, r0
 800350c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003510:	e006      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003518:	e002      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800351e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003520:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003528:	4b68      	ldr	r3, [pc, #416]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800352a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003536:	4a65      	ldr	r2, [pc, #404]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003538:	430b      	orrs	r3, r1
 800353a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800353c:	e003      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003542:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003552:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003556:	2300      	movs	r3, #0
 8003558:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800355c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003560:	460b      	mov	r3, r1
 8003562:	4313      	orrs	r3, r2
 8003564:	d051      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800356a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003570:	d035      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003576:	d82e      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003578:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800357c:	d031      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800357e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003582:	d828      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003588:	d01a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800358a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358e:	d822      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003598:	d007      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800359a:	e01c      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359c:	4b4b      	ldr	r3, [pc, #300]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	4a4a      	ldr	r2, [pc, #296]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035a8:	e01c      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ae:	3308      	adds	r3, #8
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 fa6e 	bl	8004a94 <RCCEx_PLL2_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035be:	e011      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c4:	3328      	adds	r3, #40	; 0x28
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 fb15 	bl	8004bf8 <RCCEx_PLL3_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035d4:	e006      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035dc:	e002      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80035de:	bf00      	nop
 80035e0:	e000      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80035e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035ec:	4b37      	ldr	r3, [pc, #220]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80035f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035fa:	4a34      	ldr	r2, [pc, #208]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6513      	str	r3, [r2, #80]	; 0x50
 8003600:	e003      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003602:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003606:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800360a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003616:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800361a:	2300      	movs	r3, #0
 800361c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003620:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003624:	460b      	mov	r3, r1
 8003626:	4313      	orrs	r3, r2
 8003628:	d056      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800362a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800362e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003634:	d033      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003636:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800363a:	d82c      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800363c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003640:	d02f      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003642:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003646:	d826      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003648:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800364c:	d02b      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800364e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003652:	d820      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003654:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003658:	d012      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800365a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800365e:	d81a      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003660:	2b00      	cmp	r3, #0
 8003662:	d022      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003668:	d115      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800366a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366e:	3308      	adds	r3, #8
 8003670:	2101      	movs	r1, #1
 8003672:	4618      	mov	r0, r3
 8003674:	f001 fa0e 	bl	8004a94 <RCCEx_PLL2_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800367e:	e015      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003684:	3328      	adds	r3, #40	; 0x28
 8003686:	2101      	movs	r1, #1
 8003688:	4618      	mov	r0, r3
 800368a:	f001 fab5 	bl	8004bf8 <RCCEx_PLL3_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003694:	e00a      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800369c:	e006      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800369e:	bf00      	nop
 80036a0:	e004      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80036a2:	bf00      	nop
 80036a4:	e002      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80036a6:	bf00      	nop
 80036a8:	e000      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80036aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10d      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80036bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036c2:	4a02      	ldr	r2, [pc, #8]	; (80036cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036c4:	430b      	orrs	r3, r1
 80036c6:	6513      	str	r3, [r2, #80]	; 0x50
 80036c8:	e006      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80036ca:	bf00      	nop
 80036cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80036e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	d055      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003704:	d033      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003706:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800370a:	d82c      	bhi.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800370c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003710:	d02f      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003716:	d826      	bhi.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003718:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800371c:	d02b      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800371e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003722:	d820      	bhi.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003724:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003728:	d012      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800372a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800372e:	d81a      	bhi.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d022      	beq.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003734:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003738:	d115      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373e:	3308      	adds	r3, #8
 8003740:	2101      	movs	r1, #1
 8003742:	4618      	mov	r0, r3
 8003744:	f001 f9a6 	bl	8004a94 <RCCEx_PLL2_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800374e:	e015      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003754:	3328      	adds	r3, #40	; 0x28
 8003756:	2101      	movs	r1, #1
 8003758:	4618      	mov	r0, r3
 800375a:	f001 fa4d 	bl	8004bf8 <RCCEx_PLL3_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003764:	e00a      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800376c:	e006      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800376e:	bf00      	nop
 8003770:	e004      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003772:	bf00      	nop
 8003774:	e002      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800377a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10b      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003784:	4ba3      	ldr	r3, [pc, #652]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800378c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003790:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003794:	4a9f      	ldr	r2, [pc, #636]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003796:	430b      	orrs	r3, r1
 8003798:	6593      	str	r3, [r2, #88]	; 0x58
 800379a:	e003      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80037b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037b4:	2300      	movs	r3, #0
 80037b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80037ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037be:	460b      	mov	r3, r1
 80037c0:	4313      	orrs	r3, r2
 80037c2:	d037      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037ce:	d00e      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80037d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d4:	d816      	bhi.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d018      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80037da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037de:	d111      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e0:	4b8c      	ldr	r3, [pc, #560]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	4a8b      	ldr	r2, [pc, #556]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037ec:	e00f      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f2:	3308      	adds	r3, #8
 80037f4:	2101      	movs	r1, #1
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 f94c 	bl	8004a94 <RCCEx_PLL2_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003802:	e004      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800380a:	e000      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800380c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003816:	4b7f      	ldr	r3, [pc, #508]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4a7b      	ldr	r2, [pc, #492]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003826:	430b      	orrs	r3, r1
 8003828:	6513      	str	r3, [r2, #80]	; 0x50
 800382a:	e003      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003830:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003840:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003844:	2300      	movs	r3, #0
 8003846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800384a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800384e:	460b      	mov	r3, r1
 8003850:	4313      	orrs	r3, r2
 8003852:	d039      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385a:	2b03      	cmp	r3, #3
 800385c:	d81c      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	080038a1 	.word	0x080038a1
 8003868:	08003875 	.word	0x08003875
 800386c:	08003883 	.word	0x08003883
 8003870:	080038a1 	.word	0x080038a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003874:	4b67      	ldr	r3, [pc, #412]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	4a66      	ldr	r2, [pc, #408]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800387a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003880:	e00f      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003886:	3308      	adds	r3, #8
 8003888:	2102      	movs	r1, #2
 800388a:	4618      	mov	r0, r3
 800388c:	f001 f902 	bl	8004a94 <RCCEx_PLL2_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003896:	e004      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800389e:	e000      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80038a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80038aa:	4b5a      	ldr	r3, [pc, #360]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	f023 0103 	bic.w	r1, r3, #3
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b8:	4a56      	ldr	r2, [pc, #344]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ba:	430b      	orrs	r3, r1
 80038bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038be:	e003      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80038d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038d8:	2300      	movs	r3, #0
 80038da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80038e2:	460b      	mov	r3, r1
 80038e4:	4313      	orrs	r3, r2
 80038e6:	f000 809f 	beq.w	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ea:	4b4b      	ldr	r3, [pc, #300]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a4a      	ldr	r2, [pc, #296]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038f6:	f7fe f84f 	bl	8001998 <HAL_GetTick>
 80038fa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038fe:	e00b      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003900:	f7fe f84a 	bl	8001998 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b64      	cmp	r3, #100	; 0x64
 800390e:	d903      	bls.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003916:	e005      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003918:	4b3f      	ldr	r3, [pc, #252]	; (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0ed      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003924:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003928:	2b00      	cmp	r3, #0
 800392a:	d179      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800392c:	4b39      	ldr	r3, [pc, #228]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800392e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003934:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003938:	4053      	eors	r3, r2
 800393a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393e:	2b00      	cmp	r3, #0
 8003940:	d015      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003942:	4b34      	ldr	r3, [pc, #208]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800394a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800394e:	4b31      	ldr	r3, [pc, #196]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	4a30      	ldr	r2, [pc, #192]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003958:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800395a:	4b2e      	ldr	r3, [pc, #184]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395e:	4a2d      	ldr	r2, [pc, #180]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003964:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003966:	4a2b      	ldr	r2, [pc, #172]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003968:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800396c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003972:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397a:	d118      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fe f80c 	bl	8001998 <HAL_GetTick>
 8003980:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003984:	e00d      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003986:	f7fe f807 	bl	8001998 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003990:	1ad2      	subs	r2, r2, r3
 8003992:	f241 3388 	movw	r3, #5000	; 0x1388
 8003996:	429a      	cmp	r2, r3
 8003998:	d903      	bls.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80039a0:	e005      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039a2:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0eb      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80039ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d129      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039c6:	d10e      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80039c8:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80039d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039d8:	091a      	lsrs	r2, r3, #4
 80039da:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80039dc:	4013      	ands	r3, r2
 80039de:	4a0d      	ldr	r2, [pc, #52]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039e0:	430b      	orrs	r3, r1
 80039e2:	6113      	str	r3, [r2, #16]
 80039e4:	e005      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80039f0:	6113      	str	r3, [r2, #16]
 80039f2:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039f4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80039f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a02:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a04:	430b      	orrs	r3, r1
 8003a06:	6713      	str	r3, [r2, #112]	; 0x70
 8003a08:	e00e      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003a12:	e009      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003a14:	58024400 	.word	0x58024400
 8003a18:	58024800 	.word	0x58024800
 8003a1c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f002 0301 	and.w	r3, r2, #1
 8003a34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a42:	460b      	mov	r3, r1
 8003a44:	4313      	orrs	r3, r2
 8003a46:	f000 8089 	beq.w	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a50:	2b28      	cmp	r3, #40	; 0x28
 8003a52:	d86b      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003b35 	.word	0x08003b35
 8003a60:	08003b2d 	.word	0x08003b2d
 8003a64:	08003b2d 	.word	0x08003b2d
 8003a68:	08003b2d 	.word	0x08003b2d
 8003a6c:	08003b2d 	.word	0x08003b2d
 8003a70:	08003b2d 	.word	0x08003b2d
 8003a74:	08003b2d 	.word	0x08003b2d
 8003a78:	08003b2d 	.word	0x08003b2d
 8003a7c:	08003b01 	.word	0x08003b01
 8003a80:	08003b2d 	.word	0x08003b2d
 8003a84:	08003b2d 	.word	0x08003b2d
 8003a88:	08003b2d 	.word	0x08003b2d
 8003a8c:	08003b2d 	.word	0x08003b2d
 8003a90:	08003b2d 	.word	0x08003b2d
 8003a94:	08003b2d 	.word	0x08003b2d
 8003a98:	08003b2d 	.word	0x08003b2d
 8003a9c:	08003b17 	.word	0x08003b17
 8003aa0:	08003b2d 	.word	0x08003b2d
 8003aa4:	08003b2d 	.word	0x08003b2d
 8003aa8:	08003b2d 	.word	0x08003b2d
 8003aac:	08003b2d 	.word	0x08003b2d
 8003ab0:	08003b2d 	.word	0x08003b2d
 8003ab4:	08003b2d 	.word	0x08003b2d
 8003ab8:	08003b2d 	.word	0x08003b2d
 8003abc:	08003b35 	.word	0x08003b35
 8003ac0:	08003b2d 	.word	0x08003b2d
 8003ac4:	08003b2d 	.word	0x08003b2d
 8003ac8:	08003b2d 	.word	0x08003b2d
 8003acc:	08003b2d 	.word	0x08003b2d
 8003ad0:	08003b2d 	.word	0x08003b2d
 8003ad4:	08003b2d 	.word	0x08003b2d
 8003ad8:	08003b2d 	.word	0x08003b2d
 8003adc:	08003b35 	.word	0x08003b35
 8003ae0:	08003b2d 	.word	0x08003b2d
 8003ae4:	08003b2d 	.word	0x08003b2d
 8003ae8:	08003b2d 	.word	0x08003b2d
 8003aec:	08003b2d 	.word	0x08003b2d
 8003af0:	08003b2d 	.word	0x08003b2d
 8003af4:	08003b2d 	.word	0x08003b2d
 8003af8:	08003b2d 	.word	0x08003b2d
 8003afc:	08003b35 	.word	0x08003b35
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b04:	3308      	adds	r3, #8
 8003b06:	2101      	movs	r1, #1
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 ffc3 	bl	8004a94 <RCCEx_PLL2_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b14:	e00f      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1a:	3328      	adds	r3, #40	; 0x28
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 f86a 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b2a:	e004      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b3e:	4bbf      	ldr	r3, [pc, #764]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b4c:	4abb      	ldr	r2, [pc, #748]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	6553      	str	r3, [r2, #84]	; 0x54
 8003b52:	e003      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f002 0302 	and.w	r3, r2, #2
 8003b68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003b76:	460b      	mov	r3, r1
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	d041      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b82:	2b05      	cmp	r3, #5
 8003b84:	d824      	bhi.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003b86:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8c:	08003bd9 	.word	0x08003bd9
 8003b90:	08003ba5 	.word	0x08003ba5
 8003b94:	08003bbb 	.word	0x08003bbb
 8003b98:	08003bd9 	.word	0x08003bd9
 8003b9c:	08003bd9 	.word	0x08003bd9
 8003ba0:	08003bd9 	.word	0x08003bd9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba8:	3308      	adds	r3, #8
 8003baa:	2101      	movs	r1, #1
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 ff71 	bl	8004a94 <RCCEx_PLL2_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003bb8:	e00f      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bbe:	3328      	adds	r3, #40	; 0x28
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 f818 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003bce:	e004      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bd6:	e000      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003be2:	4b96      	ldr	r3, [pc, #600]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	f023 0107 	bic.w	r1, r3, #7
 8003bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf0:	4a92      	ldr	r2, [pc, #584]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bf2:	430b      	orrs	r3, r1
 8003bf4:	6553      	str	r3, [r2, #84]	; 0x54
 8003bf6:	e003      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c08:	f002 0304 	and.w	r3, r2, #4
 8003c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	d044      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c28:	2b05      	cmp	r3, #5
 8003c2a:	d825      	bhi.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003c2c:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c81 	.word	0x08003c81
 8003c38:	08003c4d 	.word	0x08003c4d
 8003c3c:	08003c63 	.word	0x08003c63
 8003c40:	08003c81 	.word	0x08003c81
 8003c44:	08003c81 	.word	0x08003c81
 8003c48:	08003c81 	.word	0x08003c81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c50:	3308      	adds	r3, #8
 8003c52:	2101      	movs	r1, #1
 8003c54:	4618      	mov	r0, r3
 8003c56:	f000 ff1d 	bl	8004a94 <RCCEx_PLL2_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c60:	e00f      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c66:	3328      	adds	r3, #40	; 0x28
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 ffc4 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c76:	e004      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c7e:	e000      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003c80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10b      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c8a:	4b6c      	ldr	r3, [pc, #432]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8e:	f023 0107 	bic.w	r1, r3, #7
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9a:	4a68      	ldr	r2, [pc, #416]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ca6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f002 0320 	and.w	r3, r2, #32
 8003cb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cba:	2300      	movs	r3, #0
 8003cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	d055      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cd6:	d033      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cdc:	d82c      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce2:	d02f      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce8:	d826      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cee:	d02b      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003cf0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003cf4:	d820      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cfa:	d012      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d00:	d81a      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d022      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d0a:	d115      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d10:	3308      	adds	r3, #8
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f000 febd 	bl	8004a94 <RCCEx_PLL2_Config>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d20:	e015      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d26:	3328      	adds	r3, #40	; 0x28
 8003d28:	2102      	movs	r1, #2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 ff64 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003d30:	4603      	mov	r3, r0
 8003d32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d36:	e00a      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d3e:	e006      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d40:	bf00      	nop
 8003d42:	e004      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d44:	bf00      	nop
 8003d46:	e002      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d48:	bf00      	nop
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d56:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d66:	4a35      	ldr	r2, [pc, #212]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	6553      	str	r3, [r2, #84]	; 0x54
 8003d6c:	e003      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4313      	orrs	r3, r2
 8003d94:	d058      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003da2:	d033      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003da4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003da8:	d82c      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dae:	d02f      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db4:	d826      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003db6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dba:	d02b      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003dbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc0:	d820      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc6:	d012      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dcc:	d81a      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d022      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd6:	d115      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ddc:	3308      	adds	r3, #8
 8003dde:	2100      	movs	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fe57 	bl	8004a94 <RCCEx_PLL2_Config>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003dec:	e015      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df2:	3328      	adds	r3, #40	; 0x28
 8003df4:	2102      	movs	r1, #2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fefe 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e02:	e00a      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e0a:	e006      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003e0c:	bf00      	nop
 8003e0e:	e004      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003e10:	bf00      	nop
 8003e12:	e002      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003e14:	bf00      	nop
 8003e16:	e000      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10e      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e26:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e32:	4a02      	ldr	r2, [pc, #8]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6593      	str	r3, [r2, #88]	; 0x58
 8003e38:	e006      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003e3a:	bf00      	nop
 8003e3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003e54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e5e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003e62:	460b      	mov	r3, r1
 8003e64:	4313      	orrs	r3, r2
 8003e66:	d055      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e70:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e74:	d033      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003e76:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003e7a:	d82c      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e80:	d02f      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003e82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e86:	d826      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e88:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e8c:	d02b      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003e8e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003e92:	d820      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e98:	d012      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003e9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e9e:	d81a      	bhi.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d022      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ea8:	d115      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eae:	3308      	adds	r3, #8
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fdee 	bl	8004a94 <RCCEx_PLL2_Config>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ebe:	e015      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec4:	3328      	adds	r3, #40	; 0x28
 8003ec6:	2102      	movs	r1, #2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 fe95 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ed4:	e00a      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003edc:	e006      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ede:	bf00      	nop
 8003ee0:	e004      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ee2:	bf00      	nop
 8003ee4:	e002      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10b      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ef4:	4ba1      	ldr	r3, [pc, #644]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f04:	4a9d      	ldr	r2, [pc, #628]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f06:	430b      	orrs	r3, r1
 8003f08:	6593      	str	r3, [r2, #88]	; 0x58
 8003f0a:	e003      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f002 0308 	and.w	r3, r2, #8
 8003f20:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f2a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4313      	orrs	r3, r2
 8003f32:	d01e      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f46:	3328      	adds	r3, #40	; 0x28
 8003f48:	2102      	movs	r1, #2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fe54 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d002      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f5c:	4b87      	ldr	r3, [pc, #540]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f6c:	4a83      	ldr	r2, [pc, #524]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7a:	f002 0310 	and.w	r3, r2, #16
 8003f7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f88:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	d01e      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9e:	d10c      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa4:	3328      	adds	r3, #40	; 0x28
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fe25 	bl	8004bf8 <RCCEx_PLL3_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fba:	4b70      	ldr	r3, [pc, #448]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fca:	4a6c      	ldr	r2, [pc, #432]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fe6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003fea:	460b      	mov	r3, r1
 8003fec:	4313      	orrs	r3, r2
 8003fee:	d03e      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ffc:	d022      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003ffe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004002:	d81b      	bhi.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400c:	d00b      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800400e:	e015      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004014:	3308      	adds	r3, #8
 8004016:	2100      	movs	r1, #0
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fd3b 	bl	8004a94 <RCCEx_PLL2_Config>
 800401e:	4603      	mov	r3, r0
 8004020:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004024:	e00f      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402a:	3328      	adds	r3, #40	; 0x28
 800402c:	2102      	movs	r1, #2
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fde2 	bl	8004bf8 <RCCEx_PLL3_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800403a:	e004      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004042:	e000      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004046:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10b      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800404e:	4b4b      	ldr	r3, [pc, #300]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004052:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800405a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800405e:	4a47      	ldr	r2, [pc, #284]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004060:	430b      	orrs	r3, r1
 8004062:	6593      	str	r3, [r2, #88]	; 0x58
 8004064:	e003      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004066:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800406a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800407a:	67bb      	str	r3, [r7, #120]	; 0x78
 800407c:	2300      	movs	r3, #0
 800407e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004080:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004084:	460b      	mov	r3, r1
 8004086:	4313      	orrs	r3, r2
 8004088:	d03b      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004092:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004096:	d01f      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004098:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800409c:	d818      	bhi.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800409e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040a2:	d003      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80040a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040a8:	d007      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80040aa:	e011      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040ac:	4b33      	ldr	r3, [pc, #204]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	4a32      	ldr	r2, [pc, #200]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80040b8:	e00f      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040be:	3328      	adds	r3, #40	; 0x28
 80040c0:	2101      	movs	r1, #1
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fd98 	bl	8004bf8 <RCCEx_PLL3_Config>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80040ce:	e004      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040d6:	e000      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80040d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10b      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040e2:	4b26      	ldr	r3, [pc, #152]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	4a22      	ldr	r2, [pc, #136]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6553      	str	r3, [r2, #84]	; 0x54
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800410e:	673b      	str	r3, [r7, #112]	; 0x70
 8004110:	2300      	movs	r3, #0
 8004112:	677b      	str	r3, [r7, #116]	; 0x74
 8004114:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004118:	460b      	mov	r3, r1
 800411a:	4313      	orrs	r3, r2
 800411c:	d034      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800411e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412c:	d007      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800412e:	e011      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004130:	4b12      	ldr	r3, [pc, #72]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	4a11      	ldr	r2, [pc, #68]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800413a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800413c:	e00e      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800413e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004142:	3308      	adds	r3, #8
 8004144:	2102      	movs	r1, #2
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fca4 	bl	8004a94 <RCCEx_PLL2_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004152:	e003      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800415a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800415c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10d      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004168:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004172:	4a02      	ldr	r2, [pc, #8]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004174:	430b      	orrs	r3, r1
 8004176:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004178:	e006      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800417a:	bf00      	nop
 800417c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004180:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004184:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004194:	66bb      	str	r3, [r7, #104]	; 0x68
 8004196:	2300      	movs	r3, #0
 8004198:	66fb      	str	r3, [r7, #108]	; 0x6c
 800419a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800419e:	460b      	mov	r3, r1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	d00c      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a8:	3328      	adds	r3, #40	; 0x28
 80041aa:	2102      	movs	r1, #2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fd23 	bl	8004bf8 <RCCEx_PLL3_Config>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80041ca:	663b      	str	r3, [r7, #96]	; 0x60
 80041cc:	2300      	movs	r3, #0
 80041ce:	667b      	str	r3, [r7, #100]	; 0x64
 80041d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80041d4:	460b      	mov	r3, r1
 80041d6:	4313      	orrs	r3, r2
 80041d8:	d038      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041e6:	d018      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80041e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ec:	d811      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80041ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f2:	d014      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80041f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f8:	d80b      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d011      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80041fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004202:	d106      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004204:	4bc3      	ldr	r3, [pc, #780]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	4ac2      	ldr	r2, [pc, #776]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800420a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800420e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004210:	e008      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004218:	e004      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800421a:	bf00      	nop
 800421c:	e002      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800421e:	bf00      	nop
 8004220:	e000      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004224:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10b      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800422c:	4bb9      	ldr	r3, [pc, #740]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800422e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004230:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800423c:	4ab5      	ldr	r2, [pc, #724]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800423e:	430b      	orrs	r3, r1
 8004240:	6553      	str	r3, [r2, #84]	; 0x54
 8004242:	e003      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004244:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004248:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800424c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004258:	65bb      	str	r3, [r7, #88]	; 0x58
 800425a:	2300      	movs	r3, #0
 800425c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800425e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004262:	460b      	mov	r3, r1
 8004264:	4313      	orrs	r3, r2
 8004266:	d009      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004268:	4baa      	ldr	r3, [pc, #680]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800426a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004276:	4aa7      	ldr	r2, [pc, #668]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004278:	430b      	orrs	r3, r1
 800427a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800427c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004284:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004288:	653b      	str	r3, [r7, #80]	; 0x50
 800428a:	2300      	movs	r3, #0
 800428c:	657b      	str	r3, [r7, #84]	; 0x54
 800428e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004292:	460b      	mov	r3, r1
 8004294:	4313      	orrs	r3, r2
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004298:	4b9e      	ldr	r3, [pc, #632]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80042a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042a8:	4a9a      	ldr	r2, [pc, #616]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042aa:	430b      	orrs	r3, r1
 80042ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80042bc:	2300      	movs	r3, #0
 80042be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80042c4:	460b      	mov	r3, r1
 80042c6:	4313      	orrs	r3, r2
 80042c8:	d009      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042ca:	4b92      	ldr	r3, [pc, #584]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ce:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d8:	4a8e      	ldr	r2, [pc, #568]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042da:	430b      	orrs	r3, r1
 80042dc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80042ea:	643b      	str	r3, [r7, #64]	; 0x40
 80042ec:	2300      	movs	r3, #0
 80042ee:	647b      	str	r3, [r7, #68]	; 0x44
 80042f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80042f4:	460b      	mov	r3, r1
 80042f6:	4313      	orrs	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042fa:	4b86      	ldr	r3, [pc, #536]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	4a85      	ldr	r2, [pc, #532]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004300:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004304:	6113      	str	r3, [r2, #16]
 8004306:	4b83      	ldr	r3, [pc, #524]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004308:	6919      	ldr	r1, [r3, #16]
 800430a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800430e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004312:	4a80      	ldr	r2, [pc, #512]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004314:	430b      	orrs	r3, r1
 8004316:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004324:	63bb      	str	r3, [r7, #56]	; 0x38
 8004326:	2300      	movs	r3, #0
 8004328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800432a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800432e:	460b      	mov	r3, r1
 8004330:	4313      	orrs	r3, r2
 8004332:	d009      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004334:	4b77      	ldr	r3, [pc, #476]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004338:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	4a74      	ldr	r2, [pc, #464]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004344:	430b      	orrs	r3, r1
 8004346:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004354:	633b      	str	r3, [r7, #48]	; 0x30
 8004356:	2300      	movs	r3, #0
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
 800435a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800435e:	460b      	mov	r3, r1
 8004360:	4313      	orrs	r3, r2
 8004362:	d00a      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004364:	4b6b      	ldr	r3, [pc, #428]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004368:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800436c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004374:	4a67      	ldr	r2, [pc, #412]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004376:	430b      	orrs	r3, r1
 8004378:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	2100      	movs	r1, #0
 8004384:	62b9      	str	r1, [r7, #40]	; 0x28
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800438c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004390:	460b      	mov	r3, r1
 8004392:	4313      	orrs	r3, r2
 8004394:	d011      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439a:	3308      	adds	r3, #8
 800439c:	2100      	movs	r1, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fb78 	bl	8004a94 <RCCEx_PLL2_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80043aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c2:	2100      	movs	r1, #0
 80043c4:	6239      	str	r1, [r7, #32]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
 80043cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80043d0:	460b      	mov	r3, r1
 80043d2:	4313      	orrs	r3, r2
 80043d4:	d011      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043da:	3308      	adds	r3, #8
 80043dc:	2101      	movs	r1, #1
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fb58 	bl	8004a94 <RCCEx_PLL2_Config>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80043ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	2100      	movs	r1, #0
 8004404:	61b9      	str	r1, [r7, #24]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004410:	460b      	mov	r3, r1
 8004412:	4313      	orrs	r3, r2
 8004414:	d011      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800441a:	3308      	adds	r3, #8
 800441c:	2102      	movs	r1, #2
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fb38 	bl	8004a94 <RCCEx_PLL2_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800442a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004436:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	2100      	movs	r1, #0
 8004444:	6139      	str	r1, [r7, #16]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004450:	460b      	mov	r3, r1
 8004452:	4313      	orrs	r3, r2
 8004454:	d011      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445a:	3328      	adds	r3, #40	; 0x28
 800445c:	2100      	movs	r1, #0
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fbca 	bl	8004bf8 <RCCEx_PLL3_Config>
 8004464:	4603      	mov	r3, r0
 8004466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800446a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004476:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	2100      	movs	r1, #0
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004490:	460b      	mov	r3, r1
 8004492:	4313      	orrs	r3, r2
 8004494:	d011      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800449a:	3328      	adds	r3, #40	; 0x28
 800449c:	2101      	movs	r1, #1
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fbaa 	bl	8004bf8 <RCCEx_PLL3_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80044aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	2100      	movs	r1, #0
 80044c4:	6039      	str	r1, [r7, #0]
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	607b      	str	r3, [r7, #4]
 80044cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044d0:	460b      	mov	r3, r1
 80044d2:	4313      	orrs	r3, r2
 80044d4:	d011      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044da:	3328      	adds	r3, #40	; 0x28
 80044dc:	2102      	movs	r1, #2
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fb8a 	bl	8004bf8 <RCCEx_PLL3_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80044ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80044fa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004502:	2300      	movs	r3, #0
 8004504:	e000      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
}
 8004508:	4618      	mov	r0, r3
 800450a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800450e:	46bd      	mov	sp, r7
 8004510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004514:	58024400 	.word	0x58024400

08004518 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800451c:	f7fe fd96 	bl	800304c <HAL_RCC_GetHCLKFreq>
 8004520:	4602      	mov	r2, r0
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	4904      	ldr	r1, [pc, #16]	; (8004540 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800452e:	5ccb      	ldrb	r3, [r1, r3]
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004538:	4618      	mov	r0, r3
 800453a:	bd80      	pop	{r7, pc}
 800453c:	58024400 	.word	0x58024400
 8004540:	08008114 	.word	0x08008114

08004544 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004544:	b480      	push	{r7}
 8004546:	b089      	sub	sp, #36	; 0x24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800454c:	4ba1      	ldr	r3, [pc, #644]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004556:	4b9f      	ldr	r3, [pc, #636]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	0b1b      	lsrs	r3, r3, #12
 800455c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004560:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004562:	4b9c      	ldr	r3, [pc, #624]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800456e:	4b99      	ldr	r3, [pc, #612]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	08db      	lsrs	r3, r3, #3
 8004574:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004586:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8111 	beq.w	80047b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b02      	cmp	r3, #2
 8004596:	f000 8083 	beq.w	80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b02      	cmp	r3, #2
 800459e:	f200 80a1 	bhi.w	80046e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d056      	beq.n	800465c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80045ae:	e099      	b.n	80046e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045b0:	4b88      	ldr	r3, [pc, #544]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d02d      	beq.n	8004618 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045bc:	4b85      	ldr	r3, [pc, #532]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	08db      	lsrs	r3, r3, #3
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	4a84      	ldr	r2, [pc, #528]	; (80047d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
 80045cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	ee07 3a90 	vmov	s15, r3
 80045d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e6:	4b7b      	ldr	r3, [pc, #492]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004606:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004612:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004616:	e087      	b.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004622:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800462a:	4b6a      	ldr	r3, [pc, #424]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800463a:	ed97 6a03 	vldr	s12, [r7, #12]
 800463e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800464a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800464e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004656:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800465a:	e065      	b.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004666:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800466a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800466e:	4b59      	ldr	r3, [pc, #356]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004676:	ee07 3a90 	vmov	s15, r3
 800467a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800467e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004682:	eddf 5a56 	vldr	s11, [pc, #344]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800468a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800468e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800469e:	e043      	b.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80046ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b2:	4b48      	ldr	r3, [pc, #288]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046e2:	e021      	b.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f6:	4b37      	ldr	r3, [pc, #220]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004706:	ed97 6a03 	vldr	s12, [r7, #12]
 800470a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80047dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004726:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004728:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472c:	0a5b      	lsrs	r3, r3, #9
 800472e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800473e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004742:	edd7 6a07 	vldr	s13, [r7, #28]
 8004746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800474a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800474e:	ee17 2a90 	vmov	r2, s15
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004756:	4b1f      	ldr	r3, [pc, #124]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004760:	ee07 3a90 	vmov	s15, r3
 8004764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800476c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004770:	edd7 6a07 	vldr	s13, [r7, #28]
 8004774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800477c:	ee17 2a90 	vmov	r2, s15
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004784:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004788:	0e1b      	lsrs	r3, r3, #24
 800478a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800478e:	ee07 3a90 	vmov	s15, r3
 8004792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004796:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800479a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800479e:	edd7 6a07 	vldr	s13, [r7, #28]
 80047a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047aa:	ee17 2a90 	vmov	r2, s15
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80047b2:	e008      	b.n	80047c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
}
 80047c6:	bf00      	nop
 80047c8:	3724      	adds	r7, #36	; 0x24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	58024400 	.word	0x58024400
 80047d8:	03d09000 	.word	0x03d09000
 80047dc:	46000000 	.word	0x46000000
 80047e0:	4c742400 	.word	0x4c742400
 80047e4:	4a742400 	.word	0x4a742400
 80047e8:	4bbebc20 	.word	0x4bbebc20

080047ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b089      	sub	sp, #36	; 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047f4:	4ba1      	ldr	r3, [pc, #644]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80047fe:	4b9f      	ldr	r3, [pc, #636]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	0d1b      	lsrs	r3, r3, #20
 8004804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004808:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800480a:	4b9c      	ldr	r3, [pc, #624]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	0a1b      	lsrs	r3, r3, #8
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004816:	4b99      	ldr	r3, [pc, #612]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	08db      	lsrs	r3, r3, #3
 800481c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	fb02 f303 	mul.w	r3, r2, r3
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 8111 	beq.w	8004a5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b02      	cmp	r3, #2
 800483e:	f000 8083 	beq.w	8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b02      	cmp	r3, #2
 8004846:	f200 80a1 	bhi.w	800498c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d056      	beq.n	8004904 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004856:	e099      	b.n	800498c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004858:	4b88      	ldr	r3, [pc, #544]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0320 	and.w	r3, r3, #32
 8004860:	2b00      	cmp	r3, #0
 8004862:	d02d      	beq.n	80048c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004864:	4b85      	ldr	r3, [pc, #532]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	08db      	lsrs	r3, r3, #3
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	4a84      	ldr	r2, [pc, #528]	; (8004a80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
 8004874:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	ee07 3a90 	vmov	s15, r3
 800487c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488e:	4b7b      	ldr	r3, [pc, #492]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489e:	ed97 6a03 	vldr	s12, [r7, #12]
 80048a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048be:	e087      	b.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d2:	4b6a      	ldr	r3, [pc, #424]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048da:	ee07 3a90 	vmov	s15, r3
 80048de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004902:	e065      	b.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	ee07 3a90 	vmov	s15, r3
 800490a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004916:	4b59      	ldr	r3, [pc, #356]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004926:	ed97 6a03 	vldr	s12, [r7, #12]
 800492a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800492e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800493a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800493e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004946:	e043      	b.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004952:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495a:	4b48      	ldr	r3, [pc, #288]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496a:	ed97 6a03 	vldr	s12, [r7, #12]
 800496e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800497e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800498a:	e021      	b.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004996:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800499a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499e:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80049d0:	4b2a      	ldr	r3, [pc, #168]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	0a5b      	lsrs	r3, r3, #9
 80049d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80049ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f6:	ee17 2a90 	vmov	r2, s15
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80049fe:	4b1f      	ldr	r3, [pc, #124]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	0c1b      	lsrs	r3, r3, #16
 8004a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a08:	ee07 3a90 	vmov	s15, r3
 8004a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a18:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a24:	ee17 2a90 	vmov	r2, s15
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a2c:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	0e1b      	lsrs	r3, r3, #24
 8004a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a52:	ee17 2a90 	vmov	r2, s15
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a5a:	e008      	b.n	8004a6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	609a      	str	r2, [r3, #8]
}
 8004a6e:	bf00      	nop
 8004a70:	3724      	adds	r7, #36	; 0x24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	58024400 	.word	0x58024400
 8004a80:	03d09000 	.word	0x03d09000
 8004a84:	46000000 	.word	0x46000000
 8004a88:	4c742400 	.word	0x4c742400
 8004a8c:	4a742400 	.word	0x4a742400
 8004a90:	4bbebc20 	.word	0x4bbebc20

08004a94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004aa2:	4b53      	ldr	r3, [pc, #332]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	f003 0303 	and.w	r3, r3, #3
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d101      	bne.n	8004ab2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e099      	b.n	8004be6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ab2:	4b4f      	ldr	r3, [pc, #316]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a4e      	ldr	r2, [pc, #312]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ab8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004abe:	f7fc ff6b 	bl	8001998 <HAL_GetTick>
 8004ac2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ac4:	e008      	b.n	8004ad8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ac6:	f7fc ff67 	bl	8001998 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e086      	b.n	8004be6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ad8:	4b45      	ldr	r3, [pc, #276]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f0      	bne.n	8004ac6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ae4:	4b42      	ldr	r3, [pc, #264]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	031b      	lsls	r3, r3, #12
 8004af2:	493f      	ldr	r1, [pc, #252]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	628b      	str	r3, [r1, #40]	; 0x28
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	025b      	lsls	r3, r3, #9
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	061b      	lsls	r3, r3, #24
 8004b24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b28:	4931      	ldr	r1, [pc, #196]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b2e:	4b30      	ldr	r3, [pc, #192]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	492d      	ldr	r1, [pc, #180]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b40:	4b2b      	ldr	r3, [pc, #172]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	f023 0220 	bic.w	r2, r3, #32
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	4928      	ldr	r1, [pc, #160]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b52:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	4a26      	ldr	r2, [pc, #152]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b58:	f023 0310 	bic.w	r3, r3, #16
 8004b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b5e:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <RCCEx_PLL2_Config+0x160>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	69d2      	ldr	r2, [r2, #28]
 8004b6a:	00d2      	lsls	r2, r2, #3
 8004b6c:	4920      	ldr	r1, [pc, #128]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b72:	4b1f      	ldr	r3, [pc, #124]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	4a1e      	ldr	r2, [pc, #120]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b78:	f043 0310 	orr.w	r3, r3, #16
 8004b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b84:	4b1a      	ldr	r3, [pc, #104]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004b90:	e00f      	b.n	8004bb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d106      	bne.n	8004ba6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b98:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	4a14      	ldr	r2, [pc, #80]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004b9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ba4:	e005      	b.n	8004bb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	4a11      	ldr	r2, [pc, #68]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004bb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bbe:	f7fc feeb 	bl	8001998 <HAL_GetTick>
 8004bc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bc4:	e008      	b.n	8004bd8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bc6:	f7fc fee7 	bl	8001998 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e006      	b.n	8004be6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <RCCEx_PLL2_Config+0x15c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f0      	beq.n	8004bc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	58024400 	.word	0x58024400
 8004bf4:	ffff0007 	.word	0xffff0007

08004bf8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c06:	4b53      	ldr	r3, [pc, #332]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d101      	bne.n	8004c16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e099      	b.n	8004d4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004c16:	4b4f      	ldr	r3, [pc, #316]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a4e      	ldr	r2, [pc, #312]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c22:	f7fc feb9 	bl	8001998 <HAL_GetTick>
 8004c26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c28:	e008      	b.n	8004c3c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c2a:	f7fc feb5 	bl	8001998 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e086      	b.n	8004d4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c3c:	4b45      	ldr	r3, [pc, #276]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c48:	4b42      	ldr	r3, [pc, #264]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	051b      	lsls	r3, r3, #20
 8004c56:	493f      	ldr	r1, [pc, #252]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	628b      	str	r3, [r1, #40]	; 0x28
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	025b      	lsls	r3, r3, #9
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	061b      	lsls	r3, r3, #24
 8004c88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c8c:	4931      	ldr	r1, [pc, #196]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c92:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	492d      	ldr	r1, [pc, #180]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ca4:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	4928      	ldr	r1, [pc, #160]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004cb6:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	4a26      	ldr	r2, [pc, #152]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004cc2:	4b24      	ldr	r3, [pc, #144]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <RCCEx_PLL3_Config+0x160>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	69d2      	ldr	r2, [r2, #28]
 8004cce:	00d2      	lsls	r2, r2, #3
 8004cd0:	4920      	ldr	r1, [pc, #128]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cd6:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	4a1e      	ldr	r2, [pc, #120]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	4a19      	ldr	r2, [pc, #100]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004cf4:	e00f      	b.n	8004d16 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d106      	bne.n	8004d0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004cfc:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d00:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004d08:	e005      	b.n	8004d16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004d0a:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	4a11      	ldr	r2, [pc, #68]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a0e      	ldr	r2, [pc, #56]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d22:	f7fc fe39 	bl	8001998 <HAL_GetTick>
 8004d26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d28:	e008      	b.n	8004d3c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d2a:	f7fc fe35 	bl	8001998 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e006      	b.n	8004d4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <RCCEx_PLL3_Config+0x15c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	58024400 	.word	0x58024400
 8004d58:	ffff0007 	.word	0xffff0007

08004d5c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e10f      	b.n	8004f8e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a87      	ldr	r2, [pc, #540]	; (8004f98 <HAL_SPI_Init+0x23c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00f      	beq.n	8004d9e <HAL_SPI_Init+0x42>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a86      	ldr	r2, [pc, #536]	; (8004f9c <HAL_SPI_Init+0x240>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00a      	beq.n	8004d9e <HAL_SPI_Init+0x42>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a84      	ldr	r2, [pc, #528]	; (8004fa0 <HAL_SPI_Init+0x244>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d005      	beq.n	8004d9e <HAL_SPI_Init+0x42>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	2b0f      	cmp	r3, #15
 8004d98:	d901      	bls.n	8004d9e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e0f7      	b.n	8004f8e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 ff76 	bl	8005c90 <SPI_GetPacketSize>
 8004da4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a7b      	ldr	r2, [pc, #492]	; (8004f98 <HAL_SPI_Init+0x23c>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00c      	beq.n	8004dca <HAL_SPI_Init+0x6e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a79      	ldr	r2, [pc, #484]	; (8004f9c <HAL_SPI_Init+0x240>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d007      	beq.n	8004dca <HAL_SPI_Init+0x6e>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a78      	ldr	r2, [pc, #480]	; (8004fa0 <HAL_SPI_Init+0x244>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d002      	beq.n	8004dca <HAL_SPI_Init+0x6e>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d811      	bhi.n	8004dee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004dce:	4a72      	ldr	r2, [pc, #456]	; (8004f98 <HAL_SPI_Init+0x23c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d009      	beq.n	8004de8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a70      	ldr	r2, [pc, #448]	; (8004f9c <HAL_SPI_Init+0x240>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <HAL_SPI_Init+0x8c>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a6f      	ldr	r2, [pc, #444]	; (8004fa0 <HAL_SPI_Init+0x244>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d104      	bne.n	8004df2 <HAL_SPI_Init+0x96>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d901      	bls.n	8004df2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e0cd      	b.n	8004f8e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fc fb44 	bl	8001494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0201 	bic.w	r2, r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004e2e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e38:	d119      	bne.n	8004e6e <HAL_SPI_Init+0x112>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e42:	d103      	bne.n	8004e4c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10c      	bne.n	8004e6e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004e58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e5c:	d107      	bne.n	8004e6e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00f      	beq.n	8004e9a <HAL_SPI_Init+0x13e>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	2b06      	cmp	r3, #6
 8004e80:	d90b      	bls.n	8004e9a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e007      	b.n	8004eaa <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ea8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69da      	ldr	r2, [r3, #28]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	431a      	orrs	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebc:	ea42 0103 	orr.w	r1, r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0a:	ea42 0103 	orr.w	r1, r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d113      	bne.n	8004f4a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f34:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f48:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40013000 	.word	0x40013000
 8004f9c:	40003800 	.word	0x40003800
 8004fa0:	40003c00 	.word	0x40003c00

08004fa4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08a      	sub	sp, #40	; 0x28
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	603b      	str	r3, [r7, #0]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3320      	adds	r3, #32
 8004fba:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_SPI_Transmit+0x2a>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	e1e1      	b.n	8005392 <HAL_SPI_Transmit+0x3ee>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fd6:	f7fc fcdf 	bl	8001998 <HAL_GetTick>
 8004fda:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d007      	beq.n	8004ff8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004ff4:	7efb      	ldrb	r3, [r7, #27]
 8004ff6:	e1cc      	b.n	8005392 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d002      	beq.n	8005004 <HAL_SPI_Transmit+0x60>
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d107      	bne.n	8005014 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005010:	7efb      	ldrb	r3, [r7, #27]
 8005012:	e1be      	b.n	8005392 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2203      	movs	r2, #3
 8005018:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	88fa      	ldrh	r2, [r7, #6]
 800502e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	88fa      	ldrh	r2, [r7, #6]
 8005036:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005064:	d108      	bne.n	8005078 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	e009      	b.n	800508c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800508a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	4b96      	ldr	r3, [pc, #600]	; (80052ec <HAL_SPI_Transmit+0x348>)
 8005094:	4013      	ands	r3, r2
 8005096:	88f9      	ldrh	r1, [r7, #6]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	430b      	orrs	r3, r1
 800509e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050b8:	d107      	bne.n	80050ca <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	d947      	bls.n	8005162 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80050d2:	e03f      	b.n	8005154 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d114      	bne.n	800510c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f2:	1d1a      	adds	r2, r3, #4
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800510a:	e023      	b.n	8005154 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800510c:	f7fc fc44 	bl	8001998 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d803      	bhi.n	8005124 <HAL_SPI_Transmit+0x180>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005122:	d102      	bne.n	800512a <HAL_SPI_Transmit+0x186>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d114      	bne.n	8005154 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 fce2 	bl	8005af4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800513e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e11e      	b.n	8005392 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800515a:	b29b      	uxth	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1b9      	bne.n	80050d4 <HAL_SPI_Transmit+0x130>
 8005160:	e0f1      	b.n	8005346 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2b07      	cmp	r3, #7
 8005168:	f240 80e6 	bls.w	8005338 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800516c:	e05d      	b.n	800522a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b02      	cmp	r3, #2
 800517a:	d132      	bne.n	80051e2 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005182:	b29b      	uxth	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	d918      	bls.n	80051ba <HAL_SPI_Transmit+0x216>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d014      	beq.n	80051ba <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a0:	1d1a      	adds	r2, r3, #4
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b02      	subs	r3, #2
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80051b8:	e037      	b.n	800522a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051be:	881a      	ldrh	r2, [r3, #0]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c8:	1c9a      	adds	r2, r3, #2
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80051e0:	e023      	b.n	800522a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051e2:	f7fc fbd9 	bl	8001998 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d803      	bhi.n	80051fa <HAL_SPI_Transmit+0x256>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f8:	d102      	bne.n	8005200 <HAL_SPI_Transmit+0x25c>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d114      	bne.n	800522a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 fc77 	bl	8005af4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005214:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e0b3      	b.n	8005392 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005230:	b29b      	uxth	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d19b      	bne.n	800516e <HAL_SPI_Transmit+0x1ca>
 8005236:	e086      	b.n	8005346 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b02      	cmp	r3, #2
 8005244:	d154      	bne.n	80052f0 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b03      	cmp	r3, #3
 8005250:	d918      	bls.n	8005284 <HAL_SPI_Transmit+0x2e0>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	d914      	bls.n	8005284 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800526a:	1d1a      	adds	r2, r3, #4
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b04      	subs	r3, #4
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005282:	e059      	b.n	8005338 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800528a:	b29b      	uxth	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d917      	bls.n	80052c0 <HAL_SPI_Transmit+0x31c>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d013      	beq.n	80052c0 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529c:	881a      	ldrh	r2, [r3, #0]
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a6:	1c9a      	adds	r2, r3, #2
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b02      	subs	r3, #2
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80052be:	e03b      	b.n	8005338 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3320      	adds	r3, #32
 80052ca:	7812      	ldrb	r2, [r2, #0]
 80052cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80052ea:	e025      	b.n	8005338 <HAL_SPI_Transmit+0x394>
 80052ec:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052f0:	f7fc fb52 	bl	8001998 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d803      	bhi.n	8005308 <HAL_SPI_Transmit+0x364>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005306:	d102      	bne.n	800530e <HAL_SPI_Transmit+0x36a>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d114      	bne.n	8005338 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 fbf0 	bl	8005af4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005322:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e02c      	b.n	8005392 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	f47f af79 	bne.w	8005238 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2200      	movs	r2, #0
 800534e:	2108      	movs	r1, #8
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 fc6f 	bl	8005c34 <SPI_WaitOnFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005362:	f043 0220 	orr.w	r2, r3, #32
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 fbc1 	bl	8005af4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e000      	b.n	8005392 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8005390:	7efb      	ldrb	r3, [r7, #27]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop

0800539c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3330      	adds	r3, #48	; 0x30
 80053b6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d101      	bne.n	80053c6 <HAL_SPI_Receive+0x2a>
 80053c2:	2302      	movs	r3, #2
 80053c4:	e173      	b.n	80056ae <HAL_SPI_Receive+0x312>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ce:	f7fc fae3 	bl	8001998 <HAL_GetTick>
 80053d2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d007      	beq.n	80053f0 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80053e0:	2302      	movs	r3, #2
 80053e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80053ec:	7ffb      	ldrb	r3, [r7, #31]
 80053ee:	e15e      	b.n	80056ae <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_SPI_Receive+0x60>
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d107      	bne.n	800540c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005408:	7ffb      	ldrb	r3, [r7, #31]
 800540a:	e150      	b.n	80056ae <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2204      	movs	r2, #4
 8005410:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	88fa      	ldrh	r2, [r7, #6]
 8005426:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	88fa      	ldrh	r2, [r7, #6]
 800542e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800545c:	d108      	bne.n	8005470 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e009      	b.n	8005484 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005482:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	4b8b      	ldr	r3, [pc, #556]	; (80056b8 <HAL_SPI_Receive+0x31c>)
 800548c:	4013      	ands	r3, r2
 800548e:	88f9      	ldrh	r1, [r7, #6]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	430b      	orrs	r3, r1
 8005496:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0201 	orr.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054b0:	d107      	bne.n	80054c2 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	2b0f      	cmp	r3, #15
 80054c8:	d948      	bls.n	800555c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80054ca:	e040      	b.n	800554e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695a      	ldr	r2, [r3, #20]
 80054d2:	f248 0308 	movw	r3, #32776	; 0x8008
 80054d6:	4013      	ands	r3, r2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d014      	beq.n	8005506 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054e6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ec:	1d1a      	adds	r2, r3, #4
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005504:	e023      	b.n	800554e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005506:	f7fc fa47 	bl	8001998 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d803      	bhi.n	800551e <HAL_SPI_Receive+0x182>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800551c:	d102      	bne.n	8005524 <HAL_SPI_Receive+0x188>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d114      	bne.n	800554e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fae5 	bl	8005af4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005538:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e0af      	b.n	80056ae <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005554:	b29b      	uxth	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1b8      	bne.n	80054cc <HAL_SPI_Receive+0x130>
 800555a:	e095      	b.n	8005688 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	2b07      	cmp	r3, #7
 8005562:	f240 808b 	bls.w	800567c <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005566:	e03f      	b.n	80055e8 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b01      	cmp	r3, #1
 8005574:	d114      	bne.n	80055a0 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	8812      	ldrh	r2, [r2, #0]
 800557e:	b292      	uxth	r2, r2
 8005580:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005586:	1c9a      	adds	r2, r3, #2
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800559e:	e023      	b.n	80055e8 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055a0:	f7fc f9fa 	bl	8001998 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d803      	bhi.n	80055b8 <HAL_SPI_Receive+0x21c>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055b6:	d102      	bne.n	80055be <HAL_SPI_Receive+0x222>
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d114      	bne.n	80055e8 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 fa98 	bl	8005af4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e062      	b.n	80056ae <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1b9      	bne.n	8005568 <HAL_SPI_Receive+0x1cc>
 80055f4:	e048      	b.n	8005688 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b01      	cmp	r3, #1
 8005602:	d117      	bne.n	8005634 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005610:	7812      	ldrb	r2, [r2, #0]
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005632:	e023      	b.n	800567c <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005634:	f7fc f9b0 	bl	8001998 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d803      	bhi.n	800564c <HAL_SPI_Receive+0x2b0>
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800564a:	d102      	bne.n	8005652 <HAL_SPI_Receive+0x2b6>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d114      	bne.n	800567c <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 fa4e 	bl	8005af4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005666:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e018      	b.n	80056ae <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005682:	b29b      	uxth	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1b6      	bne.n	80055f6 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fa33 	bl	8005af4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e000      	b.n	80056ae <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 80056ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3720      	adds	r7, #32
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	ffff0000 	.word	0xffff0000

080056bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08c      	sub	sp, #48	; 0x30
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3320      	adds	r3, #32
 80056d6:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3330      	adds	r3, #48	; 0x30
 80056de:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d101      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x32>
 80056ea:	2302      	movs	r3, #2
 80056ec:	e1fd      	b.n	8005aea <HAL_SPI_TransmitReceive+0x42e>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056f6:	f7fc f94f 	bl	8001998 <HAL_GetTick>
 80056fa:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80056fc:	887b      	ldrh	r3, [r7, #2]
 80056fe:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8005700:	887b      	ldrh	r3, [r7, #2]
 8005702:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b01      	cmp	r3, #1
 800570e:	d009      	beq.n	8005724 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8005710:	2302      	movs	r3, #2
 8005712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800571e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005722:	e1e2      	b.n	8005aea <HAL_SPI_TransmitReceive+0x42e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <HAL_SPI_TransmitReceive+0x7a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <HAL_SPI_TransmitReceive+0x7a>
 8005730:	887b      	ldrh	r3, [r7, #2]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005744:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005748:	e1cf      	b.n	8005aea <HAL_SPI_TransmitReceive+0x42e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2205      	movs	r2, #5
 800574e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	887a      	ldrh	r2, [r7, #2]
 8005764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	887a      	ldrh	r2, [r7, #2]
 800576c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	887a      	ldrh	r2, [r7, #2]
 800577a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	887a      	ldrh	r2, [r7, #2]
 8005782:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 80057a0:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	4b82      	ldr	r3, [pc, #520]	; (80059b4 <HAL_SPI_TransmitReceive+0x2f8>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	8879      	ldrh	r1, [r7, #2]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	430b      	orrs	r3, r1
 80057b4:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0201 	orr.w	r2, r2, #1
 80057c4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057ce:	d107      	bne.n	80057e0 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	2b0f      	cmp	r3, #15
 80057e6:	d970      	bls.n	80058ca <HAL_SPI_TransmitReceive+0x20e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80057e8:	e068      	b.n	80058bc <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d11a      	bne.n	800582e <HAL_SPI_TransmitReceive+0x172>
 80057f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d017      	beq.n	800582e <HAL_SPI_TransmitReceive+0x172>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6812      	ldr	r2, [r2, #0]
 8005808:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580e:	1d1a      	adds	r2, r3, #4
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800582c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695a      	ldr	r2, [r3, #20]
 8005834:	f248 0308 	movw	r3, #32776	; 0x8008
 8005838:	4013      	ands	r3, r2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d01a      	beq.n	8005874 <HAL_SPI_TransmitReceive+0x1b8>
 800583e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005840:	2b00      	cmp	r3, #0
 8005842:	d017      	beq.n	8005874 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800584c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800584e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005854:	1d1a      	adds	r2, r3, #4
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005872:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005874:	f7fc f890 	bl	8001998 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005880:	429a      	cmp	r2, r3
 8005882:	d803      	bhi.n	800588c <HAL_SPI_TransmitReceive+0x1d0>
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800588a:	d102      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x1d6>
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	2b00      	cmp	r3, #0
 8005890:	d114      	bne.n	80058bc <HAL_SPI_TransmitReceive+0x200>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f92e 	bl	8005af4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e116      	b.n	8005aea <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80058bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d193      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x12e>
 80058c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d190      	bne.n	80057ea <HAL_SPI_TransmitReceive+0x12e>
 80058c8:	e0e8      	b.n	8005a9c <HAL_SPI_TransmitReceive+0x3e0>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	2b07      	cmp	r3, #7
 80058d0:	f240 80de 	bls.w	8005a90 <HAL_SPI_TransmitReceive+0x3d4>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80058d4:	e066      	b.n	80059a4 <HAL_SPI_TransmitReceive+0x2e8>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d119      	bne.n	8005918 <HAL_SPI_TransmitReceive+0x25c>
 80058e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d016      	beq.n	8005918 <HAL_SPI_TransmitReceive+0x25c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ee:	881a      	ldrh	r2, [r3, #0]
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f8:	1c9a      	adds	r2, r3, #2
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005916:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b01      	cmp	r3, #1
 8005924:	d11a      	bne.n	800595c <HAL_SPI_TransmitReceive+0x2a0>
 8005926:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005928:	2b00      	cmp	r3, #0
 800592a:	d017      	beq.n	800595c <HAL_SPI_TransmitReceive+0x2a0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	8812      	ldrh	r2, [r2, #0]
 8005934:	b292      	uxth	r2, r2
 8005936:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800593c:	1c9a      	adds	r2, r3, #2
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005948:	b29b      	uxth	r3, r3
 800594a:	3b01      	subs	r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800595a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800595c:	f7fc f81c 	bl	8001998 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005968:	429a      	cmp	r2, r3
 800596a:	d803      	bhi.n	8005974 <HAL_SPI_TransmitReceive+0x2b8>
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005972:	d102      	bne.n	800597a <HAL_SPI_TransmitReceive+0x2be>
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	2b00      	cmp	r3, #0
 8005978:	d114      	bne.n	80059a4 <HAL_SPI_TransmitReceive+0x2e8>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f8ba 	bl	8005af4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e0a2      	b.n	8005aea <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80059a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d195      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x21a>
 80059aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d192      	bne.n	80058d6 <HAL_SPI_TransmitReceive+0x21a>
 80059b0:	e074      	b.n	8005a9c <HAL_SPI_TransmitReceive+0x3e0>
 80059b2:	bf00      	nop
 80059b4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	d11b      	bne.n	80059fe <HAL_SPI_TransmitReceive+0x342>
 80059c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d018      	beq.n	80059fe <HAL_SPI_TransmitReceive+0x342>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3320      	adds	r3, #32
 80059d6:	7812      	ldrb	r2, [r2, #0]
 80059d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80059fc:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d11d      	bne.n	8005a48 <HAL_SPI_TransmitReceive+0x38c>
 8005a0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d01a      	beq.n	8005a48 <HAL_SPI_TransmitReceive+0x38c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a1e:	7812      	ldrb	r2, [r2, #0]
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	3b01      	subs	r3, #1
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005a46:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a48:	f7fb ffa6 	bl	8001998 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d803      	bhi.n	8005a60 <HAL_SPI_TransmitReceive+0x3a4>
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a5e:	d102      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x3aa>
 8005a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d114      	bne.n	8005a90 <HAL_SPI_TransmitReceive+0x3d4>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 f844 	bl	8005af4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e02c      	b.n	8005aea <HAL_SPI_TransmitReceive+0x42e>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005a90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d190      	bne.n	80059b8 <HAL_SPI_TransmitReceive+0x2fc>
 8005a96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d18d      	bne.n	80059b8 <HAL_SPI_TransmitReceive+0x2fc>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2108      	movs	r1, #8
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f8c4 	bl	8005c34 <SPI_WaitOnFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab8:	f043 0220 	orr.w	r2, r3, #32
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f816 	bl	8005af4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d001      	beq.n	8005ae6 <HAL_SPI_TransmitReceive+0x42a>
  {
    return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e001      	b.n	8005aea <HAL_SPI_TransmitReceive+0x42e>
  }
  return errorcode;
 8005ae6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3728      	adds	r7, #40	; 0x28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop

08005af4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699a      	ldr	r2, [r3, #24]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0208 	orr.w	r2, r2, #8
 8005b12:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0210 	orr.w	r2, r2, #16
 8005b22:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0201 	bic.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6919      	ldr	r1, [r3, #16]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b3c      	ldr	r3, [pc, #240]	; (8005c30 <SPI_CloseTransfer+0x13c>)
 8005b40:	400b      	ands	r3, r1
 8005b42:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005b52:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d014      	beq.n	8005b8a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 0320 	and.w	r3, r3, #32
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00f      	beq.n	8005b8a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699a      	ldr	r2, [r3, #24]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0220 	orr.w	r2, r2, #32
 8005b88:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d014      	beq.n	8005bc0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00f      	beq.n	8005bc0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba6:	f043 0204 	orr.w	r2, r3, #4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bbe:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00f      	beq.n	8005bea <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd0:	f043 0201 	orr.w	r2, r3, #1
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699a      	ldr	r2, [r3, #24]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00f      	beq.n	8005c14 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bfa:	f043 0208 	orr.w	r2, r3, #8
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c12:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005c24:	bf00      	nop
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	fffffc90 	.word	0xfffffc90

08005c34 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	4613      	mov	r3, r2
 8005c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005c44:	e010      	b.n	8005c68 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c46:	f7fb fea7 	bl	8001998 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d803      	bhi.n	8005c5e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c5c:	d102      	bne.n	8005c64 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e00f      	b.n	8005c88 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	4013      	ands	r3, r2
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	bf0c      	ite	eq
 8005c78:	2301      	moveq	r3, #1
 8005c7a:	2300      	movne	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	79fb      	ldrb	r3, [r7, #7]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d0df      	beq.n	8005c46 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	3307      	adds	r3, #7
 8005cae:	08db      	lsrs	r3, r3, #3
 8005cb0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	fb02 f303 	mul.w	r3, r2, r3
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b082      	sub	sp, #8
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e042      	b.n	8005d5e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7fb fc60 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2224      	movs	r2, #36	; 0x24
 8005cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f8bb 	bl	8005e84 <UART_SetConfig>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d101      	bne.n	8005d18 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e022      	b.n	8005d5e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fe17 	bl	8006954 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d34:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689a      	ldr	r2, [r3, #8]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d44:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f042 0201 	orr.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 fe9e 	bl	8006a98 <UART_CheckIdleState>
 8005d5c:	4603      	mov	r3, r0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b08a      	sub	sp, #40	; 0x28
 8005d6a:	af02      	add	r7, sp, #8
 8005d6c:	60f8      	str	r0, [r7, #12]
 8005d6e:	60b9      	str	r1, [r7, #8]
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7c:	2b20      	cmp	r3, #32
 8005d7e:	d17b      	bne.n	8005e78 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <HAL_UART_Transmit+0x26>
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d101      	bne.n	8005d90 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e074      	b.n	8005e7a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2221      	movs	r2, #33	; 0x21
 8005d9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005da0:	f7fb fdfa 	bl	8001998 <HAL_GetTick>
 8005da4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	88fa      	ldrh	r2, [r7, #6]
 8005daa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	88fa      	ldrh	r2, [r7, #6]
 8005db2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dbe:	d108      	bne.n	8005dd2 <HAL_UART_Transmit+0x6c>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	e003      	b.n	8005dda <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005dda:	e030      	b.n	8005e3e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2200      	movs	r2, #0
 8005de4:	2180      	movs	r1, #128	; 0x80
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 ff00 	bl	8006bec <UART_WaitOnFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e03d      	b.n	8005e7a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10b      	bne.n	8005e1c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e12:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	3302      	adds	r3, #2
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	e007      	b.n	8005e2c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	781a      	ldrb	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1c8      	bne.n	8005ddc <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2200      	movs	r2, #0
 8005e52:	2140      	movs	r1, #64	; 0x40
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f000 fec9 	bl	8006bec <UART_WaitOnFlagUntilTimeout>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e006      	b.n	8005e7a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	e000      	b.n	8005e7a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005e78:	2302      	movs	r3, #2
  }
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3720      	adds	r7, #32
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e88:	b092      	sub	sp, #72	; 0x48
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	69db      	ldr	r3, [r3, #28]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	4bbe      	ldr	r3, [pc, #760]	; (80061ac <UART_SetConfig+0x328>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	68da      	ldr	r2, [r3, #12]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4ab3      	ldr	r2, [pc, #716]	; (80061b0 <UART_SetConfig+0x32c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eec:	4313      	orrs	r3, r2
 8005eee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689a      	ldr	r2, [r3, #8]
 8005ef6:	4baf      	ldr	r3, [pc, #700]	; (80061b4 <UART_SetConfig+0x330>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	6812      	ldr	r2, [r2, #0]
 8005efe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	f023 010f 	bic.w	r1, r3, #15
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4aa6      	ldr	r2, [pc, #664]	; (80061b8 <UART_SetConfig+0x334>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d177      	bne.n	8006014 <UART_SetConfig+0x190>
 8005f24:	4ba5      	ldr	r3, [pc, #660]	; (80061bc <UART_SetConfig+0x338>)
 8005f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f2c:	2b28      	cmp	r3, #40	; 0x28
 8005f2e:	d86d      	bhi.n	800600c <UART_SetConfig+0x188>
 8005f30:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <UART_SetConfig+0xb4>)
 8005f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f36:	bf00      	nop
 8005f38:	08005fdd 	.word	0x08005fdd
 8005f3c:	0800600d 	.word	0x0800600d
 8005f40:	0800600d 	.word	0x0800600d
 8005f44:	0800600d 	.word	0x0800600d
 8005f48:	0800600d 	.word	0x0800600d
 8005f4c:	0800600d 	.word	0x0800600d
 8005f50:	0800600d 	.word	0x0800600d
 8005f54:	0800600d 	.word	0x0800600d
 8005f58:	08005fe5 	.word	0x08005fe5
 8005f5c:	0800600d 	.word	0x0800600d
 8005f60:	0800600d 	.word	0x0800600d
 8005f64:	0800600d 	.word	0x0800600d
 8005f68:	0800600d 	.word	0x0800600d
 8005f6c:	0800600d 	.word	0x0800600d
 8005f70:	0800600d 	.word	0x0800600d
 8005f74:	0800600d 	.word	0x0800600d
 8005f78:	08005fed 	.word	0x08005fed
 8005f7c:	0800600d 	.word	0x0800600d
 8005f80:	0800600d 	.word	0x0800600d
 8005f84:	0800600d 	.word	0x0800600d
 8005f88:	0800600d 	.word	0x0800600d
 8005f8c:	0800600d 	.word	0x0800600d
 8005f90:	0800600d 	.word	0x0800600d
 8005f94:	0800600d 	.word	0x0800600d
 8005f98:	08005ff5 	.word	0x08005ff5
 8005f9c:	0800600d 	.word	0x0800600d
 8005fa0:	0800600d 	.word	0x0800600d
 8005fa4:	0800600d 	.word	0x0800600d
 8005fa8:	0800600d 	.word	0x0800600d
 8005fac:	0800600d 	.word	0x0800600d
 8005fb0:	0800600d 	.word	0x0800600d
 8005fb4:	0800600d 	.word	0x0800600d
 8005fb8:	08005ffd 	.word	0x08005ffd
 8005fbc:	0800600d 	.word	0x0800600d
 8005fc0:	0800600d 	.word	0x0800600d
 8005fc4:	0800600d 	.word	0x0800600d
 8005fc8:	0800600d 	.word	0x0800600d
 8005fcc:	0800600d 	.word	0x0800600d
 8005fd0:	0800600d 	.word	0x0800600d
 8005fd4:	0800600d 	.word	0x0800600d
 8005fd8:	08006005 	.word	0x08006005
 8005fdc:	2301      	movs	r3, #1
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe2:	e222      	b.n	800642a <UART_SetConfig+0x5a6>
 8005fe4:	2304      	movs	r3, #4
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fea:	e21e      	b.n	800642a <UART_SetConfig+0x5a6>
 8005fec:	2308      	movs	r3, #8
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ff2:	e21a      	b.n	800642a <UART_SetConfig+0x5a6>
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ffa:	e216      	b.n	800642a <UART_SetConfig+0x5a6>
 8005ffc:	2320      	movs	r3, #32
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006002:	e212      	b.n	800642a <UART_SetConfig+0x5a6>
 8006004:	2340      	movs	r3, #64	; 0x40
 8006006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800600a:	e20e      	b.n	800642a <UART_SetConfig+0x5a6>
 800600c:	2380      	movs	r3, #128	; 0x80
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006012:	e20a      	b.n	800642a <UART_SetConfig+0x5a6>
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a69      	ldr	r2, [pc, #420]	; (80061c0 <UART_SetConfig+0x33c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d130      	bne.n	8006080 <UART_SetConfig+0x1fc>
 800601e:	4b67      	ldr	r3, [pc, #412]	; (80061bc <UART_SetConfig+0x338>)
 8006020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	2b05      	cmp	r3, #5
 8006028:	d826      	bhi.n	8006078 <UART_SetConfig+0x1f4>
 800602a:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <UART_SetConfig+0x1ac>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	08006049 	.word	0x08006049
 8006034:	08006051 	.word	0x08006051
 8006038:	08006059 	.word	0x08006059
 800603c:	08006061 	.word	0x08006061
 8006040:	08006069 	.word	0x08006069
 8006044:	08006071 	.word	0x08006071
 8006048:	2300      	movs	r3, #0
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800604e:	e1ec      	b.n	800642a <UART_SetConfig+0x5a6>
 8006050:	2304      	movs	r3, #4
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006056:	e1e8      	b.n	800642a <UART_SetConfig+0x5a6>
 8006058:	2308      	movs	r3, #8
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800605e:	e1e4      	b.n	800642a <UART_SetConfig+0x5a6>
 8006060:	2310      	movs	r3, #16
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006066:	e1e0      	b.n	800642a <UART_SetConfig+0x5a6>
 8006068:	2320      	movs	r3, #32
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800606e:	e1dc      	b.n	800642a <UART_SetConfig+0x5a6>
 8006070:	2340      	movs	r3, #64	; 0x40
 8006072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006076:	e1d8      	b.n	800642a <UART_SetConfig+0x5a6>
 8006078:	2380      	movs	r3, #128	; 0x80
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607e:	e1d4      	b.n	800642a <UART_SetConfig+0x5a6>
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a4f      	ldr	r2, [pc, #316]	; (80061c4 <UART_SetConfig+0x340>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d130      	bne.n	80060ec <UART_SetConfig+0x268>
 800608a:	4b4c      	ldr	r3, [pc, #304]	; (80061bc <UART_SetConfig+0x338>)
 800608c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	2b05      	cmp	r3, #5
 8006094:	d826      	bhi.n	80060e4 <UART_SetConfig+0x260>
 8006096:	a201      	add	r2, pc, #4	; (adr r2, 800609c <UART_SetConfig+0x218>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060b5 	.word	0x080060b5
 80060a0:	080060bd 	.word	0x080060bd
 80060a4:	080060c5 	.word	0x080060c5
 80060a8:	080060cd 	.word	0x080060cd
 80060ac:	080060d5 	.word	0x080060d5
 80060b0:	080060dd 	.word	0x080060dd
 80060b4:	2300      	movs	r3, #0
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ba:	e1b6      	b.n	800642a <UART_SetConfig+0x5a6>
 80060bc:	2304      	movs	r3, #4
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c2:	e1b2      	b.n	800642a <UART_SetConfig+0x5a6>
 80060c4:	2308      	movs	r3, #8
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ca:	e1ae      	b.n	800642a <UART_SetConfig+0x5a6>
 80060cc:	2310      	movs	r3, #16
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060d2:	e1aa      	b.n	800642a <UART_SetConfig+0x5a6>
 80060d4:	2320      	movs	r3, #32
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060da:	e1a6      	b.n	800642a <UART_SetConfig+0x5a6>
 80060dc:	2340      	movs	r3, #64	; 0x40
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060e2:	e1a2      	b.n	800642a <UART_SetConfig+0x5a6>
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ea:	e19e      	b.n	800642a <UART_SetConfig+0x5a6>
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a35      	ldr	r2, [pc, #212]	; (80061c8 <UART_SetConfig+0x344>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d130      	bne.n	8006158 <UART_SetConfig+0x2d4>
 80060f6:	4b31      	ldr	r3, [pc, #196]	; (80061bc <UART_SetConfig+0x338>)
 80060f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	2b05      	cmp	r3, #5
 8006100:	d826      	bhi.n	8006150 <UART_SetConfig+0x2cc>
 8006102:	a201      	add	r2, pc, #4	; (adr r2, 8006108 <UART_SetConfig+0x284>)
 8006104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006108:	08006121 	.word	0x08006121
 800610c:	08006129 	.word	0x08006129
 8006110:	08006131 	.word	0x08006131
 8006114:	08006139 	.word	0x08006139
 8006118:	08006141 	.word	0x08006141
 800611c:	08006149 	.word	0x08006149
 8006120:	2300      	movs	r3, #0
 8006122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006126:	e180      	b.n	800642a <UART_SetConfig+0x5a6>
 8006128:	2304      	movs	r3, #4
 800612a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612e:	e17c      	b.n	800642a <UART_SetConfig+0x5a6>
 8006130:	2308      	movs	r3, #8
 8006132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006136:	e178      	b.n	800642a <UART_SetConfig+0x5a6>
 8006138:	2310      	movs	r3, #16
 800613a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800613e:	e174      	b.n	800642a <UART_SetConfig+0x5a6>
 8006140:	2320      	movs	r3, #32
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006146:	e170      	b.n	800642a <UART_SetConfig+0x5a6>
 8006148:	2340      	movs	r3, #64	; 0x40
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800614e:	e16c      	b.n	800642a <UART_SetConfig+0x5a6>
 8006150:	2380      	movs	r3, #128	; 0x80
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006156:	e168      	b.n	800642a <UART_SetConfig+0x5a6>
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1b      	ldr	r2, [pc, #108]	; (80061cc <UART_SetConfig+0x348>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d142      	bne.n	80061e8 <UART_SetConfig+0x364>
 8006162:	4b16      	ldr	r3, [pc, #88]	; (80061bc <UART_SetConfig+0x338>)
 8006164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	2b05      	cmp	r3, #5
 800616c:	d838      	bhi.n	80061e0 <UART_SetConfig+0x35c>
 800616e:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <UART_SetConfig+0x2f0>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	0800618d 	.word	0x0800618d
 8006178:	08006195 	.word	0x08006195
 800617c:	0800619d 	.word	0x0800619d
 8006180:	080061a5 	.word	0x080061a5
 8006184:	080061d1 	.word	0x080061d1
 8006188:	080061d9 	.word	0x080061d9
 800618c:	2300      	movs	r3, #0
 800618e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006192:	e14a      	b.n	800642a <UART_SetConfig+0x5a6>
 8006194:	2304      	movs	r3, #4
 8006196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619a:	e146      	b.n	800642a <UART_SetConfig+0x5a6>
 800619c:	2308      	movs	r3, #8
 800619e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061a2:	e142      	b.n	800642a <UART_SetConfig+0x5a6>
 80061a4:	2310      	movs	r3, #16
 80061a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061aa:	e13e      	b.n	800642a <UART_SetConfig+0x5a6>
 80061ac:	cfff69f3 	.word	0xcfff69f3
 80061b0:	58000c00 	.word	0x58000c00
 80061b4:	11fff4ff 	.word	0x11fff4ff
 80061b8:	40011000 	.word	0x40011000
 80061bc:	58024400 	.word	0x58024400
 80061c0:	40004400 	.word	0x40004400
 80061c4:	40004800 	.word	0x40004800
 80061c8:	40004c00 	.word	0x40004c00
 80061cc:	40005000 	.word	0x40005000
 80061d0:	2320      	movs	r3, #32
 80061d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061d6:	e128      	b.n	800642a <UART_SetConfig+0x5a6>
 80061d8:	2340      	movs	r3, #64	; 0x40
 80061da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061de:	e124      	b.n	800642a <UART_SetConfig+0x5a6>
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e6:	e120      	b.n	800642a <UART_SetConfig+0x5a6>
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4acb      	ldr	r2, [pc, #812]	; (800651c <UART_SetConfig+0x698>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d176      	bne.n	80062e0 <UART_SetConfig+0x45c>
 80061f2:	4bcb      	ldr	r3, [pc, #812]	; (8006520 <UART_SetConfig+0x69c>)
 80061f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061fa:	2b28      	cmp	r3, #40	; 0x28
 80061fc:	d86c      	bhi.n	80062d8 <UART_SetConfig+0x454>
 80061fe:	a201      	add	r2, pc, #4	; (adr r2, 8006204 <UART_SetConfig+0x380>)
 8006200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006204:	080062a9 	.word	0x080062a9
 8006208:	080062d9 	.word	0x080062d9
 800620c:	080062d9 	.word	0x080062d9
 8006210:	080062d9 	.word	0x080062d9
 8006214:	080062d9 	.word	0x080062d9
 8006218:	080062d9 	.word	0x080062d9
 800621c:	080062d9 	.word	0x080062d9
 8006220:	080062d9 	.word	0x080062d9
 8006224:	080062b1 	.word	0x080062b1
 8006228:	080062d9 	.word	0x080062d9
 800622c:	080062d9 	.word	0x080062d9
 8006230:	080062d9 	.word	0x080062d9
 8006234:	080062d9 	.word	0x080062d9
 8006238:	080062d9 	.word	0x080062d9
 800623c:	080062d9 	.word	0x080062d9
 8006240:	080062d9 	.word	0x080062d9
 8006244:	080062b9 	.word	0x080062b9
 8006248:	080062d9 	.word	0x080062d9
 800624c:	080062d9 	.word	0x080062d9
 8006250:	080062d9 	.word	0x080062d9
 8006254:	080062d9 	.word	0x080062d9
 8006258:	080062d9 	.word	0x080062d9
 800625c:	080062d9 	.word	0x080062d9
 8006260:	080062d9 	.word	0x080062d9
 8006264:	080062c1 	.word	0x080062c1
 8006268:	080062d9 	.word	0x080062d9
 800626c:	080062d9 	.word	0x080062d9
 8006270:	080062d9 	.word	0x080062d9
 8006274:	080062d9 	.word	0x080062d9
 8006278:	080062d9 	.word	0x080062d9
 800627c:	080062d9 	.word	0x080062d9
 8006280:	080062d9 	.word	0x080062d9
 8006284:	080062c9 	.word	0x080062c9
 8006288:	080062d9 	.word	0x080062d9
 800628c:	080062d9 	.word	0x080062d9
 8006290:	080062d9 	.word	0x080062d9
 8006294:	080062d9 	.word	0x080062d9
 8006298:	080062d9 	.word	0x080062d9
 800629c:	080062d9 	.word	0x080062d9
 80062a0:	080062d9 	.word	0x080062d9
 80062a4:	080062d1 	.word	0x080062d1
 80062a8:	2301      	movs	r3, #1
 80062aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ae:	e0bc      	b.n	800642a <UART_SetConfig+0x5a6>
 80062b0:	2304      	movs	r3, #4
 80062b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062b6:	e0b8      	b.n	800642a <UART_SetConfig+0x5a6>
 80062b8:	2308      	movs	r3, #8
 80062ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062be:	e0b4      	b.n	800642a <UART_SetConfig+0x5a6>
 80062c0:	2310      	movs	r3, #16
 80062c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062c6:	e0b0      	b.n	800642a <UART_SetConfig+0x5a6>
 80062c8:	2320      	movs	r3, #32
 80062ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062ce:	e0ac      	b.n	800642a <UART_SetConfig+0x5a6>
 80062d0:	2340      	movs	r3, #64	; 0x40
 80062d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062d6:	e0a8      	b.n	800642a <UART_SetConfig+0x5a6>
 80062d8:	2380      	movs	r3, #128	; 0x80
 80062da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80062de:	e0a4      	b.n	800642a <UART_SetConfig+0x5a6>
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a8f      	ldr	r2, [pc, #572]	; (8006524 <UART_SetConfig+0x6a0>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d130      	bne.n	800634c <UART_SetConfig+0x4c8>
 80062ea:	4b8d      	ldr	r3, [pc, #564]	; (8006520 <UART_SetConfig+0x69c>)
 80062ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	2b05      	cmp	r3, #5
 80062f4:	d826      	bhi.n	8006344 <UART_SetConfig+0x4c0>
 80062f6:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <UART_SetConfig+0x478>)
 80062f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fc:	08006315 	.word	0x08006315
 8006300:	0800631d 	.word	0x0800631d
 8006304:	08006325 	.word	0x08006325
 8006308:	0800632d 	.word	0x0800632d
 800630c:	08006335 	.word	0x08006335
 8006310:	0800633d 	.word	0x0800633d
 8006314:	2300      	movs	r3, #0
 8006316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800631a:	e086      	b.n	800642a <UART_SetConfig+0x5a6>
 800631c:	2304      	movs	r3, #4
 800631e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006322:	e082      	b.n	800642a <UART_SetConfig+0x5a6>
 8006324:	2308      	movs	r3, #8
 8006326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800632a:	e07e      	b.n	800642a <UART_SetConfig+0x5a6>
 800632c:	2310      	movs	r3, #16
 800632e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006332:	e07a      	b.n	800642a <UART_SetConfig+0x5a6>
 8006334:	2320      	movs	r3, #32
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800633a:	e076      	b.n	800642a <UART_SetConfig+0x5a6>
 800633c:	2340      	movs	r3, #64	; 0x40
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006342:	e072      	b.n	800642a <UART_SetConfig+0x5a6>
 8006344:	2380      	movs	r3, #128	; 0x80
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800634a:	e06e      	b.n	800642a <UART_SetConfig+0x5a6>
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a75      	ldr	r2, [pc, #468]	; (8006528 <UART_SetConfig+0x6a4>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d130      	bne.n	80063b8 <UART_SetConfig+0x534>
 8006356:	4b72      	ldr	r3, [pc, #456]	; (8006520 <UART_SetConfig+0x69c>)
 8006358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	2b05      	cmp	r3, #5
 8006360:	d826      	bhi.n	80063b0 <UART_SetConfig+0x52c>
 8006362:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <UART_SetConfig+0x4e4>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	08006381 	.word	0x08006381
 800636c:	08006389 	.word	0x08006389
 8006370:	08006391 	.word	0x08006391
 8006374:	08006399 	.word	0x08006399
 8006378:	080063a1 	.word	0x080063a1
 800637c:	080063a9 	.word	0x080063a9
 8006380:	2300      	movs	r3, #0
 8006382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006386:	e050      	b.n	800642a <UART_SetConfig+0x5a6>
 8006388:	2304      	movs	r3, #4
 800638a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638e:	e04c      	b.n	800642a <UART_SetConfig+0x5a6>
 8006390:	2308      	movs	r3, #8
 8006392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006396:	e048      	b.n	800642a <UART_SetConfig+0x5a6>
 8006398:	2310      	movs	r3, #16
 800639a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800639e:	e044      	b.n	800642a <UART_SetConfig+0x5a6>
 80063a0:	2320      	movs	r3, #32
 80063a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063a6:	e040      	b.n	800642a <UART_SetConfig+0x5a6>
 80063a8:	2340      	movs	r3, #64	; 0x40
 80063aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ae:	e03c      	b.n	800642a <UART_SetConfig+0x5a6>
 80063b0:	2380      	movs	r3, #128	; 0x80
 80063b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063b6:	e038      	b.n	800642a <UART_SetConfig+0x5a6>
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a5b      	ldr	r2, [pc, #364]	; (800652c <UART_SetConfig+0x6a8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d130      	bne.n	8006424 <UART_SetConfig+0x5a0>
 80063c2:	4b57      	ldr	r3, [pc, #348]	; (8006520 <UART_SetConfig+0x69c>)
 80063c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	2b05      	cmp	r3, #5
 80063cc:	d826      	bhi.n	800641c <UART_SetConfig+0x598>
 80063ce:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <UART_SetConfig+0x550>)
 80063d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d4:	080063ed 	.word	0x080063ed
 80063d8:	080063f5 	.word	0x080063f5
 80063dc:	080063fd 	.word	0x080063fd
 80063e0:	08006405 	.word	0x08006405
 80063e4:	0800640d 	.word	0x0800640d
 80063e8:	08006415 	.word	0x08006415
 80063ec:	2302      	movs	r3, #2
 80063ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f2:	e01a      	b.n	800642a <UART_SetConfig+0x5a6>
 80063f4:	2304      	movs	r3, #4
 80063f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fa:	e016      	b.n	800642a <UART_SetConfig+0x5a6>
 80063fc:	2308      	movs	r3, #8
 80063fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006402:	e012      	b.n	800642a <UART_SetConfig+0x5a6>
 8006404:	2310      	movs	r3, #16
 8006406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800640a:	e00e      	b.n	800642a <UART_SetConfig+0x5a6>
 800640c:	2320      	movs	r3, #32
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006412:	e00a      	b.n	800642a <UART_SetConfig+0x5a6>
 8006414:	2340      	movs	r3, #64	; 0x40
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800641a:	e006      	b.n	800642a <UART_SetConfig+0x5a6>
 800641c:	2380      	movs	r3, #128	; 0x80
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006422:	e002      	b.n	800642a <UART_SetConfig+0x5a6>
 8006424:	2380      	movs	r3, #128	; 0x80
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a3f      	ldr	r2, [pc, #252]	; (800652c <UART_SetConfig+0x6a8>)
 8006430:	4293      	cmp	r3, r2
 8006432:	f040 80f8 	bne.w	8006626 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006436:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800643a:	2b20      	cmp	r3, #32
 800643c:	dc46      	bgt.n	80064cc <UART_SetConfig+0x648>
 800643e:	2b02      	cmp	r3, #2
 8006440:	f2c0 8082 	blt.w	8006548 <UART_SetConfig+0x6c4>
 8006444:	3b02      	subs	r3, #2
 8006446:	2b1e      	cmp	r3, #30
 8006448:	d87e      	bhi.n	8006548 <UART_SetConfig+0x6c4>
 800644a:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <UART_SetConfig+0x5cc>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	080064d3 	.word	0x080064d3
 8006454:	08006549 	.word	0x08006549
 8006458:	080064db 	.word	0x080064db
 800645c:	08006549 	.word	0x08006549
 8006460:	08006549 	.word	0x08006549
 8006464:	08006549 	.word	0x08006549
 8006468:	080064eb 	.word	0x080064eb
 800646c:	08006549 	.word	0x08006549
 8006470:	08006549 	.word	0x08006549
 8006474:	08006549 	.word	0x08006549
 8006478:	08006549 	.word	0x08006549
 800647c:	08006549 	.word	0x08006549
 8006480:	08006549 	.word	0x08006549
 8006484:	08006549 	.word	0x08006549
 8006488:	080064fb 	.word	0x080064fb
 800648c:	08006549 	.word	0x08006549
 8006490:	08006549 	.word	0x08006549
 8006494:	08006549 	.word	0x08006549
 8006498:	08006549 	.word	0x08006549
 800649c:	08006549 	.word	0x08006549
 80064a0:	08006549 	.word	0x08006549
 80064a4:	08006549 	.word	0x08006549
 80064a8:	08006549 	.word	0x08006549
 80064ac:	08006549 	.word	0x08006549
 80064b0:	08006549 	.word	0x08006549
 80064b4:	08006549 	.word	0x08006549
 80064b8:	08006549 	.word	0x08006549
 80064bc:	08006549 	.word	0x08006549
 80064c0:	08006549 	.word	0x08006549
 80064c4:	08006549 	.word	0x08006549
 80064c8:	0800653b 	.word	0x0800653b
 80064cc:	2b40      	cmp	r3, #64	; 0x40
 80064ce:	d037      	beq.n	8006540 <UART_SetConfig+0x6bc>
 80064d0:	e03a      	b.n	8006548 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80064d2:	f7fe f821 	bl	8004518 <HAL_RCCEx_GetD3PCLK1Freq>
 80064d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064d8:	e03c      	b.n	8006554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe f830 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064e8:	e034      	b.n	8006554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064ea:	f107 0318 	add.w	r3, r7, #24
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fe f97c 	bl	80047ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064f8:	e02c      	b.n	8006554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064fa:	4b09      	ldr	r3, [pc, #36]	; (8006520 <UART_SetConfig+0x69c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b00      	cmp	r3, #0
 8006504:	d016      	beq.n	8006534 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006506:	4b06      	ldr	r3, [pc, #24]	; (8006520 <UART_SetConfig+0x69c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	08db      	lsrs	r3, r3, #3
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	4a07      	ldr	r2, [pc, #28]	; (8006530 <UART_SetConfig+0x6ac>)
 8006512:	fa22 f303 	lsr.w	r3, r2, r3
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006518:	e01c      	b.n	8006554 <UART_SetConfig+0x6d0>
 800651a:	bf00      	nop
 800651c:	40011400 	.word	0x40011400
 8006520:	58024400 	.word	0x58024400
 8006524:	40007800 	.word	0x40007800
 8006528:	40007c00 	.word	0x40007c00
 800652c:	58000c00 	.word	0x58000c00
 8006530:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006534:	4b9d      	ldr	r3, [pc, #628]	; (80067ac <UART_SetConfig+0x928>)
 8006536:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006538:	e00c      	b.n	8006554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800653a:	4b9d      	ldr	r3, [pc, #628]	; (80067b0 <UART_SetConfig+0x92c>)
 800653c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800653e:	e009      	b.n	8006554 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006540:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006546:	e005      	b.n	8006554 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006552:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 81de 	beq.w	8006918 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	4a94      	ldr	r2, [pc, #592]	; (80067b4 <UART_SetConfig+0x930>)
 8006562:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006566:	461a      	mov	r2, r3
 8006568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656a:	fbb3 f3f2 	udiv	r3, r3, r2
 800656e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	4613      	mov	r3, r2
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	4413      	add	r3, r2
 800657a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800657c:	429a      	cmp	r2, r3
 800657e:	d305      	bcc.n	800658c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006588:	429a      	cmp	r2, r3
 800658a:	d903      	bls.n	8006594 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006592:	e1c1      	b.n	8006918 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006596:	2200      	movs	r2, #0
 8006598:	60bb      	str	r3, [r7, #8]
 800659a:	60fa      	str	r2, [r7, #12]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	4a84      	ldr	r2, [pc, #528]	; (80067b4 <UART_SetConfig+0x930>)
 80065a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	2200      	movs	r2, #0
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	607a      	str	r2, [r7, #4]
 80065ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065b6:	f7f9 fee3 	bl	8000380 <__aeabi_uldivmod>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4610      	mov	r0, r2
 80065c0:	4619      	mov	r1, r3
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	f04f 0300 	mov.w	r3, #0
 80065ca:	020b      	lsls	r3, r1, #8
 80065cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065d0:	0202      	lsls	r2, r0, #8
 80065d2:	6979      	ldr	r1, [r7, #20]
 80065d4:	6849      	ldr	r1, [r1, #4]
 80065d6:	0849      	lsrs	r1, r1, #1
 80065d8:	2000      	movs	r0, #0
 80065da:	460c      	mov	r4, r1
 80065dc:	4605      	mov	r5, r0
 80065de:	eb12 0804 	adds.w	r8, r2, r4
 80065e2:	eb43 0905 	adc.w	r9, r3, r5
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	469a      	mov	sl, r3
 80065ee:	4693      	mov	fp, r2
 80065f0:	4652      	mov	r2, sl
 80065f2:	465b      	mov	r3, fp
 80065f4:	4640      	mov	r0, r8
 80065f6:	4649      	mov	r1, r9
 80065f8:	f7f9 fec2 	bl	8000380 <__aeabi_uldivmod>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4613      	mov	r3, r2
 8006602:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800660a:	d308      	bcc.n	800661e <UART_SetConfig+0x79a>
 800660c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006612:	d204      	bcs.n	800661e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800661a:	60da      	str	r2, [r3, #12]
 800661c:	e17c      	b.n	8006918 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006624:	e178      	b.n	8006918 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800662e:	f040 80c5 	bne.w	80067bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006632:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006636:	2b20      	cmp	r3, #32
 8006638:	dc48      	bgt.n	80066cc <UART_SetConfig+0x848>
 800663a:	2b00      	cmp	r3, #0
 800663c:	db7b      	blt.n	8006736 <UART_SetConfig+0x8b2>
 800663e:	2b20      	cmp	r3, #32
 8006640:	d879      	bhi.n	8006736 <UART_SetConfig+0x8b2>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0x7c4>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	080066d3 	.word	0x080066d3
 800664c:	080066db 	.word	0x080066db
 8006650:	08006737 	.word	0x08006737
 8006654:	08006737 	.word	0x08006737
 8006658:	080066e3 	.word	0x080066e3
 800665c:	08006737 	.word	0x08006737
 8006660:	08006737 	.word	0x08006737
 8006664:	08006737 	.word	0x08006737
 8006668:	080066f3 	.word	0x080066f3
 800666c:	08006737 	.word	0x08006737
 8006670:	08006737 	.word	0x08006737
 8006674:	08006737 	.word	0x08006737
 8006678:	08006737 	.word	0x08006737
 800667c:	08006737 	.word	0x08006737
 8006680:	08006737 	.word	0x08006737
 8006684:	08006737 	.word	0x08006737
 8006688:	08006703 	.word	0x08006703
 800668c:	08006737 	.word	0x08006737
 8006690:	08006737 	.word	0x08006737
 8006694:	08006737 	.word	0x08006737
 8006698:	08006737 	.word	0x08006737
 800669c:	08006737 	.word	0x08006737
 80066a0:	08006737 	.word	0x08006737
 80066a4:	08006737 	.word	0x08006737
 80066a8:	08006737 	.word	0x08006737
 80066ac:	08006737 	.word	0x08006737
 80066b0:	08006737 	.word	0x08006737
 80066b4:	08006737 	.word	0x08006737
 80066b8:	08006737 	.word	0x08006737
 80066bc:	08006737 	.word	0x08006737
 80066c0:	08006737 	.word	0x08006737
 80066c4:	08006737 	.word	0x08006737
 80066c8:	08006729 	.word	0x08006729
 80066cc:	2b40      	cmp	r3, #64	; 0x40
 80066ce:	d02e      	beq.n	800672e <UART_SetConfig+0x8aa>
 80066d0:	e031      	b.n	8006736 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066d2:	f7fc fceb 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 80066d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80066d8:	e033      	b.n	8006742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066da:	f7fc fcfd 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
 80066de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80066e0:	e02f      	b.n	8006742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fd ff2c 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066f0:	e027      	b.n	8006742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066f2:	f107 0318 	add.w	r3, r7, #24
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe f878 	bl	80047ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006700:	e01f      	b.n	8006742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006702:	4b2d      	ldr	r3, [pc, #180]	; (80067b8 <UART_SetConfig+0x934>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d009      	beq.n	8006722 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800670e:	4b2a      	ldr	r3, [pc, #168]	; (80067b8 <UART_SetConfig+0x934>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	08db      	lsrs	r3, r3, #3
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	4a24      	ldr	r2, [pc, #144]	; (80067ac <UART_SetConfig+0x928>)
 800671a:	fa22 f303 	lsr.w	r3, r2, r3
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006720:	e00f      	b.n	8006742 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006722:	4b22      	ldr	r3, [pc, #136]	; (80067ac <UART_SetConfig+0x928>)
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006726:	e00c      	b.n	8006742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006728:	4b21      	ldr	r3, [pc, #132]	; (80067b0 <UART_SetConfig+0x92c>)
 800672a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800672c:	e009      	b.n	8006742 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800672e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006734:	e005      	b.n	8006742 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006740:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 80e7 	beq.w	8006918 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	4a19      	ldr	r2, [pc, #100]	; (80067b4 <UART_SetConfig+0x930>)
 8006750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006754:	461a      	mov	r2, r3
 8006756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006758:	fbb3 f3f2 	udiv	r3, r3, r2
 800675c:	005a      	lsls	r2, r3, #1
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	441a      	add	r2, r3
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	fbb2 f3f3 	udiv	r3, r2, r3
 800676e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006772:	2b0f      	cmp	r3, #15
 8006774:	d916      	bls.n	80067a4 <UART_SetConfig+0x920>
 8006776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800677c:	d212      	bcs.n	80067a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	b29b      	uxth	r3, r3
 8006782:	f023 030f 	bic.w	r3, r3, #15
 8006786:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678a:	085b      	lsrs	r3, r3, #1
 800678c:	b29b      	uxth	r3, r3
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	b29a      	uxth	r2, r3
 8006794:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006796:	4313      	orrs	r3, r2
 8006798:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80067a0:	60da      	str	r2, [r3, #12]
 80067a2:	e0b9      	b.n	8006918 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80067aa:	e0b5      	b.n	8006918 <UART_SetConfig+0xa94>
 80067ac:	03d09000 	.word	0x03d09000
 80067b0:	003d0900 	.word	0x003d0900
 80067b4:	08008124 	.word	0x08008124
 80067b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80067bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	dc49      	bgt.n	8006858 <UART_SetConfig+0x9d4>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	db7c      	blt.n	80068c2 <UART_SetConfig+0xa3e>
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d87a      	bhi.n	80068c2 <UART_SetConfig+0xa3e>
 80067cc:	a201      	add	r2, pc, #4	; (adr r2, 80067d4 <UART_SetConfig+0x950>)
 80067ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d2:	bf00      	nop
 80067d4:	0800685f 	.word	0x0800685f
 80067d8:	08006867 	.word	0x08006867
 80067dc:	080068c3 	.word	0x080068c3
 80067e0:	080068c3 	.word	0x080068c3
 80067e4:	0800686f 	.word	0x0800686f
 80067e8:	080068c3 	.word	0x080068c3
 80067ec:	080068c3 	.word	0x080068c3
 80067f0:	080068c3 	.word	0x080068c3
 80067f4:	0800687f 	.word	0x0800687f
 80067f8:	080068c3 	.word	0x080068c3
 80067fc:	080068c3 	.word	0x080068c3
 8006800:	080068c3 	.word	0x080068c3
 8006804:	080068c3 	.word	0x080068c3
 8006808:	080068c3 	.word	0x080068c3
 800680c:	080068c3 	.word	0x080068c3
 8006810:	080068c3 	.word	0x080068c3
 8006814:	0800688f 	.word	0x0800688f
 8006818:	080068c3 	.word	0x080068c3
 800681c:	080068c3 	.word	0x080068c3
 8006820:	080068c3 	.word	0x080068c3
 8006824:	080068c3 	.word	0x080068c3
 8006828:	080068c3 	.word	0x080068c3
 800682c:	080068c3 	.word	0x080068c3
 8006830:	080068c3 	.word	0x080068c3
 8006834:	080068c3 	.word	0x080068c3
 8006838:	080068c3 	.word	0x080068c3
 800683c:	080068c3 	.word	0x080068c3
 8006840:	080068c3 	.word	0x080068c3
 8006844:	080068c3 	.word	0x080068c3
 8006848:	080068c3 	.word	0x080068c3
 800684c:	080068c3 	.word	0x080068c3
 8006850:	080068c3 	.word	0x080068c3
 8006854:	080068b5 	.word	0x080068b5
 8006858:	2b40      	cmp	r3, #64	; 0x40
 800685a:	d02e      	beq.n	80068ba <UART_SetConfig+0xa36>
 800685c:	e031      	b.n	80068c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800685e:	f7fc fc25 	bl	80030ac <HAL_RCC_GetPCLK1Freq>
 8006862:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006864:	e033      	b.n	80068ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006866:	f7fc fc37 	bl	80030d8 <HAL_RCC_GetPCLK2Freq>
 800686a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800686c:	e02f      	b.n	80068ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800686e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006872:	4618      	mov	r0, r3
 8006874:	f7fd fe66 	bl	8004544 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800687c:	e027      	b.n	80068ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800687e:	f107 0318 	add.w	r3, r7, #24
 8006882:	4618      	mov	r0, r3
 8006884:	f7fd ffb2 	bl	80047ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800688c:	e01f      	b.n	80068ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800688e:	4b2d      	ldr	r3, [pc, #180]	; (8006944 <UART_SetConfig+0xac0>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0320 	and.w	r3, r3, #32
 8006896:	2b00      	cmp	r3, #0
 8006898:	d009      	beq.n	80068ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800689a:	4b2a      	ldr	r3, [pc, #168]	; (8006944 <UART_SetConfig+0xac0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	08db      	lsrs	r3, r3, #3
 80068a0:	f003 0303 	and.w	r3, r3, #3
 80068a4:	4a28      	ldr	r2, [pc, #160]	; (8006948 <UART_SetConfig+0xac4>)
 80068a6:	fa22 f303 	lsr.w	r3, r2, r3
 80068aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80068ac:	e00f      	b.n	80068ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80068ae:	4b26      	ldr	r3, [pc, #152]	; (8006948 <UART_SetConfig+0xac4>)
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b2:	e00c      	b.n	80068ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80068b4:	4b25      	ldr	r3, [pc, #148]	; (800694c <UART_SetConfig+0xac8>)
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b8:	e009      	b.n	80068ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068c0:	e005      	b.n	80068ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80068cc:	bf00      	nop
    }

    if (pclk != 0U)
 80068ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d021      	beq.n	8006918 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d8:	4a1d      	ldr	r2, [pc, #116]	; (8006950 <UART_SetConfig+0xacc>)
 80068da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068de:	461a      	mov	r2, r3
 80068e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	085b      	lsrs	r3, r3, #1
 80068ec:	441a      	add	r2, r3
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	2b0f      	cmp	r3, #15
 80068fc:	d909      	bls.n	8006912 <UART_SetConfig+0xa8e>
 80068fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006904:	d205      	bcs.n	8006912 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006908:	b29a      	uxth	r2, r3
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	60da      	str	r2, [r3, #12]
 8006910:	e002      	b.n	8006918 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2201      	movs	r2, #1
 800691c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	2201      	movs	r2, #1
 8006924:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2200      	movs	r2, #0
 800692c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2200      	movs	r2, #0
 8006932:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006934:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006938:	4618      	mov	r0, r3
 800693a:	3748      	adds	r7, #72	; 0x48
 800693c:	46bd      	mov	sp, r7
 800693e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006942:	bf00      	nop
 8006944:	58024400 	.word	0x58024400
 8006948:	03d09000 	.word	0x03d09000
 800694c:	003d0900 	.word	0x003d0900
 8006950:	08008124 	.word	0x08008124

08006954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00a      	beq.n	800697e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00a      	beq.n	80069a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00a      	beq.n	80069e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e8:	f003 0310 	and.w	r3, r3, #16
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00a      	beq.n	8006a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	430a      	orrs	r2, r1
 8006a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00a      	beq.n	8006a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01a      	beq.n	8006a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a52:	d10a      	bne.n	8006a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	605a      	str	r2, [r3, #4]
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b098      	sub	sp, #96	; 0x60
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006aa8:	f7fa ff76 	bl	8001998 <HAL_GetTick>
 8006aac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d12f      	bne.n	8006b1c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006abc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f88e 	bl	8006bec <UART_WaitOnFlagUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d022      	beq.n	8006b1c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aea:	653b      	str	r3, [r7, #80]	; 0x50
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	461a      	mov	r2, r3
 8006af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006af4:	647b      	str	r3, [r7, #68]	; 0x44
 8006af6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006afa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e6      	bne.n	8006ad6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e063      	b.n	8006be4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d149      	bne.n	8006bbe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b2a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b32:	2200      	movs	r2, #0
 8006b34:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f857 	bl	8006bec <UART_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d03c      	beq.n	8006bbe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	623b      	str	r3, [r7, #32]
   return(result);
 8006b52:	6a3b      	ldr	r3, [r7, #32]
 8006b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b62:	633b      	str	r3, [r7, #48]	; 0x30
 8006b64:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b6a:	e841 2300 	strex	r3, r2, [r1]
 8006b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1e6      	bne.n	8006b44 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f023 0301 	bic.w	r3, r3, #1
 8006b8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	3308      	adds	r3, #8
 8006b94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b96:	61fa      	str	r2, [r7, #28]
 8006b98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	69b9      	ldr	r1, [r7, #24]
 8006b9c:	69fa      	ldr	r2, [r7, #28]
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e5      	bne.n	8006b76 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e012      	b.n	8006be4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3758      	adds	r7, #88	; 0x58
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bfc:	e049      	b.n	8006c92 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c04:	d045      	beq.n	8006c92 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c06:	f7fa fec7 	bl	8001998 <HAL_GetTick>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d302      	bcc.n	8006c1c <UART_WaitOnFlagUntilTimeout+0x30>
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e048      	b.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d031      	beq.n	8006c92 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	d110      	bne.n	8006c5e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2208      	movs	r2, #8
 8006c42:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 f839 	bl	8006cbc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2208      	movs	r2, #8
 8006c4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e029      	b.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c6c:	d111      	bne.n	8006c92 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 f81f 	bl	8006cbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2220      	movs	r2, #32
 8006c82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e00f      	b.n	8006cb2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	bf0c      	ite	eq
 8006ca2:	2301      	moveq	r3, #1
 8006ca4:	2300      	movne	r3, #0
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d0a6      	beq.n	8006bfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
	...

08006cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b095      	sub	sp, #84	; 0x54
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce2:	643b      	str	r3, [r7, #64]	; 0x40
 8006ce4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ce8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e6      	bne.n	8006cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	3308      	adds	r3, #8
 8006cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	e853 3f00 	ldrex	r3, [r3]
 8006d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d06:	69fa      	ldr	r2, [r7, #28]
 8006d08:	4b1e      	ldr	r3, [pc, #120]	; (8006d84 <UART_EndRxTransfer+0xc8>)
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3308      	adds	r3, #8
 8006d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d1e:	e841 2300 	strex	r3, r2, [r1]
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1e5      	bne.n	8006cf6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d118      	bne.n	8006d64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	f023 0310 	bic.w	r3, r3, #16
 8006d46:	647b      	str	r3, [r7, #68]	; 0x44
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d50:	61bb      	str	r3, [r7, #24]
 8006d52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	6979      	ldr	r1, [r7, #20]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e6      	bne.n	8006d32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006d78:	bf00      	nop
 8006d7a:	3754      	adds	r7, #84	; 0x54
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	effffffe 	.word	0xeffffffe

08006d88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d101      	bne.n	8006d9e <HAL_UARTEx_DisableFifoMode+0x16>
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e027      	b.n	8006dee <HAL_UARTEx_DisableFifoMode+0x66>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2224      	movs	r2, #36	; 0x24
 8006daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0201 	bic.w	r2, r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006dcc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d101      	bne.n	8006e12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006e0e:	2302      	movs	r3, #2
 8006e10:	e02d      	b.n	8006e6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2224      	movs	r2, #36	; 0x24
 8006e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0201 	bic.w	r2, r2, #1
 8006e38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f850 	bl	8006ef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b084      	sub	sp, #16
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d101      	bne.n	8006e8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	e02d      	b.n	8006eea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2224      	movs	r2, #36	; 0x24
 8006e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0201 	bic.w	r2, r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f812 	bl	8006ef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d108      	bne.n	8006f16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006f14:	e031      	b.n	8006f7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006f16:	2310      	movs	r3, #16
 8006f18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006f1a:	2310      	movs	r3, #16
 8006f1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	0e5b      	lsrs	r3, r3, #25
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	0f5b      	lsrs	r3, r3, #29
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	f003 0307 	and.w	r3, r3, #7
 8006f3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f3e:	7bbb      	ldrb	r3, [r7, #14]
 8006f40:	7b3a      	ldrb	r2, [r7, #12]
 8006f42:	4911      	ldr	r1, [pc, #68]	; (8006f88 <UARTEx_SetNbDataToProcess+0x94>)
 8006f44:	5c8a      	ldrb	r2, [r1, r2]
 8006f46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f4a:	7b3a      	ldrb	r2, [r7, #12]
 8006f4c:	490f      	ldr	r1, [pc, #60]	; (8006f8c <UARTEx_SetNbDataToProcess+0x98>)
 8006f4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f50:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	7b7a      	ldrb	r2, [r7, #13]
 8006f60:	4909      	ldr	r1, [pc, #36]	; (8006f88 <UARTEx_SetNbDataToProcess+0x94>)
 8006f62:	5c8a      	ldrb	r2, [r1, r2]
 8006f64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f68:	7b7a      	ldrb	r2, [r7, #13]
 8006f6a:	4908      	ldr	r1, [pc, #32]	; (8006f8c <UARTEx_SetNbDataToProcess+0x98>)
 8006f6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f7a:	bf00      	nop
 8006f7c:	3714      	adds	r7, #20
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	0800813c 	.word	0x0800813c
 8006f8c:	08008144 	.word	0x08008144

08006f90 <std>:
 8006f90:	2300      	movs	r3, #0
 8006f92:	b510      	push	{r4, lr}
 8006f94:	4604      	mov	r4, r0
 8006f96:	e9c0 3300 	strd	r3, r3, [r0]
 8006f9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f9e:	6083      	str	r3, [r0, #8]
 8006fa0:	8181      	strh	r1, [r0, #12]
 8006fa2:	6643      	str	r3, [r0, #100]	; 0x64
 8006fa4:	81c2      	strh	r2, [r0, #14]
 8006fa6:	6183      	str	r3, [r0, #24]
 8006fa8:	4619      	mov	r1, r3
 8006faa:	2208      	movs	r2, #8
 8006fac:	305c      	adds	r0, #92	; 0x5c
 8006fae:	f000 f9ff 	bl	80073b0 <memset>
 8006fb2:	4b0d      	ldr	r3, [pc, #52]	; (8006fe8 <std+0x58>)
 8006fb4:	6263      	str	r3, [r4, #36]	; 0x24
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	; (8006fec <std+0x5c>)
 8006fb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fba:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <std+0x60>)
 8006fbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fbe:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <std+0x64>)
 8006fc0:	6323      	str	r3, [r4, #48]	; 0x30
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	; (8006ff8 <std+0x68>)
 8006fc4:	6224      	str	r4, [r4, #32]
 8006fc6:	429c      	cmp	r4, r3
 8006fc8:	d006      	beq.n	8006fd8 <std+0x48>
 8006fca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006fce:	4294      	cmp	r4, r2
 8006fd0:	d002      	beq.n	8006fd8 <std+0x48>
 8006fd2:	33d0      	adds	r3, #208	; 0xd0
 8006fd4:	429c      	cmp	r4, r3
 8006fd6:	d105      	bne.n	8006fe4 <std+0x54>
 8006fd8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fe0:	f000 ba5e 	b.w	80074a0 <__retarget_lock_init_recursive>
 8006fe4:	bd10      	pop	{r4, pc}
 8006fe6:	bf00      	nop
 8006fe8:	08007201 	.word	0x08007201
 8006fec:	08007223 	.word	0x08007223
 8006ff0:	0800725b 	.word	0x0800725b
 8006ff4:	0800727f 	.word	0x0800727f
 8006ff8:	240001c4 	.word	0x240001c4

08006ffc <stdio_exit_handler>:
 8006ffc:	4a02      	ldr	r2, [pc, #8]	; (8007008 <stdio_exit_handler+0xc>)
 8006ffe:	4903      	ldr	r1, [pc, #12]	; (800700c <stdio_exit_handler+0x10>)
 8007000:	4803      	ldr	r0, [pc, #12]	; (8007010 <stdio_exit_handler+0x14>)
 8007002:	f000 b869 	b.w	80070d8 <_fwalk_sglue>
 8007006:	bf00      	nop
 8007008:	24000010 	.word	0x24000010
 800700c:	08007d4d 	.word	0x08007d4d
 8007010:	2400001c 	.word	0x2400001c

08007014 <cleanup_stdio>:
 8007014:	6841      	ldr	r1, [r0, #4]
 8007016:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <cleanup_stdio+0x34>)
 8007018:	4299      	cmp	r1, r3
 800701a:	b510      	push	{r4, lr}
 800701c:	4604      	mov	r4, r0
 800701e:	d001      	beq.n	8007024 <cleanup_stdio+0x10>
 8007020:	f000 fe94 	bl	8007d4c <_fflush_r>
 8007024:	68a1      	ldr	r1, [r4, #8]
 8007026:	4b09      	ldr	r3, [pc, #36]	; (800704c <cleanup_stdio+0x38>)
 8007028:	4299      	cmp	r1, r3
 800702a:	d002      	beq.n	8007032 <cleanup_stdio+0x1e>
 800702c:	4620      	mov	r0, r4
 800702e:	f000 fe8d 	bl	8007d4c <_fflush_r>
 8007032:	68e1      	ldr	r1, [r4, #12]
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <cleanup_stdio+0x3c>)
 8007036:	4299      	cmp	r1, r3
 8007038:	d004      	beq.n	8007044 <cleanup_stdio+0x30>
 800703a:	4620      	mov	r0, r4
 800703c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007040:	f000 be84 	b.w	8007d4c <_fflush_r>
 8007044:	bd10      	pop	{r4, pc}
 8007046:	bf00      	nop
 8007048:	240001c4 	.word	0x240001c4
 800704c:	2400022c 	.word	0x2400022c
 8007050:	24000294 	.word	0x24000294

08007054 <global_stdio_init.part.0>:
 8007054:	b510      	push	{r4, lr}
 8007056:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <global_stdio_init.part.0+0x30>)
 8007058:	4c0b      	ldr	r4, [pc, #44]	; (8007088 <global_stdio_init.part.0+0x34>)
 800705a:	4a0c      	ldr	r2, [pc, #48]	; (800708c <global_stdio_init.part.0+0x38>)
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	4620      	mov	r0, r4
 8007060:	2200      	movs	r2, #0
 8007062:	2104      	movs	r1, #4
 8007064:	f7ff ff94 	bl	8006f90 <std>
 8007068:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800706c:	2201      	movs	r2, #1
 800706e:	2109      	movs	r1, #9
 8007070:	f7ff ff8e 	bl	8006f90 <std>
 8007074:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007078:	2202      	movs	r2, #2
 800707a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800707e:	2112      	movs	r1, #18
 8007080:	f7ff bf86 	b.w	8006f90 <std>
 8007084:	240002fc 	.word	0x240002fc
 8007088:	240001c4 	.word	0x240001c4
 800708c:	08006ffd 	.word	0x08006ffd

08007090 <__sfp_lock_acquire>:
 8007090:	4801      	ldr	r0, [pc, #4]	; (8007098 <__sfp_lock_acquire+0x8>)
 8007092:	f000 ba06 	b.w	80074a2 <__retarget_lock_acquire_recursive>
 8007096:	bf00      	nop
 8007098:	24000305 	.word	0x24000305

0800709c <__sfp_lock_release>:
 800709c:	4801      	ldr	r0, [pc, #4]	; (80070a4 <__sfp_lock_release+0x8>)
 800709e:	f000 ba01 	b.w	80074a4 <__retarget_lock_release_recursive>
 80070a2:	bf00      	nop
 80070a4:	24000305 	.word	0x24000305

080070a8 <__sinit>:
 80070a8:	b510      	push	{r4, lr}
 80070aa:	4604      	mov	r4, r0
 80070ac:	f7ff fff0 	bl	8007090 <__sfp_lock_acquire>
 80070b0:	6a23      	ldr	r3, [r4, #32]
 80070b2:	b11b      	cbz	r3, 80070bc <__sinit+0x14>
 80070b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b8:	f7ff bff0 	b.w	800709c <__sfp_lock_release>
 80070bc:	4b04      	ldr	r3, [pc, #16]	; (80070d0 <__sinit+0x28>)
 80070be:	6223      	str	r3, [r4, #32]
 80070c0:	4b04      	ldr	r3, [pc, #16]	; (80070d4 <__sinit+0x2c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1f5      	bne.n	80070b4 <__sinit+0xc>
 80070c8:	f7ff ffc4 	bl	8007054 <global_stdio_init.part.0>
 80070cc:	e7f2      	b.n	80070b4 <__sinit+0xc>
 80070ce:	bf00      	nop
 80070d0:	08007015 	.word	0x08007015
 80070d4:	240002fc 	.word	0x240002fc

080070d8 <_fwalk_sglue>:
 80070d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070dc:	4607      	mov	r7, r0
 80070de:	4688      	mov	r8, r1
 80070e0:	4614      	mov	r4, r2
 80070e2:	2600      	movs	r6, #0
 80070e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070e8:	f1b9 0901 	subs.w	r9, r9, #1
 80070ec:	d505      	bpl.n	80070fa <_fwalk_sglue+0x22>
 80070ee:	6824      	ldr	r4, [r4, #0]
 80070f0:	2c00      	cmp	r4, #0
 80070f2:	d1f7      	bne.n	80070e4 <_fwalk_sglue+0xc>
 80070f4:	4630      	mov	r0, r6
 80070f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070fa:	89ab      	ldrh	r3, [r5, #12]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d907      	bls.n	8007110 <_fwalk_sglue+0x38>
 8007100:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007104:	3301      	adds	r3, #1
 8007106:	d003      	beq.n	8007110 <_fwalk_sglue+0x38>
 8007108:	4629      	mov	r1, r5
 800710a:	4638      	mov	r0, r7
 800710c:	47c0      	blx	r8
 800710e:	4306      	orrs	r6, r0
 8007110:	3568      	adds	r5, #104	; 0x68
 8007112:	e7e9      	b.n	80070e8 <_fwalk_sglue+0x10>

08007114 <iprintf>:
 8007114:	b40f      	push	{r0, r1, r2, r3}
 8007116:	b507      	push	{r0, r1, r2, lr}
 8007118:	4906      	ldr	r1, [pc, #24]	; (8007134 <iprintf+0x20>)
 800711a:	ab04      	add	r3, sp, #16
 800711c:	6808      	ldr	r0, [r1, #0]
 800711e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007122:	6881      	ldr	r1, [r0, #8]
 8007124:	9301      	str	r3, [sp, #4]
 8007126:	f000 fae1 	bl	80076ec <_vfiprintf_r>
 800712a:	b003      	add	sp, #12
 800712c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007130:	b004      	add	sp, #16
 8007132:	4770      	bx	lr
 8007134:	24000068 	.word	0x24000068

08007138 <putchar>:
 8007138:	4b02      	ldr	r3, [pc, #8]	; (8007144 <putchar+0xc>)
 800713a:	4601      	mov	r1, r0
 800713c:	6818      	ldr	r0, [r3, #0]
 800713e:	6882      	ldr	r2, [r0, #8]
 8007140:	f000 be8e 	b.w	8007e60 <_putc_r>
 8007144:	24000068 	.word	0x24000068

08007148 <_puts_r>:
 8007148:	6a03      	ldr	r3, [r0, #32]
 800714a:	b570      	push	{r4, r5, r6, lr}
 800714c:	6884      	ldr	r4, [r0, #8]
 800714e:	4605      	mov	r5, r0
 8007150:	460e      	mov	r6, r1
 8007152:	b90b      	cbnz	r3, 8007158 <_puts_r+0x10>
 8007154:	f7ff ffa8 	bl	80070a8 <__sinit>
 8007158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800715a:	07db      	lsls	r3, r3, #31
 800715c:	d405      	bmi.n	800716a <_puts_r+0x22>
 800715e:	89a3      	ldrh	r3, [r4, #12]
 8007160:	0598      	lsls	r0, r3, #22
 8007162:	d402      	bmi.n	800716a <_puts_r+0x22>
 8007164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007166:	f000 f99c 	bl	80074a2 <__retarget_lock_acquire_recursive>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	0719      	lsls	r1, r3, #28
 800716e:	d513      	bpl.n	8007198 <_puts_r+0x50>
 8007170:	6923      	ldr	r3, [r4, #16]
 8007172:	b18b      	cbz	r3, 8007198 <_puts_r+0x50>
 8007174:	3e01      	subs	r6, #1
 8007176:	68a3      	ldr	r3, [r4, #8]
 8007178:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800717c:	3b01      	subs	r3, #1
 800717e:	60a3      	str	r3, [r4, #8]
 8007180:	b9e9      	cbnz	r1, 80071be <_puts_r+0x76>
 8007182:	2b00      	cmp	r3, #0
 8007184:	da2e      	bge.n	80071e4 <_puts_r+0x9c>
 8007186:	4622      	mov	r2, r4
 8007188:	210a      	movs	r1, #10
 800718a:	4628      	mov	r0, r5
 800718c:	f000 f87b 	bl	8007286 <__swbuf_r>
 8007190:	3001      	adds	r0, #1
 8007192:	d007      	beq.n	80071a4 <_puts_r+0x5c>
 8007194:	250a      	movs	r5, #10
 8007196:	e007      	b.n	80071a8 <_puts_r+0x60>
 8007198:	4621      	mov	r1, r4
 800719a:	4628      	mov	r0, r5
 800719c:	f000 f8b0 	bl	8007300 <__swsetup_r>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d0e7      	beq.n	8007174 <_puts_r+0x2c>
 80071a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80071a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071aa:	07da      	lsls	r2, r3, #31
 80071ac:	d405      	bmi.n	80071ba <_puts_r+0x72>
 80071ae:	89a3      	ldrh	r3, [r4, #12]
 80071b0:	059b      	lsls	r3, r3, #22
 80071b2:	d402      	bmi.n	80071ba <_puts_r+0x72>
 80071b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071b6:	f000 f975 	bl	80074a4 <__retarget_lock_release_recursive>
 80071ba:	4628      	mov	r0, r5
 80071bc:	bd70      	pop	{r4, r5, r6, pc}
 80071be:	2b00      	cmp	r3, #0
 80071c0:	da04      	bge.n	80071cc <_puts_r+0x84>
 80071c2:	69a2      	ldr	r2, [r4, #24]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	dc06      	bgt.n	80071d6 <_puts_r+0x8e>
 80071c8:	290a      	cmp	r1, #10
 80071ca:	d004      	beq.n	80071d6 <_puts_r+0x8e>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	6022      	str	r2, [r4, #0]
 80071d2:	7019      	strb	r1, [r3, #0]
 80071d4:	e7cf      	b.n	8007176 <_puts_r+0x2e>
 80071d6:	4622      	mov	r2, r4
 80071d8:	4628      	mov	r0, r5
 80071da:	f000 f854 	bl	8007286 <__swbuf_r>
 80071de:	3001      	adds	r0, #1
 80071e0:	d1c9      	bne.n	8007176 <_puts_r+0x2e>
 80071e2:	e7df      	b.n	80071a4 <_puts_r+0x5c>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	250a      	movs	r5, #10
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	6022      	str	r2, [r4, #0]
 80071ec:	701d      	strb	r5, [r3, #0]
 80071ee:	e7db      	b.n	80071a8 <_puts_r+0x60>

080071f0 <puts>:
 80071f0:	4b02      	ldr	r3, [pc, #8]	; (80071fc <puts+0xc>)
 80071f2:	4601      	mov	r1, r0
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	f7ff bfa7 	b.w	8007148 <_puts_r>
 80071fa:	bf00      	nop
 80071fc:	24000068 	.word	0x24000068

08007200 <__sread>:
 8007200:	b510      	push	{r4, lr}
 8007202:	460c      	mov	r4, r1
 8007204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007208:	f000 f8fc 	bl	8007404 <_read_r>
 800720c:	2800      	cmp	r0, #0
 800720e:	bfab      	itete	ge
 8007210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007212:	89a3      	ldrhlt	r3, [r4, #12]
 8007214:	181b      	addge	r3, r3, r0
 8007216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800721a:	bfac      	ite	ge
 800721c:	6563      	strge	r3, [r4, #84]	; 0x54
 800721e:	81a3      	strhlt	r3, [r4, #12]
 8007220:	bd10      	pop	{r4, pc}

08007222 <__swrite>:
 8007222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007226:	461f      	mov	r7, r3
 8007228:	898b      	ldrh	r3, [r1, #12]
 800722a:	05db      	lsls	r3, r3, #23
 800722c:	4605      	mov	r5, r0
 800722e:	460c      	mov	r4, r1
 8007230:	4616      	mov	r6, r2
 8007232:	d505      	bpl.n	8007240 <__swrite+0x1e>
 8007234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007238:	2302      	movs	r3, #2
 800723a:	2200      	movs	r2, #0
 800723c:	f000 f8d0 	bl	80073e0 <_lseek_r>
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	4632      	mov	r2, r6
 800724e:	463b      	mov	r3, r7
 8007250:	4628      	mov	r0, r5
 8007252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007256:	f000 b8e7 	b.w	8007428 <_write_r>

0800725a <__sseek>:
 800725a:	b510      	push	{r4, lr}
 800725c:	460c      	mov	r4, r1
 800725e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007262:	f000 f8bd 	bl	80073e0 <_lseek_r>
 8007266:	1c43      	adds	r3, r0, #1
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	bf15      	itete	ne
 800726c:	6560      	strne	r0, [r4, #84]	; 0x54
 800726e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007276:	81a3      	strheq	r3, [r4, #12]
 8007278:	bf18      	it	ne
 800727a:	81a3      	strhne	r3, [r4, #12]
 800727c:	bd10      	pop	{r4, pc}

0800727e <__sclose>:
 800727e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007282:	f000 b89d 	b.w	80073c0 <_close_r>

08007286 <__swbuf_r>:
 8007286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007288:	460e      	mov	r6, r1
 800728a:	4614      	mov	r4, r2
 800728c:	4605      	mov	r5, r0
 800728e:	b118      	cbz	r0, 8007298 <__swbuf_r+0x12>
 8007290:	6a03      	ldr	r3, [r0, #32]
 8007292:	b90b      	cbnz	r3, 8007298 <__swbuf_r+0x12>
 8007294:	f7ff ff08 	bl	80070a8 <__sinit>
 8007298:	69a3      	ldr	r3, [r4, #24]
 800729a:	60a3      	str	r3, [r4, #8]
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	071a      	lsls	r2, r3, #28
 80072a0:	d525      	bpl.n	80072ee <__swbuf_r+0x68>
 80072a2:	6923      	ldr	r3, [r4, #16]
 80072a4:	b31b      	cbz	r3, 80072ee <__swbuf_r+0x68>
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	6922      	ldr	r2, [r4, #16]
 80072aa:	1a98      	subs	r0, r3, r2
 80072ac:	6963      	ldr	r3, [r4, #20]
 80072ae:	b2f6      	uxtb	r6, r6
 80072b0:	4283      	cmp	r3, r0
 80072b2:	4637      	mov	r7, r6
 80072b4:	dc04      	bgt.n	80072c0 <__swbuf_r+0x3a>
 80072b6:	4621      	mov	r1, r4
 80072b8:	4628      	mov	r0, r5
 80072ba:	f000 fd47 	bl	8007d4c <_fflush_r>
 80072be:	b9e0      	cbnz	r0, 80072fa <__swbuf_r+0x74>
 80072c0:	68a3      	ldr	r3, [r4, #8]
 80072c2:	3b01      	subs	r3, #1
 80072c4:	60a3      	str	r3, [r4, #8]
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	6022      	str	r2, [r4, #0]
 80072cc:	701e      	strb	r6, [r3, #0]
 80072ce:	6962      	ldr	r2, [r4, #20]
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d004      	beq.n	80072e0 <__swbuf_r+0x5a>
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	07db      	lsls	r3, r3, #31
 80072da:	d506      	bpl.n	80072ea <__swbuf_r+0x64>
 80072dc:	2e0a      	cmp	r6, #10
 80072de:	d104      	bne.n	80072ea <__swbuf_r+0x64>
 80072e0:	4621      	mov	r1, r4
 80072e2:	4628      	mov	r0, r5
 80072e4:	f000 fd32 	bl	8007d4c <_fflush_r>
 80072e8:	b938      	cbnz	r0, 80072fa <__swbuf_r+0x74>
 80072ea:	4638      	mov	r0, r7
 80072ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ee:	4621      	mov	r1, r4
 80072f0:	4628      	mov	r0, r5
 80072f2:	f000 f805 	bl	8007300 <__swsetup_r>
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d0d5      	beq.n	80072a6 <__swbuf_r+0x20>
 80072fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80072fe:	e7f4      	b.n	80072ea <__swbuf_r+0x64>

08007300 <__swsetup_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4b2a      	ldr	r3, [pc, #168]	; (80073ac <__swsetup_r+0xac>)
 8007304:	4605      	mov	r5, r0
 8007306:	6818      	ldr	r0, [r3, #0]
 8007308:	460c      	mov	r4, r1
 800730a:	b118      	cbz	r0, 8007314 <__swsetup_r+0x14>
 800730c:	6a03      	ldr	r3, [r0, #32]
 800730e:	b90b      	cbnz	r3, 8007314 <__swsetup_r+0x14>
 8007310:	f7ff feca 	bl	80070a8 <__sinit>
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800731a:	0718      	lsls	r0, r3, #28
 800731c:	d422      	bmi.n	8007364 <__swsetup_r+0x64>
 800731e:	06d9      	lsls	r1, r3, #27
 8007320:	d407      	bmi.n	8007332 <__swsetup_r+0x32>
 8007322:	2309      	movs	r3, #9
 8007324:	602b      	str	r3, [r5, #0]
 8007326:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800732a:	81a3      	strh	r3, [r4, #12]
 800732c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007330:	e034      	b.n	800739c <__swsetup_r+0x9c>
 8007332:	0758      	lsls	r0, r3, #29
 8007334:	d512      	bpl.n	800735c <__swsetup_r+0x5c>
 8007336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007338:	b141      	cbz	r1, 800734c <__swsetup_r+0x4c>
 800733a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800733e:	4299      	cmp	r1, r3
 8007340:	d002      	beq.n	8007348 <__swsetup_r+0x48>
 8007342:	4628      	mov	r0, r5
 8007344:	f000 f8b0 	bl	80074a8 <_free_r>
 8007348:	2300      	movs	r3, #0
 800734a:	6363      	str	r3, [r4, #52]	; 0x34
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007352:	81a3      	strh	r3, [r4, #12]
 8007354:	2300      	movs	r3, #0
 8007356:	6063      	str	r3, [r4, #4]
 8007358:	6923      	ldr	r3, [r4, #16]
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	89a3      	ldrh	r3, [r4, #12]
 800735e:	f043 0308 	orr.w	r3, r3, #8
 8007362:	81a3      	strh	r3, [r4, #12]
 8007364:	6923      	ldr	r3, [r4, #16]
 8007366:	b94b      	cbnz	r3, 800737c <__swsetup_r+0x7c>
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800736e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007372:	d003      	beq.n	800737c <__swsetup_r+0x7c>
 8007374:	4621      	mov	r1, r4
 8007376:	4628      	mov	r0, r5
 8007378:	f000 fd36 	bl	8007de8 <__smakebuf_r>
 800737c:	89a0      	ldrh	r0, [r4, #12]
 800737e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007382:	f010 0301 	ands.w	r3, r0, #1
 8007386:	d00a      	beq.n	800739e <__swsetup_r+0x9e>
 8007388:	2300      	movs	r3, #0
 800738a:	60a3      	str	r3, [r4, #8]
 800738c:	6963      	ldr	r3, [r4, #20]
 800738e:	425b      	negs	r3, r3
 8007390:	61a3      	str	r3, [r4, #24]
 8007392:	6923      	ldr	r3, [r4, #16]
 8007394:	b943      	cbnz	r3, 80073a8 <__swsetup_r+0xa8>
 8007396:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800739a:	d1c4      	bne.n	8007326 <__swsetup_r+0x26>
 800739c:	bd38      	pop	{r3, r4, r5, pc}
 800739e:	0781      	lsls	r1, r0, #30
 80073a0:	bf58      	it	pl
 80073a2:	6963      	ldrpl	r3, [r4, #20]
 80073a4:	60a3      	str	r3, [r4, #8]
 80073a6:	e7f4      	b.n	8007392 <__swsetup_r+0x92>
 80073a8:	2000      	movs	r0, #0
 80073aa:	e7f7      	b.n	800739c <__swsetup_r+0x9c>
 80073ac:	24000068 	.word	0x24000068

080073b0 <memset>:
 80073b0:	4402      	add	r2, r0
 80073b2:	4603      	mov	r3, r0
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d100      	bne.n	80073ba <memset+0xa>
 80073b8:	4770      	bx	lr
 80073ba:	f803 1b01 	strb.w	r1, [r3], #1
 80073be:	e7f9      	b.n	80073b4 <memset+0x4>

080073c0 <_close_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4d06      	ldr	r5, [pc, #24]	; (80073dc <_close_r+0x1c>)
 80073c4:	2300      	movs	r3, #0
 80073c6:	4604      	mov	r4, r0
 80073c8:	4608      	mov	r0, r1
 80073ca:	602b      	str	r3, [r5, #0]
 80073cc:	f7fa f9c9 	bl	8001762 <_close>
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	d102      	bne.n	80073da <_close_r+0x1a>
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	b103      	cbz	r3, 80073da <_close_r+0x1a>
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	bd38      	pop	{r3, r4, r5, pc}
 80073dc:	24000300 	.word	0x24000300

080073e0 <_lseek_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4d07      	ldr	r5, [pc, #28]	; (8007400 <_lseek_r+0x20>)
 80073e4:	4604      	mov	r4, r0
 80073e6:	4608      	mov	r0, r1
 80073e8:	4611      	mov	r1, r2
 80073ea:	2200      	movs	r2, #0
 80073ec:	602a      	str	r2, [r5, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	f7fa f9de 	bl	80017b0 <_lseek>
 80073f4:	1c43      	adds	r3, r0, #1
 80073f6:	d102      	bne.n	80073fe <_lseek_r+0x1e>
 80073f8:	682b      	ldr	r3, [r5, #0]
 80073fa:	b103      	cbz	r3, 80073fe <_lseek_r+0x1e>
 80073fc:	6023      	str	r3, [r4, #0]
 80073fe:	bd38      	pop	{r3, r4, r5, pc}
 8007400:	24000300 	.word	0x24000300

08007404 <_read_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4d07      	ldr	r5, [pc, #28]	; (8007424 <_read_r+0x20>)
 8007408:	4604      	mov	r4, r0
 800740a:	4608      	mov	r0, r1
 800740c:	4611      	mov	r1, r2
 800740e:	2200      	movs	r2, #0
 8007410:	602a      	str	r2, [r5, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	f7fa f96c 	bl	80016f0 <_read>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	d102      	bne.n	8007422 <_read_r+0x1e>
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	b103      	cbz	r3, 8007422 <_read_r+0x1e>
 8007420:	6023      	str	r3, [r4, #0]
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	24000300 	.word	0x24000300

08007428 <_write_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4d07      	ldr	r5, [pc, #28]	; (8007448 <_write_r+0x20>)
 800742c:	4604      	mov	r4, r0
 800742e:	4608      	mov	r0, r1
 8007430:	4611      	mov	r1, r2
 8007432:	2200      	movs	r2, #0
 8007434:	602a      	str	r2, [r5, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	f7fa f977 	bl	800172a <_write>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_write_r+0x1e>
 8007440:	682b      	ldr	r3, [r5, #0]
 8007442:	b103      	cbz	r3, 8007446 <_write_r+0x1e>
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	24000300 	.word	0x24000300

0800744c <__errno>:
 800744c:	4b01      	ldr	r3, [pc, #4]	; (8007454 <__errno+0x8>)
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	24000068 	.word	0x24000068

08007458 <__libc_init_array>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	4d0d      	ldr	r5, [pc, #52]	; (8007490 <__libc_init_array+0x38>)
 800745c:	4c0d      	ldr	r4, [pc, #52]	; (8007494 <__libc_init_array+0x3c>)
 800745e:	1b64      	subs	r4, r4, r5
 8007460:	10a4      	asrs	r4, r4, #2
 8007462:	2600      	movs	r6, #0
 8007464:	42a6      	cmp	r6, r4
 8007466:	d109      	bne.n	800747c <__libc_init_array+0x24>
 8007468:	4d0b      	ldr	r5, [pc, #44]	; (8007498 <__libc_init_array+0x40>)
 800746a:	4c0c      	ldr	r4, [pc, #48]	; (800749c <__libc_init_array+0x44>)
 800746c:	f000 fd5e 	bl	8007f2c <_init>
 8007470:	1b64      	subs	r4, r4, r5
 8007472:	10a4      	asrs	r4, r4, #2
 8007474:	2600      	movs	r6, #0
 8007476:	42a6      	cmp	r6, r4
 8007478:	d105      	bne.n	8007486 <__libc_init_array+0x2e>
 800747a:	bd70      	pop	{r4, r5, r6, pc}
 800747c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007480:	4798      	blx	r3
 8007482:	3601      	adds	r6, #1
 8007484:	e7ee      	b.n	8007464 <__libc_init_array+0xc>
 8007486:	f855 3b04 	ldr.w	r3, [r5], #4
 800748a:	4798      	blx	r3
 800748c:	3601      	adds	r6, #1
 800748e:	e7f2      	b.n	8007476 <__libc_init_array+0x1e>
 8007490:	08008188 	.word	0x08008188
 8007494:	08008188 	.word	0x08008188
 8007498:	08008188 	.word	0x08008188
 800749c:	0800818c 	.word	0x0800818c

080074a0 <__retarget_lock_init_recursive>:
 80074a0:	4770      	bx	lr

080074a2 <__retarget_lock_acquire_recursive>:
 80074a2:	4770      	bx	lr

080074a4 <__retarget_lock_release_recursive>:
 80074a4:	4770      	bx	lr
	...

080074a8 <_free_r>:
 80074a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074aa:	2900      	cmp	r1, #0
 80074ac:	d044      	beq.n	8007538 <_free_r+0x90>
 80074ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074b2:	9001      	str	r0, [sp, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f1a1 0404 	sub.w	r4, r1, #4
 80074ba:	bfb8      	it	lt
 80074bc:	18e4      	addlt	r4, r4, r3
 80074be:	f000 f8df 	bl	8007680 <__malloc_lock>
 80074c2:	4a1e      	ldr	r2, [pc, #120]	; (800753c <_free_r+0x94>)
 80074c4:	9801      	ldr	r0, [sp, #4]
 80074c6:	6813      	ldr	r3, [r2, #0]
 80074c8:	b933      	cbnz	r3, 80074d8 <_free_r+0x30>
 80074ca:	6063      	str	r3, [r4, #4]
 80074cc:	6014      	str	r4, [r2, #0]
 80074ce:	b003      	add	sp, #12
 80074d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074d4:	f000 b8da 	b.w	800768c <__malloc_unlock>
 80074d8:	42a3      	cmp	r3, r4
 80074da:	d908      	bls.n	80074ee <_free_r+0x46>
 80074dc:	6825      	ldr	r5, [r4, #0]
 80074de:	1961      	adds	r1, r4, r5
 80074e0:	428b      	cmp	r3, r1
 80074e2:	bf01      	itttt	eq
 80074e4:	6819      	ldreq	r1, [r3, #0]
 80074e6:	685b      	ldreq	r3, [r3, #4]
 80074e8:	1949      	addeq	r1, r1, r5
 80074ea:	6021      	streq	r1, [r4, #0]
 80074ec:	e7ed      	b.n	80074ca <_free_r+0x22>
 80074ee:	461a      	mov	r2, r3
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	b10b      	cbz	r3, 80074f8 <_free_r+0x50>
 80074f4:	42a3      	cmp	r3, r4
 80074f6:	d9fa      	bls.n	80074ee <_free_r+0x46>
 80074f8:	6811      	ldr	r1, [r2, #0]
 80074fa:	1855      	adds	r5, r2, r1
 80074fc:	42a5      	cmp	r5, r4
 80074fe:	d10b      	bne.n	8007518 <_free_r+0x70>
 8007500:	6824      	ldr	r4, [r4, #0]
 8007502:	4421      	add	r1, r4
 8007504:	1854      	adds	r4, r2, r1
 8007506:	42a3      	cmp	r3, r4
 8007508:	6011      	str	r1, [r2, #0]
 800750a:	d1e0      	bne.n	80074ce <_free_r+0x26>
 800750c:	681c      	ldr	r4, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	6053      	str	r3, [r2, #4]
 8007512:	440c      	add	r4, r1
 8007514:	6014      	str	r4, [r2, #0]
 8007516:	e7da      	b.n	80074ce <_free_r+0x26>
 8007518:	d902      	bls.n	8007520 <_free_r+0x78>
 800751a:	230c      	movs	r3, #12
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	e7d6      	b.n	80074ce <_free_r+0x26>
 8007520:	6825      	ldr	r5, [r4, #0]
 8007522:	1961      	adds	r1, r4, r5
 8007524:	428b      	cmp	r3, r1
 8007526:	bf04      	itt	eq
 8007528:	6819      	ldreq	r1, [r3, #0]
 800752a:	685b      	ldreq	r3, [r3, #4]
 800752c:	6063      	str	r3, [r4, #4]
 800752e:	bf04      	itt	eq
 8007530:	1949      	addeq	r1, r1, r5
 8007532:	6021      	streq	r1, [r4, #0]
 8007534:	6054      	str	r4, [r2, #4]
 8007536:	e7ca      	b.n	80074ce <_free_r+0x26>
 8007538:	b003      	add	sp, #12
 800753a:	bd30      	pop	{r4, r5, pc}
 800753c:	24000308 	.word	0x24000308

08007540 <sbrk_aligned>:
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	4e0e      	ldr	r6, [pc, #56]	; (800757c <sbrk_aligned+0x3c>)
 8007544:	460c      	mov	r4, r1
 8007546:	6831      	ldr	r1, [r6, #0]
 8007548:	4605      	mov	r5, r0
 800754a:	b911      	cbnz	r1, 8007552 <sbrk_aligned+0x12>
 800754c:	f000 fcde 	bl	8007f0c <_sbrk_r>
 8007550:	6030      	str	r0, [r6, #0]
 8007552:	4621      	mov	r1, r4
 8007554:	4628      	mov	r0, r5
 8007556:	f000 fcd9 	bl	8007f0c <_sbrk_r>
 800755a:	1c43      	adds	r3, r0, #1
 800755c:	d00a      	beq.n	8007574 <sbrk_aligned+0x34>
 800755e:	1cc4      	adds	r4, r0, #3
 8007560:	f024 0403 	bic.w	r4, r4, #3
 8007564:	42a0      	cmp	r0, r4
 8007566:	d007      	beq.n	8007578 <sbrk_aligned+0x38>
 8007568:	1a21      	subs	r1, r4, r0
 800756a:	4628      	mov	r0, r5
 800756c:	f000 fcce 	bl	8007f0c <_sbrk_r>
 8007570:	3001      	adds	r0, #1
 8007572:	d101      	bne.n	8007578 <sbrk_aligned+0x38>
 8007574:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007578:	4620      	mov	r0, r4
 800757a:	bd70      	pop	{r4, r5, r6, pc}
 800757c:	2400030c 	.word	0x2400030c

08007580 <_malloc_r>:
 8007580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007584:	1ccd      	adds	r5, r1, #3
 8007586:	f025 0503 	bic.w	r5, r5, #3
 800758a:	3508      	adds	r5, #8
 800758c:	2d0c      	cmp	r5, #12
 800758e:	bf38      	it	cc
 8007590:	250c      	movcc	r5, #12
 8007592:	2d00      	cmp	r5, #0
 8007594:	4607      	mov	r7, r0
 8007596:	db01      	blt.n	800759c <_malloc_r+0x1c>
 8007598:	42a9      	cmp	r1, r5
 800759a:	d905      	bls.n	80075a8 <_malloc_r+0x28>
 800759c:	230c      	movs	r3, #12
 800759e:	603b      	str	r3, [r7, #0]
 80075a0:	2600      	movs	r6, #0
 80075a2:	4630      	mov	r0, r6
 80075a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800767c <_malloc_r+0xfc>
 80075ac:	f000 f868 	bl	8007680 <__malloc_lock>
 80075b0:	f8d8 3000 	ldr.w	r3, [r8]
 80075b4:	461c      	mov	r4, r3
 80075b6:	bb5c      	cbnz	r4, 8007610 <_malloc_r+0x90>
 80075b8:	4629      	mov	r1, r5
 80075ba:	4638      	mov	r0, r7
 80075bc:	f7ff ffc0 	bl	8007540 <sbrk_aligned>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	4604      	mov	r4, r0
 80075c4:	d155      	bne.n	8007672 <_malloc_r+0xf2>
 80075c6:	f8d8 4000 	ldr.w	r4, [r8]
 80075ca:	4626      	mov	r6, r4
 80075cc:	2e00      	cmp	r6, #0
 80075ce:	d145      	bne.n	800765c <_malloc_r+0xdc>
 80075d0:	2c00      	cmp	r4, #0
 80075d2:	d048      	beq.n	8007666 <_malloc_r+0xe6>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	4631      	mov	r1, r6
 80075d8:	4638      	mov	r0, r7
 80075da:	eb04 0903 	add.w	r9, r4, r3
 80075de:	f000 fc95 	bl	8007f0c <_sbrk_r>
 80075e2:	4581      	cmp	r9, r0
 80075e4:	d13f      	bne.n	8007666 <_malloc_r+0xe6>
 80075e6:	6821      	ldr	r1, [r4, #0]
 80075e8:	1a6d      	subs	r5, r5, r1
 80075ea:	4629      	mov	r1, r5
 80075ec:	4638      	mov	r0, r7
 80075ee:	f7ff ffa7 	bl	8007540 <sbrk_aligned>
 80075f2:	3001      	adds	r0, #1
 80075f4:	d037      	beq.n	8007666 <_malloc_r+0xe6>
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	442b      	add	r3, r5
 80075fa:	6023      	str	r3, [r4, #0]
 80075fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d038      	beq.n	8007676 <_malloc_r+0xf6>
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	42a2      	cmp	r2, r4
 8007608:	d12b      	bne.n	8007662 <_malloc_r+0xe2>
 800760a:	2200      	movs	r2, #0
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	e00f      	b.n	8007630 <_malloc_r+0xb0>
 8007610:	6822      	ldr	r2, [r4, #0]
 8007612:	1b52      	subs	r2, r2, r5
 8007614:	d41f      	bmi.n	8007656 <_malloc_r+0xd6>
 8007616:	2a0b      	cmp	r2, #11
 8007618:	d917      	bls.n	800764a <_malloc_r+0xca>
 800761a:	1961      	adds	r1, r4, r5
 800761c:	42a3      	cmp	r3, r4
 800761e:	6025      	str	r5, [r4, #0]
 8007620:	bf18      	it	ne
 8007622:	6059      	strne	r1, [r3, #4]
 8007624:	6863      	ldr	r3, [r4, #4]
 8007626:	bf08      	it	eq
 8007628:	f8c8 1000 	streq.w	r1, [r8]
 800762c:	5162      	str	r2, [r4, r5]
 800762e:	604b      	str	r3, [r1, #4]
 8007630:	4638      	mov	r0, r7
 8007632:	f104 060b 	add.w	r6, r4, #11
 8007636:	f000 f829 	bl	800768c <__malloc_unlock>
 800763a:	f026 0607 	bic.w	r6, r6, #7
 800763e:	1d23      	adds	r3, r4, #4
 8007640:	1af2      	subs	r2, r6, r3
 8007642:	d0ae      	beq.n	80075a2 <_malloc_r+0x22>
 8007644:	1b9b      	subs	r3, r3, r6
 8007646:	50a3      	str	r3, [r4, r2]
 8007648:	e7ab      	b.n	80075a2 <_malloc_r+0x22>
 800764a:	42a3      	cmp	r3, r4
 800764c:	6862      	ldr	r2, [r4, #4]
 800764e:	d1dd      	bne.n	800760c <_malloc_r+0x8c>
 8007650:	f8c8 2000 	str.w	r2, [r8]
 8007654:	e7ec      	b.n	8007630 <_malloc_r+0xb0>
 8007656:	4623      	mov	r3, r4
 8007658:	6864      	ldr	r4, [r4, #4]
 800765a:	e7ac      	b.n	80075b6 <_malloc_r+0x36>
 800765c:	4634      	mov	r4, r6
 800765e:	6876      	ldr	r6, [r6, #4]
 8007660:	e7b4      	b.n	80075cc <_malloc_r+0x4c>
 8007662:	4613      	mov	r3, r2
 8007664:	e7cc      	b.n	8007600 <_malloc_r+0x80>
 8007666:	230c      	movs	r3, #12
 8007668:	603b      	str	r3, [r7, #0]
 800766a:	4638      	mov	r0, r7
 800766c:	f000 f80e 	bl	800768c <__malloc_unlock>
 8007670:	e797      	b.n	80075a2 <_malloc_r+0x22>
 8007672:	6025      	str	r5, [r4, #0]
 8007674:	e7dc      	b.n	8007630 <_malloc_r+0xb0>
 8007676:	605b      	str	r3, [r3, #4]
 8007678:	deff      	udf	#255	; 0xff
 800767a:	bf00      	nop
 800767c:	24000308 	.word	0x24000308

08007680 <__malloc_lock>:
 8007680:	4801      	ldr	r0, [pc, #4]	; (8007688 <__malloc_lock+0x8>)
 8007682:	f7ff bf0e 	b.w	80074a2 <__retarget_lock_acquire_recursive>
 8007686:	bf00      	nop
 8007688:	24000304 	.word	0x24000304

0800768c <__malloc_unlock>:
 800768c:	4801      	ldr	r0, [pc, #4]	; (8007694 <__malloc_unlock+0x8>)
 800768e:	f7ff bf09 	b.w	80074a4 <__retarget_lock_release_recursive>
 8007692:	bf00      	nop
 8007694:	24000304 	.word	0x24000304

08007698 <__sfputc_r>:
 8007698:	6893      	ldr	r3, [r2, #8]
 800769a:	3b01      	subs	r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	b410      	push	{r4}
 80076a0:	6093      	str	r3, [r2, #8]
 80076a2:	da08      	bge.n	80076b6 <__sfputc_r+0x1e>
 80076a4:	6994      	ldr	r4, [r2, #24]
 80076a6:	42a3      	cmp	r3, r4
 80076a8:	db01      	blt.n	80076ae <__sfputc_r+0x16>
 80076aa:	290a      	cmp	r1, #10
 80076ac:	d103      	bne.n	80076b6 <__sfputc_r+0x1e>
 80076ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076b2:	f7ff bde8 	b.w	8007286 <__swbuf_r>
 80076b6:	6813      	ldr	r3, [r2, #0]
 80076b8:	1c58      	adds	r0, r3, #1
 80076ba:	6010      	str	r0, [r2, #0]
 80076bc:	7019      	strb	r1, [r3, #0]
 80076be:	4608      	mov	r0, r1
 80076c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <__sfputs_r>:
 80076c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c8:	4606      	mov	r6, r0
 80076ca:	460f      	mov	r7, r1
 80076cc:	4614      	mov	r4, r2
 80076ce:	18d5      	adds	r5, r2, r3
 80076d0:	42ac      	cmp	r4, r5
 80076d2:	d101      	bne.n	80076d8 <__sfputs_r+0x12>
 80076d4:	2000      	movs	r0, #0
 80076d6:	e007      	b.n	80076e8 <__sfputs_r+0x22>
 80076d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076dc:	463a      	mov	r2, r7
 80076de:	4630      	mov	r0, r6
 80076e0:	f7ff ffda 	bl	8007698 <__sfputc_r>
 80076e4:	1c43      	adds	r3, r0, #1
 80076e6:	d1f3      	bne.n	80076d0 <__sfputs_r+0xa>
 80076e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076ec <_vfiprintf_r>:
 80076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	460d      	mov	r5, r1
 80076f2:	b09d      	sub	sp, #116	; 0x74
 80076f4:	4614      	mov	r4, r2
 80076f6:	4698      	mov	r8, r3
 80076f8:	4606      	mov	r6, r0
 80076fa:	b118      	cbz	r0, 8007704 <_vfiprintf_r+0x18>
 80076fc:	6a03      	ldr	r3, [r0, #32]
 80076fe:	b90b      	cbnz	r3, 8007704 <_vfiprintf_r+0x18>
 8007700:	f7ff fcd2 	bl	80070a8 <__sinit>
 8007704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007706:	07d9      	lsls	r1, r3, #31
 8007708:	d405      	bmi.n	8007716 <_vfiprintf_r+0x2a>
 800770a:	89ab      	ldrh	r3, [r5, #12]
 800770c:	059a      	lsls	r2, r3, #22
 800770e:	d402      	bmi.n	8007716 <_vfiprintf_r+0x2a>
 8007710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007712:	f7ff fec6 	bl	80074a2 <__retarget_lock_acquire_recursive>
 8007716:	89ab      	ldrh	r3, [r5, #12]
 8007718:	071b      	lsls	r3, r3, #28
 800771a:	d501      	bpl.n	8007720 <_vfiprintf_r+0x34>
 800771c:	692b      	ldr	r3, [r5, #16]
 800771e:	b99b      	cbnz	r3, 8007748 <_vfiprintf_r+0x5c>
 8007720:	4629      	mov	r1, r5
 8007722:	4630      	mov	r0, r6
 8007724:	f7ff fdec 	bl	8007300 <__swsetup_r>
 8007728:	b170      	cbz	r0, 8007748 <_vfiprintf_r+0x5c>
 800772a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800772c:	07dc      	lsls	r4, r3, #31
 800772e:	d504      	bpl.n	800773a <_vfiprintf_r+0x4e>
 8007730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007734:	b01d      	add	sp, #116	; 0x74
 8007736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773a:	89ab      	ldrh	r3, [r5, #12]
 800773c:	0598      	lsls	r0, r3, #22
 800773e:	d4f7      	bmi.n	8007730 <_vfiprintf_r+0x44>
 8007740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007742:	f7ff feaf 	bl	80074a4 <__retarget_lock_release_recursive>
 8007746:	e7f3      	b.n	8007730 <_vfiprintf_r+0x44>
 8007748:	2300      	movs	r3, #0
 800774a:	9309      	str	r3, [sp, #36]	; 0x24
 800774c:	2320      	movs	r3, #32
 800774e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007752:	f8cd 800c 	str.w	r8, [sp, #12]
 8007756:	2330      	movs	r3, #48	; 0x30
 8007758:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800790c <_vfiprintf_r+0x220>
 800775c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007760:	f04f 0901 	mov.w	r9, #1
 8007764:	4623      	mov	r3, r4
 8007766:	469a      	mov	sl, r3
 8007768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800776c:	b10a      	cbz	r2, 8007772 <_vfiprintf_r+0x86>
 800776e:	2a25      	cmp	r2, #37	; 0x25
 8007770:	d1f9      	bne.n	8007766 <_vfiprintf_r+0x7a>
 8007772:	ebba 0b04 	subs.w	fp, sl, r4
 8007776:	d00b      	beq.n	8007790 <_vfiprintf_r+0xa4>
 8007778:	465b      	mov	r3, fp
 800777a:	4622      	mov	r2, r4
 800777c:	4629      	mov	r1, r5
 800777e:	4630      	mov	r0, r6
 8007780:	f7ff ffa1 	bl	80076c6 <__sfputs_r>
 8007784:	3001      	adds	r0, #1
 8007786:	f000 80a9 	beq.w	80078dc <_vfiprintf_r+0x1f0>
 800778a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800778c:	445a      	add	r2, fp
 800778e:	9209      	str	r2, [sp, #36]	; 0x24
 8007790:	f89a 3000 	ldrb.w	r3, [sl]
 8007794:	2b00      	cmp	r3, #0
 8007796:	f000 80a1 	beq.w	80078dc <_vfiprintf_r+0x1f0>
 800779a:	2300      	movs	r3, #0
 800779c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077a4:	f10a 0a01 	add.w	sl, sl, #1
 80077a8:	9304      	str	r3, [sp, #16]
 80077aa:	9307      	str	r3, [sp, #28]
 80077ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077b0:	931a      	str	r3, [sp, #104]	; 0x68
 80077b2:	4654      	mov	r4, sl
 80077b4:	2205      	movs	r2, #5
 80077b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ba:	4854      	ldr	r0, [pc, #336]	; (800790c <_vfiprintf_r+0x220>)
 80077bc:	f7f8 fd90 	bl	80002e0 <memchr>
 80077c0:	9a04      	ldr	r2, [sp, #16]
 80077c2:	b9d8      	cbnz	r0, 80077fc <_vfiprintf_r+0x110>
 80077c4:	06d1      	lsls	r1, r2, #27
 80077c6:	bf44      	itt	mi
 80077c8:	2320      	movmi	r3, #32
 80077ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ce:	0713      	lsls	r3, r2, #28
 80077d0:	bf44      	itt	mi
 80077d2:	232b      	movmi	r3, #43	; 0x2b
 80077d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077d8:	f89a 3000 	ldrb.w	r3, [sl]
 80077dc:	2b2a      	cmp	r3, #42	; 0x2a
 80077de:	d015      	beq.n	800780c <_vfiprintf_r+0x120>
 80077e0:	9a07      	ldr	r2, [sp, #28]
 80077e2:	4654      	mov	r4, sl
 80077e4:	2000      	movs	r0, #0
 80077e6:	f04f 0c0a 	mov.w	ip, #10
 80077ea:	4621      	mov	r1, r4
 80077ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077f0:	3b30      	subs	r3, #48	; 0x30
 80077f2:	2b09      	cmp	r3, #9
 80077f4:	d94d      	bls.n	8007892 <_vfiprintf_r+0x1a6>
 80077f6:	b1b0      	cbz	r0, 8007826 <_vfiprintf_r+0x13a>
 80077f8:	9207      	str	r2, [sp, #28]
 80077fa:	e014      	b.n	8007826 <_vfiprintf_r+0x13a>
 80077fc:	eba0 0308 	sub.w	r3, r0, r8
 8007800:	fa09 f303 	lsl.w	r3, r9, r3
 8007804:	4313      	orrs	r3, r2
 8007806:	9304      	str	r3, [sp, #16]
 8007808:	46a2      	mov	sl, r4
 800780a:	e7d2      	b.n	80077b2 <_vfiprintf_r+0xc6>
 800780c:	9b03      	ldr	r3, [sp, #12]
 800780e:	1d19      	adds	r1, r3, #4
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	9103      	str	r1, [sp, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	bfbb      	ittet	lt
 8007818:	425b      	neglt	r3, r3
 800781a:	f042 0202 	orrlt.w	r2, r2, #2
 800781e:	9307      	strge	r3, [sp, #28]
 8007820:	9307      	strlt	r3, [sp, #28]
 8007822:	bfb8      	it	lt
 8007824:	9204      	strlt	r2, [sp, #16]
 8007826:	7823      	ldrb	r3, [r4, #0]
 8007828:	2b2e      	cmp	r3, #46	; 0x2e
 800782a:	d10c      	bne.n	8007846 <_vfiprintf_r+0x15a>
 800782c:	7863      	ldrb	r3, [r4, #1]
 800782e:	2b2a      	cmp	r3, #42	; 0x2a
 8007830:	d134      	bne.n	800789c <_vfiprintf_r+0x1b0>
 8007832:	9b03      	ldr	r3, [sp, #12]
 8007834:	1d1a      	adds	r2, r3, #4
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	9203      	str	r2, [sp, #12]
 800783a:	2b00      	cmp	r3, #0
 800783c:	bfb8      	it	lt
 800783e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007842:	3402      	adds	r4, #2
 8007844:	9305      	str	r3, [sp, #20]
 8007846:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800791c <_vfiprintf_r+0x230>
 800784a:	7821      	ldrb	r1, [r4, #0]
 800784c:	2203      	movs	r2, #3
 800784e:	4650      	mov	r0, sl
 8007850:	f7f8 fd46 	bl	80002e0 <memchr>
 8007854:	b138      	cbz	r0, 8007866 <_vfiprintf_r+0x17a>
 8007856:	9b04      	ldr	r3, [sp, #16]
 8007858:	eba0 000a 	sub.w	r0, r0, sl
 800785c:	2240      	movs	r2, #64	; 0x40
 800785e:	4082      	lsls	r2, r0
 8007860:	4313      	orrs	r3, r2
 8007862:	3401      	adds	r4, #1
 8007864:	9304      	str	r3, [sp, #16]
 8007866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800786a:	4829      	ldr	r0, [pc, #164]	; (8007910 <_vfiprintf_r+0x224>)
 800786c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007870:	2206      	movs	r2, #6
 8007872:	f7f8 fd35 	bl	80002e0 <memchr>
 8007876:	2800      	cmp	r0, #0
 8007878:	d03f      	beq.n	80078fa <_vfiprintf_r+0x20e>
 800787a:	4b26      	ldr	r3, [pc, #152]	; (8007914 <_vfiprintf_r+0x228>)
 800787c:	bb1b      	cbnz	r3, 80078c6 <_vfiprintf_r+0x1da>
 800787e:	9b03      	ldr	r3, [sp, #12]
 8007880:	3307      	adds	r3, #7
 8007882:	f023 0307 	bic.w	r3, r3, #7
 8007886:	3308      	adds	r3, #8
 8007888:	9303      	str	r3, [sp, #12]
 800788a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800788c:	443b      	add	r3, r7
 800788e:	9309      	str	r3, [sp, #36]	; 0x24
 8007890:	e768      	b.n	8007764 <_vfiprintf_r+0x78>
 8007892:	fb0c 3202 	mla	r2, ip, r2, r3
 8007896:	460c      	mov	r4, r1
 8007898:	2001      	movs	r0, #1
 800789a:	e7a6      	b.n	80077ea <_vfiprintf_r+0xfe>
 800789c:	2300      	movs	r3, #0
 800789e:	3401      	adds	r4, #1
 80078a0:	9305      	str	r3, [sp, #20]
 80078a2:	4619      	mov	r1, r3
 80078a4:	f04f 0c0a 	mov.w	ip, #10
 80078a8:	4620      	mov	r0, r4
 80078aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ae:	3a30      	subs	r2, #48	; 0x30
 80078b0:	2a09      	cmp	r2, #9
 80078b2:	d903      	bls.n	80078bc <_vfiprintf_r+0x1d0>
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0c6      	beq.n	8007846 <_vfiprintf_r+0x15a>
 80078b8:	9105      	str	r1, [sp, #20]
 80078ba:	e7c4      	b.n	8007846 <_vfiprintf_r+0x15a>
 80078bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80078c0:	4604      	mov	r4, r0
 80078c2:	2301      	movs	r3, #1
 80078c4:	e7f0      	b.n	80078a8 <_vfiprintf_r+0x1bc>
 80078c6:	ab03      	add	r3, sp, #12
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	462a      	mov	r2, r5
 80078cc:	4b12      	ldr	r3, [pc, #72]	; (8007918 <_vfiprintf_r+0x22c>)
 80078ce:	a904      	add	r1, sp, #16
 80078d0:	4630      	mov	r0, r6
 80078d2:	f3af 8000 	nop.w
 80078d6:	4607      	mov	r7, r0
 80078d8:	1c78      	adds	r0, r7, #1
 80078da:	d1d6      	bne.n	800788a <_vfiprintf_r+0x19e>
 80078dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078de:	07d9      	lsls	r1, r3, #31
 80078e0:	d405      	bmi.n	80078ee <_vfiprintf_r+0x202>
 80078e2:	89ab      	ldrh	r3, [r5, #12]
 80078e4:	059a      	lsls	r2, r3, #22
 80078e6:	d402      	bmi.n	80078ee <_vfiprintf_r+0x202>
 80078e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ea:	f7ff fddb 	bl	80074a4 <__retarget_lock_release_recursive>
 80078ee:	89ab      	ldrh	r3, [r5, #12]
 80078f0:	065b      	lsls	r3, r3, #25
 80078f2:	f53f af1d 	bmi.w	8007730 <_vfiprintf_r+0x44>
 80078f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078f8:	e71c      	b.n	8007734 <_vfiprintf_r+0x48>
 80078fa:	ab03      	add	r3, sp, #12
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	462a      	mov	r2, r5
 8007900:	4b05      	ldr	r3, [pc, #20]	; (8007918 <_vfiprintf_r+0x22c>)
 8007902:	a904      	add	r1, sp, #16
 8007904:	4630      	mov	r0, r6
 8007906:	f000 f879 	bl	80079fc <_printf_i>
 800790a:	e7e4      	b.n	80078d6 <_vfiprintf_r+0x1ea>
 800790c:	0800814c 	.word	0x0800814c
 8007910:	08008156 	.word	0x08008156
 8007914:	00000000 	.word	0x00000000
 8007918:	080076c7 	.word	0x080076c7
 800791c:	08008152 	.word	0x08008152

08007920 <_printf_common>:
 8007920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007924:	4616      	mov	r6, r2
 8007926:	4699      	mov	r9, r3
 8007928:	688a      	ldr	r2, [r1, #8]
 800792a:	690b      	ldr	r3, [r1, #16]
 800792c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007930:	4293      	cmp	r3, r2
 8007932:	bfb8      	it	lt
 8007934:	4613      	movlt	r3, r2
 8007936:	6033      	str	r3, [r6, #0]
 8007938:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800793c:	4607      	mov	r7, r0
 800793e:	460c      	mov	r4, r1
 8007940:	b10a      	cbz	r2, 8007946 <_printf_common+0x26>
 8007942:	3301      	adds	r3, #1
 8007944:	6033      	str	r3, [r6, #0]
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	0699      	lsls	r1, r3, #26
 800794a:	bf42      	ittt	mi
 800794c:	6833      	ldrmi	r3, [r6, #0]
 800794e:	3302      	addmi	r3, #2
 8007950:	6033      	strmi	r3, [r6, #0]
 8007952:	6825      	ldr	r5, [r4, #0]
 8007954:	f015 0506 	ands.w	r5, r5, #6
 8007958:	d106      	bne.n	8007968 <_printf_common+0x48>
 800795a:	f104 0a19 	add.w	sl, r4, #25
 800795e:	68e3      	ldr	r3, [r4, #12]
 8007960:	6832      	ldr	r2, [r6, #0]
 8007962:	1a9b      	subs	r3, r3, r2
 8007964:	42ab      	cmp	r3, r5
 8007966:	dc26      	bgt.n	80079b6 <_printf_common+0x96>
 8007968:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800796c:	1e13      	subs	r3, r2, #0
 800796e:	6822      	ldr	r2, [r4, #0]
 8007970:	bf18      	it	ne
 8007972:	2301      	movne	r3, #1
 8007974:	0692      	lsls	r2, r2, #26
 8007976:	d42b      	bmi.n	80079d0 <_printf_common+0xb0>
 8007978:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800797c:	4649      	mov	r1, r9
 800797e:	4638      	mov	r0, r7
 8007980:	47c0      	blx	r8
 8007982:	3001      	adds	r0, #1
 8007984:	d01e      	beq.n	80079c4 <_printf_common+0xa4>
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	6922      	ldr	r2, [r4, #16]
 800798a:	f003 0306 	and.w	r3, r3, #6
 800798e:	2b04      	cmp	r3, #4
 8007990:	bf02      	ittt	eq
 8007992:	68e5      	ldreq	r5, [r4, #12]
 8007994:	6833      	ldreq	r3, [r6, #0]
 8007996:	1aed      	subeq	r5, r5, r3
 8007998:	68a3      	ldr	r3, [r4, #8]
 800799a:	bf0c      	ite	eq
 800799c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079a0:	2500      	movne	r5, #0
 80079a2:	4293      	cmp	r3, r2
 80079a4:	bfc4      	itt	gt
 80079a6:	1a9b      	subgt	r3, r3, r2
 80079a8:	18ed      	addgt	r5, r5, r3
 80079aa:	2600      	movs	r6, #0
 80079ac:	341a      	adds	r4, #26
 80079ae:	42b5      	cmp	r5, r6
 80079b0:	d11a      	bne.n	80079e8 <_printf_common+0xc8>
 80079b2:	2000      	movs	r0, #0
 80079b4:	e008      	b.n	80079c8 <_printf_common+0xa8>
 80079b6:	2301      	movs	r3, #1
 80079b8:	4652      	mov	r2, sl
 80079ba:	4649      	mov	r1, r9
 80079bc:	4638      	mov	r0, r7
 80079be:	47c0      	blx	r8
 80079c0:	3001      	adds	r0, #1
 80079c2:	d103      	bne.n	80079cc <_printf_common+0xac>
 80079c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079cc:	3501      	adds	r5, #1
 80079ce:	e7c6      	b.n	800795e <_printf_common+0x3e>
 80079d0:	18e1      	adds	r1, r4, r3
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	2030      	movs	r0, #48	; 0x30
 80079d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079da:	4422      	add	r2, r4
 80079dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079e4:	3302      	adds	r3, #2
 80079e6:	e7c7      	b.n	8007978 <_printf_common+0x58>
 80079e8:	2301      	movs	r3, #1
 80079ea:	4622      	mov	r2, r4
 80079ec:	4649      	mov	r1, r9
 80079ee:	4638      	mov	r0, r7
 80079f0:	47c0      	blx	r8
 80079f2:	3001      	adds	r0, #1
 80079f4:	d0e6      	beq.n	80079c4 <_printf_common+0xa4>
 80079f6:	3601      	adds	r6, #1
 80079f8:	e7d9      	b.n	80079ae <_printf_common+0x8e>
	...

080079fc <_printf_i>:
 80079fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a00:	7e0f      	ldrb	r7, [r1, #24]
 8007a02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a04:	2f78      	cmp	r7, #120	; 0x78
 8007a06:	4691      	mov	r9, r2
 8007a08:	4680      	mov	r8, r0
 8007a0a:	460c      	mov	r4, r1
 8007a0c:	469a      	mov	sl, r3
 8007a0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a12:	d807      	bhi.n	8007a24 <_printf_i+0x28>
 8007a14:	2f62      	cmp	r7, #98	; 0x62
 8007a16:	d80a      	bhi.n	8007a2e <_printf_i+0x32>
 8007a18:	2f00      	cmp	r7, #0
 8007a1a:	f000 80d4 	beq.w	8007bc6 <_printf_i+0x1ca>
 8007a1e:	2f58      	cmp	r7, #88	; 0x58
 8007a20:	f000 80c0 	beq.w	8007ba4 <_printf_i+0x1a8>
 8007a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a2c:	e03a      	b.n	8007aa4 <_printf_i+0xa8>
 8007a2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a32:	2b15      	cmp	r3, #21
 8007a34:	d8f6      	bhi.n	8007a24 <_printf_i+0x28>
 8007a36:	a101      	add	r1, pc, #4	; (adr r1, 8007a3c <_printf_i+0x40>)
 8007a38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a3c:	08007a95 	.word	0x08007a95
 8007a40:	08007aa9 	.word	0x08007aa9
 8007a44:	08007a25 	.word	0x08007a25
 8007a48:	08007a25 	.word	0x08007a25
 8007a4c:	08007a25 	.word	0x08007a25
 8007a50:	08007a25 	.word	0x08007a25
 8007a54:	08007aa9 	.word	0x08007aa9
 8007a58:	08007a25 	.word	0x08007a25
 8007a5c:	08007a25 	.word	0x08007a25
 8007a60:	08007a25 	.word	0x08007a25
 8007a64:	08007a25 	.word	0x08007a25
 8007a68:	08007bad 	.word	0x08007bad
 8007a6c:	08007ad5 	.word	0x08007ad5
 8007a70:	08007b67 	.word	0x08007b67
 8007a74:	08007a25 	.word	0x08007a25
 8007a78:	08007a25 	.word	0x08007a25
 8007a7c:	08007bcf 	.word	0x08007bcf
 8007a80:	08007a25 	.word	0x08007a25
 8007a84:	08007ad5 	.word	0x08007ad5
 8007a88:	08007a25 	.word	0x08007a25
 8007a8c:	08007a25 	.word	0x08007a25
 8007a90:	08007b6f 	.word	0x08007b6f
 8007a94:	682b      	ldr	r3, [r5, #0]
 8007a96:	1d1a      	adds	r2, r3, #4
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	602a      	str	r2, [r5, #0]
 8007a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e09f      	b.n	8007be8 <_printf_i+0x1ec>
 8007aa8:	6820      	ldr	r0, [r4, #0]
 8007aaa:	682b      	ldr	r3, [r5, #0]
 8007aac:	0607      	lsls	r7, r0, #24
 8007aae:	f103 0104 	add.w	r1, r3, #4
 8007ab2:	6029      	str	r1, [r5, #0]
 8007ab4:	d501      	bpl.n	8007aba <_printf_i+0xbe>
 8007ab6:	681e      	ldr	r6, [r3, #0]
 8007ab8:	e003      	b.n	8007ac2 <_printf_i+0xc6>
 8007aba:	0646      	lsls	r6, r0, #25
 8007abc:	d5fb      	bpl.n	8007ab6 <_printf_i+0xba>
 8007abe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007ac2:	2e00      	cmp	r6, #0
 8007ac4:	da03      	bge.n	8007ace <_printf_i+0xd2>
 8007ac6:	232d      	movs	r3, #45	; 0x2d
 8007ac8:	4276      	negs	r6, r6
 8007aca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ace:	485a      	ldr	r0, [pc, #360]	; (8007c38 <_printf_i+0x23c>)
 8007ad0:	230a      	movs	r3, #10
 8007ad2:	e012      	b.n	8007afa <_printf_i+0xfe>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	6820      	ldr	r0, [r4, #0]
 8007ad8:	1d19      	adds	r1, r3, #4
 8007ada:	6029      	str	r1, [r5, #0]
 8007adc:	0605      	lsls	r5, r0, #24
 8007ade:	d501      	bpl.n	8007ae4 <_printf_i+0xe8>
 8007ae0:	681e      	ldr	r6, [r3, #0]
 8007ae2:	e002      	b.n	8007aea <_printf_i+0xee>
 8007ae4:	0641      	lsls	r1, r0, #25
 8007ae6:	d5fb      	bpl.n	8007ae0 <_printf_i+0xe4>
 8007ae8:	881e      	ldrh	r6, [r3, #0]
 8007aea:	4853      	ldr	r0, [pc, #332]	; (8007c38 <_printf_i+0x23c>)
 8007aec:	2f6f      	cmp	r7, #111	; 0x6f
 8007aee:	bf0c      	ite	eq
 8007af0:	2308      	moveq	r3, #8
 8007af2:	230a      	movne	r3, #10
 8007af4:	2100      	movs	r1, #0
 8007af6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007afa:	6865      	ldr	r5, [r4, #4]
 8007afc:	60a5      	str	r5, [r4, #8]
 8007afe:	2d00      	cmp	r5, #0
 8007b00:	bfa2      	ittt	ge
 8007b02:	6821      	ldrge	r1, [r4, #0]
 8007b04:	f021 0104 	bicge.w	r1, r1, #4
 8007b08:	6021      	strge	r1, [r4, #0]
 8007b0a:	b90e      	cbnz	r6, 8007b10 <_printf_i+0x114>
 8007b0c:	2d00      	cmp	r5, #0
 8007b0e:	d04b      	beq.n	8007ba8 <_printf_i+0x1ac>
 8007b10:	4615      	mov	r5, r2
 8007b12:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b16:	fb03 6711 	mls	r7, r3, r1, r6
 8007b1a:	5dc7      	ldrb	r7, [r0, r7]
 8007b1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b20:	4637      	mov	r7, r6
 8007b22:	42bb      	cmp	r3, r7
 8007b24:	460e      	mov	r6, r1
 8007b26:	d9f4      	bls.n	8007b12 <_printf_i+0x116>
 8007b28:	2b08      	cmp	r3, #8
 8007b2a:	d10b      	bne.n	8007b44 <_printf_i+0x148>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	07de      	lsls	r6, r3, #31
 8007b30:	d508      	bpl.n	8007b44 <_printf_i+0x148>
 8007b32:	6923      	ldr	r3, [r4, #16]
 8007b34:	6861      	ldr	r1, [r4, #4]
 8007b36:	4299      	cmp	r1, r3
 8007b38:	bfde      	ittt	le
 8007b3a:	2330      	movle	r3, #48	; 0x30
 8007b3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007b44:	1b52      	subs	r2, r2, r5
 8007b46:	6122      	str	r2, [r4, #16]
 8007b48:	f8cd a000 	str.w	sl, [sp]
 8007b4c:	464b      	mov	r3, r9
 8007b4e:	aa03      	add	r2, sp, #12
 8007b50:	4621      	mov	r1, r4
 8007b52:	4640      	mov	r0, r8
 8007b54:	f7ff fee4 	bl	8007920 <_printf_common>
 8007b58:	3001      	adds	r0, #1
 8007b5a:	d14a      	bne.n	8007bf2 <_printf_i+0x1f6>
 8007b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b60:	b004      	add	sp, #16
 8007b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	f043 0320 	orr.w	r3, r3, #32
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	4833      	ldr	r0, [pc, #204]	; (8007c3c <_printf_i+0x240>)
 8007b70:	2778      	movs	r7, #120	; 0x78
 8007b72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b76:	6823      	ldr	r3, [r4, #0]
 8007b78:	6829      	ldr	r1, [r5, #0]
 8007b7a:	061f      	lsls	r7, r3, #24
 8007b7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b80:	d402      	bmi.n	8007b88 <_printf_i+0x18c>
 8007b82:	065f      	lsls	r7, r3, #25
 8007b84:	bf48      	it	mi
 8007b86:	b2b6      	uxthmi	r6, r6
 8007b88:	07df      	lsls	r7, r3, #31
 8007b8a:	bf48      	it	mi
 8007b8c:	f043 0320 	orrmi.w	r3, r3, #32
 8007b90:	6029      	str	r1, [r5, #0]
 8007b92:	bf48      	it	mi
 8007b94:	6023      	strmi	r3, [r4, #0]
 8007b96:	b91e      	cbnz	r6, 8007ba0 <_printf_i+0x1a4>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	f023 0320 	bic.w	r3, r3, #32
 8007b9e:	6023      	str	r3, [r4, #0]
 8007ba0:	2310      	movs	r3, #16
 8007ba2:	e7a7      	b.n	8007af4 <_printf_i+0xf8>
 8007ba4:	4824      	ldr	r0, [pc, #144]	; (8007c38 <_printf_i+0x23c>)
 8007ba6:	e7e4      	b.n	8007b72 <_printf_i+0x176>
 8007ba8:	4615      	mov	r5, r2
 8007baa:	e7bd      	b.n	8007b28 <_printf_i+0x12c>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	6826      	ldr	r6, [r4, #0]
 8007bb0:	6961      	ldr	r1, [r4, #20]
 8007bb2:	1d18      	adds	r0, r3, #4
 8007bb4:	6028      	str	r0, [r5, #0]
 8007bb6:	0635      	lsls	r5, r6, #24
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	d501      	bpl.n	8007bc0 <_printf_i+0x1c4>
 8007bbc:	6019      	str	r1, [r3, #0]
 8007bbe:	e002      	b.n	8007bc6 <_printf_i+0x1ca>
 8007bc0:	0670      	lsls	r0, r6, #25
 8007bc2:	d5fb      	bpl.n	8007bbc <_printf_i+0x1c0>
 8007bc4:	8019      	strh	r1, [r3, #0]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	6123      	str	r3, [r4, #16]
 8007bca:	4615      	mov	r5, r2
 8007bcc:	e7bc      	b.n	8007b48 <_printf_i+0x14c>
 8007bce:	682b      	ldr	r3, [r5, #0]
 8007bd0:	1d1a      	adds	r2, r3, #4
 8007bd2:	602a      	str	r2, [r5, #0]
 8007bd4:	681d      	ldr	r5, [r3, #0]
 8007bd6:	6862      	ldr	r2, [r4, #4]
 8007bd8:	2100      	movs	r1, #0
 8007bda:	4628      	mov	r0, r5
 8007bdc:	f7f8 fb80 	bl	80002e0 <memchr>
 8007be0:	b108      	cbz	r0, 8007be6 <_printf_i+0x1ea>
 8007be2:	1b40      	subs	r0, r0, r5
 8007be4:	6060      	str	r0, [r4, #4]
 8007be6:	6863      	ldr	r3, [r4, #4]
 8007be8:	6123      	str	r3, [r4, #16]
 8007bea:	2300      	movs	r3, #0
 8007bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bf0:	e7aa      	b.n	8007b48 <_printf_i+0x14c>
 8007bf2:	6923      	ldr	r3, [r4, #16]
 8007bf4:	462a      	mov	r2, r5
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	4640      	mov	r0, r8
 8007bfa:	47d0      	blx	sl
 8007bfc:	3001      	adds	r0, #1
 8007bfe:	d0ad      	beq.n	8007b5c <_printf_i+0x160>
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	079b      	lsls	r3, r3, #30
 8007c04:	d413      	bmi.n	8007c2e <_printf_i+0x232>
 8007c06:	68e0      	ldr	r0, [r4, #12]
 8007c08:	9b03      	ldr	r3, [sp, #12]
 8007c0a:	4298      	cmp	r0, r3
 8007c0c:	bfb8      	it	lt
 8007c0e:	4618      	movlt	r0, r3
 8007c10:	e7a6      	b.n	8007b60 <_printf_i+0x164>
 8007c12:	2301      	movs	r3, #1
 8007c14:	4632      	mov	r2, r6
 8007c16:	4649      	mov	r1, r9
 8007c18:	4640      	mov	r0, r8
 8007c1a:	47d0      	blx	sl
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	d09d      	beq.n	8007b5c <_printf_i+0x160>
 8007c20:	3501      	adds	r5, #1
 8007c22:	68e3      	ldr	r3, [r4, #12]
 8007c24:	9903      	ldr	r1, [sp, #12]
 8007c26:	1a5b      	subs	r3, r3, r1
 8007c28:	42ab      	cmp	r3, r5
 8007c2a:	dcf2      	bgt.n	8007c12 <_printf_i+0x216>
 8007c2c:	e7eb      	b.n	8007c06 <_printf_i+0x20a>
 8007c2e:	2500      	movs	r5, #0
 8007c30:	f104 0619 	add.w	r6, r4, #25
 8007c34:	e7f5      	b.n	8007c22 <_printf_i+0x226>
 8007c36:	bf00      	nop
 8007c38:	0800815d 	.word	0x0800815d
 8007c3c:	0800816e 	.word	0x0800816e

08007c40 <__sflush_r>:
 8007c40:	898a      	ldrh	r2, [r1, #12]
 8007c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c46:	4605      	mov	r5, r0
 8007c48:	0710      	lsls	r0, r2, #28
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	d458      	bmi.n	8007d00 <__sflush_r+0xc0>
 8007c4e:	684b      	ldr	r3, [r1, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	dc05      	bgt.n	8007c60 <__sflush_r+0x20>
 8007c54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	dc02      	bgt.n	8007c60 <__sflush_r+0x20>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c62:	2e00      	cmp	r6, #0
 8007c64:	d0f9      	beq.n	8007c5a <__sflush_r+0x1a>
 8007c66:	2300      	movs	r3, #0
 8007c68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c6c:	682f      	ldr	r7, [r5, #0]
 8007c6e:	6a21      	ldr	r1, [r4, #32]
 8007c70:	602b      	str	r3, [r5, #0]
 8007c72:	d032      	beq.n	8007cda <__sflush_r+0x9a>
 8007c74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	075a      	lsls	r2, r3, #29
 8007c7a:	d505      	bpl.n	8007c88 <__sflush_r+0x48>
 8007c7c:	6863      	ldr	r3, [r4, #4]
 8007c7e:	1ac0      	subs	r0, r0, r3
 8007c80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c82:	b10b      	cbz	r3, 8007c88 <__sflush_r+0x48>
 8007c84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c86:	1ac0      	subs	r0, r0, r3
 8007c88:	2300      	movs	r3, #0
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c8e:	6a21      	ldr	r1, [r4, #32]
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b0      	blx	r6
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	89a3      	ldrh	r3, [r4, #12]
 8007c98:	d106      	bne.n	8007ca8 <__sflush_r+0x68>
 8007c9a:	6829      	ldr	r1, [r5, #0]
 8007c9c:	291d      	cmp	r1, #29
 8007c9e:	d82b      	bhi.n	8007cf8 <__sflush_r+0xb8>
 8007ca0:	4a29      	ldr	r2, [pc, #164]	; (8007d48 <__sflush_r+0x108>)
 8007ca2:	410a      	asrs	r2, r1
 8007ca4:	07d6      	lsls	r6, r2, #31
 8007ca6:	d427      	bmi.n	8007cf8 <__sflush_r+0xb8>
 8007ca8:	2200      	movs	r2, #0
 8007caa:	6062      	str	r2, [r4, #4]
 8007cac:	04d9      	lsls	r1, r3, #19
 8007cae:	6922      	ldr	r2, [r4, #16]
 8007cb0:	6022      	str	r2, [r4, #0]
 8007cb2:	d504      	bpl.n	8007cbe <__sflush_r+0x7e>
 8007cb4:	1c42      	adds	r2, r0, #1
 8007cb6:	d101      	bne.n	8007cbc <__sflush_r+0x7c>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	b903      	cbnz	r3, 8007cbe <__sflush_r+0x7e>
 8007cbc:	6560      	str	r0, [r4, #84]	; 0x54
 8007cbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cc0:	602f      	str	r7, [r5, #0]
 8007cc2:	2900      	cmp	r1, #0
 8007cc4:	d0c9      	beq.n	8007c5a <__sflush_r+0x1a>
 8007cc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cca:	4299      	cmp	r1, r3
 8007ccc:	d002      	beq.n	8007cd4 <__sflush_r+0x94>
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f7ff fbea 	bl	80074a8 <_free_r>
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	6360      	str	r0, [r4, #52]	; 0x34
 8007cd8:	e7c0      	b.n	8007c5c <__sflush_r+0x1c>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	4628      	mov	r0, r5
 8007cde:	47b0      	blx	r6
 8007ce0:	1c41      	adds	r1, r0, #1
 8007ce2:	d1c8      	bne.n	8007c76 <__sflush_r+0x36>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0c5      	beq.n	8007c76 <__sflush_r+0x36>
 8007cea:	2b1d      	cmp	r3, #29
 8007cec:	d001      	beq.n	8007cf2 <__sflush_r+0xb2>
 8007cee:	2b16      	cmp	r3, #22
 8007cf0:	d101      	bne.n	8007cf6 <__sflush_r+0xb6>
 8007cf2:	602f      	str	r7, [r5, #0]
 8007cf4:	e7b1      	b.n	8007c5a <__sflush_r+0x1a>
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cfc:	81a3      	strh	r3, [r4, #12]
 8007cfe:	e7ad      	b.n	8007c5c <__sflush_r+0x1c>
 8007d00:	690f      	ldr	r7, [r1, #16]
 8007d02:	2f00      	cmp	r7, #0
 8007d04:	d0a9      	beq.n	8007c5a <__sflush_r+0x1a>
 8007d06:	0793      	lsls	r3, r2, #30
 8007d08:	680e      	ldr	r6, [r1, #0]
 8007d0a:	bf08      	it	eq
 8007d0c:	694b      	ldreq	r3, [r1, #20]
 8007d0e:	600f      	str	r7, [r1, #0]
 8007d10:	bf18      	it	ne
 8007d12:	2300      	movne	r3, #0
 8007d14:	eba6 0807 	sub.w	r8, r6, r7
 8007d18:	608b      	str	r3, [r1, #8]
 8007d1a:	f1b8 0f00 	cmp.w	r8, #0
 8007d1e:	dd9c      	ble.n	8007c5a <__sflush_r+0x1a>
 8007d20:	6a21      	ldr	r1, [r4, #32]
 8007d22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d24:	4643      	mov	r3, r8
 8007d26:	463a      	mov	r2, r7
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b0      	blx	r6
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	dc06      	bgt.n	8007d3e <__sflush_r+0xfe>
 8007d30:	89a3      	ldrh	r3, [r4, #12]
 8007d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d36:	81a3      	strh	r3, [r4, #12]
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d3c:	e78e      	b.n	8007c5c <__sflush_r+0x1c>
 8007d3e:	4407      	add	r7, r0
 8007d40:	eba8 0800 	sub.w	r8, r8, r0
 8007d44:	e7e9      	b.n	8007d1a <__sflush_r+0xda>
 8007d46:	bf00      	nop
 8007d48:	dfbffffe 	.word	0xdfbffffe

08007d4c <_fflush_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	690b      	ldr	r3, [r1, #16]
 8007d50:	4605      	mov	r5, r0
 8007d52:	460c      	mov	r4, r1
 8007d54:	b913      	cbnz	r3, 8007d5c <_fflush_r+0x10>
 8007d56:	2500      	movs	r5, #0
 8007d58:	4628      	mov	r0, r5
 8007d5a:	bd38      	pop	{r3, r4, r5, pc}
 8007d5c:	b118      	cbz	r0, 8007d66 <_fflush_r+0x1a>
 8007d5e:	6a03      	ldr	r3, [r0, #32]
 8007d60:	b90b      	cbnz	r3, 8007d66 <_fflush_r+0x1a>
 8007d62:	f7ff f9a1 	bl	80070a8 <__sinit>
 8007d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d0f3      	beq.n	8007d56 <_fflush_r+0xa>
 8007d6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d70:	07d0      	lsls	r0, r2, #31
 8007d72:	d404      	bmi.n	8007d7e <_fflush_r+0x32>
 8007d74:	0599      	lsls	r1, r3, #22
 8007d76:	d402      	bmi.n	8007d7e <_fflush_r+0x32>
 8007d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d7a:	f7ff fb92 	bl	80074a2 <__retarget_lock_acquire_recursive>
 8007d7e:	4628      	mov	r0, r5
 8007d80:	4621      	mov	r1, r4
 8007d82:	f7ff ff5d 	bl	8007c40 <__sflush_r>
 8007d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d88:	07da      	lsls	r2, r3, #31
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	d4e4      	bmi.n	8007d58 <_fflush_r+0xc>
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	059b      	lsls	r3, r3, #22
 8007d92:	d4e1      	bmi.n	8007d58 <_fflush_r+0xc>
 8007d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d96:	f7ff fb85 	bl	80074a4 <__retarget_lock_release_recursive>
 8007d9a:	e7dd      	b.n	8007d58 <_fflush_r+0xc>

08007d9c <__swhatbuf_r>:
 8007d9c:	b570      	push	{r4, r5, r6, lr}
 8007d9e:	460c      	mov	r4, r1
 8007da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da4:	2900      	cmp	r1, #0
 8007da6:	b096      	sub	sp, #88	; 0x58
 8007da8:	4615      	mov	r5, r2
 8007daa:	461e      	mov	r6, r3
 8007dac:	da0d      	bge.n	8007dca <__swhatbuf_r+0x2e>
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007db4:	f04f 0100 	mov.w	r1, #0
 8007db8:	bf0c      	ite	eq
 8007dba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007dbe:	2340      	movne	r3, #64	; 0x40
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	6031      	str	r1, [r6, #0]
 8007dc4:	602b      	str	r3, [r5, #0]
 8007dc6:	b016      	add	sp, #88	; 0x58
 8007dc8:	bd70      	pop	{r4, r5, r6, pc}
 8007dca:	466a      	mov	r2, sp
 8007dcc:	f000 f87c 	bl	8007ec8 <_fstat_r>
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	dbec      	blt.n	8007dae <__swhatbuf_r+0x12>
 8007dd4:	9901      	ldr	r1, [sp, #4]
 8007dd6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007dda:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007dde:	4259      	negs	r1, r3
 8007de0:	4159      	adcs	r1, r3
 8007de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007de6:	e7eb      	b.n	8007dc0 <__swhatbuf_r+0x24>

08007de8 <__smakebuf_r>:
 8007de8:	898b      	ldrh	r3, [r1, #12]
 8007dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007dec:	079d      	lsls	r5, r3, #30
 8007dee:	4606      	mov	r6, r0
 8007df0:	460c      	mov	r4, r1
 8007df2:	d507      	bpl.n	8007e04 <__smakebuf_r+0x1c>
 8007df4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	6123      	str	r3, [r4, #16]
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	6163      	str	r3, [r4, #20]
 8007e00:	b002      	add	sp, #8
 8007e02:	bd70      	pop	{r4, r5, r6, pc}
 8007e04:	ab01      	add	r3, sp, #4
 8007e06:	466a      	mov	r2, sp
 8007e08:	f7ff ffc8 	bl	8007d9c <__swhatbuf_r>
 8007e0c:	9900      	ldr	r1, [sp, #0]
 8007e0e:	4605      	mov	r5, r0
 8007e10:	4630      	mov	r0, r6
 8007e12:	f7ff fbb5 	bl	8007580 <_malloc_r>
 8007e16:	b948      	cbnz	r0, 8007e2c <__smakebuf_r+0x44>
 8007e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e1c:	059a      	lsls	r2, r3, #22
 8007e1e:	d4ef      	bmi.n	8007e00 <__smakebuf_r+0x18>
 8007e20:	f023 0303 	bic.w	r3, r3, #3
 8007e24:	f043 0302 	orr.w	r3, r3, #2
 8007e28:	81a3      	strh	r3, [r4, #12]
 8007e2a:	e7e3      	b.n	8007df4 <__smakebuf_r+0xc>
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	6020      	str	r0, [r4, #0]
 8007e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e34:	81a3      	strh	r3, [r4, #12]
 8007e36:	9b00      	ldr	r3, [sp, #0]
 8007e38:	6163      	str	r3, [r4, #20]
 8007e3a:	9b01      	ldr	r3, [sp, #4]
 8007e3c:	6120      	str	r0, [r4, #16]
 8007e3e:	b15b      	cbz	r3, 8007e58 <__smakebuf_r+0x70>
 8007e40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e44:	4630      	mov	r0, r6
 8007e46:	f000 f851 	bl	8007eec <_isatty_r>
 8007e4a:	b128      	cbz	r0, 8007e58 <__smakebuf_r+0x70>
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	f023 0303 	bic.w	r3, r3, #3
 8007e52:	f043 0301 	orr.w	r3, r3, #1
 8007e56:	81a3      	strh	r3, [r4, #12]
 8007e58:	89a3      	ldrh	r3, [r4, #12]
 8007e5a:	431d      	orrs	r5, r3
 8007e5c:	81a5      	strh	r5, [r4, #12]
 8007e5e:	e7cf      	b.n	8007e00 <__smakebuf_r+0x18>

08007e60 <_putc_r>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	460d      	mov	r5, r1
 8007e64:	4614      	mov	r4, r2
 8007e66:	4606      	mov	r6, r0
 8007e68:	b118      	cbz	r0, 8007e72 <_putc_r+0x12>
 8007e6a:	6a03      	ldr	r3, [r0, #32]
 8007e6c:	b90b      	cbnz	r3, 8007e72 <_putc_r+0x12>
 8007e6e:	f7ff f91b 	bl	80070a8 <__sinit>
 8007e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e74:	07d8      	lsls	r0, r3, #31
 8007e76:	d405      	bmi.n	8007e84 <_putc_r+0x24>
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	0599      	lsls	r1, r3, #22
 8007e7c:	d402      	bmi.n	8007e84 <_putc_r+0x24>
 8007e7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e80:	f7ff fb0f 	bl	80074a2 <__retarget_lock_acquire_recursive>
 8007e84:	68a3      	ldr	r3, [r4, #8]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	60a3      	str	r3, [r4, #8]
 8007e8c:	da05      	bge.n	8007e9a <_putc_r+0x3a>
 8007e8e:	69a2      	ldr	r2, [r4, #24]
 8007e90:	4293      	cmp	r3, r2
 8007e92:	db12      	blt.n	8007eba <_putc_r+0x5a>
 8007e94:	b2eb      	uxtb	r3, r5
 8007e96:	2b0a      	cmp	r3, #10
 8007e98:	d00f      	beq.n	8007eba <_putc_r+0x5a>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	6022      	str	r2, [r4, #0]
 8007ea0:	701d      	strb	r5, [r3, #0]
 8007ea2:	b2ed      	uxtb	r5, r5
 8007ea4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ea6:	07da      	lsls	r2, r3, #31
 8007ea8:	d405      	bmi.n	8007eb6 <_putc_r+0x56>
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	059b      	lsls	r3, r3, #22
 8007eae:	d402      	bmi.n	8007eb6 <_putc_r+0x56>
 8007eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eb2:	f7ff faf7 	bl	80074a4 <__retarget_lock_release_recursive>
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	bd70      	pop	{r4, r5, r6, pc}
 8007eba:	4629      	mov	r1, r5
 8007ebc:	4622      	mov	r2, r4
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	f7ff f9e1 	bl	8007286 <__swbuf_r>
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	e7ed      	b.n	8007ea4 <_putc_r+0x44>

08007ec8 <_fstat_r>:
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	4d07      	ldr	r5, [pc, #28]	; (8007ee8 <_fstat_r+0x20>)
 8007ecc:	2300      	movs	r3, #0
 8007ece:	4604      	mov	r4, r0
 8007ed0:	4608      	mov	r0, r1
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	602b      	str	r3, [r5, #0]
 8007ed6:	f7f9 fc50 	bl	800177a <_fstat>
 8007eda:	1c43      	adds	r3, r0, #1
 8007edc:	d102      	bne.n	8007ee4 <_fstat_r+0x1c>
 8007ede:	682b      	ldr	r3, [r5, #0]
 8007ee0:	b103      	cbz	r3, 8007ee4 <_fstat_r+0x1c>
 8007ee2:	6023      	str	r3, [r4, #0]
 8007ee4:	bd38      	pop	{r3, r4, r5, pc}
 8007ee6:	bf00      	nop
 8007ee8:	24000300 	.word	0x24000300

08007eec <_isatty_r>:
 8007eec:	b538      	push	{r3, r4, r5, lr}
 8007eee:	4d06      	ldr	r5, [pc, #24]	; (8007f08 <_isatty_r+0x1c>)
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	4608      	mov	r0, r1
 8007ef6:	602b      	str	r3, [r5, #0]
 8007ef8:	f7f9 fc4f 	bl	800179a <_isatty>
 8007efc:	1c43      	adds	r3, r0, #1
 8007efe:	d102      	bne.n	8007f06 <_isatty_r+0x1a>
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	b103      	cbz	r3, 8007f06 <_isatty_r+0x1a>
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	24000300 	.word	0x24000300

08007f0c <_sbrk_r>:
 8007f0c:	b538      	push	{r3, r4, r5, lr}
 8007f0e:	4d06      	ldr	r5, [pc, #24]	; (8007f28 <_sbrk_r+0x1c>)
 8007f10:	2300      	movs	r3, #0
 8007f12:	4604      	mov	r4, r0
 8007f14:	4608      	mov	r0, r1
 8007f16:	602b      	str	r3, [r5, #0]
 8007f18:	f7f9 fc58 	bl	80017cc <_sbrk>
 8007f1c:	1c43      	adds	r3, r0, #1
 8007f1e:	d102      	bne.n	8007f26 <_sbrk_r+0x1a>
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	b103      	cbz	r3, 8007f26 <_sbrk_r+0x1a>
 8007f24:	6023      	str	r3, [r4, #0]
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	24000300 	.word	0x24000300

08007f2c <_init>:
 8007f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2e:	bf00      	nop
 8007f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f32:	bc08      	pop	{r3}
 8007f34:	469e      	mov	lr, r3
 8007f36:	4770      	bx	lr

08007f38 <_fini>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	bf00      	nop
 8007f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3e:	bc08      	pop	{r3}
 8007f40:	469e      	mov	lr, r3
 8007f42:	4770      	bx	lr
