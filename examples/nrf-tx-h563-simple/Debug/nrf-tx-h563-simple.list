
nrf-tx-h563-simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a00c  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  0800a258  0800a258  0001a258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a430  0800a430  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800a430  0800a430  0001a430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a438  0800a438  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a438  0800a438  0001a438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a43c  0800a43c  0001a43c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800a440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000068  0800a4a8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  0800a4a8  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011594  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000217f  00000000  00000000  00031675  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  000337f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a05  00000000  00000000  00034500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003139e  00000000  00000000  00034f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a1c  00000000  00000000  000662a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00132983  00000000  00000000  00076cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c2c  00000000  00000000  001a9644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001ad270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000068 	.word	0x20000068
 8000268:	00000000 	.word	0x00000000
 800026c:	0800a240 	.word	0x0800a240

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000006c 	.word	0x2000006c
 8000288:	0800a240 	.word	0x0800a240

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800029c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b4:	1d39      	adds	r1, r7, #4
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <__io_putchar+0x20>)
 80005be:	f008 fbec 	bl	8008d9a <HAL_UART_Transmit>
  return ch;
 80005c2:	687b      	ldr	r3, [r7, #4]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000114 	.word	0x20000114

080005d0 <HAL_GPIO_EXTI_Rising_Callback>:
/*******************************************/

// This is ran when user button is pressed
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BTN_USER_Pin) {
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005e0:	d11a      	bne.n	8000618 <HAL_GPIO_EXTI_Rising_Callback+0x48>
    printf("Sending data...\r\n");
 80005e2:	480f      	ldr	r0, [pc, #60]	; (8000620 <HAL_GPIO_EXTI_Rising_Callback+0x50>)
 80005e4:	f009 fa98 	bl	8009b18 <puts>
    uint8_t msg[10] = "HelloWorld";
 80005e8:	4a0e      	ldr	r2, [pc, #56]	; (8000624 <HAL_GPIO_EXTI_Rising_Callback+0x54>)
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80005f0:	c303      	stmia	r3!, {r0, r1}
 80005f2:	801a      	strh	r2, [r3, #0]
    NRF_Status ret = NRF_TransmitAndWait(msg, 10);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	210a      	movs	r1, #10
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fb60 	bl	8000cc0 <NRF_TransmitAndWait>
 8000600:	4603      	mov	r3, r0
 8000602:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) {
 8000604:	7dfb      	ldrb	r3, [r7, #23]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d003      	beq.n	8000612 <HAL_GPIO_EXTI_Rising_Callback+0x42>
      // TODO: More thorough error checking here
      printf("Couldn't send data...\r\n");
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <HAL_GPIO_EXTI_Rising_Callback+0x58>)
 800060c:	f009 fa84 	bl	8009b18 <puts>
    } else {
      printf("Data sent...\r\n");
    }
  }
}
 8000610:	e002      	b.n	8000618 <HAL_GPIO_EXTI_Rising_Callback+0x48>
      printf("Data sent...\r\n");
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <HAL_GPIO_EXTI_Rising_Callback+0x5c>)
 8000614:	f009 fa80 	bl	8009b18 <puts>
}
 8000618:	bf00      	nop
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	0800a258 	.word	0x0800a258
 8000624:	0800a294 	.word	0x0800a294
 8000628:	0800a26c 	.word	0x0800a26c
 800062c:	0800a284 	.word	0x0800a284

08000630 <runExample>:

void runExample() {
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af02      	add	r7, sp, #8
  printf("Starting up simple transmitter H5...\r\n\r\n");
 8000636:	4812      	ldr	r0, [pc, #72]	; (8000680 <runExample+0x50>)
 8000638:	f009 fa6e 	bl	8009b18 <puts>

  // Initialise the library and make the device enter standby-I mode
  NRF_Init(&hspi1, NRF_CSN_GPIO_Port, NRF_CSN_Pin, NRF_CE_GPIO_Port, NRF_CE_Pin);
 800063c:	2340      	movs	r3, #64	; 0x40
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <runExample+0x54>)
 8000642:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000646:	4910      	ldr	r1, [pc, #64]	; (8000688 <runExample+0x58>)
 8000648:	4810      	ldr	r0, [pc, #64]	; (800068c <runExample+0x5c>)
 800064a:	f000 fa2d 	bl	8000aa8 <NRF_Init>

  // Resets all registers but keeps the device in standby-I mode
  NRF_Reset();
 800064e:	f000 fc2d 	bl	8000eac <NRF_Reset>

  // Set the transmit adress.
  uint8_t address[5] = {1,2,3,4,5};
 8000652:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <runExample+0x60>)
 8000654:	463b      	mov	r3, r7
 8000656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065a:	6018      	str	r0, [r3, #0]
 800065c:	3304      	adds	r3, #4
 800065e:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 8000660:	463b      	mov	r3, r7
 8000662:	2205      	movs	r2, #5
 8000664:	4619      	mov	r1, r3
 8000666:	2010      	movs	r0, #16
 8000668:	f000 fb62 	bl	8000d30 <NRF_WriteRegister>

  // To be able to receive auto acknowledgement from the receiver
  // we need to enter a receive address as well.
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 800066c:	463b      	mov	r3, r7
 800066e:	2205      	movs	r2, #5
 8000670:	4619      	mov	r1, r3
 8000672:	200a      	movs	r0, #10
 8000674:	f000 fb5c 	bl	8000d30 <NRF_WriteRegister>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	0800a2a0 	.word	0x0800a2a0
 8000684:	42020800 	.word	0x42020800
 8000688:	42020400 	.word	0x42020400
 800068c:	20000084 	.word	0x20000084
 8000690:	0800a2c8 	.word	0x0800a2c8

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 ff9c 	bl	80015d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f80c 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f91c 	bl	80008dc <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 80006a4:	f000 f870 	bl	8000788 <MX_MEMORYMAP_Init>
  MX_SPI1_Init();
 80006a8:	f000 f876 	bl	8000798 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80006ac:	f000 f8ca 	bl	8000844 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  runExample();
 80006b0:	f7ff ffbe 	bl	8000630 <runExample>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <main+0x20>
	...

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b09c      	sub	sp, #112	; 0x70
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2250      	movs	r2, #80	; 0x50
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f009 fb06 	bl	8009cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
 80006dc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemClock_Config+0xcc>)
 80006e0:	691b      	ldr	r3, [r3, #16]
 80006e2:	4a28      	ldr	r2, [pc, #160]	; (8000784 <SystemClock_Config+0xcc>)
 80006e4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80006e8:	6113      	str	r3, [r2, #16]
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemClock_Config+0xcc>)
 80006ec:	691b      	ldr	r3, [r3, #16]
 80006ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006f6:	bf00      	nop
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemClock_Config+0xcc>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	f003 0308 	and.w	r3, r3, #8
 8000700:	2b08      	cmp	r3, #8
 8000702:	d1f9      	bne.n	80006f8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000704:	2310      	movs	r3, #16
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800070c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800070e:	2320      	movs	r3, #32
 8000710:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000716:	2302      	movs	r3, #2
 8000718:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 800071e:	237d      	movs	r3, #125	; 0x7d
 8000720:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000722:	2302      	movs	r3, #2
 8000724:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800072e:	2308      	movs	r3, #8
 8000730:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000732:	2300      	movs	r3, #0
 8000734:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fa94 	bl	8001c6c <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800074a:	f000 f967 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	231f      	movs	r3, #31
 8000750:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2303      	movs	r3, #3
 8000754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	2105      	movs	r1, #5
 800076c:	4618      	mov	r0, r3
 800076e:	f001 feb5 	bl	80024dc <HAL_RCC_ClockConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000778:	f000 f950 	bl	8000a1c <Error_Handler>
  }
}
 800077c:	bf00      	nop
 800077e:	3770      	adds	r7, #112	; 0x70
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	44020800 	.word	0x44020800

08000788 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
	...

08000798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800079c:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_SPI1_Init+0xa4>)
 800079e:	4a28      	ldr	r2, [pc, #160]	; (8000840 <MX_SPI1_Init+0xa8>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_SPI1_Init+0xa4>)
 80007a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_SPI1_Init+0xa4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_SPI1_Init+0xa4>)
 80007b2:	2207      	movs	r2, #7
 80007b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_SPI1_Init+0xa4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_SPI1_Init+0xa4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_SPI1_Init+0xa4>)
 80007c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_SPI1_Init+0xa4>)
 80007cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_SPI1_Init+0xa4>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_SPI1_Init+0xa4>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_SPI1_Init+0xa4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_SPI1_Init+0xa4>)
 80007e6:	2207      	movs	r2, #7
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_SPI1_Init+0xa4>)
 80007ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_SPI1_Init+0xa4>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_SPI1_Init+0xa4>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_SPI1_Init+0xa4>)
 8000800:	2200      	movs	r2, #0
 8000802:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_SPI1_Init+0xa4>)
 8000806:	2200      	movs	r2, #0
 8000808:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_SPI1_Init+0xa4>)
 800080c:	2200      	movs	r2, #0
 800080e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_SPI1_Init+0xa4>)
 8000812:	2200      	movs	r2, #0
 8000814:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_SPI1_Init+0xa4>)
 8000818:	2200      	movs	r2, #0
 800081a:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_SPI1_Init+0xa4>)
 800081e:	2200      	movs	r2, #0
 8000820:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_SPI1_Init+0xa4>)
 8000824:	2200      	movs	r2, #0
 8000826:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_SPI1_Init+0xa4>)
 800082a:	f007 f9eb 	bl	8007c04 <HAL_SPI_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000834:	f000 f8f2 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000084 	.word	0x20000084
 8000840:	40013000 	.word	0x40013000

08000844 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 800084a:	4a23      	ldr	r2, [pc, #140]	; (80008d8 <MX_USART3_UART_Init+0x94>)
 800084c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088c:	4811      	ldr	r0, [pc, #68]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 800088e:	f008 fa34 	bl	8008cfa <HAL_UART_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000898:	f000 f8c0 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 80008a0:	f008 ff5a 	bl	8009758 <HAL_UARTEx_SetTxFifoThreshold>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008aa:	f000 f8b7 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4808      	ldr	r0, [pc, #32]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 80008b2:	f008 ff8f 	bl	80097d4 <HAL_UARTEx_SetRxFifoThreshold>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008bc:	f000 f8ae 	bl	8000a1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <MX_USART3_UART_Init+0x90>)
 80008c2:	f008 ff10 	bl	80096e6 <HAL_UARTEx_DisableFifoMode>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008cc:	f000 f8a6 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000114 	.word	0x20000114
 80008d8:	40004800 	.word	0x40004800

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	4b46      	ldr	r3, [pc, #280]	; (8000a0c <MX_GPIO_Init+0x130>)
 80008f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008f8:	4a44      	ldr	r2, [pc, #272]	; (8000a0c <MX_GPIO_Init+0x130>)
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000902:	4b42      	ldr	r3, [pc, #264]	; (8000a0c <MX_GPIO_Init+0x130>)
 8000904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b3e      	ldr	r3, [pc, #248]	; (8000a0c <MX_GPIO_Init+0x130>)
 8000912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000916:	4a3d      	ldr	r2, [pc, #244]	; (8000a0c <MX_GPIO_Init+0x130>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000920:	4b3a      	ldr	r3, [pc, #232]	; (8000a0c <MX_GPIO_Init+0x130>)
 8000922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	4b37      	ldr	r3, [pc, #220]	; (8000a0c <MX_GPIO_Init+0x130>)
 8000930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000934:	4a35      	ldr	r2, [pc, #212]	; (8000a0c <MX_GPIO_Init+0x130>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800093e:	4b33      	ldr	r3, [pc, #204]	; (8000a0c <MX_GPIO_Init+0x130>)
 8000940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000944:	f003 0308 	and.w	r3, r3, #8
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094c:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <MX_GPIO_Init+0x130>)
 800094e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000952:	4a2e      	ldr	r2, [pc, #184]	; (8000a0c <MX_GPIO_Init+0x130>)
 8000954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000958:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800095c:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <MX_GPIO_Init+0x130>)
 800095e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <MX_GPIO_Init+0x130>)
 800096c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000970:	4a26      	ldr	r2, [pc, #152]	; (8000a0c <MX_GPIO_Init+0x130>)
 8000972:	f043 0302 	orr.w	r3, r3, #2
 8000976:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800097a:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <MX_GPIO_Init+0x130>)
 800097c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000980:	f003 0302 	and.w	r3, r3, #2
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2140      	movs	r1, #64	; 0x40
 800098c:	4820      	ldr	r0, [pc, #128]	; (8000a10 <MX_GPIO_Init+0x134>)
 800098e:	f001 f923 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000998:	481e      	ldr	r0, [pc, #120]	; (8000a14 <MX_GPIO_Init+0x138>)
 800099a:	f001 f91d 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 800099e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a4:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <MX_GPIO_Init+0x13c>)
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	4619      	mov	r1, r3
 80009b2:	4817      	ldr	r0, [pc, #92]	; (8000a10 <MX_GPIO_Init+0x134>)
 80009b4:	f000 ffbe 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 80009b8:	2340      	movs	r3, #64	; 0x40
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4810      	ldr	r0, [pc, #64]	; (8000a10 <MX_GPIO_Init+0x134>)
 80009d0:	f000 ffb0 	bl	8001934 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 80009d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4809      	ldr	r0, [pc, #36]	; (8000a14 <MX_GPIO_Init+0x138>)
 80009ee:	f000 ffa1 	bl	8001934 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2100      	movs	r1, #0
 80009f6:	2018      	movs	r0, #24
 80009f8:	f000 ff67 	bl	80018ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 80009fc:	2018      	movs	r0, #24
 80009fe:	f000 ff7e 	bl	80018fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	44020c00 	.word	0x44020c00
 8000a10:	42020800 	.word	0x42020800
 8000a14:	42020400 	.word	0x42020400
 8000a18:	10110000 	.word	0x10110000

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <csn_set>:

/*
 * Private functions
 */

void csn_set() {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <csn_set+0x18>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <csn_set+0x1c>)
 8000a32:	8811      	ldrh	r1, [r2, #0]
 8000a34:	2201      	movs	r2, #1
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 f8ce 	bl	8001bd8 <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200001ac 	.word	0x200001ac
 8000a44:	200001b0 	.word	0x200001b0

08000a48 <csn_reset>:

void csn_reset() {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <csn_reset+0x18>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <csn_reset+0x1c>)
 8000a52:	8811      	ldrh	r1, [r2, #0]
 8000a54:	2200      	movs	r2, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 f8be 	bl	8001bd8 <HAL_GPIO_WritePin>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	200001ac 	.word	0x200001ac
 8000a64:	200001b0 	.word	0x200001b0

08000a68 <ce_set>:

void ce_set() {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <ce_set+0x18>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <ce_set+0x1c>)
 8000a72:	8811      	ldrh	r1, [r2, #0]
 8000a74:	2201      	movs	r2, #1
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 f8ae 	bl	8001bd8 <HAL_GPIO_WritePin>
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200001b4 	.word	0x200001b4
 8000a84:	200001b8 	.word	0x200001b8

08000a88 <ce_reset>:

void ce_reset() {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <ce_reset+0x18>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <ce_reset+0x1c>)
 8000a92:	8811      	ldrh	r1, [r2, #0]
 8000a94:	2200      	movs	r2, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 f89e 	bl	8001bd8 <HAL_GPIO_WritePin>
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200001b4 	.word	0x200001b4
 8000aa4:	200001b8 	.word	0x200001b8

08000aa8 <NRF_Init>:
 *
 * Main functions
 *
 */

NRF_Status NRF_Init(SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCSN, uint16_t PinCSN, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	80fb      	strh	r3, [r7, #6]
  HSPI = handle;
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <NRF_Init+0x48>)
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	6013      	str	r3, [r2, #0]
  NRF_CSN_Port = PortCSN;
 8000abe:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <NRF_Init+0x4c>)
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	6013      	str	r3, [r2, #0]
  NRF_CSN_Pin = PinCSN;
 8000ac4:	4a0c      	ldr	r2, [pc, #48]	; (8000af8 <NRF_Init+0x50>)
 8000ac6:	88fb      	ldrh	r3, [r7, #6]
 8000ac8:	8013      	strh	r3, [r2, #0]
  NRF_CE_Port = PortCE;
 8000aca:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <NRF_Init+0x54>)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	6013      	str	r3, [r2, #0]
  NRF_CE_Pin = PinCE;
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <NRF_Init+0x58>)
 8000ad2:	8b3b      	ldrh	r3, [r7, #24]
 8000ad4:	8013      	strh	r3, [r2, #0]

  // Make sure CSN i pulled high
  csn_set();
 8000ad6:	f7ff ffa7 	bl	8000a28 <csn_set>

  // Takes ~100ms from power on to start up
  HAL_Delay(100);
 8000ada:	2064      	movs	r0, #100	; 0x64
 8000adc:	f000 fdf6 	bl	80016cc <HAL_Delay>

  NRF_EnterMode(NRF_MODE_STANDBY1);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f000 f89f 	bl	8000c24 <NRF_EnterMode>

  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200001a8 	.word	0x200001a8
 8000af4:	200001ac 	.word	0x200001ac
 8000af8:	200001b0 	.word	0x200001b0
 8000afc:	200001b4 	.word	0x200001b4
 8000b00:	200001b8 	.word	0x200001b8

08000b04 <NRF_SendCommand>:

NRF_Status NRF_SendCommand(uint8_t cmd) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af02      	add	r7, sp, #8
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000b12:	f7ff ff99 	bl	8000a48 <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <NRF_SendCommand+0x44>)
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	f107 020e 	add.w	r2, r7, #14
 8000b1e:	1df9      	adds	r1, r7, #7
 8000b20:	230a      	movs	r3, #10
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2301      	movs	r3, #1
 8000b26:	f007 fdb9 	bl	800869c <HAL_SPI_TransmitReceive>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <NRF_SendCommand+0x34>
    return ret;
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	e002      	b.n	8000b3e <NRF_SendCommand+0x3a>
  }
  csn_set();
 8000b38:	f7ff ff76 	bl	8000a28 <csn_set>

  return ret;
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200001a8 	.word	0x200001a8

08000b4c <NRF_SendWriteCommand>:

NRF_Status NRF_SendWriteCommand(uint8_t cmd, uint8_t *write, uint8_t length) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	4603      	mov	r3, r0
 8000b54:	6039      	str	r1, [r7, #0]
 8000b56:	71fb      	strb	r3, [r7, #7]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000b60:	f7ff ff72 	bl	8000a48 <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <NRF_SendWriteCommand+0x68>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	f107 020e 	add.w	r2, r7, #14
 8000b6c:	1df9      	adds	r1, r7, #7
 8000b6e:	230a      	movs	r3, #10
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2301      	movs	r3, #1
 8000b74:	f007 fd92 	bl	800869c <HAL_SPI_TransmitReceive>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <NRF_SendWriteCommand+0x3a>
    return ret;
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	e011      	b.n	8000baa <NRF_SendWriteCommand+0x5e>
  }
  ret = HAL_SPI_Transmit(HSPI, write, length, NRF_SPI_TIMEOUT);
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <NRF_SendWriteCommand+0x68>)
 8000b88:	6818      	ldr	r0, [r3, #0]
 8000b8a:	79bb      	ldrb	r3, [r7, #6]
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	230a      	movs	r3, #10
 8000b90:	6839      	ldr	r1, [r7, #0]
 8000b92:	f007 f9a7 	bl	8007ee4 <HAL_SPI_Transmit>
 8000b96:	4603      	mov	r3, r0
 8000b98:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <NRF_SendWriteCommand+0x58>
    return ret;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	e002      	b.n	8000baa <NRF_SendWriteCommand+0x5e>
  }
  csn_set();
 8000ba4:	f7ff ff40 	bl	8000a28 <csn_set>

  return ret;
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200001a8 	.word	0x200001a8

08000bb8 <NRF_SendReadCommand>:

NRF_Status NRF_SendReadCommand(uint8_t cmd, uint8_t *read, uint8_t length) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000bcc:	f7ff ff3c 	bl	8000a48 <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <NRF_SendReadCommand+0x68>)
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	f107 020e 	add.w	r2, r7, #14
 8000bd8:	1df9      	adds	r1, r7, #7
 8000bda:	230a      	movs	r3, #10
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2301      	movs	r3, #1
 8000be0:	f007 fd5c 	bl	800869c <HAL_SPI_TransmitReceive>
 8000be4:	4603      	mov	r3, r0
 8000be6:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK) {
 8000be8:	7bfb      	ldrb	r3, [r7, #15]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <NRF_SendReadCommand+0x3a>
    return ret;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	e011      	b.n	8000c16 <NRF_SendReadCommand+0x5e>
  }
  ret = HAL_SPI_Receive(HSPI, read, length, NRF_SPI_TIMEOUT);
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <NRF_SendReadCommand+0x68>)
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	79bb      	ldrb	r3, [r7, #6]
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	230a      	movs	r3, #10
 8000bfc:	6839      	ldr	r1, [r7, #0]
 8000bfe:	f007 fb95 	bl	800832c <HAL_SPI_Receive>
 8000c02:	4603      	mov	r3, r0
 8000c04:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK) {
 8000c06:	7bfb      	ldrb	r3, [r7, #15]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <NRF_SendReadCommand+0x58>
    return ret;
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	e002      	b.n	8000c16 <NRF_SendReadCommand+0x5e>
  }
  csn_set();
 8000c10:	f7ff ff0a 	bl	8000a28 <csn_set>

  return ret;
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200001a8 	.word	0x200001a8

08000c24 <NRF_EnterMode>:
 *
 * Device control
 *
 */

NRF_Status NRF_EnterMode(uint8_t mode) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	73fb      	strb	r3, [r7, #15]

  switch(mode) {
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	2b03      	cmp	r3, #3
 8000c36:	dc2a      	bgt.n	8000c8e <NRF_EnterMode+0x6a>
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	da15      	bge.n	8000c68 <NRF_EnterMode+0x44>
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <NRF_EnterMode+0x22>
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d006      	beq.n	8000c52 <NRF_EnterMode+0x2e>
 8000c44:	e023      	b.n	8000c8e <NRF_EnterMode+0x6a>
    case NRF_MODE_POWERDOWN:
      // Can come from any mode
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000c46:	2101      	movs	r1, #1
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f000 f8ce 	bl	8000dea <NRF_ResetRegisterBit>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	73fb      	strb	r3, [r7, #15]
    case NRF_MODE_STANDBY1:
      // We expect to come from powerdown
      ce_reset();
 8000c52:	f7ff ff19 	bl	8000a88 <ce_reset>
      ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000c56:	2101      	movs	r1, #1
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f000 f895 	bl	8000d88 <NRF_SetRegisterBit>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(2);
 8000c62:	2002      	movs	r0, #2
 8000c64:	f000 fd32 	bl	80016cc <HAL_Delay>
    case NRF_MODE_RX:
    case NRF_MODE_TX:
      // We expect to come from standby-I
      if (mode == NRF_MODE_TX) {
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d106      	bne.n	8000c7c <NRF_EnterMode+0x58>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2000      	movs	r0, #0
 8000c72:	f000 f8ba 	bl	8000dea <NRF_ResetRegisterBit>
 8000c76:	4603      	mov	r3, r0
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	e005      	b.n	8000c88 <NRF_EnterMode+0x64>
      } else {
        ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f000 f882 	bl	8000d88 <NRF_SetRegisterBit>
 8000c84:	4603      	mov	r3, r0
 8000c86:	73fb      	strb	r3, [r7, #15]
      }

      // Enter mode
      ce_set();
 8000c88:	f7ff feee 	bl	8000a68 <ce_set>
      break;
 8000c8c:	e002      	b.n	8000c94 <NRF_EnterMode+0x70>
    default:
      ret = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	73fb      	strb	r3, [r7, #15]
      break;
 8000c92:	bf00      	nop
  }

  return ret;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <NRF_WritePayload>:

NRF_Status NRF_WritePayload(uint8_t *payload, uint8_t length) {
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	70fb      	strb	r3, [r7, #3]
  return NRF_SendWriteCommand(NRF_CMD_W_TX_PAYLOAD, payload, length);
 8000caa:	78fb      	ldrb	r3, [r7, #3]
 8000cac:	461a      	mov	r2, r3
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	20a0      	movs	r0, #160	; 0xa0
 8000cb2:	f7ff ff4b 	bl	8000b4c <NRF_SendWriteCommand>
 8000cb6:	4603      	mov	r3, r0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <NRF_TransmitAndWait>:
  ce_reset();

  return ret;
}

NRF_Status NRF_TransmitAndWait(uint8_t *payload, uint8_t length) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
  NRF_Status ret = HAL_OK;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	73fb      	strb	r3, [r7, #15]
  ret = NRF_WritePayload(payload, length);
 8000cd0:	78fb      	ldrb	r3, [r7, #3]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ffe2 	bl	8000c9e <NRF_WritePayload>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK) {
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <NRF_TransmitAndWait+0x28>
    return ret;
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	e01f      	b.n	8000d28 <NRF_TransmitAndWait+0x68>
  }

  ce_set();
 8000ce8:	f7ff febe 	bl	8000a68 <ce_set>
  uint8_t status;
  for(;;) {
    status = NRF_ReadStatus();
 8000cec:	f000 f8c4 	bl	8000e78 <NRF_ReadStatus>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	73bb      	strb	r3, [r7, #14]
    if (status & (1<<STATUS_BIT_TX_DS)) {
 8000cf4:	7bbb      	ldrb	r3, [r7, #14]
 8000cf6:	f003 0320 	and.w	r3, r3, #32
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d006      	beq.n	8000d0c <NRF_TransmitAndWait+0x4c>
      // Packet transmitted
      ret = NRF_SetRegisterBit(NRF_REG_STATUS, STATUS_BIT_TX_DS); // clear flag
 8000cfe:	2105      	movs	r1, #5
 8000d00:	2007      	movs	r0, #7
 8000d02:	f000 f841 	bl	8000d88 <NRF_SetRegisterBit>
 8000d06:	4603      	mov	r3, r0
 8000d08:	73fb      	strb	r3, [r7, #15]
      break;
 8000d0a:	e00a      	b.n	8000d22 <NRF_TransmitAndWait+0x62>
    } else if (status & (1<<STATUS_BIT_MAX_RT)) {
 8000d0c:	7bbb      	ldrb	r3, [r7, #14]
 8000d0e:	f003 0310 	and.w	r3, r3, #16
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d0ea      	beq.n	8000cec <NRF_TransmitAndWait+0x2c>
      // Max retransmits reached.
      NRF_SetRegisterBit(NRF_REG_STATUS, STATUS_BIT_MAX_RT); // clear flag
 8000d16:	2104      	movs	r1, #4
 8000d18:	2007      	movs	r0, #7
 8000d1a:	f000 f835 	bl	8000d88 <NRF_SetRegisterBit>
      ret = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	73fb      	strb	r3, [r7, #15]
      break;
    }
  }
  ce_reset();
 8000d22:	f7ff feb1 	bl	8000a88 <ce_reset>

  return ret;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <NRF_WriteRegister>:
 * Register helpers
 *
 */

/* Writing */
NRF_Status NRF_WriteRegister(uint8_t reg, uint8_t *write, uint8_t length) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_REGISTER | reg, write, length);
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f043 0320 	orr.w	r3, r3, #32
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	79ba      	ldrb	r2, [r7, #6]
 8000d4a:	6839      	ldr	r1, [r7, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fefd 	bl	8000b4c <NRF_SendWriteCommand>
 8000d52:	4603      	mov	r3, r0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <NRF_WriteRegisterByte>:

NRF_Status NRF_WriteRegisterByte(uint8_t reg, uint8_t byte) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	460a      	mov	r2, r1
 8000d66:	71fb      	strb	r3, [r7, #7]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	71bb      	strb	r3, [r7, #6]
  uint8_t write = byte;
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  return NRF_WriteRegister(reg, &write, 1);
 8000d70:	f107 010f 	add.w	r1, r7, #15
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	2201      	movs	r2, #1
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ffd9 	bl	8000d30 <NRF_WriteRegister>
 8000d7e:	4603      	mov	r3, r0
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <NRF_SetRegisterBit>:

NRF_Status NRF_SetRegisterBit(uint8_t reg, uint8_t bit) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	460a      	mov	r2, r1
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	4613      	mov	r3, r2
 8000d96:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 8000da0:	f107 010e 	add.w	r1, r7, #14
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	2201      	movs	r2, #1
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 f851 	bl	8000e50 <NRF_ReadRegister>
 8000dae:	4603      	mov	r3, r0
 8000db0:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <NRF_SetRegisterBit+0x34>
    return ret;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	e012      	b.n	8000de2 <NRF_SetRegisterBit+0x5a>
  }
  cfg = cfg | (1 << bit);
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	b25a      	sxtb	r2, r3
 8000dc6:	7bbb      	ldrb	r3, [r7, #14]
 8000dc8:	b25b      	sxtb	r3, r3
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 8000dd2:	f107 010e 	add.w	r1, r7, #14
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ffa8 	bl	8000d30 <NRF_WriteRegister>
 8000de0:	4603      	mov	r3, r0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <NRF_ResetRegisterBit>:

NRF_Status NRF_ResetRegisterBit(uint8_t reg, uint8_t bit) {
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	460a      	mov	r2, r1
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	4613      	mov	r3, r2
 8000df8:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 8000e02:	f107 010e 	add.w	r1, r7, #14
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f820 	bl	8000e50 <NRF_ReadRegister>
 8000e10:	4603      	mov	r3, r0
 8000e12:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <NRF_ResetRegisterBit+0x34>
    return ret;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
 8000e1c:	e014      	b.n	8000e48 <NRF_ResetRegisterBit+0x5e>
  }
  cfg = cfg & ~(1 << bit);
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	2201      	movs	r2, #1
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	b25a      	sxtb	r2, r3
 8000e2c:	7bbb      	ldrb	r3, [r7, #14]
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	4013      	ands	r3, r2
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 8000e38:	f107 010e 	add.w	r1, r7, #14
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff75 	bl	8000d30 <NRF_WriteRegister>
 8000e46:	4603      	mov	r3, r0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <NRF_ReadRegister>:


/* Reading */
NRF_Status NRF_ReadRegister(uint8_t reg, uint8_t *read, uint8_t length) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	71bb      	strb	r3, [r7, #6]
  return NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, read, length);
 8000e60:	79ba      	ldrb	r2, [r7, #6]
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	6839      	ldr	r1, [r7, #0]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fea6 	bl	8000bb8 <NRF_SendReadCommand>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <NRF_ReadStatus>:
  uint8_t read;
  NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, &read, 1);
  return read;
}

uint8_t NRF_ReadStatus() {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af02      	add	r7, sp, #8
  uint8_t status;
  uint8_t cmd = NRF_CMD_NOP;
 8000e7e:	23ff      	movs	r3, #255	; 0xff
 8000e80:	71bb      	strb	r3, [r7, #6]

  csn_reset();
 8000e82:	f7ff fde1 	bl	8000a48 <csn_reset>
  HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <NRF_ReadStatus+0x30>)
 8000e88:	6818      	ldr	r0, [r3, #0]
 8000e8a:	1dfa      	adds	r2, r7, #7
 8000e8c:	1db9      	adds	r1, r7, #6
 8000e8e:	230a      	movs	r3, #10
 8000e90:	9300      	str	r3, [sp, #0]
 8000e92:	2301      	movs	r3, #1
 8000e94:	f007 fc02 	bl	800869c <HAL_SPI_TransmitReceive>
  csn_set();
 8000e98:	f7ff fdc6 	bl	8000a28 <csn_set>

  return status;
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001a8 	.word	0x200001a8

08000eac <NRF_Reset>:
  }

  return ret;
}

void NRF_Reset() {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
  // Reset state (goto standby-I)
  csn_set();
 8000eb2:	f7ff fdb9 	bl	8000a28 <csn_set>
  ce_reset();
 8000eb6:	f7ff fde7 	bl	8000a88 <ce_reset>

  // Flush FIFOs
  NRF_EnterMode(NRF_MODE_TX);
 8000eba:	2003      	movs	r0, #3
 8000ebc:	f7ff feb2 	bl	8000c24 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_TX);
 8000ec0:	20e1      	movs	r0, #225	; 0xe1
 8000ec2:	f7ff fe1f 	bl	8000b04 <NRF_SendCommand>
  ce_reset();
 8000ec6:	f7ff fddf 	bl	8000a88 <ce_reset>
  NRF_EnterMode(NRF_MODE_RX);
 8000eca:	2002      	movs	r0, #2
 8000ecc:	f7ff feaa 	bl	8000c24 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_RX);
 8000ed0:	20e2      	movs	r0, #226	; 0xe2
 8000ed2:	f7ff fe17 	bl	8000b04 <NRF_SendCommand>
  ce_reset();
 8000ed6:	f7ff fdd7 	bl	8000a88 <ce_reset>

  // Flush register
  NRF_WriteRegisterByte(NRF_REG_CONFIG,       0x0A);
 8000eda:	210a      	movs	r1, #10
 8000edc:	2000      	movs	r0, #0
 8000ede:	f7ff ff3d 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_AA,        0x3f);
 8000ee2:	213f      	movs	r1, #63	; 0x3f
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f7ff ff39 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_RXADDR,    0x03);
 8000eea:	2103      	movs	r1, #3
 8000eec:	2002      	movs	r0, #2
 8000eee:	f7ff ff35 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_AW,     0x03);
 8000ef2:	2103      	movs	r1, #3
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f7ff ff31 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_RETR,   0x03);
 8000efa:	2103      	movs	r1, #3
 8000efc:	2004      	movs	r0, #4
 8000efe:	f7ff ff2d 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_CH,        0x02);
 8000f02:	2102      	movs	r1, #2
 8000f04:	2005      	movs	r0, #5
 8000f06:	f7ff ff29 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_SETUP,     0x0e);
 8000f0a:	210e      	movs	r1, #14
 8000f0c:	2006      	movs	r0, #6
 8000f0e:	f7ff ff25 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_STATUS,       0x70); // clear flags
 8000f12:	2170      	movs	r1, #112	; 0x70
 8000f14:	2007      	movs	r0, #7
 8000f16:	f7ff ff21 	bl	8000d5c <NRF_WriteRegisterByte>

  uint8_t address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000f1a:	4a2d      	ldr	r2, [pc, #180]	; (8000fd0 <NRF_Reset+0x124>)
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f24:	6018      	str	r0, [r3, #0]
 8000f26:	3304      	adds	r3, #4
 8000f28:	7019      	strb	r1, [r3, #0]
  uint8_t address2[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000f2a:	4a2a      	ldr	r2, [pc, #168]	; (8000fd4 <NRF_Reset+0x128>)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f32:	6018      	str	r0, [r3, #0]
 8000f34:	3304      	adds	r3, #4
 8000f36:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 8000f38:	f107 0308 	add.w	r3, r7, #8
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	4619      	mov	r1, r3
 8000f40:	200a      	movs	r0, #10
 8000f42:	f7ff fef5 	bl	8000d30 <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P1, address2, 5);
 8000f46:	463b      	mov	r3, r7
 8000f48:	2205      	movs	r2, #5
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	200b      	movs	r0, #11
 8000f4e:	f7ff feef 	bl	8000d30 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P2,   0xC3);
 8000f52:	21c3      	movs	r1, #195	; 0xc3
 8000f54:	200c      	movs	r0, #12
 8000f56:	f7ff ff01 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P3,   0xC4);
 8000f5a:	21c4      	movs	r1, #196	; 0xc4
 8000f5c:	200d      	movs	r0, #13
 8000f5e:	f7ff fefd 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P4,   0xC5);
 8000f62:	21c5      	movs	r1, #197	; 0xc5
 8000f64:	200e      	movs	r0, #14
 8000f66:	f7ff fef9 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P5,   0xC6);
 8000f6a:	21c6      	movs	r1, #198	; 0xc6
 8000f6c:	200f      	movs	r0, #15
 8000f6e:	f7ff fef5 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	2205      	movs	r2, #5
 8000f78:	4619      	mov	r1, r3
 8000f7a:	2010      	movs	r0, #16
 8000f7c:	f7ff fed8 	bl	8000d30 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,     0x00);
 8000f80:	2100      	movs	r1, #0
 8000f82:	2011      	movs	r0, #17
 8000f84:	f7ff feea 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P1,     0x00);
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2012      	movs	r0, #18
 8000f8c:	f7ff fee6 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P2,     0x00);
 8000f90:	2100      	movs	r1, #0
 8000f92:	2013      	movs	r0, #19
 8000f94:	f7ff fee2 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P3,     0x00);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2014      	movs	r0, #20
 8000f9c:	f7ff fede 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P4,     0x00);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2015      	movs	r0, #21
 8000fa4:	f7ff feda 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P5,     0x00);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2016      	movs	r0, #22
 8000fac:	f7ff fed6 	bl	8000d5c <NRF_WriteRegisterByte>

  NRF_WriteRegisterByte(NRF_REG_FIFO_STATUS,  0x00);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2017      	movs	r0, #23
 8000fb4:	f7ff fed2 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_DYNPD,        0x00);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	201c      	movs	r0, #28
 8000fbc:	f7ff fece 	bl	8000d5c <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_FEATURE,      0x00);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	201d      	movs	r0, #29
 8000fc4:	f7ff feca 	bl	8000d5c <NRF_WriteRegisterByte>
}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	0800a2d8 	.word	0x0800a2d8
 8000fd4:	0800a2e0 	.word	0x0800a2e0

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b0ce      	sub	sp, #312	; 0x138
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ff2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000ff6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001008:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800100c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001010:	4618      	mov	r0, r3
 8001012:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001016:	461a      	mov	r2, r3
 8001018:	2100      	movs	r1, #0
 800101a:	f008 fe5d 	bl	8009cd8 <memset>
  if(hspi->Instance==SPI1)
 800101e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001022:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a60      	ldr	r2, [pc, #384]	; (80011ac <HAL_SPI_MspInit+0x1c4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	f040 80b7 	bne.w	80011a0 <HAL_SPI_MspInit+0x1b8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001032:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001036:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 800103a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001046:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800104a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800104e:	2200      	movs	r2, #0
 8001050:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	4618      	mov	r0, r3
 800105a:	f001 fd81 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8001064:	f7ff fcda 	bl	8000a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001068:	4b51      	ldr	r3, [pc, #324]	; (80011b0 <HAL_SPI_MspInit+0x1c8>)
 800106a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800106e:	4a50      	ldr	r2, [pc, #320]	; (80011b0 <HAL_SPI_MspInit+0x1c8>)
 8001070:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001074:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001078:	4b4d      	ldr	r3, [pc, #308]	; (80011b0 <HAL_SPI_MspInit+0x1c8>)
 800107a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800107e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001082:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001086:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001090:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001094:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <HAL_SPI_MspInit+0x1c8>)
 8001098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800109c:	4a44      	ldr	r2, [pc, #272]	; (80011b0 <HAL_SPI_MspInit+0x1c8>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010a6:	4b42      	ldr	r3, [pc, #264]	; (80011b0 <HAL_SPI_MspInit+0x1c8>)
 80010a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010ac:	f003 0201 	and.w	r2, r3, #1
 80010b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010b4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80010c2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010c4:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <HAL_SPI_MspInit+0x1c8>)
 80010c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010ca:	4a39      	ldr	r2, [pc, #228]	; (80011b0 <HAL_SPI_MspInit+0x1c8>)
 80010cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010d4:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <HAL_SPI_MspInit+0x1c8>)
 80010d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010da:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80010de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80010f0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <HAL_SPI_MspInit+0x1c8>)
 80010f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010f8:	4a2d      	ldr	r2, [pc, #180]	; (80011b0 <HAL_SPI_MspInit+0x1c8>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001102:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <HAL_SPI_MspInit+0x1c8>)
 8001104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001108:	f003 0202 	and.w	r2, r3, #2
 800110c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800111a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800111e:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin;
 8001120:	2320      	movs	r3, #32
 8001122:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001138:	2305      	movs	r3, #5
 800113a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 800113e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001142:	4619      	mov	r1, r3
 8001144:	481b      	ldr	r0, [pc, #108]	; (80011b4 <HAL_SPI_MspInit+0x1cc>)
 8001146:	f000 fbf5 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 800114a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800114e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001164:	2305      	movs	r3, #5
 8001166:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 800116a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800116e:	4619      	mov	r1, r3
 8001170:	4811      	ldr	r0, [pc, #68]	; (80011b8 <HAL_SPI_MspInit+0x1d0>)
 8001172:	f000 fbdf 	bl	8001934 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MOSI_Pin;
 8001176:	2320      	movs	r3, #32
 8001178:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800118e:	2305      	movs	r3, #5
 8001190:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001194:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001198:	4619      	mov	r1, r3
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <HAL_SPI_MspInit+0x1d4>)
 800119c:	f000 fbca 	bl	8001934 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011a0:	bf00      	nop
 80011a2:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40013000 	.word	0x40013000
 80011b0:	44020c00 	.word	0x44020c00
 80011b4:	42020000 	.word	0x42020000
 80011b8:	42021800 	.word	0x42021800
 80011bc:	42020400 	.word	0x42020400

080011c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0cc      	sub	sp, #304	; 0x130
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011ce:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011e4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80011e8:	4618      	mov	r0, r3
 80011ea:	f44f 7384 	mov.w	r3, #264	; 0x108
 80011ee:	461a      	mov	r2, r3
 80011f0:	2100      	movs	r1, #0
 80011f2:	f008 fd71 	bl	8009cd8 <memset>
  if(huart->Instance==USART3)
 80011f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a33      	ldr	r2, [pc, #204]	; (80012d0 <HAL_UART_MspInit+0x110>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d15d      	bne.n	80012c4 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800120c:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001210:	f04f 0204 	mov.w	r2, #4
 8001214:	f04f 0300 	mov.w	r3, #0
 8001218:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800121c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001220:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001224:	2200      	movs	r2, #0
 8001226:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fc97 	bl	8002b60 <HAL_RCCEx_PeriphCLKConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8001238:	f7ff fbf0 	bl	8000a1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800123c:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <HAL_UART_MspInit+0x114>)
 800123e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001242:	4a24      	ldr	r2, [pc, #144]	; (80012d4 <HAL_UART_MspInit+0x114>)
 8001244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001248:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800124c:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <HAL_UART_MspInit+0x114>)
 800124e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001252:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8001256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800125a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001264:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001268:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_UART_MspInit+0x114>)
 800126c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001270:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_UART_MspInit+0x114>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <HAL_UART_MspInit+0x114>)
 800127c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001280:	f003 0208 	and.w	r2, r3, #8
 8001284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001288:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001292:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001296:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001298:	f44f 7340 	mov.w	r3, #768	; 0x300
 800129c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012b2:	2307      	movs	r3, #7
 80012b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	; (80012d8 <HAL_UART_MspInit+0x118>)
 80012c0:	f000 fb38 	bl	8001934 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40004800 	.word	0x40004800
 80012d4:	44020c00 	.word	0x44020c00
 80012d8:	42020c00 	.word	0x42020c00

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <NMI_Handler+0x4>

080012e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <MemManage_Handler+0x4>

080012ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001328:	f000 f9b0 	bl	800168c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}

08001330 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_USER_Pin);
 8001334:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001338:	f000 fc66 	bl	8001c08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e00a      	b.n	8001368 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001352:	f3af 8000 	nop.w
 8001356:	4601      	mov	r1, r0
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	60ba      	str	r2, [r7, #8]
 800135e:	b2ca      	uxtb	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	dbf0      	blt.n	8001352 <_read+0x12>
  }

  return len;
 8001370:	687b      	ldr	r3, [r7, #4]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e009      	b.n	80013a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	60ba      	str	r2, [r7, #8]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f909 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dbf1      	blt.n	800138c <_write+0x12>
  }
  return len;
 80013a8:	687b      	ldr	r3, [r7, #4]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_close>:

int _close(int file)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013da:	605a      	str	r2, [r3, #4]
  return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_isatty>:

int _isatty(int file)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <_sbrk+0x5c>)
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <_sbrk+0x60>)
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <_sbrk+0x64>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <_sbrk+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d207      	bcs.n	800145c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800144c:	f008 fc92 	bl	8009d74 <__errno>
 8001450:	4603      	mov	r3, r0
 8001452:	220c      	movs	r2, #12
 8001454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800145a:	e009      	b.n	8001470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <_sbrk+0x64>)
 800146c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200a0000 	.word	0x200a0000
 800147c:	00000400 	.word	0x00000400
 8001480:	200001bc 	.word	0x200001bc
 8001484:	20000310 	.word	0x20000310

08001488 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800148e:	4b35      	ldr	r3, [pc, #212]	; (8001564 <SystemInit+0xdc>)
 8001490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001494:	4a33      	ldr	r2, [pc, #204]	; (8001564 <SystemInit+0xdc>)
 8001496:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800149a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800149e:	4b32      	ldr	r3, [pc, #200]	; (8001568 <SystemInit+0xe0>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80014a4:	4b30      	ldr	r3, [pc, #192]	; (8001568 <SystemInit+0xe0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <SystemInit+0xe0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <SystemInit+0xe0>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	492c      	ldr	r1, [pc, #176]	; (8001568 <SystemInit+0xe0>)
 80014b6:	4b2d      	ldr	r3, [pc, #180]	; (800156c <SystemInit+0xe4>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <SystemInit+0xe0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <SystemInit+0xe0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <SystemInit+0xe0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80014ce:	4b26      	ldr	r3, [pc, #152]	; (8001568 <SystemInit+0xe0>)
 80014d0:	4a27      	ldr	r2, [pc, #156]	; (8001570 <SystemInit+0xe8>)
 80014d2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <SystemInit+0xe0>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <SystemInit+0xe0>)
 80014dc:	4a24      	ldr	r2, [pc, #144]	; (8001570 <SystemInit+0xe8>)
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <SystemInit+0xe0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <SystemInit+0xe0>)
 80014e8:	4a21      	ldr	r2, [pc, #132]	; (8001570 <SystemInit+0xe8>)
 80014ea:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <SystemInit+0xe0>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <SystemInit+0xe0>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <SystemInit+0xe0>)
 80014f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <SystemInit+0xe0>)
 8001500:	2200      	movs	r2, #0
 8001502:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <SystemInit+0xdc>)
 8001506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800150a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <SystemInit+0xec>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001514:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800151c:	d003      	beq.n	8001526 <SystemInit+0x9e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001524:	d117      	bne.n	8001556 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <SystemInit+0xec>)
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <SystemInit+0xec>)
 8001534:	4a10      	ldr	r2, [pc, #64]	; (8001578 <SystemInit+0xf0>)
 8001536:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <SystemInit+0xec>)
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <SystemInit+0xf4>)
 800153c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <SystemInit+0xec>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a0c      	ldr	r2, [pc, #48]	; (8001574 <SystemInit+0xec>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <SystemInit+0xec>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <SystemInit+0xec>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	61d3      	str	r3, [r2, #28]
  }
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00
 8001568:	44020c00 	.word	0x44020c00
 800156c:	eae2eae3 	.word	0xeae2eae3
 8001570:	01010280 	.word	0x01010280
 8001574:	40022000 	.word	0x40022000
 8001578:	08192a3b 	.word	0x08192a3b
 800157c:	4c5d6e7f 	.word	0x4c5d6e7f

08001580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001582:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001584:	f7ff ff80 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001588:	480c      	ldr	r0, [pc, #48]	; (80015bc <LoopForever+0x6>)
  ldr r1, =_edata
 800158a:	490d      	ldr	r1, [pc, #52]	; (80015c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <LoopForever+0xe>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001590:	e002      	b.n	8001598 <LoopCopyDataInit>

08001592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001596:	3304      	adds	r3, #4

08001598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800159c:	d3f9      	bcc.n	8001592 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800159e:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a0:	4c0a      	ldr	r4, [pc, #40]	; (80015cc <LoopForever+0x16>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a4:	e001      	b.n	80015aa <LoopFillZerobss>

080015a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a8:	3204      	adds	r2, #4

080015aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ac:	d3fb      	bcc.n	80015a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015ae:	f008 fbe7 	bl	8009d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015b2:	f7ff f86f 	bl	8000694 <main>

080015b6 <LoopForever>:

LoopForever:
    b LoopForever
 80015b6:	e7fe      	b.n	80015b6 <LoopForever>
  ldr   r0, =_estack
 80015b8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80015bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015c4:	0800a440 	.word	0x0800a440
  ldr r2, =_sbss
 80015c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015cc:	20000310 	.word	0x20000310

080015d0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d0:	e7fe      	b.n	80015d0 <ADC1_IRQHandler>
	...

080015d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d8:	2003      	movs	r0, #3
 80015da:	f000 f96b 	bl	80018b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80015de:	f001 f935 	bl	800284c <HAL_RCC_GetSysClockFreq>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_Init+0x40>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f003 030f 	and.w	r3, r3, #15
 80015ec:	490a      	ldr	r1, [pc, #40]	; (8001618 <HAL_Init+0x44>)
 80015ee:	5ccb      	ldrb	r3, [r1, r3]
 80015f0:	fa22 f303 	lsr.w	r3, r2, r3
 80015f4:	4a09      	ldr	r2, [pc, #36]	; (800161c <HAL_Init+0x48>)
 80015f6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015f8:	200f      	movs	r0, #15
 80015fa:	f000 f811 	bl	8001620 <HAL_InitTick>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e002      	b.n	800160e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fce6 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	44020c00 	.word	0x44020c00
 8001618:	0800a3f0 	.word	0x0800a3f0
 800161c:	20000000 	.word	0x20000000

08001620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_InitTick+0x60>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e021      	b.n	8001678 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_InitTick+0x64>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b11      	ldr	r3, [pc, #68]	; (8001680 <HAL_InitTick+0x60>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001642:	fbb3 f3f1 	udiv	r3, r3, r1
 8001646:	fbb2 f3f3 	udiv	r3, r2, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f965 	bl	800191a <HAL_SYSTICK_Config>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e00e      	b.n	8001678 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d80a      	bhi.n	8001676 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001660:	2200      	movs	r2, #0
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001668:	f000 f92f 	bl	80018ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800166c:	4a06      	ldr	r2, [pc, #24]	; (8001688 <HAL_InitTick+0x68>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	e000      	b.n	8001678 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
}
 8001678:	4618      	mov	r0, r3
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000008 	.word	0x20000008
 8001684:	20000000 	.word	0x20000000
 8001688:	20000004 	.word	0x20000004

0800168c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x20>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x24>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <HAL_IncTick+0x24>)
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000008 	.word	0x20000008
 80016b0:	200001c0 	.word	0x200001c0

080016b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return uwTick;
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <HAL_GetTick+0x14>)
 80016ba:	681b      	ldr	r3, [r3, #0]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	200001c0 	.word	0x200001c0

080016cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d4:	f7ff ffee 	bl	80016b4 <HAL_GetTick>
 80016d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016e4:	d005      	beq.n	80016f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_Delay+0x44>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016f2:	bf00      	nop
 80016f4:	f7ff ffde 	bl	80016b4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	429a      	cmp	r2, r3
 8001702:	d8f7      	bhi.n	80016f4 <HAL_Delay+0x28>
  {
  }
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000008 	.word	0x20000008

08001714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800173c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <__NVIC_GetPriorityGrouping+0x18>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0307 	and.w	r3, r3, #7
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db0b      	blt.n	80017a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	4907      	ldr	r1, [pc, #28]	; (80017b0 <__NVIC_EnableIRQ+0x38>)
 8001792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	2001      	movs	r0, #1
 800179a:	fa00 f202 	lsl.w	r2, r0, r2
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000e100 	.word	0xe000e100

080017b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	db0a      	blt.n	80017de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	490c      	ldr	r1, [pc, #48]	; (8001800 <__NVIC_SetPriority+0x4c>)
 80017ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d2:	0112      	lsls	r2, r2, #4
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	440b      	add	r3, r1
 80017d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017dc:	e00a      	b.n	80017f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4908      	ldr	r1, [pc, #32]	; (8001804 <__NVIC_SetPriority+0x50>)
 80017e4:	88fb      	ldrh	r3, [r7, #6]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	3b04      	subs	r3, #4
 80017ec:	0112      	lsls	r2, r2, #4
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	440b      	add	r3, r1
 80017f2:	761a      	strb	r2, [r3, #24]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000e100 	.word	0xe000e100
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f1c3 0307 	rsb	r3, r3, #7
 8001822:	2b04      	cmp	r3, #4
 8001824:	bf28      	it	cs
 8001826:	2304      	movcs	r3, #4
 8001828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3304      	adds	r3, #4
 800182e:	2b06      	cmp	r3, #6
 8001830:	d902      	bls.n	8001838 <NVIC_EncodePriority+0x30>
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3b03      	subs	r3, #3
 8001836:	e000      	b.n	800183a <NVIC_EncodePriority+0x32>
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	401a      	ands	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001850:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	43d9      	mvns	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	4313      	orrs	r3, r2
         );
}
 8001862:	4618      	mov	r0, r3
 8001864:	3724      	adds	r7, #36	; 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001880:	d301      	bcc.n	8001886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001882:	2301      	movs	r3, #1
 8001884:	e00f      	b.n	80018a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <SysTick_Config+0x40>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800188e:	210f      	movs	r1, #15
 8001890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001894:	f7ff ff8e 	bl	80017b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <SysTick_Config+0x40>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189e:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <SysTick_Config+0x40>)
 80018a0:	2207      	movs	r2, #7
 80018a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	e000e010 	.word	0xe000e010

080018b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ff29 	bl	8001714 <__NVIC_SetPriorityGrouping>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018d8:	f7ff ff40 	bl	800175c <__NVIC_GetPriorityGrouping>
 80018dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	6978      	ldr	r0, [r7, #20]
 80018e4:	f7ff ff90 	bl	8001808 <NVIC_EncodePriority>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff5f 	bl	80017b4 <__NVIC_SetPriority>
}
 80018f6:	bf00      	nop
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001908:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff33 	bl	8001778 <__NVIC_EnableIRQ>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffa4 	bl	8001870 <SysTick_Config>
 8001928:	4603      	mov	r3, r0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001942:	e136      	b.n	8001bb2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	2101      	movs	r1, #1
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	4013      	ands	r3, r2
 8001952:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8128 	beq.w	8001bac <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x38>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b12      	cmp	r3, #18
 800196a:	d125      	bne.n	80019b8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	08da      	lsrs	r2, r3, #3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3208      	adds	r2, #8
 8001974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001978:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	220f      	movs	r2, #15
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4013      	ands	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	f003 020f 	and.w	r2, r3, #15
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	6979      	ldr	r1, [r7, #20]
 80019b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4013      	ands	r3, r2
 80019ce:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d00b      	beq.n	8001a0c <HAL_GPIO_Init+0xd8>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d007      	beq.n	8001a0c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a00:	2b11      	cmp	r3, #17
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b12      	cmp	r3, #18
 8001a0a:	d130      	bne.n	8001a6e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4013      	ands	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a42:	2201      	movs	r2, #1
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 0201 	and.w	r2, r3, #1
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d017      	beq.n	8001aa6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d07c      	beq.n	8001bac <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001ab2:	4a47      	ldr	r2, [pc, #284]	; (8001bd0 <HAL_GPIO_Init+0x29c>)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3318      	adds	r3, #24
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0a9a      	lsrs	r2, r3, #10
 8001ada:	4b3e      	ldr	r3, [pc, #248]	; (8001bd4 <HAL_GPIO_Init+0x2a0>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	f002 0203 	and.w	r2, r2, #3
 8001ae4:	00d2      	lsls	r2, r2, #3
 8001ae6:	4093      	lsls	r3, r2
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001aee:	4938      	ldr	r1, [pc, #224]	; (8001bd0 <HAL_GPIO_Init+0x29c>)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3318      	adds	r3, #24
 8001af6:	697a      	ldr	r2, [r7, #20]
 8001af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001afc:	4b34      	ldr	r3, [pc, #208]	; (8001bd0 <HAL_GPIO_Init+0x29c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001b20:	4a2b      	ldr	r2, [pc, #172]	; (8001bd0 <HAL_GPIO_Init+0x29c>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001b26:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <HAL_GPIO_Init+0x29c>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	4013      	ands	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001b4a:	4a21      	ldr	r2, [pc, #132]	; (8001bd0 <HAL_GPIO_Init+0x29c>)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001b50:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <HAL_GPIO_Init+0x29c>)
 8001b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b56:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001b76:	4a16      	ldr	r2, [pc, #88]	; (8001bd0 <HAL_GPIO_Init+0x29c>)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_GPIO_Init+0x29c>)
 8001b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b84:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001ba4:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_GPIO_Init+0x29c>)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f47f aec1 	bne.w	8001944 <HAL_GPIO_Init+0x10>
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	bf00      	nop
 8001bc6:	371c      	adds	r7, #28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	44022000 	.word	0x44022000
 8001bd4:	002f7f7f 	.word	0x002f7f7f

08001bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001be8:	787b      	ldrb	r3, [r7, #1]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001c1e:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001c24:	88fb      	ldrh	r3, [r7, #6]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fcd2 	bl	80005d0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001c38:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001c3e:	88fb      	ldrh	r3, [r7, #6]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f000 f807 	bl	8001c54 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	44022000 	.word	0x44022000

08001c54 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
	...

08001c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d102      	bne.n	8001c80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f000 bc28 	b.w	80024d0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c80:	4b94      	ldr	r3, [pc, #592]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	f003 0318 	and.w	r3, r3, #24
 8001c88:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001c8a:	4b92      	ldr	r3, [pc, #584]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d05b      	beq.n	8001d58 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x46>
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	2b18      	cmp	r3, #24
 8001caa:	d114      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d111      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	f000 bc08 	b.w	80024d0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001cc0:	4b84      	ldr	r3, [pc, #528]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	041b      	lsls	r3, r3, #16
 8001cce:	4981      	ldr	r1, [pc, #516]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001cd4:	e040      	b.n	8001d58 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d023      	beq.n	8001d26 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001cde:	4b7d      	ldr	r3, [pc, #500]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a7c      	ldr	r2, [pc, #496]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7ff fce3 	bl	80016b4 <HAL_GetTick>
 8001cee:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001cf2:	f7ff fcdf 	bl	80016b4 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e3e5      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001d04:	4b73      	ldr	r3, [pc, #460]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001d10:	4b70      	ldr	r3, [pc, #448]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	496d      	ldr	r1, [pc, #436]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	618b      	str	r3, [r1, #24]
 8001d24:	e018      	b.n	8001d58 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d26:	4b6b      	ldr	r3, [pc, #428]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a6a      	ldr	r2, [pc, #424]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7ff fcbf 	bl	80016b4 <HAL_GetTick>
 8001d36:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fcbb 	bl	80016b4 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e3c1      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001d4c:	4b61      	ldr	r3, [pc, #388]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f0      	bne.n	8001d3a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80a0 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	2b10      	cmp	r3, #16
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_OscConfig+0x10c>
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2b18      	cmp	r3, #24
 8001d70:	d109      	bne.n	8001d86 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 8092 	bne.w	8001ea6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e3a4      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d8e:	d106      	bne.n	8001d9e <HAL_RCC_OscConfig+0x132>
 8001d90:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a4f      	ldr	r2, [pc, #316]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001d96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e058      	b.n	8001e50 <HAL_RCC_OscConfig+0x1e4>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d112      	bne.n	8001dcc <HAL_RCC_OscConfig+0x160>
 8001da6:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a4a      	ldr	r2, [pc, #296]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b48      	ldr	r3, [pc, #288]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a47      	ldr	r2, [pc, #284]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001db8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a44      	ldr	r2, [pc, #272]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001dc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e041      	b.n	8001e50 <HAL_RCC_OscConfig+0x1e4>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd4:	d112      	bne.n	8001dfc <HAL_RCC_OscConfig+0x190>
 8001dd6:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a3e      	ldr	r2, [pc, #248]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b3c      	ldr	r3, [pc, #240]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a3b      	ldr	r2, [pc, #236]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001de8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b39      	ldr	r3, [pc, #228]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a38      	ldr	r2, [pc, #224]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e029      	b.n	8001e50 <HAL_RCC_OscConfig+0x1e4>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001e04:	d112      	bne.n	8001e2c <HAL_RCC_OscConfig+0x1c0>
 8001e06:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a32      	ldr	r2, [pc, #200]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a2f      	ldr	r2, [pc, #188]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001e18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a2c      	ldr	r2, [pc, #176]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e011      	b.n	8001e50 <HAL_RCC_OscConfig+0x1e4>
 8001e2c:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a28      	ldr	r2, [pc, #160]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a25      	ldr	r2, [pc, #148]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b23      	ldr	r3, [pc, #140]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001e4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d013      	beq.n	8001e80 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff fc2c 	bl	80016b4 <HAL_GetTick>
 8001e5c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001e60:	f7ff fc28 	bl	80016b4 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b64      	cmp	r3, #100	; 0x64
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e32e      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x1f4>
 8001e7e:	e012      	b.n	8001ea6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff fc18 	bl	80016b4 <HAL_GetTick>
 8001e84:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001e88:	f7ff fc14 	bl	80016b4 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b64      	cmp	r3, #100	; 0x64
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e31a      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ed4 <HAL_RCC_OscConfig+0x268>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 809a 	beq.w	8001fe8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x25a>
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	2b18      	cmp	r3, #24
 8001ebe:	d149      	bne.n	8001f54 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d146      	bne.n	8001f54 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d104      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e2fe      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
 8001ed2:	bf00      	nop
 8001ed4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d11c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001ede:	4b9a      	ldr	r3, [pc, #616]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0218 	and.w	r2, r3, #24
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d014      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001eee:	4b96      	ldr	r3, [pc, #600]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f023 0218 	bic.w	r2, r3, #24
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	4993      	ldr	r1, [pc, #588]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001f00:	f000 fdd0 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f04:	4b91      	ldr	r3, [pc, #580]	; (800214c <HAL_RCC_OscConfig+0x4e0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fb89 	bl	8001620 <HAL_InitTick>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e2db      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff fbcc 	bl	80016b4 <HAL_GetTick>
 8001f1c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001f20:	f7ff fbc8 	bl	80016b4 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e2ce      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f32:	4b85      	ldr	r3, [pc, #532]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001f3e:	4b82      	ldr	r3, [pc, #520]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	041b      	lsls	r3, r3, #16
 8001f4c:	497e      	ldr	r1, [pc, #504]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001f52:	e049      	b.n	8001fe8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d02c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001f5c:	4b7a      	ldr	r3, [pc, #488]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 0218 	bic.w	r2, r3, #24
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	4977      	ldr	r1, [pc, #476]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001f6e:	4b76      	ldr	r3, [pc, #472]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a75      	ldr	r2, [pc, #468]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7a:	f7ff fb9b 	bl	80016b4 <HAL_GetTick>
 8001f7e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001f82:	f7ff fb97 	bl	80016b4 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e29d      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f94:	4b6c      	ldr	r3, [pc, #432]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0f0      	beq.n	8001f82 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001fa0:	4b69      	ldr	r3, [pc, #420]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	041b      	lsls	r3, r3, #16
 8001fae:	4966      	ldr	r1, [pc, #408]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	610b      	str	r3, [r1, #16]
 8001fb4:	e018      	b.n	8001fe8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb6:	4b64      	ldr	r3, [pc, #400]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a63      	ldr	r2, [pc, #396]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc2:	f7ff fb77 	bl	80016b4 <HAL_GetTick>
 8001fc6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001fca:	f7ff fb73 	bl	80016b4 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e279      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fdc:	4b5a      	ldr	r3, [pc, #360]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d03c      	beq.n	800206e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01c      	beq.n	8002036 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffc:	4b52      	ldr	r3, [pc, #328]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8001ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002002:	4a51      	ldr	r2, [pc, #324]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8002004:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002008:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200c:	f7ff fb52 	bl	80016b4 <HAL_GetTick>
 8002010:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002014:	f7ff fb4e 	bl	80016b4 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e254      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002026:	4b48      	ldr	r3, [pc, #288]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8002028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800202c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0ef      	beq.n	8002014 <HAL_RCC_OscConfig+0x3a8>
 8002034:	e01b      	b.n	800206e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002036:	4b44      	ldr	r3, [pc, #272]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8002038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800203c:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 800203e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002042:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7ff fb35 	bl	80016b4 <HAL_GetTick>
 800204a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800204e:	f7ff fb31 	bl	80016b4 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e237      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002060:	4b39      	ldr	r3, [pc, #228]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8002062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002066:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1ef      	bne.n	800204e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80d2 	beq.w	8002220 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800207c:	4b34      	ldr	r3, [pc, #208]	; (8002150 <HAL_RCC_OscConfig+0x4e4>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d118      	bne.n	80020ba <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002088:	4b31      	ldr	r3, [pc, #196]	; (8002150 <HAL_RCC_OscConfig+0x4e4>)
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	4a30      	ldr	r2, [pc, #192]	; (8002150 <HAL_RCC_OscConfig+0x4e4>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002094:	f7ff fb0e 	bl	80016b4 <HAL_GetTick>
 8002098:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209c:	f7ff fb0a 	bl	80016b4 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e210      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80020ae:	4b28      	ldr	r3, [pc, #160]	; (8002150 <HAL_RCC_OscConfig+0x4e4>)
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d108      	bne.n	80020d4 <HAL_RCC_OscConfig+0x468>
 80020c2:	4b21      	ldr	r3, [pc, #132]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 80020c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020c8:	4a1f      	ldr	r2, [pc, #124]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020d2:	e074      	b.n	80021be <HAL_RCC_OscConfig+0x552>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d118      	bne.n	800210e <HAL_RCC_OscConfig+0x4a2>
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 80020de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020e2:	4a19      	ldr	r2, [pc, #100]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020ec:	4b16      	ldr	r3, [pc, #88]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 80020ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80020f2:	4a15      	ldr	r2, [pc, #84]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 80020f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 80020fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002102:	4a11      	ldr	r2, [pc, #68]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8002104:	f023 0304 	bic.w	r3, r3, #4
 8002108:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800210c:	e057      	b.n	80021be <HAL_RCC_OscConfig+0x552>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b05      	cmp	r3, #5
 8002114:	d11e      	bne.n	8002154 <HAL_RCC_OscConfig+0x4e8>
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8002118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8002128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800212c:	4a06      	ldr	r2, [pc, #24]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 800212e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002132:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 8002138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800213c:	4a02      	ldr	r2, [pc, #8]	; (8002148 <HAL_RCC_OscConfig+0x4dc>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002146:	e03a      	b.n	80021be <HAL_RCC_OscConfig+0x552>
 8002148:	44020c00 	.word	0x44020c00
 800214c:	20000004 	.word	0x20000004
 8002150:	44020800 	.word	0x44020800
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b85      	cmp	r3, #133	; 0x85
 800215a:	d118      	bne.n	800218e <HAL_RCC_OscConfig+0x522>
 800215c:	4ba2      	ldr	r3, [pc, #648]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 800215e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002162:	4aa1      	ldr	r2, [pc, #644]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800216c:	4b9e      	ldr	r3, [pc, #632]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 800216e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002172:	4a9d      	ldr	r2, [pc, #628]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002178:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800217c:	4b9a      	ldr	r3, [pc, #616]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 800217e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002182:	4a99      	ldr	r2, [pc, #612]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800218c:	e017      	b.n	80021be <HAL_RCC_OscConfig+0x552>
 800218e:	4b96      	ldr	r3, [pc, #600]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002194:	4a94      	ldr	r2, [pc, #592]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002196:	f023 0301 	bic.w	r3, r3, #1
 800219a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800219e:	4b92      	ldr	r3, [pc, #584]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 80021a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021a4:	4a90      	ldr	r2, [pc, #576]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 80021a6:	f023 0304 	bic.w	r3, r3, #4
 80021aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021ae:	4b8e      	ldr	r3, [pc, #568]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 80021b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021b4:	4a8c      	ldr	r2, [pc, #560]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 80021b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d016      	beq.n	80021f4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c6:	f7ff fa75 	bl	80016b4 <HAL_GetTick>
 80021ca:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7ff fa71 	bl	80016b4 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e175      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021e4:	4b80      	ldr	r3, [pc, #512]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 80021e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0ed      	beq.n	80021ce <HAL_RCC_OscConfig+0x562>
 80021f2:	e015      	b.n	8002220 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f4:	f7ff fa5e 	bl	80016b4 <HAL_GetTick>
 80021f8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fc:	f7ff fa5a 	bl	80016b4 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e15e      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002212:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1ed      	bne.n	80021fc <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d036      	beq.n	800229a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	2b00      	cmp	r3, #0
 8002232:	d019      	beq.n	8002268 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002234:	4b6c      	ldr	r3, [pc, #432]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a6b      	ldr	r2, [pc, #428]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 800223a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800223e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002240:	f7ff fa38 	bl	80016b4 <HAL_GetTick>
 8002244:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002248:	f7ff fa34 	bl	80016b4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e13a      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x5dc>
 8002266:	e018      	b.n	800229a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002268:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a5e      	ldr	r2, [pc, #376]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 800226e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002272:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002274:	f7ff fa1e 	bl	80016b4 <HAL_GetTick>
 8002278:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800227c:	f7ff fa1a 	bl	80016b4 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e120      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800228e:	4b56      	ldr	r3, [pc, #344]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8115 	beq.w	80024ce <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2b18      	cmp	r3, #24
 80022a8:	f000 80af 	beq.w	800240a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	f040 8086 	bne.w	80023c2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80022b6:	4b4c      	ldr	r3, [pc, #304]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a4b      	ldr	r2, [pc, #300]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 80022bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c2:	f7ff f9f7 	bl	80016b4 <HAL_GetTick>
 80022c6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80022ca:	f7ff f9f3 	bl	80016b4 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e0f9      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f0      	bne.n	80022ca <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80022e8:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80022f0:	f023 0303 	bic.w	r3, r3, #3
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022fc:	0212      	lsls	r2, r2, #8
 80022fe:	430a      	orrs	r2, r1
 8002300:	4939      	ldr	r1, [pc, #228]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002302:	4313      	orrs	r3, r2
 8002304:	628b      	str	r3, [r1, #40]	; 0x28
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230a:	3b01      	subs	r3, #1
 800230c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002314:	3b01      	subs	r3, #1
 8002316:	025b      	lsls	r3, r3, #9
 8002318:	b29b      	uxth	r3, r3
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002320:	3b01      	subs	r3, #1
 8002322:	041b      	lsls	r3, r3, #16
 8002324:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002328:	431a      	orrs	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	3b01      	subs	r3, #1
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002336:	492c      	ldr	r1, [pc, #176]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002338:	4313      	orrs	r3, r2
 800233a:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800233c:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	4a29      	ldr	r2, [pc, #164]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002342:	f023 0310 	bic.w	r3, r3, #16
 8002346:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234c:	4a26      	ldr	r2, [pc, #152]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002352:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	4a24      	ldr	r2, [pc, #144]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002358:	f043 0310 	orr.w	r3, r3, #16
 800235c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800235e:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	f023 020c 	bic.w	r2, r3, #12
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	491f      	ldr	r1, [pc, #124]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 800236c:	4313      	orrs	r3, r2
 800236e:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	f023 0220 	bic.w	r2, r3, #32
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237c:	491a      	ldr	r1, [pc, #104]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 800237e:	4313      	orrs	r3, r2
 8002380:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002386:	4a18      	ldr	r2, [pc, #96]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800238e:	4b16      	ldr	r3, [pc, #88]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 8002394:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7ff f98b 	bl	80016b4 <HAL_GetTick>
 800239e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80023a2:	f7ff f987 	bl	80016b4 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e08d      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x736>
 80023c0:	e085      	b.n	80024ce <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a08      	ldr	r2, [pc, #32]	; (80023e8 <HAL_RCC_OscConfig+0x77c>)
 80023c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ce:	f7ff f971 	bl	80016b4 <HAL_GetTick>
 80023d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023d4:	e00a      	b.n	80023ec <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80023d6:	f7ff f96d 	bl	80016b4 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d903      	bls.n	80023ec <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e073      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
 80023e8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023ec:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <HAL_RCC_OscConfig+0x86c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1ee      	bne.n	80023d6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80023f8:	4b37      	ldr	r3, [pc, #220]	; (80024d8 <HAL_RCC_OscConfig+0x86c>)
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	4a36      	ldr	r2, [pc, #216]	; (80024d8 <HAL_RCC_OscConfig+0x86c>)
 80023fe:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002402:	f023 0303 	bic.w	r3, r3, #3
 8002406:	6293      	str	r3, [r2, #40]	; 0x28
 8002408:	e061      	b.n	80024ce <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800240a:	4b33      	ldr	r3, [pc, #204]	; (80024d8 <HAL_RCC_OscConfig+0x86c>)
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002410:	4b31      	ldr	r3, [pc, #196]	; (80024d8 <HAL_RCC_OscConfig+0x86c>)
 8002412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002414:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800241a:	2b01      	cmp	r3, #1
 800241c:	d031      	beq.n	8002482 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f003 0203 	and.w	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d12a      	bne.n	8002482 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	0a1b      	lsrs	r3, r3, #8
 8002430:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d122      	bne.n	8002482 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002448:	429a      	cmp	r2, r3
 800244a:	d11a      	bne.n	8002482 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	0a5b      	lsrs	r3, r3, #9
 8002450:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800245a:	429a      	cmp	r2, r3
 800245c:	d111      	bne.n	8002482 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	0c1b      	lsrs	r3, r3, #16
 8002462:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d108      	bne.n	8002482 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	0e1b      	lsrs	r3, r3, #24
 8002474:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e024      	b.n	80024d0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_RCC_OscConfig+0x86c>)
 8002488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248a:	08db      	lsrs	r3, r3, #3
 800248c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002494:	429a      	cmp	r2, r3
 8002496:	d01a      	beq.n	80024ce <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <HAL_RCC_OscConfig+0x86c>)
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <HAL_RCC_OscConfig+0x86c>)
 800249e:	f023 0310 	bic.w	r3, r3, #16
 80024a2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff f906 	bl	80016b4 <HAL_GetTick>
 80024a8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80024aa:	bf00      	nop
 80024ac:	f7ff f902 	bl	80016b4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d0f9      	beq.n	80024ac <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <HAL_RCC_OscConfig+0x86c>)
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCC_OscConfig+0x86c>)
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_RCC_OscConfig+0x86c>)
 80024c8:	f043 0310 	orr.w	r3, r3, #16
 80024cc:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3720      	adds	r7, #32
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	44020c00 	.word	0x44020c00

080024dc <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e19e      	b.n	800282e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024f0:	4b83      	ldr	r3, [pc, #524]	; (8002700 <HAL_RCC_ClockConfig+0x224>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d910      	bls.n	8002520 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fe:	4b80      	ldr	r3, [pc, #512]	; (8002700 <HAL_RCC_ClockConfig+0x224>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f023 020f 	bic.w	r2, r3, #15
 8002506:	497e      	ldr	r1, [pc, #504]	; (8002700 <HAL_RCC_ClockConfig+0x224>)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b7c      	ldr	r3, [pc, #496]	; (8002700 <HAL_RCC_ClockConfig+0x224>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e186      	b.n	800282e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	d012      	beq.n	8002552 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	4b74      	ldr	r3, [pc, #464]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800253a:	429a      	cmp	r2, r3
 800253c:	d909      	bls.n	8002552 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800253e:	4b71      	ldr	r3, [pc, #452]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	496d      	ldr	r1, [pc, #436]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 800254e:	4313      	orrs	r3, r2
 8002550:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d012      	beq.n	8002584 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	4b68      	ldr	r3, [pc, #416]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	091b      	lsrs	r3, r3, #4
 8002568:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800256c:	429a      	cmp	r2, r3
 800256e:	d909      	bls.n	8002584 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002570:	4b64      	ldr	r3, [pc, #400]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	4961      	ldr	r1, [pc, #388]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 8002580:	4313      	orrs	r3, r2
 8002582:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d010      	beq.n	80025b2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800259c:	429a      	cmp	r2, r3
 800259e:	d908      	bls.n	80025b2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80025a0:	4b58      	ldr	r3, [pc, #352]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4955      	ldr	r1, [pc, #340]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d010      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	4b50      	ldr	r3, [pc, #320]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d908      	bls.n	80025e0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80025ce:	4b4d      	ldr	r3, [pc, #308]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 80025d0:	6a1b      	ldr	r3, [r3, #32]
 80025d2:	f023 020f 	bic.w	r2, r3, #15
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	494a      	ldr	r1, [pc, #296]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8093 	beq.w	8002714 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d107      	bne.n	8002606 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80025f6:	4b43      	ldr	r3, [pc, #268]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d121      	bne.n	8002646 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e113      	b.n	800282e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800260e:	4b3d      	ldr	r3, [pc, #244]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d115      	bne.n	8002646 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e107      	b.n	800282e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002626:	4b37      	ldr	r3, [pc, #220]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800262e:	2b00      	cmp	r3, #0
 8002630:	d109      	bne.n	8002646 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e0fb      	b.n	800282e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002636:	4b33      	ldr	r3, [pc, #204]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e0f3      	b.n	800282e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002646:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	f023 0203 	bic.w	r2, r3, #3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	492c      	ldr	r1, [pc, #176]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 8002654:	4313      	orrs	r3, r2
 8002656:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002658:	f7ff f82c 	bl	80016b4 <HAL_GetTick>
 800265c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d112      	bne.n	800268c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002666:	e00a      	b.n	800267e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002668:	f7ff f824 	bl	80016b4 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	; 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e0d7      	b.n	800282e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800267e:	4b21      	ldr	r3, [pc, #132]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 0318 	and.w	r3, r3, #24
 8002686:	2b18      	cmp	r3, #24
 8002688:	d1ee      	bne.n	8002668 <HAL_RCC_ClockConfig+0x18c>
 800268a:	e043      	b.n	8002714 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d112      	bne.n	80026ba <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002694:	e00a      	b.n	80026ac <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002696:	f7ff f80d 	bl	80016b4 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e0c0      	b.n	800282e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f003 0318 	and.w	r3, r3, #24
 80026b4:	2b10      	cmp	r3, #16
 80026b6:	d1ee      	bne.n	8002696 <HAL_RCC_ClockConfig+0x1ba>
 80026b8:	e02c      	b.n	8002714 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d122      	bne.n	8002708 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80026c2:	e00a      	b.n	80026da <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80026c4:	f7fe fff6 	bl	80016b4 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e0a9      	b.n	800282e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_RCC_ClockConfig+0x228>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f003 0318 	and.w	r3, r3, #24
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d1ee      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x1e8>
 80026e6:	e015      	b.n	8002714 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe ffe4 	bl	80016b4 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d906      	bls.n	8002708 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e097      	b.n	800282e <HAL_RCC_ClockConfig+0x352>
 80026fe:	bf00      	nop
 8002700:	40022000 	.word	0x40022000
 8002704:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002708:	4b4b      	ldr	r3, [pc, #300]	; (8002838 <HAL_RCC_ClockConfig+0x35c>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f003 0318 	and.w	r3, r3, #24
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e9      	bne.n	80026e8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d010      	beq.n	8002742 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	4b44      	ldr	r3, [pc, #272]	; (8002838 <HAL_RCC_ClockConfig+0x35c>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	429a      	cmp	r2, r3
 800272e:	d208      	bcs.n	8002742 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002730:	4b41      	ldr	r3, [pc, #260]	; (8002838 <HAL_RCC_ClockConfig+0x35c>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f023 020f 	bic.w	r2, r3, #15
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	493e      	ldr	r1, [pc, #248]	; (8002838 <HAL_RCC_ClockConfig+0x35c>)
 800273e:	4313      	orrs	r3, r2
 8002740:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002742:	4b3e      	ldr	r3, [pc, #248]	; (800283c <HAL_RCC_ClockConfig+0x360>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d210      	bcs.n	8002772 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002750:	4b3a      	ldr	r3, [pc, #232]	; (800283c <HAL_RCC_ClockConfig+0x360>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 020f 	bic.w	r2, r3, #15
 8002758:	4938      	ldr	r1, [pc, #224]	; (800283c <HAL_RCC_ClockConfig+0x360>)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002760:	4b36      	ldr	r3, [pc, #216]	; (800283c <HAL_RCC_ClockConfig+0x360>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 030f 	and.w	r3, r3, #15
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e05d      	b.n	800282e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	d010      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	4b2d      	ldr	r3, [pc, #180]	; (8002838 <HAL_RCC_ClockConfig+0x35c>)
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800278a:	429a      	cmp	r2, r3
 800278c:	d208      	bcs.n	80027a0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <HAL_RCC_ClockConfig+0x35c>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4927      	ldr	r1, [pc, #156]	; (8002838 <HAL_RCC_ClockConfig+0x35c>)
 800279c:	4313      	orrs	r3, r2
 800279e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d012      	beq.n	80027d2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_RCC_ClockConfig+0x35c>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d209      	bcs.n	80027d2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80027be:	4b1e      	ldr	r3, [pc, #120]	; (8002838 <HAL_RCC_ClockConfig+0x35c>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	491a      	ldr	r1, [pc, #104]	; (8002838 <HAL_RCC_ClockConfig+0x35c>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d012      	beq.n	8002804 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_RCC_ClockConfig+0x35c>)
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d209      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80027f0:	4b11      	ldr	r3, [pc, #68]	; (8002838 <HAL_RCC_ClockConfig+0x35c>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	490e      	ldr	r1, [pc, #56]	; (8002838 <HAL_RCC_ClockConfig+0x35c>)
 8002800:	4313      	orrs	r3, r2
 8002802:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002804:	f000 f822 	bl	800284c <HAL_RCC_GetSysClockFreq>
 8002808:	4602      	mov	r2, r0
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_ClockConfig+0x35c>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	490b      	ldr	r1, [pc, #44]	; (8002840 <HAL_RCC_ClockConfig+0x364>)
 8002814:	5ccb      	ldrb	r3, [r1, r3]
 8002816:	fa22 f303 	lsr.w	r3, r2, r3
 800281a:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <HAL_RCC_ClockConfig+0x368>)
 800281c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <HAL_RCC_ClockConfig+0x36c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fefc 	bl	8001620 <HAL_InitTick>
 8002828:	4603      	mov	r3, r0
 800282a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800282c:	7afb      	ldrb	r3, [r7, #11]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	44020c00 	.word	0x44020c00
 800283c:	40022000 	.word	0x40022000
 8002840:	0800a3f0 	.word	0x0800a3f0
 8002844:	20000000 	.word	0x20000000
 8002848:	20000004 	.word	0x20000004

0800284c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	; 0x24
 8002850:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002852:	4b8c      	ldr	r3, [pc, #560]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f003 0318 	and.w	r3, r3, #24
 800285a:	2b08      	cmp	r3, #8
 800285c:	d102      	bne.n	8002864 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800285e:	4b8a      	ldr	r3, [pc, #552]	; (8002a88 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	e107      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002864:	4b87      	ldr	r3, [pc, #540]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	f003 0318 	and.w	r3, r3, #24
 800286c:	2b00      	cmp	r3, #0
 800286e:	d112      	bne.n	8002896 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002870:	4b84      	ldr	r3, [pc, #528]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b00      	cmp	r3, #0
 800287a:	d009      	beq.n	8002890 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800287c:	4b81      	ldr	r3, [pc, #516]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	08db      	lsrs	r3, r3, #3
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	4a81      	ldr	r2, [pc, #516]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x240>)
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	e0f1      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002890:	4b7e      	ldr	r3, [pc, #504]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x240>)
 8002892:	61fb      	str	r3, [r7, #28]
 8002894:	e0ee      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002896:	4b7b      	ldr	r3, [pc, #492]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f003 0318 	and.w	r3, r3, #24
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d102      	bne.n	80028a8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028a2:	4b7b      	ldr	r3, [pc, #492]	; (8002a90 <HAL_RCC_GetSysClockFreq+0x244>)
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	e0e5      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028a8:	4b76      	ldr	r3, [pc, #472]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	f003 0318 	and.w	r3, r3, #24
 80028b0:	2b18      	cmp	r3, #24
 80028b2:	f040 80dd 	bne.w	8002a70 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80028b6:	4b73      	ldr	r3, [pc, #460]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80028c0:	4b70      	ldr	r3, [pc, #448]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	0a1b      	lsrs	r3, r3, #8
 80028c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80028cc:	4b6d      	ldr	r3, [pc, #436]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80028d8:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80028dc:	08db      	lsrs	r3, r3, #3
 80028de:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	fb02 f303 	mul.w	r3, r2, r3
 80028e8:	ee07 3a90 	vmov	s15, r3
 80028ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028f0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80b7 	beq.w	8002a6a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d003      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0xbe>
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d056      	beq.n	80029b6 <HAL_RCC_GetSysClockFreq+0x16a>
 8002908:	e077      	b.n	80029fa <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800290a:	4b5e      	ldr	r3, [pc, #376]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d02d      	beq.n	8002972 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002916:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	08db      	lsrs	r3, r3, #3
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	4a5a      	ldr	r2, [pc, #360]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x240>)
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	ee07 3a90 	vmov	s15, r3
 8002938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002940:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 8002942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002948:	ee07 3a90 	vmov	s15, r3
 800294c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002950:	ed97 6a02 	vldr	s12, [r7, #8]
 8002954:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002a94 <HAL_RCC_GetSysClockFreq+0x248>
 8002958:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800295c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002960:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002964:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002970:	e065      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	ee07 3a90 	vmov	s15, r3
 8002978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002a98 <HAL_RCC_GetSysClockFreq+0x24c>
 8002980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002984:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 8002986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800298c:	ee07 3a90 	vmov	s15, r3
 8002990:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002994:	ed97 6a02 	vldr	s12, [r7, #8]
 8002998:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002a94 <HAL_RCC_GetSysClockFreq+0x248>
 800299c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80029a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80029b4:	e043      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	ee07 3a90 	vmov	s15, r3
 80029bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c0:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002a9c <HAL_RCC_GetSysClockFreq+0x250>
 80029c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029c8:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80029d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80029dc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002a94 <HAL_RCC_GetSysClockFreq+0x248>
 80029e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80029e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80029f8:	e021      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	ee07 3a90 	vmov	s15, r3
 8002a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a04:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002aa0 <HAL_RCC_GetSysClockFreq+0x254>
 8002a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a14:	ee07 3a90 	vmov	s15, r3
 8002a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a20:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002a94 <HAL_RCC_GetSysClockFreq+0x248>
 8002a24:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a28:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a38:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002a3c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002a3e:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a42:	0a5b      	lsrs	r3, r3, #9
 8002a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a48:	3301      	adds	r3, #1
 8002a4a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a56:	edd7 6a06 	vldr	s13, [r7, #24]
 8002a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a62:	ee17 3a90 	vmov	r3, s15
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	e004      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
 8002a6e:	e001      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCC_GetSysClockFreq+0x240>)
 8002a72:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002a74:	69fb      	ldr	r3, [r7, #28]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3724      	adds	r7, #36	; 0x24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	44020c00 	.word	0x44020c00
 8002a88:	003d0900 	.word	0x003d0900
 8002a8c:	03d09000 	.word	0x03d09000
 8002a90:	017d7840 	.word	0x017d7840
 8002a94:	46000000 	.word	0x46000000
 8002a98:	4c742400 	.word	0x4c742400
 8002a9c:	4bbebc20 	.word	0x4bbebc20
 8002aa0:	4a742400 	.word	0x4a742400

08002aa4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002aa8:	f7ff fed0 	bl	800284c <HAL_RCC_GetSysClockFreq>
 8002aac:	4602      	mov	r2, r0
 8002aae:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002ab2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002ab6:	4907      	ldr	r1, [pc, #28]	; (8002ad4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002ab8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002aba:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <HAL_RCC_GetHCLKFreq+0x34>)
 8002ac4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <HAL_RCC_GetHCLKFreq+0x34>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	44020c00 	.word	0x44020c00
 8002ad4:	0800a3f0 	.word	0x0800a3f0
 8002ad8:	20000000 	.word	0x20000000

08002adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002ae0:	f7ff ffe0 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4904      	ldr	r1, [pc, #16]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	44020c00 	.word	0x44020c00
 8002b04:	0800a400 	.word	0x0800a400

08002b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002b0c:	f7ff ffca 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	4904      	ldr	r1, [pc, #16]	; (8002b30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b1e:	5ccb      	ldrb	r3, [r1, r3]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	44020c00 	.word	0x44020c00
 8002b30:	0800a400 	.word	0x0800a400

08002b34 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002b38:	f7ff ffb4 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	0b1b      	lsrs	r3, r3, #12
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4904      	ldr	r1, [pc, #16]	; (8002b5c <HAL_RCC_GetPCLK3Freq+0x28>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	f003 031f 	and.w	r3, r3, #31
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	44020c00 	.word	0x44020c00
 8002b5c:	0800a400 	.word	0x0800a400

08002b60 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b64:	b0d8      	sub	sp, #352	; 0x160
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b72:	2300      	movs	r3, #0
 8002b74:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002b78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002b84:	2500      	movs	r5, #0
 8002b86:	ea54 0305 	orrs.w	r3, r4, r5
 8002b8a:	d00b      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002b8c:	4bcd      	ldr	r3, [pc, #820]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b92:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8002b96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b9c:	4ac9      	ldr	r2, [pc, #804]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f002 0801 	and.w	r8, r2, #1
 8002bb0:	f04f 0900 	mov.w	r9, #0
 8002bb4:	ea58 0309 	orrs.w	r3, r8, r9
 8002bb8:	d042      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002bba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	2b05      	cmp	r3, #5
 8002bc2:	d823      	bhi.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002bc4:	a201      	add	r2, pc, #4	; (adr r2, 8002bcc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bca:	bf00      	nop
 8002bcc:	08002c15 	.word	0x08002c15
 8002bd0:	08002be5 	.word	0x08002be5
 8002bd4:	08002bf9 	.word	0x08002bf9
 8002bd8:	08002c15 	.word	0x08002c15
 8002bdc:	08002c15 	.word	0x08002c15
 8002be0:	08002c15 	.word	0x08002c15
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002be4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002be8:	3308      	adds	r3, #8
 8002bea:	4618      	mov	r0, r3
 8002bec:	f004 feda 	bl	80079a4 <RCCEx_PLL2_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002bf6:	e00e      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bfc:	3330      	adds	r3, #48	; 0x30
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f004 ff68 	bl	8007ad4 <RCCEx_PLL3_Config>
 8002c04:	4603      	mov	r3, r0
 8002c06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002c0a:	e004      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002c12:	e000      	b.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002c1e:	4ba9      	ldr	r3, [pc, #676]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002c20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c24:	f023 0107 	bic.w	r1, r3, #7
 8002c28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2e:	4aa5      	ldr	r2, [pc, #660]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002c30:	430b      	orrs	r3, r1
 8002c32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c36:	e003      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c38:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c3c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c48:	f002 0a02 	and.w	sl, r2, #2
 8002c4c:	f04f 0b00 	mov.w	fp, #0
 8002c50:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c54:	f000 8088 	beq.w	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5e:	2b28      	cmp	r3, #40	; 0x28
 8002c60:	d868      	bhi.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002c62:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c68:	08002d3d 	.word	0x08002d3d
 8002c6c:	08002d35 	.word	0x08002d35
 8002c70:	08002d35 	.word	0x08002d35
 8002c74:	08002d35 	.word	0x08002d35
 8002c78:	08002d35 	.word	0x08002d35
 8002c7c:	08002d35 	.word	0x08002d35
 8002c80:	08002d35 	.word	0x08002d35
 8002c84:	08002d35 	.word	0x08002d35
 8002c88:	08002d0d 	.word	0x08002d0d
 8002c8c:	08002d35 	.word	0x08002d35
 8002c90:	08002d35 	.word	0x08002d35
 8002c94:	08002d35 	.word	0x08002d35
 8002c98:	08002d35 	.word	0x08002d35
 8002c9c:	08002d35 	.word	0x08002d35
 8002ca0:	08002d35 	.word	0x08002d35
 8002ca4:	08002d35 	.word	0x08002d35
 8002ca8:	08002d21 	.word	0x08002d21
 8002cac:	08002d35 	.word	0x08002d35
 8002cb0:	08002d35 	.word	0x08002d35
 8002cb4:	08002d35 	.word	0x08002d35
 8002cb8:	08002d35 	.word	0x08002d35
 8002cbc:	08002d35 	.word	0x08002d35
 8002cc0:	08002d35 	.word	0x08002d35
 8002cc4:	08002d35 	.word	0x08002d35
 8002cc8:	08002d3d 	.word	0x08002d3d
 8002ccc:	08002d35 	.word	0x08002d35
 8002cd0:	08002d35 	.word	0x08002d35
 8002cd4:	08002d35 	.word	0x08002d35
 8002cd8:	08002d35 	.word	0x08002d35
 8002cdc:	08002d35 	.word	0x08002d35
 8002ce0:	08002d35 	.word	0x08002d35
 8002ce4:	08002d35 	.word	0x08002d35
 8002ce8:	08002d3d 	.word	0x08002d3d
 8002cec:	08002d35 	.word	0x08002d35
 8002cf0:	08002d35 	.word	0x08002d35
 8002cf4:	08002d35 	.word	0x08002d35
 8002cf8:	08002d35 	.word	0x08002d35
 8002cfc:	08002d35 	.word	0x08002d35
 8002d00:	08002d35 	.word	0x08002d35
 8002d04:	08002d35 	.word	0x08002d35
 8002d08:	08002d3d 	.word	0x08002d3d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d10:	3308      	adds	r3, #8
 8002d12:	4618      	mov	r0, r3
 8002d14:	f004 fe46 	bl	80079a4 <RCCEx_PLL2_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002d1e:	e00e      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d24:	3330      	adds	r3, #48	; 0x30
 8002d26:	4618      	mov	r0, r3
 8002d28:	f004 fed4 	bl	8007ad4 <RCCEx_PLL3_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002d32:	e004      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002d3a:	e000      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d3e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002d46:	4b5f      	ldr	r3, [pc, #380]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002d48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d4c:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d56:	4a5b      	ldr	r2, [pc, #364]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002d58:	430b      	orrs	r3, r1
 8002d5a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d5e:	e003      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d60:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d64:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f002 0304 	and.w	r3, r2, #4
 8002d74:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002d7e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8002d82:	460b      	mov	r3, r1
 8002d84:	4313      	orrs	r3, r2
 8002d86:	d04e      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002d88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d8e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d92:	d02c      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002d94:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002d98:	d825      	bhi.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d9e:	d028      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da4:	d81f      	bhi.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002da6:	2bc0      	cmp	r3, #192	; 0xc0
 8002da8:	d025      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002daa:	2bc0      	cmp	r3, #192	; 0xc0
 8002dac:	d81b      	bhi.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002dae:	2b80      	cmp	r3, #128	; 0x80
 8002db0:	d00f      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002db2:	2b80      	cmp	r3, #128	; 0x80
 8002db4:	d817      	bhi.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d01f      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d113      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002dbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f004 fded 	bl	80079a4 <RCCEx_PLL2_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002dd0:	e014      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002dd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dd6:	3330      	adds	r3, #48	; 0x30
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f004 fe7b 	bl	8007ad4 <RCCEx_PLL3_Config>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002de4:	e00a      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002dec:	e006      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002dee:	bf00      	nop
 8002df0:	e004      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002df2:	bf00      	nop
 8002df4:	e002      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002df6:	bf00      	nop
 8002df8:	e000      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002dfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dfc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10c      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002e04:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e0a:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002e0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e14:	4a2b      	ldr	r2, [pc, #172]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e16:	430b      	orrs	r3, r1
 8002e18:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e1c:	e003      	b.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e22:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2e:	f002 0308 	and.w	r3, r2, #8
 8002e32:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002e36:	2300      	movs	r3, #0
 8002e38:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002e3c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8002e40:	460b      	mov	r3, r1
 8002e42:	4313      	orrs	r3, r2
 8002e44:	d056      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002e46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e4c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002e50:	d031      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002e52:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002e56:	d82a      	bhi.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5c:	d02d      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e62:	d824      	bhi.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002e64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e68:	d029      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002e6a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002e6e:	d81e      	bhi.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e74:	d011      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7a:	d818      	bhi.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d023      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e84:	d113      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e8a:	3308      	adds	r3, #8
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f004 fd89 	bl	80079a4 <RCCEx_PLL2_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002e98:	e017      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e9e:	3330      	adds	r3, #48	; 0x30
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f004 fe17 	bl	8007ad4 <RCCEx_PLL3_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002eac:	e00d      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002eb4:	e009      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002eb6:	bf00      	nop
 8002eb8:	e007      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002eba:	bf00      	nop
 8002ebc:	e005      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002ebe:	bf00      	nop
 8002ec0:	e003      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002ec2:	bf00      	nop
 8002ec4:	44020c00 	.word	0x44020c00
        break;
 8002ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002ed2:	4bbb      	ldr	r3, [pc, #748]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002ed4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ed8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002edc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ee2:	4ab7      	ldr	r2, [pc, #732]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002eea:	e003      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ef0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ef4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efc:	f002 0310 	and.w	r3, r2, #16
 8002f00:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002f0a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4313      	orrs	r3, r2
 8002f12:	d053      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002f14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f1a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002f1e:	d031      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002f20:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002f24:	d82a      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002f26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f2a:	d02d      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002f2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f30:	d824      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002f32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f36:	d029      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002f38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f3c:	d81e      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f42:	d011      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f48:	d818      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d020      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f52:	d113      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f58:	3308      	adds	r3, #8
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f004 fd22 	bl	80079a4 <RCCEx_PLL2_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002f66:	e014      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f6c:	3330      	adds	r3, #48	; 0x30
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f004 fdb0 	bl	8007ad4 <RCCEx_PLL3_Config>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002f82:	e006      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002f84:	bf00      	nop
 8002f86:	e004      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002f88:	bf00      	nop
 8002f8a:	e002      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10c      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002f9a:	4b89      	ldr	r3, [pc, #548]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002f9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fa0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002faa:	4a85      	ldr	r2, [pc, #532]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002fac:	430b      	orrs	r3, r1
 8002fae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002fb2:	e003      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002fb8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002fbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc4:	f002 0320 	and.w	r3, r2, #32
 8002fc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002fd2:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	d053      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002fdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe2:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002fe6:	d031      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002fe8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002fec:	d82a      	bhi.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002fee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ff2:	d02d      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002ff4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ff8:	d824      	bhi.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002ffa:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002ffe:	d029      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003000:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003004:	d81e      	bhi.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800300a:	d011      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003010:	d818      	bhi.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d020      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800301a:	d113      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800301c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003020:	3308      	adds	r3, #8
 8003022:	4618      	mov	r0, r3
 8003024:	f004 fcbe 	bl	80079a4 <RCCEx_PLL2_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800302e:	e014      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003030:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003034:	3330      	adds	r3, #48	; 0x30
 8003036:	4618      	mov	r0, r3
 8003038:	f004 fd4c 	bl	8007ad4 <RCCEx_PLL3_Config>
 800303c:	4603      	mov	r3, r0
 800303e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003042:	e00a      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800304a:	e006      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800304c:	bf00      	nop
 800304e:	e004      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003050:	bf00      	nop
 8003052:	e002      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003054:	bf00      	nop
 8003056:	e000      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800305a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10c      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003062:	4b57      	ldr	r3, [pc, #348]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003064:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003068:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 800306c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003072:	4a53      	ldr	r2, [pc, #332]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003074:	430b      	orrs	r3, r1
 8003076:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800307a:	e003      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003080:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003084:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003090:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003094:	2300      	movs	r3, #0
 8003096:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800309a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800309e:	460b      	mov	r3, r1
 80030a0:	4313      	orrs	r3, r2
 80030a2:	d053      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80030a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030aa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80030ae:	d031      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80030b0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80030b4:	d82a      	bhi.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80030b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ba:	d02d      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80030bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030c0:	d824      	bhi.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80030c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030c6:	d029      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80030c8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80030cc:	d81e      	bhi.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80030ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030d2:	d011      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80030d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030d8:	d818      	bhi.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d020      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80030de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030e2:	d113      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030e8:	3308      	adds	r3, #8
 80030ea:	4618      	mov	r0, r3
 80030ec:	f004 fc5a 	bl	80079a4 <RCCEx_PLL2_Config>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80030f6:	e014      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030fc:	3330      	adds	r3, #48	; 0x30
 80030fe:	4618      	mov	r0, r3
 8003100:	f004 fce8 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003104:	4603      	mov	r3, r0
 8003106:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800310a:	e00a      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003112:	e006      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003114:	bf00      	nop
 8003116:	e004      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003118:	bf00      	nop
 800311a:	e002      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800311c:	bf00      	nop
 800311e:	e000      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003122:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10c      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800312a:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800312c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003130:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8003134:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313a:	4a21      	ldr	r2, [pc, #132]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800313c:	430b      	orrs	r3, r1
 800313e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003142:	e003      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003144:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003148:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800314c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003158:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800315c:	2300      	movs	r3, #0
 800315e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003162:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8003166:	460b      	mov	r3, r1
 8003168:	4313      	orrs	r3, r2
 800316a:	d055      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800316c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003172:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003176:	d033      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003178:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800317c:	d82c      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800317e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003182:	d02f      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003184:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003188:	d826      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800318a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800318e:	d02b      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003190:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003194:	d820      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319a:	d013      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800319c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a0:	d81a      	bhi.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d022      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80031a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031aa:	d115      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031b0:	3308      	adds	r3, #8
 80031b2:	4618      	mov	r0, r3
 80031b4:	f004 fbf6 	bl	80079a4 <RCCEx_PLL2_Config>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80031be:	e016      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80031c0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031c8:	3330      	adds	r3, #48	; 0x30
 80031ca:	4618      	mov	r0, r3
 80031cc:	f004 fc82 	bl	8007ad4 <RCCEx_PLL3_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80031d6:	e00a      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80031de:	e006      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80031e0:	bf00      	nop
 80031e2:	e004      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80031e4:	bf00      	nop
 80031e6:	e002      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80031e8:	bf00      	nop
 80031ea:	e000      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80031ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10c      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80031f6:	4bbb      	ldr	r3, [pc, #748]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80031f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031fc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003200:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003206:	4ab7      	ldr	r2, [pc, #732]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003208:	430b      	orrs	r3, r1
 800320a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800320e:	e003      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003214:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003218:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003224:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003228:	2300      	movs	r3, #0
 800322a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800322e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8003232:	460b      	mov	r3, r1
 8003234:	4313      	orrs	r3, r2
 8003236:	d053      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003238:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800323c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800323e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003242:	d031      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003244:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003248:	d82a      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800324a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800324e:	d02d      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003250:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003254:	d824      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003256:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800325a:	d029      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800325c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003260:	d81e      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003266:	d011      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003268:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800326c:	d818      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d020      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003272:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003276:	d113      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003278:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800327c:	3308      	adds	r3, #8
 800327e:	4618      	mov	r0, r3
 8003280:	f004 fb90 	bl	80079a4 <RCCEx_PLL2_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800328a:	e014      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800328c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003290:	3330      	adds	r3, #48	; 0x30
 8003292:	4618      	mov	r0, r3
 8003294:	f004 fc1e 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800329e:	e00a      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80032a6:	e006      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80032a8:	bf00      	nop
 80032aa:	e004      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80032ac:	bf00      	nop
 80032ae:	e002      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80032b0:	bf00      	nop
 80032b2:	e000      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80032b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10c      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80032be:	4b89      	ldr	r3, [pc, #548]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80032c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80032c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80032c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ce:	4a85      	ldr	r2, [pc, #532]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80032d0:	430b      	orrs	r3, r1
 80032d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80032d6:	e003      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032dc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80032e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80032ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80032f0:	2300      	movs	r3, #0
 80032f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80032f6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80032fa:	460b      	mov	r3, r1
 80032fc:	4313      	orrs	r3, r2
 80032fe:	d055      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003300:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003308:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800330c:	d031      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800330e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003312:	d82a      	bhi.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003318:	d02d      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800331a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800331e:	d824      	bhi.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003320:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003324:	d029      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003326:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800332a:	d81e      	bhi.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800332c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003330:	d011      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003336:	d818      	bhi.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800333c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003340:	d113      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003342:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003346:	3308      	adds	r3, #8
 8003348:	4618      	mov	r0, r3
 800334a:	f004 fb2b 	bl	80079a4 <RCCEx_PLL2_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003354:	e014      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003356:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800335a:	3330      	adds	r3, #48	; 0x30
 800335c:	4618      	mov	r0, r3
 800335e:	f004 fbb9 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003368:	e00a      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003370:	e006      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003372:	bf00      	nop
 8003374:	e004      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003376:	bf00      	nop
 8003378:	e002      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800337a:	bf00      	nop
 800337c:	e000      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800337e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003380:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003388:	4b56      	ldr	r3, [pc, #344]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800338a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800338e:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8003392:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800339a:	4a52      	ldr	r2, [pc, #328]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800339c:	430b      	orrs	r3, r1
 800339e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80033a2:	e003      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80033a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80033ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80033b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80033bc:	2300      	movs	r3, #0
 80033be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80033c2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80033c6:	460b      	mov	r3, r1
 80033c8:	4313      	orrs	r3, r2
 80033ca:	d044      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80033cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	d823      	bhi.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80033d8:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80033da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033de:	bf00      	nop
 80033e0:	08003429 	.word	0x08003429
 80033e4:	080033f9 	.word	0x080033f9
 80033e8:	0800340d 	.word	0x0800340d
 80033ec:	08003429 	.word	0x08003429
 80033f0:	08003429 	.word	0x08003429
 80033f4:	08003429 	.word	0x08003429
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033fc:	3308      	adds	r3, #8
 80033fe:	4618      	mov	r0, r3
 8003400:	f004 fad0 	bl	80079a4 <RCCEx_PLL2_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800340a:	e00e      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800340c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003410:	3330      	adds	r3, #48	; 0x30
 8003412:	4618      	mov	r0, r3
 8003414:	f004 fb5e 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003418:	4603      	mov	r3, r0
 800341a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800341e:	e004      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003426:	e000      	b.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10d      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003432:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003434:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003438:	f023 0107 	bic.w	r1, r3, #7
 800343c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003444:	4a27      	ldr	r2, [pc, #156]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003446:	430b      	orrs	r3, r1
 8003448:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800344c:	e003      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003452:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003456:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003462:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003466:	2300      	movs	r3, #0
 8003468:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800346c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003470:	460b      	mov	r3, r1
 8003472:	4313      	orrs	r3, r2
 8003474:	d04f      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003476:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	2b50      	cmp	r3, #80	; 0x50
 8003480:	d029      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003482:	2b50      	cmp	r3, #80	; 0x50
 8003484:	d823      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	d027      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800348a:	2b40      	cmp	r3, #64	; 0x40
 800348c:	d81f      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800348e:	2b30      	cmp	r3, #48	; 0x30
 8003490:	d025      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003492:	2b30      	cmp	r3, #48	; 0x30
 8003494:	d81b      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003496:	2b20      	cmp	r3, #32
 8003498:	d00f      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800349a:	2b20      	cmp	r3, #32
 800349c:	d817      	bhi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d022      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80034a2:	2b10      	cmp	r3, #16
 80034a4:	d113      	bne.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034aa:	3308      	adds	r3, #8
 80034ac:	4618      	mov	r0, r3
 80034ae:	f004 fa79 	bl	80079a4 <RCCEx_PLL2_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80034b8:	e017      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034be:	3330      	adds	r3, #48	; 0x30
 80034c0:	4618      	mov	r0, r3
 80034c2:	f004 fb07 	bl	8007ad4 <RCCEx_PLL3_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80034cc:	e00d      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80034d4:	e009      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80034d6:	bf00      	nop
 80034d8:	e007      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80034da:	bf00      	nop
 80034dc:	e005      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80034de:	bf00      	nop
 80034e0:	e003      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80034e2:	bf00      	nop
 80034e4:	44020c00 	.word	0x44020c00
        break;
 80034e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10d      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80034f2:	4baf      	ldr	r3, [pc, #700]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80034f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80034f8:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80034fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003504:	4aaa      	ldr	r2, [pc, #680]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003506:	430b      	orrs	r3, r1
 8003508:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800350c:	e003      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003512:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003516:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003522:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800352c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003530:	460b      	mov	r3, r1
 8003532:	4313      	orrs	r3, r2
 8003534:	d055      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003536:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800353a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800353e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003542:	d031      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003544:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003548:	d82a      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800354a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800354e:	d02d      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003550:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003554:	d824      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003556:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800355a:	d029      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800355c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003560:	d81e      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003562:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003566:	d011      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800356c:	d818      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d020      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003572:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003576:	d113      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003578:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800357c:	3308      	adds	r3, #8
 800357e:	4618      	mov	r0, r3
 8003580:	f004 fa10 	bl	80079a4 <RCCEx_PLL2_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800358a:	e014      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800358c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003590:	3330      	adds	r3, #48	; 0x30
 8003592:	4618      	mov	r0, r3
 8003594:	f004 fa9e 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800359e:	e00a      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80035a6:	e006      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80035a8:	bf00      	nop
 80035aa:	e004      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80035ac:	bf00      	nop
 80035ae:	e002      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80035b0:	bf00      	nop
 80035b2:	e000      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80035b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10d      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80035be:	4b7c      	ldr	r3, [pc, #496]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80035c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80035c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d0:	4a77      	ldr	r2, [pc, #476]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80035d2:	430b      	orrs	r3, r1
 80035d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035d8:	e003      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80035ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035f2:	2300      	movs	r3, #0
 80035f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80035f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80035fc:	460b      	mov	r3, r1
 80035fe:	4313      	orrs	r3, r2
 8003600:	d03d      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003602:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800360e:	d01b      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003610:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003614:	d814      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800361a:	d017      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800361c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003620:	d80e      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003622:	2b00      	cmp	r3, #0
 8003624:	d014      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362a:	d109      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800362c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003630:	3330      	adds	r3, #48	; 0x30
 8003632:	4618      	mov	r0, r3
 8003634:	f004 fa4e 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800363e:	e008      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003646:	e004      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003648:	bf00      	nop
 800364a:	e002      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800364c:	bf00      	nop
 800364e:	e000      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003652:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10d      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800365a:	4b55      	ldr	r3, [pc, #340]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800365c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003660:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003664:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	4a50      	ldr	r2, [pc, #320]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800366e:	430b      	orrs	r3, r1
 8003670:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003674:	e003      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003676:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800367a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800367e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800368a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800368e:	2300      	movs	r3, #0
 8003690:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003694:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003698:	460b      	mov	r3, r1
 800369a:	4313      	orrs	r3, r2
 800369c:	d03d      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800369e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036aa:	d01b      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80036ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036b0:	d814      	bhi.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80036b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036b6:	d017      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80036b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036bc:	d80e      	bhi.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d014      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80036c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036c6:	d109      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036cc:	3330      	adds	r3, #48	; 0x30
 80036ce:	4618      	mov	r0, r3
 80036d0:	f004 fa00 	bl	8007ad4 <RCCEx_PLL3_Config>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80036da:	e008      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80036e2:	e004      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80036e4:	bf00      	nop
 80036e6:	e002      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80036e8:	bf00      	nop
 80036ea:	e000      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80036ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10d      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80036f6:	4b2e      	ldr	r3, [pc, #184]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80036f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80036fc:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003700:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003704:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003708:	4a29      	ldr	r2, [pc, #164]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800370a:	430b      	orrs	r3, r1
 800370c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003710:	e003      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003712:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003716:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800371a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800372a:	2300      	movs	r3, #0
 800372c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003730:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003734:	460b      	mov	r3, r1
 8003736:	4313      	orrs	r3, r2
 8003738:	d040      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800373a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800373e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003742:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003746:	d01b      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003748:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800374c:	d814      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800374e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003752:	d017      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003758:	d80e      	bhi.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800375a:	2b00      	cmp	r3, #0
 800375c:	d014      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800375e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003762:	d109      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003764:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003768:	3330      	adds	r3, #48	; 0x30
 800376a:	4618      	mov	r0, r3
 800376c:	f004 f9b2 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003770:	4603      	mov	r3, r0
 8003772:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003776:	e008      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800377e:	e004      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003780:	bf00      	nop
 8003782:	e002      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003784:	bf00      	nop
 8003786:	e000      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800378a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800378e:	2b00      	cmp	r3, #0
 8003790:	d110      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003794:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003798:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800379c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a4:	4a02      	ldr	r2, [pc, #8]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80037a6:	430b      	orrs	r3, r1
 80037a8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80037ac:	e006      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80037ae:	bf00      	nop
 80037b0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037b8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	2100      	movs	r1, #0
 80037c6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80037ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80037d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4313      	orrs	r3, r2
 80037da:	d03d      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80037dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037e8:	d01b      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80037ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037ee:	d814      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80037f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037f4:	d017      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80037f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037fa:	d80e      	bhi.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d014      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003800:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003804:	d109      	bne.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003806:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800380a:	3330      	adds	r3, #48	; 0x30
 800380c:	4618      	mov	r0, r3
 800380e:	f004 f961 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003812:	4603      	mov	r3, r0
 8003814:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003818:	e008      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003820:	e004      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003822:	bf00      	nop
 8003824:	e002      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003826:	bf00      	nop
 8003828:	e000      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800382a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800382c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10d      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003834:	4bbe      	ldr	r3, [pc, #760]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003836:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800383a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800383e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003846:	4aba      	ldr	r2, [pc, #744]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003848:	430b      	orrs	r3, r1
 800384a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800384e:	e003      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003850:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003854:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003858:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003864:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003868:	2300      	movs	r3, #0
 800386a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800386e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003872:	460b      	mov	r3, r1
 8003874:	4313      	orrs	r3, r2
 8003876:	d035      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003878:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800387c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003884:	d015      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800388a:	d80e      	bhi.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d012      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003894:	d109      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003896:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800389a:	3330      	adds	r3, #48	; 0x30
 800389c:	4618      	mov	r0, r3
 800389e:	f004 f919 	bl	8007ad4 <RCCEx_PLL3_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80038a8:	e006      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80038b0:	e002      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80038b2:	bf00      	nop
 80038b4:	e000      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80038b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10d      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80038c0:	4b9b      	ldr	r3, [pc, #620]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80038c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80038c6:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 80038ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038d2:	4a97      	ldr	r2, [pc, #604]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80038d4:	430b      	orrs	r3, r1
 80038d6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80038da:	e003      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038e0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80038e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	2100      	movs	r1, #0
 80038ee:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80038f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80038fe:	460b      	mov	r3, r1
 8003900:	4313      	orrs	r3, r2
 8003902:	d00e      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003904:	4b8a      	ldr	r3, [pc, #552]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	4a89      	ldr	r2, [pc, #548]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800390a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800390e:	61d3      	str	r3, [r2, #28]
 8003910:	4b87      	ldr	r3, [pc, #540]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003912:	69d9      	ldr	r1, [r3, #28]
 8003914:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003918:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800391c:	4a84      	ldr	r2, [pc, #528]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800391e:	430b      	orrs	r3, r1
 8003920:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003922:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800392e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003932:	2300      	movs	r3, #0
 8003934:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003938:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800393c:	460b      	mov	r3, r1
 800393e:	4313      	orrs	r3, r2
 8003940:	d055      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003942:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003946:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800394a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800394e:	d031      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003950:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003954:	d82a      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395a:	d02d      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003960:	d824      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003966:	d029      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800396c:	d81e      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800396e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003972:	d011      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003978:	d818      	bhi.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d020      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800397e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003982:	d113      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003984:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003988:	3308      	adds	r3, #8
 800398a:	4618      	mov	r0, r3
 800398c:	f004 f80a 	bl	80079a4 <RCCEx_PLL2_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003996:	e014      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003998:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800399c:	3330      	adds	r3, #48	; 0x30
 800399e:	4618      	mov	r0, r3
 80039a0:	f004 f898 	bl	8007ad4 <RCCEx_PLL3_Config>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80039aa:	e00a      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80039b2:	e006      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80039b4:	bf00      	nop
 80039b6:	e004      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80039b8:	bf00      	nop
 80039ba:	e002      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80039bc:	bf00      	nop
 80039be:	e000      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80039c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10d      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80039ca:	4b59      	ldr	r3, [pc, #356]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80039cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80039d0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80039d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039dc:	4a54      	ldr	r2, [pc, #336]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80039de:	430b      	orrs	r3, r1
 80039e0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80039e4:	e003      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039ea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80039ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80039fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039fe:	2300      	movs	r3, #0
 8003a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a04:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	d055      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003a0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a16:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003a1a:	d031      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003a1c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003a20:	d82a      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a26:	d02d      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a2c:	d824      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003a2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a32:	d029      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003a34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a38:	d81e      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a3e:	d011      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a44:	d818      	bhi.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d020      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4e:	d113      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a54:	3308      	adds	r3, #8
 8003a56:	4618      	mov	r0, r3
 8003a58:	f003 ffa4 	bl	80079a4 <RCCEx_PLL2_Config>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003a62:	e014      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a68:	3330      	adds	r3, #48	; 0x30
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f004 f832 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003a76:	e00a      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a7e:	e006      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003a80:	bf00      	nop
 8003a82:	e004      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003a84:	bf00      	nop
 8003a86:	e002      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003a88:	bf00      	nop
 8003a8a:	e000      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10d      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003a96:	4b26      	ldr	r3, [pc, #152]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003a98:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003a9c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003aa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003aa8:	4a21      	ldr	r2, [pc, #132]	; (8003b30 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003aaa:	430b      	orrs	r3, r1
 8003aac:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003ab0:	e003      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ab6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003aba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ad0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	d057      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003ada:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ade:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ae2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae6:	d033      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aec:	d82c      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003aee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003af2:	d02f      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003af4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003af8:	d826      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003afa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003afe:	d02b      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003b00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b04:	d820      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003b06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b0a:	d013      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003b0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b10:	d81a      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d022      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8003b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1a:	d115      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b20:	3308      	adds	r3, #8
 8003b22:	4618      	mov	r0, r3
 8003b24:	f003 ff3e 	bl	80079a4 <RCCEx_PLL2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003b2e:	e016      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003b30:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b38:	3330      	adds	r3, #48	; 0x30
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f003 ffca 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003b46:	e00a      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b4e:	e006      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003b50:	bf00      	nop
 8003b52:	e004      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003b54:	bf00      	nop
 8003b56:	e002      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003b58:	bf00      	nop
 8003b5a:	e000      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b5e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10d      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003b66:	4bbb      	ldr	r3, [pc, #748]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003b68:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003b6c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003b78:	4ab6      	ldr	r2, [pc, #728]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003b80:	e003      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b86:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003b8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b92:	2100      	movs	r1, #0
 8003b94:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ba0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	d055      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8003baa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bb2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003bb6:	d031      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003bb8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003bbc:	d82a      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc2:	d02d      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003bc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc8:	d824      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003bca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bce:	d029      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003bd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bd4:	d81e      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003bd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bda:	d011      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003bdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003be0:	d818      	bhi.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d020      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8003be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bea:	d113      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f003 fed6 	bl	80079a4 <RCCEx_PLL2_Config>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003bfe:	e014      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c04:	3330      	adds	r3, #48	; 0x30
 8003c06:	4618      	mov	r0, r3
 8003c08:	f003 ff64 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003c12:	e00a      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c1a:	e006      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003c1c:	bf00      	nop
 8003c1e:	e004      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003c20:	bf00      	nop
 8003c22:	e002      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003c24:	bf00      	nop
 8003c26:	e000      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10d      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8003c32:	4b88      	ldr	r3, [pc, #544]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003c34:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003c38:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8003c3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c44:	4a83      	ldr	r2, [pc, #524]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003c46:	430b      	orrs	r3, r1
 8003c48:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003c4c:	e003      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c52:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8003c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	2100      	movs	r1, #0
 8003c60:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8003c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c6c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003c70:	460b      	mov	r3, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	d055      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8003c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c7e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003c82:	d031      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003c84:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003c88:	d82a      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003c8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c8e:	d02d      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8003c90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c94:	d824      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003c96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003c9a:	d029      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8003c9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ca0:	d81e      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003ca2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ca6:	d011      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8003ca8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cac:	d818      	bhi.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d020      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8003cb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cb6:	d113      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f003 fe70 	bl	80079a4 <RCCEx_PLL2_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003cca:	e014      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ccc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cd0:	3330      	adds	r3, #48	; 0x30
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f003 fefe 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003cde:	e00a      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ce6:	e006      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003ce8:	bf00      	nop
 8003cea:	e004      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003cec:	bf00      	nop
 8003cee:	e002      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003cf0:	bf00      	nop
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10d      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8003cfe:	4b55      	ldr	r3, [pc, #340]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003d00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003d04:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003d08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d10:	4a50      	ldr	r2, [pc, #320]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003d12:	430b      	orrs	r3, r1
 8003d14:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003d18:	e003      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d1e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8003d22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d38:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	d055      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8003d42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d4e:	d031      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8003d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d54:	d82a      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5a:	d02d      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8003d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d60:	d824      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003d62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d66:	d029      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003d68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d6c:	d81e      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d72:	d011      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8003d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d78:	d818      	bhi.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d020      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8003d7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d82:	d113      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d88:	3308      	adds	r3, #8
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f003 fe0a 	bl	80079a4 <RCCEx_PLL2_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003d96:	e014      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d9c:	3330      	adds	r3, #48	; 0x30
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f003 fe98 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003db2:	e006      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003db4:	bf00      	nop
 8003db6:	e004      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003db8:	bf00      	nop
 8003dba:	e002      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003dbc:	bf00      	nop
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003dc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10d      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003dcc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003dd0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003dd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dd8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ddc:	4a1d      	ldr	r2, [pc, #116]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003dde:	430b      	orrs	r3, r1
 8003de0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003de4:	e003      	b.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003dee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003dfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003e04:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	d055      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003e0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e1a:	d035      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8003e1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e20:	d82e      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003e22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e26:	d031      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8003e28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e2c:	d828      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003e2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e32:	d01b      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8003e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e38:	d822      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8003e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e42:	d009      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8003e44:	e01c      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e46:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	4a02      	ldr	r2, [pc, #8]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e50:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003e52:	e01c      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8003e54:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f003 fda0 	bl	80079a4 <RCCEx_PLL2_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003e6a:	e010      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e70:	3330      	adds	r3, #48	; 0x30
 8003e72:	4618      	mov	r0, r3
 8003e74:	f003 fe2e 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003e7e:	e006      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e86:	e002      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003e88:	bf00      	nop
 8003e8a:	e000      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10d      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003e96:	4bc3      	ldr	r3, [pc, #780]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003e98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e9c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003ea0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ea4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ea8:	4abe      	ldr	r2, [pc, #760]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003eb0:	e003      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003eb6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8003eba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec2:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003ec6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003eca:	2300      	movs	r3, #0
 8003ecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ed0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	d051      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003eda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ede:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003ee2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ee6:	d033      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eec:	d82c      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003eee:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003ef2:	d02d      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003ef4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003ef8:	d826      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003efa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efe:	d019      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8003f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f04:	d820      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8003f0a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f0e:	d007      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8003f10:	e01a      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f12:	4ba4      	ldr	r3, [pc, #656]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	4aa3      	ldr	r2, [pc, #652]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003f1e:	e018      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f24:	3308      	adds	r3, #8
 8003f26:	4618      	mov	r0, r3
 8003f28:	f003 fd3c 	bl	80079a4 <RCCEx_PLL2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003f32:	e00e      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f38:	3330      	adds	r3, #48	; 0x30
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f003 fdca 	bl	8007ad4 <RCCEx_PLL3_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003f46:	e004      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f4e:	e000      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8003f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f52:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10d      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003f5a:	4b92      	ldr	r3, [pc, #584]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f60:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8003f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003f6c:	4a8d      	ldr	r2, [pc, #564]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003f74:	e003      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f7a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003f7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003f8a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f90:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003f94:	460b      	mov	r3, r1
 8003f96:	4313      	orrs	r3, r2
 8003f98:	d032      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003f9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003fa2:	2b05      	cmp	r3, #5
 8003fa4:	d80f      	bhi.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d211      	bcs.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d911      	bls.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d109      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f003 fcf3 	bl	80079a4 <RCCEx_PLL2_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003fc4:	e006      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003fcc:	e002      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003fce:	bf00      	nop
 8003fd0:	e000      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10d      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003fdc:	4b71      	ldr	r3, [pc, #452]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fe2:	f023 0107 	bic.w	r1, r3, #7
 8003fe6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003fee:	4a6d      	ldr	r2, [pc, #436]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ff6:	e003      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ffc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004000:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	2100      	movs	r1, #0
 800400a:	6739      	str	r1, [r7, #112]	; 0x70
 800400c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004010:	677b      	str	r3, [r7, #116]	; 0x74
 8004012:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004016:	460b      	mov	r3, r1
 8004018:	4313      	orrs	r3, r2
 800401a:	d024      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800401c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004020:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004028:	2b08      	cmp	r3, #8
 800402a:	d005      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004032:	e002      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004034:	bf00      	nop
 8004036:	e000      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800403a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10d      	bne.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004042:	4b58      	ldr	r3, [pc, #352]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004048:	f023 0108 	bic.w	r1, r3, #8
 800404c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004050:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004054:	4a53      	ldr	r2, [pc, #332]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004056:	430b      	orrs	r3, r1
 8004058:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800405c:	e003      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004062:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004066:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004072:	66bb      	str	r3, [r7, #104]	; 0x68
 8004074:	2300      	movs	r3, #0
 8004076:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004078:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800407c:	460b      	mov	r3, r1
 800407e:	4313      	orrs	r3, r2
 8004080:	f000 80b9 	beq.w	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004084:	4b48      	ldr	r3, [pc, #288]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	4a47      	ldr	r2, [pc, #284]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004090:	f7fd fb10 	bl	80016b4 <HAL_GetTick>
 8004094:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004098:	e00b      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409a:	f7fd fb0b 	bl	80016b4 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d903      	bls.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80040b0:	e005      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80040b2:	4b3d      	ldr	r3, [pc, #244]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0ed      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80040be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f040 8093 	bne.w	80041ee <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040c8:	4b36      	ldr	r3, [pc, #216]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80040ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040d2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80040d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d023      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80040de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040e2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80040e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01b      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040ee:	4b2d      	ldr	r3, [pc, #180]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80040f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80040f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040fc:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80040fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004102:	4a28      	ldr	r2, [pc, #160]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004108:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800410c:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800410e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004112:	4a24      	ldr	r2, [pc, #144]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004118:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800411c:	4a21      	ldr	r2, [pc, #132]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800411e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004122:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004126:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d019      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fd fabf 	bl	80016b4 <HAL_GetTick>
 8004136:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800413a:	e00d      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800413c:	f7fd faba 	bl	80016b4 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004146:	1ad2      	subs	r2, r2, r3
 8004148:	f241 3388 	movw	r3, #5000	; 0x1388
 800414c:	429a      	cmp	r2, r3
 800414e:	d903      	bls.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8004156:	e006      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004158:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800415a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0ea      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8004166:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800416a:	2b00      	cmp	r3, #0
 800416c:	d13a      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800416e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004172:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800417e:	d115      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004180:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004188:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800418c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004196:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800419a:	4a02      	ldr	r2, [pc, #8]	; (80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800419c:	430b      	orrs	r3, r1
 800419e:	61d3      	str	r3, [r2, #28]
 80041a0:	e00a      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80041a2:	bf00      	nop
 80041a4:	44020c00 	.word	0x44020c00
 80041a8:	44020800 	.word	0x44020800
 80041ac:	4b9f      	ldr	r3, [pc, #636]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	4a9e      	ldr	r2, [pc, #632]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80041b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041b6:	61d3      	str	r3, [r2, #28]
 80041b8:	4b9c      	ldr	r3, [pc, #624]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80041ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041be:	4a9b      	ldr	r2, [pc, #620]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80041c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041c8:	4b98      	ldr	r3, [pc, #608]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80041ca:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80041ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041d2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80041d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041da:	4a94      	ldr	r2, [pc, #592]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80041dc:	430b      	orrs	r3, r1
 80041de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80041e2:	e008      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041e4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041e8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 80041ec:	e003      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041f2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004202:	663b      	str	r3, [r7, #96]	; 0x60
 8004204:	2300      	movs	r3, #0
 8004206:	667b      	str	r3, [r7, #100]	; 0x64
 8004208:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800420c:	460b      	mov	r3, r1
 800420e:	4313      	orrs	r3, r2
 8004210:	d035      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004212:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004216:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800421a:	2b30      	cmp	r3, #48	; 0x30
 800421c:	d014      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800421e:	2b30      	cmp	r3, #48	; 0x30
 8004220:	d80e      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004222:	2b20      	cmp	r3, #32
 8004224:	d012      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004226:	2b20      	cmp	r3, #32
 8004228:	d80a      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d010      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800422e:	2b10      	cmp	r3, #16
 8004230:	d106      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004232:	4b7e      	ldr	r3, [pc, #504]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	4a7d      	ldr	r2, [pc, #500]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800423c:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800423e:	e008      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004246:	e004      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004248:	bf00      	nop
 800424a:	e002      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800424c:	bf00      	nop
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004252:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10d      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800425a:	4b74      	ldr	r3, [pc, #464]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800425c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004260:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004264:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004268:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800426c:	4a6f      	ldr	r2, [pc, #444]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800426e:	430b      	orrs	r3, r1
 8004270:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004274:	e003      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004276:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800427a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800427e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004286:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800428a:	65bb      	str	r3, [r7, #88]	; 0x58
 800428c:	2300      	movs	r3, #0
 800428e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004290:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004294:	460b      	mov	r3, r1
 8004296:	4313      	orrs	r3, r2
 8004298:	d033      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800429a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800429e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80042a6:	2b40      	cmp	r3, #64	; 0x40
 80042a8:	d007      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80042aa:	e010      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ac:	4b5f      	ldr	r3, [pc, #380]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	4a5e      	ldr	r2, [pc, #376]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80042b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042b6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80042b8:	e00d      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042be:	3308      	adds	r3, #8
 80042c0:	4618      	mov	r0, r3
 80042c2:	f003 fb6f 	bl	80079a4 <RCCEx_PLL2_Config>
 80042c6:	4603      	mov	r3, r0
 80042c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80042cc:	e003      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10d      	bne.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80042de:	4b53      	ldr	r3, [pc, #332]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80042e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80042e4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80042e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042ec:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80042f0:	4a4e      	ldr	r2, [pc, #312]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80042f2:	430b      	orrs	r3, r1
 80042f4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80042f8:	e003      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042fe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004302:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800430e:	653b      	str	r3, [r7, #80]	; 0x50
 8004310:	2300      	movs	r3, #0
 8004312:	657b      	str	r3, [r7, #84]	; 0x54
 8004314:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004318:	460b      	mov	r3, r1
 800431a:	4313      	orrs	r3, r2
 800431c:	d033      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800431e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004322:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800432a:	2b80      	cmp	r3, #128	; 0x80
 800432c:	d007      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800432e:	e010      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004330:	4b3e      	ldr	r3, [pc, #248]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	4a3d      	ldr	r2, [pc, #244]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800433a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800433c:	e00d      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800433e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004342:	3308      	adds	r3, #8
 8004344:	4618      	mov	r0, r3
 8004346:	f003 fb2d 	bl	80079a4 <RCCEx_PLL2_Config>
 800434a:	4603      	mov	r3, r0
 800434c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004350:	e003      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10d      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004362:	4b32      	ldr	r3, [pc, #200]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004364:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004368:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800436c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004370:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004374:	4a2d      	ldr	r2, [pc, #180]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004376:	430b      	orrs	r3, r1
 8004378:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800437c:	e003      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004382:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004386:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004392:	64bb      	str	r3, [r7, #72]	; 0x48
 8004394:	2300      	movs	r3, #0
 8004396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004398:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800439c:	460b      	mov	r3, r1
 800439e:	4313      	orrs	r3, r2
 80043a0:	d04a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80043a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d827      	bhi.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80043ae:	a201      	add	r2, pc, #4	; (adr r2, 80043b4 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80043b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b4:	080043c9 	.word	0x080043c9
 80043b8:	080043d7 	.word	0x080043d7
 80043bc:	080043eb 	.word	0x080043eb
 80043c0:	08004407 	.word	0x08004407
 80043c4:	08004407 	.word	0x08004407
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c8:	4b18      	ldr	r3, [pc, #96]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80043ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043cc:	4a17      	ldr	r2, [pc, #92]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80043ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d2:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80043d4:	e018      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043da:	3308      	adds	r3, #8
 80043dc:	4618      	mov	r0, r3
 80043de:	f003 fae1 	bl	80079a4 <RCCEx_PLL2_Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80043e8:	e00e      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043ee:	3330      	adds	r3, #48	; 0x30
 80043f0:	4618      	mov	r0, r3
 80043f2:	f003 fb6f 	bl	8007ad4 <RCCEx_PLL3_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80043fc:	e004      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004404:	e000      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004408:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10f      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004416:	f023 0107 	bic.w	r1, r3, #7
 800441a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800441e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004422:	4a02      	ldr	r2, [pc, #8]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004424:	430b      	orrs	r3, r1
 8004426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800442a:	e005      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800442c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004430:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004434:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004438:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800443c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004440:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004444:	643b      	str	r3, [r7, #64]	; 0x40
 8004446:	2300      	movs	r3, #0
 8004448:	647b      	str	r3, [r7, #68]	; 0x44
 800444a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800444e:	460b      	mov	r3, r1
 8004450:	4313      	orrs	r3, r2
 8004452:	f000 8081 	beq.w	8004558 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004456:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800445a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800445e:	2b20      	cmp	r3, #32
 8004460:	d85f      	bhi.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	080044ed 	.word	0x080044ed
 800446c:	08004523 	.word	0x08004523
 8004470:	08004523 	.word	0x08004523
 8004474:	08004523 	.word	0x08004523
 8004478:	08004523 	.word	0x08004523
 800447c:	08004523 	.word	0x08004523
 8004480:	08004523 	.word	0x08004523
 8004484:	08004523 	.word	0x08004523
 8004488:	080044fb 	.word	0x080044fb
 800448c:	08004523 	.word	0x08004523
 8004490:	08004523 	.word	0x08004523
 8004494:	08004523 	.word	0x08004523
 8004498:	08004523 	.word	0x08004523
 800449c:	08004523 	.word	0x08004523
 80044a0:	08004523 	.word	0x08004523
 80044a4:	08004523 	.word	0x08004523
 80044a8:	0800450f 	.word	0x0800450f
 80044ac:	08004523 	.word	0x08004523
 80044b0:	08004523 	.word	0x08004523
 80044b4:	08004523 	.word	0x08004523
 80044b8:	08004523 	.word	0x08004523
 80044bc:	08004523 	.word	0x08004523
 80044c0:	08004523 	.word	0x08004523
 80044c4:	08004523 	.word	0x08004523
 80044c8:	0800452b 	.word	0x0800452b
 80044cc:	08004523 	.word	0x08004523
 80044d0:	08004523 	.word	0x08004523
 80044d4:	08004523 	.word	0x08004523
 80044d8:	08004523 	.word	0x08004523
 80044dc:	08004523 	.word	0x08004523
 80044e0:	08004523 	.word	0x08004523
 80044e4:	08004523 	.word	0x08004523
 80044e8:	0800452b 	.word	0x0800452b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ec:	4bab      	ldr	r3, [pc, #684]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	4aaa      	ldr	r2, [pc, #680]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80044f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f6:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80044f8:	e018      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044fe:	3308      	adds	r3, #8
 8004500:	4618      	mov	r0, r3
 8004502:	f003 fa4f 	bl	80079a4 <RCCEx_PLL2_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800450c:	e00e      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800450e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004512:	3330      	adds	r3, #48	; 0x30
 8004514:	4618      	mov	r0, r3
 8004516:	f003 fadd 	bl	8007ad4 <RCCEx_PLL3_Config>
 800451a:	4603      	mov	r3, r0
 800451c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004520:	e004      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004528:	e000      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800452a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800452c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10d      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004534:	4b99      	ldr	r3, [pc, #612]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800453a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800453e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004542:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004546:	4a95      	ldr	r2, [pc, #596]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004548:	430b      	orrs	r3, r1
 800454a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800454e:	e003      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004550:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004554:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004558:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004564:	63bb      	str	r3, [r7, #56]	; 0x38
 8004566:	2300      	movs	r3, #0
 8004568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800456e:	460b      	mov	r3, r1
 8004570:	4313      	orrs	r3, r2
 8004572:	d04e      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004574:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800457c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004580:	d02e      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004586:	d827      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004588:	2bc0      	cmp	r3, #192	; 0xc0
 800458a:	d02b      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800458c:	2bc0      	cmp	r3, #192	; 0xc0
 800458e:	d823      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004590:	2b80      	cmp	r3, #128	; 0x80
 8004592:	d017      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004594:	2b80      	cmp	r3, #128	; 0x80
 8004596:	d81f      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800459c:	2b40      	cmp	r3, #64	; 0x40
 800459e:	d007      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80045a0:	e01a      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a2:	4b7e      	ldr	r3, [pc, #504]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	4a7d      	ldr	r2, [pc, #500]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80045a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ac:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80045ae:	e01a      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045b4:	3308      	adds	r3, #8
 80045b6:	4618      	mov	r0, r3
 80045b8:	f003 f9f4 	bl	80079a4 <RCCEx_PLL2_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80045c2:	e010      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80045c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045c8:	3330      	adds	r3, #48	; 0x30
 80045ca:	4618      	mov	r0, r3
 80045cc:	f003 fa82 	bl	8007ad4 <RCCEx_PLL3_Config>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80045d6:	e006      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80045de:	e002      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80045e0:	bf00      	nop
 80045e2:	e000      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80045e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10d      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80045ee:	4b6b      	ldr	r3, [pc, #428]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80045f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80045f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004600:	4a66      	ldr	r2, [pc, #408]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004602:	430b      	orrs	r3, r1
 8004604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004608:	e003      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800460e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004612:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800461e:	633b      	str	r3, [r7, #48]	; 0x30
 8004620:	2300      	movs	r3, #0
 8004622:	637b      	str	r3, [r7, #52]	; 0x34
 8004624:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004628:	460b      	mov	r3, r1
 800462a:	4313      	orrs	r3, r2
 800462c:	d055      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800462e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004632:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004636:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800463a:	d031      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800463c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004640:	d82a      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004646:	d02d      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464c:	d824      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800464e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004652:	d029      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004654:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004658:	d81e      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800465a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800465e:	d011      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004664:	d818      	bhi.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d020      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800466a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800466e:	d113      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004670:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004674:	3308      	adds	r3, #8
 8004676:	4618      	mov	r0, r3
 8004678:	f003 f994 	bl	80079a4 <RCCEx_PLL2_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004682:	e014      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004684:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004688:	3330      	adds	r3, #48	; 0x30
 800468a:	4618      	mov	r0, r3
 800468c:	f003 fa22 	bl	8007ad4 <RCCEx_PLL3_Config>
 8004690:	4603      	mov	r3, r0
 8004692:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004696:	e00a      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800469e:	e006      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80046a0:	bf00      	nop
 80046a2:	e004      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80046a4:	bf00      	nop
 80046a6:	e002      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80046a8:	bf00      	nop
 80046aa:	e000      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80046ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10d      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80046b6:	4b39      	ldr	r3, [pc, #228]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80046b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046bc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80046c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80046c8:	4a34      	ldr	r2, [pc, #208]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80046ca:	430b      	orrs	r3, r1
 80046cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046d0:	e003      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046d6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80046da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e8:	2300      	movs	r3, #0
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80046f0:	460b      	mov	r3, r1
 80046f2:	4313      	orrs	r3, r2
 80046f4:	d058      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80046f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046fe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004702:	d031      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004704:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004708:	d82a      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800470a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800470e:	d02d      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004714:	d824      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004716:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800471a:	d029      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800471c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004720:	d81e      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004726:	d011      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800472c:	d818      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800472e:	2b00      	cmp	r3, #0
 8004730:	d020      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004736:	d113      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004738:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800473c:	3308      	adds	r3, #8
 800473e:	4618      	mov	r0, r3
 8004740:	f003 f930 	bl	80079a4 <RCCEx_PLL2_Config>
 8004744:	4603      	mov	r3, r0
 8004746:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800474a:	e014      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800474c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004750:	3330      	adds	r3, #48	; 0x30
 8004752:	4618      	mov	r0, r3
 8004754:	f003 f9be 	bl	8007ad4 <RCCEx_PLL3_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800475e:	e00a      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004766:	e006      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004768:	bf00      	nop
 800476a:	e004      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800476c:	bf00      	nop
 800476e:	e002      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004770:	bf00      	nop
 8004772:	e000      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004776:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800477a:	2b00      	cmp	r3, #0
 800477c:	d110      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800477e:	4b07      	ldr	r3, [pc, #28]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004784:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004788:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800478c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004790:	4902      	ldr	r1, [pc, #8]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004798:	e006      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800479a:	bf00      	nop
 800479c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047a4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80047a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	2100      	movs	r1, #0
 80047b2:	6239      	str	r1, [r7, #32]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047be:	460b      	mov	r3, r1
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d055      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80047c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047cc:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80047d0:	d031      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80047d2:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80047d6:	d82a      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80047d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047dc:	d02d      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80047de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047e2:	d824      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80047e4:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80047e8:	d029      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80047ea:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80047ee:	d81e      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f4:	d011      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80047f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047fa:	d818      	bhi.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d020      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004804:	d113      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004806:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800480a:	3308      	adds	r3, #8
 800480c:	4618      	mov	r0, r3
 800480e:	f003 f8c9 	bl	80079a4 <RCCEx_PLL2_Config>
 8004812:	4603      	mov	r3, r0
 8004814:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004818:	e014      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800481a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800481e:	3330      	adds	r3, #48	; 0x30
 8004820:	4618      	mov	r0, r3
 8004822:	f003 f957 	bl	8007ad4 <RCCEx_PLL3_Config>
 8004826:	4603      	mov	r3, r0
 8004828:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800482c:	e00a      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004834:	e006      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004836:	bf00      	nop
 8004838:	e004      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800483a:	bf00      	nop
 800483c:	e002      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800483e:	bf00      	nop
 8004840:	e000      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004844:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10d      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800484c:	4b88      	ldr	r3, [pc, #544]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800484e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004852:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8004856:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800485a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800485e:	4984      	ldr	r1, [pc, #528]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004866:	e003      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004868:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800486c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004870:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	2100      	movs	r1, #0
 800487a:	61b9      	str	r1, [r7, #24]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004886:	460b      	mov	r3, r1
 8004888:	4313      	orrs	r3, r2
 800488a:	d03d      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800488c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004890:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004894:	2b03      	cmp	r3, #3
 8004896:	d81c      	bhi.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004898:	a201      	add	r2, pc, #4	; (adr r2, 80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	080048db 	.word	0x080048db
 80048a4:	080048b1 	.word	0x080048b1
 80048a8:	080048bf 	.word	0x080048bf
 80048ac:	080048db 	.word	0x080048db
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b0:	4b6f      	ldr	r3, [pc, #444]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	4a6e      	ldr	r2, [pc, #440]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80048b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ba:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80048bc:	e00e      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048c2:	3308      	adds	r3, #8
 80048c4:	4618      	mov	r0, r3
 80048c6:	f003 f86d 	bl	80079a4 <RCCEx_PLL2_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80048d0:	e004      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80048d8:	e000      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80048da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10d      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80048e4:	4b62      	ldr	r3, [pc, #392]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80048e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80048ea:	f023 0203 	bic.w	r2, r3, #3
 80048ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80048f6:	495e      	ldr	r1, [pc, #376]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80048fe:	e003      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004904:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004908:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	2100      	movs	r1, #0
 8004912:	6139      	str	r1, [r7, #16]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	617b      	str	r3, [r7, #20]
 800491a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800491e:	460b      	mov	r3, r1
 8004920:	4313      	orrs	r3, r2
 8004922:	d03a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004924:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004928:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800492c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004930:	d00e      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004936:	d815      	bhi.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d017      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 800493c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004940:	d110      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004942:	4b4b      	ldr	r3, [pc, #300]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	4a4a      	ldr	r2, [pc, #296]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800494c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800494e:	e00e      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004950:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004954:	3308      	adds	r3, #8
 8004956:	4618      	mov	r0, r3
 8004958:	f003 f824 	bl	80079a4 <RCCEx_PLL2_Config>
 800495c:	4603      	mov	r3, r0
 800495e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004962:	e004      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800496a:	e000      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800496c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800496e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004976:	4b3e      	ldr	r3, [pc, #248]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004978:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800497c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004980:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004984:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004988:	4939      	ldr	r1, [pc, #228]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004990:	e003      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004992:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004996:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800499a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	2100      	movs	r1, #0
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	f003 0310 	and.w	r3, r3, #16
 80049aa:	60fb      	str	r3, [r7, #12]
 80049ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049b0:	460b      	mov	r3, r1
 80049b2:	4313      	orrs	r3, r2
 80049b4:	d038      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80049b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80049be:	2b30      	cmp	r3, #48	; 0x30
 80049c0:	d01b      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80049c2:	2b30      	cmp	r3, #48	; 0x30
 80049c4:	d815      	bhi.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d002      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d007      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 80049ce:	e010      	b.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d0:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80049d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d4:	4a26      	ldr	r2, [pc, #152]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80049d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049da:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80049dc:	e00e      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049e2:	3330      	adds	r3, #48	; 0x30
 80049e4:	4618      	mov	r0, r3
 80049e6:	f003 f875 	bl	8007ad4 <RCCEx_PLL3_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80049f0:	e004      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80049f8:	e000      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 80049fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049fc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10d      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004a04:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004a06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a12:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004a16:	4916      	ldr	r1, [pc, #88]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004a1e:	e003      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a20:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a24:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	2100      	movs	r1, #0
 8004a32:	6039      	str	r1, [r7, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	607b      	str	r3, [r7, #4]
 8004a3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	4313      	orrs	r3, r2
 8004a42:	d00c      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004a44:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004a46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a52:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004a56:	4906      	ldr	r1, [pc, #24]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8004a5e:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a6e:	bf00      	nop
 8004a70:	44020c00 	.word	0x44020c00

08004a74 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b08b      	sub	sp, #44	; 0x2c
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004a7c:	4bad      	ldr	r3, [pc, #692]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a84:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004a86:	4bab      	ldr	r3, [pc, #684]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004a90:	4ba8      	ldr	r3, [pc, #672]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	0a1b      	lsrs	r3, r3, #8
 8004a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a9a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004a9c:	4ba5      	ldr	r3, [pc, #660]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004aa6:	4ba3      	ldr	r3, [pc, #652]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	08db      	lsrs	r3, r3, #3
 8004aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004abe:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8126 	beq.w	8004d16 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d053      	beq.n	8004b78 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d86f      	bhi.n	8004bb6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d003      	beq.n	8004ae4 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d02b      	beq.n	8004b3a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8004ae2:	e068      	b.n	8004bb6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ae4:	4b93      	ldr	r3, [pc, #588]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	08db      	lsrs	r3, r3, #3
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	4a92      	ldr	r2, [pc, #584]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
 8004af4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	ee07 3a90 	vmov	s15, r3
 8004afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	ee07 3a90 	vmov	s15, r3
 8004b14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b18:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b1c:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004d3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004b20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b34:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004b38:	e068      	b.n	8004c0c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	ee07 3a90 	vmov	s15, r3
 8004b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b44:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004d40 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004b48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b56:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004b76:	e049      	b.n	8004c0c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b82:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004d44 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	ee07 3a90 	vmov	s15, r3
 8004b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b94:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b98:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004d3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004b9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004bb4:	e02a      	b.n	8004c0c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bb6:	4b5f      	ldr	r3, [pc, #380]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	08db      	lsrs	r3, r3, #3
 8004bbc:	f003 0303 	and.w	r3, r3, #3
 8004bc0:	4a5d      	ldr	r2, [pc, #372]	; (8004d38 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	ee07 3a90 	vmov	s15, r3
 8004bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	ee07 3a90 	vmov	s15, r3
 8004bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bea:	ed97 6a04 	vldr	s12, [r7, #16]
 8004bee:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004d3c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c06:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004c0a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c0c:	4b49      	ldr	r3, [pc, #292]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c18:	d121      	bne.n	8004c5e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004c1a:	4b46      	ldr	r3, [pc, #280]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d017      	beq.n	8004c56 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004c26:	4b43      	ldr	r3, [pc, #268]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	0a5b      	lsrs	r3, r3, #9
 8004c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c30:	ee07 3a90 	vmov	s15, r3
 8004c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8004c38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c3c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004c40:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c4c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e006      	b.n	8004c64 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	e002      	b.n	8004c64 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c64:	4b33      	ldr	r3, [pc, #204]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c70:	d121      	bne.n	8004cb6 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004c72:	4b30      	ldr	r3, [pc, #192]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d017      	beq.n	8004cae <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004c7e:	4b2d      	ldr	r3, [pc, #180]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c82:	0c1b      	lsrs	r3, r3, #16
 8004c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c88:	ee07 3a90 	vmov	s15, r3
 8004c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004c90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c94:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004c98:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	605a      	str	r2, [r3, #4]
 8004cac:	e006      	b.n	8004cbc <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	605a      	str	r2, [r3, #4]
 8004cb4:	e002      	b.n	8004cbc <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cc8:	d121      	bne.n	8004d0e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004cca:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d017      	beq.n	8004d06 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004cd6:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cda:	0e1b      	lsrs	r3, r3, #24
 8004cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ce0:	ee07 3a90 	vmov	s15, r3
 8004ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004cf0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cfc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004d04:	e010      	b.n	8004d28 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	609a      	str	r2, [r3, #8]
}
 8004d0c:	e00c      	b.n	8004d28 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	609a      	str	r2, [r3, #8]
}
 8004d14:	e008      	b.n	8004d28 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	609a      	str	r2, [r3, #8]
}
 8004d28:	bf00      	nop
 8004d2a:	372c      	adds	r7, #44	; 0x2c
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	44020c00 	.word	0x44020c00
 8004d38:	03d09000 	.word	0x03d09000
 8004d3c:	46000000 	.word	0x46000000
 8004d40:	4a742400 	.word	0x4a742400
 8004d44:	4bbebc20 	.word	0x4bbebc20

08004d48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b08b      	sub	sp, #44	; 0x2c
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004d50:	4bad      	ldr	r3, [pc, #692]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d58:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004d5a:	4bab      	ldr	r3, [pc, #684]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004d64:	4ba8      	ldr	r3, [pc, #672]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d6e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004d70:	4ba5      	ldr	r3, [pc, #660]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004d7a:	4ba3      	ldr	r3, [pc, #652]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	08db      	lsrs	r3, r3, #3
 8004d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d92:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8126 	beq.w	8004fea <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d053      	beq.n	8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d86f      	bhi.n	8004e8a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d003      	beq.n	8004db8 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d02b      	beq.n	8004e0e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8004db6:	e068      	b.n	8004e8a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004db8:	4b93      	ldr	r3, [pc, #588]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	08db      	lsrs	r3, r3, #3
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	4a92      	ldr	r2, [pc, #584]	; (800500c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	ee07 3a90 	vmov	s15, r3
 8004dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	ee07 3a90 	vmov	s15, r3
 8004de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dec:	ed97 6a04 	vldr	s12, [r7, #16]
 8004df0:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004df4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004e0c:	e068      	b.n	8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	ee07 3a90 	vmov	s15, r3
 8004e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e18:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004e4a:	e049      	b.n	8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	ee07 3a90 	vmov	s15, r3
 8004e64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e68:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e6c:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004e70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e84:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004e88:	e02a      	b.n	8004ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e8a:	4b5f      	ldr	r3, [pc, #380]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	08db      	lsrs	r3, r3, #3
 8004e90:	f003 0303 	and.w	r3, r3, #3
 8004e94:	4a5d      	ldr	r2, [pc, #372]	; (800500c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004e96:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	ee07 3a90 	vmov	s15, r3
 8004ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	ee07 3a90 	vmov	s15, r3
 8004eac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	ee07 3a90 	vmov	s15, r3
 8004eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ebe:	ed97 6a04 	vldr	s12, [r7, #16]
 8004ec2:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eda:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004ede:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ee0:	4b49      	ldr	r3, [pc, #292]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eec:	d121      	bne.n	8004f32 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004eee:	4b46      	ldr	r3, [pc, #280]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d017      	beq.n	8004f2a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004efa:	4b43      	ldr	r3, [pc, #268]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efe:	0a5b      	lsrs	r3, r3, #9
 8004f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f04:	ee07 3a90 	vmov	s15, r3
 8004f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004f0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f10:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004f14:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f20:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	e006      	b.n	8004f38 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	e002      	b.n	8004f38 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f38:	4b33      	ldr	r3, [pc, #204]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f44:	d121      	bne.n	8004f8a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004f46:	4b30      	ldr	r3, [pc, #192]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d017      	beq.n	8004f82 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004f52:	4b2d      	ldr	r3, [pc, #180]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	0c1b      	lsrs	r3, r3, #16
 8004f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f5c:	ee07 3a90 	vmov	s15, r3
 8004f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004f64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f68:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004f6c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f78:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	605a      	str	r2, [r3, #4]
 8004f80:	e006      	b.n	8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	605a      	str	r2, [r3, #4]
 8004f88:	e002      	b.n	8004f90 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f90:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f9c:	d121      	bne.n	8004fe2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004f9e:	4b1a      	ldr	r3, [pc, #104]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d017      	beq.n	8004fda <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004faa:	4b17      	ldr	r3, [pc, #92]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fae:	0e1b      	lsrs	r3, r3, #24
 8004fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb4:	ee07 3a90 	vmov	s15, r3
 8004fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004fbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fc0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004fc4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fd0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fd8:	e010      	b.n	8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	609a      	str	r2, [r3, #8]
}
 8004fe0:	e00c      	b.n	8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	609a      	str	r2, [r3, #8]
}
 8004fe8:	e008      	b.n	8004ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	609a      	str	r2, [r3, #8]
}
 8004ffc:	bf00      	nop
 8004ffe:	372c      	adds	r7, #44	; 0x2c
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	44020c00 	.word	0x44020c00
 800500c:	03d09000 	.word	0x03d09000
 8005010:	46000000 	.word	0x46000000
 8005014:	4a742400 	.word	0x4a742400
 8005018:	4bbebc20 	.word	0x4bbebc20

0800501c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800501c:	b480      	push	{r7}
 800501e:	b08b      	sub	sp, #44	; 0x2c
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005024:	4bad      	ldr	r3, [pc, #692]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800502e:	4bab      	ldr	r3, [pc, #684]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005038:	4ba8      	ldr	r3, [pc, #672]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503c:	0a1b      	lsrs	r3, r3, #8
 800503e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005042:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005044:	4ba5      	ldr	r3, [pc, #660]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800504e:	4ba3      	ldr	r3, [pc, #652]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005052:	08db      	lsrs	r3, r3, #3
 8005054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	fb02 f303 	mul.w	r3, r2, r3
 800505e:	ee07 3a90 	vmov	s15, r3
 8005062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005066:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8126 	beq.w	80052be <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	2b03      	cmp	r3, #3
 8005076:	d053      	beq.n	8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d86f      	bhi.n	800515e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d003      	beq.n	800508c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d02b      	beq.n	80050e2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800508a:	e068      	b.n	800515e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800508c:	4b93      	ldr	r3, [pc, #588]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	08db      	lsrs	r3, r3, #3
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	4a92      	ldr	r2, [pc, #584]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
 800509c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	ee07 3a90 	vmov	s15, r3
 80050a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	ee07 3a90 	vmov	s15, r3
 80050bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c0:	ed97 6a04 	vldr	s12, [r7, #16]
 80050c4:	eddf 5a87 	vldr	s11, [pc, #540]	; 80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80050c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80050e0:	e068      	b.n	80051b4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	ee07 3a90 	vmov	s15, r3
 80050e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ec:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80052e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80050f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8005102:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800511e:	e049      	b.n	80051b4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512a:	eddf 6a70 	vldr	s13, [pc, #448]	; 80052ec <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800512e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	ee07 3a90 	vmov	s15, r3
 8005138:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800513c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005140:	eddf 5a68 	vldr	s11, [pc, #416]	; 80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005144:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005148:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800514c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005150:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005158:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800515c:	e02a      	b.n	80051b4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800515e:	4b5f      	ldr	r3, [pc, #380]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	08db      	lsrs	r3, r3, #3
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	4a5d      	ldr	r2, [pc, #372]	; (80052e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800516a:	fa22 f303 	lsr.w	r3, r2, r3
 800516e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	ee07 3a90 	vmov	s15, r3
 8005180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005184:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005192:	ed97 6a04 	vldr	s12, [r7, #16]
 8005196:	eddf 5a53 	vldr	s11, [pc, #332]	; 80052e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800519a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80051b2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051b4:	4b49      	ldr	r3, [pc, #292]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051c0:	d121      	bne.n	8005206 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80051c2:	4b46      	ldr	r3, [pc, #280]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80051c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d017      	beq.n	80051fe <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80051ce:	4b43      	ldr	r3, [pc, #268]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80051d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d2:	0a5b      	lsrs	r3, r3, #9
 80051d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d8:	ee07 3a90 	vmov	s15, r3
 80051dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80051e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051e4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80051e8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80051ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051f4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	e006      	b.n	800520c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	e002      	b.n	800520c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800520c:	4b33      	ldr	r3, [pc, #204]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005218:	d121      	bne.n	800525e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800521a:	4b30      	ldr	r3, [pc, #192]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d017      	beq.n	8005256 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005226:	4b2d      	ldr	r3, [pc, #180]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005230:	ee07 3a90 	vmov	s15, r3
 8005234:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800523c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005240:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800524c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	605a      	str	r2, [r3, #4]
 8005254:	e006      	b.n	8005264 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	605a      	str	r2, [r3, #4]
 800525c:	e002      	b.n	8005264 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005264:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800526c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005270:	d121      	bne.n	80052b6 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005272:	4b1a      	ldr	r3, [pc, #104]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d017      	beq.n	80052ae <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800527e:	4b17      	ldr	r3, [pc, #92]	; (80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005282:	0e1b      	lsrs	r3, r3, #24
 8005284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005288:	ee07 3a90 	vmov	s15, r3
 800528c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005290:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005294:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005298:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800529c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80052ac:	e010      	b.n	80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	609a      	str	r2, [r3, #8]
}
 80052b4:	e00c      	b.n	80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	609a      	str	r2, [r3, #8]
}
 80052bc:	e008      	b.n	80052d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	609a      	str	r2, [r3, #8]
}
 80052d0:	bf00      	nop
 80052d2:	372c      	adds	r7, #44	; 0x2c
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	44020c00 	.word	0x44020c00
 80052e0:	03d09000 	.word	0x03d09000
 80052e4:	46000000 	.word	0x46000000
 80052e8:	4a742400 	.word	0x4a742400
 80052ec:	4bbebc20 	.word	0x4bbebc20

080052f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80052f0:	b590      	push	{r4, r7, lr}
 80052f2:	b08f      	sub	sp, #60	; 0x3c
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80052fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052fe:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8005302:	4321      	orrs	r1, r4
 8005304:	d150      	bne.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005306:	4b26      	ldr	r3, [pc, #152]	; (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800530c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005310:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005312:	4b23      	ldr	r3, [pc, #140]	; (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b02      	cmp	r3, #2
 800531e:	d108      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005326:	d104      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800532c:	637b      	str	r3, [r7, #52]	; 0x34
 800532e:	f002 bb2a 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005332:	4b1b      	ldr	r3, [pc, #108]	; (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800533c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005340:	d108      	bne.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005348:	d104      	bne.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800534a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800534e:	637b      	str	r3, [r7, #52]	; 0x34
 8005350:	f002 bb19 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005354:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005360:	d119      	bne.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005368:	d115      	bne.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800536a:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005372:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005376:	d30a      	bcc.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005378:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	0a1b      	lsrs	r3, r3, #8
 800537e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005382:	4a08      	ldr	r2, [pc, #32]	; (80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005384:	fbb2 f3f3 	udiv	r3, r2, r3
 8005388:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800538a:	f002 bafc 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005392:	f002 baf8 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	637b      	str	r3, [r7, #52]	; 0x34
 800539a:	f002 baf4 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800539e:	bf00      	nop
 80053a0:	44020c00 	.word	0x44020c00
 80053a4:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80053a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053ac:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80053b0:	ea50 0104 	orrs.w	r1, r0, r4
 80053b4:	f001 8275 	beq.w	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80053b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053bc:	2801      	cmp	r0, #1
 80053be:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 80053c2:	f082 82dd 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053ca:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 80053ce:	ea50 0104 	orrs.w	r1, r0, r4
 80053d2:	f001 816c 	beq.w	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80053d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053da:	2801      	cmp	r0, #1
 80053dc:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 80053e0:	f082 82ce 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80053e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053e8:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 80053ec:	ea50 0104 	orrs.w	r1, r0, r4
 80053f0:	f001 8602 	beq.w	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80053f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053f8:	2801      	cmp	r0, #1
 80053fa:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 80053fe:	f082 82bf 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005402:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005406:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800540a:	ea50 0104 	orrs.w	r1, r0, r4
 800540e:	f001 854c 	beq.w	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8005412:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005416:	2801      	cmp	r0, #1
 8005418:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800541c:	f082 82b0 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005420:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005424:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8005428:	ea50 0104 	orrs.w	r1, r0, r4
 800542c:	f001 849e 	beq.w	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005430:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005434:	2801      	cmp	r0, #1
 8005436:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800543a:	f082 82a1 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800543e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005442:	f1a1 0420 	sub.w	r4, r1, #32
 8005446:	ea50 0104 	orrs.w	r1, r0, r4
 800544a:	f001 83e8 	beq.w	8006c1e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800544e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005452:	2801      	cmp	r0, #1
 8005454:	f171 0120 	sbcs.w	r1, r1, #32
 8005458:	f082 8292 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800545c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005460:	f1a1 0410 	sub.w	r4, r1, #16
 8005464:	ea50 0104 	orrs.w	r1, r0, r4
 8005468:	f002 8256 	beq.w	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800546c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005470:	2801      	cmp	r0, #1
 8005472:	f171 0110 	sbcs.w	r1, r1, #16
 8005476:	f082 8283 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800547a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800547e:	f1a1 0408 	sub.w	r4, r1, #8
 8005482:	ea50 0104 	orrs.w	r1, r0, r4
 8005486:	f002 81cc 	beq.w	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800548a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800548e:	2801      	cmp	r0, #1
 8005490:	f171 0108 	sbcs.w	r1, r1, #8
 8005494:	f082 8274 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005498:	e9d7 0100 	ldrd	r0, r1, [r7]
 800549c:	1f0c      	subs	r4, r1, #4
 800549e:	ea50 0104 	orrs.w	r1, r0, r4
 80054a2:	f001 8648 	beq.w	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80054a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054aa:	2801      	cmp	r0, #1
 80054ac:	f171 0104 	sbcs.w	r1, r1, #4
 80054b0:	f082 8266 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80054b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054b8:	1e8c      	subs	r4, r1, #2
 80054ba:	ea50 0104 	orrs.w	r1, r0, r4
 80054be:	f002 8143 	beq.w	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80054c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054c6:	2801      	cmp	r0, #1
 80054c8:	f171 0102 	sbcs.w	r1, r1, #2
 80054cc:	f082 8258 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80054d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054d4:	1e4c      	subs	r4, r1, #1
 80054d6:	ea50 0104 	orrs.w	r1, r0, r4
 80054da:	f002 80ce 	beq.w	800767a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80054de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054e2:	2801      	cmp	r0, #1
 80054e4:	f171 0101 	sbcs.w	r1, r1, #1
 80054e8:	f082 824a 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80054ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054f0:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 80054f4:	4321      	orrs	r1, r4
 80054f6:	f002 8059 	beq.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80054fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054fe:	4cd9      	ldr	r4, [pc, #868]	; (8005864 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005500:	42a0      	cmp	r0, r4
 8005502:	f171 0100 	sbcs.w	r1, r1, #0
 8005506:	f082 823b 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800550a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800550e:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8005512:	4321      	orrs	r1, r4
 8005514:	f001 87d9 	beq.w	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005518:	e9d7 0100 	ldrd	r0, r1, [r7]
 800551c:	4cd2      	ldr	r4, [pc, #840]	; (8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800551e:	42a0      	cmp	r0, r4
 8005520:	f171 0100 	sbcs.w	r1, r1, #0
 8005524:	f082 822c 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005528:	e9d7 0100 	ldrd	r0, r1, [r7]
 800552c:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8005530:	4321      	orrs	r1, r4
 8005532:	f001 8751 	beq.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005536:	e9d7 0100 	ldrd	r0, r1, [r7]
 800553a:	4ccc      	ldr	r4, [pc, #816]	; (800586c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800553c:	42a0      	cmp	r0, r4
 800553e:	f171 0100 	sbcs.w	r1, r1, #0
 8005542:	f082 821d 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005546:	e9d7 0100 	ldrd	r0, r1, [r7]
 800554a:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 800554e:	4321      	orrs	r1, r4
 8005550:	f001 869a 	beq.w	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005554:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005558:	4cc5      	ldr	r4, [pc, #788]	; (8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800555a:	42a0      	cmp	r0, r4
 800555c:	f171 0100 	sbcs.w	r1, r1, #0
 8005560:	f082 820e 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005564:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005568:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 800556c:	4321      	orrs	r1, r4
 800556e:	f001 8612 	beq.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8005572:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005576:	4cbf      	ldr	r4, [pc, #764]	; (8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005578:	42a0      	cmp	r0, r4
 800557a:	f171 0100 	sbcs.w	r1, r1, #0
 800557e:	f082 81ff 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005582:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005586:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800558a:	4321      	orrs	r1, r4
 800558c:	f002 817e 	beq.w	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005594:	4cb8      	ldr	r4, [pc, #736]	; (8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005596:	42a0      	cmp	r0, r4
 8005598:	f171 0100 	sbcs.w	r1, r1, #0
 800559c:	f082 81f0 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80055a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055a4:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 80055a8:	4321      	orrs	r1, r4
 80055aa:	f000 829e 	beq.w	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80055ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055b2:	4cb2      	ldr	r4, [pc, #712]	; (800587c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80055b4:	42a0      	cmp	r0, r4
 80055b6:	f171 0100 	sbcs.w	r1, r1, #0
 80055ba:	f082 81e1 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80055be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055c2:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 80055c6:	4321      	orrs	r1, r4
 80055c8:	f000 826d 	beq.w	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80055cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055d0:	4cab      	ldr	r4, [pc, #684]	; (8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80055d2:	42a0      	cmp	r0, r4
 80055d4:	f171 0100 	sbcs.w	r1, r1, #0
 80055d8:	f082 81d2 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80055dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055e0:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 80055e4:	4321      	orrs	r1, r4
 80055e6:	f001 800d 	beq.w	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80055ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ee:	4ca5      	ldr	r4, [pc, #660]	; (8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80055f0:	42a0      	cmp	r0, r4
 80055f2:	f171 0100 	sbcs.w	r1, r1, #0
 80055f6:	f082 81c3 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80055fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055fe:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8005602:	4321      	orrs	r1, r4
 8005604:	f000 81d0 	beq.w	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005608:	e9d7 0100 	ldrd	r0, r1, [r7]
 800560c:	4c9e      	ldr	r4, [pc, #632]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800560e:	42a0      	cmp	r0, r4
 8005610:	f171 0100 	sbcs.w	r1, r1, #0
 8005614:	f082 81b4 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800561c:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8005620:	4321      	orrs	r1, r4
 8005622:	f000 8142 	beq.w	80058aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005626:	e9d7 0100 	ldrd	r0, r1, [r7]
 800562a:	4c98      	ldr	r4, [pc, #608]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800562c:	42a0      	cmp	r0, r4
 800562e:	f171 0100 	sbcs.w	r1, r1, #0
 8005632:	f082 81a5 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005636:	e9d7 0100 	ldrd	r0, r1, [r7]
 800563a:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 800563e:	4321      	orrs	r1, r4
 8005640:	f001 824e 	beq.w	8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005644:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005648:	4c91      	ldr	r4, [pc, #580]	; (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800564a:	42a0      	cmp	r0, r4
 800564c:	f171 0100 	sbcs.w	r1, r1, #0
 8005650:	f082 8196 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005658:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 800565c:	4321      	orrs	r1, r4
 800565e:	f001 8197 	beq.w	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005662:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005666:	4c8b      	ldr	r4, [pc, #556]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005668:	42a0      	cmp	r0, r4
 800566a:	f171 0100 	sbcs.w	r1, r1, #0
 800566e:	f082 8187 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005672:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005676:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 800567a:	4321      	orrs	r1, r4
 800567c:	f001 8154 	beq.w	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005680:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005684:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8005688:	f171 0100 	sbcs.w	r1, r1, #0
 800568c:	f082 8178 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005690:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005694:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8005698:	4321      	orrs	r1, r4
 800569a:	f001 80b7 	beq.w	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800569e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056a2:	f248 0401 	movw	r4, #32769	; 0x8001
 80056a6:	42a0      	cmp	r0, r4
 80056a8:	f171 0100 	sbcs.w	r1, r1, #0
 80056ac:	f082 8168 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056b4:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 80056b8:	4321      	orrs	r1, r4
 80056ba:	f001 8064 	beq.w	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80056be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056c2:	f244 0401 	movw	r4, #16385	; 0x4001
 80056c6:	42a0      	cmp	r0, r4
 80056c8:	f171 0100 	sbcs.w	r1, r1, #0
 80056cc:	f082 8158 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056d4:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 80056d8:	4321      	orrs	r1, r4
 80056da:	f001 8011 	beq.w	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80056de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056e2:	f242 0401 	movw	r4, #8193	; 0x2001
 80056e6:	42a0      	cmp	r0, r4
 80056e8:	f171 0100 	sbcs.w	r1, r1, #0
 80056ec:	f082 8148 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056f4:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 80056f8:	4321      	orrs	r1, r4
 80056fa:	f000 871e 	beq.w	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80056fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005702:	f241 0401 	movw	r4, #4097	; 0x1001
 8005706:	42a0      	cmp	r0, r4
 8005708:	f171 0100 	sbcs.w	r1, r1, #0
 800570c:	f082 8138 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005710:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005714:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8005718:	4321      	orrs	r1, r4
 800571a:	f000 86a8 	beq.w	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800571e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005722:	f640 0401 	movw	r4, #2049	; 0x801
 8005726:	42a0      	cmp	r0, r4
 8005728:	f171 0100 	sbcs.w	r1, r1, #0
 800572c:	f082 8128 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005730:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005734:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8005738:	4321      	orrs	r1, r4
 800573a:	f000 8632 	beq.w	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800573e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005742:	f240 4401 	movw	r4, #1025	; 0x401
 8005746:	42a0      	cmp	r0, r4
 8005748:	f171 0100 	sbcs.w	r1, r1, #0
 800574c:	f082 8118 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005750:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005754:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8005758:	4321      	orrs	r1, r4
 800575a:	f000 85b0 	beq.w	80062be <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800575e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005762:	f240 2401 	movw	r4, #513	; 0x201
 8005766:	42a0      	cmp	r0, r4
 8005768:	f171 0100 	sbcs.w	r1, r1, #0
 800576c:	f082 8108 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005770:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005774:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8005778:	4321      	orrs	r1, r4
 800577a:	f000 8535 	beq.w	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800577e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005782:	f240 1401 	movw	r4, #257	; 0x101
 8005786:	42a0      	cmp	r0, r4
 8005788:	f171 0100 	sbcs.w	r1, r1, #0
 800578c:	f082 80f8 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005794:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8005798:	4321      	orrs	r1, r4
 800579a:	f000 84ba 	beq.w	8006112 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800579e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057a2:	2881      	cmp	r0, #129	; 0x81
 80057a4:	f171 0100 	sbcs.w	r1, r1, #0
 80057a8:	f082 80ea 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057b0:	2821      	cmp	r0, #33	; 0x21
 80057b2:	f171 0100 	sbcs.w	r1, r1, #0
 80057b6:	d26f      	bcs.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80057b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057bc:	4301      	orrs	r1, r0
 80057be:	f002 80df 	beq.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057c6:	1e42      	subs	r2, r0, #1
 80057c8:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 80057cc:	2a20      	cmp	r2, #32
 80057ce:	f173 0100 	sbcs.w	r1, r3, #0
 80057d2:	f082 80d5 	bcs.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057d6:	2a1f      	cmp	r2, #31
 80057d8:	f202 80d2 	bhi.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057dc:	a101      	add	r1, pc, #4	; (adr r1, 80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80057de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	08005b45 	.word	0x08005b45
 80057e8:	08005c11 	.word	0x08005c11
 80057ec:	08007981 	.word	0x08007981
 80057f0:	08005cd1 	.word	0x08005cd1
 80057f4:	08007981 	.word	0x08007981
 80057f8:	08007981 	.word	0x08007981
 80057fc:	08007981 	.word	0x08007981
 8005800:	08005da1 	.word	0x08005da1
 8005804:	08007981 	.word	0x08007981
 8005808:	08007981 	.word	0x08007981
 800580c:	08007981 	.word	0x08007981
 8005810:	08007981 	.word	0x08007981
 8005814:	08007981 	.word	0x08007981
 8005818:	08007981 	.word	0x08007981
 800581c:	08007981 	.word	0x08007981
 8005820:	08005e83 	.word	0x08005e83
 8005824:	08007981 	.word	0x08007981
 8005828:	08007981 	.word	0x08007981
 800582c:	08007981 	.word	0x08007981
 8005830:	08007981 	.word	0x08007981
 8005834:	08007981 	.word	0x08007981
 8005838:	08007981 	.word	0x08007981
 800583c:	08007981 	.word	0x08007981
 8005840:	08007981 	.word	0x08007981
 8005844:	08007981 	.word	0x08007981
 8005848:	08007981 	.word	0x08007981
 800584c:	08007981 	.word	0x08007981
 8005850:	08007981 	.word	0x08007981
 8005854:	08007981 	.word	0x08007981
 8005858:	08007981 	.word	0x08007981
 800585c:	08007981 	.word	0x08007981
 8005860:	08005f59 	.word	0x08005f59
 8005864:	80000001 	.word	0x80000001
 8005868:	40000001 	.word	0x40000001
 800586c:	20000001 	.word	0x20000001
 8005870:	10000001 	.word	0x10000001
 8005874:	08000001 	.word	0x08000001
 8005878:	04000001 	.word	0x04000001
 800587c:	00800001 	.word	0x00800001
 8005880:	00400001 	.word	0x00400001
 8005884:	00200001 	.word	0x00200001
 8005888:	00100001 	.word	0x00100001
 800588c:	00080001 	.word	0x00080001
 8005890:	00040001 	.word	0x00040001
 8005894:	00020001 	.word	0x00020001
 8005898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800589c:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80058a0:	430b      	orrs	r3, r1
 80058a2:	f000 83c4 	beq.w	800602e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80058a6:	f002 b86b 	b.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80058aa:	4ba1      	ldr	r3, [pc, #644]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80058ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058b0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80058b4:	633b      	str	r3, [r7, #48]	; 0x30
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058bc:	d036      	beq.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058c4:	d86b      	bhi.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058cc:	d02b      	beq.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058d4:	d863      	bhi.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80058d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058dc:	d01b      	beq.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058e4:	d85b      	bhi.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058f2:	d008      	beq.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80058f4:	e053      	b.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058f6:	f107 0320 	add.w	r3, r7, #32
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff f8ba 	bl	8004a74 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005904:	e04e      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005906:	f107 0314 	add.w	r3, r7, #20
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff fa1c 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005914:	e046      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005916:	f107 0308 	add.w	r3, r7, #8
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff fb7e 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005924:	e03e      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005926:	4b83      	ldr	r3, [pc, #524]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800592a:	e03b      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800592c:	4b80      	ldr	r3, [pc, #512]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800592e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005932:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005938:	4b7d      	ldr	r3, [pc, #500]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b02      	cmp	r3, #2
 8005942:	d10c      	bne.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800594a:	4b79      	ldr	r3, [pc, #484]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	08db      	lsrs	r3, r3, #3
 8005950:	f003 0303 	and.w	r3, r3, #3
 8005954:	4a78      	ldr	r2, [pc, #480]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005956:	fa22 f303 	lsr.w	r3, r2, r3
 800595a:	637b      	str	r3, [r7, #52]	; 0x34
 800595c:	e01e      	b.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800595e:	4b74      	ldr	r3, [pc, #464]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800596a:	d106      	bne.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800596c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005972:	d102      	bne.n	800597a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005974:	4b71      	ldr	r3, [pc, #452]	; (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005976:	637b      	str	r3, [r7, #52]	; 0x34
 8005978:	e010      	b.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800597a:	4b6d      	ldr	r3, [pc, #436]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005986:	d106      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800598e:	d102      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005990:	4b6b      	ldr	r3, [pc, #428]	; (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005992:	637b      	str	r3, [r7, #52]	; 0x34
 8005994:	e002      	b.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800599a:	e003      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800599c:	e002      	b.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80059a2:	bf00      	nop
          }
        }
        break;
 80059a4:	f001 bfef 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80059a8:	4b61      	ldr	r3, [pc, #388]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80059aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059ae:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80059b2:	633b      	str	r3, [r7, #48]	; 0x30
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059ba:	d036      	beq.n	8005a2a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059c2:	d86b      	bhi.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80059ca:	d02b      	beq.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80059d2:	d863      	bhi.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059da:	d01b      	beq.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059e2:	d85b      	bhi.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80059e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d004      	beq.n	80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80059f0:	d008      	beq.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 80059f2:	e053      	b.n	8005a9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059f4:	f107 0320 	add.w	r3, r7, #32
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff f83b 	bl	8004a74 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a02:	e04e      	b.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a04:	f107 0314 	add.w	r3, r7, #20
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f7ff f99d 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a12:	e046      	b.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a14:	f107 0308 	add.w	r3, r7, #8
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff faff 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a22:	e03e      	b.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005a24:	4b43      	ldr	r3, [pc, #268]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005a26:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a28:	e03b      	b.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a2a:	4b41      	ldr	r3, [pc, #260]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a30:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a34:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a36:	4b3e      	ldr	r3, [pc, #248]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d10c      	bne.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a48:	4b39      	ldr	r3, [pc, #228]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	08db      	lsrs	r3, r3, #3
 8005a4e:	f003 0303 	and.w	r3, r3, #3
 8005a52:	4a39      	ldr	r2, [pc, #228]	; (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
 8005a58:	637b      	str	r3, [r7, #52]	; 0x34
 8005a5a:	e01e      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a5c:	4b34      	ldr	r3, [pc, #208]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a68:	d106      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a70:	d102      	bne.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005a72:	4b32      	ldr	r3, [pc, #200]	; (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
 8005a76:	e010      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a78:	4b2d      	ldr	r3, [pc, #180]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a84:	d106      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8005a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a8c:	d102      	bne.n	8005a94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005a8e:	4b2c      	ldr	r3, [pc, #176]	; (8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005a90:	637b      	str	r3, [r7, #52]	; 0x34
 8005a92:	e002      	b.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005a98:	e003      	b.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8005a9a:	e002      	b.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005aa0:	bf00      	nop
          }
        }
        break;
 8005aa2:	f001 bf70 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005aa6:	4b22      	ldr	r3, [pc, #136]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005aa8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab0:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d108      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ab8:	f107 0320 	add.w	r3, r7, #32
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fe ffd9 	bl	8004a74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005ac6:	f001 bf5e 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	d108      	bne.n	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ad0:	f107 0314 	add.w	r3, r7, #20
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7ff f937 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ade:	f001 bf52 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ae6:	f001 bf4e 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8005aea:	4b11      	ldr	r3, [pc, #68]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005aec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af4:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d108      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005afc:	f107 0320 	add.w	r3, r7, #32
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe ffb7 	bl	8004a74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b08:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b0a:	f001 bf3c 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	2b80      	cmp	r3, #128	; 0x80
 8005b12:	d108      	bne.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b14:	f107 0314 	add.w	r3, r7, #20
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff f915 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b22:	f001 bf30 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b2a:	f001 bf2c 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005b2e:	bf00      	nop
 8005b30:	44020c00 	.word	0x44020c00
 8005b34:	00bb8000 	.word	0x00bb8000
 8005b38:	03d09000 	.word	0x03d09000
 8005b3c:	003d0900 	.word	0x003d0900
 8005b40:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005b44:	4b9d      	ldr	r3, [pc, #628]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005b46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d104      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005b56:	f7fc ffd7 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 8005b5a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005b5c:	f001 bf13 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005b60:	4b96      	ldr	r3, [pc, #600]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b6c:	d10a      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d107      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b74:	f107 0314 	add.w	r3, r7, #20
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff f8e5 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
 8005b82:	e043      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005b84:	4b8d      	ldr	r3, [pc, #564]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b90:	d10a      	bne.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d107      	bne.n	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b98:	f107 0308 	add.w	r3, r7, #8
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff fa3d 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba6:	e031      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005ba8:	4b84      	ldr	r3, [pc, #528]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d10c      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d109      	bne.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005bba:	4b80      	ldr	r3, [pc, #512]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	08db      	lsrs	r3, r3, #3
 8005bc0:	f003 0303 	and.w	r3, r3, #3
 8005bc4:	4a7e      	ldr	r2, [pc, #504]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bca:	637b      	str	r3, [r7, #52]	; 0x34
 8005bcc:	e01e      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005bce:	4b7b      	ldr	r3, [pc, #492]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bda:	d105      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d102      	bne.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8005be2:	4b78      	ldr	r3, [pc, #480]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005be4:	637b      	str	r3, [r7, #52]	; 0x34
 8005be6:	e011      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005be8:	4b74      	ldr	r3, [pc, #464]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d106      	bne.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	2b05      	cmp	r3, #5
 8005bfa:	d103      	bne.n	8005c04 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8005bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c00:	637b      	str	r3, [r7, #52]	; 0x34
 8005c02:	e003      	b.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c08:	f001 bebd 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005c0c:	f001 bebb 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005c10:	4b6a      	ldr	r3, [pc, #424]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005c12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c1a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d104      	bne.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c22:	f7fc ff5b 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8005c26:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005c28:	f001 bead 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005c2c:	4b63      	ldr	r3, [pc, #396]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c38:	d10a      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d107      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c40:	f107 0314 	add.w	r3, r7, #20
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff f87f 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4e:	e03d      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	2b10      	cmp	r3, #16
 8005c54:	d108      	bne.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c56:	f107 0308 	add.w	r3, r7, #8
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff f9de 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c64:	f001 be8f 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005c68:	4b54      	ldr	r3, [pc, #336]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d10c      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	2b18      	cmp	r3, #24
 8005c78:	d109      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c7a:	4b50      	ldr	r3, [pc, #320]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	08db      	lsrs	r3, r3, #3
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	4a4e      	ldr	r2, [pc, #312]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005c86:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c8c:	e01e      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005c8e:	4b4b      	ldr	r3, [pc, #300]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c9a:	d105      	bne.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	2b20      	cmp	r3, #32
 8005ca0:	d102      	bne.n	8005ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8005ca2:	4b48      	ldr	r3, [pc, #288]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca6:	e011      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005ca8:	4b44      	ldr	r3, [pc, #272]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cae:	f003 0302 	and.w	r3, r3, #2
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d106      	bne.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	2b28      	cmp	r3, #40	; 0x28
 8005cba:	d103      	bne.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8005cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc2:	e003      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cc8:	f001 be5d 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005ccc:	f001 be5b 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005cd0:	4b3a      	ldr	r3, [pc, #232]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005cd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005cd6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005cda:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d104      	bne.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ce2:	f7fc fefb 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8005ce6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005ce8:	f001 be4d 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005cec:	4b33      	ldr	r3, [pc, #204]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cf8:	d10a      	bne.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	d107      	bne.n	8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d00:	f107 0314 	add.w	r3, r7, #20
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff f81f 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d0e:	e045      	b.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8005d10:	4b2a      	ldr	r3, [pc, #168]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d1c:	d10a      	bne.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	2b80      	cmp	r3, #128	; 0x80
 8005d22:	d107      	bne.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d24:	f107 0308 	add.w	r3, r7, #8
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff f977 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
 8005d32:	e033      	b.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005d34:	4b21      	ldr	r3, [pc, #132]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d10c      	bne.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	2bc0      	cmp	r3, #192	; 0xc0
 8005d44:	d109      	bne.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d46:	4b1d      	ldr	r3, [pc, #116]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	08db      	lsrs	r3, r3, #3
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	4a1b      	ldr	r2, [pc, #108]	; (8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005d52:	fa22 f303 	lsr.w	r3, r2, r3
 8005d56:	637b      	str	r3, [r7, #52]	; 0x34
 8005d58:	e020      	b.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005d5a:	4b18      	ldr	r3, [pc, #96]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d66:	d106      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d6e:	d102      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8005d70:	4b14      	ldr	r3, [pc, #80]	; (8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005d72:	637b      	str	r3, [r7, #52]	; 0x34
 8005d74:	e012      	b.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005d76:	4b11      	ldr	r3, [pc, #68]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d107      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005d8a:	d103      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8005d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d90:	637b      	str	r3, [r7, #52]	; 0x34
 8005d92:	e003      	b.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d98:	f001 bdf5 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005d9c:	f001 bdf3 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005da0:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005da2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005da6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8005daa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005db2:	f7fc fe93 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8005db6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005db8:	f001 bde5 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005dbc:	44020c00 	.word	0x44020c00
 8005dc0:	03d09000 	.word	0x03d09000
 8005dc4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005dc8:	4ba0      	ldr	r3, [pc, #640]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dd4:	d10b      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ddc:	d107      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dde:	f107 0314 	add.w	r3, r7, #20
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fe ffb0 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	637b      	str	r3, [r7, #52]	; 0x34
 8005dec:	e047      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8005dee:	4b97      	ldr	r3, [pc, #604]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005df6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dfa:	d10b      	bne.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e02:	d107      	bne.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e04:	f107 0308 	add.w	r3, r7, #8
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff f907 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	637b      	str	r3, [r7, #52]	; 0x34
 8005e12:	e034      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005e14:	4b8d      	ldr	r3, [pc, #564]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d10d      	bne.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e22:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e26:	d109      	bne.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e28:	4b88      	ldr	r3, [pc, #544]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	08db      	lsrs	r3, r3, #3
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	4a87      	ldr	r2, [pc, #540]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005e34:	fa22 f303 	lsr.w	r3, r2, r3
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
 8005e3a:	e020      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005e3c:	4b83      	ldr	r3, [pc, #524]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e48:	d106      	bne.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e50:	d102      	bne.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8005e52:	4b80      	ldr	r3, [pc, #512]	; (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005e54:	637b      	str	r3, [r7, #52]	; 0x34
 8005e56:	e012      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005e58:	4b7c      	ldr	r3, [pc, #496]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005e5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d107      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005e6c:	d103      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8005e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e72:	637b      	str	r3, [r7, #52]	; 0x34
 8005e74:	e003      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e7a:	f001 bd84 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005e7e:	f001 bd82 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005e82:	4b72      	ldr	r3, [pc, #456]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005e84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005e88:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005e8c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d104      	bne.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e94:	f7fc fe22 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8005e98:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8005e9a:	f001 bd74 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8005e9e:	4b6b      	ldr	r3, [pc, #428]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eaa:	d10b      	bne.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb2:	d107      	bne.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eb4:	f107 0314 	add.w	r3, r7, #20
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe ff45 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec2:	e047      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005ec4:	4b61      	ldr	r3, [pc, #388]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed0:	d10b      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed8:	d107      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eda:	f107 0308 	add.w	r3, r7, #8
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff f89c 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ee8:	e034      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005eea:	4b58      	ldr	r3, [pc, #352]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d10d      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8005ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005efc:	d109      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005efe:	4b53      	ldr	r3, [pc, #332]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	08db      	lsrs	r3, r3, #3
 8005f04:	f003 0303 	and.w	r3, r3, #3
 8005f08:	4a51      	ldr	r2, [pc, #324]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f10:	e020      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8005f12:	4b4e      	ldr	r3, [pc, #312]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f1e:	d106      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f26:	d102      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8005f28:	4b4a      	ldr	r3, [pc, #296]	; (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2c:	e012      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005f2e:	4b47      	ldr	r3, [pc, #284]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d107      	bne.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005f42:	d103      	bne.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8005f44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f48:	637b      	str	r3, [r7, #52]	; 0x34
 8005f4a:	e003      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f50:	f001 bd19 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005f54:	f001 bd17 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8005f58:	4b3c      	ldr	r3, [pc, #240]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005f5e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8005f62:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d104      	bne.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f6a:	f7fc fdb7 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8005f6e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f70:	f001 bd09 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8005f74:	4b35      	ldr	r3, [pc, #212]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f80:	d10b      	bne.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f88:	d107      	bne.n	8005f9a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f8a:	f107 0314 	add.w	r3, r7, #20
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fe feda 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	637b      	str	r3, [r7, #52]	; 0x34
 8005f98:	e047      	b.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8005f9a:	4b2c      	ldr	r3, [pc, #176]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fa6:	d10b      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fae:	d107      	bne.n	8005fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fb0:	f107 0308 	add.w	r3, r7, #8
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff f831 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fbe:	e034      	b.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8005fc0:	4b22      	ldr	r3, [pc, #136]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d10d      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005fd2:	d109      	bne.n	8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005fd4:	4b1d      	ldr	r3, [pc, #116]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	08db      	lsrs	r3, r3, #3
 8005fda:	f003 0303 	and.w	r3, r3, #3
 8005fde:	4a1c      	ldr	r2, [pc, #112]	; (8006050 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fe6:	e020      	b.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8005fe8:	4b18      	ldr	r3, [pc, #96]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ff4:	d106      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ffc:	d102      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8005ffe:	4b15      	ldr	r3, [pc, #84]	; (8006054 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006000:	637b      	str	r3, [r7, #52]	; 0x34
 8006002:	e012      	b.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006004:	4b11      	ldr	r3, [pc, #68]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006006:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b02      	cmp	r3, #2
 8006010:	d107      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006018:	d103      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800601a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
 8006020:	e003      	b.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006026:	f001 bcae 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800602a:	f001 bcac 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800602e:	4b07      	ldr	r3, [pc, #28]	; (800604c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006030:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006034:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8006038:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10b      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006040:	f7fc fd4c 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8006044:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8006046:	f001 bc9e 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800604a:	bf00      	nop
 800604c:	44020c00 	.word	0x44020c00
 8006050:	03d09000 	.word	0x03d09000
 8006054:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8006058:	4ba0      	ldr	r3, [pc, #640]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006064:	d10b      	bne.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800606c:	d107      	bne.n	800607e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800606e:	f107 0314 	add.w	r3, r7, #20
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe fe68 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	637b      	str	r3, [r7, #52]	; 0x34
 800607c:	e047      	b.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800607e:	4b97      	ldr	r3, [pc, #604]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800608a:	d10b      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006092:	d107      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006094:	f107 0308 	add.w	r3, r7, #8
 8006098:	4618      	mov	r0, r3
 800609a:	f7fe ffbf 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	637b      	str	r3, [r7, #52]	; 0x34
 80060a2:	e034      	b.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80060a4:	4b8d      	ldr	r3, [pc, #564]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d10d      	bne.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80060b6:	d109      	bne.n	80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80060b8:	4b88      	ldr	r3, [pc, #544]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	08db      	lsrs	r3, r3, #3
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	4a87      	ldr	r2, [pc, #540]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
 80060c8:	637b      	str	r3, [r7, #52]	; 0x34
 80060ca:	e020      	b.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80060cc:	4b83      	ldr	r3, [pc, #524]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d8:	d106      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060e0:	d102      	bne.n	80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80060e2:	4b80      	ldr	r3, [pc, #512]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80060e4:	637b      	str	r3, [r7, #52]	; 0x34
 80060e6:	e012      	b.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80060e8:	4b7c      	ldr	r3, [pc, #496]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80060ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d107      	bne.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80060fc:	d103      	bne.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80060fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006102:	637b      	str	r3, [r7, #52]	; 0x34
 8006104:	e003      	b.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800610a:	f001 bc3c 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800610e:	f001 bc3a 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8006112:	4b72      	ldr	r3, [pc, #456]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006114:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006118:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800611c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	2b00      	cmp	r3, #0
 8006122:	d104      	bne.n	800612e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006124:	f7fc fcda 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8006128:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800612a:	f001 bc2c 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800612e:	4b6b      	ldr	r3, [pc, #428]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800613a:	d10b      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800613c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006142:	d107      	bne.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006144:	f107 0314 	add.w	r3, r7, #20
 8006148:	4618      	mov	r0, r3
 800614a:	f7fe fdfd 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
 8006152:	e047      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8006154:	4b61      	ldr	r3, [pc, #388]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800615c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006160:	d10b      	bne.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006168:	d107      	bne.n	800617a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800616a:	f107 0308 	add.w	r3, r7, #8
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe ff54 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	637b      	str	r3, [r7, #52]	; 0x34
 8006178:	e034      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800617a:	4b58      	ldr	r3, [pc, #352]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b02      	cmp	r3, #2
 8006184:	d10d      	bne.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800618c:	d109      	bne.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800618e:	4b53      	ldr	r3, [pc, #332]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	08db      	lsrs	r3, r3, #3
 8006194:	f003 0303 	and.w	r3, r3, #3
 8006198:	4a51      	ldr	r2, [pc, #324]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800619a:	fa22 f303 	lsr.w	r3, r2, r3
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
 80061a0:	e020      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80061a2:	4b4e      	ldr	r3, [pc, #312]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ae:	d106      	bne.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061b6:	d102      	bne.n	80061be <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80061b8:	4b4a      	ldr	r3, [pc, #296]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80061ba:	637b      	str	r3, [r7, #52]	; 0x34
 80061bc:	e012      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80061be:	4b47      	ldr	r3, [pc, #284]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80061c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d107      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80061d2:	d103      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80061d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
 80061da:	e003      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061e0:	f001 bbd1 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80061e4:	f001 bbcf 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80061e8:	4b3c      	ldr	r3, [pc, #240]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80061ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80061ee:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80061f2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80061f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d104      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80061fa:	f7fc fc6f 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 80061fe:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8006200:	f001 bbc1 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8006204:	4b35      	ldr	r3, [pc, #212]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800620c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006210:	d10b      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006218:	d107      	bne.n	800622a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800621a:	f107 0314 	add.w	r3, r7, #20
 800621e:	4618      	mov	r0, r3
 8006220:	f7fe fd92 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	637b      	str	r3, [r7, #52]	; 0x34
 8006228:	e047      	b.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800622a:	4b2c      	ldr	r3, [pc, #176]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006236:	d10b      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800623e:	d107      	bne.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006240:	f107 0308 	add.w	r3, r7, #8
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe fee9 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	637b      	str	r3, [r7, #52]	; 0x34
 800624e:	e034      	b.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8006250:	4b22      	ldr	r3, [pc, #136]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b02      	cmp	r3, #2
 800625a:	d10d      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006262:	d109      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006264:	4b1d      	ldr	r3, [pc, #116]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	08db      	lsrs	r3, r3, #3
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	4a1c      	ldr	r2, [pc, #112]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006270:	fa22 f303 	lsr.w	r3, r2, r3
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
 8006276:	e020      	b.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8006278:	4b18      	ldr	r3, [pc, #96]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006284:	d106      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800628c:	d102      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800628e:	4b15      	ldr	r3, [pc, #84]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
 8006292:	e012      	b.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8006294:	4b11      	ldr	r3, [pc, #68]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d107      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80062a8:	d103      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80062aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ae:	637b      	str	r3, [r7, #52]	; 0x34
 80062b0:	e003      	b.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062b6:	f001 bb66 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80062ba:	f001 bb64 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80062be:	4b07      	ldr	r3, [pc, #28]	; (80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80062c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80062c4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80062c8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10b      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80062d0:	f7fc fc04 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 80062d4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80062d6:	f001 bb56 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80062da:	bf00      	nop
 80062dc:	44020c00 	.word	0x44020c00
 80062e0:	03d09000 	.word	0x03d09000
 80062e4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80062e8:	4ba1      	ldr	r3, [pc, #644]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062f4:	d10b      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062fc:	d107      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062fe:	f107 0314 	add.w	r3, r7, #20
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe fd20 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	637b      	str	r3, [r7, #52]	; 0x34
 800630c:	e047      	b.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800630e:	4b98      	ldr	r3, [pc, #608]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800631a:	d10b      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006322:	d107      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006324:	f107 0308 	add.w	r3, r7, #8
 8006328:	4618      	mov	r0, r3
 800632a:	f7fe fe77 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
 8006332:	e034      	b.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8006334:	4b8e      	ldr	r3, [pc, #568]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b02      	cmp	r3, #2
 800633e:	d10d      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006346:	d109      	bne.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006348:	4b89      	ldr	r3, [pc, #548]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	08db      	lsrs	r3, r3, #3
 800634e:	f003 0303 	and.w	r3, r3, #3
 8006352:	4a88      	ldr	r2, [pc, #544]	; (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006354:	fa22 f303 	lsr.w	r3, r2, r3
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
 800635a:	e020      	b.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800635c:	4b84      	ldr	r3, [pc, #528]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006368:	d106      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800636a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006370:	d102      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8006372:	4b81      	ldr	r3, [pc, #516]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006374:	637b      	str	r3, [r7, #52]	; 0x34
 8006376:	e012      	b.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8006378:	4b7d      	ldr	r3, [pc, #500]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800637a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b02      	cmp	r3, #2
 8006384:	d107      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800638c:	d103      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800638e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006392:	637b      	str	r3, [r7, #52]	; 0x34
 8006394:	e003      	b.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800639a:	f001 baf4 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800639e:	f001 baf2 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80063a2:	4b73      	ldr	r3, [pc, #460]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80063a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80063b4:	f7fc fb92 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 80063b8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80063ba:	f001 bae4 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80063be:	4b6c      	ldr	r3, [pc, #432]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ca:	d10a      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80063cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d107      	bne.n	80063e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063d2:	f107 0314 	add.w	r3, r7, #20
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe fcb6 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	637b      	str	r3, [r7, #52]	; 0x34
 80063e0:	e043      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80063e2:	4b63      	ldr	r3, [pc, #396]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ee:	d10a      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d107      	bne.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063f6:	f107 0308 	add.w	r3, r7, #8
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fe0e 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	637b      	str	r3, [r7, #52]	; 0x34
 8006404:	e031      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006406:	4b5a      	ldr	r3, [pc, #360]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0302 	and.w	r3, r3, #2
 800640e:	2b02      	cmp	r3, #2
 8006410:	d10c      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8006412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006414:	2b03      	cmp	r3, #3
 8006416:	d109      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006418:	4b55      	ldr	r3, [pc, #340]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	08db      	lsrs	r3, r3, #3
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	4a54      	ldr	r2, [pc, #336]	; (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
 8006428:	637b      	str	r3, [r7, #52]	; 0x34
 800642a:	e01e      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800642c:	4b50      	ldr	r3, [pc, #320]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006438:	d105      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	2b04      	cmp	r3, #4
 800643e:	d102      	bne.n	8006446 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8006440:	4b4d      	ldr	r3, [pc, #308]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006442:	637b      	str	r3, [r7, #52]	; 0x34
 8006444:	e011      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8006446:	4b4a      	ldr	r3, [pc, #296]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006448:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	2b02      	cmp	r3, #2
 8006452:	d106      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	2b05      	cmp	r3, #5
 8006458:	d103      	bne.n	8006462 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800645a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800645e:	637b      	str	r3, [r7, #52]	; 0x34
 8006460:	e003      	b.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8006462:	2300      	movs	r3, #0
 8006464:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006466:	f001 ba8e 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800646a:	f001 ba8c 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800646e:	4b40      	ldr	r3, [pc, #256]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006470:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006474:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006478:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	2b00      	cmp	r3, #0
 800647e:	d104      	bne.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006480:	f7fc fb2c 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8006484:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8006486:	f001 ba7e 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800648a:	4b39      	ldr	r3, [pc, #228]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006496:	d10a      	bne.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	2b10      	cmp	r3, #16
 800649c:	d107      	bne.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800649e:	f107 0314 	add.w	r3, r7, #20
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe fc50 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	637b      	str	r3, [r7, #52]	; 0x34
 80064ac:	e043      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80064ae:	4b30      	ldr	r3, [pc, #192]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ba:	d10a      	bne.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d107      	bne.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064c2:	f107 0308 	add.w	r3, r7, #8
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fda8 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
 80064d0:	e031      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80064d2:	4b27      	ldr	r3, [pc, #156]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d10c      	bne.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	2b30      	cmp	r3, #48	; 0x30
 80064e2:	d109      	bne.n	80064f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064e4:	4b22      	ldr	r3, [pc, #136]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	08db      	lsrs	r3, r3, #3
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	4a21      	ldr	r2, [pc, #132]	; (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80064f0:	fa22 f303 	lsr.w	r3, r2, r3
 80064f4:	637b      	str	r3, [r7, #52]	; 0x34
 80064f6:	e01e      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80064f8:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006504:	d105      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006508:	2b40      	cmp	r3, #64	; 0x40
 800650a:	d102      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800650c:	4b1a      	ldr	r3, [pc, #104]	; (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800650e:	637b      	str	r3, [r7, #52]	; 0x34
 8006510:	e011      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006512:	4b17      	ldr	r3, [pc, #92]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006514:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b02      	cmp	r3, #2
 800651e:	d106      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	2b50      	cmp	r3, #80	; 0x50
 8006524:	d103      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8006526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800652a:	637b      	str	r3, [r7, #52]	; 0x34
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006532:	f001 ba28 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006536:	f001 ba26 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800653a:	4b0d      	ldr	r3, [pc, #52]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800653c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006540:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006544:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	2b00      	cmp	r3, #0
 800654a:	d104      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800654c:	f7fc faf2 	bl	8002b34 <HAL_RCC_GetPCLK3Freq>
 8006550:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006552:	f001 ba18 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800655c:	d10e      	bne.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800655e:	f107 0314 	add.w	r3, r7, #20
 8006562:	4618      	mov	r0, r3
 8006564:	f7fe fbf0 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800656c:	f001 ba0b 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006570:	44020c00 	.word	0x44020c00
 8006574:	03d09000 	.word	0x03d09000
 8006578:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006582:	d108      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006584:	f107 0308 	add.w	r3, r7, #8
 8006588:	4618      	mov	r0, r3
 800658a:	f7fe fd47 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006592:	f001 b9f8 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006596:	4ba4      	ldr	r3, [pc, #656]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d10d      	bne.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80065a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80065a8:	d109      	bne.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065aa:	4b9f      	ldr	r3, [pc, #636]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	08db      	lsrs	r3, r3, #3
 80065b0:	f003 0303 	and.w	r3, r3, #3
 80065b4:	4a9d      	ldr	r2, [pc, #628]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80065b6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ba:	637b      	str	r3, [r7, #52]	; 0x34
 80065bc:	e020      	b.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80065be:	4b9a      	ldr	r3, [pc, #616]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065ca:	d106      	bne.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065d2:	d102      	bne.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80065d4:	4b96      	ldr	r3, [pc, #600]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80065d6:	637b      	str	r3, [r7, #52]	; 0x34
 80065d8:	e012      	b.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80065da:	4b93      	ldr	r3, [pc, #588]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80065dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d107      	bne.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80065ee:	d103      	bne.n	80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80065f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065f4:	637b      	str	r3, [r7, #52]	; 0x34
 80065f6:	e003      	b.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065fc:	f001 b9c3 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006600:	f001 b9c1 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006604:	4b88      	ldr	r3, [pc, #544]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	2b00      	cmp	r3, #0
 8006614:	d104      	bne.n	8006620 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006616:	f7fc fa45 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 800661a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800661c:	f001 b9b3 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006622:	2b01      	cmp	r3, #1
 8006624:	d104      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006626:	f7fc f911 	bl	800284c <HAL_RCC_GetSysClockFreq>
 800662a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800662c:	f001 b9ab 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	2b02      	cmp	r3, #2
 8006634:	d108      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006636:	f107 0314 	add.w	r3, r7, #20
 800663a:	4618      	mov	r0, r3
 800663c:	f7fe fb84 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006644:	f001 b99f 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006648:	4b77      	ldr	r3, [pc, #476]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006654:	d105      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	2b03      	cmp	r3, #3
 800665a:	d102      	bne.n	8006662 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800665c:	4b75      	ldr	r3, [pc, #468]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
 8006660:	e023      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006662:	4b71      	ldr	r3, [pc, #452]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b02      	cmp	r3, #2
 800666c:	d10c      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	2b04      	cmp	r3, #4
 8006672:	d109      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006674:	4b6c      	ldr	r3, [pc, #432]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	08db      	lsrs	r3, r3, #3
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	4a6b      	ldr	r2, [pc, #428]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006680:	fa22 f303 	lsr.w	r3, r2, r3
 8006684:	637b      	str	r3, [r7, #52]	; 0x34
 8006686:	e010      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006688:	4b67      	ldr	r3, [pc, #412]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006694:	d105      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	2b05      	cmp	r3, #5
 800669a:	d102      	bne.n	80066a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800669c:	4b64      	ldr	r3, [pc, #400]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800669e:	637b      	str	r3, [r7, #52]	; 0x34
 80066a0:	e003      	b.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066a6:	f001 b96e 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066aa:	f001 b96c 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80066ae:	4b5e      	ldr	r3, [pc, #376]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80066b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066b4:	f003 0308 	and.w	r3, r3, #8
 80066b8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80066ba:	4b5b      	ldr	r3, [pc, #364]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80066bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d106      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d103      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80066ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066d2:	637b      	str	r3, [r7, #52]	; 0x34
 80066d4:	e012      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80066d6:	4b54      	ldr	r3, [pc, #336]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80066d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066e4:	d106      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d103      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80066ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80066f0:	637b      	str	r3, [r7, #52]	; 0x34
 80066f2:	e003      	b.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 80066f8:	f001 b945 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066fc:	f001 b943 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006700:	4b49      	ldr	r3, [pc, #292]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006702:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006706:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800670a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	2b00      	cmp	r3, #0
 8006710:	d104      	bne.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006712:	f7fc f9e3 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8006716:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006718:	f001 b935 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006722:	d108      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006724:	f107 0308 	add.w	r3, r7, #8
 8006728:	4618      	mov	r0, r3
 800672a:	f7fe fc77 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006732:	f001 b928 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006736:	4b3c      	ldr	r3, [pc, #240]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b02      	cmp	r3, #2
 8006740:	d10d      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006744:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006748:	d109      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800674a:	4b37      	ldr	r3, [pc, #220]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	08db      	lsrs	r3, r3, #3
 8006750:	f003 0303 	and.w	r3, r3, #3
 8006754:	4a35      	ldr	r2, [pc, #212]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006756:	fa22 f303 	lsr.w	r3, r2, r3
 800675a:	637b      	str	r3, [r7, #52]	; 0x34
 800675c:	e011      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800675e:	4b32      	ldr	r3, [pc, #200]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800676a:	d106      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006772:	d102      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006774:	4b2e      	ldr	r3, [pc, #184]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
 8006778:	e003      	b.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800677e:	f001 b902 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006782:	f001 b900 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006786:	4b28      	ldr	r3, [pc, #160]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006788:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800678c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006790:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	2b00      	cmp	r3, #0
 8006796:	d104      	bne.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006798:	f7fc f9a0 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 800679c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800679e:	f001 b8f2 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067a8:	d108      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067aa:	f107 0308 	add.w	r3, r7, #8
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fc34 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067b8:	f001 b8e5 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80067bc:	4b1a      	ldr	r3, [pc, #104]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d10d      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80067c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067ce:	d109      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067d0:	4b15      	ldr	r3, [pc, #84]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	08db      	lsrs	r3, r3, #3
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	4a14      	ldr	r2, [pc, #80]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
 80067e0:	637b      	str	r3, [r7, #52]	; 0x34
 80067e2:	e011      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80067e4:	4b10      	ldr	r3, [pc, #64]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f0:	d106      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80067f8:	d102      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80067fa:	4b0d      	ldr	r3, [pc, #52]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80067fc:	637b      	str	r3, [r7, #52]	; 0x34
 80067fe:	e003      	b.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006804:	f001 b8bf 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006808:	f001 b8bd 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800680c:	4b06      	ldr	r3, [pc, #24]	; (8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800680e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006812:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006816:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10c      	bne.n	8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800681e:	f7fc f989 	bl	8002b34 <HAL_RCC_GetPCLK3Freq>
 8006822:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006824:	f001 b8af 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006828:	44020c00 	.word	0x44020c00
 800682c:	03d09000 	.word	0x03d09000
 8006830:	003d0900 	.word	0x003d0900
 8006834:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800683e:	d108      	bne.n	8006852 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006840:	f107 0308 	add.w	r3, r7, #8
 8006844:	4618      	mov	r0, r3
 8006846:	f7fe fbe9 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800684e:	f001 b89a 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006852:	4b9f      	ldr	r3, [pc, #636]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b02      	cmp	r3, #2
 800685c:	d10d      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006864:	d109      	bne.n	800687a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006866:	4b9a      	ldr	r3, [pc, #616]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	08db      	lsrs	r3, r3, #3
 800686c:	f003 0303 	and.w	r3, r3, #3
 8006870:	4a98      	ldr	r2, [pc, #608]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006872:	fa22 f303 	lsr.w	r3, r2, r3
 8006876:	637b      	str	r3, [r7, #52]	; 0x34
 8006878:	e011      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800687a:	4b95      	ldr	r3, [pc, #596]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006886:	d106      	bne.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800688e:	d102      	bne.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006890:	4b91      	ldr	r3, [pc, #580]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006892:	637b      	str	r3, [r7, #52]	; 0x34
 8006894:	e003      	b.n	800689e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800689a:	f001 b874 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800689e:	f001 b872 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80068a2:	4b8b      	ldr	r3, [pc, #556]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80068a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80068a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80068ac:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d104      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80068b4:	f7fc f93e 	bl	8002b34 <HAL_RCC_GetPCLK3Freq>
 80068b8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80068ba:	f001 b864 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068c4:	d108      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068c6:	f107 0308 	add.w	r3, r7, #8
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe fba6 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068d4:	f001 b857 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80068d8:	4b7d      	ldr	r3, [pc, #500]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d10d      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068ea:	d109      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068ec:	4b78      	ldr	r3, [pc, #480]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	08db      	lsrs	r3, r3, #3
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	4a77      	ldr	r2, [pc, #476]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80068f8:	fa22 f303 	lsr.w	r3, r2, r3
 80068fc:	637b      	str	r3, [r7, #52]	; 0x34
 80068fe:	e011      	b.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006900:	4b73      	ldr	r3, [pc, #460]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800690c:	d106      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006914:	d102      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006916:	4b70      	ldr	r3, [pc, #448]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006918:	637b      	str	r3, [r7, #52]	; 0x34
 800691a:	e003      	b.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006920:	f001 b831 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006924:	f001 b82f 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006928:	4b69      	ldr	r3, [pc, #420]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800692a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800692e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006932:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	2b00      	cmp	r3, #0
 8006938:	d104      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800693a:	f7fc f8cf 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 800693e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006940:	f001 b821 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800694a:	d108      	bne.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800694c:	f107 0308 	add.w	r3, r7, #8
 8006950:	4618      	mov	r0, r3
 8006952:	f7fe fb63 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800695a:	f001 b814 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800695e:	4b5c      	ldr	r3, [pc, #368]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b02      	cmp	r3, #2
 8006968:	d10e      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006970:	d10a      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006972:	4b57      	ldr	r3, [pc, #348]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	08db      	lsrs	r3, r3, #3
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	4a55      	ldr	r2, [pc, #340]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800697e:	fa22 f303 	lsr.w	r3, r2, r3
 8006982:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006984:	f000 bfff 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800698c:	f000 bffb 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006990:	4b4f      	ldr	r3, [pc, #316]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006992:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800699a:	633b      	str	r3, [r7, #48]	; 0x30
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80069a2:	d056      	beq.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80069aa:	f200 808b 	bhi.w	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069b4:	d03e      	beq.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069bc:	f200 8082 	bhi.w	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80069c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069c6:	d027      	beq.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069ce:	d879      	bhi.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d6:	d017      	beq.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069de:	d871      	bhi.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d004      	beq.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ec:	d004      	beq.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 80069ee:	e069      	b.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80069f0:	f7fc f8a0 	bl	8002b34 <HAL_RCC_GetPCLK3Freq>
 80069f4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80069f6:	e068      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069f8:	f107 0314 	add.w	r3, r7, #20
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fe f9a3 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a06:	e060      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a08:	f107 0308 	add.w	r3, r7, #8
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe fb05 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a16:	e058      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006a18:	4b2d      	ldr	r3, [pc, #180]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d103      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8006a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a2a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006a2c:	e04d      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a32:	e04a      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006a34:	4b26      	ldr	r3, [pc, #152]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a42:	d103      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8006a44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006a4a:	e03e      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a50:	e03b      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a52:	4b1f      	ldr	r3, [pc, #124]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a58:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a5e:	4b1c      	ldr	r3, [pc, #112]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0302 	and.w	r3, r3, #2
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d10c      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8006a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d109      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a70:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	08db      	lsrs	r3, r3, #3
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	4a16      	ldr	r2, [pc, #88]	; (8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a80:	637b      	str	r3, [r7, #52]	; 0x34
 8006a82:	e01e      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a84:	4b12      	ldr	r3, [pc, #72]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a90:	d106      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8006a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a98:	d102      	bne.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006a9a:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a9e:	e010      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aac:	d106      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ab4:	d102      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006ab6:	4b09      	ldr	r3, [pc, #36]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8006ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aba:	e002      	b.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006abc:	2300      	movs	r3, #0
 8006abe:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006ac0:	e003      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8006ac2:	e002      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ac8:	bf00      	nop
          }
        }
        break;
 8006aca:	f000 bf5c 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ace:	bf00      	nop
 8006ad0:	44020c00 	.word	0x44020c00
 8006ad4:	03d09000 	.word	0x03d09000
 8006ad8:	003d0900 	.word	0x003d0900
 8006adc:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006ae0:	4b9e      	ldr	r3, [pc, #632]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006ae2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006ae6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006aea:	633b      	str	r3, [r7, #48]	; 0x30
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006af2:	d056      	beq.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006afa:	f200 808b 	bhi.w	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b04:	d03e      	beq.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b0c:	f200 8082 	bhi.w	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b16:	d027      	beq.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b1e:	d879      	bhi.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b26:	d017      	beq.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b2e:	d871      	bhi.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b3c:	d004      	beq.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8006b3e:	e069      	b.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006b40:	f7fb ffcc 	bl	8002adc <HAL_RCC_GetPCLK1Freq>
 8006b44:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006b46:	e068      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b48:	f107 0314 	add.w	r3, r7, #20
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fe f8fb 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b56:	e060      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b58:	f107 0308 	add.w	r3, r7, #8
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe fa5d 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b66:	e058      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b68:	4b7c      	ldr	r3, [pc, #496]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006b6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d103      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8006b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b7a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b7c:	e04d      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b82:	e04a      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006b84:	4b75      	ldr	r3, [pc, #468]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b92:	d103      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8006b94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b9a:	e03e      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ba0:	e03b      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ba2:	4b6e      	ldr	r3, [pc, #440]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ba8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006bac:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bae:	4b6b      	ldr	r3, [pc, #428]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d10c      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8006bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d109      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bc0:	4b66      	ldr	r3, [pc, #408]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	08db      	lsrs	r3, r3, #3
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	4a65      	ldr	r2, [pc, #404]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd2:	e01e      	b.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bd4:	4b61      	ldr	r3, [pc, #388]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be0:	d106      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be8:	d102      	bne.n	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006bea:	4b5e      	ldr	r3, [pc, #376]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8006bec:	637b      	str	r3, [r7, #52]	; 0x34
 8006bee:	e010      	b.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bf0:	4b5a      	ldr	r3, [pc, #360]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bfc:	d106      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8006bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c04:	d102      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006c06:	4b58      	ldr	r3, [pc, #352]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
 8006c0a:	e002      	b.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006c10:	e003      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8006c12:	e002      	b.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c18:	bf00      	nop
          }
        }
        break;
 8006c1a:	f000 beb4 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8006c1e:	4b4f      	ldr	r3, [pc, #316]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006c20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006c24:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006c28:	633b      	str	r3, [r7, #48]	; 0x30
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c30:	d056      	beq.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c38:	f200 808b 	bhi.w	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c42:	d03e      	beq.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c4a:	f200 8082 	bhi.w	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c54:	d027      	beq.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c5c:	d879      	bhi.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c64:	d017      	beq.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c6c:	d871      	bhi.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8006c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c7a:	d004      	beq.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8006c7c:	e069      	b.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006c7e:	f7fb ff59 	bl	8002b34 <HAL_RCC_GetPCLK3Freq>
 8006c82:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006c84:	e068      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c86:	f107 0314 	add.w	r3, r7, #20
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe f85c 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c94:	e060      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c96:	f107 0308 	add.w	r3, r7, #8
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe f9be 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ca4:	e058      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ca6:	4b2d      	ldr	r3, [pc, #180]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006ca8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cac:	f003 0302 	and.w	r3, r3, #2
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d103      	bne.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8006cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cb8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006cba:	e04d      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006cc0:	e04a      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006cc2:	4b26      	ldr	r3, [pc, #152]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ccc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cd0:	d103      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8006cd2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006cd6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006cd8:	e03e      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006cde:	e03b      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ce0:	4b1e      	ldr	r3, [pc, #120]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ce6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006cea:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cec:	4b1b      	ldr	r3, [pc, #108]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d10c      	bne.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d109      	bne.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cfe:	4b17      	ldr	r3, [pc, #92]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	08db      	lsrs	r3, r3, #3
 8006d04:	f003 0303 	and.w	r3, r3, #3
 8006d08:	4a15      	ldr	r2, [pc, #84]	; (8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d10:	e01e      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d12:	4b12      	ldr	r3, [pc, #72]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1e:	d106      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d26:	d102      	bne.n	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006d28:	4b0e      	ldr	r3, [pc, #56]	; (8006d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8006d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d2c:	e010      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d3a:	d106      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8006d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d42:	d102      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006d44:	4b08      	ldr	r3, [pc, #32]	; (8006d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
 8006d48:	e002      	b.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006d4e:	e003      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8006d50:	e002      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d56:	bf00      	nop
          }
        }
        break;
 8006d58:	f000 be15 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d5c:	44020c00 	.word	0x44020c00
 8006d60:	03d09000 	.word	0x03d09000
 8006d64:	003d0900 	.word	0x003d0900
 8006d68:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8006d6c:	4b9e      	ldr	r3, [pc, #632]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006d6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006d72:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8006d76:	633b      	str	r3, [r7, #48]	; 0x30
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006d7e:	d056      	beq.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006d86:	f200 808b 	bhi.w	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d90:	d03e      	beq.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d98:	f200 8082 	bhi.w	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006da2:	d027      	beq.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006daa:	d879      	bhi.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006db2:	d017      	beq.n	8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dba:	d871      	bhi.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d004      	beq.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dc8:	d004      	beq.n	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8006dca:	e069      	b.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006dcc:	f7fb feb2 	bl	8002b34 <HAL_RCC_GetPCLK3Freq>
 8006dd0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006dd2:	e068      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dd4:	f107 0314 	add.w	r3, r7, #20
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7fd ffb5 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006de2:	e060      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006de4:	f107 0308 	add.w	r3, r7, #8
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fe f917 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006df2:	e058      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006df4:	4b7c      	ldr	r3, [pc, #496]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d103      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8006e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006e08:	e04d      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e0e:	e04a      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006e10:	4b75      	ldr	r3, [pc, #468]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e1e:	d103      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8006e20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006e24:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006e26:	e03e      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e2c:	e03b      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e2e:	4b6e      	ldr	r3, [pc, #440]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e34:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e3a:	4b6b      	ldr	r3, [pc, #428]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d10c      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d109      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e4c:	4b66      	ldr	r3, [pc, #408]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	08db      	lsrs	r3, r3, #3
 8006e52:	f003 0303 	and.w	r3, r3, #3
 8006e56:	4a65      	ldr	r2, [pc, #404]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006e58:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e5e:	e01e      	b.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e60:	4b61      	ldr	r3, [pc, #388]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e6c:	d106      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8006e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e74:	d102      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e76:	4b5e      	ldr	r3, [pc, #376]	; (8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006e78:	637b      	str	r3, [r7, #52]	; 0x34
 8006e7a:	e010      	b.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e7c:	4b5a      	ldr	r3, [pc, #360]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e88:	d106      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8006e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e90:	d102      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e92:	4b58      	ldr	r3, [pc, #352]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
 8006e96:	e002      	b.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006e9c:	e003      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8006e9e:	e002      	b.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ea4:	bf00      	nop
          }
        }
        break;
 8006ea6:	f000 bd6e 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8006eaa:	4b4f      	ldr	r3, [pc, #316]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006eac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006eb0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006eb4:	633b      	str	r3, [r7, #48]	; 0x30
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006ebc:	d056      	beq.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006ec4:	f200 808b 	bhi.w	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ece:	d03e      	beq.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ed6:	f200 8082 	bhi.w	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006edc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ee0:	d027      	beq.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ee8:	d879      	bhi.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ef0:	d017      	beq.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ef8:	d871      	bhi.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8006f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f06:	d004      	beq.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8006f08:	e069      	b.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006f0a:	f7fb fe13 	bl	8002b34 <HAL_RCC_GetPCLK3Freq>
 8006f0e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006f10:	e068      	b.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f12:	f107 0314 	add.w	r3, r7, #20
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fd ff16 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f20:	e060      	b.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f22:	f107 0308 	add.w	r3, r7, #8
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe f878 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f30:	e058      	b.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f32:	4b2d      	ldr	r3, [pc, #180]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d103      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8006f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f44:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f46:	e04d      	b.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f4c:	e04a      	b.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006f4e:	4b26      	ldr	r3, [pc, #152]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f5c:	d103      	bne.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8006f5e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f64:	e03e      	b.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8006f66:	2300      	movs	r3, #0
 8006f68:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f6a:	e03b      	b.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f6c:	4b1e      	ldr	r3, [pc, #120]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f72:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006f76:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f78:	4b1b      	ldr	r3, [pc, #108]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d10c      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d109      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f8a:	4b17      	ldr	r3, [pc, #92]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	08db      	lsrs	r3, r3, #3
 8006f90:	f003 0303 	and.w	r3, r3, #3
 8006f94:	4a15      	ldr	r2, [pc, #84]	; (8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006f96:	fa22 f303 	lsr.w	r3, r2, r3
 8006f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9c:	e01e      	b.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f9e:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006faa:	d106      	bne.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb2:	d102      	bne.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006fb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb8:	e010      	b.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fba:	4b0b      	ldr	r3, [pc, #44]	; (8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fc6:	d106      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8006fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fce:	d102      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006fd0:	4b08      	ldr	r3, [pc, #32]	; (8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd4:	e002      	b.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006fda:	e003      	b.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8006fdc:	e002      	b.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fe2:	bf00      	nop
          }
        }
        break;
 8006fe4:	f000 bccf 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006fe8:	44020c00 	.word	0x44020c00
 8006fec:	03d09000 	.word	0x03d09000
 8006ff0:	003d0900 	.word	0x003d0900
 8006ff4:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8006ff8:	4b9e      	ldr	r3, [pc, #632]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006ffa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006ffe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007002:	633b      	str	r3, [r7, #48]	; 0x30
 8007004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007006:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800700a:	d056      	beq.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800700c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007012:	f200 808b 	bhi.w	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701c:	d03e      	beq.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007024:	f200 8082 	bhi.w	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800702e:	d027      	beq.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007036:	d879      	bhi.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800703e:	d017      	beq.n	8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8007040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007046:	d871      	bhi.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	2b00      	cmp	r3, #0
 800704c:	d004      	beq.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007054:	d004      	beq.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8007056:	e069      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007058:	f7fb fd6c 	bl	8002b34 <HAL_RCC_GetPCLK3Freq>
 800705c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800705e:	e068      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007060:	f107 0314 	add.w	r3, r7, #20
 8007064:	4618      	mov	r0, r3
 8007066:	f7fd fe6f 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800706e:	e060      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007070:	f107 0308 	add.w	r3, r7, #8
 8007074:	4618      	mov	r0, r3
 8007076:	f7fd ffd1 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800707e:	e058      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007080:	4b7c      	ldr	r3, [pc, #496]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b02      	cmp	r3, #2
 800708c:	d103      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800708e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007092:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007094:	e04d      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800709a:	e04a      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800709c:	4b75      	ldr	r3, [pc, #468]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800709e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070aa:	d103      	bne.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80070ac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80070b0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070b2:	e03e      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070b8:	e03b      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070ba:	4b6e      	ldr	r3, [pc, #440]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80070bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070c0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80070c4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070c6:	4b6b      	ldr	r3, [pc, #428]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d10c      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d109      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070d8:	4b66      	ldr	r3, [pc, #408]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	08db      	lsrs	r3, r3, #3
 80070de:	f003 0303 	and.w	r3, r3, #3
 80070e2:	4a65      	ldr	r2, [pc, #404]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80070e4:	fa22 f303 	lsr.w	r3, r2, r3
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ea:	e01e      	b.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070ec:	4b61      	ldr	r3, [pc, #388]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070f8:	d106      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007100:	d102      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007102:	4b5e      	ldr	r3, [pc, #376]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007104:	637b      	str	r3, [r7, #52]	; 0x34
 8007106:	e010      	b.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007108:	4b5a      	ldr	r3, [pc, #360]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007114:	d106      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800711c:	d102      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800711e:	4b58      	ldr	r3, [pc, #352]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007120:	637b      	str	r3, [r7, #52]	; 0x34
 8007122:	e002      	b.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007128:	e003      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800712a:	e002      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007130:	bf00      	nop
          }
        }
        break;
 8007132:	f000 bc28 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007136:	4b4f      	ldr	r3, [pc, #316]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800713c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007140:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007142:	4b4c      	ldr	r3, [pc, #304]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800714a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800714e:	d106      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	2b00      	cmp	r3, #0
 8007154:	d103      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8007156:	4b4a      	ldr	r3, [pc, #296]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007158:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800715a:	f000 bc14 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007164:	d108      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007166:	f107 0320 	add.w	r3, r7, #32
 800716a:	4618      	mov	r0, r3
 800716c:	f7fd fc82 	bl	8004a74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007172:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007174:	f000 bc07 	b.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800717e:	d107      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007180:	f107 0314 	add.w	r3, r7, #20
 8007184:	4618      	mov	r0, r3
 8007186:	f7fd fddf 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800718e:	e3fa      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007194:	e3f7      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007196:	4b37      	ldr	r3, [pc, #220]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800719c:	f003 0307 	and.w	r3, r3, #7
 80071a0:	633b      	str	r3, [r7, #48]	; 0x30
 80071a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d861      	bhi.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80071a8:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80071aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ae:	bf00      	nop
 80071b0:	080071c5 	.word	0x080071c5
 80071b4:	080071d5 	.word	0x080071d5
 80071b8:	080071e5 	.word	0x080071e5
 80071bc:	080071f5 	.word	0x080071f5
 80071c0:	080071fb 	.word	0x080071fb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071c4:	f107 0320 	add.w	r3, r7, #32
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fd fc53 	bl	8004a74 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071d2:	e04e      	b.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071d4:	f107 0314 	add.w	r3, r7, #20
 80071d8:	4618      	mov	r0, r3
 80071da:	f7fd fdb5 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071e2:	e046      	b.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071e4:	f107 0308 	add.w	r3, r7, #8
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fd ff17 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071f2:	e03e      	b.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80071f4:	4b23      	ldr	r3, [pc, #140]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80071f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071f8:	e03b      	b.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071fa:	4b1e      	ldr	r3, [pc, #120]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80071fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007200:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007206:	4b1b      	ldr	r3, [pc, #108]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b02      	cmp	r3, #2
 8007210:	d10c      	bne.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d109      	bne.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007218:	4b16      	ldr	r3, [pc, #88]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	08db      	lsrs	r3, r3, #3
 800721e:	f003 0303 	and.w	r3, r3, #3
 8007222:	4a15      	ldr	r2, [pc, #84]	; (8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8007224:	fa22 f303 	lsr.w	r3, r2, r3
 8007228:	637b      	str	r3, [r7, #52]	; 0x34
 800722a:	e01e      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800722c:	4b11      	ldr	r3, [pc, #68]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007238:	d106      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007240:	d102      	bne.n	8007248 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007242:	4b0e      	ldr	r3, [pc, #56]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007244:	637b      	str	r3, [r7, #52]	; 0x34
 8007246:	e010      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007248:	4b0a      	ldr	r3, [pc, #40]	; (8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007250:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007254:	d106      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8007256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800725c:	d102      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800725e:	4b08      	ldr	r3, [pc, #32]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
 8007262:	e002      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007264:	2300      	movs	r3, #0
 8007266:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007268:	e003      	b.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800726a:	e002      	b.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800726c:	2300      	movs	r3, #0
 800726e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007270:	bf00      	nop
          }
        }
        break;
 8007272:	e388      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007274:	44020c00 	.word	0x44020c00
 8007278:	03d09000 	.word	0x03d09000
 800727c:	003d0900 	.word	0x003d0900
 8007280:	017d7840 	.word	0x017d7840
 8007284:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007288:	4ba9      	ldr	r3, [pc, #676]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800728a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800728e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007292:	633b      	str	r3, [r7, #48]	; 0x30
 8007294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007296:	2b20      	cmp	r3, #32
 8007298:	f200 809a 	bhi.w	80073d0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800729c:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800729e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a2:	bf00      	nop
 80072a4:	08007329 	.word	0x08007329
 80072a8:	080073d1 	.word	0x080073d1
 80072ac:	080073d1 	.word	0x080073d1
 80072b0:	080073d1 	.word	0x080073d1
 80072b4:	080073d1 	.word	0x080073d1
 80072b8:	080073d1 	.word	0x080073d1
 80072bc:	080073d1 	.word	0x080073d1
 80072c0:	080073d1 	.word	0x080073d1
 80072c4:	08007339 	.word	0x08007339
 80072c8:	080073d1 	.word	0x080073d1
 80072cc:	080073d1 	.word	0x080073d1
 80072d0:	080073d1 	.word	0x080073d1
 80072d4:	080073d1 	.word	0x080073d1
 80072d8:	080073d1 	.word	0x080073d1
 80072dc:	080073d1 	.word	0x080073d1
 80072e0:	080073d1 	.word	0x080073d1
 80072e4:	08007349 	.word	0x08007349
 80072e8:	080073d1 	.word	0x080073d1
 80072ec:	080073d1 	.word	0x080073d1
 80072f0:	080073d1 	.word	0x080073d1
 80072f4:	080073d1 	.word	0x080073d1
 80072f8:	080073d1 	.word	0x080073d1
 80072fc:	080073d1 	.word	0x080073d1
 8007300:	080073d1 	.word	0x080073d1
 8007304:	08007359 	.word	0x08007359
 8007308:	080073d1 	.word	0x080073d1
 800730c:	080073d1 	.word	0x080073d1
 8007310:	080073d1 	.word	0x080073d1
 8007314:	080073d1 	.word	0x080073d1
 8007318:	080073d1 	.word	0x080073d1
 800731c:	080073d1 	.word	0x080073d1
 8007320:	080073d1 	.word	0x080073d1
 8007324:	0800735f 	.word	0x0800735f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007328:	f107 0320 	add.w	r3, r7, #32
 800732c:	4618      	mov	r0, r3
 800732e:	f7fd fba1 	bl	8004a74 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007334:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007336:	e04e      	b.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007338:	f107 0314 	add.w	r3, r7, #20
 800733c:	4618      	mov	r0, r3
 800733e:	f7fd fd03 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007346:	e046      	b.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007348:	f107 0308 	add.w	r3, r7, #8
 800734c:	4618      	mov	r0, r3
 800734e:	f7fd fe65 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007356:	e03e      	b.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007358:	4b76      	ldr	r3, [pc, #472]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800735a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800735c:	e03b      	b.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800735e:	4b74      	ldr	r3, [pc, #464]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007364:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007368:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800736a:	4b71      	ldr	r3, [pc, #452]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b02      	cmp	r3, #2
 8007374:	d10c      	bne.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8007376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007378:	2b00      	cmp	r3, #0
 800737a:	d109      	bne.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800737c:	4b6c      	ldr	r3, [pc, #432]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	08db      	lsrs	r3, r3, #3
 8007382:	f003 0303 	and.w	r3, r3, #3
 8007386:	4a6c      	ldr	r2, [pc, #432]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007388:	fa22 f303 	lsr.w	r3, r2, r3
 800738c:	637b      	str	r3, [r7, #52]	; 0x34
 800738e:	e01e      	b.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007390:	4b67      	ldr	r3, [pc, #412]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800739c:	d106      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a4:	d102      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073a6:	4b65      	ldr	r3, [pc, #404]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80073a8:	637b      	str	r3, [r7, #52]	; 0x34
 80073aa:	e010      	b.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073ac:	4b60      	ldr	r3, [pc, #384]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073b8:	d106      	bne.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c0:	d102      	bne.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80073c2:	4b5f      	ldr	r3, [pc, #380]	; (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80073c4:	637b      	str	r3, [r7, #52]	; 0x34
 80073c6:	e002      	b.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80073cc:	e003      	b.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80073ce:	e002      	b.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80073d0:	2300      	movs	r3, #0
 80073d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073d4:	bf00      	nop
          }
        }
        break;
 80073d6:	e2d6      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80073d8:	4b55      	ldr	r3, [pc, #340]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80073da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073de:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80073e2:	633b      	str	r3, [r7, #48]	; 0x30
 80073e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ea:	d031      	beq.n	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80073ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f2:	d866      	bhi.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80073f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f6:	2bc0      	cmp	r3, #192	; 0xc0
 80073f8:	d027      	beq.n	800744a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80073fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fc:	2bc0      	cmp	r3, #192	; 0xc0
 80073fe:	d860      	bhi.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007402:	2b80      	cmp	r3, #128	; 0x80
 8007404:	d019      	beq.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	2b80      	cmp	r3, #128	; 0x80
 800740a:	d85a      	bhi.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	2b40      	cmp	r3, #64	; 0x40
 8007416:	d008      	beq.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007418:	e053      	b.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800741a:	f107 0320 	add.w	r3, r7, #32
 800741e:	4618      	mov	r0, r3
 8007420:	f7fd fb28 	bl	8004a74 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007428:	e04e      	b.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800742a:	f107 0314 	add.w	r3, r7, #20
 800742e:	4618      	mov	r0, r3
 8007430:	f7fd fc8a 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007438:	e046      	b.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800743a:	f107 0308 	add.w	r3, r7, #8
 800743e:	4618      	mov	r0, r3
 8007440:	f7fd fdec 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007448:	e03e      	b.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800744a:	4b3a      	ldr	r3, [pc, #232]	; (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800744c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800744e:	e03b      	b.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007450:	4b37      	ldr	r3, [pc, #220]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007456:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800745a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800745c:	4b34      	ldr	r3, [pc, #208]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b02      	cmp	r3, #2
 8007466:	d10c      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8007468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d109      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800746e:	4b30      	ldr	r3, [pc, #192]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	08db      	lsrs	r3, r3, #3
 8007474:	f003 0303 	and.w	r3, r3, #3
 8007478:	4a2f      	ldr	r2, [pc, #188]	; (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800747a:	fa22 f303 	lsr.w	r3, r2, r3
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
 8007480:	e01e      	b.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007482:	4b2b      	ldr	r3, [pc, #172]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800748a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800748e:	d106      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007496:	d102      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007498:	4b28      	ldr	r3, [pc, #160]	; (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
 800749c:	e010      	b.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800749e:	4b24      	ldr	r3, [pc, #144]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074aa:	d106      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80074ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074b2:	d102      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80074b4:	4b22      	ldr	r3, [pc, #136]	; (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80074b6:	637b      	str	r3, [r7, #52]	; 0x34
 80074b8:	e002      	b.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80074be:	e003      	b.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80074c0:	e002      	b.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80074c2:	2300      	movs	r3, #0
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074c6:	bf00      	nop
          }
        }
        break;
 80074c8:	e25d      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80074ca:	4b19      	ldr	r3, [pc, #100]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80074cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074d0:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80074d4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d103      	bne.n	80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80074dc:	f7fb fb14 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 80074e0:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80074e2:	e250      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80074e4:	4b12      	ldr	r3, [pc, #72]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074f0:	d10b      	bne.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80074f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f8:	d107      	bne.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074fa:	f107 0314 	add.w	r3, r7, #20
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fd fc22 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	637b      	str	r3, [r7, #52]	; 0x34
 8007508:	e04f      	b.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800750a:	4b09      	ldr	r3, [pc, #36]	; (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007516:	d115      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800751e:	d111      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007520:	f107 0308 	add.w	r3, r7, #8
 8007524:	4618      	mov	r0, r3
 8007526:	f7fd fd79 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	637b      	str	r3, [r7, #52]	; 0x34
 800752e:	e03c      	b.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007530:	44020c00 	.word	0x44020c00
 8007534:	00bb8000 	.word	0x00bb8000
 8007538:	03d09000 	.word	0x03d09000
 800753c:	003d0900 	.word	0x003d0900
 8007540:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007544:	4b94      	ldr	r3, [pc, #592]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b02      	cmp	r3, #2
 800754e:	d10d      	bne.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007556:	d109      	bne.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007558:	4b8f      	ldr	r3, [pc, #572]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	08db      	lsrs	r3, r3, #3
 800755e:	f003 0303 	and.w	r3, r3, #3
 8007562:	4a8e      	ldr	r2, [pc, #568]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007564:	fa22 f303 	lsr.w	r3, r2, r3
 8007568:	637b      	str	r3, [r7, #52]	; 0x34
 800756a:	e01e      	b.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800756c:	4b8a      	ldr	r3, [pc, #552]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007578:	d106      	bne.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007580:	d102      	bne.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8007582:	4b87      	ldr	r3, [pc, #540]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007584:	637b      	str	r3, [r7, #52]	; 0x34
 8007586:	e010      	b.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007588:	4b83      	ldr	r3, [pc, #524]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007594:	d106      	bne.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800759c:	d102      	bne.n	80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800759e:	4b81      	ldr	r3, [pc, #516]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80075a0:	637b      	str	r3, [r7, #52]	; 0x34
 80075a2:	e002      	b.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075a8:	e1ed      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80075aa:	e1ec      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80075ac:	4b7a      	ldr	r3, [pc, #488]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80075ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075b2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80075b6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d103      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80075be:	f7fb fab9 	bl	8002b34 <HAL_RCC_GetPCLK3Freq>
 80075c2:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80075c4:	e1df      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80075c6:	4b74      	ldr	r3, [pc, #464]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075d2:	d10b      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075da:	d107      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075dc:	f107 0314 	add.w	r3, r7, #20
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fd fbb1 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	637b      	str	r3, [r7, #52]	; 0x34
 80075ea:	e045      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80075ec:	4b6a      	ldr	r3, [pc, #424]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f8:	d10b      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007600:	d107      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007602:	f107 0308 	add.w	r3, r7, #8
 8007606:	4618      	mov	r0, r3
 8007608:	f7fd fd08 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	637b      	str	r3, [r7, #52]	; 0x34
 8007610:	e032      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007612:	4b61      	ldr	r3, [pc, #388]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0302 	and.w	r3, r3, #2
 800761a:	2b02      	cmp	r3, #2
 800761c:	d10d      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007624:	d109      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007626:	4b5c      	ldr	r3, [pc, #368]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	08db      	lsrs	r3, r3, #3
 800762c:	f003 0303 	and.w	r3, r3, #3
 8007630:	4a5a      	ldr	r2, [pc, #360]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007632:	fa22 f303 	lsr.w	r3, r2, r3
 8007636:	637b      	str	r3, [r7, #52]	; 0x34
 8007638:	e01e      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800763a:	4b57      	ldr	r3, [pc, #348]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007646:	d106      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800764e:	d102      	bne.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007650:	4b53      	ldr	r3, [pc, #332]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007652:	637b      	str	r3, [r7, #52]	; 0x34
 8007654:	e010      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007656:	4b50      	ldr	r3, [pc, #320]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007662:	d106      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007666:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800766a:	d102      	bne.n	8007672 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800766c:	4b4d      	ldr	r3, [pc, #308]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800766e:	637b      	str	r3, [r7, #52]	; 0x34
 8007670:	e002      	b.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007672:	2300      	movs	r3, #0
 8007674:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007676:	e186      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007678:	e185      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800767a:	4b47      	ldr	r3, [pc, #284]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800767c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007680:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8007684:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	2b00      	cmp	r3, #0
 800768a:	d103      	bne.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800768c:	f7fb fa3c 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 8007690:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007692:	e178      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007694:	4b40      	ldr	r3, [pc, #256]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800769c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076a0:	d10b      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076a8:	d107      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076aa:	f107 0314 	add.w	r3, r7, #20
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7fd fb4a 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	637b      	str	r3, [r7, #52]	; 0x34
 80076b8:	e045      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80076ba:	4b37      	ldr	r3, [pc, #220]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076c6:	d10b      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ce:	d107      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076d0:	f107 0308 	add.w	r3, r7, #8
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fd fca1 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	637b      	str	r3, [r7, #52]	; 0x34
 80076de:	e032      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80076e0:	4b2d      	ldr	r3, [pc, #180]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d10d      	bne.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80076f2:	d109      	bne.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076f4:	4b28      	ldr	r3, [pc, #160]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	08db      	lsrs	r3, r3, #3
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	4a27      	ldr	r2, [pc, #156]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007700:	fa22 f303 	lsr.w	r3, r2, r3
 8007704:	637b      	str	r3, [r7, #52]	; 0x34
 8007706:	e01e      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007708:	4b23      	ldr	r3, [pc, #140]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007710:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007714:	d106      	bne.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800771c:	d102      	bne.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800771e:	4b20      	ldr	r3, [pc, #128]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007720:	637b      	str	r3, [r7, #52]	; 0x34
 8007722:	e010      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007724:	4b1c      	ldr	r3, [pc, #112]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007730:	d106      	bne.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007738:	d102      	bne.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800773a:	4b1a      	ldr	r3, [pc, #104]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800773c:	637b      	str	r3, [r7, #52]	; 0x34
 800773e:	e002      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007744:	e11f      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007746:	e11e      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007748:	4b13      	ldr	r3, [pc, #76]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800774a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800774e:	f003 0303 	and.w	r3, r3, #3
 8007752:	633b      	str	r3, [r7, #48]	; 0x30
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	2b03      	cmp	r3, #3
 8007758:	d85f      	bhi.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800775a:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800775c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007760:	08007771 	.word	0x08007771
 8007764:	08007779 	.word	0x08007779
 8007768:	08007789 	.word	0x08007789
 800776c:	080077a9 	.word	0x080077a9

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007770:	f7fb f998 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8007774:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007776:	e053      	b.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007778:	f107 0320 	add.w	r3, r7, #32
 800777c:	4618      	mov	r0, r3
 800777e:	f7fd f979 	bl	8004a74 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007786:	e04b      	b.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007788:	f107 0314 	add.w	r3, r7, #20
 800778c:	4618      	mov	r0, r3
 800778e:	f7fd fadb 	bl	8004d48 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007796:	e043      	b.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007798:	44020c00 	.word	0x44020c00
 800779c:	03d09000 	.word	0x03d09000
 80077a0:	003d0900 	.word	0x003d0900
 80077a4:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077a8:	4b79      	ldr	r3, [pc, #484]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80077aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80077ae:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077b4:	4b76      	ldr	r3, [pc, #472]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d10c      	bne.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 80077c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d109      	bne.n	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077c6:	4b72      	ldr	r3, [pc, #456]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	08db      	lsrs	r3, r3, #3
 80077cc:	f003 0303 	and.w	r3, r3, #3
 80077d0:	4a70      	ldr	r2, [pc, #448]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 80077d2:	fa22 f303 	lsr.w	r3, r2, r3
 80077d6:	637b      	str	r3, [r7, #52]	; 0x34
 80077d8:	e01e      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077da:	4b6d      	ldr	r3, [pc, #436]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077e6:	d106      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 80077e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ee:	d102      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80077f0:	4b69      	ldr	r3, [pc, #420]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
 80077f4:	e010      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077f6:	4b66      	ldr	r3, [pc, #408]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007802:	d106      	bne.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800780a:	d102      	bne.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800780c:	4b63      	ldr	r3, [pc, #396]	; (800799c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800780e:	637b      	str	r3, [r7, #52]	; 0x34
 8007810:	e002      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007816:	e003      	b.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007818:	e002      	b.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800781e:	bf00      	nop
          }
        }
        break;
 8007820:	e0b1      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007822:	4b5b      	ldr	r3, [pc, #364]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007828:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800782c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800782e:	4b58      	ldr	r3, [pc, #352]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b02      	cmp	r3, #2
 800783a:	d106      	bne.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	2b00      	cmp	r3, #0
 8007840:	d103      	bne.n	800784a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007846:	637b      	str	r3, [r7, #52]	; 0x34
 8007848:	e01f      	b.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800784a:	4b51      	ldr	r3, [pc, #324]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800784c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007858:	d106      	bne.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	2b40      	cmp	r3, #64	; 0x40
 800785e:	d103      	bne.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007860:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007864:	637b      	str	r3, [r7, #52]	; 0x34
 8007866:	e010      	b.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007868:	4b49      	ldr	r3, [pc, #292]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007874:	d106      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	2b80      	cmp	r3, #128	; 0x80
 800787a:	d103      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800787c:	f248 0312 	movw	r3, #32786	; 0x8012
 8007880:	637b      	str	r3, [r7, #52]	; 0x34
 8007882:	e002      	b.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007888:	e07d      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800788a:	e07c      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800788c:	4b40      	ldr	r3, [pc, #256]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800788e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007892:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007896:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007898:	4b3d      	ldr	r3, [pc, #244]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078a4:	d105      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d102      	bne.n	80078b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80078ac:	4b3c      	ldr	r3, [pc, #240]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80078ae:	637b      	str	r3, [r7, #52]	; 0x34
 80078b0:	e031      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80078b2:	4b37      	ldr	r3, [pc, #220]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078be:	d10a      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80078c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c2:	2b10      	cmp	r3, #16
 80078c4:	d107      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078c6:	f107 0320 	add.w	r3, r7, #32
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fd f8d2 	bl	8004a74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	637b      	str	r3, [r7, #52]	; 0x34
 80078d4:	e01f      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80078d6:	4b2e      	ldr	r3, [pc, #184]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80078d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d106      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	2b20      	cmp	r3, #32
 80078e8:	d103      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 80078ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ee:	637b      	str	r3, [r7, #52]	; 0x34
 80078f0:	e011      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80078f2:	4b27      	ldr	r3, [pc, #156]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80078f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007900:	d106      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	2b30      	cmp	r3, #48	; 0x30
 8007906:	d103      	bne.n	8007910 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007908:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800790c:	637b      	str	r3, [r7, #52]	; 0x34
 800790e:	e002      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007914:	e037      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007916:	e036      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007918:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800791a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800791e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007922:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007926:	2b10      	cmp	r3, #16
 8007928:	d107      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800792a:	f107 0320 	add.w	r3, r7, #32
 800792e:	4618      	mov	r0, r3
 8007930:	f7fd f8a0 	bl	8004a74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007938:	e025      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800793a:	4b15      	ldr	r3, [pc, #84]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007946:	d10a      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	2b20      	cmp	r3, #32
 800794c:	d107      	bne.n	800795e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800794e:	f107 0308 	add.w	r3, r7, #8
 8007952:	4618      	mov	r0, r3
 8007954:	f7fd fb62 	bl	800501c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	637b      	str	r3, [r7, #52]	; 0x34
 800795c:	e00f      	b.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800795e:	4b0c      	ldr	r3, [pc, #48]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800796a:	d105      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	2b30      	cmp	r3, #48	; 0x30
 8007970:	d102      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007972:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
 8007976:	e002      	b.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 800797c:	e003      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800797e:	e002      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007984:	bf00      	nop
    }
  }

  return (frequency);
 8007986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007988:	4618      	mov	r0, r3
 800798a:	373c      	adds	r7, #60	; 0x3c
 800798c:	46bd      	mov	sp, r7
 800798e:	bd90      	pop	{r4, r7, pc}
 8007990:	44020c00 	.word	0x44020c00
 8007994:	03d09000 	.word	0x03d09000
 8007998:	003d0900 	.word	0x003d0900
 800799c:	017d7840 	.word	0x017d7840
 80079a0:	02dc6c00 	.word	0x02dc6c00

080079a4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 80079ac:	4b48      	ldr	r3, [pc, #288]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a47      	ldr	r2, [pc, #284]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 80079b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80079b8:	f7f9 fe7c 	bl	80016b4 <HAL_GetTick>
 80079bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079be:	e008      	b.n	80079d2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079c0:	f7f9 fe78 	bl	80016b4 <HAL_GetTick>
 80079c4:	4602      	mov	r2, r0
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d901      	bls.n	80079d2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e07a      	b.n	8007ac8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079d2:	4b3f      	ldr	r3, [pc, #252]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1f0      	bne.n	80079c0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80079de:	4b3c      	ldr	r3, [pc, #240]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 80079e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80079e6:	f023 0303 	bic.w	r3, r3, #3
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6811      	ldr	r1, [r2, #0]
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6852      	ldr	r2, [r2, #4]
 80079f2:	0212      	lsls	r2, r2, #8
 80079f4:	430a      	orrs	r2, r1
 80079f6:	4936      	ldr	r1, [pc, #216]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 80079f8:	4313      	orrs	r3, r2
 80079fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	025b      	lsls	r3, r3, #9
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	041b      	lsls	r3, r3, #16
 8007a1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	061b      	lsls	r3, r3, #24
 8007a28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a2c:	4928      	ldr	r1, [pc, #160]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007a32:	4b27      	ldr	r3, [pc, #156]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a36:	f023 020c 	bic.w	r2, r3, #12
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	4924      	ldr	r1, [pc, #144]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007a44:	4b22      	ldr	r3, [pc, #136]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a48:	f023 0220 	bic.w	r2, r3, #32
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	491f      	ldr	r1, [pc, #124]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007a56:	4b1e      	ldr	r3, [pc, #120]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5e:	491c      	ldr	r1, [pc, #112]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007a64:	4b1a      	ldr	r3, [pc, #104]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	4a19      	ldr	r2, [pc, #100]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a6a:	f023 0310 	bic.w	r3, r3, #16
 8007a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007a70:	4b17      	ldr	r3, [pc, #92]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a78:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	6a12      	ldr	r2, [r2, #32]
 8007a80:	00d2      	lsls	r2, r2, #3
 8007a82:	4913      	ldr	r1, [pc, #76]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a84:	4313      	orrs	r3, r2
 8007a86:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007a88:	4b11      	ldr	r3, [pc, #68]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8c:	4a10      	ldr	r2, [pc, #64]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a8e:	f043 0310 	orr.w	r3, r3, #16
 8007a92:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007a94:	4b0e      	ldr	r3, [pc, #56]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a0d      	ldr	r2, [pc, #52]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007a9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a9e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007aa0:	f7f9 fe08 	bl	80016b4 <HAL_GetTick>
 8007aa4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007aa6:	e008      	b.n	8007aba <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007aa8:	f7f9 fe04 	bl	80016b4 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d901      	bls.n	8007aba <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e006      	b.n	8007ac8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007aba:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <RCCEx_PLL2_Config+0x12c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0f0      	beq.n	8007aa8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0

}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	44020c00 	.word	0x44020c00

08007ad4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007adc:	4b48      	ldr	r3, [pc, #288]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a47      	ldr	r2, [pc, #284]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ae6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ae8:	f7f9 fde4 	bl	80016b4 <HAL_GetTick>
 8007aec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007aee:	e008      	b.n	8007b02 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007af0:	f7f9 fde0 	bl	80016b4 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d901      	bls.n	8007b02 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e07a      	b.n	8007bf8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b02:	4b3f      	ldr	r3, [pc, #252]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1f0      	bne.n	8007af0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007b0e:	4b3c      	ldr	r3, [pc, #240]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b16:	f023 0303 	bic.w	r3, r3, #3
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	6811      	ldr	r1, [r2, #0]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	6852      	ldr	r2, [r2, #4]
 8007b22:	0212      	lsls	r2, r2, #8
 8007b24:	430a      	orrs	r2, r1
 8007b26:	4936      	ldr	r1, [pc, #216]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	630b      	str	r3, [r1, #48]	; 0x30
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	025b      	lsls	r3, r3, #9
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	431a      	orrs	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	041b      	lsls	r3, r3, #16
 8007b4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	695b      	ldr	r3, [r3, #20]
 8007b54:	3b01      	subs	r3, #1
 8007b56:	061b      	lsls	r3, r3, #24
 8007b58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b5c:	4928      	ldr	r1, [pc, #160]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b62:	4b27      	ldr	r3, [pc, #156]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b66:	f023 020c 	bic.w	r2, r3, #12
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	4924      	ldr	r1, [pc, #144]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007b74:	4b22      	ldr	r3, [pc, #136]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b78:	f023 0220 	bic.w	r2, r3, #32
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	491f      	ldr	r1, [pc, #124]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007b86:	4b1e      	ldr	r3, [pc, #120]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	491c      	ldr	r1, [pc, #112]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007b90:	4313      	orrs	r3, r2
 8007b92:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007b94:	4b1a      	ldr	r3, [pc, #104]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b98:	4a19      	ldr	r2, [pc, #100]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007b9a:	f023 0310 	bic.w	r3, r3, #16
 8007b9e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8007ba0:	4b17      	ldr	r3, [pc, #92]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ba4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ba8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	6a12      	ldr	r2, [r2, #32]
 8007bb0:	00d2      	lsls	r2, r2, #3
 8007bb2:	4913      	ldr	r1, [pc, #76]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8007bb8:	4b11      	ldr	r3, [pc, #68]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbc:	4a10      	ldr	r2, [pc, #64]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007bbe:	f043 0310 	orr.w	r3, r3, #16
 8007bc2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007bc4:	4b0e      	ldr	r3, [pc, #56]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a0d      	ldr	r2, [pc, #52]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007bd0:	f7f9 fd70 	bl	80016b4 <HAL_GetTick>
 8007bd4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bd6:	e008      	b.n	8007bea <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bd8:	f7f9 fd6c 	bl	80016b4 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e006      	b.n	8007bf8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bea:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <RCCEx_PLL3_Config+0x12c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d0f0      	beq.n	8007bd8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	44020c00 	.word	0x44020c00

08007c04 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e162      	b.n	8007edc <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a70      	ldr	r2, [pc, #448]	; (8007ddc <HAL_SPI_Init+0x1d8>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d018      	beq.n	8007c52 <HAL_SPI_Init+0x4e>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a6e      	ldr	r2, [pc, #440]	; (8007de0 <HAL_SPI_Init+0x1dc>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d013      	beq.n	8007c52 <HAL_SPI_Init+0x4e>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a6d      	ldr	r2, [pc, #436]	; (8007de4 <HAL_SPI_Init+0x1e0>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d00e      	beq.n	8007c52 <HAL_SPI_Init+0x4e>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a6b      	ldr	r2, [pc, #428]	; (8007de8 <HAL_SPI_Init+0x1e4>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d009      	beq.n	8007c52 <HAL_SPI_Init+0x4e>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a6a      	ldr	r2, [pc, #424]	; (8007dec <HAL_SPI_Init+0x1e8>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d004      	beq.n	8007c52 <HAL_SPI_Init+0x4e>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a68      	ldr	r2, [pc, #416]	; (8007df0 <HAL_SPI_Init+0x1ec>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	e000      	b.n	8007c54 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007c52:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a5f      	ldr	r2, [pc, #380]	; (8007ddc <HAL_SPI_Init+0x1d8>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d018      	beq.n	8007c96 <HAL_SPI_Init+0x92>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a5d      	ldr	r2, [pc, #372]	; (8007de0 <HAL_SPI_Init+0x1dc>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d013      	beq.n	8007c96 <HAL_SPI_Init+0x92>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a5c      	ldr	r2, [pc, #368]	; (8007de4 <HAL_SPI_Init+0x1e0>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d00e      	beq.n	8007c96 <HAL_SPI_Init+0x92>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a5a      	ldr	r2, [pc, #360]	; (8007de8 <HAL_SPI_Init+0x1e4>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d009      	beq.n	8007c96 <HAL_SPI_Init+0x92>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a59      	ldr	r2, [pc, #356]	; (8007dec <HAL_SPI_Init+0x1e8>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d004      	beq.n	8007c96 <HAL_SPI_Init+0x92>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a57      	ldr	r2, [pc, #348]	; (8007df0 <HAL_SPI_Init+0x1ec>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d105      	bne.n	8007ca2 <HAL_SPI_Init+0x9e>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	2b0f      	cmp	r3, #15
 8007c9c:	d901      	bls.n	8007ca2 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e11c      	b.n	8007edc <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f001 f80e 	bl	8008cc4 <SPI_GetPacketSize>
 8007ca8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a4b      	ldr	r2, [pc, #300]	; (8007ddc <HAL_SPI_Init+0x1d8>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d018      	beq.n	8007ce6 <HAL_SPI_Init+0xe2>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a49      	ldr	r2, [pc, #292]	; (8007de0 <HAL_SPI_Init+0x1dc>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d013      	beq.n	8007ce6 <HAL_SPI_Init+0xe2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a48      	ldr	r2, [pc, #288]	; (8007de4 <HAL_SPI_Init+0x1e0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d00e      	beq.n	8007ce6 <HAL_SPI_Init+0xe2>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a46      	ldr	r2, [pc, #280]	; (8007de8 <HAL_SPI_Init+0x1e4>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d009      	beq.n	8007ce6 <HAL_SPI_Init+0xe2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a45      	ldr	r2, [pc, #276]	; (8007dec <HAL_SPI_Init+0x1e8>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d004      	beq.n	8007ce6 <HAL_SPI_Init+0xe2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a43      	ldr	r2, [pc, #268]	; (8007df0 <HAL_SPI_Init+0x1ec>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d102      	bne.n	8007cec <HAL_SPI_Init+0xe8>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b08      	cmp	r3, #8
 8007cea:	d820      	bhi.n	8007d2e <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007cf0:	4a40      	ldr	r2, [pc, #256]	; (8007df4 <HAL_SPI_Init+0x1f0>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d018      	beq.n	8007d28 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a3f      	ldr	r2, [pc, #252]	; (8007df8 <HAL_SPI_Init+0x1f4>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d013      	beq.n	8007d28 <HAL_SPI_Init+0x124>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a3d      	ldr	r2, [pc, #244]	; (8007dfc <HAL_SPI_Init+0x1f8>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d00e      	beq.n	8007d28 <HAL_SPI_Init+0x124>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a3c      	ldr	r2, [pc, #240]	; (8007e00 <HAL_SPI_Init+0x1fc>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d009      	beq.n	8007d28 <HAL_SPI_Init+0x124>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a3a      	ldr	r2, [pc, #232]	; (8007e04 <HAL_SPI_Init+0x200>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d004      	beq.n	8007d28 <HAL_SPI_Init+0x124>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a39      	ldr	r2, [pc, #228]	; (8007e08 <HAL_SPI_Init+0x204>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d104      	bne.n	8007d32 <HAL_SPI_Init+0x12e>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b10      	cmp	r3, #16
 8007d2c:	d901      	bls.n	8007d32 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e0d4      	b.n	8007edc <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d106      	bne.n	8007d4c <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7f9 f94e 	bl	8000fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f022 0201 	bic.w	r2, r2, #1
 8007d62:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007d6e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d78:	d119      	bne.n	8007dae <HAL_SPI_Init+0x1aa>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d82:	d103      	bne.n	8007d8c <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d008      	beq.n	8007d9e <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d10c      	bne.n	8007dae <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007d98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d9c:	d107      	bne.n	8007dae <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d028      	beq.n	8007e0c <HAL_SPI_Init+0x208>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	2b06      	cmp	r3, #6
 8007dc0:	d924      	bls.n	8007e0c <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	e020      	b.n	8007e1c <HAL_SPI_Init+0x218>
 8007dda:	bf00      	nop
 8007ddc:	40014c00 	.word	0x40014c00
 8007de0:	50014c00 	.word	0x50014c00
 8007de4:	44002000 	.word	0x44002000
 8007de8:	54002000 	.word	0x54002000
 8007dec:	40015000 	.word	0x40015000
 8007df0:	50015000 	.word	0x50015000
 8007df4:	40013000 	.word	0x40013000
 8007df8:	50013000 	.word	0x50013000
 8007dfc:	40003800 	.word	0x40003800
 8007e00:	50003800 	.word	0x50003800
 8007e04:	40003c00 	.word	0x40003c00
 8007e08:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e1a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	69da      	ldr	r2, [r3, #28]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e24:	431a      	orrs	r2, r3
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	431a      	orrs	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2e:	ea42 0103 	orr.w	r1, r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68da      	ldr	r2, [r3, #12]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	431a      	orrs	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	691b      	ldr	r3, [r3, #16]
 8007e58:	431a      	orrs	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	431a      	orrs	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e70:	431a      	orrs	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	431a      	orrs	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e82:	431a      	orrs	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e88:	ea42 0103 	orr.w	r1, r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0201 	bic.w	r2, r2, #1
 8007ea6:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00a      	beq.n	8007eca <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b08a      	sub	sp, #40	; 0x28
 8007ee8:	af02      	add	r7, sp, #8
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3320      	adds	r3, #32
 8007efa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d101      	bne.n	8007f0e <HAL_SPI_Transmit+0x2a>
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	e209      	b.n	8008322 <HAL_SPI_Transmit+0x43e>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f16:	f7f9 fbcd 	bl	80016b4 <HAL_GetTick>
 8007f1a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d007      	beq.n	8007f38 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007f28:	2302      	movs	r3, #2
 8007f2a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007f34:	7efb      	ldrb	r3, [r7, #27]
 8007f36:	e1f4      	b.n	8008322 <HAL_SPI_Transmit+0x43e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <HAL_SPI_Transmit+0x60>
 8007f3e:	88fb      	ldrh	r3, [r7, #6]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d107      	bne.n	8007f54 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8007f50:	7efb      	ldrb	r3, [r7, #27]
 8007f52:	e1e6      	b.n	8008322 <HAL_SPI_Transmit+0x43e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2203      	movs	r2, #3
 8007f58:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	88fa      	ldrh	r2, [r7, #6]
 8007f6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	88fa      	ldrh	r2, [r7, #6]
 8007f76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007fa4:	d108      	bne.n	8007fb8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fb4:	601a      	str	r2, [r3, #0]
 8007fb6:	e009      	b.n	8007fcc <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007fca:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	0c1b      	lsrs	r3, r3, #16
 8007fd4:	041b      	lsls	r3, r3, #16
 8007fd6:	88f9      	ldrh	r1, [r7, #6]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	430b      	orrs	r3, r1
 8007fde:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f042 0201 	orr.w	r2, r2, #1
 8007fee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ff8:	d107      	bne.n	800800a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008008:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	2b0f      	cmp	r3, #15
 8008010:	d965      	bls.n	80080de <HAL_SPI_Transmit+0x1fa>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a94      	ldr	r2, [pc, #592]	; (8008268 <HAL_SPI_Transmit+0x384>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d059      	beq.n	80080d0 <HAL_SPI_Transmit+0x1ec>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a92      	ldr	r2, [pc, #584]	; (800826c <HAL_SPI_Transmit+0x388>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d054      	beq.n	80080d0 <HAL_SPI_Transmit+0x1ec>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a91      	ldr	r2, [pc, #580]	; (8008270 <HAL_SPI_Transmit+0x38c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d04f      	beq.n	80080d0 <HAL_SPI_Transmit+0x1ec>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a8f      	ldr	r2, [pc, #572]	; (8008274 <HAL_SPI_Transmit+0x390>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d04a      	beq.n	80080d0 <HAL_SPI_Transmit+0x1ec>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a8e      	ldr	r2, [pc, #568]	; (8008278 <HAL_SPI_Transmit+0x394>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d045      	beq.n	80080d0 <HAL_SPI_Transmit+0x1ec>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a8c      	ldr	r2, [pc, #560]	; (800827c <HAL_SPI_Transmit+0x398>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d147      	bne.n	80080de <HAL_SPI_Transmit+0x1fa>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800804e:	e03f      	b.n	80080d0 <HAL_SPI_Transmit+0x1ec>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	695b      	ldr	r3, [r3, #20]
 8008056:	f003 0302 	and.w	r3, r3, #2
 800805a:	2b02      	cmp	r3, #2
 800805c:	d114      	bne.n	8008088 <HAL_SPI_Transmit+0x1a4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	6812      	ldr	r2, [r2, #0]
 8008068:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800806e:	1d1a      	adds	r2, r3, #4
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800807a:	b29b      	uxth	r3, r3
 800807c:	3b01      	subs	r3, #1
 800807e:	b29a      	uxth	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008086:	e023      	b.n	80080d0 <HAL_SPI_Transmit+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008088:	f7f9 fb14 	bl	80016b4 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d803      	bhi.n	80080a0 <HAL_SPI_Transmit+0x1bc>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800809e:	d102      	bne.n	80080a6 <HAL_SPI_Transmit+0x1c2>
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d114      	bne.n	80080d0 <HAL_SPI_Transmit+0x1ec>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 fd3e 	bl	8008b28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80080cc:	2303      	movs	r3, #3
 80080ce:	e128      	b.n	8008322 <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1b9      	bne.n	8008050 <HAL_SPI_Transmit+0x16c>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80080dc:	e0fb      	b.n	80082d6 <HAL_SPI_Transmit+0x3f2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	2b07      	cmp	r3, #7
 80080e4:	f240 80f0 	bls.w	80082c8 <HAL_SPI_Transmit+0x3e4>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80080e8:	e05d      	b.n	80081a6 <HAL_SPI_Transmit+0x2c2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	f003 0302 	and.w	r3, r3, #2
 80080f4:	2b02      	cmp	r3, #2
 80080f6:	d132      	bne.n	800815e <HAL_SPI_Transmit+0x27a>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080fe:	b29b      	uxth	r3, r3
 8008100:	2b01      	cmp	r3, #1
 8008102:	d918      	bls.n	8008136 <HAL_SPI_Transmit+0x252>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008108:	2b00      	cmp	r3, #0
 800810a:	d014      	beq.n	8008136 <HAL_SPI_Transmit+0x252>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800811c:	1d1a      	adds	r2, r3, #4
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008128:	b29b      	uxth	r3, r3
 800812a:	3b02      	subs	r3, #2
 800812c:	b29a      	uxth	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008134:	e037      	b.n	80081a6 <HAL_SPI_Transmit+0x2c2>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800813a:	881a      	ldrh	r2, [r3, #0]
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008144:	1c9a      	adds	r2, r3, #2
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008150:	b29b      	uxth	r3, r3
 8008152:	3b01      	subs	r3, #1
 8008154:	b29a      	uxth	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800815c:	e023      	b.n	80081a6 <HAL_SPI_Transmit+0x2c2>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800815e:	f7f9 faa9 	bl	80016b4 <HAL_GetTick>
 8008162:	4602      	mov	r2, r0
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	429a      	cmp	r2, r3
 800816c:	d803      	bhi.n	8008176 <HAL_SPI_Transmit+0x292>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008174:	d102      	bne.n	800817c <HAL_SPI_Transmit+0x298>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d114      	bne.n	80081a6 <HAL_SPI_Transmit+0x2c2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f000 fcd3 	bl	8008b28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008190:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80081a2:	2303      	movs	r3, #3
 80081a4:	e0bd      	b.n	8008322 <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d19b      	bne.n	80080ea <HAL_SPI_Transmit+0x206>
 80081b2:	e090      	b.n	80082d6 <HAL_SPI_Transmit+0x3f2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d15e      	bne.n	8008280 <HAL_SPI_Transmit+0x39c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	d918      	bls.n	8008200 <HAL_SPI_Transmit+0x31c>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d2:	2b40      	cmp	r3, #64	; 0x40
 80081d4:	d914      	bls.n	8008200 <HAL_SPI_Transmit+0x31c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6812      	ldr	r2, [r2, #0]
 80081e0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081e6:	1d1a      	adds	r2, r3, #4
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	3b04      	subs	r3, #4
 80081f6:	b29a      	uxth	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80081fe:	e063      	b.n	80082c8 <HAL_SPI_Transmit+0x3e4>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008206:	b29b      	uxth	r3, r3
 8008208:	2b01      	cmp	r3, #1
 800820a:	d917      	bls.n	800823c <HAL_SPI_Transmit+0x358>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008210:	2b00      	cmp	r3, #0
 8008212:	d013      	beq.n	800823c <HAL_SPI_Transmit+0x358>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008218:	881a      	ldrh	r2, [r3, #0]
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008222:	1c9a      	adds	r2, r3, #2
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800822e:	b29b      	uxth	r3, r3
 8008230:	3b02      	subs	r3, #2
 8008232:	b29a      	uxth	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800823a:	e045      	b.n	80082c8 <HAL_SPI_Transmit+0x3e4>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3320      	adds	r3, #32
 8008246:	7812      	ldrb	r2, [r2, #0]
 8008248:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800825a:	b29b      	uxth	r3, r3
 800825c:	3b01      	subs	r3, #1
 800825e:	b29a      	uxth	r2, r3
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008266:	e02f      	b.n	80082c8 <HAL_SPI_Transmit+0x3e4>
 8008268:	40013000 	.word	0x40013000
 800826c:	50013000 	.word	0x50013000
 8008270:	40003800 	.word	0x40003800
 8008274:	50003800 	.word	0x50003800
 8008278:	40003c00 	.word	0x40003c00
 800827c:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008280:	f7f9 fa18 	bl	80016b4 <HAL_GetTick>
 8008284:	4602      	mov	r2, r0
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	429a      	cmp	r2, r3
 800828e:	d803      	bhi.n	8008298 <HAL_SPI_Transmit+0x3b4>
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008296:	d102      	bne.n	800829e <HAL_SPI_Transmit+0x3ba>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d114      	bne.n	80082c8 <HAL_SPI_Transmit+0x3e4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f000 fc42 	bl	8008b28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e02c      	b.n	8008322 <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f47f af6f 	bne.w	80081b4 <HAL_SPI_Transmit+0x2d0>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2200      	movs	r2, #0
 80082de:	2108      	movs	r1, #8
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 fcc1 	bl	8008c68 <SPI_WaitOnFlagUntilTimeout>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d007      	beq.n	80082fc <HAL_SPI_Transmit+0x418>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f2:	f043 0220 	orr.w	r2, r3, #32
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f000 fc13 	bl	8008b28 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <HAL_SPI_Transmit+0x43c>
  {
    return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e000      	b.n	8008322 <HAL_SPI_Transmit+0x43e>
  }
  return errorcode;
 8008320:	7efb      	ldrb	r3, [r7, #27]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3720      	adds	r7, #32
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop

0800832c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b088      	sub	sp, #32
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	603b      	str	r3, [r7, #0]
 8008338:	4613      	mov	r3, r2
 800833a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	3330      	adds	r3, #48	; 0x30
 8008346:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800834e:	2b01      	cmp	r3, #1
 8008350:	d101      	bne.n	8008356 <HAL_SPI_Receive+0x2a>
 8008352:	2302      	movs	r3, #2
 8008354:	e191      	b.n	800867a <HAL_SPI_Receive+0x34e>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800835e:	f7f9 f9a9 	bl	80016b4 <HAL_GetTick>
 8008362:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b01      	cmp	r3, #1
 800836e:	d007      	beq.n	8008380 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8008370:	2302      	movs	r3, #2
 8008372:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800837c:	7ffb      	ldrb	r3, [r7, #31]
 800837e:	e17c      	b.n	800867a <HAL_SPI_Receive+0x34e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <HAL_SPI_Receive+0x60>
 8008386:	88fb      	ldrh	r3, [r7, #6]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d107      	bne.n	800839c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008398:	7ffb      	ldrb	r3, [r7, #31]
 800839a:	e16e      	b.n	800867a <HAL_SPI_Receive+0x34e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2204      	movs	r2, #4
 80083a0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	88fa      	ldrh	r2, [r7, #6]
 80083b6:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	88fa      	ldrh	r2, [r7, #6]
 80083be:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80083ec:	d108      	bne.n	8008400 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	e009      	b.n	8008414 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008412:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	0c1b      	lsrs	r3, r3, #16
 800841c:	041b      	lsls	r3, r3, #16
 800841e:	88f9      	ldrh	r1, [r7, #6]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	6812      	ldr	r2, [r2, #0]
 8008424:	430b      	orrs	r3, r1
 8008426:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0201 	orr.w	r2, r2, #1
 8008436:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008440:	d107      	bne.n	8008452 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008450:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	2b0f      	cmp	r3, #15
 8008458:	d966      	bls.n	8008528 <HAL_SPI_Receive+0x1fc>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a89      	ldr	r2, [pc, #548]	; (8008684 <HAL_SPI_Receive+0x358>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d05a      	beq.n	800851a <HAL_SPI_Receive+0x1ee>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a87      	ldr	r2, [pc, #540]	; (8008688 <HAL_SPI_Receive+0x35c>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d055      	beq.n	800851a <HAL_SPI_Receive+0x1ee>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a86      	ldr	r2, [pc, #536]	; (800868c <HAL_SPI_Receive+0x360>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d050      	beq.n	800851a <HAL_SPI_Receive+0x1ee>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a84      	ldr	r2, [pc, #528]	; (8008690 <HAL_SPI_Receive+0x364>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d04b      	beq.n	800851a <HAL_SPI_Receive+0x1ee>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a83      	ldr	r2, [pc, #524]	; (8008694 <HAL_SPI_Receive+0x368>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d046      	beq.n	800851a <HAL_SPI_Receive+0x1ee>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a81      	ldr	r2, [pc, #516]	; (8008698 <HAL_SPI_Receive+0x36c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d148      	bne.n	8008528 <HAL_SPI_Receive+0x1fc>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008496:	e040      	b.n	800851a <HAL_SPI_Receive+0x1ee>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	695a      	ldr	r2, [r3, #20]
 800849e:	f248 0308 	movw	r3, #32776	; 0x8008
 80084a2:	4013      	ands	r3, r2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d014      	beq.n	80084d2 <HAL_SPI_Receive+0x1a6>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80084b2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084b8:	1d1a      	adds	r2, r3, #4
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	3b01      	subs	r3, #1
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80084d0:	e023      	b.n	800851a <HAL_SPI_Receive+0x1ee>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084d2:	f7f9 f8ef 	bl	80016b4 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d803      	bhi.n	80084ea <HAL_SPI_Receive+0x1be>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084e8:	d102      	bne.n	80084f0 <HAL_SPI_Receive+0x1c4>
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d114      	bne.n	800851a <HAL_SPI_Receive+0x1ee>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 fb19 	bl	8008b28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008504:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e0af      	b.n	800867a <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008520:	b29b      	uxth	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1b8      	bne.n	8008498 <HAL_SPI_Receive+0x16c>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008526:	e095      	b.n	8008654 <HAL_SPI_Receive+0x328>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	2b07      	cmp	r3, #7
 800852e:	f240 808b 	bls.w	8008648 <HAL_SPI_Receive+0x31c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008532:	e03f      	b.n	80085b4 <HAL_SPI_Receive+0x288>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b01      	cmp	r3, #1
 8008540:	d114      	bne.n	800856c <HAL_SPI_Receive+0x240>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008546:	69ba      	ldr	r2, [r7, #24]
 8008548:	8812      	ldrh	r2, [r2, #0]
 800854a:	b292      	uxth	r2, r2
 800854c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008552:	1c9a      	adds	r2, r3, #2
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800855e:	b29b      	uxth	r3, r3
 8008560:	3b01      	subs	r3, #1
 8008562:	b29a      	uxth	r2, r3
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800856a:	e023      	b.n	80085b4 <HAL_SPI_Receive+0x288>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800856c:	f7f9 f8a2 	bl	80016b4 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	429a      	cmp	r2, r3
 800857a:	d803      	bhi.n	8008584 <HAL_SPI_Receive+0x258>
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008582:	d102      	bne.n	800858a <HAL_SPI_Receive+0x25e>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d114      	bne.n	80085b4 <HAL_SPI_Receive+0x288>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 facc 	bl	8008b28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800859e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e062      	b.n	800867a <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d1b9      	bne.n	8008534 <HAL_SPI_Receive+0x208>
 80085c0:	e048      	b.n	8008654 <HAL_SPI_Receive+0x328>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	695b      	ldr	r3, [r3, #20]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d117      	bne.n	8008600 <HAL_SPI_Receive+0x2d4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085dc:	7812      	ldrb	r2, [r2, #0]
 80085de:	b2d2      	uxtb	r2, r2
 80085e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085e6:	1c5a      	adds	r2, r3, #1
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	3b01      	subs	r3, #1
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80085fe:	e023      	b.n	8008648 <HAL_SPI_Receive+0x31c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008600:	f7f9 f858 	bl	80016b4 <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d803      	bhi.n	8008618 <HAL_SPI_Receive+0x2ec>
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008616:	d102      	bne.n	800861e <HAL_SPI_Receive+0x2f2>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d114      	bne.n	8008648 <HAL_SPI_Receive+0x31c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f000 fa82 	bl	8008b28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008632:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e018      	b.n	800867a <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800864e:	b29b      	uxth	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1b6      	bne.n	80085c2 <HAL_SPI_Receive+0x296>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f000 fa67 	bl	8008b28 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <HAL_SPI_Receive+0x34c>
  {
    return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e000      	b.n	800867a <HAL_SPI_Receive+0x34e>
  }
  return errorcode;
 8008678:	7ffb      	ldrb	r3, [r7, #31]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3720      	adds	r7, #32
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	40013000 	.word	0x40013000
 8008688:	50013000 	.word	0x50013000
 800868c:	40003800 	.word	0x40003800
 8008690:	50003800 	.word	0x50003800
 8008694:	40003c00 	.word	0x40003c00
 8008698:	50003c00 	.word	0x50003c00

0800869c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08c      	sub	sp, #48	; 0x30
 80086a0:	af02      	add	r7, sp, #8
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3320      	adds	r3, #32
 80086b6:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3330      	adds	r3, #48	; 0x30
 80086be:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d101      	bne.n	80086ce <HAL_SPI_TransmitReceive+0x32>
 80086ca:	2302      	movs	r3, #2
 80086cc:	e227      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x482>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086d6:	f7f8 ffed 	bl	80016b4 <HAL_GetTick>
 80086da:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80086dc:	887b      	ldrh	r3, [r7, #2]
 80086de:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 80086e0:	887b      	ldrh	r3, [r7, #2]
 80086e2:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d009      	beq.n	8008704 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 80086f0:	2302      	movs	r3, #2
 80086f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80086fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008702:	e20c      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x482>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d005      	beq.n	8008716 <HAL_SPI_TransmitReceive+0x7a>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <HAL_SPI_TransmitReceive+0x7a>
 8008710:	887b      	ldrh	r3, [r7, #2]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d109      	bne.n	800872a <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008724:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008728:	e1f9      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x482>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2205      	movs	r2, #5
 800872e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	887a      	ldrh	r2, [r7, #2]
 8008744:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	887a      	ldrh	r2, [r7, #2]
 800874c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	887a      	ldrh	r2, [r7, #2]
 800875a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	887a      	ldrh	r2, [r7, #2]
 8008762:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2200      	movs	r2, #0
 8008770:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68da      	ldr	r2, [r3, #12]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8008780:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	0c1b      	lsrs	r3, r3, #16
 800878a:	041b      	lsls	r3, r3, #16
 800878c:	8879      	ldrh	r1, [r7, #2]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	6812      	ldr	r2, [r2, #0]
 8008792:	430b      	orrs	r3, r1
 8008794:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f042 0201 	orr.w	r2, r2, #1
 80087a4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087ae:	d107      	bne.n	80087c0 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	2b0f      	cmp	r3, #15
 80087c6:	f240 8090 	bls.w	80088ea <HAL_SPI_TransmitReceive+0x24e>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a81      	ldr	r2, [pc, #516]	; (80089d4 <HAL_SPI_TransmitReceive+0x338>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	f000 8083 	beq.w	80088dc <HAL_SPI_TransmitReceive+0x240>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a7f      	ldr	r2, [pc, #508]	; (80089d8 <HAL_SPI_TransmitReceive+0x33c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d07d      	beq.n	80088dc <HAL_SPI_TransmitReceive+0x240>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a7d      	ldr	r2, [pc, #500]	; (80089dc <HAL_SPI_TransmitReceive+0x340>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d078      	beq.n	80088dc <HAL_SPI_TransmitReceive+0x240>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a7c      	ldr	r2, [pc, #496]	; (80089e0 <HAL_SPI_TransmitReceive+0x344>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d073      	beq.n	80088dc <HAL_SPI_TransmitReceive+0x240>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a7a      	ldr	r2, [pc, #488]	; (80089e4 <HAL_SPI_TransmitReceive+0x348>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d06e      	beq.n	80088dc <HAL_SPI_TransmitReceive+0x240>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a79      	ldr	r2, [pc, #484]	; (80089e8 <HAL_SPI_TransmitReceive+0x34c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d170      	bne.n	80088ea <HAL_SPI_TransmitReceive+0x24e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008808:	e068      	b.n	80088dc <HAL_SPI_TransmitReceive+0x240>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b02      	cmp	r3, #2
 8008816:	d11a      	bne.n	800884e <HAL_SPI_TransmitReceive+0x1b2>
 8008818:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800881a:	2b00      	cmp	r3, #0
 800881c:	d017      	beq.n	800884e <HAL_SPI_TransmitReceive+0x1b2>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6812      	ldr	r2, [r2, #0]
 8008828:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800882e:	1d1a      	adds	r2, r3, #4
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800883a:	b29b      	uxth	r3, r3
 800883c:	3b01      	subs	r3, #1
 800883e:	b29a      	uxth	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800884c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	695a      	ldr	r2, [r3, #20]
 8008854:	f248 0308 	movw	r3, #32776	; 0x8008
 8008858:	4013      	ands	r3, r2
 800885a:	2b00      	cmp	r3, #0
 800885c:	d01a      	beq.n	8008894 <HAL_SPI_TransmitReceive+0x1f8>
 800885e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	d017      	beq.n	8008894 <HAL_SPI_TransmitReceive+0x1f8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800886e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008874:	1d1a      	adds	r2, r3, #4
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008880:	b29b      	uxth	r3, r3
 8008882:	3b01      	subs	r3, #1
 8008884:	b29a      	uxth	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008892:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008894:	f7f8 ff0e 	bl	80016b4 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d803      	bhi.n	80088ac <HAL_SPI_TransmitReceive+0x210>
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088aa:	d102      	bne.n	80088b2 <HAL_SPI_TransmitReceive+0x216>
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d114      	bne.n	80088dc <HAL_SPI_TransmitReceive+0x240>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f000 f938 	bl	8008b28 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e120      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80088dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d193      	bne.n	800880a <HAL_SPI_TransmitReceive+0x16e>
 80088e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d190      	bne.n	800880a <HAL_SPI_TransmitReceive+0x16e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80088e8:	e0f2      	b.n	8008ad0 <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	2b07      	cmp	r3, #7
 80088f0:	f240 80e8 	bls.w	8008ac4 <HAL_SPI_TransmitReceive+0x428>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80088f4:	e066      	b.n	80089c4 <HAL_SPI_TransmitReceive+0x328>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b02      	cmp	r3, #2
 8008902:	d119      	bne.n	8008938 <HAL_SPI_TransmitReceive+0x29c>
 8008904:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008906:	2b00      	cmp	r3, #0
 8008908:	d016      	beq.n	8008938 <HAL_SPI_TransmitReceive+0x29c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800890e:	881a      	ldrh	r2, [r3, #0]
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008918:	1c9a      	adds	r2, r3, #2
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008924:	b29b      	uxth	r3, r3
 8008926:	3b01      	subs	r3, #1
 8008928:	b29a      	uxth	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008936:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b01      	cmp	r3, #1
 8008944:	d11a      	bne.n	800897c <HAL_SPI_TransmitReceive+0x2e0>
 8008946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008948:	2b00      	cmp	r3, #0
 800894a:	d017      	beq.n	800897c <HAL_SPI_TransmitReceive+0x2e0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	8812      	ldrh	r2, [r2, #0]
 8008954:	b292      	uxth	r2, r2
 8008956:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800895c:	1c9a      	adds	r2, r3, #2
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008968:	b29b      	uxth	r3, r3
 800896a:	3b01      	subs	r3, #1
 800896c:	b29a      	uxth	r2, r3
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800897a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800897c:	f7f8 fe9a 	bl	80016b4 <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008988:	429a      	cmp	r2, r3
 800898a:	d803      	bhi.n	8008994 <HAL_SPI_TransmitReceive+0x2f8>
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008992:	d102      	bne.n	800899a <HAL_SPI_TransmitReceive+0x2fe>
 8008994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008996:	2b00      	cmp	r3, #0
 8008998:	d114      	bne.n	80089c4 <HAL_SPI_TransmitReceive+0x328>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 f8c4 	bl	8008b28 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e0ac      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80089c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d195      	bne.n	80088f6 <HAL_SPI_TransmitReceive+0x25a>
 80089ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d192      	bne.n	80088f6 <HAL_SPI_TransmitReceive+0x25a>
 80089d0:	e07e      	b.n	8008ad0 <HAL_SPI_TransmitReceive+0x434>
 80089d2:	bf00      	nop
 80089d4:	40013000 	.word	0x40013000
 80089d8:	50013000 	.word	0x50013000
 80089dc:	40003800 	.word	0x40003800
 80089e0:	50003800 	.word	0x50003800
 80089e4:	40003c00 	.word	0x40003c00
 80089e8:	50003c00 	.word	0x50003c00
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	f003 0302 	and.w	r3, r3, #2
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d11b      	bne.n	8008a32 <HAL_SPI_TransmitReceive+0x396>
 80089fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d018      	beq.n	8008a32 <HAL_SPI_TransmitReceive+0x396>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3320      	adds	r3, #32
 8008a0a:	7812      	ldrb	r2, [r2, #0]
 8008a0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	3b01      	subs	r3, #1
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a30:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	695b      	ldr	r3, [r3, #20]
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d11d      	bne.n	8008a7c <HAL_SPI_TransmitReceive+0x3e0>
 8008a40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d01a      	beq.n	8008a7c <HAL_SPI_TransmitReceive+0x3e0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a52:	7812      	ldrb	r2, [r2, #0]
 8008a54:	b2d2      	uxtb	r2, r2
 8008a56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a5c:	1c5a      	adds	r2, r3, #1
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008a7a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a7c:	f7f8 fe1a 	bl	80016b4 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d803      	bhi.n	8008a94 <HAL_SPI_TransmitReceive+0x3f8>
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a92:	d102      	bne.n	8008a9a <HAL_SPI_TransmitReceive+0x3fe>
 8008a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d114      	bne.n	8008ac4 <HAL_SPI_TransmitReceive+0x428>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f000 f844 	bl	8008b28 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e02c      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008ac4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d190      	bne.n	80089ec <HAL_SPI_TransmitReceive+0x350>
 8008aca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d18d      	bne.n	80089ec <HAL_SPI_TransmitReceive+0x350>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2108      	movs	r1, #8
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f000 f8c4 	bl	8008c68 <SPI_WaitOnFlagUntilTimeout>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d007      	beq.n	8008af6 <HAL_SPI_TransmitReceive+0x45a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aec:	f043 0220 	orr.w	r2, r3, #32
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 f816 	bl	8008b28 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <HAL_SPI_TransmitReceive+0x47e>
  {
    return HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	e001      	b.n	8008b1e <HAL_SPI_TransmitReceive+0x482>
  }
  return errorcode;
 8008b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3728      	adds	r7, #40	; 0x28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop

08008b28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	699a      	ldr	r2, [r3, #24]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f042 0208 	orr.w	r2, r2, #8
 8008b46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699a      	ldr	r2, [r3, #24]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f042 0210 	orr.w	r2, r2, #16
 8008b56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0201 	bic.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	6812      	ldr	r2, [r2, #0]
 8008b72:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8008b76:	f023 0303 	bic.w	r3, r3, #3
 8008b7a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689a      	ldr	r2, [r3, #8]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008b8a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d014      	beq.n	8008bc2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00f      	beq.n	8008bc2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ba8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	699a      	ldr	r2, [r3, #24]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f042 0220 	orr.w	r2, r2, #32
 8008bc0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d014      	beq.n	8008bf8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00f      	beq.n	8008bf8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bde:	f043 0204 	orr.w	r2, r3, #4
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	699a      	ldr	r2, [r3, #24]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bf6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00f      	beq.n	8008c22 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c08:	f043 0201 	orr.w	r2, r3, #1
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	699a      	ldr	r2, [r3, #24]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c20:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00f      	beq.n	8008c4c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c32:	f043 0208 	orr.w	r2, r3, #8
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	699a      	ldr	r2, [r3, #24]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c4a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8008c5c:	bf00      	nop
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	603b      	str	r3, [r7, #0]
 8008c74:	4613      	mov	r3, r2
 8008c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008c78:	e010      	b.n	8008c9c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c7a:	f7f8 fd1b 	bl	80016b4 <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	683a      	ldr	r2, [r7, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d803      	bhi.n	8008c92 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c90:	d102      	bne.n	8008c98 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d101      	bne.n	8008c9c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e00f      	b.n	8008cbc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695a      	ldr	r2, [r3, #20]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	bf0c      	ite	eq
 8008cac:	2301      	moveq	r3, #1
 8008cae:	2300      	movne	r3, #0
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	79fb      	ldrb	r3, [r7, #7]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d0df      	beq.n	8008c7a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd0:	095b      	lsrs	r3, r3, #5
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	3307      	adds	r3, #7
 8008ce2:	08db      	lsrs	r3, r3, #3
 8008ce4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	fb02 f303 	mul.w	r3, r2, r3
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b082      	sub	sp, #8
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d101      	bne.n	8008d0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e042      	b.n	8008d92 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d106      	bne.n	8008d24 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7f8 fa4e 	bl	80011c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2224      	movs	r2, #36	; 0x24
 8008d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 0201 	bic.w	r2, r2, #1
 8008d3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d002      	beq.n	8008d4a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fab5 	bl	80092b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f8c4 	bl	8008ed8 <UART_SetConfig>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d101      	bne.n	8008d5a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d56:	2301      	movs	r3, #1
 8008d58:	e01b      	b.n	8008d92 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	689a      	ldr	r2, [r3, #8]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f042 0201 	orr.w	r2, r2, #1
 8008d88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 fb34 	bl	80093f8 <UART_CheckIdleState>
 8008d90:	4603      	mov	r3, r0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b08a      	sub	sp, #40	; 0x28
 8008d9e:	af02      	add	r7, sp, #8
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	603b      	str	r3, [r7, #0]
 8008da6:	4613      	mov	r3, r2
 8008da8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db0:	2b20      	cmp	r3, #32
 8008db2:	f040 808b 	bne.w	8008ecc <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <HAL_UART_Transmit+0x28>
 8008dbc:	88fb      	ldrh	r3, [r7, #6]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e083      	b.n	8008ece <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd0:	2b80      	cmp	r3, #128	; 0x80
 8008dd2:	d107      	bne.n	8008de4 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	689a      	ldr	r2, [r3, #8]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008de2:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2221      	movs	r2, #33	; 0x21
 8008df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008df4:	f7f8 fc5e 	bl	80016b4 <HAL_GetTick>
 8008df8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	88fa      	ldrh	r2, [r7, #6]
 8008dfe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	88fa      	ldrh	r2, [r7, #6]
 8008e06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e12:	d108      	bne.n	8008e26 <HAL_UART_Transmit+0x8c>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d104      	bne.n	8008e26 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	61bb      	str	r3, [r7, #24]
 8008e24:	e003      	b.n	8008e2e <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e2e:	e030      	b.n	8008e92 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2200      	movs	r2, #0
 8008e38:	2180      	movs	r1, #128	; 0x80
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fb86 	bl	800954c <UART_WaitOnFlagUntilTimeout>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d005      	beq.n	8008e52 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2220      	movs	r2, #32
 8008e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e03d      	b.n	8008ece <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10b      	bne.n	8008e70 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	881b      	ldrh	r3, [r3, #0]
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	3302      	adds	r3, #2
 8008e6c:	61bb      	str	r3, [r7, #24]
 8008e6e:	e007      	b.n	8008e80 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	781a      	ldrb	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1c8      	bne.n	8008e30 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2140      	movs	r1, #64	; 0x40
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 fb4f 	bl	800954c <UART_WaitOnFlagUntilTimeout>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d005      	beq.n	8008ec0 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e006      	b.n	8008ece <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e000      	b.n	8008ece <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008ecc:	2302      	movs	r3, #2
  }
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3720      	adds	r7, #32
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
	...

08008ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008edc:	b094      	sub	sp, #80	; 0x50
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	4b78      	ldr	r3, [pc, #480]	; (80090d0 <UART_SetConfig+0x1f8>)
 8008eee:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef2:	689a      	ldr	r2, [r3, #8]
 8008ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	431a      	orrs	r2, r3
 8008f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f02:	69db      	ldr	r3, [r3, #28]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4971      	ldr	r1, [pc, #452]	; (80090d4 <UART_SetConfig+0x1fc>)
 8008f10:	4019      	ands	r1, r3
 8008f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f18:	430b      	orrs	r3, r1
 8008f1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f28:	68d9      	ldr	r1, [r3, #12]
 8008f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	ea40 0301 	orr.w	r3, r0, r1
 8008f32:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	4b64      	ldr	r3, [pc, #400]	; (80090d0 <UART_SetConfig+0x1f8>)
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d009      	beq.n	8008f58 <UART_SetConfig+0x80>
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	4b63      	ldr	r3, [pc, #396]	; (80090d8 <UART_SetConfig+0x200>)
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d004      	beq.n	8008f58 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f50:	6a1a      	ldr	r2, [r3, #32]
 8008f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f54:	4313      	orrs	r3, r2
 8008f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008f62:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f6c:	430b      	orrs	r3, r1
 8008f6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f76:	f023 000f 	bic.w	r0, r3, #15
 8008f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	ea40 0301 	orr.w	r3, r0, r1
 8008f86:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	4b53      	ldr	r3, [pc, #332]	; (80090dc <UART_SetConfig+0x204>)
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d102      	bne.n	8008f98 <UART_SetConfig+0xc0>
 8008f92:	2301      	movs	r3, #1
 8008f94:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f96:	e066      	b.n	8009066 <UART_SetConfig+0x18e>
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	4b50      	ldr	r3, [pc, #320]	; (80090e0 <UART_SetConfig+0x208>)
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d102      	bne.n	8008fa8 <UART_SetConfig+0xd0>
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fa6:	e05e      	b.n	8009066 <UART_SetConfig+0x18e>
 8008fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	4b4d      	ldr	r3, [pc, #308]	; (80090e4 <UART_SetConfig+0x20c>)
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d102      	bne.n	8008fb8 <UART_SetConfig+0xe0>
 8008fb2:	2304      	movs	r3, #4
 8008fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fb6:	e056      	b.n	8009066 <UART_SetConfig+0x18e>
 8008fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	4b4a      	ldr	r3, [pc, #296]	; (80090e8 <UART_SetConfig+0x210>)
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d102      	bne.n	8008fc8 <UART_SetConfig+0xf0>
 8008fc2:	2308      	movs	r3, #8
 8008fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fc6:	e04e      	b.n	8009066 <UART_SetConfig+0x18e>
 8008fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	4b47      	ldr	r3, [pc, #284]	; (80090ec <UART_SetConfig+0x214>)
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d102      	bne.n	8008fd8 <UART_SetConfig+0x100>
 8008fd2:	2310      	movs	r3, #16
 8008fd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fd6:	e046      	b.n	8009066 <UART_SetConfig+0x18e>
 8008fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	4b44      	ldr	r3, [pc, #272]	; (80090f0 <UART_SetConfig+0x218>)
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d102      	bne.n	8008fe8 <UART_SetConfig+0x110>
 8008fe2:	2320      	movs	r3, #32
 8008fe4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fe6:	e03e      	b.n	8009066 <UART_SetConfig+0x18e>
 8008fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	4b41      	ldr	r3, [pc, #260]	; (80090f4 <UART_SetConfig+0x21c>)
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d102      	bne.n	8008ff8 <UART_SetConfig+0x120>
 8008ff2:	2340      	movs	r3, #64	; 0x40
 8008ff4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ff6:	e036      	b.n	8009066 <UART_SetConfig+0x18e>
 8008ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	4b3e      	ldr	r3, [pc, #248]	; (80090f8 <UART_SetConfig+0x220>)
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d102      	bne.n	8009008 <UART_SetConfig+0x130>
 8009002:	2380      	movs	r3, #128	; 0x80
 8009004:	64bb      	str	r3, [r7, #72]	; 0x48
 8009006:	e02e      	b.n	8009066 <UART_SetConfig+0x18e>
 8009008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	4b3b      	ldr	r3, [pc, #236]	; (80090fc <UART_SetConfig+0x224>)
 800900e:	429a      	cmp	r2, r3
 8009010:	d103      	bne.n	800901a <UART_SetConfig+0x142>
 8009012:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009016:	64bb      	str	r3, [r7, #72]	; 0x48
 8009018:	e025      	b.n	8009066 <UART_SetConfig+0x18e>
 800901a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	4b38      	ldr	r3, [pc, #224]	; (8009100 <UART_SetConfig+0x228>)
 8009020:	429a      	cmp	r2, r3
 8009022:	d103      	bne.n	800902c <UART_SetConfig+0x154>
 8009024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009028:	64bb      	str	r3, [r7, #72]	; 0x48
 800902a:	e01c      	b.n	8009066 <UART_SetConfig+0x18e>
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	4b34      	ldr	r3, [pc, #208]	; (8009104 <UART_SetConfig+0x22c>)
 8009032:	429a      	cmp	r2, r3
 8009034:	d103      	bne.n	800903e <UART_SetConfig+0x166>
 8009036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800903a:	64bb      	str	r3, [r7, #72]	; 0x48
 800903c:	e013      	b.n	8009066 <UART_SetConfig+0x18e>
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	4b31      	ldr	r3, [pc, #196]	; (8009108 <UART_SetConfig+0x230>)
 8009044:	429a      	cmp	r2, r3
 8009046:	d103      	bne.n	8009050 <UART_SetConfig+0x178>
 8009048:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800904c:	64bb      	str	r3, [r7, #72]	; 0x48
 800904e:	e00a      	b.n	8009066 <UART_SetConfig+0x18e>
 8009050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	4b1e      	ldr	r3, [pc, #120]	; (80090d0 <UART_SetConfig+0x1f8>)
 8009056:	429a      	cmp	r2, r3
 8009058:	d103      	bne.n	8009062 <UART_SetConfig+0x18a>
 800905a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800905e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009060:	e001      	b.n	8009066 <UART_SetConfig+0x18e>
 8009062:	2300      	movs	r3, #0
 8009064:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	4b19      	ldr	r3, [pc, #100]	; (80090d0 <UART_SetConfig+0x1f8>)
 800906c:	429a      	cmp	r2, r3
 800906e:	d005      	beq.n	800907c <UART_SetConfig+0x1a4>
 8009070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	4b18      	ldr	r3, [pc, #96]	; (80090d8 <UART_SetConfig+0x200>)
 8009076:	429a      	cmp	r2, r3
 8009078:	f040 8094 	bne.w	80091a4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800907c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800907e:	2200      	movs	r2, #0
 8009080:	623b      	str	r3, [r7, #32]
 8009082:	627a      	str	r2, [r7, #36]	; 0x24
 8009084:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009088:	f7fc f932 	bl	80052f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800908c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800908e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 80f7 	beq.w	8009284 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	4a1c      	ldr	r2, [pc, #112]	; (800910c <UART_SetConfig+0x234>)
 800909c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090a0:	461a      	mov	r2, r3
 80090a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80090a8:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	4613      	mov	r3, r2
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	4413      	add	r3, r2
 80090b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d305      	bcc.n	80090c6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d924      	bls.n	8009110 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80090cc:	e069      	b.n	80091a2 <UART_SetConfig+0x2ca>
 80090ce:	bf00      	nop
 80090d0:	44002400 	.word	0x44002400
 80090d4:	cfff69f3 	.word	0xcfff69f3
 80090d8:	54002400 	.word	0x54002400
 80090dc:	40013800 	.word	0x40013800
 80090e0:	40004400 	.word	0x40004400
 80090e4:	40004800 	.word	0x40004800
 80090e8:	40004c00 	.word	0x40004c00
 80090ec:	40005000 	.word	0x40005000
 80090f0:	40006400 	.word	0x40006400
 80090f4:	40007800 	.word	0x40007800
 80090f8:	40007c00 	.word	0x40007c00
 80090fc:	40008000 	.word	0x40008000
 8009100:	40006800 	.word	0x40006800
 8009104:	40006c00 	.word	0x40006c00
 8009108:	40008400 	.word	0x40008400
 800910c:	0800a408 	.word	0x0800a408
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009112:	2200      	movs	r2, #0
 8009114:	61bb      	str	r3, [r7, #24]
 8009116:	61fa      	str	r2, [r7, #28]
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	4a64      	ldr	r2, [pc, #400]	; (80092b0 <UART_SetConfig+0x3d8>)
 800911e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009122:	b29b      	uxth	r3, r3
 8009124:	2200      	movs	r2, #0
 8009126:	613b      	str	r3, [r7, #16]
 8009128:	617a      	str	r2, [r7, #20]
 800912a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800912e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009132:	f7f7 f8ab 	bl	800028c <__aeabi_uldivmod>
 8009136:	4602      	mov	r2, r0
 8009138:	460b      	mov	r3, r1
 800913a:	4610      	mov	r0, r2
 800913c:	4619      	mov	r1, r3
 800913e:	f04f 0200 	mov.w	r2, #0
 8009142:	f04f 0300 	mov.w	r3, #0
 8009146:	020b      	lsls	r3, r1, #8
 8009148:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800914c:	0202      	lsls	r2, r0, #8
 800914e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009150:	6849      	ldr	r1, [r1, #4]
 8009152:	0849      	lsrs	r1, r1, #1
 8009154:	2000      	movs	r0, #0
 8009156:	460c      	mov	r4, r1
 8009158:	4605      	mov	r5, r0
 800915a:	eb12 0804 	adds.w	r8, r2, r4
 800915e:	eb43 0905 	adc.w	r9, r3, r5
 8009162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	60bb      	str	r3, [r7, #8]
 800916a:	60fa      	str	r2, [r7, #12]
 800916c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009170:	4640      	mov	r0, r8
 8009172:	4649      	mov	r1, r9
 8009174:	f7f7 f88a 	bl	800028c <__aeabi_uldivmod>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4613      	mov	r3, r2
 800917e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009186:	d308      	bcc.n	800919a <UART_SetConfig+0x2c2>
 8009188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800918e:	d204      	bcs.n	800919a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8009190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009196:	60da      	str	r2, [r3, #12]
 8009198:	e003      	b.n	80091a2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80091a0:	e070      	b.n	8009284 <UART_SetConfig+0x3ac>
 80091a2:	e06f      	b.n	8009284 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a6:	69db      	ldr	r3, [r3, #28]
 80091a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091ac:	d13c      	bne.n	8009228 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80091ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091b0:	2200      	movs	r2, #0
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	607a      	str	r2, [r7, #4]
 80091b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80091ba:	f7fc f899 	bl	80052f0 <HAL_RCCEx_GetPeriphCLKFreq>
 80091be:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d05e      	beq.n	8009284 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	4a39      	ldr	r2, [pc, #228]	; (80092b0 <UART_SetConfig+0x3d8>)
 80091cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091d0:	461a      	mov	r2, r3
 80091d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80091d8:	005a      	lsls	r2, r3, #1
 80091da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	085b      	lsrs	r3, r3, #1
 80091e0:	441a      	add	r2, r3
 80091e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ee:	2b0f      	cmp	r3, #15
 80091f0:	d916      	bls.n	8009220 <UART_SetConfig+0x348>
 80091f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091f8:	d212      	bcs.n	8009220 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	f023 030f 	bic.w	r3, r3, #15
 8009202:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009206:	085b      	lsrs	r3, r3, #1
 8009208:	b29b      	uxth	r3, r3
 800920a:	f003 0307 	and.w	r3, r3, #7
 800920e:	b29a      	uxth	r2, r3
 8009210:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009212:	4313      	orrs	r3, r2
 8009214:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8009216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800921c:	60da      	str	r2, [r3, #12]
 800921e:	e031      	b.n	8009284 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009226:	e02d      	b.n	8009284 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800922a:	2200      	movs	r2, #0
 800922c:	469a      	mov	sl, r3
 800922e:	4693      	mov	fp, r2
 8009230:	4650      	mov	r0, sl
 8009232:	4659      	mov	r1, fp
 8009234:	f7fc f85c 	bl	80052f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8009238:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800923a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800923c:	2b00      	cmp	r3, #0
 800923e:	d021      	beq.n	8009284 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009244:	4a1a      	ldr	r2, [pc, #104]	; (80092b0 <UART_SetConfig+0x3d8>)
 8009246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800924a:	461a      	mov	r2, r3
 800924c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800924e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	085b      	lsrs	r3, r3, #1
 8009258:	441a      	add	r2, r3
 800925a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009262:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009266:	2b0f      	cmp	r3, #15
 8009268:	d909      	bls.n	800927e <UART_SetConfig+0x3a6>
 800926a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800926c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009270:	d205      	bcs.n	800927e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009274:	b29a      	uxth	r2, r3
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60da      	str	r2, [r3, #12]
 800927c:	e002      	b.n	8009284 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009286:	2201      	movs	r2, #1
 8009288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928e:	2201      	movs	r2, #1
 8009290:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009296:	2200      	movs	r2, #0
 8009298:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800929a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929c:	2200      	movs	r2, #0
 800929e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80092a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3750      	adds	r7, #80	; 0x50
 80092a8:	46bd      	mov	sp, r7
 80092aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092ae:	bf00      	nop
 80092b0:	0800a408 	.word	0x0800a408

080092b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c0:	f003 0308 	and.w	r3, r3, #8
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00a      	beq.n	80092de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00a      	beq.n	8009300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009304:	f003 0302 	and.w	r3, r3, #2
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00a      	beq.n	8009322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685b      	ldr	r3, [r3, #4]
 8009312:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009326:	f003 0304 	and.w	r3, r3, #4
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00a      	beq.n	8009344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009348:	f003 0310 	and.w	r3, r3, #16
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00a      	beq.n	8009366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	430a      	orrs	r2, r1
 8009364:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936a:	f003 0320 	and.w	r3, r3, #32
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00a      	beq.n	8009388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009390:	2b00      	cmp	r3, #0
 8009392:	d01a      	beq.n	80093ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093b2:	d10a      	bne.n	80093ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00a      	beq.n	80093ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	430a      	orrs	r2, r1
 80093ea:	605a      	str	r2, [r3, #4]
  }
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b098      	sub	sp, #96	; 0x60
 80093fc:	af02      	add	r7, sp, #8
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009408:	f7f8 f954 	bl	80016b4 <HAL_GetTick>
 800940c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0308 	and.w	r3, r3, #8
 8009418:	2b08      	cmp	r3, #8
 800941a:	d12f      	bne.n	800947c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800941c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009424:	2200      	movs	r2, #0
 8009426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f88e 	bl	800954c <UART_WaitOnFlagUntilTimeout>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d022      	beq.n	800947c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943e:	e853 3f00 	ldrex	r3, [r3]
 8009442:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800944a:	653b      	str	r3, [r7, #80]	; 0x50
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009454:	647b      	str	r3, [r7, #68]	; 0x44
 8009456:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800945a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800945c:	e841 2300 	strex	r3, r2, [r1]
 8009460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1e6      	bne.n	8009436 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2220      	movs	r2, #32
 800946c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e063      	b.n	8009544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f003 0304 	and.w	r3, r3, #4
 8009486:	2b04      	cmp	r3, #4
 8009488:	d149      	bne.n	800951e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800948a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009492:	2200      	movs	r2, #0
 8009494:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f857 	bl	800954c <UART_WaitOnFlagUntilTimeout>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d03c      	beq.n	800951e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ac:	e853 3f00 	ldrex	r3, [r3]
 80094b0:	623b      	str	r3, [r7, #32]
   return(result);
 80094b2:	6a3b      	ldr	r3, [r7, #32]
 80094b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094c2:	633b      	str	r3, [r7, #48]	; 0x30
 80094c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ca:	e841 2300 	strex	r3, r2, [r1]
 80094ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1e6      	bne.n	80094a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3308      	adds	r3, #8
 80094dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	e853 3f00 	ldrex	r3, [r3]
 80094e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f023 0301 	bic.w	r3, r3, #1
 80094ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3308      	adds	r3, #8
 80094f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094f6:	61fa      	str	r2, [r7, #28]
 80094f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	69b9      	ldr	r1, [r7, #24]
 80094fc:	69fa      	ldr	r2, [r7, #28]
 80094fe:	e841 2300 	strex	r3, r2, [r1]
 8009502:	617b      	str	r3, [r7, #20]
   return(result);
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d1e5      	bne.n	80094d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2220      	movs	r2, #32
 800950e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	e012      	b.n	8009544 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2220      	movs	r2, #32
 8009522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2220      	movs	r2, #32
 800952a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3758      	adds	r7, #88	; 0x58
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	603b      	str	r3, [r7, #0]
 8009558:	4613      	mov	r3, r2
 800955a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800955c:	e049      	b.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009564:	d045      	beq.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009566:	f7f8 f8a5 	bl	80016b4 <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	69ba      	ldr	r2, [r7, #24]
 8009572:	429a      	cmp	r2, r3
 8009574:	d302      	bcc.n	800957c <UART_WaitOnFlagUntilTimeout+0x30>
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800957c:	2303      	movs	r3, #3
 800957e:	e048      	b.n	8009612 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 0304 	and.w	r3, r3, #4
 800958a:	2b00      	cmp	r3, #0
 800958c:	d031      	beq.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69db      	ldr	r3, [r3, #28]
 8009594:	f003 0308 	and.w	r3, r3, #8
 8009598:	2b08      	cmp	r3, #8
 800959a:	d110      	bne.n	80095be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2208      	movs	r2, #8
 80095a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f000 f838 	bl	800961a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2208      	movs	r2, #8
 80095ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e029      	b.n	8009612 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69db      	ldr	r3, [r3, #28]
 80095c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095cc:	d111      	bne.n	80095f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 f81e 	bl	800961a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2220      	movs	r2, #32
 80095e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	e00f      	b.n	8009612 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	69da      	ldr	r2, [r3, #28]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	4013      	ands	r3, r2
 80095fc:	68ba      	ldr	r2, [r7, #8]
 80095fe:	429a      	cmp	r2, r3
 8009600:	bf0c      	ite	eq
 8009602:	2301      	moveq	r3, #1
 8009604:	2300      	movne	r3, #0
 8009606:	b2db      	uxtb	r3, r3
 8009608:	461a      	mov	r2, r3
 800960a:	79fb      	ldrb	r3, [r7, #7]
 800960c:	429a      	cmp	r2, r3
 800960e:	d0a6      	beq.n	800955e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800961a:	b480      	push	{r7}
 800961c:	b095      	sub	sp, #84	; 0x54
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800962a:	e853 3f00 	ldrex	r3, [r3]
 800962e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009632:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	461a      	mov	r2, r3
 800963e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009640:	643b      	str	r3, [r7, #64]	; 0x40
 8009642:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009646:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800964e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e6      	bne.n	8009622 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	3308      	adds	r3, #8
 800965a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	61fb      	str	r3, [r7, #28]
   return(result);
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800966a:	f023 0301 	bic.w	r3, r3, #1
 800966e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3308      	adds	r3, #8
 8009676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009678:	62fa      	str	r2, [r7, #44]	; 0x2c
 800967a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800967e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009680:	e841 2300 	strex	r3, r2, [r1]
 8009684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e3      	bne.n	8009654 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009690:	2b01      	cmp	r3, #1
 8009692:	d118      	bne.n	80096c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	e853 3f00 	ldrex	r3, [r3]
 80096a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f023 0310 	bic.w	r3, r3, #16
 80096a8:	647b      	str	r3, [r7, #68]	; 0x44
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096b2:	61bb      	str	r3, [r7, #24]
 80096b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	6979      	ldr	r1, [r7, #20]
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	613b      	str	r3, [r7, #16]
   return(result);
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e6      	bne.n	8009694 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80096da:	bf00      	nop
 80096dc:	3754      	adds	r7, #84	; 0x54
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b085      	sub	sp, #20
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d101      	bne.n	80096fc <HAL_UARTEx_DisableFifoMode+0x16>
 80096f8:	2302      	movs	r3, #2
 80096fa:	e027      	b.n	800974c <HAL_UARTEx_DisableFifoMode+0x66>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2224      	movs	r2, #36	; 0x24
 8009708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f022 0201 	bic.w	r2, r2, #1
 8009722:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800972a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2220      	movs	r2, #32
 800973e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009768:	2b01      	cmp	r3, #1
 800976a:	d101      	bne.n	8009770 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800976c:	2302      	movs	r3, #2
 800976e:	e02d      	b.n	80097cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2224      	movs	r2, #36	; 0x24
 800977c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f022 0201 	bic.w	r2, r2, #1
 8009796:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	689b      	ldr	r3, [r3, #8]
 800979e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	430a      	orrs	r2, r1
 80097aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f84f 	bl	8009850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2220      	movs	r2, #32
 80097be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
 80097dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d101      	bne.n	80097ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097e8:	2302      	movs	r3, #2
 80097ea:	e02d      	b.n	8009848 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2224      	movs	r2, #36	; 0x24
 80097f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f022 0201 	bic.w	r2, r2, #1
 8009812:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	430a      	orrs	r2, r1
 8009826:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f811 	bl	8009850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	68fa      	ldr	r2, [r7, #12]
 8009834:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2220      	movs	r2, #32
 800983a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800985c:	2b00      	cmp	r3, #0
 800985e:	d108      	bne.n	8009872 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009870:	e031      	b.n	80098d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009872:	2308      	movs	r3, #8
 8009874:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009876:	2308      	movs	r3, #8
 8009878:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	0e5b      	lsrs	r3, r3, #25
 8009882:	b2db      	uxtb	r3, r3
 8009884:	f003 0307 	and.w	r3, r3, #7
 8009888:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	0f5b      	lsrs	r3, r3, #29
 8009892:	b2db      	uxtb	r3, r3
 8009894:	f003 0307 	and.w	r3, r3, #7
 8009898:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800989a:	7bbb      	ldrb	r3, [r7, #14]
 800989c:	7b3a      	ldrb	r2, [r7, #12]
 800989e:	4911      	ldr	r1, [pc, #68]	; (80098e4 <UARTEx_SetNbDataToProcess+0x94>)
 80098a0:	5c8a      	ldrb	r2, [r1, r2]
 80098a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098a6:	7b3a      	ldrb	r2, [r7, #12]
 80098a8:	490f      	ldr	r1, [pc, #60]	; (80098e8 <UARTEx_SetNbDataToProcess+0x98>)
 80098aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
 80098ba:	7b7a      	ldrb	r2, [r7, #13]
 80098bc:	4909      	ldr	r1, [pc, #36]	; (80098e4 <UARTEx_SetNbDataToProcess+0x94>)
 80098be:	5c8a      	ldrb	r2, [r1, r2]
 80098c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098c4:	7b7a      	ldrb	r2, [r7, #13]
 80098c6:	4908      	ldr	r1, [pc, #32]	; (80098e8 <UARTEx_SetNbDataToProcess+0x98>)
 80098c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80098ce:	b29a      	uxth	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80098d6:	bf00      	nop
 80098d8:	3714      	adds	r7, #20
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	0800a420 	.word	0x0800a420
 80098e8:	0800a428 	.word	0x0800a428

080098ec <std>:
 80098ec:	2300      	movs	r3, #0
 80098ee:	b510      	push	{r4, lr}
 80098f0:	4604      	mov	r4, r0
 80098f2:	6083      	str	r3, [r0, #8]
 80098f4:	8181      	strh	r1, [r0, #12]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6643      	str	r3, [r0, #100]	; 0x64
 80098fa:	81c2      	strh	r2, [r0, #14]
 80098fc:	2208      	movs	r2, #8
 80098fe:	6183      	str	r3, [r0, #24]
 8009900:	e9c0 3300 	strd	r3, r3, [r0]
 8009904:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009908:	305c      	adds	r0, #92	; 0x5c
 800990a:	f000 f9e5 	bl	8009cd8 <memset>
 800990e:	4b0d      	ldr	r3, [pc, #52]	; (8009944 <std+0x58>)
 8009910:	6224      	str	r4, [r4, #32]
 8009912:	6263      	str	r3, [r4, #36]	; 0x24
 8009914:	4b0c      	ldr	r3, [pc, #48]	; (8009948 <std+0x5c>)
 8009916:	62a3      	str	r3, [r4, #40]	; 0x28
 8009918:	4b0c      	ldr	r3, [pc, #48]	; (800994c <std+0x60>)
 800991a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800991c:	4b0c      	ldr	r3, [pc, #48]	; (8009950 <std+0x64>)
 800991e:	6323      	str	r3, [r4, #48]	; 0x30
 8009920:	4b0c      	ldr	r3, [pc, #48]	; (8009954 <std+0x68>)
 8009922:	429c      	cmp	r4, r3
 8009924:	d006      	beq.n	8009934 <std+0x48>
 8009926:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800992a:	4294      	cmp	r4, r2
 800992c:	d002      	beq.n	8009934 <std+0x48>
 800992e:	33d0      	adds	r3, #208	; 0xd0
 8009930:	429c      	cmp	r4, r3
 8009932:	d105      	bne.n	8009940 <std+0x54>
 8009934:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800993c:	f000 ba44 	b.w	8009dc8 <__retarget_lock_init_recursive>
 8009940:	bd10      	pop	{r4, pc}
 8009942:	bf00      	nop
 8009944:	08009b29 	.word	0x08009b29
 8009948:	08009b4b 	.word	0x08009b4b
 800994c:	08009b83 	.word	0x08009b83
 8009950:	08009ba7 	.word	0x08009ba7
 8009954:	200001c4 	.word	0x200001c4

08009958 <stdio_exit_handler>:
 8009958:	4a02      	ldr	r2, [pc, #8]	; (8009964 <stdio_exit_handler+0xc>)
 800995a:	4903      	ldr	r1, [pc, #12]	; (8009968 <stdio_exit_handler+0x10>)
 800995c:	4803      	ldr	r0, [pc, #12]	; (800996c <stdio_exit_handler+0x14>)
 800995e:	f000 b869 	b.w	8009a34 <_fwalk_sglue>
 8009962:	bf00      	nop
 8009964:	2000000c 	.word	0x2000000c
 8009968:	0800a0c9 	.word	0x0800a0c9
 800996c:	20000018 	.word	0x20000018

08009970 <cleanup_stdio>:
 8009970:	6841      	ldr	r1, [r0, #4]
 8009972:	4b0c      	ldr	r3, [pc, #48]	; (80099a4 <cleanup_stdio+0x34>)
 8009974:	4299      	cmp	r1, r3
 8009976:	b510      	push	{r4, lr}
 8009978:	4604      	mov	r4, r0
 800997a:	d001      	beq.n	8009980 <cleanup_stdio+0x10>
 800997c:	f000 fba4 	bl	800a0c8 <_fflush_r>
 8009980:	68a1      	ldr	r1, [r4, #8]
 8009982:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <cleanup_stdio+0x38>)
 8009984:	4299      	cmp	r1, r3
 8009986:	d002      	beq.n	800998e <cleanup_stdio+0x1e>
 8009988:	4620      	mov	r0, r4
 800998a:	f000 fb9d 	bl	800a0c8 <_fflush_r>
 800998e:	68e1      	ldr	r1, [r4, #12]
 8009990:	4b06      	ldr	r3, [pc, #24]	; (80099ac <cleanup_stdio+0x3c>)
 8009992:	4299      	cmp	r1, r3
 8009994:	d004      	beq.n	80099a0 <cleanup_stdio+0x30>
 8009996:	4620      	mov	r0, r4
 8009998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800999c:	f000 bb94 	b.w	800a0c8 <_fflush_r>
 80099a0:	bd10      	pop	{r4, pc}
 80099a2:	bf00      	nop
 80099a4:	200001c4 	.word	0x200001c4
 80099a8:	2000022c 	.word	0x2000022c
 80099ac:	20000294 	.word	0x20000294

080099b0 <global_stdio_init.part.0>:
 80099b0:	b510      	push	{r4, lr}
 80099b2:	4b0b      	ldr	r3, [pc, #44]	; (80099e0 <global_stdio_init.part.0+0x30>)
 80099b4:	2104      	movs	r1, #4
 80099b6:	4c0b      	ldr	r4, [pc, #44]	; (80099e4 <global_stdio_init.part.0+0x34>)
 80099b8:	4a0b      	ldr	r2, [pc, #44]	; (80099e8 <global_stdio_init.part.0+0x38>)
 80099ba:	4620      	mov	r0, r4
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	2200      	movs	r2, #0
 80099c0:	f7ff ff94 	bl	80098ec <std>
 80099c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80099c8:	2201      	movs	r2, #1
 80099ca:	2109      	movs	r1, #9
 80099cc:	f7ff ff8e 	bl	80098ec <std>
 80099d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80099d4:	2202      	movs	r2, #2
 80099d6:	2112      	movs	r1, #18
 80099d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099dc:	f7ff bf86 	b.w	80098ec <std>
 80099e0:	200002fc 	.word	0x200002fc
 80099e4:	200001c4 	.word	0x200001c4
 80099e8:	08009959 	.word	0x08009959

080099ec <__sfp_lock_acquire>:
 80099ec:	4801      	ldr	r0, [pc, #4]	; (80099f4 <__sfp_lock_acquire+0x8>)
 80099ee:	f000 b9ec 	b.w	8009dca <__retarget_lock_acquire_recursive>
 80099f2:	bf00      	nop
 80099f4:	20000305 	.word	0x20000305

080099f8 <__sfp_lock_release>:
 80099f8:	4801      	ldr	r0, [pc, #4]	; (8009a00 <__sfp_lock_release+0x8>)
 80099fa:	f000 b9e7 	b.w	8009dcc <__retarget_lock_release_recursive>
 80099fe:	bf00      	nop
 8009a00:	20000305 	.word	0x20000305

08009a04 <__sinit>:
 8009a04:	b510      	push	{r4, lr}
 8009a06:	4604      	mov	r4, r0
 8009a08:	f7ff fff0 	bl	80099ec <__sfp_lock_acquire>
 8009a0c:	6a23      	ldr	r3, [r4, #32]
 8009a0e:	b11b      	cbz	r3, 8009a18 <__sinit+0x14>
 8009a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a14:	f7ff bff0 	b.w	80099f8 <__sfp_lock_release>
 8009a18:	4b04      	ldr	r3, [pc, #16]	; (8009a2c <__sinit+0x28>)
 8009a1a:	6223      	str	r3, [r4, #32]
 8009a1c:	4b04      	ldr	r3, [pc, #16]	; (8009a30 <__sinit+0x2c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1f5      	bne.n	8009a10 <__sinit+0xc>
 8009a24:	f7ff ffc4 	bl	80099b0 <global_stdio_init.part.0>
 8009a28:	e7f2      	b.n	8009a10 <__sinit+0xc>
 8009a2a:	bf00      	nop
 8009a2c:	08009971 	.word	0x08009971
 8009a30:	200002fc 	.word	0x200002fc

08009a34 <_fwalk_sglue>:
 8009a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a38:	4607      	mov	r7, r0
 8009a3a:	4688      	mov	r8, r1
 8009a3c:	4614      	mov	r4, r2
 8009a3e:	2600      	movs	r6, #0
 8009a40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a44:	f1b9 0901 	subs.w	r9, r9, #1
 8009a48:	d505      	bpl.n	8009a56 <_fwalk_sglue+0x22>
 8009a4a:	6824      	ldr	r4, [r4, #0]
 8009a4c:	2c00      	cmp	r4, #0
 8009a4e:	d1f7      	bne.n	8009a40 <_fwalk_sglue+0xc>
 8009a50:	4630      	mov	r0, r6
 8009a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a56:	89ab      	ldrh	r3, [r5, #12]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d907      	bls.n	8009a6c <_fwalk_sglue+0x38>
 8009a5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a60:	3301      	adds	r3, #1
 8009a62:	d003      	beq.n	8009a6c <_fwalk_sglue+0x38>
 8009a64:	4629      	mov	r1, r5
 8009a66:	4638      	mov	r0, r7
 8009a68:	47c0      	blx	r8
 8009a6a:	4306      	orrs	r6, r0
 8009a6c:	3568      	adds	r5, #104	; 0x68
 8009a6e:	e7e9      	b.n	8009a44 <_fwalk_sglue+0x10>

08009a70 <_puts_r>:
 8009a70:	6a03      	ldr	r3, [r0, #32]
 8009a72:	b570      	push	{r4, r5, r6, lr}
 8009a74:	4605      	mov	r5, r0
 8009a76:	460e      	mov	r6, r1
 8009a78:	6884      	ldr	r4, [r0, #8]
 8009a7a:	b90b      	cbnz	r3, 8009a80 <_puts_r+0x10>
 8009a7c:	f7ff ffc2 	bl	8009a04 <__sinit>
 8009a80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a82:	07db      	lsls	r3, r3, #31
 8009a84:	d405      	bmi.n	8009a92 <_puts_r+0x22>
 8009a86:	89a3      	ldrh	r3, [r4, #12]
 8009a88:	0598      	lsls	r0, r3, #22
 8009a8a:	d402      	bmi.n	8009a92 <_puts_r+0x22>
 8009a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a8e:	f000 f99c 	bl	8009dca <__retarget_lock_acquire_recursive>
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	0719      	lsls	r1, r3, #28
 8009a96:	d513      	bpl.n	8009ac0 <_puts_r+0x50>
 8009a98:	6923      	ldr	r3, [r4, #16]
 8009a9a:	b18b      	cbz	r3, 8009ac0 <_puts_r+0x50>
 8009a9c:	3e01      	subs	r6, #1
 8009a9e:	68a3      	ldr	r3, [r4, #8]
 8009aa0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	60a3      	str	r3, [r4, #8]
 8009aa8:	b9e9      	cbnz	r1, 8009ae6 <_puts_r+0x76>
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	da2e      	bge.n	8009b0c <_puts_r+0x9c>
 8009aae:	4622      	mov	r2, r4
 8009ab0:	210a      	movs	r1, #10
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	f000 f87b 	bl	8009bae <__swbuf_r>
 8009ab8:	3001      	adds	r0, #1
 8009aba:	d007      	beq.n	8009acc <_puts_r+0x5c>
 8009abc:	250a      	movs	r5, #10
 8009abe:	e007      	b.n	8009ad0 <_puts_r+0x60>
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	f000 f8b0 	bl	8009c28 <__swsetup_r>
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d0e7      	beq.n	8009a9c <_puts_r+0x2c>
 8009acc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009ad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ad2:	07da      	lsls	r2, r3, #31
 8009ad4:	d405      	bmi.n	8009ae2 <_puts_r+0x72>
 8009ad6:	89a3      	ldrh	r3, [r4, #12]
 8009ad8:	059b      	lsls	r3, r3, #22
 8009ada:	d402      	bmi.n	8009ae2 <_puts_r+0x72>
 8009adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ade:	f000 f975 	bl	8009dcc <__retarget_lock_release_recursive>
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	bd70      	pop	{r4, r5, r6, pc}
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	da04      	bge.n	8009af4 <_puts_r+0x84>
 8009aea:	69a2      	ldr	r2, [r4, #24]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	dc06      	bgt.n	8009afe <_puts_r+0x8e>
 8009af0:	290a      	cmp	r1, #10
 8009af2:	d004      	beq.n	8009afe <_puts_r+0x8e>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	1c5a      	adds	r2, r3, #1
 8009af8:	6022      	str	r2, [r4, #0]
 8009afa:	7019      	strb	r1, [r3, #0]
 8009afc:	e7cf      	b.n	8009a9e <_puts_r+0x2e>
 8009afe:	4622      	mov	r2, r4
 8009b00:	4628      	mov	r0, r5
 8009b02:	f000 f854 	bl	8009bae <__swbuf_r>
 8009b06:	3001      	adds	r0, #1
 8009b08:	d1c9      	bne.n	8009a9e <_puts_r+0x2e>
 8009b0a:	e7df      	b.n	8009acc <_puts_r+0x5c>
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	250a      	movs	r5, #10
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	6022      	str	r2, [r4, #0]
 8009b14:	701d      	strb	r5, [r3, #0]
 8009b16:	e7db      	b.n	8009ad0 <_puts_r+0x60>

08009b18 <puts>:
 8009b18:	4b02      	ldr	r3, [pc, #8]	; (8009b24 <puts+0xc>)
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	6818      	ldr	r0, [r3, #0]
 8009b1e:	f7ff bfa7 	b.w	8009a70 <_puts_r>
 8009b22:	bf00      	nop
 8009b24:	20000064 	.word	0x20000064

08009b28 <__sread>:
 8009b28:	b510      	push	{r4, lr}
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b30:	f000 f8fc 	bl	8009d2c <_read_r>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	bfab      	itete	ge
 8009b38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b3a:	89a3      	ldrhlt	r3, [r4, #12]
 8009b3c:	181b      	addge	r3, r3, r0
 8009b3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b42:	bfac      	ite	ge
 8009b44:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b46:	81a3      	strhlt	r3, [r4, #12]
 8009b48:	bd10      	pop	{r4, pc}

08009b4a <__swrite>:
 8009b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4e:	461f      	mov	r7, r3
 8009b50:	898b      	ldrh	r3, [r1, #12]
 8009b52:	4605      	mov	r5, r0
 8009b54:	460c      	mov	r4, r1
 8009b56:	05db      	lsls	r3, r3, #23
 8009b58:	4616      	mov	r6, r2
 8009b5a:	d505      	bpl.n	8009b68 <__swrite+0x1e>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b64:	f000 f8d0 	bl	8009d08 <_lseek_r>
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	4632      	mov	r2, r6
 8009b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b70:	4628      	mov	r0, r5
 8009b72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b76:	81a3      	strh	r3, [r4, #12]
 8009b78:	463b      	mov	r3, r7
 8009b7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7e:	f000 b8e7 	b.w	8009d50 <_write_r>

08009b82 <__sseek>:
 8009b82:	b510      	push	{r4, lr}
 8009b84:	460c      	mov	r4, r1
 8009b86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b8a:	f000 f8bd 	bl	8009d08 <_lseek_r>
 8009b8e:	1c43      	adds	r3, r0, #1
 8009b90:	89a3      	ldrh	r3, [r4, #12]
 8009b92:	bf15      	itete	ne
 8009b94:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b9e:	81a3      	strheq	r3, [r4, #12]
 8009ba0:	bf18      	it	ne
 8009ba2:	81a3      	strhne	r3, [r4, #12]
 8009ba4:	bd10      	pop	{r4, pc}

08009ba6 <__sclose>:
 8009ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009baa:	f000 b89d 	b.w	8009ce8 <_close_r>

08009bae <__swbuf_r>:
 8009bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb0:	460e      	mov	r6, r1
 8009bb2:	4614      	mov	r4, r2
 8009bb4:	4605      	mov	r5, r0
 8009bb6:	b118      	cbz	r0, 8009bc0 <__swbuf_r+0x12>
 8009bb8:	6a03      	ldr	r3, [r0, #32]
 8009bba:	b90b      	cbnz	r3, 8009bc0 <__swbuf_r+0x12>
 8009bbc:	f7ff ff22 	bl	8009a04 <__sinit>
 8009bc0:	69a3      	ldr	r3, [r4, #24]
 8009bc2:	60a3      	str	r3, [r4, #8]
 8009bc4:	89a3      	ldrh	r3, [r4, #12]
 8009bc6:	071a      	lsls	r2, r3, #28
 8009bc8:	d525      	bpl.n	8009c16 <__swbuf_r+0x68>
 8009bca:	6923      	ldr	r3, [r4, #16]
 8009bcc:	b31b      	cbz	r3, 8009c16 <__swbuf_r+0x68>
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	b2f6      	uxtb	r6, r6
 8009bd2:	6922      	ldr	r2, [r4, #16]
 8009bd4:	4637      	mov	r7, r6
 8009bd6:	1a98      	subs	r0, r3, r2
 8009bd8:	6963      	ldr	r3, [r4, #20]
 8009bda:	4283      	cmp	r3, r0
 8009bdc:	dc04      	bgt.n	8009be8 <__swbuf_r+0x3a>
 8009bde:	4621      	mov	r1, r4
 8009be0:	4628      	mov	r0, r5
 8009be2:	f000 fa71 	bl	800a0c8 <_fflush_r>
 8009be6:	b9e0      	cbnz	r0, 8009c22 <__swbuf_r+0x74>
 8009be8:	68a3      	ldr	r3, [r4, #8]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	60a3      	str	r3, [r4, #8]
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	1c5a      	adds	r2, r3, #1
 8009bf2:	6022      	str	r2, [r4, #0]
 8009bf4:	701e      	strb	r6, [r3, #0]
 8009bf6:	1c43      	adds	r3, r0, #1
 8009bf8:	6962      	ldr	r2, [r4, #20]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d004      	beq.n	8009c08 <__swbuf_r+0x5a>
 8009bfe:	89a3      	ldrh	r3, [r4, #12]
 8009c00:	07db      	lsls	r3, r3, #31
 8009c02:	d506      	bpl.n	8009c12 <__swbuf_r+0x64>
 8009c04:	2e0a      	cmp	r6, #10
 8009c06:	d104      	bne.n	8009c12 <__swbuf_r+0x64>
 8009c08:	4621      	mov	r1, r4
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	f000 fa5c 	bl	800a0c8 <_fflush_r>
 8009c10:	b938      	cbnz	r0, 8009c22 <__swbuf_r+0x74>
 8009c12:	4638      	mov	r0, r7
 8009c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c16:	4621      	mov	r1, r4
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f000 f805 	bl	8009c28 <__swsetup_r>
 8009c1e:	2800      	cmp	r0, #0
 8009c20:	d0d5      	beq.n	8009bce <__swbuf_r+0x20>
 8009c22:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009c26:	e7f4      	b.n	8009c12 <__swbuf_r+0x64>

08009c28 <__swsetup_r>:
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4b2a      	ldr	r3, [pc, #168]	; (8009cd4 <__swsetup_r+0xac>)
 8009c2c:	4605      	mov	r5, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	6818      	ldr	r0, [r3, #0]
 8009c32:	b118      	cbz	r0, 8009c3c <__swsetup_r+0x14>
 8009c34:	6a03      	ldr	r3, [r0, #32]
 8009c36:	b90b      	cbnz	r3, 8009c3c <__swsetup_r+0x14>
 8009c38:	f7ff fee4 	bl	8009a04 <__sinit>
 8009c3c:	89a3      	ldrh	r3, [r4, #12]
 8009c3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c42:	0718      	lsls	r0, r3, #28
 8009c44:	d422      	bmi.n	8009c8c <__swsetup_r+0x64>
 8009c46:	06d9      	lsls	r1, r3, #27
 8009c48:	d407      	bmi.n	8009c5a <__swsetup_r+0x32>
 8009c4a:	2309      	movs	r3, #9
 8009c4c:	602b      	str	r3, [r5, #0]
 8009c4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c56:	81a3      	strh	r3, [r4, #12]
 8009c58:	e034      	b.n	8009cc4 <__swsetup_r+0x9c>
 8009c5a:	0758      	lsls	r0, r3, #29
 8009c5c:	d512      	bpl.n	8009c84 <__swsetup_r+0x5c>
 8009c5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c60:	b141      	cbz	r1, 8009c74 <__swsetup_r+0x4c>
 8009c62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c66:	4299      	cmp	r1, r3
 8009c68:	d002      	beq.n	8009c70 <__swsetup_r+0x48>
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	f000 f8b0 	bl	8009dd0 <_free_r>
 8009c70:	2300      	movs	r3, #0
 8009c72:	6363      	str	r3, [r4, #52]	; 0x34
 8009c74:	89a3      	ldrh	r3, [r4, #12]
 8009c76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c7a:	81a3      	strh	r3, [r4, #12]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	6063      	str	r3, [r4, #4]
 8009c80:	6923      	ldr	r3, [r4, #16]
 8009c82:	6023      	str	r3, [r4, #0]
 8009c84:	89a3      	ldrh	r3, [r4, #12]
 8009c86:	f043 0308 	orr.w	r3, r3, #8
 8009c8a:	81a3      	strh	r3, [r4, #12]
 8009c8c:	6923      	ldr	r3, [r4, #16]
 8009c8e:	b94b      	cbnz	r3, 8009ca4 <__swsetup_r+0x7c>
 8009c90:	89a3      	ldrh	r3, [r4, #12]
 8009c92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c9a:	d003      	beq.n	8009ca4 <__swsetup_r+0x7c>
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f000 fa5f 	bl	800a162 <__smakebuf_r>
 8009ca4:	89a0      	ldrh	r0, [r4, #12]
 8009ca6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009caa:	f010 0301 	ands.w	r3, r0, #1
 8009cae:	d00a      	beq.n	8009cc6 <__swsetup_r+0x9e>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	60a3      	str	r3, [r4, #8]
 8009cb4:	6963      	ldr	r3, [r4, #20]
 8009cb6:	425b      	negs	r3, r3
 8009cb8:	61a3      	str	r3, [r4, #24]
 8009cba:	6923      	ldr	r3, [r4, #16]
 8009cbc:	b943      	cbnz	r3, 8009cd0 <__swsetup_r+0xa8>
 8009cbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cc2:	d1c4      	bne.n	8009c4e <__swsetup_r+0x26>
 8009cc4:	bd38      	pop	{r3, r4, r5, pc}
 8009cc6:	0781      	lsls	r1, r0, #30
 8009cc8:	bf58      	it	pl
 8009cca:	6963      	ldrpl	r3, [r4, #20]
 8009ccc:	60a3      	str	r3, [r4, #8]
 8009cce:	e7f4      	b.n	8009cba <__swsetup_r+0x92>
 8009cd0:	2000      	movs	r0, #0
 8009cd2:	e7f7      	b.n	8009cc4 <__swsetup_r+0x9c>
 8009cd4:	20000064 	.word	0x20000064

08009cd8 <memset>:
 8009cd8:	4402      	add	r2, r0
 8009cda:	4603      	mov	r3, r0
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d100      	bne.n	8009ce2 <memset+0xa>
 8009ce0:	4770      	bx	lr
 8009ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ce6:	e7f9      	b.n	8009cdc <memset+0x4>

08009ce8 <_close_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	2300      	movs	r3, #0
 8009cec:	4d05      	ldr	r5, [pc, #20]	; (8009d04 <_close_r+0x1c>)
 8009cee:	4604      	mov	r4, r0
 8009cf0:	4608      	mov	r0, r1
 8009cf2:	602b      	str	r3, [r5, #0]
 8009cf4:	f7f7 fb5d 	bl	80013b2 <_close>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d102      	bne.n	8009d02 <_close_r+0x1a>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	b103      	cbz	r3, 8009d02 <_close_r+0x1a>
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	bd38      	pop	{r3, r4, r5, pc}
 8009d04:	20000300 	.word	0x20000300

08009d08 <_lseek_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	4d06      	ldr	r5, [pc, #24]	; (8009d28 <_lseek_r+0x20>)
 8009d0e:	4608      	mov	r0, r1
 8009d10:	4611      	mov	r1, r2
 8009d12:	2200      	movs	r2, #0
 8009d14:	602a      	str	r2, [r5, #0]
 8009d16:	461a      	mov	r2, r3
 8009d18:	f7f7 fb72 	bl	8001400 <_lseek>
 8009d1c:	1c43      	adds	r3, r0, #1
 8009d1e:	d102      	bne.n	8009d26 <_lseek_r+0x1e>
 8009d20:	682b      	ldr	r3, [r5, #0]
 8009d22:	b103      	cbz	r3, 8009d26 <_lseek_r+0x1e>
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	bd38      	pop	{r3, r4, r5, pc}
 8009d28:	20000300 	.word	0x20000300

08009d2c <_read_r>:
 8009d2c:	b538      	push	{r3, r4, r5, lr}
 8009d2e:	4604      	mov	r4, r0
 8009d30:	4d06      	ldr	r5, [pc, #24]	; (8009d4c <_read_r+0x20>)
 8009d32:	4608      	mov	r0, r1
 8009d34:	4611      	mov	r1, r2
 8009d36:	2200      	movs	r2, #0
 8009d38:	602a      	str	r2, [r5, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	f7f7 fb00 	bl	8001340 <_read>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d102      	bne.n	8009d4a <_read_r+0x1e>
 8009d44:	682b      	ldr	r3, [r5, #0]
 8009d46:	b103      	cbz	r3, 8009d4a <_read_r+0x1e>
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	bd38      	pop	{r3, r4, r5, pc}
 8009d4c:	20000300 	.word	0x20000300

08009d50 <_write_r>:
 8009d50:	b538      	push	{r3, r4, r5, lr}
 8009d52:	4604      	mov	r4, r0
 8009d54:	4d06      	ldr	r5, [pc, #24]	; (8009d70 <_write_r+0x20>)
 8009d56:	4608      	mov	r0, r1
 8009d58:	4611      	mov	r1, r2
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	602a      	str	r2, [r5, #0]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	f7f7 fb0b 	bl	800137a <_write>
 8009d64:	1c43      	adds	r3, r0, #1
 8009d66:	d102      	bne.n	8009d6e <_write_r+0x1e>
 8009d68:	682b      	ldr	r3, [r5, #0]
 8009d6a:	b103      	cbz	r3, 8009d6e <_write_r+0x1e>
 8009d6c:	6023      	str	r3, [r4, #0]
 8009d6e:	bd38      	pop	{r3, r4, r5, pc}
 8009d70:	20000300 	.word	0x20000300

08009d74 <__errno>:
 8009d74:	4b01      	ldr	r3, [pc, #4]	; (8009d7c <__errno+0x8>)
 8009d76:	6818      	ldr	r0, [r3, #0]
 8009d78:	4770      	bx	lr
 8009d7a:	bf00      	nop
 8009d7c:	20000064 	.word	0x20000064

08009d80 <__libc_init_array>:
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	4d0d      	ldr	r5, [pc, #52]	; (8009db8 <__libc_init_array+0x38>)
 8009d84:	2600      	movs	r6, #0
 8009d86:	4c0d      	ldr	r4, [pc, #52]	; (8009dbc <__libc_init_array+0x3c>)
 8009d88:	1b64      	subs	r4, r4, r5
 8009d8a:	10a4      	asrs	r4, r4, #2
 8009d8c:	42a6      	cmp	r6, r4
 8009d8e:	d109      	bne.n	8009da4 <__libc_init_array+0x24>
 8009d90:	4d0b      	ldr	r5, [pc, #44]	; (8009dc0 <__libc_init_array+0x40>)
 8009d92:	2600      	movs	r6, #0
 8009d94:	4c0b      	ldr	r4, [pc, #44]	; (8009dc4 <__libc_init_array+0x44>)
 8009d96:	f000 fa53 	bl	800a240 <_init>
 8009d9a:	1b64      	subs	r4, r4, r5
 8009d9c:	10a4      	asrs	r4, r4, #2
 8009d9e:	42a6      	cmp	r6, r4
 8009da0:	d105      	bne.n	8009dae <__libc_init_array+0x2e>
 8009da2:	bd70      	pop	{r4, r5, r6, pc}
 8009da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009da8:	3601      	adds	r6, #1
 8009daa:	4798      	blx	r3
 8009dac:	e7ee      	b.n	8009d8c <__libc_init_array+0xc>
 8009dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009db2:	3601      	adds	r6, #1
 8009db4:	4798      	blx	r3
 8009db6:	e7f2      	b.n	8009d9e <__libc_init_array+0x1e>
 8009db8:	0800a438 	.word	0x0800a438
 8009dbc:	0800a438 	.word	0x0800a438
 8009dc0:	0800a438 	.word	0x0800a438
 8009dc4:	0800a43c 	.word	0x0800a43c

08009dc8 <__retarget_lock_init_recursive>:
 8009dc8:	4770      	bx	lr

08009dca <__retarget_lock_acquire_recursive>:
 8009dca:	4770      	bx	lr

08009dcc <__retarget_lock_release_recursive>:
 8009dcc:	4770      	bx	lr
	...

08009dd0 <_free_r>:
 8009dd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dd2:	2900      	cmp	r1, #0
 8009dd4:	d043      	beq.n	8009e5e <_free_r+0x8e>
 8009dd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dda:	1f0c      	subs	r4, r1, #4
 8009ddc:	9001      	str	r0, [sp, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	bfb8      	it	lt
 8009de2:	18e4      	addlt	r4, r4, r3
 8009de4:	f000 f8e0 	bl	8009fa8 <__malloc_lock>
 8009de8:	4a1e      	ldr	r2, [pc, #120]	; (8009e64 <_free_r+0x94>)
 8009dea:	9801      	ldr	r0, [sp, #4]
 8009dec:	6813      	ldr	r3, [r2, #0]
 8009dee:	b933      	cbnz	r3, 8009dfe <_free_r+0x2e>
 8009df0:	6063      	str	r3, [r4, #4]
 8009df2:	6014      	str	r4, [r2, #0]
 8009df4:	b003      	add	sp, #12
 8009df6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dfa:	f000 b8db 	b.w	8009fb4 <__malloc_unlock>
 8009dfe:	42a3      	cmp	r3, r4
 8009e00:	d908      	bls.n	8009e14 <_free_r+0x44>
 8009e02:	6825      	ldr	r5, [r4, #0]
 8009e04:	1961      	adds	r1, r4, r5
 8009e06:	428b      	cmp	r3, r1
 8009e08:	bf01      	itttt	eq
 8009e0a:	6819      	ldreq	r1, [r3, #0]
 8009e0c:	685b      	ldreq	r3, [r3, #4]
 8009e0e:	1949      	addeq	r1, r1, r5
 8009e10:	6021      	streq	r1, [r4, #0]
 8009e12:	e7ed      	b.n	8009df0 <_free_r+0x20>
 8009e14:	461a      	mov	r2, r3
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	b10b      	cbz	r3, 8009e1e <_free_r+0x4e>
 8009e1a:	42a3      	cmp	r3, r4
 8009e1c:	d9fa      	bls.n	8009e14 <_free_r+0x44>
 8009e1e:	6811      	ldr	r1, [r2, #0]
 8009e20:	1855      	adds	r5, r2, r1
 8009e22:	42a5      	cmp	r5, r4
 8009e24:	d10b      	bne.n	8009e3e <_free_r+0x6e>
 8009e26:	6824      	ldr	r4, [r4, #0]
 8009e28:	4421      	add	r1, r4
 8009e2a:	1854      	adds	r4, r2, r1
 8009e2c:	6011      	str	r1, [r2, #0]
 8009e2e:	42a3      	cmp	r3, r4
 8009e30:	d1e0      	bne.n	8009df4 <_free_r+0x24>
 8009e32:	681c      	ldr	r4, [r3, #0]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	440c      	add	r4, r1
 8009e38:	6053      	str	r3, [r2, #4]
 8009e3a:	6014      	str	r4, [r2, #0]
 8009e3c:	e7da      	b.n	8009df4 <_free_r+0x24>
 8009e3e:	d902      	bls.n	8009e46 <_free_r+0x76>
 8009e40:	230c      	movs	r3, #12
 8009e42:	6003      	str	r3, [r0, #0]
 8009e44:	e7d6      	b.n	8009df4 <_free_r+0x24>
 8009e46:	6825      	ldr	r5, [r4, #0]
 8009e48:	1961      	adds	r1, r4, r5
 8009e4a:	428b      	cmp	r3, r1
 8009e4c:	bf02      	ittt	eq
 8009e4e:	6819      	ldreq	r1, [r3, #0]
 8009e50:	685b      	ldreq	r3, [r3, #4]
 8009e52:	1949      	addeq	r1, r1, r5
 8009e54:	6063      	str	r3, [r4, #4]
 8009e56:	bf08      	it	eq
 8009e58:	6021      	streq	r1, [r4, #0]
 8009e5a:	6054      	str	r4, [r2, #4]
 8009e5c:	e7ca      	b.n	8009df4 <_free_r+0x24>
 8009e5e:	b003      	add	sp, #12
 8009e60:	bd30      	pop	{r4, r5, pc}
 8009e62:	bf00      	nop
 8009e64:	20000308 	.word	0x20000308

08009e68 <sbrk_aligned>:
 8009e68:	b570      	push	{r4, r5, r6, lr}
 8009e6a:	4e0e      	ldr	r6, [pc, #56]	; (8009ea4 <sbrk_aligned+0x3c>)
 8009e6c:	460c      	mov	r4, r1
 8009e6e:	4605      	mov	r5, r0
 8009e70:	6831      	ldr	r1, [r6, #0]
 8009e72:	b911      	cbnz	r1, 8009e7a <sbrk_aligned+0x12>
 8009e74:	f000 f9d4 	bl	800a220 <_sbrk_r>
 8009e78:	6030      	str	r0, [r6, #0]
 8009e7a:	4621      	mov	r1, r4
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	f000 f9cf 	bl	800a220 <_sbrk_r>
 8009e82:	1c43      	adds	r3, r0, #1
 8009e84:	d00a      	beq.n	8009e9c <sbrk_aligned+0x34>
 8009e86:	1cc4      	adds	r4, r0, #3
 8009e88:	f024 0403 	bic.w	r4, r4, #3
 8009e8c:	42a0      	cmp	r0, r4
 8009e8e:	d007      	beq.n	8009ea0 <sbrk_aligned+0x38>
 8009e90:	1a21      	subs	r1, r4, r0
 8009e92:	4628      	mov	r0, r5
 8009e94:	f000 f9c4 	bl	800a220 <_sbrk_r>
 8009e98:	3001      	adds	r0, #1
 8009e9a:	d101      	bne.n	8009ea0 <sbrk_aligned+0x38>
 8009e9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	bd70      	pop	{r4, r5, r6, pc}
 8009ea4:	2000030c 	.word	0x2000030c

08009ea8 <_malloc_r>:
 8009ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eac:	1ccd      	adds	r5, r1, #3
 8009eae:	4607      	mov	r7, r0
 8009eb0:	f025 0503 	bic.w	r5, r5, #3
 8009eb4:	3508      	adds	r5, #8
 8009eb6:	2d0c      	cmp	r5, #12
 8009eb8:	bf38      	it	cc
 8009eba:	250c      	movcc	r5, #12
 8009ebc:	2d00      	cmp	r5, #0
 8009ebe:	db01      	blt.n	8009ec4 <_malloc_r+0x1c>
 8009ec0:	42a9      	cmp	r1, r5
 8009ec2:	d905      	bls.n	8009ed0 <_malloc_r+0x28>
 8009ec4:	230c      	movs	r3, #12
 8009ec6:	2600      	movs	r6, #0
 8009ec8:	603b      	str	r3, [r7, #0]
 8009eca:	4630      	mov	r0, r6
 8009ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009fa4 <_malloc_r+0xfc>
 8009ed4:	f000 f868 	bl	8009fa8 <__malloc_lock>
 8009ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8009edc:	461c      	mov	r4, r3
 8009ede:	bb5c      	cbnz	r4, 8009f38 <_malloc_r+0x90>
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	f7ff ffc0 	bl	8009e68 <sbrk_aligned>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	4604      	mov	r4, r0
 8009eec:	d155      	bne.n	8009f9a <_malloc_r+0xf2>
 8009eee:	f8d8 4000 	ldr.w	r4, [r8]
 8009ef2:	4626      	mov	r6, r4
 8009ef4:	2e00      	cmp	r6, #0
 8009ef6:	d145      	bne.n	8009f84 <_malloc_r+0xdc>
 8009ef8:	2c00      	cmp	r4, #0
 8009efa:	d048      	beq.n	8009f8e <_malloc_r+0xe6>
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	4631      	mov	r1, r6
 8009f00:	4638      	mov	r0, r7
 8009f02:	eb04 0903 	add.w	r9, r4, r3
 8009f06:	f000 f98b 	bl	800a220 <_sbrk_r>
 8009f0a:	4581      	cmp	r9, r0
 8009f0c:	d13f      	bne.n	8009f8e <_malloc_r+0xe6>
 8009f0e:	6821      	ldr	r1, [r4, #0]
 8009f10:	4638      	mov	r0, r7
 8009f12:	1a6d      	subs	r5, r5, r1
 8009f14:	4629      	mov	r1, r5
 8009f16:	f7ff ffa7 	bl	8009e68 <sbrk_aligned>
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	d037      	beq.n	8009f8e <_malloc_r+0xe6>
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	442b      	add	r3, r5
 8009f22:	6023      	str	r3, [r4, #0]
 8009f24:	f8d8 3000 	ldr.w	r3, [r8]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d038      	beq.n	8009f9e <_malloc_r+0xf6>
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	42a2      	cmp	r2, r4
 8009f30:	d12b      	bne.n	8009f8a <_malloc_r+0xe2>
 8009f32:	2200      	movs	r2, #0
 8009f34:	605a      	str	r2, [r3, #4]
 8009f36:	e00f      	b.n	8009f58 <_malloc_r+0xb0>
 8009f38:	6822      	ldr	r2, [r4, #0]
 8009f3a:	1b52      	subs	r2, r2, r5
 8009f3c:	d41f      	bmi.n	8009f7e <_malloc_r+0xd6>
 8009f3e:	2a0b      	cmp	r2, #11
 8009f40:	d917      	bls.n	8009f72 <_malloc_r+0xca>
 8009f42:	1961      	adds	r1, r4, r5
 8009f44:	42a3      	cmp	r3, r4
 8009f46:	6025      	str	r5, [r4, #0]
 8009f48:	bf18      	it	ne
 8009f4a:	6059      	strne	r1, [r3, #4]
 8009f4c:	6863      	ldr	r3, [r4, #4]
 8009f4e:	bf08      	it	eq
 8009f50:	f8c8 1000 	streq.w	r1, [r8]
 8009f54:	5162      	str	r2, [r4, r5]
 8009f56:	604b      	str	r3, [r1, #4]
 8009f58:	f104 060b 	add.w	r6, r4, #11
 8009f5c:	4638      	mov	r0, r7
 8009f5e:	f000 f829 	bl	8009fb4 <__malloc_unlock>
 8009f62:	1d23      	adds	r3, r4, #4
 8009f64:	f026 0607 	bic.w	r6, r6, #7
 8009f68:	1af2      	subs	r2, r6, r3
 8009f6a:	d0ae      	beq.n	8009eca <_malloc_r+0x22>
 8009f6c:	1b9b      	subs	r3, r3, r6
 8009f6e:	50a3      	str	r3, [r4, r2]
 8009f70:	e7ab      	b.n	8009eca <_malloc_r+0x22>
 8009f72:	42a3      	cmp	r3, r4
 8009f74:	6862      	ldr	r2, [r4, #4]
 8009f76:	d1dd      	bne.n	8009f34 <_malloc_r+0x8c>
 8009f78:	f8c8 2000 	str.w	r2, [r8]
 8009f7c:	e7ec      	b.n	8009f58 <_malloc_r+0xb0>
 8009f7e:	4623      	mov	r3, r4
 8009f80:	6864      	ldr	r4, [r4, #4]
 8009f82:	e7ac      	b.n	8009ede <_malloc_r+0x36>
 8009f84:	4634      	mov	r4, r6
 8009f86:	6876      	ldr	r6, [r6, #4]
 8009f88:	e7b4      	b.n	8009ef4 <_malloc_r+0x4c>
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	e7cc      	b.n	8009f28 <_malloc_r+0x80>
 8009f8e:	230c      	movs	r3, #12
 8009f90:	4638      	mov	r0, r7
 8009f92:	603b      	str	r3, [r7, #0]
 8009f94:	f000 f80e 	bl	8009fb4 <__malloc_unlock>
 8009f98:	e797      	b.n	8009eca <_malloc_r+0x22>
 8009f9a:	6025      	str	r5, [r4, #0]
 8009f9c:	e7dc      	b.n	8009f58 <_malloc_r+0xb0>
 8009f9e:	605b      	str	r3, [r3, #4]
 8009fa0:	deff      	udf	#255	; 0xff
 8009fa2:	bf00      	nop
 8009fa4:	20000308 	.word	0x20000308

08009fa8 <__malloc_lock>:
 8009fa8:	4801      	ldr	r0, [pc, #4]	; (8009fb0 <__malloc_lock+0x8>)
 8009faa:	f7ff bf0e 	b.w	8009dca <__retarget_lock_acquire_recursive>
 8009fae:	bf00      	nop
 8009fb0:	20000304 	.word	0x20000304

08009fb4 <__malloc_unlock>:
 8009fb4:	4801      	ldr	r0, [pc, #4]	; (8009fbc <__malloc_unlock+0x8>)
 8009fb6:	f7ff bf09 	b.w	8009dcc <__retarget_lock_release_recursive>
 8009fba:	bf00      	nop
 8009fbc:	20000304 	.word	0x20000304

08009fc0 <__sflush_r>:
 8009fc0:	898a      	ldrh	r2, [r1, #12]
 8009fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	0710      	lsls	r0, r2, #28
 8009fca:	460c      	mov	r4, r1
 8009fcc:	d458      	bmi.n	800a080 <__sflush_r+0xc0>
 8009fce:	684b      	ldr	r3, [r1, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	dc05      	bgt.n	8009fe0 <__sflush_r+0x20>
 8009fd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	dc02      	bgt.n	8009fe0 <__sflush_r+0x20>
 8009fda:	2000      	movs	r0, #0
 8009fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fe2:	2e00      	cmp	r6, #0
 8009fe4:	d0f9      	beq.n	8009fda <__sflush_r+0x1a>
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fec:	682f      	ldr	r7, [r5, #0]
 8009fee:	6a21      	ldr	r1, [r4, #32]
 8009ff0:	602b      	str	r3, [r5, #0]
 8009ff2:	d032      	beq.n	800a05a <__sflush_r+0x9a>
 8009ff4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ff6:	89a3      	ldrh	r3, [r4, #12]
 8009ff8:	075a      	lsls	r2, r3, #29
 8009ffa:	d505      	bpl.n	800a008 <__sflush_r+0x48>
 8009ffc:	6863      	ldr	r3, [r4, #4]
 8009ffe:	1ac0      	subs	r0, r0, r3
 800a000:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a002:	b10b      	cbz	r3, 800a008 <__sflush_r+0x48>
 800a004:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a006:	1ac0      	subs	r0, r0, r3
 800a008:	2300      	movs	r3, #0
 800a00a:	4602      	mov	r2, r0
 800a00c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a00e:	4628      	mov	r0, r5
 800a010:	6a21      	ldr	r1, [r4, #32]
 800a012:	47b0      	blx	r6
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	d106      	bne.n	800a028 <__sflush_r+0x68>
 800a01a:	6829      	ldr	r1, [r5, #0]
 800a01c:	291d      	cmp	r1, #29
 800a01e:	d82b      	bhi.n	800a078 <__sflush_r+0xb8>
 800a020:	4a28      	ldr	r2, [pc, #160]	; (800a0c4 <__sflush_r+0x104>)
 800a022:	410a      	asrs	r2, r1
 800a024:	07d6      	lsls	r6, r2, #31
 800a026:	d427      	bmi.n	800a078 <__sflush_r+0xb8>
 800a028:	2200      	movs	r2, #0
 800a02a:	04d9      	lsls	r1, r3, #19
 800a02c:	6062      	str	r2, [r4, #4]
 800a02e:	6922      	ldr	r2, [r4, #16]
 800a030:	6022      	str	r2, [r4, #0]
 800a032:	d504      	bpl.n	800a03e <__sflush_r+0x7e>
 800a034:	1c42      	adds	r2, r0, #1
 800a036:	d101      	bne.n	800a03c <__sflush_r+0x7c>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	b903      	cbnz	r3, 800a03e <__sflush_r+0x7e>
 800a03c:	6560      	str	r0, [r4, #84]	; 0x54
 800a03e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a040:	602f      	str	r7, [r5, #0]
 800a042:	2900      	cmp	r1, #0
 800a044:	d0c9      	beq.n	8009fda <__sflush_r+0x1a>
 800a046:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a04a:	4299      	cmp	r1, r3
 800a04c:	d002      	beq.n	800a054 <__sflush_r+0x94>
 800a04e:	4628      	mov	r0, r5
 800a050:	f7ff febe 	bl	8009dd0 <_free_r>
 800a054:	2000      	movs	r0, #0
 800a056:	6360      	str	r0, [r4, #52]	; 0x34
 800a058:	e7c0      	b.n	8009fdc <__sflush_r+0x1c>
 800a05a:	2301      	movs	r3, #1
 800a05c:	4628      	mov	r0, r5
 800a05e:	47b0      	blx	r6
 800a060:	1c41      	adds	r1, r0, #1
 800a062:	d1c8      	bne.n	8009ff6 <__sflush_r+0x36>
 800a064:	682b      	ldr	r3, [r5, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0c5      	beq.n	8009ff6 <__sflush_r+0x36>
 800a06a:	2b1d      	cmp	r3, #29
 800a06c:	d001      	beq.n	800a072 <__sflush_r+0xb2>
 800a06e:	2b16      	cmp	r3, #22
 800a070:	d101      	bne.n	800a076 <__sflush_r+0xb6>
 800a072:	602f      	str	r7, [r5, #0]
 800a074:	e7b1      	b.n	8009fda <__sflush_r+0x1a>
 800a076:	89a3      	ldrh	r3, [r4, #12]
 800a078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a07c:	81a3      	strh	r3, [r4, #12]
 800a07e:	e7ad      	b.n	8009fdc <__sflush_r+0x1c>
 800a080:	690f      	ldr	r7, [r1, #16]
 800a082:	2f00      	cmp	r7, #0
 800a084:	d0a9      	beq.n	8009fda <__sflush_r+0x1a>
 800a086:	0793      	lsls	r3, r2, #30
 800a088:	680e      	ldr	r6, [r1, #0]
 800a08a:	600f      	str	r7, [r1, #0]
 800a08c:	bf0c      	ite	eq
 800a08e:	694b      	ldreq	r3, [r1, #20]
 800a090:	2300      	movne	r3, #0
 800a092:	eba6 0807 	sub.w	r8, r6, r7
 800a096:	608b      	str	r3, [r1, #8]
 800a098:	f1b8 0f00 	cmp.w	r8, #0
 800a09c:	dd9d      	ble.n	8009fda <__sflush_r+0x1a>
 800a09e:	4643      	mov	r3, r8
 800a0a0:	463a      	mov	r2, r7
 800a0a2:	6a21      	ldr	r1, [r4, #32]
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0a8:	47b0      	blx	r6
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	dc06      	bgt.n	800a0bc <__sflush_r+0xfc>
 800a0ae:	89a3      	ldrh	r3, [r4, #12]
 800a0b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	e78f      	b.n	8009fdc <__sflush_r+0x1c>
 800a0bc:	4407      	add	r7, r0
 800a0be:	eba8 0800 	sub.w	r8, r8, r0
 800a0c2:	e7e9      	b.n	800a098 <__sflush_r+0xd8>
 800a0c4:	dfbffffe 	.word	0xdfbffffe

0800a0c8 <_fflush_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	690b      	ldr	r3, [r1, #16]
 800a0cc:	4605      	mov	r5, r0
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	b913      	cbnz	r3, 800a0d8 <_fflush_r+0x10>
 800a0d2:	2500      	movs	r5, #0
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	bd38      	pop	{r3, r4, r5, pc}
 800a0d8:	b118      	cbz	r0, 800a0e2 <_fflush_r+0x1a>
 800a0da:	6a03      	ldr	r3, [r0, #32]
 800a0dc:	b90b      	cbnz	r3, 800a0e2 <_fflush_r+0x1a>
 800a0de:	f7ff fc91 	bl	8009a04 <__sinit>
 800a0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d0f3      	beq.n	800a0d2 <_fflush_r+0xa>
 800a0ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0ec:	07d0      	lsls	r0, r2, #31
 800a0ee:	d404      	bmi.n	800a0fa <_fflush_r+0x32>
 800a0f0:	0599      	lsls	r1, r3, #22
 800a0f2:	d402      	bmi.n	800a0fa <_fflush_r+0x32>
 800a0f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0f6:	f7ff fe68 	bl	8009dca <__retarget_lock_acquire_recursive>
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	f7ff ff5f 	bl	8009fc0 <__sflush_r>
 800a102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a104:	4605      	mov	r5, r0
 800a106:	07da      	lsls	r2, r3, #31
 800a108:	d4e4      	bmi.n	800a0d4 <_fflush_r+0xc>
 800a10a:	89a3      	ldrh	r3, [r4, #12]
 800a10c:	059b      	lsls	r3, r3, #22
 800a10e:	d4e1      	bmi.n	800a0d4 <_fflush_r+0xc>
 800a110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a112:	f7ff fe5b 	bl	8009dcc <__retarget_lock_release_recursive>
 800a116:	e7dd      	b.n	800a0d4 <_fflush_r+0xc>

0800a118 <__swhatbuf_r>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	460c      	mov	r4, r1
 800a11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a120:	b096      	sub	sp, #88	; 0x58
 800a122:	4615      	mov	r5, r2
 800a124:	2900      	cmp	r1, #0
 800a126:	461e      	mov	r6, r3
 800a128:	da0c      	bge.n	800a144 <__swhatbuf_r+0x2c>
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	2100      	movs	r1, #0
 800a12e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a132:	bf0c      	ite	eq
 800a134:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a138:	2340      	movne	r3, #64	; 0x40
 800a13a:	2000      	movs	r0, #0
 800a13c:	6031      	str	r1, [r6, #0]
 800a13e:	602b      	str	r3, [r5, #0]
 800a140:	b016      	add	sp, #88	; 0x58
 800a142:	bd70      	pop	{r4, r5, r6, pc}
 800a144:	466a      	mov	r2, sp
 800a146:	f000 f849 	bl	800a1dc <_fstat_r>
 800a14a:	2800      	cmp	r0, #0
 800a14c:	dbed      	blt.n	800a12a <__swhatbuf_r+0x12>
 800a14e:	9901      	ldr	r1, [sp, #4]
 800a150:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a154:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a158:	4259      	negs	r1, r3
 800a15a:	4159      	adcs	r1, r3
 800a15c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a160:	e7eb      	b.n	800a13a <__swhatbuf_r+0x22>

0800a162 <__smakebuf_r>:
 800a162:	898b      	ldrh	r3, [r1, #12]
 800a164:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a166:	079d      	lsls	r5, r3, #30
 800a168:	4606      	mov	r6, r0
 800a16a:	460c      	mov	r4, r1
 800a16c:	d507      	bpl.n	800a17e <__smakebuf_r+0x1c>
 800a16e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a172:	6023      	str	r3, [r4, #0]
 800a174:	6123      	str	r3, [r4, #16]
 800a176:	2301      	movs	r3, #1
 800a178:	6163      	str	r3, [r4, #20]
 800a17a:	b002      	add	sp, #8
 800a17c:	bd70      	pop	{r4, r5, r6, pc}
 800a17e:	ab01      	add	r3, sp, #4
 800a180:	466a      	mov	r2, sp
 800a182:	f7ff ffc9 	bl	800a118 <__swhatbuf_r>
 800a186:	9900      	ldr	r1, [sp, #0]
 800a188:	4605      	mov	r5, r0
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7ff fe8c 	bl	8009ea8 <_malloc_r>
 800a190:	b948      	cbnz	r0, 800a1a6 <__smakebuf_r+0x44>
 800a192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a196:	059a      	lsls	r2, r3, #22
 800a198:	d4ef      	bmi.n	800a17a <__smakebuf_r+0x18>
 800a19a:	f023 0303 	bic.w	r3, r3, #3
 800a19e:	f043 0302 	orr.w	r3, r3, #2
 800a1a2:	81a3      	strh	r3, [r4, #12]
 800a1a4:	e7e3      	b.n	800a16e <__smakebuf_r+0xc>
 800a1a6:	89a3      	ldrh	r3, [r4, #12]
 800a1a8:	6020      	str	r0, [r4, #0]
 800a1aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ae:	6120      	str	r0, [r4, #16]
 800a1b0:	81a3      	strh	r3, [r4, #12]
 800a1b2:	9b00      	ldr	r3, [sp, #0]
 800a1b4:	6163      	str	r3, [r4, #20]
 800a1b6:	9b01      	ldr	r3, [sp, #4]
 800a1b8:	b15b      	cbz	r3, 800a1d2 <__smakebuf_r+0x70>
 800a1ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f000 f81e 	bl	800a200 <_isatty_r>
 800a1c4:	b128      	cbz	r0, 800a1d2 <__smakebuf_r+0x70>
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	f023 0303 	bic.w	r3, r3, #3
 800a1cc:	f043 0301 	orr.w	r3, r3, #1
 800a1d0:	81a3      	strh	r3, [r4, #12]
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	431d      	orrs	r5, r3
 800a1d6:	81a5      	strh	r5, [r4, #12]
 800a1d8:	e7cf      	b.n	800a17a <__smakebuf_r+0x18>
	...

0800a1dc <_fstat_r>:
 800a1dc:	b538      	push	{r3, r4, r5, lr}
 800a1de:	2300      	movs	r3, #0
 800a1e0:	4d06      	ldr	r5, [pc, #24]	; (800a1fc <_fstat_r+0x20>)
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	4608      	mov	r0, r1
 800a1e6:	4611      	mov	r1, r2
 800a1e8:	602b      	str	r3, [r5, #0]
 800a1ea:	f7f7 f8ee 	bl	80013ca <_fstat>
 800a1ee:	1c43      	adds	r3, r0, #1
 800a1f0:	d102      	bne.n	800a1f8 <_fstat_r+0x1c>
 800a1f2:	682b      	ldr	r3, [r5, #0]
 800a1f4:	b103      	cbz	r3, 800a1f8 <_fstat_r+0x1c>
 800a1f6:	6023      	str	r3, [r4, #0]
 800a1f8:	bd38      	pop	{r3, r4, r5, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20000300 	.word	0x20000300

0800a200 <_isatty_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	2300      	movs	r3, #0
 800a204:	4d05      	ldr	r5, [pc, #20]	; (800a21c <_isatty_r+0x1c>)
 800a206:	4604      	mov	r4, r0
 800a208:	4608      	mov	r0, r1
 800a20a:	602b      	str	r3, [r5, #0]
 800a20c:	f7f7 f8ed 	bl	80013ea <_isatty>
 800a210:	1c43      	adds	r3, r0, #1
 800a212:	d102      	bne.n	800a21a <_isatty_r+0x1a>
 800a214:	682b      	ldr	r3, [r5, #0]
 800a216:	b103      	cbz	r3, 800a21a <_isatty_r+0x1a>
 800a218:	6023      	str	r3, [r4, #0]
 800a21a:	bd38      	pop	{r3, r4, r5, pc}
 800a21c:	20000300 	.word	0x20000300

0800a220 <_sbrk_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	2300      	movs	r3, #0
 800a224:	4d05      	ldr	r5, [pc, #20]	; (800a23c <_sbrk_r+0x1c>)
 800a226:	4604      	mov	r4, r0
 800a228:	4608      	mov	r0, r1
 800a22a:	602b      	str	r3, [r5, #0]
 800a22c:	f7f7 f8f6 	bl	800141c <_sbrk>
 800a230:	1c43      	adds	r3, r0, #1
 800a232:	d102      	bne.n	800a23a <_sbrk_r+0x1a>
 800a234:	682b      	ldr	r3, [r5, #0]
 800a236:	b103      	cbz	r3, 800a23a <_sbrk_r+0x1a>
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	bd38      	pop	{r3, r4, r5, pc}
 800a23c:	20000300 	.word	0x20000300

0800a240 <_init>:
 800a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a242:	bf00      	nop
 800a244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a246:	bc08      	pop	{r3}
 800a248:	469e      	mov	lr, r3
 800a24a:	4770      	bx	lr

0800a24c <_fini>:
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24e:	bf00      	nop
 800a250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a252:	bc08      	pop	{r3}
 800a254:	469e      	mov	lr, r3
 800a256:	4770      	bx	lr
