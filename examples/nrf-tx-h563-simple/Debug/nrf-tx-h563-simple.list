
nrf-tx-h563-simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a708  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800a954  0800a954  0001a954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab60  0800ab60  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab60  0800ab60  0001ab60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab68  0800ab68  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab68  0800ab68  0001ab68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab6c  0800ab6c  0001ab6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800ab70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000068  0800abd8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  0800abd8  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001159f  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002181  00000000  00000000  00031680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  00033808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a05  00000000  00000000  00034510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003139e  00000000  00000000  00034f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a1d  00000000  00000000  000662b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00132983  00000000  00000000  00076cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dc8  00000000  00000000  001a9654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001ad41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000068 	.word	0x20000068
 8000268:	00000000 	.word	0x00000000
 800026c:	0800a93c 	.word	0x0800a93c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000006c 	.word	0x2000006c
 8000288:	0800a93c 	.word	0x0800a93c

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800029c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b4:	1d39      	adds	r1, r7, #4
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <__io_putchar+0x20>)
 80005be:	f008 fc74 	bl	8008eaa <HAL_UART_Transmit>
  return ch;
 80005c2:	687b      	ldr	r3, [r7, #4]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000114 	.word	0x20000114

080005d0 <HAL_GPIO_EXTI_Rising_Callback>:
/*******************************************/

// This is ran when user button is pressed
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BTN_USER_Pin) {
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005e0:	d11c      	bne.n	800061c <HAL_GPIO_EXTI_Rising_Callback+0x4c>
    NRF_PrintStatus();
 80005e2:	f000 fcfb 	bl	8000fdc <NRF_PrintStatus>

    printf("Sending data...\r\n");
 80005e6:	480f      	ldr	r0, [pc, #60]	; (8000624 <HAL_GPIO_EXTI_Rising_Callback+0x54>)
 80005e8:	f009 fb30 	bl	8009c4c <puts>

    uint8_t msg[10] = "HelloWorld";
 80005ec:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <HAL_GPIO_EXTI_Rising_Callback+0x58>)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005f4:	c303      	stmia	r3!, {r0, r1}
 80005f6:	801a      	strh	r2, [r3, #0]
    NRF_Status ret = NRF_TransmitAndWait(msg, 10);
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	210a      	movs	r1, #10
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fb60 	bl	8000cc4 <NRF_TransmitAndWait>
 8000604:	4603      	mov	r3, r0
 8000606:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) {
 8000608:	7dfb      	ldrb	r3, [r7, #23]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d003      	beq.n	8000616 <HAL_GPIO_EXTI_Rising_Callback+0x46>
      printf("Couldn't send data...\r\n");
 800060e:	4807      	ldr	r0, [pc, #28]	; (800062c <HAL_GPIO_EXTI_Rising_Callback+0x5c>)
 8000610:	f009 fb1c 	bl	8009c4c <puts>
    } else {
      printf("Data sent...\r\n");
    }
  }
}
 8000614:	e002      	b.n	800061c <HAL_GPIO_EXTI_Rising_Callback+0x4c>
      printf("Data sent...\r\n");
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <HAL_GPIO_EXTI_Rising_Callback+0x60>)
 8000618:	f009 fb18 	bl	8009c4c <puts>
}
 800061c:	bf00      	nop
 800061e:	3718      	adds	r7, #24
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	0800a954 	.word	0x0800a954
 8000628:	0800a990 	.word	0x0800a990
 800062c:	0800a968 	.word	0x0800a968
 8000630:	0800a980 	.word	0x0800a980

08000634 <runExample>:

void runExample() {
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af02      	add	r7, sp, #8
  printf("Starting up simple transmitter H5...\r\n\r\n");
 800063a:	4812      	ldr	r0, [pc, #72]	; (8000684 <runExample+0x50>)
 800063c:	f009 fb06 	bl	8009c4c <puts>

  // Initialise the library and make the device enter standby-I mode
  NRF_Init(&hspi1, NRF_CSN_GPIO_Port, NRF_CSN_Pin, NRF_CE_GPIO_Port, NRF_CE_Pin);
 8000640:	2340      	movs	r3, #64	; 0x40
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	4b10      	ldr	r3, [pc, #64]	; (8000688 <runExample+0x54>)
 8000646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800064a:	4910      	ldr	r1, [pc, #64]	; (800068c <runExample+0x58>)
 800064c:	4810      	ldr	r0, [pc, #64]	; (8000690 <runExample+0x5c>)
 800064e:	f000 fa2d 	bl	8000aac <NRF_Init>

  // Resets all registers but keeps the device in standby-I mode
  NRF_Reset();
 8000652:	f000 fc2d 	bl	8000eb0 <NRF_Reset>

  // Set the transmit adress.
  uint8_t address[5] = {1,2,3,4,5};
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <runExample+0x60>)
 8000658:	463b      	mov	r3, r7
 800065a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065e:	6018      	str	r0, [r3, #0]
 8000660:	3304      	adds	r3, #4
 8000662:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 8000664:	463b      	mov	r3, r7
 8000666:	2205      	movs	r2, #5
 8000668:	4619      	mov	r1, r3
 800066a:	2010      	movs	r0, #16
 800066c:	f000 fb62 	bl	8000d34 <NRF_WriteRegister>

  // To be able to receive auto acknowledgement from the receiver
  // we need to enter a receive address as well.
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 8000670:	463b      	mov	r3, r7
 8000672:	2205      	movs	r2, #5
 8000674:	4619      	mov	r1, r3
 8000676:	200a      	movs	r0, #10
 8000678:	f000 fb5c 	bl	8000d34 <NRF_WriteRegister>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	0800a99c 	.word	0x0800a99c
 8000688:	42020800 	.word	0x42020800
 800068c:	42020400 	.word	0x42020400
 8000690:	20000084 	.word	0x20000084
 8000694:	0800a9c4 	.word	0x0800a9c4

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f001 f80a 	bl	80016b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f80c 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 f91c 	bl	80008e0 <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 80006a8:	f000 f870 	bl	800078c <MX_MEMORYMAP_Init>
  MX_SPI1_Init();
 80006ac:	f000 f876 	bl	800079c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80006b0:	f000 f8ca 	bl	8000848 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  runExample();
 80006b4:	f7ff ffbe 	bl	8000634 <runExample>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <main+0x20>
	...

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b09c      	sub	sp, #112	; 0x70
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2250      	movs	r2, #80	; 0x50
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f009 fb9e 	bl	8009e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
 80006e0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006e2:	4b29      	ldr	r3, [pc, #164]	; (8000788 <SystemClock_Config+0xcc>)
 80006e4:	691b      	ldr	r3, [r3, #16]
 80006e6:	4a28      	ldr	r2, [pc, #160]	; (8000788 <SystemClock_Config+0xcc>)
 80006e8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80006ec:	6113      	str	r3, [r2, #16]
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <SystemClock_Config+0xcc>)
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006fa:	bf00      	nop
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <SystemClock_Config+0xcc>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	f003 0308 	and.w	r3, r3, #8
 8000704:	2b08      	cmp	r3, #8
 8000706:	d1f9      	bne.n	80006fc <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000708:	2310      	movs	r3, #16
 800070a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 800070c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000710:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000712:	2320      	movs	r3, #32
 8000714:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 800071a:	2302      	movs	r3, #2
 800071c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800071e:	2301      	movs	r3, #1
 8000720:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000722:	237d      	movs	r3, #125	; 0x7d
 8000724:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000732:	2308      	movs	r3, #8
 8000734:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000736:	2300      	movs	r3, #0
 8000738:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0320 	add.w	r3, r7, #32
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fb1a 	bl	8001d7c <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800074e:	f000 f967 	bl	8000a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	231f      	movs	r3, #31
 8000754:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2303      	movs	r3, #3
 8000758:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2105      	movs	r1, #5
 8000770:	4618      	mov	r0, r3
 8000772:	f001 ff3b 	bl	80025ec <HAL_RCC_ClockConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800077c:	f000 f950 	bl	8000a20 <Error_Handler>
  }
}
 8000780:	bf00      	nop
 8000782:	3770      	adds	r7, #112	; 0x70
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	44020800 	.word	0x44020800

0800078c <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007a2:	4a28      	ldr	r2, [pc, #160]	; (8000844 <MX_SPI1_Init+0xa8>)
 80007a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ae:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b4:	4b22      	ldr	r3, [pc, #136]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007b6:	2207      	movs	r2, #7
 80007b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c6:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007ea:	2207      	movs	r2, #7
 80007ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_SPI1_Init+0xa4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_SPI1_Init+0xa4>)
 8000804:	2200      	movs	r2, #0
 8000806:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_SPI1_Init+0xa4>)
 800080a:	2200      	movs	r2, #0
 800080c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_SPI1_Init+0xa4>)
 8000810:	2200      	movs	r2, #0
 8000812:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <MX_SPI1_Init+0xa4>)
 8000816:	2200      	movs	r2, #0
 8000818:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_SPI1_Init+0xa4>)
 800081c:	2200      	movs	r2, #0
 800081e:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <MX_SPI1_Init+0xa4>)
 8000822:	2200      	movs	r2, #0
 8000824:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_SPI1_Init+0xa4>)
 8000828:	2200      	movs	r2, #0
 800082a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800082c:	4804      	ldr	r0, [pc, #16]	; (8000840 <MX_SPI1_Init+0xa4>)
 800082e:	f007 fa71 	bl	8007d14 <HAL_SPI_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000838:	f000 f8f2 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000084 	.word	0x20000084
 8000844:	40013000 	.word	0x40013000

08000848 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 800084e:	4a23      	ldr	r2, [pc, #140]	; (80008dc <MX_USART3_UART_Init+0x94>)
 8000850:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000890:	4811      	ldr	r0, [pc, #68]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 8000892:	f008 faba 	bl	8008e0a <HAL_UART_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800089c:	f000 f8c0 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	480d      	ldr	r0, [pc, #52]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 80008a4:	f008 ffe0 	bl	8009868 <HAL_UARTEx_SetTxFifoThreshold>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008ae:	f000 f8b7 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4808      	ldr	r0, [pc, #32]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 80008b6:	f009 f815 	bl	80098e4 <HAL_UARTEx_SetRxFifoThreshold>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008c0:	f000 f8ae 	bl	8000a20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_USART3_UART_Init+0x90>)
 80008c6:	f008 ff96 	bl	80097f6 <HAL_UARTEx_DisableFifoMode>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008d0:	f000 f8a6 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000114 	.word	0x20000114
 80008dc:	40004800 	.word	0x40004800

080008e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b46      	ldr	r3, [pc, #280]	; (8000a10 <MX_GPIO_Init+0x130>)
 80008f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008fc:	4a44      	ldr	r2, [pc, #272]	; (8000a10 <MX_GPIO_Init+0x130>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000906:	4b42      	ldr	r3, [pc, #264]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800091a:	4a3d      	ldr	r2, [pc, #244]	; (8000a10 <MX_GPIO_Init+0x130>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000924:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000938:	4a35      	ldr	r2, [pc, #212]	; (8000a10 <MX_GPIO_Init+0x130>)
 800093a:	f043 0308 	orr.w	r3, r3, #8
 800093e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000942:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000948:	f003 0308 	and.w	r3, r3, #8
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000950:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000956:	4a2e      	ldr	r2, [pc, #184]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800095c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000960:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000970:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000974:	4a26      	ldr	r2, [pc, #152]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000976:	f043 0302 	orr.w	r3, r3, #2
 800097a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <MX_GPIO_Init+0x130>)
 8000980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2140      	movs	r1, #64	; 0x40
 8000990:	4820      	ldr	r0, [pc, #128]	; (8000a14 <MX_GPIO_Init+0x134>)
 8000992:	f001 f9a9 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099c:	481e      	ldr	r0, [pc, #120]	; (8000a18 <MX_GPIO_Init+0x138>)
 800099e:	f001 f9a3 	bl	8001ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 80009a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_GPIO_Init+0x13c>)
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4817      	ldr	r0, [pc, #92]	; (8000a14 <MX_GPIO_Init+0x134>)
 80009b8:	f001 f82c 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 80009bc:	2340      	movs	r3, #64	; 0x40
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	4810      	ldr	r0, [pc, #64]	; (8000a14 <MX_GPIO_Init+0x134>)
 80009d4:	f001 f81e 	bl	8001a14 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 80009d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <MX_GPIO_Init+0x138>)
 80009f2:	f001 f80f 	bl	8001a14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	2018      	movs	r0, #24
 80009fc:	f000 ffd5 	bl	80019aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000a00:	2018      	movs	r0, #24
 8000a02:	f000 ffec 	bl	80019de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a06:	bf00      	nop
 8000a08:	3728      	adds	r7, #40	; 0x28
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	44020c00 	.word	0x44020c00
 8000a14:	42020800 	.word	0x42020800
 8000a18:	42020400 	.word	0x42020400
 8000a1c:	10110000 	.word	0x10110000

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>
	...

08000a2c <csn_set>:

/*
 * Private functions
 */

void csn_set() {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <csn_set+0x18>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <csn_set+0x1c>)
 8000a36:	8811      	ldrh	r1, [r2, #0]
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f001 f954 	bl	8001ce8 <HAL_GPIO_WritePin>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200001ac 	.word	0x200001ac
 8000a48:	200001b0 	.word	0x200001b0

08000a4c <csn_reset>:

void csn_reset() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <csn_reset+0x18>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <csn_reset+0x1c>)
 8000a56:	8811      	ldrh	r1, [r2, #0]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 f944 	bl	8001ce8 <HAL_GPIO_WritePin>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200001ac 	.word	0x200001ac
 8000a68:	200001b0 	.word	0x200001b0

08000a6c <ce_set>:

void ce_set() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <ce_set+0x18>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <ce_set+0x1c>)
 8000a76:	8811      	ldrh	r1, [r2, #0]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f934 	bl	8001ce8 <HAL_GPIO_WritePin>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200001b4 	.word	0x200001b4
 8000a88:	200001b8 	.word	0x200001b8

08000a8c <ce_reset>:

void ce_reset() {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <ce_reset+0x18>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <ce_reset+0x1c>)
 8000a96:	8811      	ldrh	r1, [r2, #0]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 f924 	bl	8001ce8 <HAL_GPIO_WritePin>
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200001b4 	.word	0x200001b4
 8000aa8:	200001b8 	.word	0x200001b8

08000aac <NRF_Init>:
 *
 * Main functions
 *
 */

NRF_Status NRF_Init(SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCSN, uint16_t PinCSN, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	80fb      	strh	r3, [r7, #6]
  HSPI = handle;
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <NRF_Init+0x48>)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6013      	str	r3, [r2, #0]
  NRF_CSN_Port = PortCSN;
 8000ac2:	4a0d      	ldr	r2, [pc, #52]	; (8000af8 <NRF_Init+0x4c>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	6013      	str	r3, [r2, #0]
  NRF_CSN_Pin = PinCSN;
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <NRF_Init+0x50>)
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	8013      	strh	r3, [r2, #0]
  NRF_CE_Port = PortCE;
 8000ace:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <NRF_Init+0x54>)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	6013      	str	r3, [r2, #0]
  NRF_CE_Pin = PinCE;
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <NRF_Init+0x58>)
 8000ad6:	8b3b      	ldrh	r3, [r7, #24]
 8000ad8:	8013      	strh	r3, [r2, #0]

  // Make sure CSN i pulled high
  csn_set();
 8000ada:	f7ff ffa7 	bl	8000a2c <csn_set>

  // Takes ~100ms from power on to start up
  HAL_Delay(100);
 8000ade:	2064      	movs	r0, #100	; 0x64
 8000ae0:	f000 fe64 	bl	80017ac <HAL_Delay>

  NRF_EnterMode(NRF_MODE_STANDBY1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f000 f89f 	bl	8000c28 <NRF_EnterMode>

  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200001a8 	.word	0x200001a8
 8000af8:	200001ac 	.word	0x200001ac
 8000afc:	200001b0 	.word	0x200001b0
 8000b00:	200001b4 	.word	0x200001b4
 8000b04:	200001b8 	.word	0x200001b8

08000b08 <NRF_SendCommand>:

NRF_Status NRF_SendCommand(uint8_t cmd) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = HAL_OK;
 8000b12:	2300      	movs	r3, #0
 8000b14:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000b16:	f7ff ff99 	bl	8000a4c <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <NRF_SendCommand+0x44>)
 8000b1c:	6818      	ldr	r0, [r3, #0]
 8000b1e:	f107 020e 	add.w	r2, r7, #14
 8000b22:	1df9      	adds	r1, r7, #7
 8000b24:	230a      	movs	r3, #10
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2301      	movs	r3, #1
 8000b2a:	f007 fe3f 	bl	80087ac <HAL_SPI_TransmitReceive>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <NRF_SendCommand+0x34>
    return ret;
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
 8000b3a:	e002      	b.n	8000b42 <NRF_SendCommand+0x3a>
  }
  csn_set();
 8000b3c:	f7ff ff76 	bl	8000a2c <csn_set>

  return ret;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200001a8 	.word	0x200001a8

08000b50 <NRF_SendWriteCommand>:

NRF_Status NRF_SendWriteCommand(uint8_t cmd, uint8_t *write, uint8_t length) {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af02      	add	r7, sp, #8
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
 8000b5c:	4613      	mov	r3, r2
 8000b5e:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000b64:	f7ff ff72 	bl	8000a4c <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000b68:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <NRF_SendWriteCommand+0x68>)
 8000b6a:	6818      	ldr	r0, [r3, #0]
 8000b6c:	f107 020e 	add.w	r2, r7, #14
 8000b70:	1df9      	adds	r1, r7, #7
 8000b72:	230a      	movs	r3, #10
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	2301      	movs	r3, #1
 8000b78:	f007 fe18 	bl	80087ac <HAL_SPI_TransmitReceive>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <NRF_SendWriteCommand+0x3a>
    return ret;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
 8000b88:	e011      	b.n	8000bae <NRF_SendWriteCommand+0x5e>
  }
  ret = HAL_SPI_Transmit(HSPI, write, length, NRF_SPI_TIMEOUT);
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <NRF_SendWriteCommand+0x68>)
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	79bb      	ldrb	r3, [r7, #6]
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	230a      	movs	r3, #10
 8000b94:	6839      	ldr	r1, [r7, #0]
 8000b96:	f007 fa2d 	bl	8007ff4 <HAL_SPI_Transmit>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <NRF_SendWriteCommand+0x58>
    return ret;
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	e002      	b.n	8000bae <NRF_SendWriteCommand+0x5e>
  }
  csn_set();
 8000ba8:	f7ff ff40 	bl	8000a2c <csn_set>

  return ret;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200001a8 	.word	0x200001a8

08000bbc <NRF_SendReadCommand>:

NRF_Status NRF_SendReadCommand(uint8_t cmd, uint8_t *read, uint8_t length) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af02      	add	r7, sp, #8
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000bd0:	f7ff ff3c 	bl	8000a4c <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <NRF_SendReadCommand+0x68>)
 8000bd6:	6818      	ldr	r0, [r3, #0]
 8000bd8:	f107 020e 	add.w	r2, r7, #14
 8000bdc:	1df9      	adds	r1, r7, #7
 8000bde:	230a      	movs	r3, #10
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2301      	movs	r3, #1
 8000be4:	f007 fde2 	bl	80087ac <HAL_SPI_TransmitReceive>
 8000be8:	4603      	mov	r3, r0
 8000bea:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK) {
 8000bec:	7bfb      	ldrb	r3, [r7, #15]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <NRF_SendReadCommand+0x3a>
    return ret;
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	e011      	b.n	8000c1a <NRF_SendReadCommand+0x5e>
  }
  ret = HAL_SPI_Receive(HSPI, read, length, NRF_SPI_TIMEOUT);
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <NRF_SendReadCommand+0x68>)
 8000bf8:	6818      	ldr	r0, [r3, #0]
 8000bfa:	79bb      	ldrb	r3, [r7, #6]
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	230a      	movs	r3, #10
 8000c00:	6839      	ldr	r1, [r7, #0]
 8000c02:	f007 fc1b 	bl	800843c <HAL_SPI_Receive>
 8000c06:	4603      	mov	r3, r0
 8000c08:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK) {
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <NRF_SendReadCommand+0x58>
    return ret;
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	e002      	b.n	8000c1a <NRF_SendReadCommand+0x5e>
  }
  csn_set();
 8000c14:	f7ff ff0a 	bl	8000a2c <csn_set>

  return ret;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200001a8 	.word	0x200001a8

08000c28 <NRF_EnterMode>:
 *
 * Device control
 *
 */

NRF_Status NRF_EnterMode(uint8_t mode) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73fb      	strb	r3, [r7, #15]

  switch(mode) {
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	dc2a      	bgt.n	8000c92 <NRF_EnterMode+0x6a>
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	da15      	bge.n	8000c6c <NRF_EnterMode+0x44>
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <NRF_EnterMode+0x22>
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d006      	beq.n	8000c56 <NRF_EnterMode+0x2e>
 8000c48:	e023      	b.n	8000c92 <NRF_EnterMode+0x6a>
    case NRF_MODE_POWERDOWN:
      // Can come from any mode
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 f8ce 	bl	8000dee <NRF_ResetRegisterBit>
 8000c52:	4603      	mov	r3, r0
 8000c54:	73fb      	strb	r3, [r7, #15]
    case NRF_MODE_STANDBY1:
      // We expect to come from powerdown
      ce_reset();
 8000c56:	f7ff ff19 	bl	8000a8c <ce_reset>
      ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 f895 	bl	8000d8c <NRF_SetRegisterBit>
 8000c62:	4603      	mov	r3, r0
 8000c64:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(2);
 8000c66:	2002      	movs	r0, #2
 8000c68:	f000 fda0 	bl	80017ac <HAL_Delay>
    case NRF_MODE_RX:
    case NRF_MODE_TX:
      // We expect to come from standby-I
      if (mode == NRF_MODE_TX) {
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d106      	bne.n	8000c80 <NRF_EnterMode+0x58>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000c72:	2100      	movs	r1, #0
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 f8ba 	bl	8000dee <NRF_ResetRegisterBit>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	73fb      	strb	r3, [r7, #15]
 8000c7e:	e005      	b.n	8000c8c <NRF_EnterMode+0x64>
      } else {
        ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000c80:	2100      	movs	r1, #0
 8000c82:	2000      	movs	r0, #0
 8000c84:	f000 f882 	bl	8000d8c <NRF_SetRegisterBit>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73fb      	strb	r3, [r7, #15]
      }

      // Enter mode
      ce_set();
 8000c8c:	f7ff feee 	bl	8000a6c <ce_set>
      break;
 8000c90:	e002      	b.n	8000c98 <NRF_EnterMode+0x70>
    default:
      ret = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
      break;
 8000c96:	bf00      	nop
  }

  return ret;
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3710      	adds	r7, #16
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <NRF_WritePayload>:

NRF_Status NRF_WritePayload(uint8_t *payload, uint8_t length) {
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	460b      	mov	r3, r1
 8000cac:	70fb      	strb	r3, [r7, #3]
  return NRF_SendWriteCommand(NRF_CMD_W_TX_PAYLOAD, payload, length);
 8000cae:	78fb      	ldrb	r3, [r7, #3]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	20a0      	movs	r0, #160	; 0xa0
 8000cb6:	f7ff ff4b 	bl	8000b50 <NRF_SendWriteCommand>
 8000cba:	4603      	mov	r3, r0
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <NRF_TransmitAndWait>:
  ce_reset();

  return ret;
}

NRF_Status NRF_TransmitAndWait(uint8_t *payload, uint8_t length) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	70fb      	strb	r3, [r7, #3]
  NRF_Status ret = HAL_OK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73fb      	strb	r3, [r7, #15]
  ret = NRF_WritePayload(payload, length);
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ffe2 	bl	8000ca2 <NRF_WritePayload>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK) {
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <NRF_TransmitAndWait+0x28>
    return ret;
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	e01f      	b.n	8000d2c <NRF_TransmitAndWait+0x68>
  }

  ce_set();
 8000cec:	f7ff febe 	bl	8000a6c <ce_set>
  uint8_t status;
  for(;;) {
    status = NRF_ReadStatus();
 8000cf0:	f000 f8c4 	bl	8000e7c <NRF_ReadStatus>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	73bb      	strb	r3, [r7, #14]
    if (status & (1<<STATUS_BIT_TX_DS)) {
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	f003 0320 	and.w	r3, r3, #32
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d006      	beq.n	8000d10 <NRF_TransmitAndWait+0x4c>
      // Packet transmitted
      ret = NRF_SetRegisterBit(NRF_REG_STATUS, STATUS_BIT_TX_DS); // clear flag
 8000d02:	2105      	movs	r1, #5
 8000d04:	2007      	movs	r0, #7
 8000d06:	f000 f841 	bl	8000d8c <NRF_SetRegisterBit>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8000d0e:	e00a      	b.n	8000d26 <NRF_TransmitAndWait+0x62>
    } else if (status & (1<<STATUS_BIT_MAX_RT)) {
 8000d10:	7bbb      	ldrb	r3, [r7, #14]
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0ea      	beq.n	8000cf0 <NRF_TransmitAndWait+0x2c>
      // Max retransmits reached.
      NRF_SetRegisterBit(NRF_REG_STATUS, STATUS_BIT_MAX_RT); // clear flag
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	2007      	movs	r0, #7
 8000d1e:	f000 f835 	bl	8000d8c <NRF_SetRegisterBit>
      ret = HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	73fb      	strb	r3, [r7, #15]
      break;
    }
  }
  ce_reset();
 8000d26:	f7ff feb1 	bl	8000a8c <ce_reset>

  return ret;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <NRF_WriteRegister>:
 * Register helpers
 *
 */

/* Writing */
NRF_Status NRF_WriteRegister(uint8_t reg, uint8_t *write, uint8_t length) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
 8000d40:	4613      	mov	r3, r2
 8000d42:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_REGISTER | reg, write, length);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	79ba      	ldrb	r2, [r7, #6]
 8000d4e:	6839      	ldr	r1, [r7, #0]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fefd 	bl	8000b50 <NRF_SendWriteCommand>
 8000d56:	4603      	mov	r3, r0
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <NRF_WriteRegisterByte>:

NRF_Status NRF_WriteRegisterByte(uint8_t reg, uint8_t byte) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	460a      	mov	r2, r1
 8000d6a:	71fb      	strb	r3, [r7, #7]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	71bb      	strb	r3, [r7, #6]
  uint8_t write = byte;
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	73fb      	strb	r3, [r7, #15]
  return NRF_WriteRegister(reg, &write, 1);
 8000d74:	f107 010f 	add.w	r1, r7, #15
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff ffd9 	bl	8000d34 <NRF_WriteRegister>
 8000d82:	4603      	mov	r3, r0
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <NRF_SetRegisterBit>:

NRF_Status NRF_SetRegisterBit(uint8_t reg, uint8_t bit) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	460a      	mov	r2, r1
 8000d96:	71fb      	strb	r3, [r7, #7]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8000da0:	2300      	movs	r3, #0
 8000da2:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 8000da4:	f107 010e 	add.w	r1, r7, #14
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2201      	movs	r2, #1
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 f851 	bl	8000e54 <NRF_ReadRegister>
 8000db2:	4603      	mov	r3, r0
 8000db4:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <NRF_SetRegisterBit+0x34>
    return ret;
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	e012      	b.n	8000de6 <NRF_SetRegisterBit+0x5a>
  }
  cfg = cfg | (1 << bit);
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	b25a      	sxtb	r2, r3
 8000dca:	7bbb      	ldrb	r3, [r7, #14]
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 8000dd6:	f107 010e 	add.w	r1, r7, #14
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff ffa8 	bl	8000d34 <NRF_WriteRegister>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <NRF_ResetRegisterBit>:

NRF_Status NRF_ResetRegisterBit(uint8_t reg, uint8_t bit) {
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	460a      	mov	r2, r1
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8000e02:	2300      	movs	r3, #0
 8000e04:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 8000e06:	f107 010e 	add.w	r1, r7, #14
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f820 	bl	8000e54 <NRF_ReadRegister>
 8000e14:	4603      	mov	r3, r0
 8000e16:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <NRF_ResetRegisterBit+0x34>
    return ret;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	e014      	b.n	8000e4c <NRF_ResetRegisterBit+0x5e>
  }
  cfg = cfg & ~(1 << bit);
 8000e22:	79bb      	ldrb	r3, [r7, #6]
 8000e24:	2201      	movs	r2, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	b25b      	sxtb	r3, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	b25a      	sxtb	r2, r3
 8000e30:	7bbb      	ldrb	r3, [r7, #14]
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	4013      	ands	r3, r2
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 8000e3c:	f107 010e 	add.w	r1, r7, #14
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2201      	movs	r2, #1
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff75 	bl	8000d34 <NRF_WriteRegister>
 8000e4a:	4603      	mov	r3, r0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <NRF_ReadRegister>:


/* Reading */
NRF_Status NRF_ReadRegister(uint8_t reg, uint8_t *read, uint8_t length) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
 8000e60:	4613      	mov	r3, r2
 8000e62:	71bb      	strb	r3, [r7, #6]
  return NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, read, length);
 8000e64:	79ba      	ldrb	r2, [r7, #6]
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	6839      	ldr	r1, [r7, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fea6 	bl	8000bbc <NRF_SendReadCommand>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <NRF_ReadStatus>:
  uint8_t read;
  NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, &read, 1);
  return read;
}

uint8_t NRF_ReadStatus() {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af02      	add	r7, sp, #8
  uint8_t status;
  uint8_t cmd = NRF_CMD_NOP;
 8000e82:	23ff      	movs	r3, #255	; 0xff
 8000e84:	71bb      	strb	r3, [r7, #6]

  csn_reset();
 8000e86:	f7ff fde1 	bl	8000a4c <csn_reset>
  HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <NRF_ReadStatus+0x30>)
 8000e8c:	6818      	ldr	r0, [r3, #0]
 8000e8e:	1dfa      	adds	r2, r7, #7
 8000e90:	1db9      	adds	r1, r7, #6
 8000e92:	230a      	movs	r3, #10
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2301      	movs	r3, #1
 8000e98:	f007 fc88 	bl	80087ac <HAL_SPI_TransmitReceive>
  csn_set();
 8000e9c:	f7ff fdc6 	bl	8000a2c <csn_set>

  return status;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001a8 	.word	0x200001a8

08000eb0 <NRF_Reset>:
  }

  return ret;
}

void NRF_Reset() {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
  // Reset state (goto standby-I)
  csn_set();
 8000eb6:	f7ff fdb9 	bl	8000a2c <csn_set>
  ce_reset();
 8000eba:	f7ff fde7 	bl	8000a8c <ce_reset>

  // Flush FIFOs
  NRF_EnterMode(NRF_MODE_TX);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f7ff feb2 	bl	8000c28 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_TX);
 8000ec4:	20e1      	movs	r0, #225	; 0xe1
 8000ec6:	f7ff fe1f 	bl	8000b08 <NRF_SendCommand>
  ce_reset();
 8000eca:	f7ff fddf 	bl	8000a8c <ce_reset>
  NRF_EnterMode(NRF_MODE_RX);
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f7ff feaa 	bl	8000c28 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_RX);
 8000ed4:	20e2      	movs	r0, #226	; 0xe2
 8000ed6:	f7ff fe17 	bl	8000b08 <NRF_SendCommand>
  ce_reset();
 8000eda:	f7ff fdd7 	bl	8000a8c <ce_reset>

  // Flush register
  NRF_WriteRegisterByte(NRF_REG_CONFIG,       0x0A);
 8000ede:	210a      	movs	r1, #10
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff ff3d 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_AA,        0x3f);
 8000ee6:	213f      	movs	r1, #63	; 0x3f
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f7ff ff39 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_RXADDR,    0x03);
 8000eee:	2103      	movs	r1, #3
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f7ff ff35 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_AW,     0x03);
 8000ef6:	2103      	movs	r1, #3
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f7ff ff31 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_RETR,   0x03);
 8000efe:	2103      	movs	r1, #3
 8000f00:	2004      	movs	r0, #4
 8000f02:	f7ff ff2d 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_CH,        0x02);
 8000f06:	2102      	movs	r1, #2
 8000f08:	2005      	movs	r0, #5
 8000f0a:	f7ff ff29 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_SETUP,     0x0e);
 8000f0e:	210e      	movs	r1, #14
 8000f10:	2006      	movs	r0, #6
 8000f12:	f7ff ff25 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_STATUS,       0x70); // clear flags
 8000f16:	2170      	movs	r1, #112	; 0x70
 8000f18:	2007      	movs	r0, #7
 8000f1a:	f7ff ff21 	bl	8000d60 <NRF_WriteRegisterByte>

  uint8_t address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000f1e:	4a2d      	ldr	r2, [pc, #180]	; (8000fd4 <NRF_Reset+0x124>)
 8000f20:	f107 0308 	add.w	r3, r7, #8
 8000f24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f28:	6018      	str	r0, [r3, #0]
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	7019      	strb	r1, [r3, #0]
  uint8_t address2[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000f2e:	4a2a      	ldr	r2, [pc, #168]	; (8000fd8 <NRF_Reset+0x128>)
 8000f30:	463b      	mov	r3, r7
 8000f32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f36:	6018      	str	r0, [r3, #0]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	2205      	movs	r2, #5
 8000f42:	4619      	mov	r1, r3
 8000f44:	200a      	movs	r0, #10
 8000f46:	f7ff fef5 	bl	8000d34 <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P1, address2, 5);
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	2205      	movs	r2, #5
 8000f4e:	4619      	mov	r1, r3
 8000f50:	200b      	movs	r0, #11
 8000f52:	f7ff feef 	bl	8000d34 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P2,   0xC3);
 8000f56:	21c3      	movs	r1, #195	; 0xc3
 8000f58:	200c      	movs	r0, #12
 8000f5a:	f7ff ff01 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P3,   0xC4);
 8000f5e:	21c4      	movs	r1, #196	; 0xc4
 8000f60:	200d      	movs	r0, #13
 8000f62:	f7ff fefd 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P4,   0xC5);
 8000f66:	21c5      	movs	r1, #197	; 0xc5
 8000f68:	200e      	movs	r0, #14
 8000f6a:	f7ff fef9 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P5,   0xC6);
 8000f6e:	21c6      	movs	r1, #198	; 0xc6
 8000f70:	200f      	movs	r0, #15
 8000f72:	f7ff fef5 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2205      	movs	r2, #5
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	2010      	movs	r0, #16
 8000f80:	f7ff fed8 	bl	8000d34 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,     0x00);
 8000f84:	2100      	movs	r1, #0
 8000f86:	2011      	movs	r0, #17
 8000f88:	f7ff feea 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P1,     0x00);
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2012      	movs	r0, #18
 8000f90:	f7ff fee6 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P2,     0x00);
 8000f94:	2100      	movs	r1, #0
 8000f96:	2013      	movs	r0, #19
 8000f98:	f7ff fee2 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P3,     0x00);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2014      	movs	r0, #20
 8000fa0:	f7ff fede 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P4,     0x00);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	2015      	movs	r0, #21
 8000fa8:	f7ff feda 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P5,     0x00);
 8000fac:	2100      	movs	r1, #0
 8000fae:	2016      	movs	r0, #22
 8000fb0:	f7ff fed6 	bl	8000d60 <NRF_WriteRegisterByte>

  NRF_WriteRegisterByte(NRF_REG_FIFO_STATUS,  0x00);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2017      	movs	r0, #23
 8000fb8:	f7ff fed2 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_DYNPD,        0x00);
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	201c      	movs	r0, #28
 8000fc0:	f7ff fece 	bl	8000d60 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_FEATURE,      0x00);
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	201d      	movs	r0, #29
 8000fc8:	f7ff feca 	bl	8000d60 <NRF_WriteRegisterByte>
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	0800a9d4 	.word	0x0800a9d4
 8000fd8:	0800a9dc 	.word	0x0800a9dc

08000fdc <NRF_PrintStatus>:

void NRF_PrintStatus() {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  uint8_t status = NRF_ReadStatus();
 8000fe2:	f7ff ff4b 	bl	8000e7c <NRF_ReadStatus>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]

  printf("Status register: %02X\r\n", status);
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	4619      	mov	r1, r3
 8000fee:	4825      	ldr	r0, [pc, #148]	; (8001084 <NRF_PrintStatus+0xa8>)
 8000ff0:	f008 fdc6 	bl	8009b80 <iprintf>
  printf("CE: %d\r\n", HAL_GPIO_ReadPin(NRF_CE_Port, NRF_CE_Pin));
 8000ff4:	4b24      	ldr	r3, [pc, #144]	; (8001088 <NRF_PrintStatus+0xac>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a24      	ldr	r2, [pc, #144]	; (800108c <NRF_PrintStatus+0xb0>)
 8000ffa:	8812      	ldrh	r2, [r2, #0]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 fe5a 	bl	8001cb8 <HAL_GPIO_ReadPin>
 8001004:	4603      	mov	r3, r0
 8001006:	4619      	mov	r1, r3
 8001008:	4821      	ldr	r0, [pc, #132]	; (8001090 <NRF_PrintStatus+0xb4>)
 800100a:	f008 fdb9 	bl	8009b80 <iprintf>
  printf("CSN: %d\r\n", HAL_GPIO_ReadPin(NRF_CSN_Port, NRF_CSN_Pin));
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <NRF_PrintStatus+0xb8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a21      	ldr	r2, [pc, #132]	; (8001098 <NRF_PrintStatus+0xbc>)
 8001014:	8812      	ldrh	r2, [r2, #0]
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fe4d 	bl	8001cb8 <HAL_GPIO_ReadPin>
 800101e:	4603      	mov	r3, r0
 8001020:	4619      	mov	r1, r3
 8001022:	481e      	ldr	r0, [pc, #120]	; (800109c <NRF_PrintStatus+0xc0>)
 8001024:	f008 fdac 	bl	8009b80 <iprintf>
  printf("TX_FULL:  %1X\r\n", status & (1<<STATUS_BIT_TX_FULL));
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	4619      	mov	r1, r3
 8001030:	481b      	ldr	r0, [pc, #108]	; (80010a0 <NRF_PrintStatus+0xc4>)
 8001032:	f008 fda5 	bl	8009b80 <iprintf>
  printf("RX_P_NO:  %1X\r\n", (status & (0x3<<STATUS_BIT_RX_P_NO)) >> 1);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	105b      	asrs	r3, r3, #1
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	4619      	mov	r1, r3
 8001040:	4818      	ldr	r0, [pc, #96]	; (80010a4 <NRF_PrintStatus+0xc8>)
 8001042:	f008 fd9d 	bl	8009b80 <iprintf>
  printf("MAX_RT:   %1X\r\n", (status & (1<<STATUS_BIT_MAX_RT))    >> 4);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	111b      	asrs	r3, r3, #4
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	4619      	mov	r1, r3
 8001050:	4815      	ldr	r0, [pc, #84]	; (80010a8 <NRF_PrintStatus+0xcc>)
 8001052:	f008 fd95 	bl	8009b80 <iprintf>
  printf("TX_DS:    %1X\r\n", (status & (1<<STATUS_BIT_TX_DS))     >> 5);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	115b      	asrs	r3, r3, #5
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	4619      	mov	r1, r3
 8001060:	4812      	ldr	r0, [pc, #72]	; (80010ac <NRF_PrintStatus+0xd0>)
 8001062:	f008 fd8d 	bl	8009b80 <iprintf>
  printf("RX_DR:    %1X\r\n", (status & (1<<STATUS_BIT_RX_DR))     >> 6);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	119b      	asrs	r3, r3, #6
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	4619      	mov	r1, r3
 8001070:	480f      	ldr	r0, [pc, #60]	; (80010b0 <NRF_PrintStatus+0xd4>)
 8001072:	f008 fd85 	bl	8009b80 <iprintf>
  printf("\r\n");
 8001076:	480f      	ldr	r0, [pc, #60]	; (80010b4 <NRF_PrintStatus+0xd8>)
 8001078:	f008 fde8 	bl	8009c4c <puts>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	0800a9e4 	.word	0x0800a9e4
 8001088:	200001b4 	.word	0x200001b4
 800108c:	200001b8 	.word	0x200001b8
 8001090:	0800a9fc 	.word	0x0800a9fc
 8001094:	200001ac 	.word	0x200001ac
 8001098:	200001b0 	.word	0x200001b0
 800109c:	0800aa08 	.word	0x0800aa08
 80010a0:	0800aa14 	.word	0x0800aa14
 80010a4:	0800aa24 	.word	0x0800aa24
 80010a8:	0800aa34 	.word	0x0800aa34
 80010ac:	0800aa44 	.word	0x0800aa44
 80010b0:	0800aa54 	.word	0x0800aa54
 80010b4:	0800aa64 	.word	0x0800aa64

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b0ce      	sub	sp, #312	; 0x138
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010d2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80010d6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80010ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80010f0:	4618      	mov	r0, r3
 80010f2:	f44f 7384 	mov.w	r3, #264	; 0x108
 80010f6:	461a      	mov	r2, r3
 80010f8:	2100      	movs	r1, #0
 80010fa:	f008 fe87 	bl	8009e0c <memset>
  if(hspi->Instance==SPI1)
 80010fe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001102:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a60      	ldr	r2, [pc, #384]	; (800128c <HAL_SPI_MspInit+0x1c4>)
 800110c:	4293      	cmp	r3, r2
 800110e:	f040 80b7 	bne.w	8001280 <HAL_SPI_MspInit+0x1b8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001112:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001116:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 800111a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001126:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800112a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800112e:	2200      	movs	r2, #0
 8001130:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fd99 	bl	8002c70 <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8001144:	f7ff fc6c 	bl	8000a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001148:	4b51      	ldr	r3, [pc, #324]	; (8001290 <HAL_SPI_MspInit+0x1c8>)
 800114a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800114e:	4a50      	ldr	r2, [pc, #320]	; (8001290 <HAL_SPI_MspInit+0x1c8>)
 8001150:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001154:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001158:	4b4d      	ldr	r3, [pc, #308]	; (8001290 <HAL_SPI_MspInit+0x1c8>)
 800115a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800115e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001162:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001166:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001170:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001174:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b46      	ldr	r3, [pc, #280]	; (8001290 <HAL_SPI_MspInit+0x1c8>)
 8001178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800117c:	4a44      	ldr	r2, [pc, #272]	; (8001290 <HAL_SPI_MspInit+0x1c8>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001186:	4b42      	ldr	r3, [pc, #264]	; (8001290 <HAL_SPI_MspInit+0x1c8>)
 8001188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800118c:	f003 0201 	and.w	r2, r3, #1
 8001190:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001194:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800119e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80011a2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011a4:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <HAL_SPI_MspInit+0x1c8>)
 80011a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011aa:	4a39      	ldr	r2, [pc, #228]	; (8001290 <HAL_SPI_MspInit+0x1c8>)
 80011ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <HAL_SPI_MspInit+0x1c8>)
 80011b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011ba:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80011be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011d0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <HAL_SPI_MspInit+0x1c8>)
 80011d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011d8:	4a2d      	ldr	r2, [pc, #180]	; (8001290 <HAL_SPI_MspInit+0x1c8>)
 80011da:	f043 0302 	orr.w	r3, r3, #2
 80011de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011e2:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <HAL_SPI_MspInit+0x1c8>)
 80011e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011e8:	f003 0202 	and.w	r2, r3, #2
 80011ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80011fe:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin;
 8001200:	2320      	movs	r3, #32
 8001202:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001218:	2305      	movs	r3, #5
 800121a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 800121e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001222:	4619      	mov	r1, r3
 8001224:	481b      	ldr	r0, [pc, #108]	; (8001294 <HAL_SPI_MspInit+0x1cc>)
 8001226:	f000 fbf5 	bl	8001a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 800122a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001244:	2305      	movs	r3, #5
 8001246:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 800124a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800124e:	4619      	mov	r1, r3
 8001250:	4811      	ldr	r0, [pc, #68]	; (8001298 <HAL_SPI_MspInit+0x1d0>)
 8001252:	f000 fbdf 	bl	8001a14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MOSI_Pin;
 8001256:	2320      	movs	r3, #32
 8001258:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800126e:	2305      	movs	r3, #5
 8001270:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001274:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001278:	4619      	mov	r1, r3
 800127a:	4808      	ldr	r0, [pc, #32]	; (800129c <HAL_SPI_MspInit+0x1d4>)
 800127c:	f000 fbca 	bl	8001a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001280:	bf00      	nop
 8001282:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40013000 	.word	0x40013000
 8001290:	44020c00 	.word	0x44020c00
 8001294:	42020000 	.word	0x42020000
 8001298:	42021800 	.word	0x42021800
 800129c:	42020400 	.word	0x42020400

080012a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b0cc      	sub	sp, #304	; 0x130
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012ae:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80012c8:	4618      	mov	r0, r3
 80012ca:	f44f 7384 	mov.w	r3, #264	; 0x108
 80012ce:	461a      	mov	r2, r3
 80012d0:	2100      	movs	r1, #0
 80012d2:	f008 fd9b 	bl	8009e0c <memset>
  if(huart->Instance==USART3)
 80012d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a33      	ldr	r2, [pc, #204]	; (80013b0 <HAL_UART_MspInit+0x110>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d15d      	bne.n	80013a4 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012ec:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80012f0:	f04f 0204 	mov.w	r2, #4
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001300:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001304:	2200      	movs	r2, #0
 8001306:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fcaf 	bl	8002c70 <HAL_RCCEx_PeriphCLKConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8001318:	f7ff fb82 	bl	8000a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <HAL_UART_MspInit+0x114>)
 800131e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001322:	4a24      	ldr	r2, [pc, #144]	; (80013b4 <HAL_UART_MspInit+0x114>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001328:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_UART_MspInit+0x114>)
 800132e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001332:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8001336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800133a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001344:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001348:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HAL_UART_MspInit+0x114>)
 800134c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001350:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <HAL_UART_MspInit+0x114>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HAL_UART_MspInit+0x114>)
 800135c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001360:	f003 0208 	and.w	r2, r3, #8
 8001364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001368:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001372:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001376:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001378:	f44f 7340 	mov.w	r3, #768	; 0x300
 800137c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001392:	2307      	movs	r3, #7
 8001394:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001398:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <HAL_UART_MspInit+0x118>)
 80013a0:	f000 fb38 	bl	8001a14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40004800 	.word	0x40004800
 80013b4:	44020c00 	.word	0x44020c00
 80013b8:	42020c00 	.word	0x42020c00

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <NMI_Handler+0x4>

080013c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <MemManage_Handler+0x4>

080013ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d2:	e7fe      	b.n	80013d2 <BusFault_Handler+0x4>

080013d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <UsageFault_Handler+0x4>

080013da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001408:	f000 f9b0 	bl	800176c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}

08001410 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_USER_Pin);
 8001414:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001418:	f000 fc7e 	bl	8001d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}

08001420 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	e00a      	b.n	8001448 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001432:	f3af 8000 	nop.w
 8001436:	4601      	mov	r1, r0
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	1c5a      	adds	r2, r3, #1
 800143c:	60ba      	str	r2, [r7, #8]
 800143e:	b2ca      	uxtb	r2, r1
 8001440:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	3301      	adds	r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	dbf0      	blt.n	8001432 <_read+0x12>
  }

  return len;
 8001450:	687b      	ldr	r3, [r7, #4]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	e009      	b.n	8001480 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	1c5a      	adds	r2, r3, #1
 8001470:	60ba      	str	r2, [r7, #8]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f899 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3301      	adds	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbf1      	blt.n	800146c <_write+0x12>
  }
  return len;
 8001488:	687b      	ldr	r3, [r7, #4]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <_close>:

int _close(int file)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ba:	605a      	str	r2, [r3, #4]
  return 0;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <_isatty>:

int _isatty(int file)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001504:	4a14      	ldr	r2, [pc, #80]	; (8001558 <_sbrk+0x5c>)
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <_sbrk+0x60>)
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <_sbrk+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d102      	bne.n	800151e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <_sbrk+0x64>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <_sbrk+0x68>)
 800151c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	429a      	cmp	r2, r3
 800152a:	d207      	bcs.n	800153c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800152c:	f008 fcbc 	bl	8009ea8 <__errno>
 8001530:	4603      	mov	r3, r0
 8001532:	220c      	movs	r2, #12
 8001534:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800153a:	e009      	b.n	8001550 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <_sbrk+0x64>)
 800154c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154e:	68fb      	ldr	r3, [r7, #12]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200a0000 	.word	0x200a0000
 800155c:	00000400 	.word	0x00000400
 8001560:	200001bc 	.word	0x200001bc
 8001564:	20000310 	.word	0x20000310

08001568 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800156e:	4b35      	ldr	r3, [pc, #212]	; (8001644 <SystemInit+0xdc>)
 8001570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001574:	4a33      	ldr	r2, [pc, #204]	; (8001644 <SystemInit+0xdc>)
 8001576:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800157e:	4b32      	ldr	r3, [pc, #200]	; (8001648 <SystemInit+0xe0>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <SystemInit+0xe0>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800158a:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <SystemInit+0xe0>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001590:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <SystemInit+0xe0>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	492c      	ldr	r1, [pc, #176]	; (8001648 <SystemInit+0xe0>)
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <SystemInit+0xe4>)
 8001598:	4013      	ands	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800159c:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <SystemInit+0xe0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 80015a2:	4b29      	ldr	r3, [pc, #164]	; (8001648 <SystemInit+0xe0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80015a8:	4b27      	ldr	r3, [pc, #156]	; (8001648 <SystemInit+0xe0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <SystemInit+0xe0>)
 80015b0:	4a27      	ldr	r2, [pc, #156]	; (8001650 <SystemInit+0xe8>)
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80015b4:	4b24      	ldr	r3, [pc, #144]	; (8001648 <SystemInit+0xe0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <SystemInit+0xe0>)
 80015bc:	4a24      	ldr	r2, [pc, #144]	; (8001650 <SystemInit+0xe8>)
 80015be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <SystemInit+0xe0>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <SystemInit+0xe0>)
 80015c8:	4a21      	ldr	r2, [pc, #132]	; (8001650 <SystemInit+0xe8>)
 80015ca:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80015cc:	4b1e      	ldr	r3, [pc, #120]	; (8001648 <SystemInit+0xe0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80015d2:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <SystemInit+0xe0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <SystemInit+0xe0>)
 80015d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <SystemInit+0xe0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <SystemInit+0xdc>)
 80015e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ea:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <SystemInit+0xec>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80015f4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80015fc:	d003      	beq.n	8001606 <SystemInit+0x9e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001604:	d117      	bne.n	8001636 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <SystemInit+0xec>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <SystemInit+0xec>)
 8001614:	4a10      	ldr	r2, [pc, #64]	; (8001658 <SystemInit+0xf0>)
 8001616:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <SystemInit+0xec>)
 800161a:	4a10      	ldr	r2, [pc, #64]	; (800165c <SystemInit+0xf4>)
 800161c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <SystemInit+0xec>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <SystemInit+0xec>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <SystemInit+0xec>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <SystemInit+0xec>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	61d3      	str	r3, [r2, #28]
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00
 8001648:	44020c00 	.word	0x44020c00
 800164c:	eae2eae3 	.word	0xeae2eae3
 8001650:	01010280 	.word	0x01010280
 8001654:	40022000 	.word	0x40022000
 8001658:	08192a3b 	.word	0x08192a3b
 800165c:	4c5d6e7f 	.word	0x4c5d6e7f

08001660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001662:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001664:	f7ff ff80 	bl	8001568 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <LoopForever+0x6>)
  ldr r1, =_edata
 800166a:	490d      	ldr	r1, [pc, #52]	; (80016a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <LoopForever+0xe>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001680:	4c0a      	ldr	r4, [pc, #40]	; (80016ac <LoopForever+0x16>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800168e:	f008 fc11 	bl	8009eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001692:	f7ff f801 	bl	8000698 <main>

08001696 <LoopForever>:

LoopForever:
    b LoopForever
 8001696:	e7fe      	b.n	8001696 <LoopForever>
  ldr   r0, =_estack
 8001698:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016a4:	0800ab70 	.word	0x0800ab70
  ldr r2, =_sbss
 80016a8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016ac:	20000310 	.word	0x20000310

080016b0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC1_IRQHandler>
	...

080016b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 f96b 	bl	8001994 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80016be:	f001 f94d 	bl	800295c <HAL_RCC_GetSysClockFreq>
 80016c2:	4602      	mov	r2, r0
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_Init+0x40>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	f003 030f 	and.w	r3, r3, #15
 80016cc:	490a      	ldr	r1, [pc, #40]	; (80016f8 <HAL_Init+0x44>)
 80016ce:	5ccb      	ldrb	r3, [r1, r3]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
 80016d4:	4a09      	ldr	r2, [pc, #36]	; (80016fc <HAL_Init+0x48>)
 80016d6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016d8:	200f      	movs	r0, #15
 80016da:	f000 f811 	bl	8001700 <HAL_InitTick>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e002      	b.n	80016ee <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016e8:	f7ff fce6 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	44020c00 	.word	0x44020c00
 80016f8:	0800aaec 	.word	0x0800aaec
 80016fc:	20000000 	.word	0x20000000

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_InitTick+0x60>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d101      	bne.n	8001714 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e021      	b.n	8001758 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <HAL_InitTick+0x64>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <HAL_InitTick+0x60>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001722:	fbb3 f3f1 	udiv	r3, r3, r1
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f965 	bl	80019fa <HAL_SYSTICK_Config>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e00e      	b.n	8001758 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b0f      	cmp	r3, #15
 800173e:	d80a      	bhi.n	8001756 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001748:	f000 f92f 	bl	80019aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800174c:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_InitTick+0x68>)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e000      	b.n	8001758 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000008 	.word	0x20000008
 8001764:	20000000 	.word	0x20000000
 8001768:	20000004 	.word	0x20000004

0800176c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_IncTick+0x20>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_IncTick+0x24>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <HAL_IncTick+0x24>)
 800177e:	6013      	str	r3, [r2, #0]
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000008 	.word	0x20000008
 8001790:	200001c0 	.word	0x200001c0

08001794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return uwTick;
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <HAL_GetTick+0x14>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	200001c0 	.word	0x200001c0

080017ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017b4:	f7ff ffee 	bl	8001794 <HAL_GetTick>
 80017b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017c4:	d005      	beq.n	80017d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_Delay+0x44>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4413      	add	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017d2:	bf00      	nop
 80017d4:	f7ff ffde 	bl	8001794 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d8f7      	bhi.n	80017d4 <HAL_Delay+0x28>
  {
  }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008

080017f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800181c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <__NVIC_GetPriorityGrouping+0x18>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	0a1b      	lsrs	r3, r3, #8
 8001846:	f003 0307 	and.w	r3, r3, #7
}
 800184a:	4618      	mov	r0, r3
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001866:	2b00      	cmp	r3, #0
 8001868:	db0b      	blt.n	8001882 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	f003 021f 	and.w	r2, r3, #31
 8001870:	4907      	ldr	r1, [pc, #28]	; (8001890 <__NVIC_EnableIRQ+0x38>)
 8001872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001876:	095b      	lsrs	r3, r3, #5
 8001878:	2001      	movs	r0, #1
 800187a:	fa00 f202 	lsl.w	r2, r0, r2
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000e100 	.word	0xe000e100

08001894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	6039      	str	r1, [r7, #0]
 800189e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	db0a      	blt.n	80018be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	490c      	ldr	r1, [pc, #48]	; (80018e0 <__NVIC_SetPriority+0x4c>)
 80018ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b2:	0112      	lsls	r2, r2, #4
 80018b4:	b2d2      	uxtb	r2, r2
 80018b6:	440b      	add	r3, r1
 80018b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018bc:	e00a      	b.n	80018d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	4908      	ldr	r1, [pc, #32]	; (80018e4 <__NVIC_SetPriority+0x50>)
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	3b04      	subs	r3, #4
 80018cc:	0112      	lsls	r2, r2, #4
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	440b      	add	r3, r1
 80018d2:	761a      	strb	r2, [r3, #24]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000e100 	.word	0xe000e100
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b089      	sub	sp, #36	; 0x24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f1c3 0307 	rsb	r3, r3, #7
 8001902:	2b04      	cmp	r3, #4
 8001904:	bf28      	it	cs
 8001906:	2304      	movcs	r3, #4
 8001908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3304      	adds	r3, #4
 800190e:	2b06      	cmp	r3, #6
 8001910:	d902      	bls.n	8001918 <NVIC_EncodePriority+0x30>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3b03      	subs	r3, #3
 8001916:	e000      	b.n	800191a <NVIC_EncodePriority+0x32>
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800191c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43da      	mvns	r2, r3
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	401a      	ands	r2, r3
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001930:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43d9      	mvns	r1, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	4313      	orrs	r3, r2
         );
}
 8001942:	4618      	mov	r0, r3
 8001944:	3724      	adds	r7, #36	; 0x24
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3b01      	subs	r3, #1
 800195c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001960:	d301      	bcc.n	8001966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001962:	2301      	movs	r3, #1
 8001964:	e00f      	b.n	8001986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001966:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <SysTick_Config+0x40>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196e:	210f      	movs	r1, #15
 8001970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001974:	f7ff ff8e 	bl	8001894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <SysTick_Config+0x40>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <SysTick_Config+0x40>)
 8001980:	2207      	movs	r2, #7
 8001982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	e000e010 	.word	0xe000e010

08001994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff29 	bl	80017f4 <__NVIC_SetPriorityGrouping>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b086      	sub	sp, #24
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	4603      	mov	r3, r0
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019b8:	f7ff ff40 	bl	800183c <__NVIC_GetPriorityGrouping>
 80019bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7ff ff90 	bl	80018e8 <NVIC_EncodePriority>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff5f 	bl	8001894 <__NVIC_SetPriority>
}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff33 	bl	8001858 <__NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffa4 	bl	8001950 <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a22:	e136      	b.n	8001c92 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2101      	movs	r1, #1
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	4013      	ands	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8128 	beq.w	8001c8c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x38>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b12      	cmp	r3, #18
 8001a4a:	d125      	bne.n	8001a98 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a58:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	f003 020f 	and.w	r2, r3, #15
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	08da      	lsrs	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	3208      	adds	r2, #8
 8001a92:	6979      	ldr	r1, [r7, #20]
 8001a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4013      	ands	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 0203 	and.w	r2, r3, #3
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d00b      	beq.n	8001aec <HAL_GPIO_Init+0xd8>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d007      	beq.n	8001aec <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ae0:	2b11      	cmp	r3, #17
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b12      	cmp	r3, #18
 8001aea:	d130      	bne.n	8001b4e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	2203      	movs	r2, #3
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	43db      	mvns	r3, r3
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68da      	ldr	r2, [r3, #12]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b22:	2201      	movs	r2, #1
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 0201 	and.w	r2, r3, #1
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d017      	beq.n	8001b86 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d07c      	beq.n	8001c8c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001b92:	4a47      	ldr	r2, [pc, #284]	; (8001cb0 <HAL_GPIO_Init+0x29c>)
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	3318      	adds	r3, #24
 8001b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	220f      	movs	r2, #15
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	0a9a      	lsrs	r2, r3, #10
 8001bba:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <HAL_GPIO_Init+0x2a0>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	f002 0203 	and.w	r2, r2, #3
 8001bc4:	00d2      	lsls	r2, r2, #3
 8001bc6:	4093      	lsls	r3, r2
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001bce:	4938      	ldr	r1, [pc, #224]	; (8001cb0 <HAL_GPIO_Init+0x29c>)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3318      	adds	r3, #24
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001bdc:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <HAL_GPIO_Init+0x29c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4013      	ands	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001c00:	4a2b      	ldr	r2, [pc, #172]	; (8001cb0 <HAL_GPIO_Init+0x29c>)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001c06:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_GPIO_Init+0x29c>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	4013      	ands	r3, r2
 8001c14:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001c2a:	4a21      	ldr	r2, [pc, #132]	; (8001cb0 <HAL_GPIO_Init+0x29c>)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001c30:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <HAL_GPIO_Init+0x29c>)
 8001c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c36:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001c56:	4a16      	ldr	r2, [pc, #88]	; (8001cb0 <HAL_GPIO_Init+0x29c>)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001c5e:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_GPIO_Init+0x29c>)
 8001c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c64:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001c84:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <HAL_GPIO_Init+0x29c>)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f47f aec1 	bne.w	8001a24 <HAL_GPIO_Init+0x10>
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	44022000 	.word	0x44022000
 8001cb4:	002f7f7f 	.word	0x002f7f7f

08001cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	887b      	ldrh	r3, [r7, #2]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
 8001cd4:	e001      	b.n	8001cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	807b      	strh	r3, [r7, #2]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cf8:	787b      	ldrb	r3, [r7, #1]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cfe:	887a      	ldrh	r2, [r7, #2]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d04:	e002      	b.n	8001d0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d06:	887a      	ldrh	r2, [r7, #2]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d006      	beq.n	8001d3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc4a 	bl	80005d0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d006      	beq.n	8001d56 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001d48:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f807 	bl	8001d64 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	44022000 	.word	0x44022000

08001d64 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d102      	bne.n	8001d90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f000 bc28 	b.w	80025e0 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d90:	4b94      	ldr	r3, [pc, #592]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	f003 0318 	and.w	r3, r3, #24
 8001d98:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001d9a:	4b92      	ldr	r3, [pc, #584]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d05b      	beq.n	8001e68 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d005      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x46>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	2b18      	cmp	r3, #24
 8001dba:	d114      	bne.n	8001de6 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d111      	bne.n	8001de6 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f000 bc08 	b.w	80025e0 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001dd0:	4b84      	ldr	r3, [pc, #528]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	041b      	lsls	r3, r3, #16
 8001dde:	4981      	ldr	r1, [pc, #516]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001de4:	e040      	b.n	8001e68 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d023      	beq.n	8001e36 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001dee:	4b7d      	ldr	r3, [pc, #500]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a7c      	ldr	r2, [pc, #496]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fccb 	bl	8001794 <HAL_GetTick>
 8001dfe:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001e02:	f7ff fcc7 	bl	8001794 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e3e5      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001e14:	4b73      	ldr	r3, [pc, #460]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001e20:	4b70      	ldr	r3, [pc, #448]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	496d      	ldr	r1, [pc, #436]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	618b      	str	r3, [r1, #24]
 8001e34:	e018      	b.n	8001e68 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e36:	4b6b      	ldr	r3, [pc, #428]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a6a      	ldr	r2, [pc, #424]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e42:	f7ff fca7 	bl	8001794 <HAL_GetTick>
 8001e46:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fca3 	bl	8001794 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e3c1      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001e5c:	4b61      	ldr	r3, [pc, #388]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1f0      	bne.n	8001e4a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a0 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	2b10      	cmp	r3, #16
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_OscConfig+0x10c>
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	2b18      	cmp	r3, #24
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f040 8092 	bne.w	8001fb6 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e3a4      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x132>
 8001ea0:	4b50      	ldr	r3, [pc, #320]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a4f      	ldr	r2, [pc, #316]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e058      	b.n	8001f60 <HAL_RCC_OscConfig+0x1e4>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d112      	bne.n	8001edc <HAL_RCC_OscConfig+0x160>
 8001eb6:	4b4b      	ldr	r3, [pc, #300]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a4a      	ldr	r2, [pc, #296]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001ebc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b48      	ldr	r3, [pc, #288]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a47      	ldr	r2, [pc, #284]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001ec8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b45      	ldr	r3, [pc, #276]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a44      	ldr	r2, [pc, #272]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e041      	b.n	8001f60 <HAL_RCC_OscConfig+0x1e4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee4:	d112      	bne.n	8001f0c <HAL_RCC_OscConfig+0x190>
 8001ee6:	4b3f      	ldr	r3, [pc, #252]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a3e      	ldr	r2, [pc, #248]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b3c      	ldr	r3, [pc, #240]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a3b      	ldr	r2, [pc, #236]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001ef8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a38      	ldr	r2, [pc, #224]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e029      	b.n	8001f60 <HAL_RCC_OscConfig+0x1e4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001f14:	d112      	bne.n	8001f3c <HAL_RCC_OscConfig+0x1c0>
 8001f16:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a32      	ldr	r2, [pc, #200]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a2f      	ldr	r2, [pc, #188]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a2c      	ldr	r2, [pc, #176]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e011      	b.n	8001f60 <HAL_RCC_OscConfig+0x1e4>
 8001f3c:	4b29      	ldr	r3, [pc, #164]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a28      	ldr	r2, [pc, #160]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a25      	ldr	r2, [pc, #148]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b23      	ldr	r3, [pc, #140]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a22      	ldr	r2, [pc, #136]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7ff fc14 	bl	8001794 <HAL_GetTick>
 8001f6c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f70:	f7ff fc10 	bl	8001794 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e32e      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f82:	4b18      	ldr	r3, [pc, #96]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x1f4>
 8001f8e:	e012      	b.n	8001fb6 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff fc00 	bl	8001794 <HAL_GetTick>
 8001f94:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f98:	f7ff fbfc 	bl	8001794 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e31a      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <HAL_RCC_OscConfig+0x268>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 809a 	beq.w	80020f8 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x25a>
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	2b18      	cmp	r3, #24
 8001fce:	d149      	bne.n	8002064 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d146      	bne.n	8002064 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d104      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e2fe      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
 8001fe2:	bf00      	nop
 8001fe4:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d11c      	bne.n	8002028 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001fee:	4b9a      	ldr	r3, [pc, #616]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0218 	and.w	r2, r3, #24
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d014      	beq.n	8002028 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001ffe:	4b96      	ldr	r3, [pc, #600]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 0218 	bic.w	r2, r3, #24
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	4993      	ldr	r1, [pc, #588]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002010:	f000 fdd0 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002014:	4b91      	ldr	r3, [pc, #580]	; (800225c <HAL_RCC_OscConfig+0x4e0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fb71 	bl	8001700 <HAL_InitTick>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e2db      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002028:	f7ff fbb4 	bl	8001794 <HAL_GetTick>
 800202c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002030:	f7ff fbb0 	bl	8001794 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e2ce      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002042:	4b85      	ldr	r3, [pc, #532]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800204e:	4b82      	ldr	r3, [pc, #520]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	041b      	lsls	r3, r3, #16
 800205c:	497e      	ldr	r1, [pc, #504]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 800205e:	4313      	orrs	r3, r2
 8002060:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002062:	e049      	b.n	80020f8 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d02c      	beq.n	80020c6 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800206c:	4b7a      	ldr	r3, [pc, #488]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 0218 	bic.w	r2, r3, #24
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	4977      	ldr	r1, [pc, #476]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 800207a:	4313      	orrs	r3, r2
 800207c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800207e:	4b76      	ldr	r3, [pc, #472]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a75      	ldr	r2, [pc, #468]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7ff fb83 	bl	8001794 <HAL_GetTick>
 800208e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002092:	f7ff fb7f 	bl	8001794 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e29d      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a4:	4b6c      	ldr	r3, [pc, #432]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80020b0:	4b69      	ldr	r3, [pc, #420]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	041b      	lsls	r3, r3, #16
 80020be:	4966      	ldr	r1, [pc, #408]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	610b      	str	r3, [r1, #16]
 80020c4:	e018      	b.n	80020f8 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c6:	4b64      	ldr	r3, [pc, #400]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a63      	ldr	r2, [pc, #396]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 80020cc:	f023 0301 	bic.w	r3, r3, #1
 80020d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d2:	f7ff fb5f 	bl	8001794 <HAL_GetTick>
 80020d6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80020da:	f7ff fb5b 	bl	8001794 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e279      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ec:	4b5a      	ldr	r3, [pc, #360]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f0      	bne.n	80020da <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d03c      	beq.n	800217e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01c      	beq.n	8002146 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800210c:	4b52      	ldr	r3, [pc, #328]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 800210e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002112:	4a51      	ldr	r2, [pc, #324]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8002114:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002118:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7ff fb3a 	bl	8001794 <HAL_GetTick>
 8002120:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002124:	f7ff fb36 	bl	8001794 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e254      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002136:	4b48      	ldr	r3, [pc, #288]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8002138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800213c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0ef      	beq.n	8002124 <HAL_RCC_OscConfig+0x3a8>
 8002144:	e01b      	b.n	800217e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002146:	4b44      	ldr	r3, [pc, #272]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8002148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800214c:	4a42      	ldr	r2, [pc, #264]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 800214e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002152:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7ff fb1d 	bl	8001794 <HAL_GetTick>
 800215a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800215e:	f7ff fb19 	bl	8001794 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e237      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002170:	4b39      	ldr	r3, [pc, #228]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8002172:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002176:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1ef      	bne.n	800215e <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0304 	and.w	r3, r3, #4
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80d2 	beq.w	8002330 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800218c:	4b34      	ldr	r3, [pc, #208]	; (8002260 <HAL_RCC_OscConfig+0x4e4>)
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d118      	bne.n	80021ca <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002198:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_RCC_OscConfig+0x4e4>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	4a30      	ldr	r2, [pc, #192]	; (8002260 <HAL_RCC_OscConfig+0x4e4>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a4:	f7ff faf6 	bl	8001794 <HAL_GetTick>
 80021a8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ac:	f7ff faf2 	bl	8001794 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e210      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80021be:	4b28      	ldr	r3, [pc, #160]	; (8002260 <HAL_RCC_OscConfig+0x4e4>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d108      	bne.n	80021e4 <HAL_RCC_OscConfig+0x468>
 80021d2:	4b21      	ldr	r3, [pc, #132]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 80021d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021d8:	4a1f      	ldr	r2, [pc, #124]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021e2:	e074      	b.n	80022ce <HAL_RCC_OscConfig+0x552>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d118      	bne.n	800221e <HAL_RCC_OscConfig+0x4a2>
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 80021ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021f2:	4a19      	ldr	r2, [pc, #100]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021fc:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 80021fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002202:	4a15      	ldr	r2, [pc, #84]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8002204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002208:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 800220e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002212:	4a11      	ldr	r2, [pc, #68]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8002214:	f023 0304 	bic.w	r3, r3, #4
 8002218:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800221c:	e057      	b.n	80022ce <HAL_RCC_OscConfig+0x552>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b05      	cmp	r3, #5
 8002224:	d11e      	bne.n	8002264 <HAL_RCC_OscConfig+0x4e8>
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8002228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800222c:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8002238:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800223c:	4a06      	ldr	r2, [pc, #24]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 800223e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002242:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 8002248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800224c:	4a02      	ldr	r2, [pc, #8]	; (8002258 <HAL_RCC_OscConfig+0x4dc>)
 800224e:	f043 0301 	orr.w	r3, r3, #1
 8002252:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002256:	e03a      	b.n	80022ce <HAL_RCC_OscConfig+0x552>
 8002258:	44020c00 	.word	0x44020c00
 800225c:	20000004 	.word	0x20000004
 8002260:	44020800 	.word	0x44020800
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b85      	cmp	r3, #133	; 0x85
 800226a:	d118      	bne.n	800229e <HAL_RCC_OscConfig+0x522>
 800226c:	4ba2      	ldr	r3, [pc, #648]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 800226e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002272:	4aa1      	ldr	r2, [pc, #644]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800227c:	4b9e      	ldr	r3, [pc, #632]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 800227e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002282:	4a9d      	ldr	r2, [pc, #628]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 8002284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002288:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800228c:	4b9a      	ldr	r3, [pc, #616]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 800228e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002292:	4a99      	ldr	r2, [pc, #612]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800229c:	e017      	b.n	80022ce <HAL_RCC_OscConfig+0x552>
 800229e:	4b96      	ldr	r3, [pc, #600]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80022a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022a4:	4a94      	ldr	r2, [pc, #592]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80022a6:	f023 0301 	bic.w	r3, r3, #1
 80022aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022ae:	4b92      	ldr	r3, [pc, #584]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80022b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022b4:	4a90      	ldr	r2, [pc, #576]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80022b6:	f023 0304 	bic.w	r3, r3, #4
 80022ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022be:	4b8e      	ldr	r3, [pc, #568]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80022c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022c4:	4a8c      	ldr	r2, [pc, #560]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80022c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d016      	beq.n	8002304 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d6:	f7ff fa5d 	bl	8001794 <HAL_GetTick>
 80022da:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022dc:	e00a      	b.n	80022f4 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022de:	f7ff fa59 	bl	8001794 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e175      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022f4:	4b80      	ldr	r3, [pc, #512]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80022f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ed      	beq.n	80022de <HAL_RCC_OscConfig+0x562>
 8002302:	e015      	b.n	8002330 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002304:	f7ff fa46 	bl	8001794 <HAL_GetTick>
 8002308:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800230a:	e00a      	b.n	8002322 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230c:	f7ff fa42 	bl	8001794 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	f241 3288 	movw	r2, #5000	; 0x1388
 800231a:	4293      	cmp	r3, r2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e15e      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002322:	4b75      	ldr	r3, [pc, #468]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 8002324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1ed      	bne.n	800230c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b00      	cmp	r3, #0
 800233a:	d036      	beq.n	80023aa <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	2b00      	cmp	r3, #0
 8002342:	d019      	beq.n	8002378 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002344:	4b6c      	ldr	r3, [pc, #432]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a6b      	ldr	r2, [pc, #428]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 800234a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800234e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002350:	f7ff fa20 	bl	8001794 <HAL_GetTick>
 8002354:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002358:	f7ff fa1c 	bl	8001794 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e13a      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x5dc>
 8002376:	e018      	b.n	80023aa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002378:	4b5f      	ldr	r3, [pc, #380]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a5e      	ldr	r2, [pc, #376]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 800237e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002382:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7ff fa06 	bl	8001794 <HAL_GetTick>
 8002388:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800238c:	f7ff fa02 	bl	8001794 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e120      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800239e:	4b56      	ldr	r3, [pc, #344]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8115 	beq.w	80025de <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b18      	cmp	r3, #24
 80023b8:	f000 80af 	beq.w	800251a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	f040 8086 	bne.w	80024d2 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80023c6:	4b4c      	ldr	r3, [pc, #304]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a4b      	ldr	r2, [pc, #300]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80023cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7ff f9df 	bl	8001794 <HAL_GetTick>
 80023d6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80023da:	f7ff f9db 	bl	8001794 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e0f9      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80023ec:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f0      	bne.n	80023da <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80023f8:	4b3f      	ldr	r3, [pc, #252]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002400:	f023 0303 	bic.w	r3, r3, #3
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800240c:	0212      	lsls	r2, r2, #8
 800240e:	430a      	orrs	r2, r1
 8002410:	4939      	ldr	r1, [pc, #228]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 8002412:	4313      	orrs	r3, r2
 8002414:	628b      	str	r3, [r1, #40]	; 0x28
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241a:	3b01      	subs	r3, #1
 800241c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	3b01      	subs	r3, #1
 8002426:	025b      	lsls	r3, r3, #9
 8002428:	b29b      	uxth	r3, r3
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	3b01      	subs	r3, #1
 8002432:	041b      	lsls	r3, r3, #16
 8002434:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	3b01      	subs	r3, #1
 8002440:	061b      	lsls	r3, r3, #24
 8002442:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002446:	492c      	ldr	r1, [pc, #176]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800244c:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	4a29      	ldr	r2, [pc, #164]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 8002452:	f023 0310 	bic.w	r3, r3, #16
 8002456:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245c:	4a26      	ldr	r2, [pc, #152]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002462:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	4a24      	ldr	r2, [pc, #144]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 8002468:	f043 0310 	orr.w	r3, r3, #16
 800246c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 8002470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002472:	f023 020c 	bic.w	r2, r3, #12
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	491f      	ldr	r1, [pc, #124]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 800247c:	4313      	orrs	r3, r2
 800247e:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002480:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	f023 0220 	bic.w	r2, r3, #32
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248c:	491a      	ldr	r1, [pc, #104]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 800248e:	4313      	orrs	r3, r2
 8002490:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002492:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 8002494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002496:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a15      	ldr	r2, [pc, #84]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80024a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7ff f973 	bl	8001794 <HAL_GetTick>
 80024ae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80024b2:	f7ff f96f 	bl	8001794 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e08d      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x736>
 80024d0:	e085      	b.n	80025de <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a08      	ldr	r2, [pc, #32]	; (80024f8 <HAL_RCC_OscConfig+0x77c>)
 80024d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7ff f959 	bl	8001794 <HAL_GetTick>
 80024e2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80024e6:	f7ff f955 	bl	8001794 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d903      	bls.n	80024fc <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e073      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
 80024f8:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80024fc:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_RCC_OscConfig+0x86c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1ee      	bne.n	80024e6 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002508:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <HAL_RCC_OscConfig+0x86c>)
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	4a36      	ldr	r2, [pc, #216]	; (80025e8 <HAL_RCC_OscConfig+0x86c>)
 800250e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002512:	f023 0303 	bic.w	r3, r3, #3
 8002516:	6293      	str	r3, [r2, #40]	; 0x28
 8002518:	e061      	b.n	80025de <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800251a:	4b33      	ldr	r3, [pc, #204]	; (80025e8 <HAL_RCC_OscConfig+0x86c>)
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002520:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <HAL_RCC_OscConfig+0x86c>)
 8002522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002524:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252a:	2b01      	cmp	r3, #1
 800252c:	d031      	beq.n	8002592 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f003 0203 	and.w	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002538:	429a      	cmp	r2, r3
 800253a:	d12a      	bne.n	8002592 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d122      	bne.n	8002592 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002556:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d11a      	bne.n	8002592 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	0a5b      	lsrs	r3, r3, #9
 8002560:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d111      	bne.n	8002592 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	0c1b      	lsrs	r3, r3, #16
 8002572:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d108      	bne.n	8002592 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	0e1b      	lsrs	r3, r3, #24
 8002584:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e024      	b.n	80025e0 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002596:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <HAL_RCC_OscConfig+0x86c>)
 8002598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259a:	08db      	lsrs	r3, r3, #3
 800259c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d01a      	beq.n	80025de <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_RCC_OscConfig+0x86c>)
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <HAL_RCC_OscConfig+0x86c>)
 80025ae:	f023 0310 	bic.w	r3, r3, #16
 80025b2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff f8ee 	bl	8001794 <HAL_GetTick>
 80025b8:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80025ba:	bf00      	nop
 80025bc:	f7ff f8ea 	bl	8001794 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d0f9      	beq.n	80025bc <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025cc:	4a06      	ldr	r2, [pc, #24]	; (80025e8 <HAL_RCC_OscConfig+0x86c>)
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_OscConfig+0x86c>)
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <HAL_RCC_OscConfig+0x86c>)
 80025d8:	f043 0310 	orr.w	r3, r3, #16
 80025dc:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3720      	adds	r7, #32
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	44020c00 	.word	0x44020c00

080025ec <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e19e      	b.n	800293e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002600:	4b83      	ldr	r3, [pc, #524]	; (8002810 <HAL_RCC_ClockConfig+0x224>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 030f 	and.w	r3, r3, #15
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	429a      	cmp	r2, r3
 800260c:	d910      	bls.n	8002630 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260e:	4b80      	ldr	r3, [pc, #512]	; (8002810 <HAL_RCC_ClockConfig+0x224>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f023 020f 	bic.w	r2, r3, #15
 8002616:	497e      	ldr	r1, [pc, #504]	; (8002810 <HAL_RCC_ClockConfig+0x224>)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261e:	4b7c      	ldr	r3, [pc, #496]	; (8002810 <HAL_RCC_ClockConfig+0x224>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d001      	beq.n	8002630 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e186      	b.n	800293e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0310 	and.w	r3, r3, #16
 8002638:	2b00      	cmp	r3, #0
 800263a:	d012      	beq.n	8002662 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	4b74      	ldr	r3, [pc, #464]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800264a:	429a      	cmp	r2, r3
 800264c:	d909      	bls.n	8002662 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800264e:	4b71      	ldr	r3, [pc, #452]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	496d      	ldr	r1, [pc, #436]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 800265e:	4313      	orrs	r3, r2
 8002660:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d012      	beq.n	8002694 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	4b68      	ldr	r3, [pc, #416]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800267c:	429a      	cmp	r2, r3
 800267e:	d909      	bls.n	8002694 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002680:	4b64      	ldr	r3, [pc, #400]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	4961      	ldr	r1, [pc, #388]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 8002690:	4313      	orrs	r3, r2
 8002692:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d010      	beq.n	80026c2 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	4b5b      	ldr	r3, [pc, #364]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d908      	bls.n	80026c2 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80026b0:	4b58      	ldr	r3, [pc, #352]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4955      	ldr	r1, [pc, #340]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d010      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	4b50      	ldr	r3, [pc, #320]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	429a      	cmp	r2, r3
 80026dc:	d908      	bls.n	80026f0 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80026de:	4b4d      	ldr	r3, [pc, #308]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	f023 020f 	bic.w	r2, r3, #15
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	494a      	ldr	r1, [pc, #296]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8093 	beq.w	8002824 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b03      	cmp	r3, #3
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002706:	4b43      	ldr	r3, [pc, #268]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d121      	bne.n	8002756 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e113      	b.n	800293e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800271e:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d115      	bne.n	8002756 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e107      	b.n	800293e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002736:	4b37      	ldr	r3, [pc, #220]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0fb      	b.n	800293e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002746:	4b33      	ldr	r3, [pc, #204]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e0f3      	b.n	800293e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002756:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f023 0203 	bic.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	492c      	ldr	r1, [pc, #176]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 8002764:	4313      	orrs	r3, r2
 8002766:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002768:	f7ff f814 	bl	8001794 <HAL_GetTick>
 800276c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d112      	bne.n	800279c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002776:	e00a      	b.n	800278e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002778:	f7ff f80c 	bl	8001794 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e0d7      	b.n	800293e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800278e:	4b21      	ldr	r3, [pc, #132]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 0318 	and.w	r3, r3, #24
 8002796:	2b18      	cmp	r3, #24
 8002798:	d1ee      	bne.n	8002778 <HAL_RCC_ClockConfig+0x18c>
 800279a:	e043      	b.n	8002824 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d112      	bne.n	80027ca <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a4:	e00a      	b.n	80027bc <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80027a6:	f7fe fff5 	bl	8001794 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e0c0      	b.n	800293e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027bc:	4b15      	ldr	r3, [pc, #84]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	f003 0318 	and.w	r3, r3, #24
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d1ee      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x1ba>
 80027c8:	e02c      	b.n	8002824 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d122      	bne.n	8002818 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80027d4:	f7fe ffde 	bl	8001794 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0a9      	b.n	800293e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80027ea:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <HAL_RCC_ClockConfig+0x228>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f003 0318 	and.w	r3, r3, #24
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d1ee      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x1e8>
 80027f6:	e015      	b.n	8002824 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80027f8:	f7fe ffcc 	bl	8001794 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	; 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d906      	bls.n	8002818 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e097      	b.n	800293e <HAL_RCC_ClockConfig+0x352>
 800280e:	bf00      	nop
 8002810:	40022000 	.word	0x40022000
 8002814:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002818:	4b4b      	ldr	r3, [pc, #300]	; (8002948 <HAL_RCC_ClockConfig+0x35c>)
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	f003 0318 	and.w	r3, r3, #24
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e9      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d010      	beq.n	8002852 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	4b44      	ldr	r3, [pc, #272]	; (8002948 <HAL_RCC_ClockConfig+0x35c>)
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	429a      	cmp	r2, r3
 800283e:	d208      	bcs.n	8002852 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002840:	4b41      	ldr	r3, [pc, #260]	; (8002948 <HAL_RCC_ClockConfig+0x35c>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f023 020f 	bic.w	r2, r3, #15
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	493e      	ldr	r1, [pc, #248]	; (8002948 <HAL_RCC_ClockConfig+0x35c>)
 800284e:	4313      	orrs	r3, r2
 8002850:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002852:	4b3e      	ldr	r3, [pc, #248]	; (800294c <HAL_RCC_ClockConfig+0x360>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d210      	bcs.n	8002882 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002860:	4b3a      	ldr	r3, [pc, #232]	; (800294c <HAL_RCC_ClockConfig+0x360>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 020f 	bic.w	r2, r3, #15
 8002868:	4938      	ldr	r1, [pc, #224]	; (800294c <HAL_RCC_ClockConfig+0x360>)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002870:	4b36      	ldr	r3, [pc, #216]	; (800294c <HAL_RCC_ClockConfig+0x360>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e05d      	b.n	800293e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	d010      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <HAL_RCC_ClockConfig+0x35c>)
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800289a:	429a      	cmp	r2, r3
 800289c:	d208      	bcs.n	80028b0 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800289e:	4b2a      	ldr	r3, [pc, #168]	; (8002948 <HAL_RCC_ClockConfig+0x35c>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	4927      	ldr	r1, [pc, #156]	; (8002948 <HAL_RCC_ClockConfig+0x35c>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d012      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	4b21      	ldr	r3, [pc, #132]	; (8002948 <HAL_RCC_ClockConfig+0x35c>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d209      	bcs.n	80028e2 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <HAL_RCC_ClockConfig+0x35c>)
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	491a      	ldr	r1, [pc, #104]	; (8002948 <HAL_RCC_ClockConfig+0x35c>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d012      	beq.n	8002914 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <HAL_RCC_ClockConfig+0x35c>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d209      	bcs.n	8002914 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <HAL_RCC_ClockConfig+0x35c>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	490e      	ldr	r1, [pc, #56]	; (8002948 <HAL_RCC_ClockConfig+0x35c>)
 8002910:	4313      	orrs	r3, r2
 8002912:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002914:	f000 f822 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b0b      	ldr	r3, [pc, #44]	; (8002948 <HAL_RCC_ClockConfig+0x35c>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	490b      	ldr	r1, [pc, #44]	; (8002950 <HAL_RCC_ClockConfig+0x364>)
 8002924:	5ccb      	ldrb	r3, [r1, r3]
 8002926:	fa22 f303 	lsr.w	r3, r2, r3
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <HAL_RCC_ClockConfig+0x368>)
 800292c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_RCC_ClockConfig+0x36c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe fee4 	bl	8001700 <HAL_InitTick>
 8002938:	4603      	mov	r3, r0
 800293a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800293c:	7afb      	ldrb	r3, [r7, #11]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	44020c00 	.word	0x44020c00
 800294c:	40022000 	.word	0x40022000
 8002950:	0800aaec 	.word	0x0800aaec
 8002954:	20000000 	.word	0x20000000
 8002958:	20000004 	.word	0x20000004

0800295c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002962:	4b8c      	ldr	r3, [pc, #560]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f003 0318 	and.w	r3, r3, #24
 800296a:	2b08      	cmp	r3, #8
 800296c:	d102      	bne.n	8002974 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800296e:	4b8a      	ldr	r3, [pc, #552]	; (8002b98 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002970:	61fb      	str	r3, [r7, #28]
 8002972:	e107      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002974:	4b87      	ldr	r3, [pc, #540]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	f003 0318 	and.w	r3, r3, #24
 800297c:	2b00      	cmp	r3, #0
 800297e:	d112      	bne.n	80029a6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002980:	4b84      	ldr	r3, [pc, #528]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b00      	cmp	r3, #0
 800298a:	d009      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800298c:	4b81      	ldr	r3, [pc, #516]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	08db      	lsrs	r3, r3, #3
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	4a81      	ldr	r2, [pc, #516]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x240>)
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	e0f1      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80029a0:	4b7e      	ldr	r3, [pc, #504]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x240>)
 80029a2:	61fb      	str	r3, [r7, #28]
 80029a4:	e0ee      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029a6:	4b7b      	ldr	r3, [pc, #492]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f003 0318 	and.w	r3, r3, #24
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d102      	bne.n	80029b8 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029b2:	4b7b      	ldr	r3, [pc, #492]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x244>)
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	e0e5      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b8:	4b76      	ldr	r3, [pc, #472]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	f003 0318 	and.w	r3, r3, #24
 80029c0:	2b18      	cmp	r3, #24
 80029c2:	f040 80dd 	bne.w	8002b80 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80029c6:	4b73      	ldr	r3, [pc, #460]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80029d0:	4b70      	ldr	r3, [pc, #448]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80029dc:	4b6d      	ldr	r3, [pc, #436]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	091b      	lsrs	r3, r3, #4
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80029e8:	4b6a      	ldr	r3, [pc, #424]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80029ec:	08db      	lsrs	r3, r3, #3
 80029ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	fb02 f303 	mul.w	r3, r2, r3
 80029f8:	ee07 3a90 	vmov	s15, r3
 80029fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a00:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 80b7 	beq.w	8002b7a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d003      	beq.n	8002a1a <HAL_RCC_GetSysClockFreq+0xbe>
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d056      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x16a>
 8002a18:	e077      	b.n	8002b0a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002a1a:	4b5e      	ldr	r3, [pc, #376]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d02d      	beq.n	8002a82 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002a26:	4b5b      	ldr	r3, [pc, #364]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	08db      	lsrs	r3, r3, #3
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	4a5a      	ldr	r2, [pc, #360]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x240>)
 8002a32:	fa22 f303 	lsr.w	r3, r2, r3
 8002a36:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a50:	4b50      	ldr	r3, [pc, #320]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a58:	ee07 3a90 	vmov	s15, r3
 8002a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a60:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a64:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002ba4 <HAL_RCC_GetSysClockFreq+0x248>
 8002a68:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a74:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002a80:	e065      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	ee07 3a90 	vmov	s15, r3
 8002a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002ba8 <HAL_RCC_GetSysClockFreq+0x24c>
 8002a90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a94:	4b3f      	ldr	r3, [pc, #252]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aa4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aa8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002ba4 <HAL_RCC_GetSysClockFreq+0x248>
 8002aac:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ab0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ab4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002ac4:	e043      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad0:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002bac <HAL_RCC_GetSysClockFreq+0x250>
 8002ad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ad8:	4b2e      	ldr	r3, [pc, #184]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae0:	ee07 3a90 	vmov	s15, r3
 8002ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ae8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aec:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002ba4 <HAL_RCC_GetSysClockFreq+0x248>
 8002af0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002af4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002af8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b04:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002b08:	e021      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	ee07 3a90 	vmov	s15, r3
 8002b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b14:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002bb0 <HAL_RCC_GetSysClockFreq+0x254>
 8002b18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b24:	ee07 3a90 	vmov	s15, r3
 8002b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b30:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002ba4 <HAL_RCC_GetSysClockFreq+0x248>
 8002b34:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b40:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b48:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002b4c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002b4e:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b52:	0a5b      	lsrs	r3, r3, #9
 8002b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b58:	3301      	adds	r3, #1
 8002b5a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	ee07 3a90 	vmov	s15, r3
 8002b62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b66:	edd7 6a06 	vldr	s13, [r7, #24]
 8002b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b72:	ee17 3a90 	vmov	r3, s15
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	e004      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
 8002b7e:	e001      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x240>)
 8002b82:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002b84:	69fb      	ldr	r3, [r7, #28]
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3724      	adds	r7, #36	; 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	44020c00 	.word	0x44020c00
 8002b98:	003d0900 	.word	0x003d0900
 8002b9c:	03d09000 	.word	0x03d09000
 8002ba0:	017d7840 	.word	0x017d7840
 8002ba4:	46000000 	.word	0x46000000
 8002ba8:	4c742400 	.word	0x4c742400
 8002bac:	4bbebc20 	.word	0x4bbebc20
 8002bb0:	4a742400 	.word	0x4a742400

08002bb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002bb8:	f7ff fed0 	bl	800295c <HAL_RCC_GetSysClockFreq>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002bc2:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002bc6:	4907      	ldr	r1, [pc, #28]	; (8002be4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002bc8:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002bca:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002bce:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd2:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <HAL_RCC_GetHCLKFreq+0x34>)
 8002bd4:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002bd6:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <HAL_RCC_GetHCLKFreq+0x34>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	44020c00 	.word	0x44020c00
 8002be4:	0800aaec 	.word	0x0800aaec
 8002be8:	20000000 	.word	0x20000000

08002bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002bf0:	f7ff ffe0 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	091b      	lsrs	r3, r3, #4
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4904      	ldr	r1, [pc, #16]	; (8002c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	44020c00 	.word	0x44020c00
 8002c14:	0800aafc 	.word	0x0800aafc

08002c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002c1c:	f7ff ffca 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4904      	ldr	r1, [pc, #16]	; (8002c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c2e:	5ccb      	ldrb	r3, [r1, r3]
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	44020c00 	.word	0x44020c00
 8002c40:	0800aafc 	.word	0x0800aafc

08002c44 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002c48:	f7ff ffb4 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	0b1b      	lsrs	r3, r3, #12
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	4904      	ldr	r1, [pc, #16]	; (8002c6c <HAL_RCC_GetPCLK3Freq+0x28>)
 8002c5a:	5ccb      	ldrb	r3, [r1, r3]
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	44020c00 	.word	0x44020c00
 8002c6c:	0800aafc 	.word	0x0800aafc

08002c70 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c74:	b0d8      	sub	sp, #352	; 0x160
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c82:	2300      	movs	r3, #0
 8002c84:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002c88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c90:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002c94:	2500      	movs	r5, #0
 8002c96:	ea54 0305 	orrs.w	r3, r4, r5
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002c9c:	4bcd      	ldr	r3, [pc, #820]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ca2:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8002ca6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	4ac9      	ldr	r2, [pc, #804]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f002 0801 	and.w	r8, r2, #1
 8002cc0:	f04f 0900 	mov.w	r9, #0
 8002cc4:	ea58 0309 	orrs.w	r3, r8, r9
 8002cc8:	d042      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d823      	bhi.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002d25 	.word	0x08002d25
 8002ce0:	08002cf5 	.word	0x08002cf5
 8002ce4:	08002d09 	.word	0x08002d09
 8002ce8:	08002d25 	.word	0x08002d25
 8002cec:	08002d25 	.word	0x08002d25
 8002cf0:	08002d25 	.word	0x08002d25
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f004 feda 	bl	8007ab4 <RCCEx_PLL2_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002d06:	e00e      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d0c:	3330      	adds	r3, #48	; 0x30
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f004 ff68 	bl	8007be4 <RCCEx_PLL3_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002d1a:	e004      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002d22:	e000      	b.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d26:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002d2e:	4ba9      	ldr	r3, [pc, #676]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d34:	f023 0107 	bic.w	r1, r3, #7
 8002d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3e:	4aa5      	ldr	r2, [pc, #660]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002d40:	430b      	orrs	r3, r1
 8002d42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d46:	e003      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d48:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d4c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d58:	f002 0a02 	and.w	sl, r2, #2
 8002d5c:	f04f 0b00 	mov.w	fp, #0
 8002d60:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d64:	f000 8088 	beq.w	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002d68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6e:	2b28      	cmp	r3, #40	; 0x28
 8002d70:	d868      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002e4d 	.word	0x08002e4d
 8002d7c:	08002e45 	.word	0x08002e45
 8002d80:	08002e45 	.word	0x08002e45
 8002d84:	08002e45 	.word	0x08002e45
 8002d88:	08002e45 	.word	0x08002e45
 8002d8c:	08002e45 	.word	0x08002e45
 8002d90:	08002e45 	.word	0x08002e45
 8002d94:	08002e45 	.word	0x08002e45
 8002d98:	08002e1d 	.word	0x08002e1d
 8002d9c:	08002e45 	.word	0x08002e45
 8002da0:	08002e45 	.word	0x08002e45
 8002da4:	08002e45 	.word	0x08002e45
 8002da8:	08002e45 	.word	0x08002e45
 8002dac:	08002e45 	.word	0x08002e45
 8002db0:	08002e45 	.word	0x08002e45
 8002db4:	08002e45 	.word	0x08002e45
 8002db8:	08002e31 	.word	0x08002e31
 8002dbc:	08002e45 	.word	0x08002e45
 8002dc0:	08002e45 	.word	0x08002e45
 8002dc4:	08002e45 	.word	0x08002e45
 8002dc8:	08002e45 	.word	0x08002e45
 8002dcc:	08002e45 	.word	0x08002e45
 8002dd0:	08002e45 	.word	0x08002e45
 8002dd4:	08002e45 	.word	0x08002e45
 8002dd8:	08002e4d 	.word	0x08002e4d
 8002ddc:	08002e45 	.word	0x08002e45
 8002de0:	08002e45 	.word	0x08002e45
 8002de4:	08002e45 	.word	0x08002e45
 8002de8:	08002e45 	.word	0x08002e45
 8002dec:	08002e45 	.word	0x08002e45
 8002df0:	08002e45 	.word	0x08002e45
 8002df4:	08002e45 	.word	0x08002e45
 8002df8:	08002e4d 	.word	0x08002e4d
 8002dfc:	08002e45 	.word	0x08002e45
 8002e00:	08002e45 	.word	0x08002e45
 8002e04:	08002e45 	.word	0x08002e45
 8002e08:	08002e45 	.word	0x08002e45
 8002e0c:	08002e45 	.word	0x08002e45
 8002e10:	08002e45 	.word	0x08002e45
 8002e14:	08002e45 	.word	0x08002e45
 8002e18:	08002e4d 	.word	0x08002e4d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e20:	3308      	adds	r3, #8
 8002e22:	4618      	mov	r0, r3
 8002e24:	f004 fe46 	bl	8007ab4 <RCCEx_PLL2_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002e2e:	e00e      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e34:	3330      	adds	r3, #48	; 0x30
 8002e36:	4618      	mov	r0, r3
 8002e38:	f004 fed4 	bl	8007be4 <RCCEx_PLL3_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002e42:	e004      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002e4a:	e000      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002e56:	4b5f      	ldr	r3, [pc, #380]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e5c:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002e60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e66:	4a5b      	ldr	r2, [pc, #364]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e6e:	e003      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e70:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e74:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	f002 0304 	and.w	r3, r2, #4
 8002e84:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002e8e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8002e92:	460b      	mov	r3, r1
 8002e94:	4313      	orrs	r3, r2
 8002e96:	d04e      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e9e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ea2:	d02c      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002ea4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ea8:	d825      	bhi.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eae:	d028      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb4:	d81f      	bhi.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002eb6:	2bc0      	cmp	r3, #192	; 0xc0
 8002eb8:	d025      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002eba:	2bc0      	cmp	r3, #192	; 0xc0
 8002ebc:	d81b      	bhi.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002ebe:	2b80      	cmp	r3, #128	; 0x80
 8002ec0:	d00f      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002ec2:	2b80      	cmp	r3, #128	; 0x80
 8002ec4:	d817      	bhi.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d01f      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002eca:	2b40      	cmp	r3, #64	; 0x40
 8002ecc:	d113      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ed2:	3308      	adds	r3, #8
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f004 fded 	bl	8007ab4 <RCCEx_PLL2_Config>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002ee0:	e014      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ee2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ee6:	3330      	adds	r3, #48	; 0x30
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f004 fe7b 	bl	8007be4 <RCCEx_PLL3_Config>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002efc:	e006      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002efe:	bf00      	nop
 8002f00:	e004      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002f02:	bf00      	nop
 8002f04:	e002      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f0c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10c      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002f14:	4b2f      	ldr	r3, [pc, #188]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f1a:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002f1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f24:	4a2b      	ldr	r2, [pc, #172]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f26:	430b      	orrs	r3, r1
 8002f28:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f2c:	e003      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f32:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	f002 0308 	and.w	r3, r2, #8
 8002f42:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002f46:	2300      	movs	r3, #0
 8002f48:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002f4c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8002f50:	460b      	mov	r3, r1
 8002f52:	4313      	orrs	r3, r2
 8002f54:	d056      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002f56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f5c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002f60:	d031      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002f62:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002f66:	d82a      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f6c:	d02d      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002f6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f72:	d824      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002f74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f78:	d029      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002f7a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f7e:	d81e      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f84:	d011      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8a:	d818      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d023      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f94:	d113      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f004 fd89 	bl	8007ab4 <RCCEx_PLL2_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002fa8:	e017      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002faa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fae:	3330      	adds	r3, #48	; 0x30
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f004 fe17 	bl	8007be4 <RCCEx_PLL3_Config>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002fbc:	e00d      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002fc4:	e009      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002fc6:	bf00      	nop
 8002fc8:	e007      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002fca:	bf00      	nop
 8002fcc:	e005      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002fce:	bf00      	nop
 8002fd0:	e003      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002fd2:	bf00      	nop
 8002fd4:	44020c00 	.word	0x44020c00
        break;
 8002fd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fda:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002fe2:	4bbb      	ldr	r3, [pc, #748]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002fe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fe8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002fec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ff2:	4ab7      	ldr	r2, [pc, #732]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ffa:	e003      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ffc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003000:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003004:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f002 0310 	and.w	r3, r2, #16
 8003010:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800301a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 800301e:	460b      	mov	r3, r1
 8003020:	4313      	orrs	r3, r2
 8003022:	d053      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003024:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800302e:	d031      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003030:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003034:	d82a      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800303a:	d02d      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800303c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003040:	d824      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003042:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003046:	d029      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003048:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800304c:	d81e      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800304e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003052:	d011      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003058:	d818      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d020      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800305e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003062:	d113      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003068:	3308      	adds	r3, #8
 800306a:	4618      	mov	r0, r3
 800306c:	f004 fd22 	bl	8007ab4 <RCCEx_PLL2_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003076:	e014      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003078:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800307c:	3330      	adds	r3, #48	; 0x30
 800307e:	4618      	mov	r0, r3
 8003080:	f004 fdb0 	bl	8007be4 <RCCEx_PLL3_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800308a:	e00a      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003092:	e006      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003094:	bf00      	nop
 8003096:	e004      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003098:	bf00      	nop
 800309a:	e002      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800309c:	bf00      	nop
 800309e:	e000      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80030a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80030aa:	4b89      	ldr	r3, [pc, #548]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80030ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80030b0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80030b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ba:	4a85      	ldr	r2, [pc, #532]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80030bc:	430b      	orrs	r3, r1
 80030be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80030c2:	e003      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030c8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f002 0320 	and.w	r3, r2, #32
 80030d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80030e2:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80030e6:	460b      	mov	r3, r1
 80030e8:	4313      	orrs	r3, r2
 80030ea:	d053      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80030ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f2:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80030f6:	d031      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80030f8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80030fc:	d82a      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80030fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003102:	d02d      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003104:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003108:	d824      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800310a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800310e:	d029      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003110:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003114:	d81e      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311a:	d011      	beq.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800311c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003120:	d818      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d020      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800312a:	d113      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800312c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003130:	3308      	adds	r3, #8
 8003132:	4618      	mov	r0, r3
 8003134:	f004 fcbe 	bl	8007ab4 <RCCEx_PLL2_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800313e:	e014      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003140:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003144:	3330      	adds	r3, #48	; 0x30
 8003146:	4618      	mov	r0, r3
 8003148:	f004 fd4c 	bl	8007be4 <RCCEx_PLL3_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003152:	e00a      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800315a:	e006      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800315c:	bf00      	nop
 800315e:	e004      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003160:	bf00      	nop
 8003162:	e002      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003164:	bf00      	nop
 8003166:	e000      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800316a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10c      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003172:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003174:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003178:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 800317c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a53      	ldr	r2, [pc, #332]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003184:	430b      	orrs	r3, r1
 8003186:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800318a:	e003      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800318c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003190:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003194:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80031a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80031a4:	2300      	movs	r3, #0
 80031a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80031aa:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80031ae:	460b      	mov	r3, r1
 80031b0:	4313      	orrs	r3, r2
 80031b2:	d053      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80031b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ba:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80031be:	d031      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80031c0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80031c4:	d82a      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80031c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ca:	d02d      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80031cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d0:	d824      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80031d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031d6:	d029      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80031d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031dc:	d81e      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80031de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031e2:	d011      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80031e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031e8:	d818      	bhi.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d020      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80031ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031f2:	d113      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031f8:	3308      	adds	r3, #8
 80031fa:	4618      	mov	r0, r3
 80031fc:	f004 fc5a 	bl	8007ab4 <RCCEx_PLL2_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003206:	e014      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003208:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800320c:	3330      	adds	r3, #48	; 0x30
 800320e:	4618      	mov	r0, r3
 8003210:	f004 fce8 	bl	8007be4 <RCCEx_PLL3_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800321a:	e00a      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003222:	e006      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003224:	bf00      	nop
 8003226:	e004      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003228:	bf00      	nop
 800322a:	e002      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800322c:	bf00      	nop
 800322e:	e000      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003232:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10c      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800323a:	4b25      	ldr	r3, [pc, #148]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800323c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003240:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8003244:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324a:	4a21      	ldr	r2, [pc, #132]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800324c:	430b      	orrs	r3, r1
 800324e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003252:	e003      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003254:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003258:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800325c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003268:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800326c:	2300      	movs	r3, #0
 800326e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003272:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8003276:	460b      	mov	r3, r1
 8003278:	4313      	orrs	r3, r2
 800327a:	d055      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800327c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003282:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003286:	d033      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003288:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800328c:	d82c      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800328e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003292:	d02f      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003294:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003298:	d826      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800329a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800329e:	d02b      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80032a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032a4:	d820      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80032a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032aa:	d013      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80032ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b0:	d81a      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d022      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80032b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032ba:	d115      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032c0:	3308      	adds	r3, #8
 80032c2:	4618      	mov	r0, r3
 80032c4:	f004 fbf6 	bl	8007ab4 <RCCEx_PLL2_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80032ce:	e016      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80032d0:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032d8:	3330      	adds	r3, #48	; 0x30
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 fc82 	bl	8007be4 <RCCEx_PLL3_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80032e6:	e00a      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80032ee:	e006      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80032f0:	bf00      	nop
 80032f2:	e004      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80032f4:	bf00      	nop
 80032f6:	e002      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80032f8:	bf00      	nop
 80032fa:	e000      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80032fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10c      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003306:	4bbb      	ldr	r3, [pc, #748]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003308:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800330c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003310:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003316:	4ab7      	ldr	r2, [pc, #732]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003318:	430b      	orrs	r3, r1
 800331a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800331e:	e003      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003320:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003324:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003328:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003334:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003338:	2300      	movs	r3, #0
 800333a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800333e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8003342:	460b      	mov	r3, r1
 8003344:	4313      	orrs	r3, r2
 8003346:	d053      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003348:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800334c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800334e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003352:	d031      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003354:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003358:	d82a      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800335a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800335e:	d02d      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003360:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003364:	d824      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003366:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800336a:	d029      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800336c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003370:	d81e      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003372:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003376:	d011      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800337c:	d818      	bhi.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d020      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003382:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003386:	d113      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003388:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800338c:	3308      	adds	r3, #8
 800338e:	4618      	mov	r0, r3
 8003390:	f004 fb90 	bl	8007ab4 <RCCEx_PLL2_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800339a:	e014      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800339c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033a0:	3330      	adds	r3, #48	; 0x30
 80033a2:	4618      	mov	r0, r3
 80033a4:	f004 fc1e 	bl	8007be4 <RCCEx_PLL3_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80033ae:	e00a      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80033b6:	e006      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80033b8:	bf00      	nop
 80033ba:	e004      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80033bc:	bf00      	nop
 80033be:	e002      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80033c0:	bf00      	nop
 80033c2:	e000      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80033c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80033ce:	4b89      	ldr	r3, [pc, #548]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80033d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033d4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80033d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033de:	4a85      	ldr	r2, [pc, #532]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80033e0:	430b      	orrs	r3, r1
 80033e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80033e6:	e003      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80033ec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80033f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80033fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003406:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800340a:	460b      	mov	r3, r1
 800340c:	4313      	orrs	r3, r2
 800340e:	d055      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003410:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003418:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800341c:	d031      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800341e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003422:	d82a      	bhi.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003428:	d02d      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800342a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800342e:	d824      	bhi.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003430:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003434:	d029      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003436:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800343a:	d81e      	bhi.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800343c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003440:	d011      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003442:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003446:	d818      	bhi.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d020      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800344c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003450:	d113      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003452:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003456:	3308      	adds	r3, #8
 8003458:	4618      	mov	r0, r3
 800345a:	f004 fb2b 	bl	8007ab4 <RCCEx_PLL2_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003464:	e014      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003466:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800346a:	3330      	adds	r3, #48	; 0x30
 800346c:	4618      	mov	r0, r3
 800346e:	f004 fbb9 	bl	8007be4 <RCCEx_PLL3_Config>
 8003472:	4603      	mov	r3, r0
 8003474:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003478:	e00a      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003480:	e006      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003482:	bf00      	nop
 8003484:	e004      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003486:	bf00      	nop
 8003488:	e002      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800348a:	bf00      	nop
 800348c:	e000      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800348e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003490:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10d      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003498:	4b56      	ldr	r3, [pc, #344]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800349a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800349e:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 80034a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034aa:	4a52      	ldr	r2, [pc, #328]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80034ac:	430b      	orrs	r3, r1
 80034ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80034b2:	e003      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034b8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80034bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80034c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80034d2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80034d6:	460b      	mov	r3, r1
 80034d8:	4313      	orrs	r3, r2
 80034da:	d044      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80034dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d823      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80034e8:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80034ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ee:	bf00      	nop
 80034f0:	08003539 	.word	0x08003539
 80034f4:	08003509 	.word	0x08003509
 80034f8:	0800351d 	.word	0x0800351d
 80034fc:	08003539 	.word	0x08003539
 8003500:	08003539 	.word	0x08003539
 8003504:	08003539 	.word	0x08003539
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003508:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800350c:	3308      	adds	r3, #8
 800350e:	4618      	mov	r0, r3
 8003510:	f004 fad0 	bl	8007ab4 <RCCEx_PLL2_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800351a:	e00e      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800351c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003520:	3330      	adds	r3, #48	; 0x30
 8003522:	4618      	mov	r0, r3
 8003524:	f004 fb5e 	bl	8007be4 <RCCEx_PLL3_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800352e:	e004      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003536:	e000      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10d      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003542:	4b2c      	ldr	r3, [pc, #176]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003544:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003548:	f023 0107 	bic.w	r1, r3, #7
 800354c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003554:	4a27      	ldr	r2, [pc, #156]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003556:	430b      	orrs	r3, r1
 8003558:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800355c:	e003      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003562:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003566:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003572:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003576:	2300      	movs	r3, #0
 8003578:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800357c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003580:	460b      	mov	r3, r1
 8003582:	4313      	orrs	r3, r2
 8003584:	d04f      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003586:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358e:	2b50      	cmp	r3, #80	; 0x50
 8003590:	d029      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003592:	2b50      	cmp	r3, #80	; 0x50
 8003594:	d823      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003596:	2b40      	cmp	r3, #64	; 0x40
 8003598:	d027      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800359a:	2b40      	cmp	r3, #64	; 0x40
 800359c:	d81f      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800359e:	2b30      	cmp	r3, #48	; 0x30
 80035a0:	d025      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80035a2:	2b30      	cmp	r3, #48	; 0x30
 80035a4:	d81b      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	d00f      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d817      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d022      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d113      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035ba:	3308      	adds	r3, #8
 80035bc:	4618      	mov	r0, r3
 80035be:	f004 fa79 	bl	8007ab4 <RCCEx_PLL2_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80035c8:	e017      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035ce:	3330      	adds	r3, #48	; 0x30
 80035d0:	4618      	mov	r0, r3
 80035d2:	f004 fb07 	bl	8007be4 <RCCEx_PLL3_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80035dc:	e00d      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80035e4:	e009      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80035e6:	bf00      	nop
 80035e8:	e007      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80035ea:	bf00      	nop
 80035ec:	e005      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80035ee:	bf00      	nop
 80035f0:	e003      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80035f2:	bf00      	nop
 80035f4:	44020c00 	.word	0x44020c00
        break;
 80035f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10d      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003602:	4baf      	ldr	r3, [pc, #700]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003604:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003608:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800360c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003614:	4aaa      	ldr	r2, [pc, #680]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003616:	430b      	orrs	r3, r1
 8003618:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800361c:	e003      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003622:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003626:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003632:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800363c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003640:	460b      	mov	r3, r1
 8003642:	4313      	orrs	r3, r2
 8003644:	d055      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003646:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800364a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800364e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003652:	d031      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003654:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003658:	d82a      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800365a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800365e:	d02d      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003664:	d824      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003666:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800366a:	d029      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800366c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003670:	d81e      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003672:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003676:	d011      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003678:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800367c:	d818      	bhi.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d020      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003682:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003686:	d113      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003688:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800368c:	3308      	adds	r3, #8
 800368e:	4618      	mov	r0, r3
 8003690:	f004 fa10 	bl	8007ab4 <RCCEx_PLL2_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800369a:	e014      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800369c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036a0:	3330      	adds	r3, #48	; 0x30
 80036a2:	4618      	mov	r0, r3
 80036a4:	f004 fa9e 	bl	8007be4 <RCCEx_PLL3_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80036ae:	e00a      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80036b6:	e006      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80036b8:	bf00      	nop
 80036ba:	e004      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80036bc:	bf00      	nop
 80036be:	e002      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80036c0:	bf00      	nop
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80036c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10d      	bne.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80036ce:	4b7c      	ldr	r3, [pc, #496]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80036d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80036d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e0:	4a77      	ldr	r2, [pc, #476]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80036e2:	430b      	orrs	r3, r1
 80036e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036e8:	e003      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036ee:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80036fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003702:	2300      	movs	r3, #0
 8003704:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003708:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800370c:	460b      	mov	r3, r1
 800370e:	4313      	orrs	r3, r2
 8003710:	d03d      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003712:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800371e:	d01b      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003720:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003724:	d814      	bhi.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800372a:	d017      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800372c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003730:	d80e      	bhi.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d014      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373a:	d109      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800373c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003740:	3330      	adds	r3, #48	; 0x30
 8003742:	4618      	mov	r0, r3
 8003744:	f004 fa4e 	bl	8007be4 <RCCEx_PLL3_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800374e:	e008      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003756:	e004      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003758:	bf00      	nop
 800375a:	e002      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800375c:	bf00      	nop
 800375e:	e000      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003762:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10d      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800376a:	4b55      	ldr	r3, [pc, #340]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800376c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003770:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003774:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377c:	4a50      	ldr	r2, [pc, #320]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800377e:	430b      	orrs	r3, r1
 8003780:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003784:	e003      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003786:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800378a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800378e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800379a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037a4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4313      	orrs	r3, r2
 80037ac:	d03d      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80037ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80037ba:	d01b      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80037bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80037c0:	d814      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80037c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037c6:	d017      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80037c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80037cc:	d80e      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d014      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80037d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037d6:	d109      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037dc:	3330      	adds	r3, #48	; 0x30
 80037de:	4618      	mov	r0, r3
 80037e0:	f004 fa00 	bl	8007be4 <RCCEx_PLL3_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80037ea:	e008      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80037f2:	e004      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80037f4:	bf00      	nop
 80037f6:	e002      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80037f8:	bf00      	nop
 80037fa:	e000      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80037fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10d      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003806:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003808:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800380c:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003810:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003818:	4a29      	ldr	r2, [pc, #164]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800381a:	430b      	orrs	r3, r1
 800381c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003820:	e003      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003822:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003826:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800382a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003836:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800383a:	2300      	movs	r3, #0
 800383c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003840:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003844:	460b      	mov	r3, r1
 8003846:	4313      	orrs	r3, r2
 8003848:	d040      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800384a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800384e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003852:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003856:	d01b      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003858:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800385c:	d814      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800385e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003862:	d017      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003864:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003868:	d80e      	bhi.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d014      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800386e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003872:	d109      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003874:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003878:	3330      	adds	r3, #48	; 0x30
 800387a:	4618      	mov	r0, r3
 800387c:	f004 f9b2 	bl	8007be4 <RCCEx_PLL3_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003886:	e008      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800388e:	e004      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003890:	bf00      	nop
 8003892:	e002      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003894:	bf00      	nop
 8003896:	e000      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800389a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d110      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80038a2:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80038a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80038a8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80038ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038b4:	4a02      	ldr	r2, [pc, #8]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80038b6:	430b      	orrs	r3, r1
 80038b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80038bc:	e006      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80038be:	bf00      	nop
 80038c0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038c8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	2100      	movs	r1, #0
 80038d6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80038da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80038e2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4313      	orrs	r3, r2
 80038ea:	d03d      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80038ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038f8:	d01b      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80038fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80038fe:	d814      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003900:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003904:	d017      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003906:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800390a:	d80e      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800390c:	2b00      	cmp	r3, #0
 800390e:	d014      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003914:	d109      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003916:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800391a:	3330      	adds	r3, #48	; 0x30
 800391c:	4618      	mov	r0, r3
 800391e:	f004 f961 	bl	8007be4 <RCCEx_PLL3_Config>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003928:	e008      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003930:	e004      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003932:	bf00      	nop
 8003934:	e002      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003936:	bf00      	nop
 8003938:	e000      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800393a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10d      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003944:	4bbe      	ldr	r3, [pc, #760]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003946:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800394a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800394e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003956:	4aba      	ldr	r2, [pc, #744]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003958:	430b      	orrs	r3, r1
 800395a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800395e:	e003      	b.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003964:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003968:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003974:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800397e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003982:	460b      	mov	r3, r1
 8003984:	4313      	orrs	r3, r2
 8003986:	d035      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003988:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800398c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003990:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003994:	d015      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003996:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800399a:	d80e      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800399c:	2b00      	cmp	r3, #0
 800399e:	d012      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80039a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039a4:	d109      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039aa:	3330      	adds	r3, #48	; 0x30
 80039ac:	4618      	mov	r0, r3
 80039ae:	f004 f919 	bl	8007be4 <RCCEx_PLL3_Config>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80039b8:	e006      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80039c0:	e002      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80039c2:	bf00      	nop
 80039c4:	e000      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80039c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10d      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80039d0:	4b9b      	ldr	r3, [pc, #620]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80039d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80039d6:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 80039da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039e2:	4a97      	ldr	r2, [pc, #604]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80039ea:	e003      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039f0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80039f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	2100      	movs	r1, #0
 80039fe:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4313      	orrs	r3, r2
 8003a12:	d00e      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003a14:	4b8a      	ldr	r3, [pc, #552]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	4a89      	ldr	r2, [pc, #548]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003a1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a1e:	61d3      	str	r3, [r2, #28]
 8003a20:	4b87      	ldr	r3, [pc, #540]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003a22:	69d9      	ldr	r1, [r3, #28]
 8003a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a28:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003a2c:	4a84      	ldr	r2, [pc, #528]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003a3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a42:	2300      	movs	r3, #0
 8003a44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003a48:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	d055      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003a52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a5a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003a5e:	d031      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003a60:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003a64:	d82a      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6a:	d02d      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a70:	d824      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a76:	d029      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a7c:	d81e      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a82:	d011      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a88:	d818      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d020      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a92:	d113      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a98:	3308      	adds	r3, #8
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f004 f80a 	bl	8007ab4 <RCCEx_PLL2_Config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003aa6:	e014      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003aac:	3330      	adds	r3, #48	; 0x30
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f004 f898 	bl	8007be4 <RCCEx_PLL3_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003aba:	e00a      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ac2:	e006      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003ac4:	bf00      	nop
 8003ac6:	e004      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003ac8:	bf00      	nop
 8003aca:	e002      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003acc:	bf00      	nop
 8003ace:	e000      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10d      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003ada:	4b59      	ldr	r3, [pc, #356]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003adc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003ae0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ae8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003aec:	4a54      	ldr	r2, [pc, #336]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003aee:	430b      	orrs	r3, r1
 8003af0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003af4:	e003      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003afa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003afe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003b0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b14:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	d055      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003b1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b26:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003b2a:	d031      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003b2c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003b30:	d82a      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b36:	d02d      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b3c:	d824      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003b3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b42:	d029      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003b44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b48:	d81e      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4e:	d011      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003b50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b54:	d818      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d020      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5e:	d113      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b64:	3308      	adds	r3, #8
 8003b66:	4618      	mov	r0, r3
 8003b68:	f003 ffa4 	bl	8007ab4 <RCCEx_PLL2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003b72:	e014      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b78:	3330      	adds	r3, #48	; 0x30
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f004 f832 	bl	8007be4 <RCCEx_PLL3_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003b86:	e00a      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b8e:	e006      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003b90:	bf00      	nop
 8003b92:	e004      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003b94:	bf00      	nop
 8003b96:	e002      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003b98:	bf00      	nop
 8003b9a:	e000      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10d      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003ba6:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ba8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003bac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003bb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003bb8:	4a21      	ldr	r2, [pc, #132]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003bba:	430b      	orrs	r3, r1
 8003bbc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003bc0:	e003      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bc6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003bca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003be0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003be4:	460b      	mov	r3, r1
 8003be6:	4313      	orrs	r3, r2
 8003be8:	d057      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003bea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003bf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf6:	d033      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bfc:	d82c      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003bfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c02:	d02f      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003c04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c08:	d826      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003c0a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c0e:	d02b      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003c10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c14:	d820      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003c16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c1a:	d013      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c20:	d81a      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d022      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8003c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2a:	d115      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c30:	3308      	adds	r3, #8
 8003c32:	4618      	mov	r0, r3
 8003c34:	f003 ff3e 	bl	8007ab4 <RCCEx_PLL2_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003c3e:	e016      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003c40:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c48:	3330      	adds	r3, #48	; 0x30
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f003 ffca 	bl	8007be4 <RCCEx_PLL3_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003c56:	e00a      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c5e:	e006      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003c60:	bf00      	nop
 8003c62:	e004      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003c64:	bf00      	nop
 8003c66:	e002      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003c68:	bf00      	nop
 8003c6a:	e000      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10d      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003c76:	4bbb      	ldr	r3, [pc, #748]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003c78:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003c7c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003c80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c88:	4ab6      	ldr	r2, [pc, #728]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003c90:	e003      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c96:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003c9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003cb0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	d055      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8003cba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cc2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003cc6:	d031      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003cc8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003ccc:	d82a      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd2:	d02d      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd8:	d824      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003cda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cde:	d029      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003ce0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ce4:	d81e      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003ce6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cea:	d011      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003cec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cf0:	d818      	bhi.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d020      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8003cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cfa:	d113      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d00:	3308      	adds	r3, #8
 8003d02:	4618      	mov	r0, r3
 8003d04:	f003 fed6 	bl	8007ab4 <RCCEx_PLL2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003d0e:	e014      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d14:	3330      	adds	r3, #48	; 0x30
 8003d16:	4618      	mov	r0, r3
 8003d18:	f003 ff64 	bl	8007be4 <RCCEx_PLL3_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003d22:	e00a      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d2a:	e006      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003d2c:	bf00      	nop
 8003d2e:	e004      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003d30:	bf00      	nop
 8003d32:	e002      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003d34:	bf00      	nop
 8003d36:	e000      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10d      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8003d42:	4b88      	ldr	r3, [pc, #544]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003d44:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003d48:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8003d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d54:	4a83      	ldr	r2, [pc, #524]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003d56:	430b      	orrs	r3, r1
 8003d58:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003d5c:	e003      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d62:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8003d66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	2100      	movs	r1, #0
 8003d70:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8003d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d7c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003d80:	460b      	mov	r3, r1
 8003d82:	4313      	orrs	r3, r2
 8003d84:	d055      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8003d86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d8e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003d92:	d031      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003d94:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003d98:	d82a      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003d9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d9e:	d02d      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8003da0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003da4:	d824      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003da6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003daa:	d029      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8003dac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003db0:	d81e      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003db2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003db6:	d011      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8003db8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dbc:	d818      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d020      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8003dc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dc6:	d113      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dcc:	3308      	adds	r3, #8
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f003 fe70 	bl	8007ab4 <RCCEx_PLL2_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003dda:	e014      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003de0:	3330      	adds	r3, #48	; 0x30
 8003de2:	4618      	mov	r0, r3
 8003de4:	f003 fefe 	bl	8007be4 <RCCEx_PLL3_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003dee:	e00a      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003df6:	e006      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003df8:	bf00      	nop
 8003dfa:	e004      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003dfc:	bf00      	nop
 8003dfe:	e002      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003e00:	bf00      	nop
 8003e02:	e000      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10d      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8003e0e:	4b55      	ldr	r3, [pc, #340]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003e10:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003e14:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e20:	4a50      	ldr	r2, [pc, #320]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003e22:	430b      	orrs	r3, r1
 8003e24:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003e28:	e003      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e2e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8003e32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8003e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e48:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	d055      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8003e52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e5e:	d031      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8003e60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e64:	d82a      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6a:	d02d      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e70:	d824      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003e72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e76:	d029      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003e78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e7c:	d81e      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e82:	d011      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8003e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e88:	d818      	bhi.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d020      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8003e8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e92:	d113      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e98:	3308      	adds	r3, #8
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f003 fe0a 	bl	8007ab4 <RCCEx_PLL2_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003ea6:	e014      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ea8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003eac:	3330      	adds	r3, #48	; 0x30
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f003 fe98 	bl	8007be4 <RCCEx_PLL3_Config>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003eba:	e00a      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ec2:	e006      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003ec4:	bf00      	nop
 8003ec6:	e004      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003ec8:	bf00      	nop
 8003eca:	e002      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003ecc:	bf00      	nop
 8003ece:	e000      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10d      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003edc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003ee0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003ee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ee8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003eec:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003ef4:	e003      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003efa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003efe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f06:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003f0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f14:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	d055      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003f1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f22:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f2a:	d035      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8003f2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f30:	d82e      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003f32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f36:	d031      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8003f38:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f3c:	d828      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003f3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f42:	d01b      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8003f44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f48:	d822      	bhi.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8003f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f52:	d009      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8003f54:	e01c      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f56:	4b03      	ldr	r3, [pc, #12]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	4a02      	ldr	r2, [pc, #8]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f60:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003f62:	e01c      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8003f64:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f6c:	3308      	adds	r3, #8
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f003 fda0 	bl	8007ab4 <RCCEx_PLL2_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003f7a:	e010      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f80:	3330      	adds	r3, #48	; 0x30
 8003f82:	4618      	mov	r0, r3
 8003f84:	f003 fe2e 	bl	8007be4 <RCCEx_PLL3_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003f8e:	e006      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f96:	e002      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003f98:	bf00      	nop
 8003f9a:	e000      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10d      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003fa6:	4bc3      	ldr	r3, [pc, #780]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003fa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003fb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003fb8:	4abe      	ldr	r2, [pc, #760]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003fba:	430b      	orrs	r3, r1
 8003fbc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fc0:	e003      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fc6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8003fca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd2:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003fd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fe0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	d051      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003fea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003ff2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ff6:	d033      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003ff8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ffc:	d82c      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003ffe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004002:	d02d      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004004:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004008:	d826      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800400a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800400e:	d019      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004014:	d820      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800401a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800401e:	d007      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004020:	e01a      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004022:	4ba4      	ldr	r3, [pc, #656]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004026:	4aa3      	ldr	r2, [pc, #652]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800402e:	e018      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004030:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004034:	3308      	adds	r3, #8
 8004036:	4618      	mov	r0, r3
 8004038:	f003 fd3c 	bl	8007ab4 <RCCEx_PLL2_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004042:	e00e      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004044:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004048:	3330      	adds	r3, #48	; 0x30
 800404a:	4618      	mov	r0, r3
 800404c:	f003 fdca 	bl	8007be4 <RCCEx_PLL3_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004056:	e004      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800405e:	e000      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004062:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10d      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800406a:	4b92      	ldr	r3, [pc, #584]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800406c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004070:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8004074:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004078:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800407c:	4a8d      	ldr	r2, [pc, #564]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800407e:	430b      	orrs	r3, r1
 8004080:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004084:	e003      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004086:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800408a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800408e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800409a:	67bb      	str	r3, [r7, #120]	; 0x78
 800409c:	2300      	movs	r3, #0
 800409e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80040a4:	460b      	mov	r3, r1
 80040a6:	4313      	orrs	r3, r2
 80040a8:	d032      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80040aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80040b2:	2b05      	cmp	r3, #5
 80040b4:	d80f      	bhi.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d211      	bcs.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d911      	bls.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d109      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040c6:	3308      	adds	r3, #8
 80040c8:	4618      	mov	r0, r3
 80040ca:	f003 fcf3 	bl	8007ab4 <RCCEx_PLL2_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80040d4:	e006      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80040dc:	e002      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80040e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10d      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80040ec:	4b71      	ldr	r3, [pc, #452]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80040ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040f2:	f023 0107 	bic.w	r1, r3, #7
 80040f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80040fe:	4a6d      	ldr	r2, [pc, #436]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004100:	430b      	orrs	r3, r1
 8004102:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004106:	e003      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800410c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004110:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	2100      	movs	r1, #0
 800411a:	6739      	str	r1, [r7, #112]	; 0x70
 800411c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004120:	677b      	str	r3, [r7, #116]	; 0x74
 8004122:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004126:	460b      	mov	r3, r1
 8004128:	4313      	orrs	r3, r2
 800412a:	d024      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800412c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004130:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004138:	2b08      	cmp	r3, #8
 800413a:	d005      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004142:	e002      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004144:	bf00      	nop
 8004146:	e000      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004148:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10d      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004152:	4b58      	ldr	r3, [pc, #352]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004158:	f023 0108 	bic.w	r1, r3, #8
 800415c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004164:	4a53      	ldr	r2, [pc, #332]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004166:	430b      	orrs	r3, r1
 8004168:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800416c:	e003      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004172:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004176:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004182:	66bb      	str	r3, [r7, #104]	; 0x68
 8004184:	2300      	movs	r3, #0
 8004186:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004188:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800418c:	460b      	mov	r3, r1
 800418e:	4313      	orrs	r3, r2
 8004190:	f000 80b9 	beq.w	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004194:	4b48      	ldr	r3, [pc, #288]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	4a47      	ldr	r2, [pc, #284]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041a0:	f7fd faf8 	bl	8001794 <HAL_GetTick>
 80041a4:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80041a8:	e00b      	b.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041aa:	f7fd faf3 	bl	8001794 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d903      	bls.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80041c0:	e005      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80041c2:	4b3d      	ldr	r3, [pc, #244]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0ed      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80041ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f040 8093 	bne.w	80042fe <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041d8:	4b36      	ldr	r3, [pc, #216]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80041da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80041e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d023      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80041ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041f2:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80041f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d01b      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041fe:	4b2d      	ldr	r3, [pc, #180]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004208:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800420c:	4b29      	ldr	r3, [pc, #164]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800420e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004212:	4a28      	ldr	r2, [pc, #160]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004218:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800421e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004222:	4a24      	ldr	r2, [pc, #144]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004228:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800422c:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800422e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004232:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004236:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d019      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004242:	f7fd faa7 	bl	8001794 <HAL_GetTick>
 8004246:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800424a:	e00d      	b.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800424c:	f7fd faa2 	bl	8001794 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004256:	1ad2      	subs	r2, r2, r3
 8004258:	f241 3388 	movw	r3, #5000	; 0x1388
 800425c:	429a      	cmp	r2, r3
 800425e:	d903      	bls.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8004266:	e006      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004268:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800426a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0ea      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8004276:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800427a:	2b00      	cmp	r3, #0
 800427c:	d13a      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800427e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004282:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800428e:	d115      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004290:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004298:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800429c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80042a0:	091b      	lsrs	r3, r3, #4
 80042a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80042aa:	4a02      	ldr	r2, [pc, #8]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80042ac:	430b      	orrs	r3, r1
 80042ae:	61d3      	str	r3, [r2, #28]
 80042b0:	e00a      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80042b2:	bf00      	nop
 80042b4:	44020c00 	.word	0x44020c00
 80042b8:	44020800 	.word	0x44020800
 80042bc:	4b9f      	ldr	r3, [pc, #636]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	4a9e      	ldr	r2, [pc, #632]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80042c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80042c6:	61d3      	str	r3, [r2, #28]
 80042c8:	4b9c      	ldr	r3, [pc, #624]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80042ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042ce:	4a9b      	ldr	r2, [pc, #620]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80042d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80042d8:	4b98      	ldr	r3, [pc, #608]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80042da:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80042de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042e2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80042e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ea:	4a94      	ldr	r2, [pc, #592]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80042ec:	430b      	orrs	r3, r1
 80042ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80042f2:	e008      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042f4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042f8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 80042fc:	e003      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004302:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004306:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004312:	663b      	str	r3, [r7, #96]	; 0x60
 8004314:	2300      	movs	r3, #0
 8004316:	667b      	str	r3, [r7, #100]	; 0x64
 8004318:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800431c:	460b      	mov	r3, r1
 800431e:	4313      	orrs	r3, r2
 8004320:	d035      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004322:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004326:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800432a:	2b30      	cmp	r3, #48	; 0x30
 800432c:	d014      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800432e:	2b30      	cmp	r3, #48	; 0x30
 8004330:	d80e      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004332:	2b20      	cmp	r3, #32
 8004334:	d012      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004336:	2b20      	cmp	r3, #32
 8004338:	d80a      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800433a:	2b00      	cmp	r3, #0
 800433c:	d010      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800433e:	2b10      	cmp	r3, #16
 8004340:	d106      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004342:	4b7e      	ldr	r3, [pc, #504]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	4a7d      	ldr	r2, [pc, #500]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004348:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800434c:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800434e:	e008      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004356:	e004      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004358:	bf00      	nop
 800435a:	e002      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800435c:	bf00      	nop
 800435e:	e000      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004362:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10d      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800436a:	4b74      	ldr	r3, [pc, #464]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800436c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004370:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004374:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004378:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800437c:	4a6f      	ldr	r2, [pc, #444]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800437e:	430b      	orrs	r3, r1
 8004380:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004384:	e003      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004386:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800438a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800438e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800439a:	65bb      	str	r3, [r7, #88]	; 0x58
 800439c:	2300      	movs	r3, #0
 800439e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043a0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80043a4:	460b      	mov	r3, r1
 80043a6:	4313      	orrs	r3, r2
 80043a8:	d033      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80043aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043ae:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80043b6:	2b40      	cmp	r3, #64	; 0x40
 80043b8:	d007      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80043ba:	e010      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043bc:	4b5f      	ldr	r3, [pc, #380]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80043be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c0:	4a5e      	ldr	r2, [pc, #376]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80043c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80043c8:	e00d      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043ce:	3308      	adds	r3, #8
 80043d0:	4618      	mov	r0, r3
 80043d2:	f003 fb6f 	bl	8007ab4 <RCCEx_PLL2_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80043dc:	e003      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10d      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80043ee:	4b53      	ldr	r3, [pc, #332]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80043f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80043f4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80043f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043fc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004400:	4a4e      	ldr	r2, [pc, #312]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004402:	430b      	orrs	r3, r1
 8004404:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004408:	e003      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800440e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004412:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800441e:	653b      	str	r3, [r7, #80]	; 0x50
 8004420:	2300      	movs	r3, #0
 8004422:	657b      	str	r3, [r7, #84]	; 0x54
 8004424:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004428:	460b      	mov	r3, r1
 800442a:	4313      	orrs	r3, r2
 800442c:	d033      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800442e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004432:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800443a:	2b80      	cmp	r3, #128	; 0x80
 800443c:	d007      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800443e:	e010      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004440:	4b3e      	ldr	r3, [pc, #248]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	4a3d      	ldr	r2, [pc, #244]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800444a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800444c:	e00d      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800444e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004452:	3308      	adds	r3, #8
 8004454:	4618      	mov	r0, r3
 8004456:	f003 fb2d 	bl	8007ab4 <RCCEx_PLL2_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004460:	e003      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800446a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10d      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004472:	4b32      	ldr	r3, [pc, #200]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004474:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004478:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800447c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004480:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004484:	4a2d      	ldr	r2, [pc, #180]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004486:	430b      	orrs	r3, r1
 8004488:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800448c:	e003      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004492:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004496:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80044a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044a4:	2300      	movs	r3, #0
 80044a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80044ac:	460b      	mov	r3, r1
 80044ae:	4313      	orrs	r3, r2
 80044b0:	d04a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80044b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d827      	bhi.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80044be:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	080044d9 	.word	0x080044d9
 80044c8:	080044e7 	.word	0x080044e7
 80044cc:	080044fb 	.word	0x080044fb
 80044d0:	08004517 	.word	0x08004517
 80044d4:	08004517 	.word	0x08004517
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d8:	4b18      	ldr	r3, [pc, #96]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	4a17      	ldr	r2, [pc, #92]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e2:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80044e4:	e018      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044ea:	3308      	adds	r3, #8
 80044ec:	4618      	mov	r0, r3
 80044ee:	f003 fae1 	bl	8007ab4 <RCCEx_PLL2_Config>
 80044f2:	4603      	mov	r3, r0
 80044f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80044f8:	e00e      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044fe:	3330      	adds	r3, #48	; 0x30
 8004500:	4618      	mov	r0, r3
 8004502:	f003 fb6f 	bl	8007be4 <RCCEx_PLL3_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800450c:	e004      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004514:	e000      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004518:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10f      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004526:	f023 0107 	bic.w	r1, r3, #7
 800452a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800452e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004532:	4a02      	ldr	r2, [pc, #8]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004534:	430b      	orrs	r3, r1
 8004536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800453a:	e005      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800453c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004540:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004544:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004548:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004554:	643b      	str	r3, [r7, #64]	; 0x40
 8004556:	2300      	movs	r3, #0
 8004558:	647b      	str	r3, [r7, #68]	; 0x44
 800455a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800455e:	460b      	mov	r3, r1
 8004560:	4313      	orrs	r3, r2
 8004562:	f000 8081 	beq.w	8004668 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004566:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800456a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800456e:	2b20      	cmp	r3, #32
 8004570:	d85f      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004572:	a201      	add	r2, pc, #4	; (adr r2, 8004578 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004578:	080045fd 	.word	0x080045fd
 800457c:	08004633 	.word	0x08004633
 8004580:	08004633 	.word	0x08004633
 8004584:	08004633 	.word	0x08004633
 8004588:	08004633 	.word	0x08004633
 800458c:	08004633 	.word	0x08004633
 8004590:	08004633 	.word	0x08004633
 8004594:	08004633 	.word	0x08004633
 8004598:	0800460b 	.word	0x0800460b
 800459c:	08004633 	.word	0x08004633
 80045a0:	08004633 	.word	0x08004633
 80045a4:	08004633 	.word	0x08004633
 80045a8:	08004633 	.word	0x08004633
 80045ac:	08004633 	.word	0x08004633
 80045b0:	08004633 	.word	0x08004633
 80045b4:	08004633 	.word	0x08004633
 80045b8:	0800461f 	.word	0x0800461f
 80045bc:	08004633 	.word	0x08004633
 80045c0:	08004633 	.word	0x08004633
 80045c4:	08004633 	.word	0x08004633
 80045c8:	08004633 	.word	0x08004633
 80045cc:	08004633 	.word	0x08004633
 80045d0:	08004633 	.word	0x08004633
 80045d4:	08004633 	.word	0x08004633
 80045d8:	0800463b 	.word	0x0800463b
 80045dc:	08004633 	.word	0x08004633
 80045e0:	08004633 	.word	0x08004633
 80045e4:	08004633 	.word	0x08004633
 80045e8:	08004633 	.word	0x08004633
 80045ec:	08004633 	.word	0x08004633
 80045f0:	08004633 	.word	0x08004633
 80045f4:	08004633 	.word	0x08004633
 80045f8:	0800463b 	.word	0x0800463b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045fc:	4bab      	ldr	r3, [pc, #684]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80045fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004600:	4aaa      	ldr	r2, [pc, #680]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004606:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004608:	e018      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800460a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800460e:	3308      	adds	r3, #8
 8004610:	4618      	mov	r0, r3
 8004612:	f003 fa4f 	bl	8007ab4 <RCCEx_PLL2_Config>
 8004616:	4603      	mov	r3, r0
 8004618:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800461c:	e00e      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800461e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004622:	3330      	adds	r3, #48	; 0x30
 8004624:	4618      	mov	r0, r3
 8004626:	f003 fadd 	bl	8007be4 <RCCEx_PLL3_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004630:	e004      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004638:	e000      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800463a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800463c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10d      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004644:	4b99      	ldr	r3, [pc, #612]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800464a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800464e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004652:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004656:	4a95      	ldr	r2, [pc, #596]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004658:	430b      	orrs	r3, r1
 800465a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800465e:	e003      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004664:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004668:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004674:	63bb      	str	r3, [r7, #56]	; 0x38
 8004676:	2300      	movs	r3, #0
 8004678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800467a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800467e:	460b      	mov	r3, r1
 8004680:	4313      	orrs	r3, r2
 8004682:	d04e      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004684:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800468c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004690:	d02e      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004696:	d827      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004698:	2bc0      	cmp	r3, #192	; 0xc0
 800469a:	d02b      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 800469c:	2bc0      	cmp	r3, #192	; 0xc0
 800469e:	d823      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80046a0:	2b80      	cmp	r3, #128	; 0x80
 80046a2:	d017      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80046a4:	2b80      	cmp	r3, #128	; 0x80
 80046a6:	d81f      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80046ac:	2b40      	cmp	r3, #64	; 0x40
 80046ae:	d007      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80046b0:	e01a      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046b2:	4b7e      	ldr	r3, [pc, #504]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80046b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b6:	4a7d      	ldr	r2, [pc, #500]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80046b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046bc:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80046be:	e01a      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046c4:	3308      	adds	r3, #8
 80046c6:	4618      	mov	r0, r3
 80046c8:	f003 f9f4 	bl	8007ab4 <RCCEx_PLL2_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80046d2:	e010      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046d8:	3330      	adds	r3, #48	; 0x30
 80046da:	4618      	mov	r0, r3
 80046dc:	f003 fa82 	bl	8007be4 <RCCEx_PLL3_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80046e6:	e006      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80046ee:	e002      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80046f0:	bf00      	nop
 80046f2:	e000      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80046f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10d      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80046fe:	4b6b      	ldr	r3, [pc, #428]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004704:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004708:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800470c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004710:	4a66      	ldr	r2, [pc, #408]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004712:	430b      	orrs	r3, r1
 8004714:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004718:	e003      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800471e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004722:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800472e:	633b      	str	r3, [r7, #48]	; 0x30
 8004730:	2300      	movs	r3, #0
 8004732:	637b      	str	r3, [r7, #52]	; 0x34
 8004734:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004738:	460b      	mov	r3, r1
 800473a:	4313      	orrs	r3, r2
 800473c:	d055      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800473e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004742:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004746:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800474a:	d031      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800474c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004750:	d82a      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004756:	d02d      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800475c:	d824      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800475e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004762:	d029      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004764:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004768:	d81e      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800476a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476e:	d011      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004774:	d818      	bhi.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d020      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800477a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800477e:	d113      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004780:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004784:	3308      	adds	r3, #8
 8004786:	4618      	mov	r0, r3
 8004788:	f003 f994 	bl	8007ab4 <RCCEx_PLL2_Config>
 800478c:	4603      	mov	r3, r0
 800478e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004792:	e014      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004794:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004798:	3330      	adds	r3, #48	; 0x30
 800479a:	4618      	mov	r0, r3
 800479c:	f003 fa22 	bl	8007be4 <RCCEx_PLL3_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80047a6:	e00a      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80047ae:	e006      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80047b0:	bf00      	nop
 80047b2:	e004      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80047b4:	bf00      	nop
 80047b6:	e002      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80047b8:	bf00      	nop
 80047ba:	e000      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80047bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10d      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80047c6:	4b39      	ldr	r3, [pc, #228]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80047c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047cc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80047d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047d4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80047d8:	4a34      	ldr	r2, [pc, #208]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80047da:	430b      	orrs	r3, r1
 80047dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047e0:	e003      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047e6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80047ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047f8:	2300      	movs	r3, #0
 80047fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004800:	460b      	mov	r3, r1
 8004802:	4313      	orrs	r3, r2
 8004804:	d058      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004806:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800480a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800480e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004812:	d031      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004814:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004818:	d82a      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800481a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800481e:	d02d      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004820:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004824:	d824      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004826:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800482a:	d029      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800482c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004830:	d81e      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004832:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004836:	d011      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800483c:	d818      	bhi.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d020      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004846:	d113      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004848:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800484c:	3308      	adds	r3, #8
 800484e:	4618      	mov	r0, r3
 8004850:	f003 f930 	bl	8007ab4 <RCCEx_PLL2_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800485a:	e014      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800485c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004860:	3330      	adds	r3, #48	; 0x30
 8004862:	4618      	mov	r0, r3
 8004864:	f003 f9be 	bl	8007be4 <RCCEx_PLL3_Config>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800486e:	e00a      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004876:	e006      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004878:	bf00      	nop
 800487a:	e004      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800487c:	bf00      	nop
 800487e:	e002      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004880:	bf00      	nop
 8004882:	e000      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004886:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800488a:	2b00      	cmp	r3, #0
 800488c:	d110      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800488e:	4b07      	ldr	r3, [pc, #28]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004894:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004898:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800489c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048a0:	4902      	ldr	r1, [pc, #8]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80048a8:	e006      	b.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80048aa:	bf00      	nop
 80048ac:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048b4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80048b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	2100      	movs	r1, #0
 80048c2:	6239      	str	r1, [r7, #32]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ca:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80048ce:	460b      	mov	r3, r1
 80048d0:	4313      	orrs	r3, r2
 80048d2:	d055      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80048d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048dc:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80048e0:	d031      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80048e2:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80048e6:	d82a      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80048e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048ec:	d02d      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80048ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048f2:	d824      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80048f4:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80048f8:	d029      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80048fa:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80048fe:	d81e      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004904:	d011      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490a:	d818      	bhi.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d020      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004914:	d113      	bne.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004916:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800491a:	3308      	adds	r3, #8
 800491c:	4618      	mov	r0, r3
 800491e:	f003 f8c9 	bl	8007ab4 <RCCEx_PLL2_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004928:	e014      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800492a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800492e:	3330      	adds	r3, #48	; 0x30
 8004930:	4618      	mov	r0, r3
 8004932:	f003 f957 	bl	8007be4 <RCCEx_PLL3_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800493c:	e00a      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004944:	e006      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004946:	bf00      	nop
 8004948:	e004      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800494a:	bf00      	nop
 800494c:	e002      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800494e:	bf00      	nop
 8004950:	e000      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004954:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10d      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800495c:	4b88      	ldr	r3, [pc, #544]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800495e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004962:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8004966:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800496a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800496e:	4984      	ldr	r1, [pc, #528]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004976:	e003      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004978:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800497c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004980:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004988:	2100      	movs	r1, #0
 800498a:	61b9      	str	r1, [r7, #24]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	61fb      	str	r3, [r7, #28]
 8004992:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004996:	460b      	mov	r3, r1
 8004998:	4313      	orrs	r3, r2
 800499a:	d03d      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800499c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d81c      	bhi.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80049a8:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049eb 	.word	0x080049eb
 80049b4:	080049c1 	.word	0x080049c1
 80049b8:	080049cf 	.word	0x080049cf
 80049bc:	080049eb 	.word	0x080049eb
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c0:	4b6f      	ldr	r3, [pc, #444]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	4a6e      	ldr	r2, [pc, #440]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80049c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ca:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80049cc:	e00e      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049d2:	3308      	adds	r3, #8
 80049d4:	4618      	mov	r0, r3
 80049d6:	f003 f86d 	bl	8007ab4 <RCCEx_PLL2_Config>
 80049da:	4603      	mov	r3, r0
 80049dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80049e0:	e004      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80049e8:	e000      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80049ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10d      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80049f4:	4b62      	ldr	r3, [pc, #392]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80049f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80049fa:	f023 0203 	bic.w	r2, r3, #3
 80049fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a02:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004a06:	495e      	ldr	r1, [pc, #376]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004a0e:	e003      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a10:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a14:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	2100      	movs	r1, #0
 8004a22:	6139      	str	r1, [r7, #16]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	617b      	str	r3, [r7, #20]
 8004a2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4313      	orrs	r3, r2
 8004a32:	d03a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004a34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a40:	d00e      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a46:	d815      	bhi.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d017      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a50:	d110      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a52:	4b4b      	ldr	r3, [pc, #300]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a56:	4a4a      	ldr	r2, [pc, #296]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a5c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004a5e:	e00e      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a64:	3308      	adds	r3, #8
 8004a66:	4618      	mov	r0, r3
 8004a68:	f003 f824 	bl	8007ab4 <RCCEx_PLL2_Config>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004a72:	e004      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a7a:	e000      	b.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a7e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10d      	bne.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004a86:	4b3e      	ldr	r3, [pc, #248]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004a88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004a98:	4939      	ldr	r1, [pc, #228]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004aa0:	e003      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004aa6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004aaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	f003 0310 	and.w	r3, r3, #16
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	d038      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004ace:	2b30      	cmp	r3, #48	; 0x30
 8004ad0:	d01b      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004ad2:	2b30      	cmp	r3, #48	; 0x30
 8004ad4:	d815      	bhi.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004ad6:	2b10      	cmp	r3, #16
 8004ad8:	d002      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004ada:	2b20      	cmp	r3, #32
 8004adc:	d007      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004ade:	e010      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ae0:	4b27      	ldr	r3, [pc, #156]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	4a26      	ldr	r2, [pc, #152]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aea:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004aec:	e00e      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004af2:	3330      	adds	r3, #48	; 0x30
 8004af4:	4618      	mov	r0, r3
 8004af6:	f003 f875 	bl	8007be4 <RCCEx_PLL3_Config>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004b00:	e004      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b08:	e000      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b0c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10d      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004b14:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b22:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004b26:	4916      	ldr	r1, [pc, #88]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004b2e:	e003      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b30:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b34:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	2100      	movs	r1, #0
 8004b42:	6039      	str	r1, [r7, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	607b      	str	r3, [r7, #4]
 8004b4a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4313      	orrs	r3, r2
 8004b52:	d00c      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004b54:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b62:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004b66:	4906      	ldr	r1, [pc, #24]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8004b6e:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b7e:	bf00      	nop
 8004b80:	44020c00 	.word	0x44020c00

08004b84 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b08b      	sub	sp, #44	; 0x2c
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004b8c:	4bad      	ldr	r3, [pc, #692]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b94:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004b96:	4bab      	ldr	r3, [pc, #684]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004ba0:	4ba8      	ldr	r3, [pc, #672]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	0a1b      	lsrs	r3, r3, #8
 8004ba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004baa:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004bac:	4ba5      	ldr	r3, [pc, #660]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb0:	f003 0310 	and.w	r3, r3, #16
 8004bb4:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004bb6:	4ba3      	ldr	r3, [pc, #652]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bba:	08db      	lsrs	r3, r3, #3
 8004bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	fb02 f303 	mul.w	r3, r2, r3
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bce:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8126 	beq.w	8004e26 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d053      	beq.n	8004c88 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d86f      	bhi.n	8004cc6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d003      	beq.n	8004bf4 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d02b      	beq.n	8004c4a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8004bf2:	e068      	b.n	8004cc6 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bf4:	4b93      	ldr	r3, [pc, #588]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	08db      	lsrs	r3, r3, #3
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	4a92      	ldr	r2, [pc, #584]	; (8004e48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
 8004c04:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	ee07 3a90 	vmov	s15, r3
 8004c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	ee07 3a90 	vmov	s15, r3
 8004c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	ee07 3a90 	vmov	s15, r3
 8004c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c28:	ed97 6a04 	vldr	s12, [r7, #16]
 8004c2c:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004c30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c44:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004c48:	e068      	b.n	8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	ee07 3a90 	vmov	s15, r3
 8004c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c54:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004e50 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c66:	ed97 6a04 	vldr	s12, [r7, #16]
 8004c6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c82:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004c86:	e049      	b.n	8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c92:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004e54 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	ee07 3a90 	vmov	s15, r3
 8004ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca4:	ed97 6a04 	vldr	s12, [r7, #16]
 8004ca8:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004cac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004cc4:	e02a      	b.n	8004d1c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004cc6:	4b5f      	ldr	r3, [pc, #380]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	08db      	lsrs	r3, r3, #3
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	4a5d      	ldr	r2, [pc, #372]	; (8004e48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd6:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	ee07 3a90 	vmov	s15, r3
 8004ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	ee07 3a90 	vmov	s15, r3
 8004cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfa:	ed97 6a04 	vldr	s12, [r7, #16]
 8004cfe:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004e4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d16:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004d1a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d1c:	4b49      	ldr	r3, [pc, #292]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d28:	d121      	bne.n	8004d6e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004d2a:	4b46      	ldr	r3, [pc, #280]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d017      	beq.n	8004d66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004d36:	4b43      	ldr	r3, [pc, #268]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3a:	0a5b      	lsrs	r3, r3, #9
 8004d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d40:	ee07 3a90 	vmov	s15, r3
 8004d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8004d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d4c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004d50:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d5c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	e006      	b.n	8004d74 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	e002      	b.n	8004d74 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d74:	4b33      	ldr	r3, [pc, #204]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d80:	d121      	bne.n	8004dc6 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004d82:	4b30      	ldr	r3, [pc, #192]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d017      	beq.n	8004dbe <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004d8e:	4b2d      	ldr	r3, [pc, #180]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d92:	0c1b      	lsrs	r3, r3, #16
 8004d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d98:	ee07 3a90 	vmov	s15, r3
 8004d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004da0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004da4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004da8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004db4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	605a      	str	r2, [r3, #4]
 8004dbc:	e006      	b.n	8004dcc <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	605a      	str	r2, [r3, #4]
 8004dc4:	e002      	b.n	8004dcc <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004dcc:	4b1d      	ldr	r3, [pc, #116]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dd8:	d121      	bne.n	8004e1e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004dda:	4b1a      	ldr	r3, [pc, #104]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d017      	beq.n	8004e16 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004de6:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	0e1b      	lsrs	r3, r3, #24
 8004dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004df0:	ee07 3a90 	vmov	s15, r3
 8004df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004df8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dfc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004e00:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e0c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004e14:	e010      	b.n	8004e38 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	609a      	str	r2, [r3, #8]
}
 8004e1c:	e00c      	b.n	8004e38 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	609a      	str	r2, [r3, #8]
}
 8004e24:	e008      	b.n	8004e38 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	609a      	str	r2, [r3, #8]
}
 8004e38:	bf00      	nop
 8004e3a:	372c      	adds	r7, #44	; 0x2c
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	44020c00 	.word	0x44020c00
 8004e48:	03d09000 	.word	0x03d09000
 8004e4c:	46000000 	.word	0x46000000
 8004e50:	4a742400 	.word	0x4a742400
 8004e54:	4bbebc20 	.word	0x4bbebc20

08004e58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b08b      	sub	sp, #44	; 0x2c
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004e60:	4bad      	ldr	r3, [pc, #692]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e68:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004e6a:	4bab      	ldr	r3, [pc, #684]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004e74:	4ba8      	ldr	r3, [pc, #672]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	0a1b      	lsrs	r3, r3, #8
 8004e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e7e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004e80:	4ba5      	ldr	r3, [pc, #660]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004e8a:	4ba3      	ldr	r3, [pc, #652]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	08db      	lsrs	r3, r3, #3
 8004e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	fb02 f303 	mul.w	r3, r2, r3
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8126 	beq.w	80050fa <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d053      	beq.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d86f      	bhi.n	8004f9a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d003      	beq.n	8004ec8 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d02b      	beq.n	8004f1e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8004ec6:	e068      	b.n	8004f9a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ec8:	4b93      	ldr	r3, [pc, #588]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	08db      	lsrs	r3, r3, #3
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	4a92      	ldr	r2, [pc, #584]	; (800511c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	ee07 3a90 	vmov	s15, r3
 8004ee0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	ee07 3a90 	vmov	s15, r3
 8004ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efc:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f00:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005120 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004f04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004f1c:	e068      	b.n	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	ee07 3a90 	vmov	s15, r3
 8004f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f28:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005124 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005120 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f56:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004f5a:	e049      	b.n	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	ee07 3a90 	vmov	s15, r3
 8004f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f66:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005128 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f78:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f7c:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005120 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f94:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004f98:	e02a      	b.n	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f9a:	4b5f      	ldr	r3, [pc, #380]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	08db      	lsrs	r3, r3, #3
 8004fa0:	f003 0303 	and.w	r3, r3, #3
 8004fa4:	4a5d      	ldr	r2, [pc, #372]	; (800511c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004faa:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fce:	ed97 6a04 	vldr	s12, [r7, #16]
 8004fd2:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005120 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004fee:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ff0:	4b49      	ldr	r3, [pc, #292]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ffc:	d121      	bne.n	8005042 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004ffe:	4b46      	ldr	r3, [pc, #280]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d017      	beq.n	800503a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800500a:	4b43      	ldr	r3, [pc, #268]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800500c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500e:	0a5b      	lsrs	r3, r3, #9
 8005010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005014:	ee07 3a90 	vmov	s15, r3
 8005018:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800501c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005020:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005024:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005028:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800502c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005030:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e006      	b.n	8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	e002      	b.n	8005048 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005048:	4b33      	ldr	r3, [pc, #204]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005050:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005054:	d121      	bne.n	800509a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005056:	4b30      	ldr	r3, [pc, #192]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d017      	beq.n	8005092 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005062:	4b2d      	ldr	r3, [pc, #180]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005066:	0c1b      	lsrs	r3, r3, #16
 8005068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800506c:	ee07 3a90 	vmov	s15, r3
 8005070:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005074:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005078:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800507c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005088:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	605a      	str	r2, [r3, #4]
 8005090:	e006      	b.n	80050a0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	605a      	str	r2, [r3, #4]
 8005098:	e002      	b.n	80050a0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050a0:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ac:	d121      	bne.n	80050f2 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80050ae:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d017      	beq.n	80050ea <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80050ba:	4b17      	ldr	r3, [pc, #92]	; (8005118 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80050bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050be:	0e1b      	lsrs	r3, r3, #24
 80050c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050c4:	ee07 3a90 	vmov	s15, r3
 80050c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80050cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050d0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80050d4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80050d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80050e8:	e010      	b.n	800510c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	609a      	str	r2, [r3, #8]
}
 80050f0:	e00c      	b.n	800510c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	609a      	str	r2, [r3, #8]
}
 80050f8:	e008      	b.n	800510c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	609a      	str	r2, [r3, #8]
}
 800510c:	bf00      	nop
 800510e:	372c      	adds	r7, #44	; 0x2c
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	44020c00 	.word	0x44020c00
 800511c:	03d09000 	.word	0x03d09000
 8005120:	46000000 	.word	0x46000000
 8005124:	4a742400 	.word	0x4a742400
 8005128:	4bbebc20 	.word	0x4bbebc20

0800512c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800512c:	b480      	push	{r7}
 800512e:	b08b      	sub	sp, #44	; 0x2c
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005134:	4bad      	ldr	r3, [pc, #692]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800513e:	4bab      	ldr	r3, [pc, #684]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005148:	4ba8      	ldr	r3, [pc, #672]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	0a1b      	lsrs	r3, r3, #8
 800514e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005152:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005154:	4ba5      	ldr	r3, [pc, #660]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800515e:	4ba3      	ldr	r3, [pc, #652]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005162:	08db      	lsrs	r3, r3, #3
 8005164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005176:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b00      	cmp	r3, #0
 800517e:	f000 8126 	beq.w	80053ce <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	2b03      	cmp	r3, #3
 8005186:	d053      	beq.n	8005230 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	2b03      	cmp	r3, #3
 800518c:	d86f      	bhi.n	800526e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d003      	beq.n	800519c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	2b02      	cmp	r3, #2
 8005198:	d02b      	beq.n	80051f2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800519a:	e068      	b.n	800526e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800519c:	4b93      	ldr	r3, [pc, #588]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	08db      	lsrs	r3, r3, #3
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	4a92      	ldr	r2, [pc, #584]	; (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ac:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	ee07 3a90 	vmov	s15, r3
 80051b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	ee07 3a90 	vmov	s15, r3
 80051be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	ee07 3a90 	vmov	s15, r3
 80051cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80051d4:	eddf 5a87 	vldr	s11, [pc, #540]	; 80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80051d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80051f0:	e068      	b.n	80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	ee07 3a90 	vmov	s15, r3
 80051f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fc:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80053f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800520e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005212:	eddf 5a78 	vldr	s11, [pc, #480]	; 80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800521a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800521e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800522e:	e049      	b.n	80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800523a:	eddf 6a70 	vldr	s13, [pc, #448]	; 80053fc <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800523e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005250:	eddf 5a68 	vldr	s11, [pc, #416]	; 80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005254:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005268:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800526c:	e02a      	b.n	80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800526e:	4b5f      	ldr	r3, [pc, #380]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	08db      	lsrs	r3, r3, #3
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	4a5d      	ldr	r2, [pc, #372]	; (80053f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800527a:	fa22 f303 	lsr.w	r3, r2, r3
 800527e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	ee07 3a90 	vmov	s15, r3
 8005290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a2:	ed97 6a04 	vldr	s12, [r7, #16]
 80052a6:	eddf 5a53 	vldr	s11, [pc, #332]	; 80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80052aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052be:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80052c2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052c4:	4b49      	ldr	r3, [pc, #292]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d0:	d121      	bne.n	8005316 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80052d2:	4b46      	ldr	r3, [pc, #280]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d017      	beq.n	800530e <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80052de:	4b43      	ldr	r3, [pc, #268]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80052e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e2:	0a5b      	lsrs	r3, r3, #9
 80052e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e8:	ee07 3a90 	vmov	s15, r3
 80052ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80052f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052f4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80052f8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80052fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005304:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	e006      	b.n	800531c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	e002      	b.n	800531c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800531c:	4b33      	ldr	r3, [pc, #204]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005328:	d121      	bne.n	800536e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800532a:	4b30      	ldr	r3, [pc, #192]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d017      	beq.n	8005366 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005336:	4b2d      	ldr	r3, [pc, #180]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533a:	0c1b      	lsrs	r3, r3, #16
 800533c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800534c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005350:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800535c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	605a      	str	r2, [r3, #4]
 8005364:	e006      	b.n	8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	605a      	str	r2, [r3, #4]
 800536c:	e002      	b.n	8005374 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005374:	4b1d      	ldr	r3, [pc, #116]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800537c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005380:	d121      	bne.n	80053c6 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005382:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d017      	beq.n	80053be <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800538e:	4b17      	ldr	r3, [pc, #92]	; (80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005392:	0e1b      	lsrs	r3, r3, #24
 8005394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80053a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053a4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80053a8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80053ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80053bc:	e010      	b.n	80053e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	609a      	str	r2, [r3, #8]
}
 80053c4:	e00c      	b.n	80053e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	609a      	str	r2, [r3, #8]
}
 80053cc:	e008      	b.n	80053e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	609a      	str	r2, [r3, #8]
}
 80053e0:	bf00      	nop
 80053e2:	372c      	adds	r7, #44	; 0x2c
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	44020c00 	.word	0x44020c00
 80053f0:	03d09000 	.word	0x03d09000
 80053f4:	46000000 	.word	0x46000000
 80053f8:	4a742400 	.word	0x4a742400
 80053fc:	4bbebc20 	.word	0x4bbebc20

08005400 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005400:	b590      	push	{r4, r7, lr}
 8005402:	b08f      	sub	sp, #60	; 0x3c
 8005404:	af00      	add	r7, sp, #0
 8005406:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800540a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800540e:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8005412:	4321      	orrs	r1, r4
 8005414:	d150      	bne.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005416:	4b26      	ldr	r3, [pc, #152]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800541c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005420:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005422:	4b23      	ldr	r3, [pc, #140]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b02      	cmp	r3, #2
 800542e:	d108      	bne.n	8005442 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005436:	d104      	bne.n	8005442 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800543c:	637b      	str	r3, [r7, #52]	; 0x34
 800543e:	f002 bb2a 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005442:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800544c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005450:	d108      	bne.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005458:	d104      	bne.n	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800545a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800545e:	637b      	str	r3, [r7, #52]	; 0x34
 8005460:	f002 bb19 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005464:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005470:	d119      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005478:	d115      	bne.n	80054a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800547a:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005486:	d30a      	bcc.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005488:	4b09      	ldr	r3, [pc, #36]	; (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	0a1b      	lsrs	r3, r3, #8
 800548e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005492:	4a08      	ldr	r2, [pc, #32]	; (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005494:	fbb2 f3f3 	udiv	r3, r2, r3
 8005498:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800549a:	f002 bafc 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80054a2:	f002 baf8 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	637b      	str	r3, [r7, #52]	; 0x34
 80054aa:	f002 baf4 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80054ae:	bf00      	nop
 80054b0:	44020c00 	.word	0x44020c00
 80054b4:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80054b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054bc:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80054c0:	ea50 0104 	orrs.w	r1, r0, r4
 80054c4:	f001 8275 	beq.w	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80054c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054cc:	2801      	cmp	r0, #1
 80054ce:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 80054d2:	f082 82dd 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80054d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054da:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 80054de:	ea50 0104 	orrs.w	r1, r0, r4
 80054e2:	f001 816c 	beq.w	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80054e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054ea:	2801      	cmp	r0, #1
 80054ec:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 80054f0:	f082 82ce 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80054f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054f8:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 80054fc:	ea50 0104 	orrs.w	r1, r0, r4
 8005500:	f001 8602 	beq.w	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8005504:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005508:	2801      	cmp	r0, #1
 800550a:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800550e:	f082 82bf 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005516:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800551a:	ea50 0104 	orrs.w	r1, r0, r4
 800551e:	f001 854c 	beq.w	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8005522:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005526:	2801      	cmp	r0, #1
 8005528:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800552c:	f082 82b0 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005534:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8005538:	ea50 0104 	orrs.w	r1, r0, r4
 800553c:	f001 849e 	beq.w	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005540:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005544:	2801      	cmp	r0, #1
 8005546:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800554a:	f082 82a1 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800554e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005552:	f1a1 0420 	sub.w	r4, r1, #32
 8005556:	ea50 0104 	orrs.w	r1, r0, r4
 800555a:	f001 83e8 	beq.w	8006d2e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800555e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005562:	2801      	cmp	r0, #1
 8005564:	f171 0120 	sbcs.w	r1, r1, #32
 8005568:	f082 8292 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800556c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005570:	f1a1 0410 	sub.w	r4, r1, #16
 8005574:	ea50 0104 	orrs.w	r1, r0, r4
 8005578:	f002 8256 	beq.w	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800557c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005580:	2801      	cmp	r0, #1
 8005582:	f171 0110 	sbcs.w	r1, r1, #16
 8005586:	f082 8283 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800558a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800558e:	f1a1 0408 	sub.w	r4, r1, #8
 8005592:	ea50 0104 	orrs.w	r1, r0, r4
 8005596:	f002 81cc 	beq.w	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800559a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800559e:	2801      	cmp	r0, #1
 80055a0:	f171 0108 	sbcs.w	r1, r1, #8
 80055a4:	f082 8274 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80055a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ac:	1f0c      	subs	r4, r1, #4
 80055ae:	ea50 0104 	orrs.w	r1, r0, r4
 80055b2:	f001 8648 	beq.w	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80055b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ba:	2801      	cmp	r0, #1
 80055bc:	f171 0104 	sbcs.w	r1, r1, #4
 80055c0:	f082 8266 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80055c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055c8:	1e8c      	subs	r4, r1, #2
 80055ca:	ea50 0104 	orrs.w	r1, r0, r4
 80055ce:	f002 8143 	beq.w	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80055d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055d6:	2801      	cmp	r0, #1
 80055d8:	f171 0102 	sbcs.w	r1, r1, #2
 80055dc:	f082 8258 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80055e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055e4:	1e4c      	subs	r4, r1, #1
 80055e6:	ea50 0104 	orrs.w	r1, r0, r4
 80055ea:	f002 80ce 	beq.w	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80055ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055f2:	2801      	cmp	r0, #1
 80055f4:	f171 0101 	sbcs.w	r1, r1, #1
 80055f8:	f082 824a 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80055fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005600:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8005604:	4321      	orrs	r1, r4
 8005606:	f002 8059 	beq.w	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800560a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800560e:	4cd9      	ldr	r4, [pc, #868]	; (8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005610:	42a0      	cmp	r0, r4
 8005612:	f171 0100 	sbcs.w	r1, r1, #0
 8005616:	f082 823b 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800561a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800561e:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8005622:	4321      	orrs	r1, r4
 8005624:	f001 87d9 	beq.w	80075da <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005628:	e9d7 0100 	ldrd	r0, r1, [r7]
 800562c:	4cd2      	ldr	r4, [pc, #840]	; (8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800562e:	42a0      	cmp	r0, r4
 8005630:	f171 0100 	sbcs.w	r1, r1, #0
 8005634:	f082 822c 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005638:	e9d7 0100 	ldrd	r0, r1, [r7]
 800563c:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8005640:	4321      	orrs	r1, r4
 8005642:	f001 8751 	beq.w	80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005646:	e9d7 0100 	ldrd	r0, r1, [r7]
 800564a:	4ccc      	ldr	r4, [pc, #816]	; (800597c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800564c:	42a0      	cmp	r0, r4
 800564e:	f171 0100 	sbcs.w	r1, r1, #0
 8005652:	f082 821d 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005656:	e9d7 0100 	ldrd	r0, r1, [r7]
 800565a:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 800565e:	4321      	orrs	r1, r4
 8005660:	f001 869a 	beq.w	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005664:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005668:	4cc5      	ldr	r4, [pc, #788]	; (8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800566a:	42a0      	cmp	r0, r4
 800566c:	f171 0100 	sbcs.w	r1, r1, #0
 8005670:	f082 820e 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005674:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005678:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 800567c:	4321      	orrs	r1, r4
 800567e:	f001 8612 	beq.w	80072a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8005682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005686:	4cbf      	ldr	r4, [pc, #764]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005688:	42a0      	cmp	r0, r4
 800568a:	f171 0100 	sbcs.w	r1, r1, #0
 800568e:	f082 81ff 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005692:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005696:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 800569a:	4321      	orrs	r1, r4
 800569c:	f002 817e 	beq.w	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80056a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056a4:	4cb8      	ldr	r4, [pc, #736]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80056a6:	42a0      	cmp	r0, r4
 80056a8:	f171 0100 	sbcs.w	r1, r1, #0
 80056ac:	f082 81f0 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056b4:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 80056b8:	4321      	orrs	r1, r4
 80056ba:	f000 829e 	beq.w	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80056be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056c2:	4cb2      	ldr	r4, [pc, #712]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80056c4:	42a0      	cmp	r0, r4
 80056c6:	f171 0100 	sbcs.w	r1, r1, #0
 80056ca:	f082 81e1 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056d2:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 80056d6:	4321      	orrs	r1, r4
 80056d8:	f000 826d 	beq.w	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80056dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056e0:	4cab      	ldr	r4, [pc, #684]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80056e2:	42a0      	cmp	r0, r4
 80056e4:	f171 0100 	sbcs.w	r1, r1, #0
 80056e8:	f082 81d2 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056f0:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 80056f4:	4321      	orrs	r1, r4
 80056f6:	f001 800d 	beq.w	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80056fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056fe:	4ca5      	ldr	r4, [pc, #660]	; (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005700:	42a0      	cmp	r0, r4
 8005702:	f171 0100 	sbcs.w	r1, r1, #0
 8005706:	f082 81c3 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800570a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800570e:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8005712:	4321      	orrs	r1, r4
 8005714:	f000 81d0 	beq.w	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800571c:	4c9e      	ldr	r4, [pc, #632]	; (8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800571e:	42a0      	cmp	r0, r4
 8005720:	f171 0100 	sbcs.w	r1, r1, #0
 8005724:	f082 81b4 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800572c:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8005730:	4321      	orrs	r1, r4
 8005732:	f000 8142 	beq.w	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800573a:	4c98      	ldr	r4, [pc, #608]	; (800599c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800573c:	42a0      	cmp	r0, r4
 800573e:	f171 0100 	sbcs.w	r1, r1, #0
 8005742:	f082 81a5 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005746:	e9d7 0100 	ldrd	r0, r1, [r7]
 800574a:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 800574e:	4321      	orrs	r1, r4
 8005750:	f001 824e 	beq.w	8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005754:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005758:	4c91      	ldr	r4, [pc, #580]	; (80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800575a:	42a0      	cmp	r0, r4
 800575c:	f171 0100 	sbcs.w	r1, r1, #0
 8005760:	f082 8196 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005764:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005768:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 800576c:	4321      	orrs	r1, r4
 800576e:	f001 8197 	beq.w	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005772:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005776:	4c8b      	ldr	r4, [pc, #556]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005778:	42a0      	cmp	r0, r4
 800577a:	f171 0100 	sbcs.w	r1, r1, #0
 800577e:	f082 8187 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005782:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005786:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 800578a:	4321      	orrs	r1, r4
 800578c:	f001 8154 	beq.w	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005794:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8005798:	f171 0100 	sbcs.w	r1, r1, #0
 800579c:	f082 8178 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057a4:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 80057a8:	4321      	orrs	r1, r4
 80057aa:	f001 80b7 	beq.w	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80057ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057b2:	f248 0401 	movw	r4, #32769	; 0x8001
 80057b6:	42a0      	cmp	r0, r4
 80057b8:	f171 0100 	sbcs.w	r1, r1, #0
 80057bc:	f082 8168 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057c4:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 80057c8:	4321      	orrs	r1, r4
 80057ca:	f001 8064 	beq.w	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80057ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057d2:	f244 0401 	movw	r4, #16385	; 0x4001
 80057d6:	42a0      	cmp	r0, r4
 80057d8:	f171 0100 	sbcs.w	r1, r1, #0
 80057dc:	f082 8158 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057e4:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 80057e8:	4321      	orrs	r1, r4
 80057ea:	f001 8011 	beq.w	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80057ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057f2:	f242 0401 	movw	r4, #8193	; 0x2001
 80057f6:	42a0      	cmp	r0, r4
 80057f8:	f171 0100 	sbcs.w	r1, r1, #0
 80057fc:	f082 8148 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005800:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005804:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8005808:	4321      	orrs	r1, r4
 800580a:	f000 871e 	beq.w	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800580e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005812:	f241 0401 	movw	r4, #4097	; 0x1001
 8005816:	42a0      	cmp	r0, r4
 8005818:	f171 0100 	sbcs.w	r1, r1, #0
 800581c:	f082 8138 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005820:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005824:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8005828:	4321      	orrs	r1, r4
 800582a:	f000 86a8 	beq.w	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800582e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005832:	f640 0401 	movw	r4, #2049	; 0x801
 8005836:	42a0      	cmp	r0, r4
 8005838:	f171 0100 	sbcs.w	r1, r1, #0
 800583c:	f082 8128 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005840:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005844:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8005848:	4321      	orrs	r1, r4
 800584a:	f000 8632 	beq.w	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800584e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005852:	f240 4401 	movw	r4, #1025	; 0x401
 8005856:	42a0      	cmp	r0, r4
 8005858:	f171 0100 	sbcs.w	r1, r1, #0
 800585c:	f082 8118 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005860:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005864:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8005868:	4321      	orrs	r1, r4
 800586a:	f000 85b0 	beq.w	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800586e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005872:	f240 2401 	movw	r4, #513	; 0x201
 8005876:	42a0      	cmp	r0, r4
 8005878:	f171 0100 	sbcs.w	r1, r1, #0
 800587c:	f082 8108 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005880:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005884:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8005888:	4321      	orrs	r1, r4
 800588a:	f000 8535 	beq.w	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800588e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005892:	f240 1401 	movw	r4, #257	; 0x101
 8005896:	42a0      	cmp	r0, r4
 8005898:	f171 0100 	sbcs.w	r1, r1, #0
 800589c:	f082 80f8 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058a4:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 80058a8:	4321      	orrs	r1, r4
 80058aa:	f000 84ba 	beq.w	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80058ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058b2:	2881      	cmp	r0, #129	; 0x81
 80058b4:	f171 0100 	sbcs.w	r1, r1, #0
 80058b8:	f082 80ea 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058c0:	2821      	cmp	r0, #33	; 0x21
 80058c2:	f171 0100 	sbcs.w	r1, r1, #0
 80058c6:	d26f      	bcs.n	80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80058c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058cc:	4301      	orrs	r1, r0
 80058ce:	f002 80df 	beq.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058d6:	1e42      	subs	r2, r0, #1
 80058d8:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 80058dc:	2a20      	cmp	r2, #32
 80058de:	f173 0100 	sbcs.w	r1, r3, #0
 80058e2:	f082 80d5 	bcs.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058e6:	2a1f      	cmp	r2, #31
 80058e8:	f202 80d2 	bhi.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058ec:	a101      	add	r1, pc, #4	; (adr r1, 80058f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80058ee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80058f2:	bf00      	nop
 80058f4:	08005c55 	.word	0x08005c55
 80058f8:	08005d21 	.word	0x08005d21
 80058fc:	08007a91 	.word	0x08007a91
 8005900:	08005de1 	.word	0x08005de1
 8005904:	08007a91 	.word	0x08007a91
 8005908:	08007a91 	.word	0x08007a91
 800590c:	08007a91 	.word	0x08007a91
 8005910:	08005eb1 	.word	0x08005eb1
 8005914:	08007a91 	.word	0x08007a91
 8005918:	08007a91 	.word	0x08007a91
 800591c:	08007a91 	.word	0x08007a91
 8005920:	08007a91 	.word	0x08007a91
 8005924:	08007a91 	.word	0x08007a91
 8005928:	08007a91 	.word	0x08007a91
 800592c:	08007a91 	.word	0x08007a91
 8005930:	08005f93 	.word	0x08005f93
 8005934:	08007a91 	.word	0x08007a91
 8005938:	08007a91 	.word	0x08007a91
 800593c:	08007a91 	.word	0x08007a91
 8005940:	08007a91 	.word	0x08007a91
 8005944:	08007a91 	.word	0x08007a91
 8005948:	08007a91 	.word	0x08007a91
 800594c:	08007a91 	.word	0x08007a91
 8005950:	08007a91 	.word	0x08007a91
 8005954:	08007a91 	.word	0x08007a91
 8005958:	08007a91 	.word	0x08007a91
 800595c:	08007a91 	.word	0x08007a91
 8005960:	08007a91 	.word	0x08007a91
 8005964:	08007a91 	.word	0x08007a91
 8005968:	08007a91 	.word	0x08007a91
 800596c:	08007a91 	.word	0x08007a91
 8005970:	08006069 	.word	0x08006069
 8005974:	80000001 	.word	0x80000001
 8005978:	40000001 	.word	0x40000001
 800597c:	20000001 	.word	0x20000001
 8005980:	10000001 	.word	0x10000001
 8005984:	08000001 	.word	0x08000001
 8005988:	04000001 	.word	0x04000001
 800598c:	00800001 	.word	0x00800001
 8005990:	00400001 	.word	0x00400001
 8005994:	00200001 	.word	0x00200001
 8005998:	00100001 	.word	0x00100001
 800599c:	00080001 	.word	0x00080001
 80059a0:	00040001 	.word	0x00040001
 80059a4:	00020001 	.word	0x00020001
 80059a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ac:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80059b0:	430b      	orrs	r3, r1
 80059b2:	f000 83c4 	beq.w	800613e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80059b6:	f002 b86b 	b.w	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80059ba:	4ba1      	ldr	r3, [pc, #644]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80059bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059c0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80059c4:	633b      	str	r3, [r7, #48]	; 0x30
 80059c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059cc:	d036      	beq.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059d4:	d86b      	bhi.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059dc:	d02b      	beq.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059e4:	d863      	bhi.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ec:	d01b      	beq.n	8005a26 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80059ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059f4:	d85b      	bhi.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a02:	d008      	beq.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8005a04:	e053      	b.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a06:	f107 0320 	add.w	r3, r7, #32
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff f8ba 	bl	8004b84 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a14:	e04e      	b.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a16:	f107 0314 	add.w	r3, r7, #20
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff fa1c 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a24:	e046      	b.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a26:	f107 0308 	add.w	r3, r7, #8
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff fb7e 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a34:	e03e      	b.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005a36:	4b83      	ldr	r3, [pc, #524]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005a38:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a3a:	e03b      	b.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a3c:	4b80      	ldr	r3, [pc, #512]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a42:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a48:	4b7d      	ldr	r3, [pc, #500]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d10c      	bne.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d109      	bne.n	8005a6e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a5a:	4b79      	ldr	r3, [pc, #484]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	08db      	lsrs	r3, r3, #3
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	4a78      	ldr	r2, [pc, #480]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005a66:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6c:	e01e      	b.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a6e:	4b74      	ldr	r3, [pc, #464]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a7a:	d106      	bne.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a82:	d102      	bne.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005a84:	4b71      	ldr	r3, [pc, #452]	; (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005a86:	637b      	str	r3, [r7, #52]	; 0x34
 8005a88:	e010      	b.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a8a:	4b6d      	ldr	r3, [pc, #436]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a96:	d106      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a9e:	d102      	bne.n	8005aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005aa0:	4b6b      	ldr	r3, [pc, #428]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa4:	e002      	b.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005aaa:	e003      	b.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005aac:	e002      	b.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005ab2:	bf00      	nop
          }
        }
        break;
 8005ab4:	f001 bfef 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005ab8:	4b61      	ldr	r3, [pc, #388]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005aba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005abe:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005aca:	d036      	beq.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ad2:	d86b      	bhi.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005ada:	d02b      	beq.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005ae2:	d863      	bhi.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aea:	d01b      	beq.n	8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005af2:	d85b      	bhi.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d004      	beq.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b00:	d008      	beq.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8005b02:	e053      	b.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b04:	f107 0320 	add.w	r3, r7, #32
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff f83b 	bl	8004b84 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005b12:	e04e      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b14:	f107 0314 	add.w	r3, r7, #20
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff f99d 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005b22:	e046      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b24:	f107 0308 	add.w	r3, r7, #8
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7ff faff 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005b32:	e03e      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005b34:	4b43      	ldr	r3, [pc, #268]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005b36:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005b38:	e03b      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b3a:	4b41      	ldr	r3, [pc, #260]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b40:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b46:	4b3e      	ldr	r3, [pc, #248]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d10c      	bne.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b58:	4b39      	ldr	r3, [pc, #228]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	08db      	lsrs	r3, r3, #3
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	4a39      	ldr	r2, [pc, #228]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
 8005b6a:	e01e      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b6c:	4b34      	ldr	r3, [pc, #208]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b78:	d106      	bne.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b80:	d102      	bne.n	8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005b82:	4b32      	ldr	r3, [pc, #200]	; (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34
 8005b86:	e010      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b88:	4b2d      	ldr	r3, [pc, #180]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b94:	d106      	bne.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8005b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b9c:	d102      	bne.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005b9e:	4b2c      	ldr	r3, [pc, #176]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba2:	e002      	b.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005ba8:	e003      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8005baa:	e002      	b.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005bb0:	bf00      	nop
          }
        }
        break;
 8005bb2:	f001 bf70 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005bb6:	4b22      	ldr	r3, [pc, #136]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005bb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc0:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d108      	bne.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bc8:	f107 0320 	add.w	r3, r7, #32
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7fe ffd9 	bl	8004b84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005bd6:	f001 bf5e 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d108      	bne.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005be0:	f107 0314 	add.w	r3, r7, #20
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff f937 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bee:	f001 bf52 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bf6:	f001 bf4e 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8005bfa:	4b11      	ldr	r3, [pc, #68]	; (8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005bfc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c04:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8005c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d108      	bne.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c0c:	f107 0320 	add.w	r3, r7, #32
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fe ffb7 	bl	8004b84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c1a:	f001 bf3c 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	2b80      	cmp	r3, #128	; 0x80
 8005c22:	d108      	bne.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c24:	f107 0314 	add.w	r3, r7, #20
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff f915 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c32:	f001 bf30 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c3a:	f001 bf2c 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005c3e:	bf00      	nop
 8005c40:	44020c00 	.word	0x44020c00
 8005c44:	00bb8000 	.word	0x00bb8000
 8005c48:	03d09000 	.word	0x03d09000
 8005c4c:	003d0900 	.word	0x003d0900
 8005c50:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005c54:	4b9d      	ldr	r3, [pc, #628]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005c56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005c5a:	f003 0307 	and.w	r3, r3, #7
 8005c5e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d104      	bne.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005c66:	f7fc ffd7 	bl	8002c18 <HAL_RCC_GetPCLK2Freq>
 8005c6a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005c6c:	f001 bf13 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005c70:	4b96      	ldr	r3, [pc, #600]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c7c:	d10a      	bne.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d107      	bne.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c84:	f107 0314 	add.w	r3, r7, #20
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff f8e5 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34
 8005c92:	e043      	b.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005c94:	4b8d      	ldr	r3, [pc, #564]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ca0:	d10a      	bne.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d107      	bne.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ca8:	f107 0308 	add.w	r3, r7, #8
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff fa3d 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cb6:	e031      	b.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005cb8:	4b84      	ldr	r3, [pc, #528]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d10c      	bne.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d109      	bne.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005cca:	4b80      	ldr	r3, [pc, #512]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	08db      	lsrs	r3, r3, #3
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	4a7e      	ldr	r2, [pc, #504]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005cda:	637b      	str	r3, [r7, #52]	; 0x34
 8005cdc:	e01e      	b.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005cde:	4b7b      	ldr	r3, [pc, #492]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cea:	d105      	bne.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d102      	bne.n	8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8005cf2:	4b78      	ldr	r3, [pc, #480]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cf6:	e011      	b.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005cf8:	4b74      	ldr	r3, [pc, #464]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d106      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	2b05      	cmp	r3, #5
 8005d0a:	d103      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8005d0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d10:	637b      	str	r3, [r7, #52]	; 0x34
 8005d12:	e003      	b.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d18:	f001 bebd 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005d1c:	f001 bebb 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005d20:	4b6a      	ldr	r3, [pc, #424]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d2a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d104      	bne.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d32:	f7fc ff5b 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8005d36:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005d38:	f001 bead 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005d3c:	4b63      	ldr	r3, [pc, #396]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d48:	d10a      	bne.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d107      	bne.n	8005d60 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d50:	f107 0314 	add.w	r3, r7, #20
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff f87f 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d5e:	e03d      	b.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d108      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d66:	f107 0308 	add.w	r3, r7, #8
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff f9de 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d74:	f001 be8f 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005d78:	4b54      	ldr	r3, [pc, #336]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d10c      	bne.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	2b18      	cmp	r3, #24
 8005d88:	d109      	bne.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d8a:	4b50      	ldr	r3, [pc, #320]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	08db      	lsrs	r3, r3, #3
 8005d90:	f003 0303 	and.w	r3, r3, #3
 8005d94:	4a4e      	ldr	r2, [pc, #312]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005d96:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d9c:	e01e      	b.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005d9e:	4b4b      	ldr	r3, [pc, #300]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005da6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005daa:	d105      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	d102      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8005db2:	4b48      	ldr	r3, [pc, #288]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
 8005db6:	e011      	b.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005db8:	4b44      	ldr	r3, [pc, #272]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d106      	bne.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	2b28      	cmp	r3, #40	; 0x28
 8005dca:	d103      	bne.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8005dcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd2:	e003      	b.n	8005ddc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dd8:	f001 be5d 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005ddc:	f001 be5b 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005de0:	4b3a      	ldr	r3, [pc, #232]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005de2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005de6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005dea:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d104      	bne.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005df2:	f7fc fefb 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8005df6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005df8:	f001 be4d 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005dfc:	4b33      	ldr	r3, [pc, #204]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e08:	d10a      	bne.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	2b40      	cmp	r3, #64	; 0x40
 8005e0e:	d107      	bne.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e10:	f107 0314 	add.w	r3, r7, #20
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff f81f 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e1e:	e045      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8005e20:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e2c:	d10a      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	2b80      	cmp	r3, #128	; 0x80
 8005e32:	d107      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e34:	f107 0308 	add.w	r3, r7, #8
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7ff f977 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	637b      	str	r3, [r7, #52]	; 0x34
 8005e42:	e033      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005e44:	4b21      	ldr	r3, [pc, #132]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0302 	and.w	r3, r3, #2
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d10c      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8005e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e52:	2bc0      	cmp	r3, #192	; 0xc0
 8005e54:	d109      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e56:	4b1d      	ldr	r3, [pc, #116]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	08db      	lsrs	r3, r3, #3
 8005e5c:	f003 0303 	and.w	r3, r3, #3
 8005e60:	4a1b      	ldr	r2, [pc, #108]	; (8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005e62:	fa22 f303 	lsr.w	r3, r2, r3
 8005e66:	637b      	str	r3, [r7, #52]	; 0x34
 8005e68:	e020      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005e6a:	4b18      	ldr	r3, [pc, #96]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e76:	d106      	bne.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e7e:	d102      	bne.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8005e80:	4b14      	ldr	r3, [pc, #80]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005e82:	637b      	str	r3, [r7, #52]	; 0x34
 8005e84:	e012      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005e86:	4b11      	ldr	r3, [pc, #68]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d107      	bne.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005e9a:	d103      	bne.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8005e9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea2:	e003      	b.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ea8:	f001 bdf5 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005eac:	f001 bdf3 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005eb0:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005eb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005eb6:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8005eba:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ec2:	f7fc fe93 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8005ec6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005ec8:	f001 bde5 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005ecc:	44020c00 	.word	0x44020c00
 8005ed0:	03d09000 	.word	0x03d09000
 8005ed4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005ed8:	4ba0      	ldr	r3, [pc, #640]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ee0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ee4:	d10b      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eec:	d107      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eee:	f107 0314 	add.w	r3, r7, #20
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fe ffb0 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
 8005efc:	e047      	b.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8005efe:	4b97      	ldr	r3, [pc, #604]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f0a:	d10b      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f12:	d107      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f14:	f107 0308 	add.w	r3, r7, #8
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff f907 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	637b      	str	r3, [r7, #52]	; 0x34
 8005f22:	e034      	b.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005f24:	4b8d      	ldr	r3, [pc, #564]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d10d      	bne.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f36:	d109      	bne.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f38:	4b88      	ldr	r3, [pc, #544]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	08db      	lsrs	r3, r3, #3
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	4a87      	ldr	r2, [pc, #540]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005f44:	fa22 f303 	lsr.w	r3, r2, r3
 8005f48:	637b      	str	r3, [r7, #52]	; 0x34
 8005f4a:	e020      	b.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005f4c:	4b83      	ldr	r3, [pc, #524]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f58:	d106      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f60:	d102      	bne.n	8005f68 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8005f62:	4b80      	ldr	r3, [pc, #512]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005f64:	637b      	str	r3, [r7, #52]	; 0x34
 8005f66:	e012      	b.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005f68:	4b7c      	ldr	r3, [pc, #496]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d107      	bne.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005f7c:	d103      	bne.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8005f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f82:	637b      	str	r3, [r7, #52]	; 0x34
 8005f84:	e003      	b.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f8a:	f001 bd84 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005f8e:	f001 bd82 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005f92:	4b72      	ldr	r3, [pc, #456]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005f98:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005f9c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fa4:	f7fc fe22 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8005fa8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8005faa:	f001 bd74 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8005fae:	4b6b      	ldr	r3, [pc, #428]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fba:	d10b      	bne.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc2:	d107      	bne.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fc4:	f107 0314 	add.w	r3, r7, #20
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe ff45 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd2:	e047      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005fd4:	4b61      	ldr	r3, [pc, #388]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fe0:	d10b      	bne.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe8:	d107      	bne.n	8005ffa <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fea:	f107 0308 	add.w	r3, r7, #8
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff f89c 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ff8:	e034      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005ffa:	4b58      	ldr	r3, [pc, #352]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b02      	cmp	r3, #2
 8006004:	d10d      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800600c:	d109      	bne.n	8006022 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800600e:	4b53      	ldr	r3, [pc, #332]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	08db      	lsrs	r3, r3, #3
 8006014:	f003 0303 	and.w	r3, r3, #3
 8006018:	4a51      	ldr	r2, [pc, #324]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800601a:	fa22 f303 	lsr.w	r3, r2, r3
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
 8006020:	e020      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8006022:	4b4e      	ldr	r3, [pc, #312]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800602a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800602e:	d106      	bne.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006036:	d102      	bne.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8006038:	4b4a      	ldr	r3, [pc, #296]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800603a:	637b      	str	r3, [r7, #52]	; 0x34
 800603c:	e012      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800603e:	4b47      	ldr	r3, [pc, #284]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b02      	cmp	r3, #2
 800604a:	d107      	bne.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006052:	d103      	bne.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8006054:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006058:	637b      	str	r3, [r7, #52]	; 0x34
 800605a:	e003      	b.n	8006064 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006060:	f001 bd19 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006064:	f001 bd17 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006068:	4b3c      	ldr	r3, [pc, #240]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800606a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800606e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8006072:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	2b00      	cmp	r3, #0
 8006078:	d104      	bne.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800607a:	f7fc fdb7 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 800607e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006080:	f001 bd09 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006084:	4b35      	ldr	r3, [pc, #212]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800608c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006090:	d10b      	bne.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006098:	d107      	bne.n	80060aa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800609a:	f107 0314 	add.w	r3, r7, #20
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe feda 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	637b      	str	r3, [r7, #52]	; 0x34
 80060a8:	e047      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80060aa:	4b2c      	ldr	r3, [pc, #176]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060b6:	d10b      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060be:	d107      	bne.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060c0:	f107 0308 	add.w	r3, r7, #8
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff f831 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	637b      	str	r3, [r7, #52]	; 0x34
 80060ce:	e034      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80060d0:	4b22      	ldr	r3, [pc, #136]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0302 	and.w	r3, r3, #2
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d10d      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80060e2:	d109      	bne.n	80060f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80060e4:	4b1d      	ldr	r3, [pc, #116]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	08db      	lsrs	r3, r3, #3
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80060f0:	fa22 f303 	lsr.w	r3, r2, r3
 80060f4:	637b      	str	r3, [r7, #52]	; 0x34
 80060f6:	e020      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80060f8:	4b18      	ldr	r3, [pc, #96]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006104:	d106      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800610c:	d102      	bne.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800610e:	4b15      	ldr	r3, [pc, #84]	; (8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006110:	637b      	str	r3, [r7, #52]	; 0x34
 8006112:	e012      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006114:	4b11      	ldr	r3, [pc, #68]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b02      	cmp	r3, #2
 8006120:	d107      	bne.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006128:	d103      	bne.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800612a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
 8006130:	e003      	b.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006136:	f001 bcae 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800613a:	f001 bcac 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800613e:	4b07      	ldr	r3, [pc, #28]	; (800615c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006140:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006144:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8006148:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006150:	f7fc fd4c 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8006154:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8006156:	f001 bc9e 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800615a:	bf00      	nop
 800615c:	44020c00 	.word	0x44020c00
 8006160:	03d09000 	.word	0x03d09000
 8006164:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8006168:	4ba0      	ldr	r3, [pc, #640]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006174:	d10b      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800617c:	d107      	bne.n	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800617e:	f107 0314 	add.w	r3, r7, #20
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe fe68 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	637b      	str	r3, [r7, #52]	; 0x34
 800618c:	e047      	b.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800618e:	4b97      	ldr	r3, [pc, #604]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619a:	d10b      	bne.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061a2:	d107      	bne.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061a4:	f107 0308 	add.w	r3, r7, #8
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fe ffbf 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
 80061b2:	e034      	b.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80061b4:	4b8d      	ldr	r3, [pc, #564]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d10d      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80061c6:	d109      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061c8:	4b88      	ldr	r3, [pc, #544]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	08db      	lsrs	r3, r3, #3
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	4a87      	ldr	r2, [pc, #540]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80061d4:	fa22 f303 	lsr.w	r3, r2, r3
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
 80061da:	e020      	b.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80061dc:	4b83      	ldr	r3, [pc, #524]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e8:	d106      	bne.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f0:	d102      	bne.n	80061f8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80061f2:	4b80      	ldr	r3, [pc, #512]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
 80061f6:	e012      	b.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80061f8:	4b7c      	ldr	r3, [pc, #496]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80061fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b02      	cmp	r3, #2
 8006204:	d107      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800620c:	d103      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800620e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
 8006214:	e003      	b.n	800621e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8006216:	2300      	movs	r3, #0
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800621a:	f001 bc3c 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800621e:	f001 bc3a 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8006222:	4b72      	ldr	r3, [pc, #456]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006224:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006228:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800622c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006234:	f7fc fcda 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8006238:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800623a:	f001 bc2c 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800623e:	4b6b      	ldr	r3, [pc, #428]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800624a:	d10b      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006252:	d107      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006254:	f107 0314 	add.w	r3, r7, #20
 8006258:	4618      	mov	r0, r3
 800625a:	f7fe fdfd 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
 8006262:	e047      	b.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8006264:	4b61      	ldr	r3, [pc, #388]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800626c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006270:	d10b      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006278:	d107      	bne.n	800628a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800627a:	f107 0308 	add.w	r3, r7, #8
 800627e:	4618      	mov	r0, r3
 8006280:	f7fe ff54 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	637b      	str	r3, [r7, #52]	; 0x34
 8006288:	e034      	b.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800628a:	4b58      	ldr	r3, [pc, #352]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b02      	cmp	r3, #2
 8006294:	d10d      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800629c:	d109      	bne.n	80062b2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800629e:	4b53      	ldr	r3, [pc, #332]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	08db      	lsrs	r3, r3, #3
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	4a51      	ldr	r2, [pc, #324]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80062aa:	fa22 f303 	lsr.w	r3, r2, r3
 80062ae:	637b      	str	r3, [r7, #52]	; 0x34
 80062b0:	e020      	b.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80062b2:	4b4e      	ldr	r3, [pc, #312]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062be:	d106      	bne.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062c6:	d102      	bne.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80062c8:	4b4a      	ldr	r3, [pc, #296]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80062ca:	637b      	str	r3, [r7, #52]	; 0x34
 80062cc:	e012      	b.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80062ce:	4b47      	ldr	r3, [pc, #284]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80062d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d107      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80062e2:	d103      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80062e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062e8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ea:	e003      	b.n	80062f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062f0:	f001 bbd1 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80062f4:	f001 bbcf 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80062f8:	4b3c      	ldr	r3, [pc, #240]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80062fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80062fe:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006302:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	2b00      	cmp	r3, #0
 8006308:	d104      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800630a:	f7fc fc6f 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 800630e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8006310:	f001 bbc1 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8006314:	4b35      	ldr	r3, [pc, #212]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800631c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006320:	d10b      	bne.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006328:	d107      	bne.n	800633a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800632a:	f107 0314 	add.w	r3, r7, #20
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe fd92 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	637b      	str	r3, [r7, #52]	; 0x34
 8006338:	e047      	b.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800633a:	4b2c      	ldr	r3, [pc, #176]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006346:	d10b      	bne.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800634e:	d107      	bne.n	8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006350:	f107 0308 	add.w	r3, r7, #8
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe fee9 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	637b      	str	r3, [r7, #52]	; 0x34
 800635e:	e034      	b.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8006360:	4b22      	ldr	r3, [pc, #136]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	2b02      	cmp	r3, #2
 800636a:	d10d      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006372:	d109      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006374:	4b1d      	ldr	r3, [pc, #116]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	08db      	lsrs	r3, r3, #3
 800637a:	f003 0303 	and.w	r3, r3, #3
 800637e:	4a1c      	ldr	r2, [pc, #112]	; (80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006380:	fa22 f303 	lsr.w	r3, r2, r3
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
 8006386:	e020      	b.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8006388:	4b18      	ldr	r3, [pc, #96]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006394:	d106      	bne.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800639c:	d102      	bne.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800639e:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80063a0:	637b      	str	r3, [r7, #52]	; 0x34
 80063a2:	e012      	b.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80063a4:	4b11      	ldr	r3, [pc, #68]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80063a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d107      	bne.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80063b8:	d103      	bne.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80063ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063be:	637b      	str	r3, [r7, #52]	; 0x34
 80063c0:	e003      	b.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063c6:	f001 bb66 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80063ca:	f001 bb64 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80063ce:	4b07      	ldr	r3, [pc, #28]	; (80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80063d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80063d4:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80063d8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10b      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80063e0:	f7fc fc04 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 80063e4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80063e6:	f001 bb56 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80063ea:	bf00      	nop
 80063ec:	44020c00 	.word	0x44020c00
 80063f0:	03d09000 	.word	0x03d09000
 80063f4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80063f8:	4ba1      	ldr	r3, [pc, #644]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006404:	d10b      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800640c:	d107      	bne.n	800641e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800640e:	f107 0314 	add.w	r3, r7, #20
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fd20 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	637b      	str	r3, [r7, #52]	; 0x34
 800641c:	e047      	b.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800641e:	4b98      	ldr	r3, [pc, #608]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800642a:	d10b      	bne.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006432:	d107      	bne.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006434:	f107 0308 	add.w	r3, r7, #8
 8006438:	4618      	mov	r0, r3
 800643a:	f7fe fe77 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
 8006442:	e034      	b.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8006444:	4b8e      	ldr	r3, [pc, #568]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b02      	cmp	r3, #2
 800644e:	d10d      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006456:	d109      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006458:	4b89      	ldr	r3, [pc, #548]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	08db      	lsrs	r3, r3, #3
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	4a88      	ldr	r2, [pc, #544]	; (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006464:	fa22 f303 	lsr.w	r3, r2, r3
 8006468:	637b      	str	r3, [r7, #52]	; 0x34
 800646a:	e020      	b.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800646c:	4b84      	ldr	r3, [pc, #528]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006478:	d106      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006480:	d102      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8006482:	4b81      	ldr	r3, [pc, #516]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006484:	637b      	str	r3, [r7, #52]	; 0x34
 8006486:	e012      	b.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8006488:	4b7d      	ldr	r3, [pc, #500]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800648a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800648e:	f003 0302 	and.w	r3, r3, #2
 8006492:	2b02      	cmp	r3, #2
 8006494:	d107      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800649c:	d103      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800649e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a2:	637b      	str	r3, [r7, #52]	; 0x34
 80064a4:	e003      	b.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064aa:	f001 baf4 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80064ae:	f001 baf2 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80064b2:	4b73      	ldr	r3, [pc, #460]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80064b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80064b8:	f003 0307 	and.w	r3, r3, #7
 80064bc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d104      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80064c4:	f7fc fb92 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 80064c8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80064ca:	f001 bae4 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80064ce:	4b6c      	ldr	r3, [pc, #432]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064da:	d10a      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d107      	bne.n	80064f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064e2:	f107 0314 	add.w	r3, r7, #20
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fe fcb6 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	637b      	str	r3, [r7, #52]	; 0x34
 80064f0:	e043      	b.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80064f2:	4b63      	ldr	r3, [pc, #396]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064fe:	d10a      	bne.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8006500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006502:	2b02      	cmp	r3, #2
 8006504:	d107      	bne.n	8006516 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006506:	f107 0308 	add.w	r3, r7, #8
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe fe0e 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	637b      	str	r3, [r7, #52]	; 0x34
 8006514:	e031      	b.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006516:	4b5a      	ldr	r3, [pc, #360]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b02      	cmp	r3, #2
 8006520:	d10c      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	2b03      	cmp	r3, #3
 8006526:	d109      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006528:	4b55      	ldr	r3, [pc, #340]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	08db      	lsrs	r3, r3, #3
 800652e:	f003 0303 	and.w	r3, r3, #3
 8006532:	4a54      	ldr	r2, [pc, #336]	; (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006534:	fa22 f303 	lsr.w	r3, r2, r3
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
 800653a:	e01e      	b.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800653c:	4b50      	ldr	r3, [pc, #320]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006548:	d105      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800654a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654c:	2b04      	cmp	r3, #4
 800654e:	d102      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8006550:	4b4d      	ldr	r3, [pc, #308]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006552:	637b      	str	r3, [r7, #52]	; 0x34
 8006554:	e011      	b.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8006556:	4b4a      	ldr	r3, [pc, #296]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b02      	cmp	r3, #2
 8006562:	d106      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	2b05      	cmp	r3, #5
 8006568:	d103      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800656a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656e:	637b      	str	r3, [r7, #52]	; 0x34
 8006570:	e003      	b.n	800657a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006576:	f001 ba8e 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800657a:	f001 ba8c 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800657e:	4b40      	ldr	r3, [pc, #256]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006580:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006584:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006588:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	2b00      	cmp	r3, #0
 800658e:	d104      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006590:	f7fc fb2c 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8006594:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8006596:	f001 ba7e 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800659a:	4b39      	ldr	r3, [pc, #228]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065a6:	d10a      	bne.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	2b10      	cmp	r3, #16
 80065ac:	d107      	bne.n	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ae:	f107 0314 	add.w	r3, r7, #20
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe fc50 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	637b      	str	r3, [r7, #52]	; 0x34
 80065bc:	e043      	b.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80065be:	4b30      	ldr	r3, [pc, #192]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ca:	d10a      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	2b20      	cmp	r3, #32
 80065d0:	d107      	bne.n	80065e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065d2:	f107 0308 	add.w	r3, r7, #8
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe fda8 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	637b      	str	r3, [r7, #52]	; 0x34
 80065e0:	e031      	b.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80065e2:	4b27      	ldr	r3, [pc, #156]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d10c      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	2b30      	cmp	r3, #48	; 0x30
 80065f2:	d109      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065f4:	4b22      	ldr	r3, [pc, #136]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	08db      	lsrs	r3, r3, #3
 80065fa:	f003 0303 	and.w	r3, r3, #3
 80065fe:	4a21      	ldr	r2, [pc, #132]	; (8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006600:	fa22 f303 	lsr.w	r3, r2, r3
 8006604:	637b      	str	r3, [r7, #52]	; 0x34
 8006606:	e01e      	b.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006608:	4b1d      	ldr	r3, [pc, #116]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006614:	d105      	bne.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	d102      	bne.n	8006622 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800661c:	4b1a      	ldr	r3, [pc, #104]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800661e:	637b      	str	r3, [r7, #52]	; 0x34
 8006620:	e011      	b.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006622:	4b17      	ldr	r3, [pc, #92]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006624:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b02      	cmp	r3, #2
 800662e:	d106      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	2b50      	cmp	r3, #80	; 0x50
 8006634:	d103      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8006636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800663a:	637b      	str	r3, [r7, #52]	; 0x34
 800663c:	e003      	b.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006642:	f001 ba28 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006646:	f001 ba26 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800664a:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800664c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006650:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006654:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006658:	2b00      	cmp	r3, #0
 800665a:	d104      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800665c:	f7fc faf2 	bl	8002c44 <HAL_RCC_GetPCLK3Freq>
 8006660:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006662:	f001 ba18 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800666c:	d10e      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800666e:	f107 0314 	add.w	r3, r7, #20
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe fbf0 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800667c:	f001 ba0b 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006680:	44020c00 	.word	0x44020c00
 8006684:	03d09000 	.word	0x03d09000
 8006688:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006692:	d108      	bne.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006694:	f107 0308 	add.w	r3, r7, #8
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe fd47 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066a2:	f001 b9f8 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80066a6:	4ba4      	ldr	r3, [pc, #656]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d10d      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80066b8:	d109      	bne.n	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066ba:	4b9f      	ldr	r3, [pc, #636]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	08db      	lsrs	r3, r3, #3
 80066c0:	f003 0303 	and.w	r3, r3, #3
 80066c4:	4a9d      	ldr	r2, [pc, #628]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80066c6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ca:	637b      	str	r3, [r7, #52]	; 0x34
 80066cc:	e020      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80066ce:	4b9a      	ldr	r3, [pc, #616]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066da:	d106      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066e2:	d102      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80066e4:	4b96      	ldr	r3, [pc, #600]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80066e6:	637b      	str	r3, [r7, #52]	; 0x34
 80066e8:	e012      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80066ea:	4b93      	ldr	r3, [pc, #588]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80066ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d107      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80066fe:	d103      	bne.n	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8006700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006704:	637b      	str	r3, [r7, #52]	; 0x34
 8006706:	e003      	b.n	8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800670c:	f001 b9c3 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006710:	f001 b9c1 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006714:	4b88      	ldr	r3, [pc, #544]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006716:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800671a:	f003 0307 	and.w	r3, r3, #7
 800671e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006722:	2b00      	cmp	r3, #0
 8006724:	d104      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006726:	f7fc fa45 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 800672a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800672c:	f001 b9b3 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	2b01      	cmp	r3, #1
 8006734:	d104      	bne.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006736:	f7fc f911 	bl	800295c <HAL_RCC_GetSysClockFreq>
 800673a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800673c:	f001 b9ab 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	2b02      	cmp	r3, #2
 8006744:	d108      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006746:	f107 0314 	add.w	r3, r7, #20
 800674a:	4618      	mov	r0, r3
 800674c:	f7fe fb84 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006754:	f001 b99f 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006758:	4b77      	ldr	r3, [pc, #476]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006764:	d105      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	2b03      	cmp	r3, #3
 800676a:	d102      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800676c:	4b75      	ldr	r3, [pc, #468]	; (8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800676e:	637b      	str	r3, [r7, #52]	; 0x34
 8006770:	e023      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006772:	4b71      	ldr	r3, [pc, #452]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b02      	cmp	r3, #2
 800677c:	d10c      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	2b04      	cmp	r3, #4
 8006782:	d109      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006784:	4b6c      	ldr	r3, [pc, #432]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	08db      	lsrs	r3, r3, #3
 800678a:	f003 0303 	and.w	r3, r3, #3
 800678e:	4a6b      	ldr	r2, [pc, #428]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006790:	fa22 f303 	lsr.w	r3, r2, r3
 8006794:	637b      	str	r3, [r7, #52]	; 0x34
 8006796:	e010      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006798:	4b67      	ldr	r3, [pc, #412]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a4:	d105      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	2b05      	cmp	r3, #5
 80067aa:	d102      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 80067ac:	4b64      	ldr	r3, [pc, #400]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80067ae:	637b      	str	r3, [r7, #52]	; 0x34
 80067b0:	e003      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067b6:	f001 b96e 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80067ba:	f001 b96c 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80067be:	4b5e      	ldr	r3, [pc, #376]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80067c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80067ca:	4b5b      	ldr	r3, [pc, #364]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80067cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d106      	bne.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d103      	bne.n	80067e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80067de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e2:	637b      	str	r3, [r7, #52]	; 0x34
 80067e4:	e012      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80067e6:	4b54      	ldr	r3, [pc, #336]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80067e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067f4:	d106      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d103      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80067fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
 8006802:	e003      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006808:	f001 b945 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800680c:	f001 b943 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006810:	4b49      	ldr	r3, [pc, #292]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006812:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006816:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800681a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	2b00      	cmp	r3, #0
 8006820:	d104      	bne.n	800682c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006822:	f7fc f9e3 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8006826:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006828:	f001 b935 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006832:	d108      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006834:	f107 0308 	add.w	r3, r7, #8
 8006838:	4618      	mov	r0, r3
 800683a:	f7fe fc77 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006842:	f001 b928 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006846:	4b3c      	ldr	r3, [pc, #240]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b02      	cmp	r3, #2
 8006850:	d10d      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006858:	d109      	bne.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800685a:	4b37      	ldr	r3, [pc, #220]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	08db      	lsrs	r3, r3, #3
 8006860:	f003 0303 	and.w	r3, r3, #3
 8006864:	4a35      	ldr	r2, [pc, #212]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006866:	fa22 f303 	lsr.w	r3, r2, r3
 800686a:	637b      	str	r3, [r7, #52]	; 0x34
 800686c:	e011      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800686e:	4b32      	ldr	r3, [pc, #200]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687a:	d106      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006882:	d102      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006884:	4b2e      	ldr	r3, [pc, #184]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
 8006888:	e003      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800688e:	f001 b902 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006892:	f001 b900 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006896:	4b28      	ldr	r3, [pc, #160]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006898:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800689c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80068a0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d104      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068a8:	f7fc f9a0 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 80068ac:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80068ae:	f001 b8f2 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80068b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068b8:	d108      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068ba:	f107 0308 	add.w	r3, r7, #8
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fe fc34 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068c8:	f001 b8e5 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80068cc:	4b1a      	ldr	r3, [pc, #104]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d10d      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80068de:	d109      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068e0:	4b15      	ldr	r3, [pc, #84]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	08db      	lsrs	r3, r3, #3
 80068e6:	f003 0303 	and.w	r3, r3, #3
 80068ea:	4a14      	ldr	r2, [pc, #80]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
 80068f2:	e011      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80068f4:	4b10      	ldr	r3, [pc, #64]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006900:	d106      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006908:	d102      	bne.n	8006910 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800690a:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
 800690e:	e003      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006914:	f001 b8bf 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006918:	f001 b8bd 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800691c:	4b06      	ldr	r3, [pc, #24]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800691e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006922:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006926:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10c      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800692e:	f7fc f989 	bl	8002c44 <HAL_RCC_GetPCLK3Freq>
 8006932:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006934:	f001 b8af 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006938:	44020c00 	.word	0x44020c00
 800693c:	03d09000 	.word	0x03d09000
 8006940:	003d0900 	.word	0x003d0900
 8006944:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800694e:	d108      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006950:	f107 0308 	add.w	r3, r7, #8
 8006954:	4618      	mov	r0, r3
 8006956:	f7fe fbe9 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800695e:	f001 b89a 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006962:	4b9f      	ldr	r3, [pc, #636]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b02      	cmp	r3, #2
 800696c:	d10d      	bne.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006974:	d109      	bne.n	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006976:	4b9a      	ldr	r3, [pc, #616]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	08db      	lsrs	r3, r3, #3
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	4a98      	ldr	r2, [pc, #608]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006982:	fa22 f303 	lsr.w	r3, r2, r3
 8006986:	637b      	str	r3, [r7, #52]	; 0x34
 8006988:	e011      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800698a:	4b95      	ldr	r3, [pc, #596]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006996:	d106      	bne.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800699e:	d102      	bne.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80069a0:	4b91      	ldr	r3, [pc, #580]	; (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80069a2:	637b      	str	r3, [r7, #52]	; 0x34
 80069a4:	e003      	b.n	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069aa:	f001 b874 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069ae:	f001 b872 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80069b2:	4b8b      	ldr	r3, [pc, #556]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80069b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80069b8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80069bc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80069c4:	f7fc f93e 	bl	8002c44 <HAL_RCC_GetPCLK3Freq>
 80069c8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80069ca:	f001 b864 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069d4:	d108      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069d6:	f107 0308 	add.w	r3, r7, #8
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fe fba6 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069e4:	f001 b857 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80069e8:	4b7d      	ldr	r3, [pc, #500]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d10d      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80069fa:	d109      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069fc:	4b78      	ldr	r3, [pc, #480]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	08db      	lsrs	r3, r3, #3
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	4a77      	ldr	r2, [pc, #476]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006a08:	fa22 f303 	lsr.w	r3, r2, r3
 8006a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a0e:	e011      	b.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006a10:	4b73      	ldr	r3, [pc, #460]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a1c:	d106      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a24:	d102      	bne.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006a26:	4b70      	ldr	r3, [pc, #448]	; (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34
 8006a2a:	e003      	b.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a30:	f001 b831 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a34:	f001 b82f 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006a38:	4b69      	ldr	r3, [pc, #420]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a3e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006a42:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d104      	bne.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a4a:	f7fc f8cf 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8006a4e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a50:	f001 b821 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a5a:	d108      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a5c:	f107 0308 	add.w	r3, r7, #8
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fe fb63 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a6a:	f001 b814 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006a6e:	4b5c      	ldr	r3, [pc, #368]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d10e      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a80:	d10a      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a82:	4b57      	ldr	r3, [pc, #348]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	08db      	lsrs	r3, r3, #3
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	4a55      	ldr	r2, [pc, #340]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a94:	f000 bfff 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a9c:	f000 bffb 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006aa0:	4b4f      	ldr	r3, [pc, #316]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006aa2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006aaa:	633b      	str	r3, [r7, #48]	; 0x30
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006ab2:	d056      	beq.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8006ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006aba:	f200 808b 	bhi.w	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac4:	d03e      	beq.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006acc:	f200 8082 	bhi.w	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ad6:	d027      	beq.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ade:	d879      	bhi.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae6:	d017      	beq.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aee:	d871      	bhi.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d004      	beq.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006afc:	d004      	beq.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8006afe:	e069      	b.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006b00:	f7fc f8a0 	bl	8002c44 <HAL_RCC_GetPCLK3Freq>
 8006b04:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006b06:	e068      	b.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b08:	f107 0314 	add.w	r3, r7, #20
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fe f9a3 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b16:	e060      	b.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b18:	f107 0308 	add.w	r3, r7, #8
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe fb05 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b26:	e058      	b.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b28:	4b2d      	ldr	r3, [pc, #180]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006b2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d103      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8006b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b3a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b3c:	e04d      	b.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b42:	e04a      	b.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006b44:	4b26      	ldr	r3, [pc, #152]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b52:	d103      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8006b54:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b5a:	e03e      	b.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b60:	e03b      	b.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b62:	4b1f      	ldr	r3, [pc, #124]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b68:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006b6c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b6e:	4b1c      	ldr	r3, [pc, #112]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d10c      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d109      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b80:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	08db      	lsrs	r3, r3, #3
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	4a16      	ldr	r2, [pc, #88]	; (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
 8006b92:	e01e      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b94:	4b12      	ldr	r3, [pc, #72]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ba0:	d106      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ba8:	d102      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006baa:	4b0f      	ldr	r3, [pc, #60]	; (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006bac:	637b      	str	r3, [r7, #52]	; 0x34
 8006bae:	e010      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006bb0:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bbc:	d106      	bne.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bc4:	d102      	bne.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006bc6:	4b09      	ldr	r3, [pc, #36]	; (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8006bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bca:	e002      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006bd0:	e003      	b.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8006bd2:	e002      	b.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006bd8:	bf00      	nop
          }
        }
        break;
 8006bda:	f000 bf5c 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006bde:	bf00      	nop
 8006be0:	44020c00 	.word	0x44020c00
 8006be4:	03d09000 	.word	0x03d09000
 8006be8:	003d0900 	.word	0x003d0900
 8006bec:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006bf0:	4b9e      	ldr	r3, [pc, #632]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006bf2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006bf6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006bfa:	633b      	str	r3, [r7, #48]	; 0x30
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006c02:	d056      	beq.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006c0a:	f200 808b 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c14:	d03e      	beq.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c1c:	f200 8082 	bhi.w	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c26:	d027      	beq.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c2e:	d879      	bhi.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c36:	d017      	beq.n	8006c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c3e:	d871      	bhi.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d004      	beq.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c4c:	d004      	beq.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8006c4e:	e069      	b.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006c50:	f7fb ffcc 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8006c54:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006c56:	e068      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c58:	f107 0314 	add.w	r3, r7, #20
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe f8fb 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c66:	e060      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c68:	f107 0308 	add.w	r3, r7, #8
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7fe fa5d 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c76:	e058      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c78:	4b7c      	ldr	r3, [pc, #496]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d103      	bne.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8006c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c8a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006c8c:	e04d      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c92:	e04a      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006c94:	4b75      	ldr	r3, [pc, #468]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ca2:	d103      	bne.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8006ca4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ca8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006caa:	e03e      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006cac:	2300      	movs	r3, #0
 8006cae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006cb0:	e03b      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006cb2:	4b6e      	ldr	r3, [pc, #440]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cb8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006cbe:	4b6b      	ldr	r3, [pc, #428]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d10c      	bne.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8006cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d109      	bne.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cd0:	4b66      	ldr	r3, [pc, #408]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	08db      	lsrs	r3, r3, #3
 8006cd6:	f003 0303 	and.w	r3, r3, #3
 8006cda:	4a65      	ldr	r2, [pc, #404]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce2:	e01e      	b.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ce4:	4b61      	ldr	r3, [pc, #388]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf0:	d106      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8006cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf8:	d102      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006cfa:	4b5e      	ldr	r3, [pc, #376]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8006cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cfe:	e010      	b.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d00:	4b5a      	ldr	r3, [pc, #360]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d0c:	d106      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d14:	d102      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006d16:	4b58      	ldr	r3, [pc, #352]	; (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006d18:	637b      	str	r3, [r7, #52]	; 0x34
 8006d1a:	e002      	b.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006d20:	e003      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8006d22:	e002      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d28:	bf00      	nop
          }
        }
        break;
 8006d2a:	f000 beb4 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8006d2e:	4b4f      	ldr	r3, [pc, #316]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006d30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006d34:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006d38:	633b      	str	r3, [r7, #48]	; 0x30
 8006d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d40:	d056      	beq.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d48:	f200 808b 	bhi.w	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d52:	d03e      	beq.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d5a:	f200 8082 	bhi.w	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d64:	d027      	beq.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8006d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d6c:	d879      	bhi.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d74:	d017      	beq.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d7c:	d871      	bhi.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d004      	beq.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8006d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d8a:	d004      	beq.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8006d8c:	e069      	b.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006d8e:	f7fb ff59 	bl	8002c44 <HAL_RCC_GetPCLK3Freq>
 8006d92:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006d94:	e068      	b.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d96:	f107 0314 	add.w	r3, r7, #20
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe f85c 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006da4:	e060      	b.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006da6:	f107 0308 	add.w	r3, r7, #8
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe f9be 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006db4:	e058      	b.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006db6:	4b2d      	ldr	r3, [pc, #180]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dbc:	f003 0302 	and.w	r3, r3, #2
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d103      	bne.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8006dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dc8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006dca:	e04d      	b.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006dd0:	e04a      	b.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006dd2:	4b26      	ldr	r3, [pc, #152]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006dd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006de0:	d103      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8006de2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006de6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006de8:	e03e      	b.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006dee:	e03b      	b.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006df0:	4b1e      	ldr	r3, [pc, #120]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006df2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006df6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006dfa:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dfc:	4b1b      	ldr	r3, [pc, #108]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d10c      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e0e:	4b17      	ldr	r3, [pc, #92]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	08db      	lsrs	r3, r3, #3
 8006e14:	f003 0303 	and.w	r3, r3, #3
 8006e18:	4a15      	ldr	r2, [pc, #84]	; (8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e20:	e01e      	b.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e22:	4b12      	ldr	r3, [pc, #72]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e2e:	d106      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e36:	d102      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e38:	4b0e      	ldr	r3, [pc, #56]	; (8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8006e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e3c:	e010      	b.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e3e:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e4a:	d106      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8006e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e52:	d102      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006e54:	4b08      	ldr	r3, [pc, #32]	; (8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006e56:	637b      	str	r3, [r7, #52]	; 0x34
 8006e58:	e002      	b.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006e5e:	e003      	b.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8006e60:	e002      	b.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e66:	bf00      	nop
          }
        }
        break;
 8006e68:	f000 be15 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e6c:	44020c00 	.word	0x44020c00
 8006e70:	03d09000 	.word	0x03d09000
 8006e74:	003d0900 	.word	0x003d0900
 8006e78:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8006e7c:	4b9e      	ldr	r3, [pc, #632]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006e7e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006e82:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8006e86:	633b      	str	r3, [r7, #48]	; 0x30
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006e8e:	d056      	beq.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006e96:	f200 808b 	bhi.w	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ea0:	d03e      	beq.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ea8:	f200 8082 	bhi.w	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eb2:	d027      	beq.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eba:	d879      	bhi.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ec2:	d017      	beq.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eca:	d871      	bhi.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d004      	beq.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ed8:	d004      	beq.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8006eda:	e069      	b.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006edc:	f7fb feb2 	bl	8002c44 <HAL_RCC_GetPCLK3Freq>
 8006ee0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006ee2:	e068      	b.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ee4:	f107 0314 	add.w	r3, r7, #20
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fd ffb5 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ef2:	e060      	b.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ef4:	f107 0308 	add.w	r3, r7, #8
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fe f917 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f02:	e058      	b.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f04:	4b7c      	ldr	r3, [pc, #496]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d103      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8006f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f16:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f18:	e04d      	b.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f1e:	e04a      	b.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006f20:	4b75      	ldr	r3, [pc, #468]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f2e:	d103      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8006f30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006f34:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f36:	e03e      	b.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f3c:	e03b      	b.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f3e:	4b6e      	ldr	r3, [pc, #440]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f44:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006f48:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f4a:	4b6b      	ldr	r3, [pc, #428]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d10c      	bne.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8006f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d109      	bne.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f5c:	4b66      	ldr	r3, [pc, #408]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	08db      	lsrs	r3, r3, #3
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	4a65      	ldr	r2, [pc, #404]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006f68:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f6e:	e01e      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f70:	4b61      	ldr	r3, [pc, #388]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f7c:	d106      	bne.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8006f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f84:	d102      	bne.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f86:	4b5e      	ldr	r3, [pc, #376]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006f88:	637b      	str	r3, [r7, #52]	; 0x34
 8006f8a:	e010      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f8c:	4b5a      	ldr	r3, [pc, #360]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f98:	d106      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fa0:	d102      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006fa2:	4b58      	ldr	r3, [pc, #352]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fa6:	e002      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006fac:	e003      	b.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8006fae:	e002      	b.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fb4:	bf00      	nop
          }
        }
        break;
 8006fb6:	f000 bd6e 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8006fba:	4b4f      	ldr	r3, [pc, #316]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006fbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006fc0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006fcc:	d056      	beq.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006fd4:	f200 808b 	bhi.w	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fde:	d03e      	beq.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fe6:	f200 8082 	bhi.w	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ff0:	d027      	beq.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ff8:	d879      	bhi.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007000:	d017      	beq.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007008:	d871      	bhi.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	2b00      	cmp	r3, #0
 800700e:	d004      	beq.n	800701a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007016:	d004      	beq.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8007018:	e069      	b.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800701a:	f7fb fe13 	bl	8002c44 <HAL_RCC_GetPCLK3Freq>
 800701e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007020:	e068      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007022:	f107 0314 	add.w	r3, r7, #20
 8007026:	4618      	mov	r0, r3
 8007028:	f7fd ff16 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007030:	e060      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007032:	f107 0308 	add.w	r3, r7, #8
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe f878 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007040:	e058      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007042:	4b2d      	ldr	r3, [pc, #180]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b02      	cmp	r3, #2
 800704e:	d103      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8007050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007054:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007056:	e04d      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800705c:	e04a      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800705e:	4b26      	ldr	r3, [pc, #152]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800706c:	d103      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800706e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007072:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007074:	e03e      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800707a:	e03b      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800707c:	4b1e      	ldr	r3, [pc, #120]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800707e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007082:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007086:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007088:	4b1b      	ldr	r3, [pc, #108]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b02      	cmp	r3, #2
 8007092:	d10c      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8007094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d109      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800709a:	4b17      	ldr	r3, [pc, #92]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	08db      	lsrs	r3, r3, #3
 80070a0:	f003 0303 	and.w	r3, r3, #3
 80070a4:	4a15      	ldr	r2, [pc, #84]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80070a6:	fa22 f303 	lsr.w	r3, r2, r3
 80070aa:	637b      	str	r3, [r7, #52]	; 0x34
 80070ac:	e01e      	b.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070ae:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ba:	d106      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80070bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c2:	d102      	bne.n	80070ca <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80070c4:	4b0e      	ldr	r3, [pc, #56]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80070c6:	637b      	str	r3, [r7, #52]	; 0x34
 80070c8:	e010      	b.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070ca:	4b0b      	ldr	r3, [pc, #44]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070d6:	d106      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80070d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070de:	d102      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80070e0:	4b08      	ldr	r3, [pc, #32]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80070e2:	637b      	str	r3, [r7, #52]	; 0x34
 80070e4:	e002      	b.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80070ea:	e003      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80070ec:	e002      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80070ee:	2300      	movs	r3, #0
 80070f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070f2:	bf00      	nop
          }
        }
        break;
 80070f4:	f000 bccf 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80070f8:	44020c00 	.word	0x44020c00
 80070fc:	03d09000 	.word	0x03d09000
 8007100:	003d0900 	.word	0x003d0900
 8007104:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007108:	4b9e      	ldr	r3, [pc, #632]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800710a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800710e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007112:	633b      	str	r3, [r7, #48]	; 0x30
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800711a:	d056      	beq.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007122:	f200 808b 	bhi.w	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800712c:	d03e      	beq.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007134:	f200 8082 	bhi.w	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800713e:	d027      	beq.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007146:	d879      	bhi.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800714e:	d017      	beq.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007156:	d871      	bhi.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	2b00      	cmp	r3, #0
 800715c:	d004      	beq.n	8007168 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007160:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007164:	d004      	beq.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8007166:	e069      	b.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007168:	f7fb fd6c 	bl	8002c44 <HAL_RCC_GetPCLK3Freq>
 800716c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800716e:	e068      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007170:	f107 0314 	add.w	r3, r7, #20
 8007174:	4618      	mov	r0, r3
 8007176:	f7fd fe6f 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800717e:	e060      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007180:	f107 0308 	add.w	r3, r7, #8
 8007184:	4618      	mov	r0, r3
 8007186:	f7fd ffd1 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800718e:	e058      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007190:	4b7c      	ldr	r3, [pc, #496]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b02      	cmp	r3, #2
 800719c:	d103      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800719e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071a2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80071a4:	e04d      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071aa:	e04a      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80071ac:	4b75      	ldr	r3, [pc, #468]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80071ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071ba:	d103      	bne.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80071bc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80071c2:	e03e      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071c8:	e03b      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071ca:	4b6e      	ldr	r3, [pc, #440]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80071cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071d0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80071d4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071d6:	4b6b      	ldr	r3, [pc, #428]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d10c      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80071e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d109      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071e8:	4b66      	ldr	r3, [pc, #408]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	08db      	lsrs	r3, r3, #3
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	4a65      	ldr	r2, [pc, #404]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80071f4:	fa22 f303 	lsr.w	r3, r2, r3
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
 80071fa:	e01e      	b.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071fc:	4b61      	ldr	r3, [pc, #388]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007204:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007208:	d106      	bne.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007210:	d102      	bne.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007212:	4b5e      	ldr	r3, [pc, #376]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
 8007216:	e010      	b.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007218:	4b5a      	ldr	r3, [pc, #360]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007220:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007224:	d106      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800722c:	d102      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800722e:	4b58      	ldr	r3, [pc, #352]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007230:	637b      	str	r3, [r7, #52]	; 0x34
 8007232:	e002      	b.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007234:	2300      	movs	r3, #0
 8007236:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007238:	e003      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800723a:	e002      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007240:	bf00      	nop
          }
        }
        break;
 8007242:	f000 bc28 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007246:	4b4f      	ldr	r3, [pc, #316]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800724c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007250:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007252:	4b4c      	ldr	r3, [pc, #304]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800725a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800725e:	d106      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8007260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007262:	2b00      	cmp	r3, #0
 8007264:	d103      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8007266:	4b4a      	ldr	r3, [pc, #296]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007268:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800726a:	f000 bc14 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800726e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007274:	d108      	bne.n	8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007276:	f107 0320 	add.w	r3, r7, #32
 800727a:	4618      	mov	r0, r3
 800727c:	f7fd fc82 	bl	8004b84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007284:	f000 bc07 	b.w	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800728e:	d107      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007290:	f107 0314 	add.w	r3, r7, #20
 8007294:	4618      	mov	r0, r3
 8007296:	f7fd fddf 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800729e:	e3fa      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072a4:	e3f7      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80072a6:	4b37      	ldr	r3, [pc, #220]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80072a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	633b      	str	r3, [r7, #48]	; 0x30
 80072b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d861      	bhi.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80072b8:	a201      	add	r2, pc, #4	; (adr r2, 80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80072ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072be:	bf00      	nop
 80072c0:	080072d5 	.word	0x080072d5
 80072c4:	080072e5 	.word	0x080072e5
 80072c8:	080072f5 	.word	0x080072f5
 80072cc:	08007305 	.word	0x08007305
 80072d0:	0800730b 	.word	0x0800730b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072d4:	f107 0320 	add.w	r3, r7, #32
 80072d8:	4618      	mov	r0, r3
 80072da:	f7fd fc53 	bl	8004b84 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072e2:	e04e      	b.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072e4:	f107 0314 	add.w	r3, r7, #20
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fd fdb5 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072f2:	e046      	b.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072f4:	f107 0308 	add.w	r3, r7, #8
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fd ff17 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007302:	e03e      	b.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007304:	4b23      	ldr	r3, [pc, #140]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8007306:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007308:	e03b      	b.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800730a:	4b1e      	ldr	r3, [pc, #120]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800730c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007310:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007314:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007316:	4b1b      	ldr	r3, [pc, #108]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	2b02      	cmp	r3, #2
 8007320:	d10c      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8007322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007324:	2b00      	cmp	r3, #0
 8007326:	d109      	bne.n	800733c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007328:	4b16      	ldr	r3, [pc, #88]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	08db      	lsrs	r3, r3, #3
 800732e:	f003 0303 	and.w	r3, r3, #3
 8007332:	4a15      	ldr	r2, [pc, #84]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8007334:	fa22 f303 	lsr.w	r3, r2, r3
 8007338:	637b      	str	r3, [r7, #52]	; 0x34
 800733a:	e01e      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800733c:	4b11      	ldr	r3, [pc, #68]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007348:	d106      	bne.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007350:	d102      	bne.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007352:	4b0e      	ldr	r3, [pc, #56]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007354:	637b      	str	r3, [r7, #52]	; 0x34
 8007356:	e010      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007358:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007364:	d106      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800736c:	d102      	bne.n	8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800736e:	4b08      	ldr	r3, [pc, #32]	; (8007390 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007370:	637b      	str	r3, [r7, #52]	; 0x34
 8007372:	e002      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007374:	2300      	movs	r3, #0
 8007376:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007378:	e003      	b.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800737a:	e002      	b.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800737c:	2300      	movs	r3, #0
 800737e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007380:	bf00      	nop
          }
        }
        break;
 8007382:	e388      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007384:	44020c00 	.word	0x44020c00
 8007388:	03d09000 	.word	0x03d09000
 800738c:	003d0900 	.word	0x003d0900
 8007390:	017d7840 	.word	0x017d7840
 8007394:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007398:	4ba9      	ldr	r3, [pc, #676]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800739a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800739e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073a2:	633b      	str	r3, [r7, #48]	; 0x30
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	2b20      	cmp	r3, #32
 80073a8:	f200 809a 	bhi.w	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80073ac:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	08007439 	.word	0x08007439
 80073b8:	080074e1 	.word	0x080074e1
 80073bc:	080074e1 	.word	0x080074e1
 80073c0:	080074e1 	.word	0x080074e1
 80073c4:	080074e1 	.word	0x080074e1
 80073c8:	080074e1 	.word	0x080074e1
 80073cc:	080074e1 	.word	0x080074e1
 80073d0:	080074e1 	.word	0x080074e1
 80073d4:	08007449 	.word	0x08007449
 80073d8:	080074e1 	.word	0x080074e1
 80073dc:	080074e1 	.word	0x080074e1
 80073e0:	080074e1 	.word	0x080074e1
 80073e4:	080074e1 	.word	0x080074e1
 80073e8:	080074e1 	.word	0x080074e1
 80073ec:	080074e1 	.word	0x080074e1
 80073f0:	080074e1 	.word	0x080074e1
 80073f4:	08007459 	.word	0x08007459
 80073f8:	080074e1 	.word	0x080074e1
 80073fc:	080074e1 	.word	0x080074e1
 8007400:	080074e1 	.word	0x080074e1
 8007404:	080074e1 	.word	0x080074e1
 8007408:	080074e1 	.word	0x080074e1
 800740c:	080074e1 	.word	0x080074e1
 8007410:	080074e1 	.word	0x080074e1
 8007414:	08007469 	.word	0x08007469
 8007418:	080074e1 	.word	0x080074e1
 800741c:	080074e1 	.word	0x080074e1
 8007420:	080074e1 	.word	0x080074e1
 8007424:	080074e1 	.word	0x080074e1
 8007428:	080074e1 	.word	0x080074e1
 800742c:	080074e1 	.word	0x080074e1
 8007430:	080074e1 	.word	0x080074e1
 8007434:	0800746f 	.word	0x0800746f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007438:	f107 0320 	add.w	r3, r7, #32
 800743c:	4618      	mov	r0, r3
 800743e:	f7fd fba1 	bl	8004b84 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007446:	e04e      	b.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007448:	f107 0314 	add.w	r3, r7, #20
 800744c:	4618      	mov	r0, r3
 800744e:	f7fd fd03 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007456:	e046      	b.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007458:	f107 0308 	add.w	r3, r7, #8
 800745c:	4618      	mov	r0, r3
 800745e:	f7fd fe65 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007466:	e03e      	b.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007468:	4b76      	ldr	r3, [pc, #472]	; (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800746a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800746c:	e03b      	b.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800746e:	4b74      	ldr	r3, [pc, #464]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007474:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007478:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800747a:	4b71      	ldr	r3, [pc, #452]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b02      	cmp	r3, #2
 8007484:	d10c      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8007486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007488:	2b00      	cmp	r3, #0
 800748a:	d109      	bne.n	80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800748c:	4b6c      	ldr	r3, [pc, #432]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	08db      	lsrs	r3, r3, #3
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	4a6c      	ldr	r2, [pc, #432]	; (8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007498:	fa22 f303 	lsr.w	r3, r2, r3
 800749c:	637b      	str	r3, [r7, #52]	; 0x34
 800749e:	e01e      	b.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074a0:	4b67      	ldr	r3, [pc, #412]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ac:	d106      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b4:	d102      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80074b6:	4b65      	ldr	r3, [pc, #404]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80074b8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ba:	e010      	b.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074bc:	4b60      	ldr	r3, [pc, #384]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074c8:	d106      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80074ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d0:	d102      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80074d2:	4b5f      	ldr	r3, [pc, #380]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
 80074d6:	e002      	b.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80074d8:	2300      	movs	r3, #0
 80074da:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80074dc:	e003      	b.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80074de:	e002      	b.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074e4:	bf00      	nop
          }
        }
        break;
 80074e6:	e2d6      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80074e8:	4b55      	ldr	r3, [pc, #340]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80074ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074ee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80074f2:	633b      	str	r3, [r7, #48]	; 0x30
 80074f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074fa:	d031      	beq.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007502:	d866      	bhi.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	2bc0      	cmp	r3, #192	; 0xc0
 8007508:	d027      	beq.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	2bc0      	cmp	r3, #192	; 0xc0
 800750e:	d860      	bhi.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	2b80      	cmp	r3, #128	; 0x80
 8007514:	d019      	beq.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8007516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007518:	2b80      	cmp	r3, #128	; 0x80
 800751a:	d85a      	bhi.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007524:	2b40      	cmp	r3, #64	; 0x40
 8007526:	d008      	beq.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007528:	e053      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800752a:	f107 0320 	add.w	r3, r7, #32
 800752e:	4618      	mov	r0, r3
 8007530:	f7fd fb28 	bl	8004b84 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007538:	e04e      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800753a:	f107 0314 	add.w	r3, r7, #20
 800753e:	4618      	mov	r0, r3
 8007540:	f7fd fc8a 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007548:	e046      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800754a:	f107 0308 	add.w	r3, r7, #8
 800754e:	4618      	mov	r0, r3
 8007550:	f7fd fdec 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007558:	e03e      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800755a:	4b3a      	ldr	r3, [pc, #232]	; (8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800755c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800755e:	e03b      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007560:	4b37      	ldr	r3, [pc, #220]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007566:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800756a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800756c:	4b34      	ldr	r3, [pc, #208]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b02      	cmp	r3, #2
 8007576:	d10c      	bne.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8007578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757a:	2b00      	cmp	r3, #0
 800757c:	d109      	bne.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800757e:	4b30      	ldr	r3, [pc, #192]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	08db      	lsrs	r3, r3, #3
 8007584:	f003 0303 	and.w	r3, r3, #3
 8007588:	4a2f      	ldr	r2, [pc, #188]	; (8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800758a:	fa22 f303 	lsr.w	r3, r2, r3
 800758e:	637b      	str	r3, [r7, #52]	; 0x34
 8007590:	e01e      	b.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007592:	4b2b      	ldr	r3, [pc, #172]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800759a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800759e:	d106      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 80075a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a6:	d102      	bne.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80075a8:	4b28      	ldr	r3, [pc, #160]	; (800764c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80075aa:	637b      	str	r3, [r7, #52]	; 0x34
 80075ac:	e010      	b.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075ae:	4b24      	ldr	r3, [pc, #144]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075ba:	d106      	bne.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80075bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075c2:	d102      	bne.n	80075ca <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80075c4:	4b22      	ldr	r3, [pc, #136]	; (8007650 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80075c6:	637b      	str	r3, [r7, #52]	; 0x34
 80075c8:	e002      	b.n	80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80075ca:	2300      	movs	r3, #0
 80075cc:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80075ce:	e003      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80075d0:	e002      	b.n	80075d8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075d6:	bf00      	nop
          }
        }
        break;
 80075d8:	e25d      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80075da:	4b19      	ldr	r3, [pc, #100]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80075dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075e0:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80075e4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d103      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80075ec:	f7fb fb14 	bl	8002c18 <HAL_RCC_GetPCLK2Freq>
 80075f0:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80075f2:	e250      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80075f4:	4b12      	ldr	r3, [pc, #72]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007600:	d10b      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007608:	d107      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800760a:	f107 0314 	add.w	r3, r7, #20
 800760e:	4618      	mov	r0, r3
 8007610:	f7fd fc22 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	637b      	str	r3, [r7, #52]	; 0x34
 8007618:	e04f      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800761a:	4b09      	ldr	r3, [pc, #36]	; (8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007626:	d115      	bne.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800762e:	d111      	bne.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007630:	f107 0308 	add.w	r3, r7, #8
 8007634:	4618      	mov	r0, r3
 8007636:	f7fd fd79 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	637b      	str	r3, [r7, #52]	; 0x34
 800763e:	e03c      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007640:	44020c00 	.word	0x44020c00
 8007644:	00bb8000 	.word	0x00bb8000
 8007648:	03d09000 	.word	0x03d09000
 800764c:	003d0900 	.word	0x003d0900
 8007650:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007654:	4b94      	ldr	r3, [pc, #592]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b02      	cmp	r3, #2
 800765e:	d10d      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007666:	d109      	bne.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007668:	4b8f      	ldr	r3, [pc, #572]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	08db      	lsrs	r3, r3, #3
 800766e:	f003 0303 	and.w	r3, r3, #3
 8007672:	4a8e      	ldr	r2, [pc, #568]	; (80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007674:	fa22 f303 	lsr.w	r3, r2, r3
 8007678:	637b      	str	r3, [r7, #52]	; 0x34
 800767a:	e01e      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800767c:	4b8a      	ldr	r3, [pc, #552]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007688:	d106      	bne.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007690:	d102      	bne.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8007692:	4b87      	ldr	r3, [pc, #540]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
 8007696:	e010      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007698:	4b83      	ldr	r3, [pc, #524]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076a4:	d106      	bne.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80076ac:	d102      	bne.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 80076ae:	4b81      	ldr	r3, [pc, #516]	; (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80076b0:	637b      	str	r3, [r7, #52]	; 0x34
 80076b2:	e002      	b.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076b8:	e1ed      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076ba:	e1ec      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80076bc:	4b7a      	ldr	r3, [pc, #488]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80076be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076c2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80076c6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80076c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d103      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80076ce:	f7fb fab9 	bl	8002c44 <HAL_RCC_GetPCLK3Freq>
 80076d2:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80076d4:	e1df      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80076d6:	4b74      	ldr	r3, [pc, #464]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076e2:	d10b      	bne.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ea:	d107      	bne.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076ec:	f107 0314 	add.w	r3, r7, #20
 80076f0:	4618      	mov	r0, r3
 80076f2:	f7fd fbb1 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	637b      	str	r3, [r7, #52]	; 0x34
 80076fa:	e045      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80076fc:	4b6a      	ldr	r3, [pc, #424]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007708:	d10b      	bne.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007710:	d107      	bne.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007712:	f107 0308 	add.w	r3, r7, #8
 8007716:	4618      	mov	r0, r3
 8007718:	f7fd fd08 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	637b      	str	r3, [r7, #52]	; 0x34
 8007720:	e032      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007722:	4b61      	ldr	r3, [pc, #388]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b02      	cmp	r3, #2
 800772c:	d10d      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007734:	d109      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007736:	4b5c      	ldr	r3, [pc, #368]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	08db      	lsrs	r3, r3, #3
 800773c:	f003 0303 	and.w	r3, r3, #3
 8007740:	4a5a      	ldr	r2, [pc, #360]	; (80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007742:	fa22 f303 	lsr.w	r3, r2, r3
 8007746:	637b      	str	r3, [r7, #52]	; 0x34
 8007748:	e01e      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800774a:	4b57      	ldr	r3, [pc, #348]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007756:	d106      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800775e:	d102      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007760:	4b53      	ldr	r3, [pc, #332]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007762:	637b      	str	r3, [r7, #52]	; 0x34
 8007764:	e010      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007766:	4b50      	ldr	r3, [pc, #320]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007772:	d106      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800777a:	d102      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800777c:	4b4d      	ldr	r3, [pc, #308]	; (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
 8007780:	e002      	b.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007786:	e186      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007788:	e185      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800778a:	4b47      	ldr	r3, [pc, #284]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800778c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007790:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8007794:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	2b00      	cmp	r3, #0
 800779a:	d103      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800779c:	f7fb fa3c 	bl	8002c18 <HAL_RCC_GetPCLK2Freq>
 80077a0:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80077a2:	e178      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 80077a4:	4b40      	ldr	r3, [pc, #256]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077b0:	d10b      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077b8:	d107      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077ba:	f107 0314 	add.w	r3, r7, #20
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fd fb4a 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	637b      	str	r3, [r7, #52]	; 0x34
 80077c8:	e045      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80077ca:	4b37      	ldr	r3, [pc, #220]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077d6:	d10b      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80077d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077de:	d107      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077e0:	f107 0308 	add.w	r3, r7, #8
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fd fca1 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	637b      	str	r3, [r7, #52]	; 0x34
 80077ee:	e032      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80077f0:	4b2d      	ldr	r3, [pc, #180]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d10d      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007802:	d109      	bne.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007804:	4b28      	ldr	r3, [pc, #160]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	08db      	lsrs	r3, r3, #3
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	4a27      	ldr	r2, [pc, #156]	; (80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007810:	fa22 f303 	lsr.w	r3, r2, r3
 8007814:	637b      	str	r3, [r7, #52]	; 0x34
 8007816:	e01e      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007818:	4b23      	ldr	r3, [pc, #140]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007824:	d106      	bne.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800782c:	d102      	bne.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800782e:	4b20      	ldr	r3, [pc, #128]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007830:	637b      	str	r3, [r7, #52]	; 0x34
 8007832:	e010      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007834:	4b1c      	ldr	r3, [pc, #112]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007840:	d106      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007848:	d102      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800784a:	4b1a      	ldr	r3, [pc, #104]	; (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800784c:	637b      	str	r3, [r7, #52]	; 0x34
 800784e:	e002      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007854:	e11f      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007856:	e11e      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007858:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800785a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800785e:	f003 0303 	and.w	r3, r3, #3
 8007862:	633b      	str	r3, [r7, #48]	; 0x30
 8007864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007866:	2b03      	cmp	r3, #3
 8007868:	d85f      	bhi.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	08007881 	.word	0x08007881
 8007874:	08007889 	.word	0x08007889
 8007878:	08007899 	.word	0x08007899
 800787c:	080078b9 	.word	0x080078b9

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007880:	f7fb f998 	bl	8002bb4 <HAL_RCC_GetHCLKFreq>
 8007884:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007886:	e053      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007888:	f107 0320 	add.w	r3, r7, #32
 800788c:	4618      	mov	r0, r3
 800788e:	f7fd f979 	bl	8004b84 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007896:	e04b      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007898:	f107 0314 	add.w	r3, r7, #20
 800789c:	4618      	mov	r0, r3
 800789e:	f7fd fadb 	bl	8004e58 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80078a6:	e043      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80078a8:	44020c00 	.word	0x44020c00
 80078ac:	03d09000 	.word	0x03d09000
 80078b0:	003d0900 	.word	0x003d0900
 80078b4:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078b8:	4b79      	ldr	r3, [pc, #484]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80078ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80078be:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80078c2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078c4:	4b76      	ldr	r3, [pc, #472]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d10c      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 80078d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d109      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078d6:	4b72      	ldr	r3, [pc, #456]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	08db      	lsrs	r3, r3, #3
 80078dc:	f003 0303 	and.w	r3, r3, #3
 80078e0:	4a70      	ldr	r2, [pc, #448]	; (8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 80078e2:	fa22 f303 	lsr.w	r3, r2, r3
 80078e6:	637b      	str	r3, [r7, #52]	; 0x34
 80078e8:	e01e      	b.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078ea:	4b6d      	ldr	r3, [pc, #436]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f6:	d106      	bne.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 80078f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078fe:	d102      	bne.n	8007906 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007900:	4b69      	ldr	r3, [pc, #420]	; (8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007902:	637b      	str	r3, [r7, #52]	; 0x34
 8007904:	e010      	b.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007906:	4b66      	ldr	r3, [pc, #408]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800790e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007912:	d106      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800791a:	d102      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800791c:	4b63      	ldr	r3, [pc, #396]	; (8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800791e:	637b      	str	r3, [r7, #52]	; 0x34
 8007920:	e002      	b.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007922:	2300      	movs	r3, #0
 8007924:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007926:	e003      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007928:	e002      	b.n	8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800792e:	bf00      	nop
          }
        }
        break;
 8007930:	e0b1      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007932:	4b5b      	ldr	r3, [pc, #364]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007934:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007938:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800793c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800793e:	4b58      	ldr	r3, [pc, #352]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b02      	cmp	r3, #2
 800794a:	d106      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800794c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794e:	2b00      	cmp	r3, #0
 8007950:	d103      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007956:	637b      	str	r3, [r7, #52]	; 0x34
 8007958:	e01f      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800795a:	4b51      	ldr	r3, [pc, #324]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800795c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007968:	d106      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796c:	2b40      	cmp	r3, #64	; 0x40
 800796e:	d103      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007970:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
 8007976:	e010      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007978:	4b49      	ldr	r3, [pc, #292]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007984:	d106      	bne.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	2b80      	cmp	r3, #128	; 0x80
 800798a:	d103      	bne.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800798c:	f248 0312 	movw	r3, #32786	; 0x8012
 8007990:	637b      	str	r3, [r7, #52]	; 0x34
 8007992:	e002      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007994:	2300      	movs	r3, #0
 8007996:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007998:	e07d      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800799a:	e07c      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800799c:	4b40      	ldr	r3, [pc, #256]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800799e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079a6:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80079a8:	4b3d      	ldr	r3, [pc, #244]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079b4:	d105      	bne.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d102      	bne.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80079bc:	4b3c      	ldr	r3, [pc, #240]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80079be:	637b      	str	r3, [r7, #52]	; 0x34
 80079c0:	e031      	b.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80079c2:	4b37      	ldr	r3, [pc, #220]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079ce:	d10a      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	2b10      	cmp	r3, #16
 80079d4:	d107      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079d6:	f107 0320 	add.w	r3, r7, #32
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fd f8d2 	bl	8004b84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	637b      	str	r3, [r7, #52]	; 0x34
 80079e4:	e01f      	b.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80079e6:	4b2e      	ldr	r3, [pc, #184]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80079e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d106      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	2b20      	cmp	r3, #32
 80079f8:	d103      	bne.n	8007a02 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 80079fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007a00:	e011      	b.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007a02:	4b27      	ldr	r3, [pc, #156]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a10:	d106      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	2b30      	cmp	r3, #48	; 0x30
 8007a16:	d103      	bne.n	8007a20 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007a18:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a1e:	e002      	b.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007a24:	e037      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a26:	e036      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007a28:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007a2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a32:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	2b10      	cmp	r3, #16
 8007a38:	d107      	bne.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a3a:	f107 0320 	add.w	r3, r7, #32
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fd f8a0 	bl	8004b84 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a46:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a48:	e025      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007a4a:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a56:	d10a      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	2b20      	cmp	r3, #32
 8007a5c:	d107      	bne.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a5e:	f107 0308 	add.w	r3, r7, #8
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fd fb62 	bl	800512c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a6c:	e00f      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007a6e:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a7a:	d105      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7e:	2b30      	cmp	r3, #48	; 0x30
 8007a80:	d102      	bne.n	8007a88 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007a82:	4b0b      	ldr	r3, [pc, #44]	; (8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007a84:	637b      	str	r3, [r7, #52]	; 0x34
 8007a86:	e002      	b.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8007a8c:	e003      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a8e:	e002      	b.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a94:	bf00      	nop
    }
  }

  return (frequency);
 8007a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	373c      	adds	r7, #60	; 0x3c
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd90      	pop	{r4, r7, pc}
 8007aa0:	44020c00 	.word	0x44020c00
 8007aa4:	03d09000 	.word	0x03d09000
 8007aa8:	003d0900 	.word	0x003d0900
 8007aac:	017d7840 	.word	0x017d7840
 8007ab0:	02dc6c00 	.word	0x02dc6c00

08007ab4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007abc:	4b48      	ldr	r3, [pc, #288]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a47      	ldr	r2, [pc, #284]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007ac2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ac6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ac8:	f7f9 fe64 	bl	8001794 <HAL_GetTick>
 8007acc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ace:	e008      	b.n	8007ae2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ad0:	f7f9 fe60 	bl	8001794 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d901      	bls.n	8007ae2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e07a      	b.n	8007bd8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ae2:	4b3f      	ldr	r3, [pc, #252]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1f0      	bne.n	8007ad0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007aee:	4b3c      	ldr	r3, [pc, #240]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007af6:	f023 0303 	bic.w	r3, r3, #3
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6811      	ldr	r1, [r2, #0]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	6852      	ldr	r2, [r2, #4]
 8007b02:	0212      	lsls	r2, r2, #8
 8007b04:	430a      	orrs	r2, r1
 8007b06:	4936      	ldr	r1, [pc, #216]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	025b      	lsls	r3, r3, #9
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	431a      	orrs	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	041b      	lsls	r3, r3, #16
 8007b2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	061b      	lsls	r3, r3, #24
 8007b38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b3c:	4928      	ldr	r1, [pc, #160]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007b42:	4b27      	ldr	r3, [pc, #156]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b46:	f023 020c 	bic.w	r2, r3, #12
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	4924      	ldr	r1, [pc, #144]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007b50:	4313      	orrs	r3, r2
 8007b52:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007b54:	4b22      	ldr	r3, [pc, #136]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b58:	f023 0220 	bic.w	r2, r3, #32
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	491f      	ldr	r1, [pc, #124]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007b66:	4b1e      	ldr	r3, [pc, #120]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	491c      	ldr	r1, [pc, #112]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007b74:	4b1a      	ldr	r3, [pc, #104]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	4a19      	ldr	r2, [pc, #100]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007b7a:	f023 0310 	bic.w	r3, r3, #16
 8007b7e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007b80:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b88:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6a12      	ldr	r2, [r2, #32]
 8007b90:	00d2      	lsls	r2, r2, #3
 8007b92:	4913      	ldr	r1, [pc, #76]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007b98:	4b11      	ldr	r3, [pc, #68]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	4a10      	ldr	r2, [pc, #64]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007b9e:	f043 0310 	orr.w	r3, r3, #16
 8007ba2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007ba4:	4b0e      	ldr	r3, [pc, #56]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a0d      	ldr	r2, [pc, #52]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007baa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007bb0:	f7f9 fdf0 	bl	8001794 <HAL_GetTick>
 8007bb4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bb6:	e008      	b.n	8007bca <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bb8:	f7f9 fdec 	bl	8001794 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	d901      	bls.n	8007bca <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e006      	b.n	8007bd8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bca:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <RCCEx_PLL2_Config+0x12c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0f0      	beq.n	8007bb8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0

}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	44020c00 	.word	0x44020c00

08007be4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007bec:	4b48      	ldr	r3, [pc, #288]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a47      	ldr	r2, [pc, #284]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bf6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007bf8:	f7f9 fdcc 	bl	8001794 <HAL_GetTick>
 8007bfc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bfe:	e008      	b.n	8007c12 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c00:	f7f9 fdc8 	bl	8001794 <HAL_GetTick>
 8007c04:	4602      	mov	r2, r0
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	1ad3      	subs	r3, r2, r3
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d901      	bls.n	8007c12 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e07a      	b.n	8007d08 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c12:	4b3f      	ldr	r3, [pc, #252]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1f0      	bne.n	8007c00 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007c1e:	4b3c      	ldr	r3, [pc, #240]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007c26:	f023 0303 	bic.w	r3, r3, #3
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	6811      	ldr	r1, [r2, #0]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	6852      	ldr	r2, [r2, #4]
 8007c32:	0212      	lsls	r2, r2, #8
 8007c34:	430a      	orrs	r2, r1
 8007c36:	4936      	ldr	r1, [pc, #216]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	630b      	str	r3, [r1, #48]	; 0x30
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	025b      	lsls	r3, r3, #9
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	431a      	orrs	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	691b      	ldr	r3, [r3, #16]
 8007c56:	3b01      	subs	r3, #1
 8007c58:	041b      	lsls	r3, r3, #16
 8007c5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c5e:	431a      	orrs	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	3b01      	subs	r3, #1
 8007c66:	061b      	lsls	r3, r3, #24
 8007c68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c6c:	4928      	ldr	r1, [pc, #160]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c72:	4b27      	ldr	r3, [pc, #156]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c76:	f023 020c 	bic.w	r2, r3, #12
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	4924      	ldr	r1, [pc, #144]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007c80:	4313      	orrs	r3, r2
 8007c82:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007c84:	4b22      	ldr	r3, [pc, #136]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c88:	f023 0220 	bic.w	r2, r3, #32
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	69db      	ldr	r3, [r3, #28]
 8007c90:	491f      	ldr	r1, [pc, #124]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007c96:	4b1e      	ldr	r3, [pc, #120]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c9e:	491c      	ldr	r1, [pc, #112]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007ca4:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca8:	4a19      	ldr	r2, [pc, #100]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007caa:	f023 0310 	bic.w	r3, r3, #16
 8007cae:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8007cb0:	4b17      	ldr	r3, [pc, #92]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cb8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6a12      	ldr	r2, [r2, #32]
 8007cc0:	00d2      	lsls	r2, r2, #3
 8007cc2:	4913      	ldr	r1, [pc, #76]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8007cc8:	4b11      	ldr	r3, [pc, #68]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ccc:	4a10      	ldr	r2, [pc, #64]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007cce:	f043 0310 	orr.w	r3, r3, #16
 8007cd2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007cd4:	4b0e      	ldr	r3, [pc, #56]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a0d      	ldr	r2, [pc, #52]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cde:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ce0:	f7f9 fd58 	bl	8001794 <HAL_GetTick>
 8007ce4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ce6:	e008      	b.n	8007cfa <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ce8:	f7f9 fd54 	bl	8001794 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d901      	bls.n	8007cfa <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e006      	b.n	8007d08 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cfa:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <RCCEx_PLL3_Config+0x12c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0f0      	beq.n	8007ce8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	44020c00 	.word	0x44020c00

08007d14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e162      	b.n	8007fec <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a70      	ldr	r2, [pc, #448]	; (8007eec <HAL_SPI_Init+0x1d8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d018      	beq.n	8007d62 <HAL_SPI_Init+0x4e>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a6e      	ldr	r2, [pc, #440]	; (8007ef0 <HAL_SPI_Init+0x1dc>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d013      	beq.n	8007d62 <HAL_SPI_Init+0x4e>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a6d      	ldr	r2, [pc, #436]	; (8007ef4 <HAL_SPI_Init+0x1e0>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00e      	beq.n	8007d62 <HAL_SPI_Init+0x4e>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a6b      	ldr	r2, [pc, #428]	; (8007ef8 <HAL_SPI_Init+0x1e4>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d009      	beq.n	8007d62 <HAL_SPI_Init+0x4e>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a6a      	ldr	r2, [pc, #424]	; (8007efc <HAL_SPI_Init+0x1e8>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d004      	beq.n	8007d62 <HAL_SPI_Init+0x4e>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a68      	ldr	r2, [pc, #416]	; (8007f00 <HAL_SPI_Init+0x1ec>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	e000      	b.n	8007d64 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007d62:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a5f      	ldr	r2, [pc, #380]	; (8007eec <HAL_SPI_Init+0x1d8>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d018      	beq.n	8007da6 <HAL_SPI_Init+0x92>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a5d      	ldr	r2, [pc, #372]	; (8007ef0 <HAL_SPI_Init+0x1dc>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d013      	beq.n	8007da6 <HAL_SPI_Init+0x92>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a5c      	ldr	r2, [pc, #368]	; (8007ef4 <HAL_SPI_Init+0x1e0>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d00e      	beq.n	8007da6 <HAL_SPI_Init+0x92>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a5a      	ldr	r2, [pc, #360]	; (8007ef8 <HAL_SPI_Init+0x1e4>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d009      	beq.n	8007da6 <HAL_SPI_Init+0x92>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a59      	ldr	r2, [pc, #356]	; (8007efc <HAL_SPI_Init+0x1e8>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d004      	beq.n	8007da6 <HAL_SPI_Init+0x92>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a57      	ldr	r2, [pc, #348]	; (8007f00 <HAL_SPI_Init+0x1ec>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d105      	bne.n	8007db2 <HAL_SPI_Init+0x9e>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	2b0f      	cmp	r3, #15
 8007dac:	d901      	bls.n	8007db2 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e11c      	b.n	8007fec <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f001 f80e 	bl	8008dd4 <SPI_GetPacketSize>
 8007db8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a4b      	ldr	r2, [pc, #300]	; (8007eec <HAL_SPI_Init+0x1d8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d018      	beq.n	8007df6 <HAL_SPI_Init+0xe2>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a49      	ldr	r2, [pc, #292]	; (8007ef0 <HAL_SPI_Init+0x1dc>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d013      	beq.n	8007df6 <HAL_SPI_Init+0xe2>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a48      	ldr	r2, [pc, #288]	; (8007ef4 <HAL_SPI_Init+0x1e0>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d00e      	beq.n	8007df6 <HAL_SPI_Init+0xe2>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a46      	ldr	r2, [pc, #280]	; (8007ef8 <HAL_SPI_Init+0x1e4>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d009      	beq.n	8007df6 <HAL_SPI_Init+0xe2>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a45      	ldr	r2, [pc, #276]	; (8007efc <HAL_SPI_Init+0x1e8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d004      	beq.n	8007df6 <HAL_SPI_Init+0xe2>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a43      	ldr	r2, [pc, #268]	; (8007f00 <HAL_SPI_Init+0x1ec>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d102      	bne.n	8007dfc <HAL_SPI_Init+0xe8>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d820      	bhi.n	8007e3e <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e00:	4a40      	ldr	r2, [pc, #256]	; (8007f04 <HAL_SPI_Init+0x1f0>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d018      	beq.n	8007e38 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a3f      	ldr	r2, [pc, #252]	; (8007f08 <HAL_SPI_Init+0x1f4>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d013      	beq.n	8007e38 <HAL_SPI_Init+0x124>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a3d      	ldr	r2, [pc, #244]	; (8007f0c <HAL_SPI_Init+0x1f8>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00e      	beq.n	8007e38 <HAL_SPI_Init+0x124>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a3c      	ldr	r2, [pc, #240]	; (8007f10 <HAL_SPI_Init+0x1fc>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d009      	beq.n	8007e38 <HAL_SPI_Init+0x124>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a3a      	ldr	r2, [pc, #232]	; (8007f14 <HAL_SPI_Init+0x200>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d004      	beq.n	8007e38 <HAL_SPI_Init+0x124>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a39      	ldr	r2, [pc, #228]	; (8007f18 <HAL_SPI_Init+0x204>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d104      	bne.n	8007e42 <HAL_SPI_Init+0x12e>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2b10      	cmp	r3, #16
 8007e3c:	d901      	bls.n	8007e42 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e0d4      	b.n	8007fec <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d106      	bne.n	8007e5c <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7f9 f936 	bl	80010c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f022 0201 	bic.w	r2, r2, #1
 8007e72:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007e7e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e88:	d119      	bne.n	8007ebe <HAL_SPI_Init+0x1aa>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e92:	d103      	bne.n	8007e9c <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d008      	beq.n	8007eae <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10c      	bne.n	8007ebe <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007ea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007eac:	d107      	bne.n	8007ebe <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ebc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d028      	beq.n	8007f1c <HAL_SPI_Init+0x208>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	2b06      	cmp	r3, #6
 8007ed0:	d924      	bls.n	8007f1c <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	601a      	str	r2, [r3, #0]
 8007ee8:	e020      	b.n	8007f2c <HAL_SPI_Init+0x218>
 8007eea:	bf00      	nop
 8007eec:	40014c00 	.word	0x40014c00
 8007ef0:	50014c00 	.word	0x50014c00
 8007ef4:	44002000 	.word	0x44002000
 8007ef8:	54002000 	.word	0x54002000
 8007efc:	40015000 	.word	0x40015000
 8007f00:	50015000 	.word	0x50015000
 8007f04:	40013000 	.word	0x40013000
 8007f08:	50013000 	.word	0x50013000
 8007f0c:	40003800 	.word	0x40003800
 8007f10:	50003800 	.word	0x50003800
 8007f14:	40003c00 	.word	0x40003c00
 8007f18:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f2a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	69da      	ldr	r2, [r3, #28]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	431a      	orrs	r2, r3
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	431a      	orrs	r2, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3e:	ea42 0103 	orr.w	r1, r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68da      	ldr	r2, [r3, #12]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	431a      	orrs	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	431a      	orrs	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a1b      	ldr	r3, [r3, #32]
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f80:	431a      	orrs	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	431a      	orrs	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f92:	431a      	orrs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f98:	ea42 0103 	orr.w	r1, r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0201 	bic.w	r2, r2, #1
 8007fb6:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00a      	beq.n	8007fda <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8007fea:	2300      	movs	r3, #0
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3710      	adds	r7, #16
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08a      	sub	sp, #40	; 0x28
 8007ff8:	af02      	add	r7, sp, #8
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	4613      	mov	r3, r2
 8008002:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	3320      	adds	r3, #32
 800800a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800800c:	2300      	movs	r3, #0
 800800e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008016:	2b01      	cmp	r3, #1
 8008018:	d101      	bne.n	800801e <HAL_SPI_Transmit+0x2a>
 800801a:	2302      	movs	r3, #2
 800801c:	e209      	b.n	8008432 <HAL_SPI_Transmit+0x43e>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008026:	f7f9 fbb5 	bl	8001794 <HAL_GetTick>
 800802a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b01      	cmp	r3, #1
 8008036:	d007      	beq.n	8008048 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008038:	2302      	movs	r3, #2
 800803a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008044:	7efb      	ldrb	r3, [r7, #27]
 8008046:	e1f4      	b.n	8008432 <HAL_SPI_Transmit+0x43e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d002      	beq.n	8008054 <HAL_SPI_Transmit+0x60>
 800804e:	88fb      	ldrh	r3, [r7, #6]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d107      	bne.n	8008064 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008060:	7efb      	ldrb	r3, [r7, #27]
 8008062:	e1e6      	b.n	8008432 <HAL_SPI_Transmit+0x43e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2203      	movs	r2, #3
 8008068:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2200      	movs	r2, #0
 8008070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	88fa      	ldrh	r2, [r7, #6]
 800807e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	88fa      	ldrh	r2, [r7, #6]
 8008086:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80080b4:	d108      	bne.n	80080c8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	e009      	b.n	80080dc <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80080da:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	0c1b      	lsrs	r3, r3, #16
 80080e4:	041b      	lsls	r3, r3, #16
 80080e6:	88f9      	ldrh	r1, [r7, #6]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	6812      	ldr	r2, [r2, #0]
 80080ec:	430b      	orrs	r3, r1
 80080ee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 0201 	orr.w	r2, r2, #1
 80080fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008108:	d107      	bne.n	800811a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008118:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	2b0f      	cmp	r3, #15
 8008120:	d965      	bls.n	80081ee <HAL_SPI_Transmit+0x1fa>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a94      	ldr	r2, [pc, #592]	; (8008378 <HAL_SPI_Transmit+0x384>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d059      	beq.n	80081e0 <HAL_SPI_Transmit+0x1ec>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a92      	ldr	r2, [pc, #584]	; (800837c <HAL_SPI_Transmit+0x388>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d054      	beq.n	80081e0 <HAL_SPI_Transmit+0x1ec>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a91      	ldr	r2, [pc, #580]	; (8008380 <HAL_SPI_Transmit+0x38c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d04f      	beq.n	80081e0 <HAL_SPI_Transmit+0x1ec>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a8f      	ldr	r2, [pc, #572]	; (8008384 <HAL_SPI_Transmit+0x390>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d04a      	beq.n	80081e0 <HAL_SPI_Transmit+0x1ec>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a8e      	ldr	r2, [pc, #568]	; (8008388 <HAL_SPI_Transmit+0x394>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d045      	beq.n	80081e0 <HAL_SPI_Transmit+0x1ec>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a8c      	ldr	r2, [pc, #560]	; (800838c <HAL_SPI_Transmit+0x398>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d147      	bne.n	80081ee <HAL_SPI_Transmit+0x1fa>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800815e:	e03f      	b.n	80081e0 <HAL_SPI_Transmit+0x1ec>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b02      	cmp	r3, #2
 800816c:	d114      	bne.n	8008198 <HAL_SPI_Transmit+0x1a4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6812      	ldr	r2, [r2, #0]
 8008178:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800817e:	1d1a      	adds	r2, r3, #4
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800818a:	b29b      	uxth	r3, r3
 800818c:	3b01      	subs	r3, #1
 800818e:	b29a      	uxth	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008196:	e023      	b.n	80081e0 <HAL_SPI_Transmit+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008198:	f7f9 fafc 	bl	8001794 <HAL_GetTick>
 800819c:	4602      	mov	r2, r0
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d803      	bhi.n	80081b0 <HAL_SPI_Transmit+0x1bc>
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081ae:	d102      	bne.n	80081b6 <HAL_SPI_Transmit+0x1c2>
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d114      	bne.n	80081e0 <HAL_SPI_Transmit+0x1ec>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 fd3e 	bl	8008c38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e128      	b.n	8008432 <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1b9      	bne.n	8008160 <HAL_SPI_Transmit+0x16c>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80081ec:	e0fb      	b.n	80083e6 <HAL_SPI_Transmit+0x3f2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	2b07      	cmp	r3, #7
 80081f4:	f240 80f0 	bls.w	80083d8 <HAL_SPI_Transmit+0x3e4>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80081f8:	e05d      	b.n	80082b6 <HAL_SPI_Transmit+0x2c2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	695b      	ldr	r3, [r3, #20]
 8008200:	f003 0302 	and.w	r3, r3, #2
 8008204:	2b02      	cmp	r3, #2
 8008206:	d132      	bne.n	800826e <HAL_SPI_Transmit+0x27a>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800820e:	b29b      	uxth	r3, r3
 8008210:	2b01      	cmp	r3, #1
 8008212:	d918      	bls.n	8008246 <HAL_SPI_Transmit+0x252>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008218:	2b00      	cmp	r3, #0
 800821a:	d014      	beq.n	8008246 <HAL_SPI_Transmit+0x252>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	6812      	ldr	r2, [r2, #0]
 8008226:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800822c:	1d1a      	adds	r2, r3, #4
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008238:	b29b      	uxth	r3, r3
 800823a:	3b02      	subs	r3, #2
 800823c:	b29a      	uxth	r2, r3
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008244:	e037      	b.n	80082b6 <HAL_SPI_Transmit+0x2c2>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800824a:	881a      	ldrh	r2, [r3, #0]
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008254:	1c9a      	adds	r2, r3, #2
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008260:	b29b      	uxth	r3, r3
 8008262:	3b01      	subs	r3, #1
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800826c:	e023      	b.n	80082b6 <HAL_SPI_Transmit+0x2c2>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800826e:	f7f9 fa91 	bl	8001794 <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	d803      	bhi.n	8008286 <HAL_SPI_Transmit+0x292>
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008284:	d102      	bne.n	800828c <HAL_SPI_Transmit+0x298>
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d114      	bne.n	80082b6 <HAL_SPI_Transmit+0x2c2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 fcd3 	bl	8008c38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e0bd      	b.n	8008432 <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082bc:	b29b      	uxth	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d19b      	bne.n	80081fa <HAL_SPI_Transmit+0x206>
 80082c2:	e090      	b.n	80083e6 <HAL_SPI_Transmit+0x3f2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d15e      	bne.n	8008390 <HAL_SPI_Transmit+0x39c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082d8:	b29b      	uxth	r3, r3
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d918      	bls.n	8008310 <HAL_SPI_Transmit+0x31c>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e2:	2b40      	cmp	r3, #64	; 0x40
 80082e4:	d914      	bls.n	8008310 <HAL_SPI_Transmit+0x31c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6812      	ldr	r2, [r2, #0]
 80082f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082f6:	1d1a      	adds	r2, r3, #4
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008302:	b29b      	uxth	r3, r3
 8008304:	3b04      	subs	r3, #4
 8008306:	b29a      	uxth	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800830e:	e063      	b.n	80083d8 <HAL_SPI_Transmit+0x3e4>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008316:	b29b      	uxth	r3, r3
 8008318:	2b01      	cmp	r3, #1
 800831a:	d917      	bls.n	800834c <HAL_SPI_Transmit+0x358>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008320:	2b00      	cmp	r3, #0
 8008322:	d013      	beq.n	800834c <HAL_SPI_Transmit+0x358>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008328:	881a      	ldrh	r2, [r3, #0]
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008332:	1c9a      	adds	r2, r3, #2
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800833e:	b29b      	uxth	r3, r3
 8008340:	3b02      	subs	r3, #2
 8008342:	b29a      	uxth	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800834a:	e045      	b.n	80083d8 <HAL_SPI_Transmit+0x3e4>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	3320      	adds	r3, #32
 8008356:	7812      	ldrb	r2, [r2, #0]
 8008358:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800835e:	1c5a      	adds	r2, r3, #1
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800836a:	b29b      	uxth	r3, r3
 800836c:	3b01      	subs	r3, #1
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008376:	e02f      	b.n	80083d8 <HAL_SPI_Transmit+0x3e4>
 8008378:	40013000 	.word	0x40013000
 800837c:	50013000 	.word	0x50013000
 8008380:	40003800 	.word	0x40003800
 8008384:	50003800 	.word	0x50003800
 8008388:	40003c00 	.word	0x40003c00
 800838c:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008390:	f7f9 fa00 	bl	8001794 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	429a      	cmp	r2, r3
 800839e:	d803      	bhi.n	80083a8 <HAL_SPI_Transmit+0x3b4>
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083a6:	d102      	bne.n	80083ae <HAL_SPI_Transmit+0x3ba>
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d114      	bne.n	80083d8 <HAL_SPI_Transmit+0x3e4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 fc42 	bl	8008c38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e02c      	b.n	8008432 <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083de:	b29b      	uxth	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f47f af6f 	bne.w	80082c4 <HAL_SPI_Transmit+0x2d0>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2200      	movs	r2, #0
 80083ee:	2108      	movs	r1, #8
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 fcc1 	bl	8008d78 <SPI_WaitOnFlagUntilTimeout>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d007      	beq.n	800840c <HAL_SPI_Transmit+0x418>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008402:	f043 0220 	orr.w	r2, r3, #32
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 fc13 	bl	8008c38 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008428:	2b00      	cmp	r3, #0
 800842a:	d001      	beq.n	8008430 <HAL_SPI_Transmit+0x43c>
  {
    return HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	e000      	b.n	8008432 <HAL_SPI_Transmit+0x43e>
  }
  return errorcode;
 8008430:	7efb      	ldrb	r3, [r7, #27]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3720      	adds	r7, #32
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop

0800843c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	4613      	mov	r3, r2
 800844a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	3330      	adds	r3, #48	; 0x30
 8008456:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800845e:	2b01      	cmp	r3, #1
 8008460:	d101      	bne.n	8008466 <HAL_SPI_Receive+0x2a>
 8008462:	2302      	movs	r3, #2
 8008464:	e191      	b.n	800878a <HAL_SPI_Receive+0x34e>
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800846e:	f7f9 f991 	bl	8001794 <HAL_GetTick>
 8008472:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b01      	cmp	r3, #1
 800847e:	d007      	beq.n	8008490 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8008480:	2302      	movs	r3, #2
 8008482:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800848c:	7ffb      	ldrb	r3, [r7, #31]
 800848e:	e17c      	b.n	800878a <HAL_SPI_Receive+0x34e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d002      	beq.n	800849c <HAL_SPI_Receive+0x60>
 8008496:	88fb      	ldrh	r3, [r7, #6]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d107      	bne.n	80084ac <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80084a8:	7ffb      	ldrb	r3, [r7, #31]
 80084aa:	e16e      	b.n	800878a <HAL_SPI_Receive+0x34e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2204      	movs	r2, #4
 80084b0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	88fa      	ldrh	r2, [r7, #6]
 80084c6:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	88fa      	ldrh	r2, [r7, #6]
 80084ce:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80084fc:	d108      	bne.n	8008510 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	e009      	b.n	8008524 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008522:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	0c1b      	lsrs	r3, r3, #16
 800852c:	041b      	lsls	r3, r3, #16
 800852e:	88f9      	ldrh	r1, [r7, #6]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	6812      	ldr	r2, [r2, #0]
 8008534:	430b      	orrs	r3, r1
 8008536:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0201 	orr.w	r2, r2, #1
 8008546:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008550:	d107      	bne.n	8008562 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008560:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	2b0f      	cmp	r3, #15
 8008568:	d966      	bls.n	8008638 <HAL_SPI_Receive+0x1fc>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a89      	ldr	r2, [pc, #548]	; (8008794 <HAL_SPI_Receive+0x358>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d05a      	beq.n	800862a <HAL_SPI_Receive+0x1ee>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a87      	ldr	r2, [pc, #540]	; (8008798 <HAL_SPI_Receive+0x35c>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d055      	beq.n	800862a <HAL_SPI_Receive+0x1ee>
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a86      	ldr	r2, [pc, #536]	; (800879c <HAL_SPI_Receive+0x360>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d050      	beq.n	800862a <HAL_SPI_Receive+0x1ee>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a84      	ldr	r2, [pc, #528]	; (80087a0 <HAL_SPI_Receive+0x364>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d04b      	beq.n	800862a <HAL_SPI_Receive+0x1ee>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a83      	ldr	r2, [pc, #524]	; (80087a4 <HAL_SPI_Receive+0x368>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d046      	beq.n	800862a <HAL_SPI_Receive+0x1ee>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a81      	ldr	r2, [pc, #516]	; (80087a8 <HAL_SPI_Receive+0x36c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d148      	bne.n	8008638 <HAL_SPI_Receive+0x1fc>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80085a6:	e040      	b.n	800862a <HAL_SPI_Receive+0x1ee>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	695a      	ldr	r2, [r3, #20]
 80085ae:	f248 0308 	movw	r3, #32776	; 0x8008
 80085b2:	4013      	ands	r3, r2
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d014      	beq.n	80085e2 <HAL_SPI_Receive+0x1a6>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80085c2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085c8:	1d1a      	adds	r2, r3, #4
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	3b01      	subs	r3, #1
 80085d8:	b29a      	uxth	r2, r3
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80085e0:	e023      	b.n	800862a <HAL_SPI_Receive+0x1ee>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085e2:	f7f9 f8d7 	bl	8001794 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d803      	bhi.n	80085fa <HAL_SPI_Receive+0x1be>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085f8:	d102      	bne.n	8008600 <HAL_SPI_Receive+0x1c4>
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d114      	bne.n	800862a <HAL_SPI_Receive+0x1ee>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f000 fb19 	bl	8008c38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008614:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	e0af      	b.n	800878a <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008630:	b29b      	uxth	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1b8      	bne.n	80085a8 <HAL_SPI_Receive+0x16c>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008636:	e095      	b.n	8008764 <HAL_SPI_Receive+0x328>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	2b07      	cmp	r3, #7
 800863e:	f240 808b 	bls.w	8008758 <HAL_SPI_Receive+0x31c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008642:	e03f      	b.n	80086c4 <HAL_SPI_Receive+0x288>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	2b01      	cmp	r3, #1
 8008650:	d114      	bne.n	800867c <HAL_SPI_Receive+0x240>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	8812      	ldrh	r2, [r2, #0]
 800865a:	b292      	uxth	r2, r2
 800865c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008662:	1c9a      	adds	r2, r3, #2
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800866e:	b29b      	uxth	r3, r3
 8008670:	3b01      	subs	r3, #1
 8008672:	b29a      	uxth	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800867a:	e023      	b.n	80086c4 <HAL_SPI_Receive+0x288>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800867c:	f7f9 f88a 	bl	8001794 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	429a      	cmp	r2, r3
 800868a:	d803      	bhi.n	8008694 <HAL_SPI_Receive+0x258>
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008692:	d102      	bne.n	800869a <HAL_SPI_Receive+0x25e>
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d114      	bne.n	80086c4 <HAL_SPI_Receive+0x288>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 facc 	bl	8008c38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e062      	b.n	800878a <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1b9      	bne.n	8008644 <HAL_SPI_Receive+0x208>
 80086d0:	e048      	b.n	8008764 <HAL_SPI_Receive+0x328>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	695b      	ldr	r3, [r3, #20]
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d117      	bne.n	8008710 <HAL_SPI_Receive+0x2d4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ec:	7812      	ldrb	r2, [r2, #0]
 80086ee:	b2d2      	uxtb	r2, r2
 80086f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008702:	b29b      	uxth	r3, r3
 8008704:	3b01      	subs	r3, #1
 8008706:	b29a      	uxth	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800870e:	e023      	b.n	8008758 <HAL_SPI_Receive+0x31c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008710:	f7f9 f840 	bl	8001794 <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d803      	bhi.n	8008728 <HAL_SPI_Receive+0x2ec>
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008726:	d102      	bne.n	800872e <HAL_SPI_Receive+0x2f2>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d114      	bne.n	8008758 <HAL_SPI_Receive+0x31c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 fa82 	bl	8008c38 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e018      	b.n	800878a <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800875e:	b29b      	uxth	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1b6      	bne.n	80086d2 <HAL_SPI_Receive+0x296>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 fa67 	bl	8008c38 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008780:	2b00      	cmp	r3, #0
 8008782:	d001      	beq.n	8008788 <HAL_SPI_Receive+0x34c>
  {
    return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e000      	b.n	800878a <HAL_SPI_Receive+0x34e>
  }
  return errorcode;
 8008788:	7ffb      	ldrb	r3, [r7, #31]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3720      	adds	r7, #32
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	40013000 	.word	0x40013000
 8008798:	50013000 	.word	0x50013000
 800879c:	40003800 	.word	0x40003800
 80087a0:	50003800 	.word	0x50003800
 80087a4:	40003c00 	.word	0x40003c00
 80087a8:	50003c00 	.word	0x50003c00

080087ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b08c      	sub	sp, #48	; 0x30
 80087b0:	af02      	add	r7, sp, #8
 80087b2:	60f8      	str	r0, [r7, #12]
 80087b4:	60b9      	str	r1, [r7, #8]
 80087b6:	607a      	str	r2, [r7, #4]
 80087b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3320      	adds	r3, #32
 80087c6:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3330      	adds	r3, #48	; 0x30
 80087ce:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d101      	bne.n	80087de <HAL_SPI_TransmitReceive+0x32>
 80087da:	2302      	movs	r3, #2
 80087dc:	e227      	b.n	8008c2e <HAL_SPI_TransmitReceive+0x482>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087e6:	f7f8 ffd5 	bl	8001794 <HAL_GetTick>
 80087ea:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80087ec:	887b      	ldrh	r3, [r7, #2]
 80087ee:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 80087f0:	887b      	ldrh	r3, [r7, #2]
 80087f2:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d009      	beq.n	8008814 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8008800:	2302      	movs	r3, #2
 8008802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800880e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008812:	e20c      	b.n	8008c2e <HAL_SPI_TransmitReceive+0x482>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d005      	beq.n	8008826 <HAL_SPI_TransmitReceive+0x7a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d002      	beq.n	8008826 <HAL_SPI_TransmitReceive+0x7a>
 8008820:	887b      	ldrh	r3, [r7, #2]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d109      	bne.n	800883a <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008834:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008838:	e1f9      	b.n	8008c2e <HAL_SPI_TransmitReceive+0x482>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2205      	movs	r2, #5
 800883e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	887a      	ldrh	r2, [r7, #2]
 8008854:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	887a      	ldrh	r2, [r7, #2]
 800885c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	887a      	ldrh	r2, [r7, #2]
 800886a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	887a      	ldrh	r2, [r7, #2]
 8008872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68da      	ldr	r2, [r3, #12]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8008890:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	0c1b      	lsrs	r3, r3, #16
 800889a:	041b      	lsls	r3, r3, #16
 800889c:	8879      	ldrh	r1, [r7, #2]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	6812      	ldr	r2, [r2, #0]
 80088a2:	430b      	orrs	r3, r1
 80088a4:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f042 0201 	orr.w	r2, r2, #1
 80088b4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088be:	d107      	bne.n	80088d0 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	2b0f      	cmp	r3, #15
 80088d6:	f240 8090 	bls.w	80089fa <HAL_SPI_TransmitReceive+0x24e>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a81      	ldr	r2, [pc, #516]	; (8008ae4 <HAL_SPI_TransmitReceive+0x338>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	f000 8083 	beq.w	80089ec <HAL_SPI_TransmitReceive+0x240>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a7f      	ldr	r2, [pc, #508]	; (8008ae8 <HAL_SPI_TransmitReceive+0x33c>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d07d      	beq.n	80089ec <HAL_SPI_TransmitReceive+0x240>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a7d      	ldr	r2, [pc, #500]	; (8008aec <HAL_SPI_TransmitReceive+0x340>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d078      	beq.n	80089ec <HAL_SPI_TransmitReceive+0x240>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a7c      	ldr	r2, [pc, #496]	; (8008af0 <HAL_SPI_TransmitReceive+0x344>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d073      	beq.n	80089ec <HAL_SPI_TransmitReceive+0x240>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a7a      	ldr	r2, [pc, #488]	; (8008af4 <HAL_SPI_TransmitReceive+0x348>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d06e      	beq.n	80089ec <HAL_SPI_TransmitReceive+0x240>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a79      	ldr	r2, [pc, #484]	; (8008af8 <HAL_SPI_TransmitReceive+0x34c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d170      	bne.n	80089fa <HAL_SPI_TransmitReceive+0x24e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008918:	e068      	b.n	80089ec <HAL_SPI_TransmitReceive+0x240>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	f003 0302 	and.w	r3, r3, #2
 8008924:	2b02      	cmp	r3, #2
 8008926:	d11a      	bne.n	800895e <HAL_SPI_TransmitReceive+0x1b2>
 8008928:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800892a:	2b00      	cmp	r3, #0
 800892c:	d017      	beq.n	800895e <HAL_SPI_TransmitReceive+0x1b2>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	6812      	ldr	r2, [r2, #0]
 8008938:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800893e:	1d1a      	adds	r2, r3, #4
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800894a:	b29b      	uxth	r3, r3
 800894c:	3b01      	subs	r3, #1
 800894e:	b29a      	uxth	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800895c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	695a      	ldr	r2, [r3, #20]
 8008964:	f248 0308 	movw	r3, #32776	; 0x8008
 8008968:	4013      	ands	r3, r2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d01a      	beq.n	80089a4 <HAL_SPI_TransmitReceive+0x1f8>
 800896e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008970:	2b00      	cmp	r3, #0
 8008972:	d017      	beq.n	80089a4 <HAL_SPI_TransmitReceive+0x1f8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800897c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800897e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008984:	1d1a      	adds	r2, r3, #4
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008990:	b29b      	uxth	r3, r3
 8008992:	3b01      	subs	r3, #1
 8008994:	b29a      	uxth	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80089a2:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089a4:	f7f8 fef6 	bl	8001794 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d803      	bhi.n	80089bc <HAL_SPI_TransmitReceive+0x210>
 80089b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089ba:	d102      	bne.n	80089c2 <HAL_SPI_TransmitReceive+0x216>
 80089bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d114      	bne.n	80089ec <HAL_SPI_TransmitReceive+0x240>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f000 f938 	bl	8008c38 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 80089e8:	2303      	movs	r3, #3
 80089ea:	e120      	b.n	8008c2e <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80089ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d193      	bne.n	800891a <HAL_SPI_TransmitReceive+0x16e>
 80089f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d190      	bne.n	800891a <HAL_SPI_TransmitReceive+0x16e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80089f8:	e0f2      	b.n	8008be0 <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	2b07      	cmp	r3, #7
 8008a00:	f240 80e8 	bls.w	8008bd4 <HAL_SPI_TransmitReceive+0x428>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008a04:	e066      	b.n	8008ad4 <HAL_SPI_TransmitReceive+0x328>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d119      	bne.n	8008a48 <HAL_SPI_TransmitReceive+0x29c>
 8008a14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d016      	beq.n	8008a48 <HAL_SPI_TransmitReceive+0x29c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a1e:	881a      	ldrh	r2, [r3, #0]
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a28:	1c9a      	adds	r2, r3, #2
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a34:	b29b      	uxth	r3, r3
 8008a36:	3b01      	subs	r3, #1
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a46:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d11a      	bne.n	8008a8c <HAL_SPI_TransmitReceive+0x2e0>
 8008a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d017      	beq.n	8008a8c <HAL_SPI_TransmitReceive+0x2e0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	8812      	ldrh	r2, [r2, #0]
 8008a64:	b292      	uxth	r2, r2
 8008a66:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a6c:	1c9a      	adds	r2, r3, #2
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008a8a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a8c:	f7f8 fe82 	bl	8001794 <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d803      	bhi.n	8008aa4 <HAL_SPI_TransmitReceive+0x2f8>
 8008a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aa2:	d102      	bne.n	8008aaa <HAL_SPI_TransmitReceive+0x2fe>
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d114      	bne.n	8008ad4 <HAL_SPI_TransmitReceive+0x328>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f000 f8c4 	bl	8008c38 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008abe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e0ac      	b.n	8008c2e <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008ad4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d195      	bne.n	8008a06 <HAL_SPI_TransmitReceive+0x25a>
 8008ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d192      	bne.n	8008a06 <HAL_SPI_TransmitReceive+0x25a>
 8008ae0:	e07e      	b.n	8008be0 <HAL_SPI_TransmitReceive+0x434>
 8008ae2:	bf00      	nop
 8008ae4:	40013000 	.word	0x40013000
 8008ae8:	50013000 	.word	0x50013000
 8008aec:	40003800 	.word	0x40003800
 8008af0:	50003800 	.word	0x50003800
 8008af4:	40003c00 	.word	0x40003c00
 8008af8:	50003c00 	.word	0x50003c00
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d11b      	bne.n	8008b42 <HAL_SPI_TransmitReceive+0x396>
 8008b0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d018      	beq.n	8008b42 <HAL_SPI_TransmitReceive+0x396>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3320      	adds	r3, #32
 8008b1a:	7812      	ldrb	r2, [r2, #0]
 8008b1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b22:	1c5a      	adds	r2, r3, #1
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	3b01      	subs	r3, #1
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b40:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d11d      	bne.n	8008b8c <HAL_SPI_TransmitReceive+0x3e0>
 8008b50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d01a      	beq.n	8008b8c <HAL_SPI_TransmitReceive+0x3e0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b62:	7812      	ldrb	r2, [r2, #0]
 8008b64:	b2d2      	uxtb	r2, r2
 8008b66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008b8a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b8c:	f7f8 fe02 	bl	8001794 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d803      	bhi.n	8008ba4 <HAL_SPI_TransmitReceive+0x3f8>
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ba2:	d102      	bne.n	8008baa <HAL_SPI_TransmitReceive+0x3fe>
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d114      	bne.n	8008bd4 <HAL_SPI_TransmitReceive+0x428>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 f844 	bl	8008c38 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e02c      	b.n	8008c2e <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008bd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d190      	bne.n	8008afc <HAL_SPI_TransmitReceive+0x350>
 8008bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d18d      	bne.n	8008afc <HAL_SPI_TransmitReceive+0x350>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	9300      	str	r3, [sp, #0]
 8008be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be6:	2200      	movs	r2, #0
 8008be8:	2108      	movs	r1, #8
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f000 f8c4 	bl	8008d78 <SPI_WaitOnFlagUntilTimeout>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d007      	beq.n	8008c06 <HAL_SPI_TransmitReceive+0x45a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bfc:	f043 0220 	orr.w	r2, r3, #32
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 f816 	bl	8008c38 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <HAL_SPI_TransmitReceive+0x47e>
  {
    return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e001      	b.n	8008c2e <HAL_SPI_TransmitReceive+0x482>
  }
  return errorcode;
 8008c2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3728      	adds	r7, #40	; 0x28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop

08008c38 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	699a      	ldr	r2, [r3, #24]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f042 0208 	orr.w	r2, r2, #8
 8008c56:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	699a      	ldr	r2, [r3, #24]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0210 	orr.w	r2, r2, #16
 8008c66:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 0201 	bic.w	r2, r2, #1
 8008c76:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	6812      	ldr	r2, [r2, #0]
 8008c82:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8008c86:	f023 0303 	bic.w	r3, r3, #3
 8008c8a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	689a      	ldr	r2, [r3, #8]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008c9a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b04      	cmp	r3, #4
 8008ca6:	d014      	beq.n	8008cd2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f003 0320 	and.w	r3, r3, #32
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00f      	beq.n	8008cd2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	699a      	ldr	r2, [r3, #24]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f042 0220 	orr.w	r2, r2, #32
 8008cd0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d014      	beq.n	8008d08 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00f      	beq.n	8008d08 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cee:	f043 0204 	orr.w	r2, r3, #4
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	699a      	ldr	r2, [r3, #24]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d06:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00f      	beq.n	8008d32 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d18:	f043 0201 	orr.w	r2, r3, #1
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	699a      	ldr	r2, [r3, #24]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d30:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00f      	beq.n	8008d5c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d42:	f043 0208 	orr.w	r2, r3, #8
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	699a      	ldr	r2, [r3, #24]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d5a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8008d6c:	bf00      	nop
 8008d6e:	3714      	adds	r7, #20
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	603b      	str	r3, [r7, #0]
 8008d84:	4613      	mov	r3, r2
 8008d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008d88:	e010      	b.n	8008dac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d8a:	f7f8 fd03 	bl	8001794 <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	683a      	ldr	r2, [r7, #0]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d803      	bhi.n	8008da2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008da0:	d102      	bne.n	8008da8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e00f      	b.n	8008dcc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	695a      	ldr	r2, [r3, #20]
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	4013      	ands	r3, r2
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	bf0c      	ite	eq
 8008dbc:	2301      	moveq	r3, #1
 8008dbe:	2300      	movne	r3, #0
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d0df      	beq.n	8008d8a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de0:	095b      	lsrs	r3, r3, #5
 8008de2:	3301      	adds	r3, #1
 8008de4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	3307      	adds	r3, #7
 8008df2:	08db      	lsrs	r3, r3, #3
 8008df4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	fb02 f303 	mul.w	r3, r2, r3
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr

08008e0a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b082      	sub	sp, #8
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	e042      	b.n	8008ea2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d106      	bne.n	8008e34 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7f8 fa36 	bl	80012a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2224      	movs	r2, #36	; 0x24
 8008e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f022 0201 	bic.w	r2, r2, #1
 8008e4a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fab5 	bl	80093c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f8c4 	bl	8008fe8 <UART_SetConfig>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d101      	bne.n	8008e6a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e01b      	b.n	8008ea2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	685a      	ldr	r2, [r3, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f042 0201 	orr.w	r2, r2, #1
 8008e98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fb34 	bl	8009508 <UART_CheckIdleState>
 8008ea0:	4603      	mov	r3, r0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b08a      	sub	sp, #40	; 0x28
 8008eae:	af02      	add	r7, sp, #8
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	603b      	str	r3, [r7, #0]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ec0:	2b20      	cmp	r3, #32
 8008ec2:	f040 808b 	bne.w	8008fdc <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <HAL_UART_Transmit+0x28>
 8008ecc:	88fb      	ldrh	r3, [r7, #6]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e083      	b.n	8008fde <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee0:	2b80      	cmp	r3, #128	; 0x80
 8008ee2:	d107      	bne.n	8008ef4 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689a      	ldr	r2, [r3, #8]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ef2:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2221      	movs	r2, #33	; 0x21
 8008f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f04:	f7f8 fc46 	bl	8001794 <HAL_GetTick>
 8008f08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	88fa      	ldrh	r2, [r7, #6]
 8008f0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	88fa      	ldrh	r2, [r7, #6]
 8008f16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f22:	d108      	bne.n	8008f36 <HAL_UART_Transmit+0x8c>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d104      	bne.n	8008f36 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	61bb      	str	r3, [r7, #24]
 8008f34:	e003      	b.n	8008f3e <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f3e:	e030      	b.n	8008fa2 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	2200      	movs	r2, #0
 8008f48:	2180      	movs	r1, #128	; 0x80
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f000 fb86 	bl	800965c <UART_WaitOnFlagUntilTimeout>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e03d      	b.n	8008fde <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10b      	bne.n	8008f80 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	3302      	adds	r3, #2
 8008f7c:	61bb      	str	r3, [r7, #24]
 8008f7e:	e007      	b.n	8008f90 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	781a      	ldrb	r2, [r3, #0]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1c8      	bne.n	8008f40 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2140      	movs	r1, #64	; 0x40
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 fb4f 	bl	800965c <UART_WaitOnFlagUntilTimeout>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d005      	beq.n	8008fd0 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e006      	b.n	8008fde <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2220      	movs	r2, #32
 8008fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	e000      	b.n	8008fde <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008fdc:	2302      	movs	r3, #2
  }
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3720      	adds	r7, #32
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fec:	b094      	sub	sp, #80	; 0x50
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	4b78      	ldr	r3, [pc, #480]	; (80091e0 <UART_SetConfig+0x1f8>)
 8008ffe:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	689a      	ldr	r2, [r3, #8]
 8009004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	431a      	orrs	r2, r3
 800900a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	431a      	orrs	r2, r3
 8009010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	4313      	orrs	r3, r2
 8009016:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4971      	ldr	r1, [pc, #452]	; (80091e4 <UART_SetConfig+0x1fc>)
 8009020:	4019      	ands	r1, r3
 8009022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009028:	430b      	orrs	r3, r1
 800902a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009038:	68d9      	ldr	r1, [r3, #12]
 800903a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	ea40 0301 	orr.w	r3, r0, r1
 8009042:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009046:	699b      	ldr	r3, [r3, #24]
 8009048:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	4b64      	ldr	r3, [pc, #400]	; (80091e0 <UART_SetConfig+0x1f8>)
 8009050:	429a      	cmp	r2, r3
 8009052:	d009      	beq.n	8009068 <UART_SetConfig+0x80>
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	4b63      	ldr	r3, [pc, #396]	; (80091e8 <UART_SetConfig+0x200>)
 800905a:	429a      	cmp	r2, r3
 800905c:	d004      	beq.n	8009068 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800905e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009060:	6a1a      	ldr	r2, [r3, #32]
 8009062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009064:	4313      	orrs	r3, r2
 8009066:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8009072:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8009076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800907c:	430b      	orrs	r3, r1
 800907e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009086:	f023 000f 	bic.w	r0, r3, #15
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	ea40 0301 	orr.w	r3, r0, r1
 8009096:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	4b53      	ldr	r3, [pc, #332]	; (80091ec <UART_SetConfig+0x204>)
 800909e:	429a      	cmp	r2, r3
 80090a0:	d102      	bne.n	80090a8 <UART_SetConfig+0xc0>
 80090a2:	2301      	movs	r3, #1
 80090a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80090a6:	e066      	b.n	8009176 <UART_SetConfig+0x18e>
 80090a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	4b50      	ldr	r3, [pc, #320]	; (80091f0 <UART_SetConfig+0x208>)
 80090ae:	429a      	cmp	r2, r3
 80090b0:	d102      	bne.n	80090b8 <UART_SetConfig+0xd0>
 80090b2:	2302      	movs	r3, #2
 80090b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80090b6:	e05e      	b.n	8009176 <UART_SetConfig+0x18e>
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	4b4d      	ldr	r3, [pc, #308]	; (80091f4 <UART_SetConfig+0x20c>)
 80090be:	429a      	cmp	r2, r3
 80090c0:	d102      	bne.n	80090c8 <UART_SetConfig+0xe0>
 80090c2:	2304      	movs	r3, #4
 80090c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80090c6:	e056      	b.n	8009176 <UART_SetConfig+0x18e>
 80090c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	4b4a      	ldr	r3, [pc, #296]	; (80091f8 <UART_SetConfig+0x210>)
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d102      	bne.n	80090d8 <UART_SetConfig+0xf0>
 80090d2:	2308      	movs	r3, #8
 80090d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80090d6:	e04e      	b.n	8009176 <UART_SetConfig+0x18e>
 80090d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	4b47      	ldr	r3, [pc, #284]	; (80091fc <UART_SetConfig+0x214>)
 80090de:	429a      	cmp	r2, r3
 80090e0:	d102      	bne.n	80090e8 <UART_SetConfig+0x100>
 80090e2:	2310      	movs	r3, #16
 80090e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80090e6:	e046      	b.n	8009176 <UART_SetConfig+0x18e>
 80090e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	4b44      	ldr	r3, [pc, #272]	; (8009200 <UART_SetConfig+0x218>)
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d102      	bne.n	80090f8 <UART_SetConfig+0x110>
 80090f2:	2320      	movs	r3, #32
 80090f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80090f6:	e03e      	b.n	8009176 <UART_SetConfig+0x18e>
 80090f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	4b41      	ldr	r3, [pc, #260]	; (8009204 <UART_SetConfig+0x21c>)
 80090fe:	429a      	cmp	r2, r3
 8009100:	d102      	bne.n	8009108 <UART_SetConfig+0x120>
 8009102:	2340      	movs	r3, #64	; 0x40
 8009104:	64bb      	str	r3, [r7, #72]	; 0x48
 8009106:	e036      	b.n	8009176 <UART_SetConfig+0x18e>
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	4b3e      	ldr	r3, [pc, #248]	; (8009208 <UART_SetConfig+0x220>)
 800910e:	429a      	cmp	r2, r3
 8009110:	d102      	bne.n	8009118 <UART_SetConfig+0x130>
 8009112:	2380      	movs	r3, #128	; 0x80
 8009114:	64bb      	str	r3, [r7, #72]	; 0x48
 8009116:	e02e      	b.n	8009176 <UART_SetConfig+0x18e>
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	4b3b      	ldr	r3, [pc, #236]	; (800920c <UART_SetConfig+0x224>)
 800911e:	429a      	cmp	r2, r3
 8009120:	d103      	bne.n	800912a <UART_SetConfig+0x142>
 8009122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009126:	64bb      	str	r3, [r7, #72]	; 0x48
 8009128:	e025      	b.n	8009176 <UART_SetConfig+0x18e>
 800912a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	4b38      	ldr	r3, [pc, #224]	; (8009210 <UART_SetConfig+0x228>)
 8009130:	429a      	cmp	r2, r3
 8009132:	d103      	bne.n	800913c <UART_SetConfig+0x154>
 8009134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009138:	64bb      	str	r3, [r7, #72]	; 0x48
 800913a:	e01c      	b.n	8009176 <UART_SetConfig+0x18e>
 800913c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	4b34      	ldr	r3, [pc, #208]	; (8009214 <UART_SetConfig+0x22c>)
 8009142:	429a      	cmp	r2, r3
 8009144:	d103      	bne.n	800914e <UART_SetConfig+0x166>
 8009146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800914a:	64bb      	str	r3, [r7, #72]	; 0x48
 800914c:	e013      	b.n	8009176 <UART_SetConfig+0x18e>
 800914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	4b31      	ldr	r3, [pc, #196]	; (8009218 <UART_SetConfig+0x230>)
 8009154:	429a      	cmp	r2, r3
 8009156:	d103      	bne.n	8009160 <UART_SetConfig+0x178>
 8009158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800915c:	64bb      	str	r3, [r7, #72]	; 0x48
 800915e:	e00a      	b.n	8009176 <UART_SetConfig+0x18e>
 8009160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	4b1e      	ldr	r3, [pc, #120]	; (80091e0 <UART_SetConfig+0x1f8>)
 8009166:	429a      	cmp	r2, r3
 8009168:	d103      	bne.n	8009172 <UART_SetConfig+0x18a>
 800916a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800916e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009170:	e001      	b.n	8009176 <UART_SetConfig+0x18e>
 8009172:	2300      	movs	r3, #0
 8009174:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	4b19      	ldr	r3, [pc, #100]	; (80091e0 <UART_SetConfig+0x1f8>)
 800917c:	429a      	cmp	r2, r3
 800917e:	d005      	beq.n	800918c <UART_SetConfig+0x1a4>
 8009180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	4b18      	ldr	r3, [pc, #96]	; (80091e8 <UART_SetConfig+0x200>)
 8009186:	429a      	cmp	r2, r3
 8009188:	f040 8094 	bne.w	80092b4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800918c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800918e:	2200      	movs	r2, #0
 8009190:	623b      	str	r3, [r7, #32]
 8009192:	627a      	str	r2, [r7, #36]	; 0x24
 8009194:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009198:	f7fc f932 	bl	8005400 <HAL_RCCEx_GetPeriphCLKFreq>
 800919c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800919e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f000 80f7 	beq.w	8009394 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	4a1c      	ldr	r2, [pc, #112]	; (800921c <UART_SetConfig+0x234>)
 80091ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091b0:	461a      	mov	r2, r3
 80091b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80091b8:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	4613      	mov	r3, r2
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	4413      	add	r3, r2
 80091c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d305      	bcc.n	80091d6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d924      	bls.n	8009220 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80091dc:	e069      	b.n	80092b2 <UART_SetConfig+0x2ca>
 80091de:	bf00      	nop
 80091e0:	44002400 	.word	0x44002400
 80091e4:	cfff69f3 	.word	0xcfff69f3
 80091e8:	54002400 	.word	0x54002400
 80091ec:	40013800 	.word	0x40013800
 80091f0:	40004400 	.word	0x40004400
 80091f4:	40004800 	.word	0x40004800
 80091f8:	40004c00 	.word	0x40004c00
 80091fc:	40005000 	.word	0x40005000
 8009200:	40006400 	.word	0x40006400
 8009204:	40007800 	.word	0x40007800
 8009208:	40007c00 	.word	0x40007c00
 800920c:	40008000 	.word	0x40008000
 8009210:	40006800 	.word	0x40006800
 8009214:	40006c00 	.word	0x40006c00
 8009218:	40008400 	.word	0x40008400
 800921c:	0800ab04 	.word	0x0800ab04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009222:	2200      	movs	r2, #0
 8009224:	61bb      	str	r3, [r7, #24]
 8009226:	61fa      	str	r2, [r7, #28]
 8009228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	4a64      	ldr	r2, [pc, #400]	; (80093c0 <UART_SetConfig+0x3d8>)
 800922e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009232:	b29b      	uxth	r3, r3
 8009234:	2200      	movs	r2, #0
 8009236:	613b      	str	r3, [r7, #16]
 8009238:	617a      	str	r2, [r7, #20]
 800923a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800923e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009242:	f7f7 f823 	bl	800028c <__aeabi_uldivmod>
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4610      	mov	r0, r2
 800924c:	4619      	mov	r1, r3
 800924e:	f04f 0200 	mov.w	r2, #0
 8009252:	f04f 0300 	mov.w	r3, #0
 8009256:	020b      	lsls	r3, r1, #8
 8009258:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800925c:	0202      	lsls	r2, r0, #8
 800925e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009260:	6849      	ldr	r1, [r1, #4]
 8009262:	0849      	lsrs	r1, r1, #1
 8009264:	2000      	movs	r0, #0
 8009266:	460c      	mov	r4, r1
 8009268:	4605      	mov	r5, r0
 800926a:	eb12 0804 	adds.w	r8, r2, r4
 800926e:	eb43 0905 	adc.w	r9, r3, r5
 8009272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	60bb      	str	r3, [r7, #8]
 800927a:	60fa      	str	r2, [r7, #12]
 800927c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009280:	4640      	mov	r0, r8
 8009282:	4649      	mov	r1, r9
 8009284:	f7f7 f802 	bl	800028c <__aeabi_uldivmod>
 8009288:	4602      	mov	r2, r0
 800928a:	460b      	mov	r3, r1
 800928c:	4613      	mov	r3, r2
 800928e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009296:	d308      	bcc.n	80092aa <UART_SetConfig+0x2c2>
 8009298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800929e:	d204      	bcs.n	80092aa <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 80092a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092a6:	60da      	str	r2, [r3, #12]
 80092a8:	e003      	b.n	80092b2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80092b0:	e070      	b.n	8009394 <UART_SetConfig+0x3ac>
 80092b2:	e06f      	b.n	8009394 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	69db      	ldr	r3, [r3, #28]
 80092b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092bc:	d13c      	bne.n	8009338 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80092be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092c0:	2200      	movs	r2, #0
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	607a      	str	r2, [r7, #4]
 80092c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092ca:	f7fc f899 	bl	8005400 <HAL_RCCEx_GetPeriphCLKFreq>
 80092ce:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d05e      	beq.n	8009394 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092da:	4a39      	ldr	r2, [pc, #228]	; (80093c0 <UART_SetConfig+0x3d8>)
 80092dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092e0:	461a      	mov	r2, r3
 80092e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80092e8:	005a      	lsls	r2, r3, #1
 80092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	085b      	lsrs	r3, r3, #1
 80092f0:	441a      	add	r2, r3
 80092f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80092fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092fe:	2b0f      	cmp	r3, #15
 8009300:	d916      	bls.n	8009330 <UART_SetConfig+0x348>
 8009302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009308:	d212      	bcs.n	8009330 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800930a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930c:	b29b      	uxth	r3, r3
 800930e:	f023 030f 	bic.w	r3, r3, #15
 8009312:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009316:	085b      	lsrs	r3, r3, #1
 8009318:	b29b      	uxth	r3, r3
 800931a:	f003 0307 	and.w	r3, r3, #7
 800931e:	b29a      	uxth	r2, r3
 8009320:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009322:	4313      	orrs	r3, r2
 8009324:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800932c:	60da      	str	r2, [r3, #12]
 800932e:	e031      	b.n	8009394 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009336:	e02d      	b.n	8009394 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800933a:	2200      	movs	r2, #0
 800933c:	469a      	mov	sl, r3
 800933e:	4693      	mov	fp, r2
 8009340:	4650      	mov	r0, sl
 8009342:	4659      	mov	r1, fp
 8009344:	f7fc f85c 	bl	8005400 <HAL_RCCEx_GetPeriphCLKFreq>
 8009348:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800934a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800934c:	2b00      	cmp	r3, #0
 800934e:	d021      	beq.n	8009394 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009354:	4a1a      	ldr	r2, [pc, #104]	; (80093c0 <UART_SetConfig+0x3d8>)
 8009356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800935a:	461a      	mov	r2, r3
 800935c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800935e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	085b      	lsrs	r3, r3, #1
 8009368:	441a      	add	r2, r3
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009372:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009376:	2b0f      	cmp	r3, #15
 8009378:	d909      	bls.n	800938e <UART_SetConfig+0x3a6>
 800937a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800937c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009380:	d205      	bcs.n	800938e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009384:	b29a      	uxth	r2, r3
 8009386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	60da      	str	r2, [r3, #12]
 800938c:	e002      	b.n	8009394 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009396:	2201      	movs	r2, #1
 8009398:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800939c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939e:	2201      	movs	r2, #1
 80093a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a6:	2200      	movs	r2, #0
 80093a8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80093aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ac:	2200      	movs	r2, #0
 80093ae:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80093b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3750      	adds	r7, #80	; 0x50
 80093b8:	46bd      	mov	sp, r7
 80093ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093be:	bf00      	nop
 80093c0:	0800ab04 	.word	0x0800ab04

080093c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d0:	f003 0308 	and.w	r3, r3, #8
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00a      	beq.n	80093ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f2:	f003 0301 	and.w	r3, r3, #1
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00a      	beq.n	8009410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009414:	f003 0302 	and.w	r3, r3, #2
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00a      	beq.n	8009432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	430a      	orrs	r2, r1
 8009430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009436:	f003 0304 	and.w	r3, r3, #4
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00a      	beq.n	8009454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	430a      	orrs	r2, r1
 8009452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009458:	f003 0310 	and.w	r3, r3, #16
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00a      	beq.n	8009476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	430a      	orrs	r2, r1
 8009474:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947a:	f003 0320 	and.w	r3, r3, #32
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00a      	beq.n	8009498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	430a      	orrs	r2, r1
 8009496:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d01a      	beq.n	80094da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094c2:	d10a      	bne.n	80094da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00a      	beq.n	80094fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	430a      	orrs	r2, r1
 80094fa:	605a      	str	r2, [r3, #4]
  }
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b098      	sub	sp, #96	; 0x60
 800950c:	af02      	add	r7, sp, #8
 800950e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009518:	f7f8 f93c 	bl	8001794 <HAL_GetTick>
 800951c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0308 	and.w	r3, r3, #8
 8009528:	2b08      	cmp	r3, #8
 800952a:	d12f      	bne.n	800958c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800952c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009534:	2200      	movs	r2, #0
 8009536:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 f88e 	bl	800965c <UART_WaitOnFlagUntilTimeout>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d022      	beq.n	800958c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954e:	e853 3f00 	ldrex	r3, [r3]
 8009552:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009556:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800955a:	653b      	str	r3, [r7, #80]	; 0x50
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	461a      	mov	r2, r3
 8009562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009564:	647b      	str	r3, [r7, #68]	; 0x44
 8009566:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009568:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800956a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800956c:	e841 2300 	strex	r3, r2, [r1]
 8009570:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1e6      	bne.n	8009546 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2220      	movs	r2, #32
 800957c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e063      	b.n	8009654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0304 	and.w	r3, r3, #4
 8009596:	2b04      	cmp	r3, #4
 8009598:	d149      	bne.n	800962e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800959a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095a2:	2200      	movs	r2, #0
 80095a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f857 	bl	800965c <UART_WaitOnFlagUntilTimeout>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d03c      	beq.n	800962e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	e853 3f00 	ldrex	r3, [r3]
 80095c0:	623b      	str	r3, [r7, #32]
   return(result);
 80095c2:	6a3b      	ldr	r3, [r7, #32]
 80095c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d2:	633b      	str	r3, [r7, #48]	; 0x30
 80095d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e6      	bne.n	80095b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3308      	adds	r3, #8
 80095ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	e853 3f00 	ldrex	r3, [r3]
 80095f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f023 0301 	bic.w	r3, r3, #1
 80095fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3308      	adds	r3, #8
 8009604:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009606:	61fa      	str	r2, [r7, #28]
 8009608:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960a:	69b9      	ldr	r1, [r7, #24]
 800960c:	69fa      	ldr	r2, [r7, #28]
 800960e:	e841 2300 	strex	r3, r2, [r1]
 8009612:	617b      	str	r3, [r7, #20]
   return(result);
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1e5      	bne.n	80095e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2220      	movs	r2, #32
 800961e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	e012      	b.n	8009654 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2220      	movs	r2, #32
 8009632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2220      	movs	r2, #32
 800963a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3758      	adds	r7, #88	; 0x58
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	603b      	str	r3, [r7, #0]
 8009668:	4613      	mov	r3, r2
 800966a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800966c:	e049      	b.n	8009702 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009674:	d045      	beq.n	8009702 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009676:	f7f8 f88d 	bl	8001794 <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	429a      	cmp	r2, r3
 8009684:	d302      	bcc.n	800968c <UART_WaitOnFlagUntilTimeout+0x30>
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800968c:	2303      	movs	r3, #3
 800968e:	e048      	b.n	8009722 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0304 	and.w	r3, r3, #4
 800969a:	2b00      	cmp	r3, #0
 800969c:	d031      	beq.n	8009702 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	69db      	ldr	r3, [r3, #28]
 80096a4:	f003 0308 	and.w	r3, r3, #8
 80096a8:	2b08      	cmp	r3, #8
 80096aa:	d110      	bne.n	80096ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2208      	movs	r2, #8
 80096b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f000 f838 	bl	800972a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2208      	movs	r2, #8
 80096be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e029      	b.n	8009722 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	69db      	ldr	r3, [r3, #28]
 80096d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096dc:	d111      	bne.n	8009702 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f000 f81e 	bl	800972a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2220      	movs	r2, #32
 80096f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e00f      	b.n	8009722 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	69da      	ldr	r2, [r3, #28]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	4013      	ands	r3, r2
 800970c:	68ba      	ldr	r2, [r7, #8]
 800970e:	429a      	cmp	r2, r3
 8009710:	bf0c      	ite	eq
 8009712:	2301      	moveq	r3, #1
 8009714:	2300      	movne	r3, #0
 8009716:	b2db      	uxtb	r3, r3
 8009718:	461a      	mov	r2, r3
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	429a      	cmp	r2, r3
 800971e:	d0a6      	beq.n	800966e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800972a:	b480      	push	{r7}
 800972c:	b095      	sub	sp, #84	; 0x54
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800973a:	e853 3f00 	ldrex	r3, [r3]
 800973e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	461a      	mov	r2, r3
 800974e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009750:	643b      	str	r3, [r7, #64]	; 0x40
 8009752:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009754:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009756:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800975e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e6      	bne.n	8009732 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3308      	adds	r3, #8
 800976a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	e853 3f00 	ldrex	r3, [r3]
 8009772:	61fb      	str	r3, [r7, #28]
   return(result);
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800977a:	f023 0301 	bic.w	r3, r3, #1
 800977e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	3308      	adds	r3, #8
 8009786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009788:	62fa      	str	r2, [r7, #44]	; 0x2c
 800978a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800978e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009790:	e841 2300 	strex	r3, r2, [r1]
 8009794:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e3      	bne.n	8009764 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d118      	bne.n	80097d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	e853 3f00 	ldrex	r3, [r3]
 80097b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	f023 0310 	bic.w	r3, r3, #16
 80097b8:	647b      	str	r3, [r7, #68]	; 0x44
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	461a      	mov	r2, r3
 80097c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c2:	61bb      	str	r3, [r7, #24]
 80097c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	6979      	ldr	r1, [r7, #20]
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	e841 2300 	strex	r3, r2, [r1]
 80097ce:	613b      	str	r3, [r7, #16]
   return(result);
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e6      	bne.n	80097a4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2220      	movs	r2, #32
 80097da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80097ea:	bf00      	nop
 80097ec:	3754      	adds	r7, #84	; 0x54
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b085      	sub	sp, #20
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009804:	2b01      	cmp	r3, #1
 8009806:	d101      	bne.n	800980c <HAL_UARTEx_DisableFifoMode+0x16>
 8009808:	2302      	movs	r3, #2
 800980a:	e027      	b.n	800985c <HAL_UARTEx_DisableFifoMode+0x66>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2224      	movs	r2, #36	; 0x24
 8009818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f022 0201 	bic.w	r2, r2, #1
 8009832:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800983a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2220      	movs	r2, #32
 800984e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800985a:	2300      	movs	r3, #0
}
 800985c:	4618      	mov	r0, r3
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009878:	2b01      	cmp	r3, #1
 800987a:	d101      	bne.n	8009880 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800987c:	2302      	movs	r3, #2
 800987e:	e02d      	b.n	80098dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2224      	movs	r2, #36	; 0x24
 800988c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f022 0201 	bic.w	r2, r2, #1
 80098a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	430a      	orrs	r2, r1
 80098ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f84f 	bl	8009960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2220      	movs	r2, #32
 80098ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}

080098e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d101      	bne.n	80098fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80098f8:	2302      	movs	r3, #2
 80098fa:	e02d      	b.n	8009958 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2224      	movs	r2, #36	; 0x24
 8009908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f022 0201 	bic.w	r2, r2, #1
 8009922:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	430a      	orrs	r2, r1
 8009936:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f811 	bl	8009960 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2220      	movs	r2, #32
 800994a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800996c:	2b00      	cmp	r3, #0
 800996e:	d108      	bne.n	8009982 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009980:	e031      	b.n	80099e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009982:	2308      	movs	r3, #8
 8009984:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009986:	2308      	movs	r3, #8
 8009988:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	0e5b      	lsrs	r3, r3, #25
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f003 0307 	and.w	r3, r3, #7
 8009998:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	0f5b      	lsrs	r3, r3, #29
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	f003 0307 	and.w	r3, r3, #7
 80099a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099aa:	7bbb      	ldrb	r3, [r7, #14]
 80099ac:	7b3a      	ldrb	r2, [r7, #12]
 80099ae:	4911      	ldr	r1, [pc, #68]	; (80099f4 <UARTEx_SetNbDataToProcess+0x94>)
 80099b0:	5c8a      	ldrb	r2, [r1, r2]
 80099b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80099b6:	7b3a      	ldrb	r2, [r7, #12]
 80099b8:	490f      	ldr	r1, [pc, #60]	; (80099f8 <UARTEx_SetNbDataToProcess+0x98>)
 80099ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	7b7a      	ldrb	r2, [r7, #13]
 80099cc:	4909      	ldr	r1, [pc, #36]	; (80099f4 <UARTEx_SetNbDataToProcess+0x94>)
 80099ce:	5c8a      	ldrb	r2, [r1, r2]
 80099d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80099d4:	7b7a      	ldrb	r2, [r7, #13]
 80099d6:	4908      	ldr	r1, [pc, #32]	; (80099f8 <UARTEx_SetNbDataToProcess+0x98>)
 80099d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099da:	fb93 f3f2 	sdiv	r3, r3, r2
 80099de:	b29a      	uxth	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80099e6:	bf00      	nop
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	0800ab1c 	.word	0x0800ab1c
 80099f8:	0800ab24 	.word	0x0800ab24

080099fc <std>:
 80099fc:	2300      	movs	r3, #0
 80099fe:	b510      	push	{r4, lr}
 8009a00:	4604      	mov	r4, r0
 8009a02:	6083      	str	r3, [r0, #8]
 8009a04:	8181      	strh	r1, [r0, #12]
 8009a06:	4619      	mov	r1, r3
 8009a08:	6643      	str	r3, [r0, #100]	; 0x64
 8009a0a:	81c2      	strh	r2, [r0, #14]
 8009a0c:	2208      	movs	r2, #8
 8009a0e:	6183      	str	r3, [r0, #24]
 8009a10:	e9c0 3300 	strd	r3, r3, [r0]
 8009a14:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a18:	305c      	adds	r0, #92	; 0x5c
 8009a1a:	f000 f9f7 	bl	8009e0c <memset>
 8009a1e:	4b0d      	ldr	r3, [pc, #52]	; (8009a54 <std+0x58>)
 8009a20:	6224      	str	r4, [r4, #32]
 8009a22:	6263      	str	r3, [r4, #36]	; 0x24
 8009a24:	4b0c      	ldr	r3, [pc, #48]	; (8009a58 <std+0x5c>)
 8009a26:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a28:	4b0c      	ldr	r3, [pc, #48]	; (8009a5c <std+0x60>)
 8009a2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a2c:	4b0c      	ldr	r3, [pc, #48]	; (8009a60 <std+0x64>)
 8009a2e:	6323      	str	r3, [r4, #48]	; 0x30
 8009a30:	4b0c      	ldr	r3, [pc, #48]	; (8009a64 <std+0x68>)
 8009a32:	429c      	cmp	r4, r3
 8009a34:	d006      	beq.n	8009a44 <std+0x48>
 8009a36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009a3a:	4294      	cmp	r4, r2
 8009a3c:	d002      	beq.n	8009a44 <std+0x48>
 8009a3e:	33d0      	adds	r3, #208	; 0xd0
 8009a40:	429c      	cmp	r4, r3
 8009a42:	d105      	bne.n	8009a50 <std+0x54>
 8009a44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a4c:	f000 ba56 	b.w	8009efc <__retarget_lock_init_recursive>
 8009a50:	bd10      	pop	{r4, pc}
 8009a52:	bf00      	nop
 8009a54:	08009c5d 	.word	0x08009c5d
 8009a58:	08009c7f 	.word	0x08009c7f
 8009a5c:	08009cb7 	.word	0x08009cb7
 8009a60:	08009cdb 	.word	0x08009cdb
 8009a64:	200001c4 	.word	0x200001c4

08009a68 <stdio_exit_handler>:
 8009a68:	4a02      	ldr	r2, [pc, #8]	; (8009a74 <stdio_exit_handler+0xc>)
 8009a6a:	4903      	ldr	r1, [pc, #12]	; (8009a78 <stdio_exit_handler+0x10>)
 8009a6c:	4803      	ldr	r0, [pc, #12]	; (8009a7c <stdio_exit_handler+0x14>)
 8009a6e:	f000 b869 	b.w	8009b44 <_fwalk_sglue>
 8009a72:	bf00      	nop
 8009a74:	2000000c 	.word	0x2000000c
 8009a78:	0800a7a9 	.word	0x0800a7a9
 8009a7c:	20000018 	.word	0x20000018

08009a80 <cleanup_stdio>:
 8009a80:	6841      	ldr	r1, [r0, #4]
 8009a82:	4b0c      	ldr	r3, [pc, #48]	; (8009ab4 <cleanup_stdio+0x34>)
 8009a84:	4299      	cmp	r1, r3
 8009a86:	b510      	push	{r4, lr}
 8009a88:	4604      	mov	r4, r0
 8009a8a:	d001      	beq.n	8009a90 <cleanup_stdio+0x10>
 8009a8c:	f000 fe8c 	bl	800a7a8 <_fflush_r>
 8009a90:	68a1      	ldr	r1, [r4, #8]
 8009a92:	4b09      	ldr	r3, [pc, #36]	; (8009ab8 <cleanup_stdio+0x38>)
 8009a94:	4299      	cmp	r1, r3
 8009a96:	d002      	beq.n	8009a9e <cleanup_stdio+0x1e>
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f000 fe85 	bl	800a7a8 <_fflush_r>
 8009a9e:	68e1      	ldr	r1, [r4, #12]
 8009aa0:	4b06      	ldr	r3, [pc, #24]	; (8009abc <cleanup_stdio+0x3c>)
 8009aa2:	4299      	cmp	r1, r3
 8009aa4:	d004      	beq.n	8009ab0 <cleanup_stdio+0x30>
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aac:	f000 be7c 	b.w	800a7a8 <_fflush_r>
 8009ab0:	bd10      	pop	{r4, pc}
 8009ab2:	bf00      	nop
 8009ab4:	200001c4 	.word	0x200001c4
 8009ab8:	2000022c 	.word	0x2000022c
 8009abc:	20000294 	.word	0x20000294

08009ac0 <global_stdio_init.part.0>:
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	4b0b      	ldr	r3, [pc, #44]	; (8009af0 <global_stdio_init.part.0+0x30>)
 8009ac4:	2104      	movs	r1, #4
 8009ac6:	4c0b      	ldr	r4, [pc, #44]	; (8009af4 <global_stdio_init.part.0+0x34>)
 8009ac8:	4a0b      	ldr	r2, [pc, #44]	; (8009af8 <global_stdio_init.part.0+0x38>)
 8009aca:	4620      	mov	r0, r4
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f7ff ff94 	bl	80099fc <std>
 8009ad4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009ad8:	2201      	movs	r2, #1
 8009ada:	2109      	movs	r1, #9
 8009adc:	f7ff ff8e 	bl	80099fc <std>
 8009ae0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009ae4:	2202      	movs	r2, #2
 8009ae6:	2112      	movs	r1, #18
 8009ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009aec:	f7ff bf86 	b.w	80099fc <std>
 8009af0:	200002fc 	.word	0x200002fc
 8009af4:	200001c4 	.word	0x200001c4
 8009af8:	08009a69 	.word	0x08009a69

08009afc <__sfp_lock_acquire>:
 8009afc:	4801      	ldr	r0, [pc, #4]	; (8009b04 <__sfp_lock_acquire+0x8>)
 8009afe:	f000 b9fe 	b.w	8009efe <__retarget_lock_acquire_recursive>
 8009b02:	bf00      	nop
 8009b04:	20000305 	.word	0x20000305

08009b08 <__sfp_lock_release>:
 8009b08:	4801      	ldr	r0, [pc, #4]	; (8009b10 <__sfp_lock_release+0x8>)
 8009b0a:	f000 b9f9 	b.w	8009f00 <__retarget_lock_release_recursive>
 8009b0e:	bf00      	nop
 8009b10:	20000305 	.word	0x20000305

08009b14 <__sinit>:
 8009b14:	b510      	push	{r4, lr}
 8009b16:	4604      	mov	r4, r0
 8009b18:	f7ff fff0 	bl	8009afc <__sfp_lock_acquire>
 8009b1c:	6a23      	ldr	r3, [r4, #32]
 8009b1e:	b11b      	cbz	r3, 8009b28 <__sinit+0x14>
 8009b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b24:	f7ff bff0 	b.w	8009b08 <__sfp_lock_release>
 8009b28:	4b04      	ldr	r3, [pc, #16]	; (8009b3c <__sinit+0x28>)
 8009b2a:	6223      	str	r3, [r4, #32]
 8009b2c:	4b04      	ldr	r3, [pc, #16]	; (8009b40 <__sinit+0x2c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1f5      	bne.n	8009b20 <__sinit+0xc>
 8009b34:	f7ff ffc4 	bl	8009ac0 <global_stdio_init.part.0>
 8009b38:	e7f2      	b.n	8009b20 <__sinit+0xc>
 8009b3a:	bf00      	nop
 8009b3c:	08009a81 	.word	0x08009a81
 8009b40:	200002fc 	.word	0x200002fc

08009b44 <_fwalk_sglue>:
 8009b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b48:	4607      	mov	r7, r0
 8009b4a:	4688      	mov	r8, r1
 8009b4c:	4614      	mov	r4, r2
 8009b4e:	2600      	movs	r6, #0
 8009b50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b54:	f1b9 0901 	subs.w	r9, r9, #1
 8009b58:	d505      	bpl.n	8009b66 <_fwalk_sglue+0x22>
 8009b5a:	6824      	ldr	r4, [r4, #0]
 8009b5c:	2c00      	cmp	r4, #0
 8009b5e:	d1f7      	bne.n	8009b50 <_fwalk_sglue+0xc>
 8009b60:	4630      	mov	r0, r6
 8009b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b66:	89ab      	ldrh	r3, [r5, #12]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d907      	bls.n	8009b7c <_fwalk_sglue+0x38>
 8009b6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b70:	3301      	adds	r3, #1
 8009b72:	d003      	beq.n	8009b7c <_fwalk_sglue+0x38>
 8009b74:	4629      	mov	r1, r5
 8009b76:	4638      	mov	r0, r7
 8009b78:	47c0      	blx	r8
 8009b7a:	4306      	orrs	r6, r0
 8009b7c:	3568      	adds	r5, #104	; 0x68
 8009b7e:	e7e9      	b.n	8009b54 <_fwalk_sglue+0x10>

08009b80 <iprintf>:
 8009b80:	b40f      	push	{r0, r1, r2, r3}
 8009b82:	b507      	push	{r0, r1, r2, lr}
 8009b84:	4906      	ldr	r1, [pc, #24]	; (8009ba0 <iprintf+0x20>)
 8009b86:	ab04      	add	r3, sp, #16
 8009b88:	6808      	ldr	r0, [r1, #0]
 8009b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b8e:	6881      	ldr	r1, [r0, #8]
 8009b90:	9301      	str	r3, [sp, #4]
 8009b92:	f000 fad9 	bl	800a148 <_vfiprintf_r>
 8009b96:	b003      	add	sp, #12
 8009b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b9c:	b004      	add	sp, #16
 8009b9e:	4770      	bx	lr
 8009ba0:	20000064 	.word	0x20000064

08009ba4 <_puts_r>:
 8009ba4:	6a03      	ldr	r3, [r0, #32]
 8009ba6:	b570      	push	{r4, r5, r6, lr}
 8009ba8:	4605      	mov	r5, r0
 8009baa:	460e      	mov	r6, r1
 8009bac:	6884      	ldr	r4, [r0, #8]
 8009bae:	b90b      	cbnz	r3, 8009bb4 <_puts_r+0x10>
 8009bb0:	f7ff ffb0 	bl	8009b14 <__sinit>
 8009bb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bb6:	07db      	lsls	r3, r3, #31
 8009bb8:	d405      	bmi.n	8009bc6 <_puts_r+0x22>
 8009bba:	89a3      	ldrh	r3, [r4, #12]
 8009bbc:	0598      	lsls	r0, r3, #22
 8009bbe:	d402      	bmi.n	8009bc6 <_puts_r+0x22>
 8009bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bc2:	f000 f99c 	bl	8009efe <__retarget_lock_acquire_recursive>
 8009bc6:	89a3      	ldrh	r3, [r4, #12]
 8009bc8:	0719      	lsls	r1, r3, #28
 8009bca:	d513      	bpl.n	8009bf4 <_puts_r+0x50>
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	b18b      	cbz	r3, 8009bf4 <_puts_r+0x50>
 8009bd0:	3e01      	subs	r6, #1
 8009bd2:	68a3      	ldr	r3, [r4, #8]
 8009bd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	60a3      	str	r3, [r4, #8]
 8009bdc:	b9e9      	cbnz	r1, 8009c1a <_puts_r+0x76>
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	da2e      	bge.n	8009c40 <_puts_r+0x9c>
 8009be2:	4622      	mov	r2, r4
 8009be4:	210a      	movs	r1, #10
 8009be6:	4628      	mov	r0, r5
 8009be8:	f000 f87b 	bl	8009ce2 <__swbuf_r>
 8009bec:	3001      	adds	r0, #1
 8009bee:	d007      	beq.n	8009c00 <_puts_r+0x5c>
 8009bf0:	250a      	movs	r5, #10
 8009bf2:	e007      	b.n	8009c04 <_puts_r+0x60>
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f000 f8b0 	bl	8009d5c <__swsetup_r>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d0e7      	beq.n	8009bd0 <_puts_r+0x2c>
 8009c00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c06:	07da      	lsls	r2, r3, #31
 8009c08:	d405      	bmi.n	8009c16 <_puts_r+0x72>
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	059b      	lsls	r3, r3, #22
 8009c0e:	d402      	bmi.n	8009c16 <_puts_r+0x72>
 8009c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c12:	f000 f975 	bl	8009f00 <__retarget_lock_release_recursive>
 8009c16:	4628      	mov	r0, r5
 8009c18:	bd70      	pop	{r4, r5, r6, pc}
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	da04      	bge.n	8009c28 <_puts_r+0x84>
 8009c1e:	69a2      	ldr	r2, [r4, #24]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	dc06      	bgt.n	8009c32 <_puts_r+0x8e>
 8009c24:	290a      	cmp	r1, #10
 8009c26:	d004      	beq.n	8009c32 <_puts_r+0x8e>
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	1c5a      	adds	r2, r3, #1
 8009c2c:	6022      	str	r2, [r4, #0]
 8009c2e:	7019      	strb	r1, [r3, #0]
 8009c30:	e7cf      	b.n	8009bd2 <_puts_r+0x2e>
 8009c32:	4622      	mov	r2, r4
 8009c34:	4628      	mov	r0, r5
 8009c36:	f000 f854 	bl	8009ce2 <__swbuf_r>
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	d1c9      	bne.n	8009bd2 <_puts_r+0x2e>
 8009c3e:	e7df      	b.n	8009c00 <_puts_r+0x5c>
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	250a      	movs	r5, #10
 8009c44:	1c5a      	adds	r2, r3, #1
 8009c46:	6022      	str	r2, [r4, #0]
 8009c48:	701d      	strb	r5, [r3, #0]
 8009c4a:	e7db      	b.n	8009c04 <_puts_r+0x60>

08009c4c <puts>:
 8009c4c:	4b02      	ldr	r3, [pc, #8]	; (8009c58 <puts+0xc>)
 8009c4e:	4601      	mov	r1, r0
 8009c50:	6818      	ldr	r0, [r3, #0]
 8009c52:	f7ff bfa7 	b.w	8009ba4 <_puts_r>
 8009c56:	bf00      	nop
 8009c58:	20000064 	.word	0x20000064

08009c5c <__sread>:
 8009c5c:	b510      	push	{r4, lr}
 8009c5e:	460c      	mov	r4, r1
 8009c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c64:	f000 f8fc 	bl	8009e60 <_read_r>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	bfab      	itete	ge
 8009c6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8009c70:	181b      	addge	r3, r3, r0
 8009c72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c76:	bfac      	ite	ge
 8009c78:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c7a:	81a3      	strhlt	r3, [r4, #12]
 8009c7c:	bd10      	pop	{r4, pc}

08009c7e <__swrite>:
 8009c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c82:	461f      	mov	r7, r3
 8009c84:	898b      	ldrh	r3, [r1, #12]
 8009c86:	4605      	mov	r5, r0
 8009c88:	460c      	mov	r4, r1
 8009c8a:	05db      	lsls	r3, r3, #23
 8009c8c:	4616      	mov	r6, r2
 8009c8e:	d505      	bpl.n	8009c9c <__swrite+0x1e>
 8009c90:	2302      	movs	r3, #2
 8009c92:	2200      	movs	r2, #0
 8009c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c98:	f000 f8d0 	bl	8009e3c <_lseek_r>
 8009c9c:	89a3      	ldrh	r3, [r4, #12]
 8009c9e:	4632      	mov	r2, r6
 8009ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009caa:	81a3      	strh	r3, [r4, #12]
 8009cac:	463b      	mov	r3, r7
 8009cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cb2:	f000 b8e7 	b.w	8009e84 <_write_r>

08009cb6 <__sseek>:
 8009cb6:	b510      	push	{r4, lr}
 8009cb8:	460c      	mov	r4, r1
 8009cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cbe:	f000 f8bd 	bl	8009e3c <_lseek_r>
 8009cc2:	1c43      	adds	r3, r0, #1
 8009cc4:	89a3      	ldrh	r3, [r4, #12]
 8009cc6:	bf15      	itete	ne
 8009cc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009cca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009cce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009cd2:	81a3      	strheq	r3, [r4, #12]
 8009cd4:	bf18      	it	ne
 8009cd6:	81a3      	strhne	r3, [r4, #12]
 8009cd8:	bd10      	pop	{r4, pc}

08009cda <__sclose>:
 8009cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cde:	f000 b89d 	b.w	8009e1c <_close_r>

08009ce2 <__swbuf_r>:
 8009ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce4:	460e      	mov	r6, r1
 8009ce6:	4614      	mov	r4, r2
 8009ce8:	4605      	mov	r5, r0
 8009cea:	b118      	cbz	r0, 8009cf4 <__swbuf_r+0x12>
 8009cec:	6a03      	ldr	r3, [r0, #32]
 8009cee:	b90b      	cbnz	r3, 8009cf4 <__swbuf_r+0x12>
 8009cf0:	f7ff ff10 	bl	8009b14 <__sinit>
 8009cf4:	69a3      	ldr	r3, [r4, #24]
 8009cf6:	60a3      	str	r3, [r4, #8]
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	071a      	lsls	r2, r3, #28
 8009cfc:	d525      	bpl.n	8009d4a <__swbuf_r+0x68>
 8009cfe:	6923      	ldr	r3, [r4, #16]
 8009d00:	b31b      	cbz	r3, 8009d4a <__swbuf_r+0x68>
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	b2f6      	uxtb	r6, r6
 8009d06:	6922      	ldr	r2, [r4, #16]
 8009d08:	4637      	mov	r7, r6
 8009d0a:	1a98      	subs	r0, r3, r2
 8009d0c:	6963      	ldr	r3, [r4, #20]
 8009d0e:	4283      	cmp	r3, r0
 8009d10:	dc04      	bgt.n	8009d1c <__swbuf_r+0x3a>
 8009d12:	4621      	mov	r1, r4
 8009d14:	4628      	mov	r0, r5
 8009d16:	f000 fd47 	bl	800a7a8 <_fflush_r>
 8009d1a:	b9e0      	cbnz	r0, 8009d56 <__swbuf_r+0x74>
 8009d1c:	68a3      	ldr	r3, [r4, #8]
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	60a3      	str	r3, [r4, #8]
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	6022      	str	r2, [r4, #0]
 8009d28:	701e      	strb	r6, [r3, #0]
 8009d2a:	1c43      	adds	r3, r0, #1
 8009d2c:	6962      	ldr	r2, [r4, #20]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d004      	beq.n	8009d3c <__swbuf_r+0x5a>
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	07db      	lsls	r3, r3, #31
 8009d36:	d506      	bpl.n	8009d46 <__swbuf_r+0x64>
 8009d38:	2e0a      	cmp	r6, #10
 8009d3a:	d104      	bne.n	8009d46 <__swbuf_r+0x64>
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 fd32 	bl	800a7a8 <_fflush_r>
 8009d44:	b938      	cbnz	r0, 8009d56 <__swbuf_r+0x74>
 8009d46:	4638      	mov	r0, r7
 8009d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d4a:	4621      	mov	r1, r4
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	f000 f805 	bl	8009d5c <__swsetup_r>
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d0d5      	beq.n	8009d02 <__swbuf_r+0x20>
 8009d56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009d5a:	e7f4      	b.n	8009d46 <__swbuf_r+0x64>

08009d5c <__swsetup_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4b2a      	ldr	r3, [pc, #168]	; (8009e08 <__swsetup_r+0xac>)
 8009d60:	4605      	mov	r5, r0
 8009d62:	460c      	mov	r4, r1
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	b118      	cbz	r0, 8009d70 <__swsetup_r+0x14>
 8009d68:	6a03      	ldr	r3, [r0, #32]
 8009d6a:	b90b      	cbnz	r3, 8009d70 <__swsetup_r+0x14>
 8009d6c:	f7ff fed2 	bl	8009b14 <__sinit>
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d76:	0718      	lsls	r0, r3, #28
 8009d78:	d422      	bmi.n	8009dc0 <__swsetup_r+0x64>
 8009d7a:	06d9      	lsls	r1, r3, #27
 8009d7c:	d407      	bmi.n	8009d8e <__swsetup_r+0x32>
 8009d7e:	2309      	movs	r3, #9
 8009d80:	602b      	str	r3, [r5, #0]
 8009d82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d8a:	81a3      	strh	r3, [r4, #12]
 8009d8c:	e034      	b.n	8009df8 <__swsetup_r+0x9c>
 8009d8e:	0758      	lsls	r0, r3, #29
 8009d90:	d512      	bpl.n	8009db8 <__swsetup_r+0x5c>
 8009d92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d94:	b141      	cbz	r1, 8009da8 <__swsetup_r+0x4c>
 8009d96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d9a:	4299      	cmp	r1, r3
 8009d9c:	d002      	beq.n	8009da4 <__swsetup_r+0x48>
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f000 f8b0 	bl	8009f04 <_free_r>
 8009da4:	2300      	movs	r3, #0
 8009da6:	6363      	str	r3, [r4, #52]	; 0x34
 8009da8:	89a3      	ldrh	r3, [r4, #12]
 8009daa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	2300      	movs	r3, #0
 8009db2:	6063      	str	r3, [r4, #4]
 8009db4:	6923      	ldr	r3, [r4, #16]
 8009db6:	6023      	str	r3, [r4, #0]
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	f043 0308 	orr.w	r3, r3, #8
 8009dbe:	81a3      	strh	r3, [r4, #12]
 8009dc0:	6923      	ldr	r3, [r4, #16]
 8009dc2:	b94b      	cbnz	r3, 8009dd8 <__swsetup_r+0x7c>
 8009dc4:	89a3      	ldrh	r3, [r4, #12]
 8009dc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009dce:	d003      	beq.n	8009dd8 <__swsetup_r+0x7c>
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f000 fd35 	bl	800a842 <__smakebuf_r>
 8009dd8:	89a0      	ldrh	r0, [r4, #12]
 8009dda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dde:	f010 0301 	ands.w	r3, r0, #1
 8009de2:	d00a      	beq.n	8009dfa <__swsetup_r+0x9e>
 8009de4:	2300      	movs	r3, #0
 8009de6:	60a3      	str	r3, [r4, #8]
 8009de8:	6963      	ldr	r3, [r4, #20]
 8009dea:	425b      	negs	r3, r3
 8009dec:	61a3      	str	r3, [r4, #24]
 8009dee:	6923      	ldr	r3, [r4, #16]
 8009df0:	b943      	cbnz	r3, 8009e04 <__swsetup_r+0xa8>
 8009df2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009df6:	d1c4      	bne.n	8009d82 <__swsetup_r+0x26>
 8009df8:	bd38      	pop	{r3, r4, r5, pc}
 8009dfa:	0781      	lsls	r1, r0, #30
 8009dfc:	bf58      	it	pl
 8009dfe:	6963      	ldrpl	r3, [r4, #20]
 8009e00:	60a3      	str	r3, [r4, #8]
 8009e02:	e7f4      	b.n	8009dee <__swsetup_r+0x92>
 8009e04:	2000      	movs	r0, #0
 8009e06:	e7f7      	b.n	8009df8 <__swsetup_r+0x9c>
 8009e08:	20000064 	.word	0x20000064

08009e0c <memset>:
 8009e0c:	4402      	add	r2, r0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d100      	bne.n	8009e16 <memset+0xa>
 8009e14:	4770      	bx	lr
 8009e16:	f803 1b01 	strb.w	r1, [r3], #1
 8009e1a:	e7f9      	b.n	8009e10 <memset+0x4>

08009e1c <_close_r>:
 8009e1c:	b538      	push	{r3, r4, r5, lr}
 8009e1e:	2300      	movs	r3, #0
 8009e20:	4d05      	ldr	r5, [pc, #20]	; (8009e38 <_close_r+0x1c>)
 8009e22:	4604      	mov	r4, r0
 8009e24:	4608      	mov	r0, r1
 8009e26:	602b      	str	r3, [r5, #0]
 8009e28:	f7f7 fb33 	bl	8001492 <_close>
 8009e2c:	1c43      	adds	r3, r0, #1
 8009e2e:	d102      	bne.n	8009e36 <_close_r+0x1a>
 8009e30:	682b      	ldr	r3, [r5, #0]
 8009e32:	b103      	cbz	r3, 8009e36 <_close_r+0x1a>
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	bd38      	pop	{r3, r4, r5, pc}
 8009e38:	20000300 	.word	0x20000300

08009e3c <_lseek_r>:
 8009e3c:	b538      	push	{r3, r4, r5, lr}
 8009e3e:	4604      	mov	r4, r0
 8009e40:	4d06      	ldr	r5, [pc, #24]	; (8009e5c <_lseek_r+0x20>)
 8009e42:	4608      	mov	r0, r1
 8009e44:	4611      	mov	r1, r2
 8009e46:	2200      	movs	r2, #0
 8009e48:	602a      	str	r2, [r5, #0]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	f7f7 fb48 	bl	80014e0 <_lseek>
 8009e50:	1c43      	adds	r3, r0, #1
 8009e52:	d102      	bne.n	8009e5a <_lseek_r+0x1e>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	b103      	cbz	r3, 8009e5a <_lseek_r+0x1e>
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	20000300 	.word	0x20000300

08009e60 <_read_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4604      	mov	r4, r0
 8009e64:	4d06      	ldr	r5, [pc, #24]	; (8009e80 <_read_r+0x20>)
 8009e66:	4608      	mov	r0, r1
 8009e68:	4611      	mov	r1, r2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	602a      	str	r2, [r5, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f7f7 fad6 	bl	8001420 <_read>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_read_r+0x1e>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_read_r+0x1e>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	20000300 	.word	0x20000300

08009e84 <_write_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4604      	mov	r4, r0
 8009e88:	4d06      	ldr	r5, [pc, #24]	; (8009ea4 <_write_r+0x20>)
 8009e8a:	4608      	mov	r0, r1
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	2200      	movs	r2, #0
 8009e90:	602a      	str	r2, [r5, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	f7f7 fae1 	bl	800145a <_write>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d102      	bne.n	8009ea2 <_write_r+0x1e>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	b103      	cbz	r3, 8009ea2 <_write_r+0x1e>
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	bd38      	pop	{r3, r4, r5, pc}
 8009ea4:	20000300 	.word	0x20000300

08009ea8 <__errno>:
 8009ea8:	4b01      	ldr	r3, [pc, #4]	; (8009eb0 <__errno+0x8>)
 8009eaa:	6818      	ldr	r0, [r3, #0]
 8009eac:	4770      	bx	lr
 8009eae:	bf00      	nop
 8009eb0:	20000064 	.word	0x20000064

08009eb4 <__libc_init_array>:
 8009eb4:	b570      	push	{r4, r5, r6, lr}
 8009eb6:	4d0d      	ldr	r5, [pc, #52]	; (8009eec <__libc_init_array+0x38>)
 8009eb8:	2600      	movs	r6, #0
 8009eba:	4c0d      	ldr	r4, [pc, #52]	; (8009ef0 <__libc_init_array+0x3c>)
 8009ebc:	1b64      	subs	r4, r4, r5
 8009ebe:	10a4      	asrs	r4, r4, #2
 8009ec0:	42a6      	cmp	r6, r4
 8009ec2:	d109      	bne.n	8009ed8 <__libc_init_array+0x24>
 8009ec4:	4d0b      	ldr	r5, [pc, #44]	; (8009ef4 <__libc_init_array+0x40>)
 8009ec6:	2600      	movs	r6, #0
 8009ec8:	4c0b      	ldr	r4, [pc, #44]	; (8009ef8 <__libc_init_array+0x44>)
 8009eca:	f000 fd37 	bl	800a93c <_init>
 8009ece:	1b64      	subs	r4, r4, r5
 8009ed0:	10a4      	asrs	r4, r4, #2
 8009ed2:	42a6      	cmp	r6, r4
 8009ed4:	d105      	bne.n	8009ee2 <__libc_init_array+0x2e>
 8009ed6:	bd70      	pop	{r4, r5, r6, pc}
 8009ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009edc:	3601      	adds	r6, #1
 8009ede:	4798      	blx	r3
 8009ee0:	e7ee      	b.n	8009ec0 <__libc_init_array+0xc>
 8009ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ee6:	3601      	adds	r6, #1
 8009ee8:	4798      	blx	r3
 8009eea:	e7f2      	b.n	8009ed2 <__libc_init_array+0x1e>
 8009eec:	0800ab68 	.word	0x0800ab68
 8009ef0:	0800ab68 	.word	0x0800ab68
 8009ef4:	0800ab68 	.word	0x0800ab68
 8009ef8:	0800ab6c 	.word	0x0800ab6c

08009efc <__retarget_lock_init_recursive>:
 8009efc:	4770      	bx	lr

08009efe <__retarget_lock_acquire_recursive>:
 8009efe:	4770      	bx	lr

08009f00 <__retarget_lock_release_recursive>:
 8009f00:	4770      	bx	lr
	...

08009f04 <_free_r>:
 8009f04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f06:	2900      	cmp	r1, #0
 8009f08:	d043      	beq.n	8009f92 <_free_r+0x8e>
 8009f0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f0e:	1f0c      	subs	r4, r1, #4
 8009f10:	9001      	str	r0, [sp, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	bfb8      	it	lt
 8009f16:	18e4      	addlt	r4, r4, r3
 8009f18:	f000 f8e0 	bl	800a0dc <__malloc_lock>
 8009f1c:	4a1e      	ldr	r2, [pc, #120]	; (8009f98 <_free_r+0x94>)
 8009f1e:	9801      	ldr	r0, [sp, #4]
 8009f20:	6813      	ldr	r3, [r2, #0]
 8009f22:	b933      	cbnz	r3, 8009f32 <_free_r+0x2e>
 8009f24:	6063      	str	r3, [r4, #4]
 8009f26:	6014      	str	r4, [r2, #0]
 8009f28:	b003      	add	sp, #12
 8009f2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f2e:	f000 b8db 	b.w	800a0e8 <__malloc_unlock>
 8009f32:	42a3      	cmp	r3, r4
 8009f34:	d908      	bls.n	8009f48 <_free_r+0x44>
 8009f36:	6825      	ldr	r5, [r4, #0]
 8009f38:	1961      	adds	r1, r4, r5
 8009f3a:	428b      	cmp	r3, r1
 8009f3c:	bf01      	itttt	eq
 8009f3e:	6819      	ldreq	r1, [r3, #0]
 8009f40:	685b      	ldreq	r3, [r3, #4]
 8009f42:	1949      	addeq	r1, r1, r5
 8009f44:	6021      	streq	r1, [r4, #0]
 8009f46:	e7ed      	b.n	8009f24 <_free_r+0x20>
 8009f48:	461a      	mov	r2, r3
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	b10b      	cbz	r3, 8009f52 <_free_r+0x4e>
 8009f4e:	42a3      	cmp	r3, r4
 8009f50:	d9fa      	bls.n	8009f48 <_free_r+0x44>
 8009f52:	6811      	ldr	r1, [r2, #0]
 8009f54:	1855      	adds	r5, r2, r1
 8009f56:	42a5      	cmp	r5, r4
 8009f58:	d10b      	bne.n	8009f72 <_free_r+0x6e>
 8009f5a:	6824      	ldr	r4, [r4, #0]
 8009f5c:	4421      	add	r1, r4
 8009f5e:	1854      	adds	r4, r2, r1
 8009f60:	6011      	str	r1, [r2, #0]
 8009f62:	42a3      	cmp	r3, r4
 8009f64:	d1e0      	bne.n	8009f28 <_free_r+0x24>
 8009f66:	681c      	ldr	r4, [r3, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	440c      	add	r4, r1
 8009f6c:	6053      	str	r3, [r2, #4]
 8009f6e:	6014      	str	r4, [r2, #0]
 8009f70:	e7da      	b.n	8009f28 <_free_r+0x24>
 8009f72:	d902      	bls.n	8009f7a <_free_r+0x76>
 8009f74:	230c      	movs	r3, #12
 8009f76:	6003      	str	r3, [r0, #0]
 8009f78:	e7d6      	b.n	8009f28 <_free_r+0x24>
 8009f7a:	6825      	ldr	r5, [r4, #0]
 8009f7c:	1961      	adds	r1, r4, r5
 8009f7e:	428b      	cmp	r3, r1
 8009f80:	bf02      	ittt	eq
 8009f82:	6819      	ldreq	r1, [r3, #0]
 8009f84:	685b      	ldreq	r3, [r3, #4]
 8009f86:	1949      	addeq	r1, r1, r5
 8009f88:	6063      	str	r3, [r4, #4]
 8009f8a:	bf08      	it	eq
 8009f8c:	6021      	streq	r1, [r4, #0]
 8009f8e:	6054      	str	r4, [r2, #4]
 8009f90:	e7ca      	b.n	8009f28 <_free_r+0x24>
 8009f92:	b003      	add	sp, #12
 8009f94:	bd30      	pop	{r4, r5, pc}
 8009f96:	bf00      	nop
 8009f98:	20000308 	.word	0x20000308

08009f9c <sbrk_aligned>:
 8009f9c:	b570      	push	{r4, r5, r6, lr}
 8009f9e:	4e0e      	ldr	r6, [pc, #56]	; (8009fd8 <sbrk_aligned+0x3c>)
 8009fa0:	460c      	mov	r4, r1
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	6831      	ldr	r1, [r6, #0]
 8009fa6:	b911      	cbnz	r1, 8009fae <sbrk_aligned+0x12>
 8009fa8:	f000 fcaa 	bl	800a900 <_sbrk_r>
 8009fac:	6030      	str	r0, [r6, #0]
 8009fae:	4621      	mov	r1, r4
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	f000 fca5 	bl	800a900 <_sbrk_r>
 8009fb6:	1c43      	adds	r3, r0, #1
 8009fb8:	d00a      	beq.n	8009fd0 <sbrk_aligned+0x34>
 8009fba:	1cc4      	adds	r4, r0, #3
 8009fbc:	f024 0403 	bic.w	r4, r4, #3
 8009fc0:	42a0      	cmp	r0, r4
 8009fc2:	d007      	beq.n	8009fd4 <sbrk_aligned+0x38>
 8009fc4:	1a21      	subs	r1, r4, r0
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	f000 fc9a 	bl	800a900 <_sbrk_r>
 8009fcc:	3001      	adds	r0, #1
 8009fce:	d101      	bne.n	8009fd4 <sbrk_aligned+0x38>
 8009fd0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	bd70      	pop	{r4, r5, r6, pc}
 8009fd8:	2000030c 	.word	0x2000030c

08009fdc <_malloc_r>:
 8009fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe0:	1ccd      	adds	r5, r1, #3
 8009fe2:	4607      	mov	r7, r0
 8009fe4:	f025 0503 	bic.w	r5, r5, #3
 8009fe8:	3508      	adds	r5, #8
 8009fea:	2d0c      	cmp	r5, #12
 8009fec:	bf38      	it	cc
 8009fee:	250c      	movcc	r5, #12
 8009ff0:	2d00      	cmp	r5, #0
 8009ff2:	db01      	blt.n	8009ff8 <_malloc_r+0x1c>
 8009ff4:	42a9      	cmp	r1, r5
 8009ff6:	d905      	bls.n	800a004 <_malloc_r+0x28>
 8009ff8:	230c      	movs	r3, #12
 8009ffa:	2600      	movs	r6, #0
 8009ffc:	603b      	str	r3, [r7, #0]
 8009ffe:	4630      	mov	r0, r6
 800a000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a004:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a0d8 <_malloc_r+0xfc>
 800a008:	f000 f868 	bl	800a0dc <__malloc_lock>
 800a00c:	f8d8 3000 	ldr.w	r3, [r8]
 800a010:	461c      	mov	r4, r3
 800a012:	bb5c      	cbnz	r4, 800a06c <_malloc_r+0x90>
 800a014:	4629      	mov	r1, r5
 800a016:	4638      	mov	r0, r7
 800a018:	f7ff ffc0 	bl	8009f9c <sbrk_aligned>
 800a01c:	1c43      	adds	r3, r0, #1
 800a01e:	4604      	mov	r4, r0
 800a020:	d155      	bne.n	800a0ce <_malloc_r+0xf2>
 800a022:	f8d8 4000 	ldr.w	r4, [r8]
 800a026:	4626      	mov	r6, r4
 800a028:	2e00      	cmp	r6, #0
 800a02a:	d145      	bne.n	800a0b8 <_malloc_r+0xdc>
 800a02c:	2c00      	cmp	r4, #0
 800a02e:	d048      	beq.n	800a0c2 <_malloc_r+0xe6>
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	4631      	mov	r1, r6
 800a034:	4638      	mov	r0, r7
 800a036:	eb04 0903 	add.w	r9, r4, r3
 800a03a:	f000 fc61 	bl	800a900 <_sbrk_r>
 800a03e:	4581      	cmp	r9, r0
 800a040:	d13f      	bne.n	800a0c2 <_malloc_r+0xe6>
 800a042:	6821      	ldr	r1, [r4, #0]
 800a044:	4638      	mov	r0, r7
 800a046:	1a6d      	subs	r5, r5, r1
 800a048:	4629      	mov	r1, r5
 800a04a:	f7ff ffa7 	bl	8009f9c <sbrk_aligned>
 800a04e:	3001      	adds	r0, #1
 800a050:	d037      	beq.n	800a0c2 <_malloc_r+0xe6>
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	442b      	add	r3, r5
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	f8d8 3000 	ldr.w	r3, [r8]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d038      	beq.n	800a0d2 <_malloc_r+0xf6>
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	42a2      	cmp	r2, r4
 800a064:	d12b      	bne.n	800a0be <_malloc_r+0xe2>
 800a066:	2200      	movs	r2, #0
 800a068:	605a      	str	r2, [r3, #4]
 800a06a:	e00f      	b.n	800a08c <_malloc_r+0xb0>
 800a06c:	6822      	ldr	r2, [r4, #0]
 800a06e:	1b52      	subs	r2, r2, r5
 800a070:	d41f      	bmi.n	800a0b2 <_malloc_r+0xd6>
 800a072:	2a0b      	cmp	r2, #11
 800a074:	d917      	bls.n	800a0a6 <_malloc_r+0xca>
 800a076:	1961      	adds	r1, r4, r5
 800a078:	42a3      	cmp	r3, r4
 800a07a:	6025      	str	r5, [r4, #0]
 800a07c:	bf18      	it	ne
 800a07e:	6059      	strne	r1, [r3, #4]
 800a080:	6863      	ldr	r3, [r4, #4]
 800a082:	bf08      	it	eq
 800a084:	f8c8 1000 	streq.w	r1, [r8]
 800a088:	5162      	str	r2, [r4, r5]
 800a08a:	604b      	str	r3, [r1, #4]
 800a08c:	f104 060b 	add.w	r6, r4, #11
 800a090:	4638      	mov	r0, r7
 800a092:	f000 f829 	bl	800a0e8 <__malloc_unlock>
 800a096:	1d23      	adds	r3, r4, #4
 800a098:	f026 0607 	bic.w	r6, r6, #7
 800a09c:	1af2      	subs	r2, r6, r3
 800a09e:	d0ae      	beq.n	8009ffe <_malloc_r+0x22>
 800a0a0:	1b9b      	subs	r3, r3, r6
 800a0a2:	50a3      	str	r3, [r4, r2]
 800a0a4:	e7ab      	b.n	8009ffe <_malloc_r+0x22>
 800a0a6:	42a3      	cmp	r3, r4
 800a0a8:	6862      	ldr	r2, [r4, #4]
 800a0aa:	d1dd      	bne.n	800a068 <_malloc_r+0x8c>
 800a0ac:	f8c8 2000 	str.w	r2, [r8]
 800a0b0:	e7ec      	b.n	800a08c <_malloc_r+0xb0>
 800a0b2:	4623      	mov	r3, r4
 800a0b4:	6864      	ldr	r4, [r4, #4]
 800a0b6:	e7ac      	b.n	800a012 <_malloc_r+0x36>
 800a0b8:	4634      	mov	r4, r6
 800a0ba:	6876      	ldr	r6, [r6, #4]
 800a0bc:	e7b4      	b.n	800a028 <_malloc_r+0x4c>
 800a0be:	4613      	mov	r3, r2
 800a0c0:	e7cc      	b.n	800a05c <_malloc_r+0x80>
 800a0c2:	230c      	movs	r3, #12
 800a0c4:	4638      	mov	r0, r7
 800a0c6:	603b      	str	r3, [r7, #0]
 800a0c8:	f000 f80e 	bl	800a0e8 <__malloc_unlock>
 800a0cc:	e797      	b.n	8009ffe <_malloc_r+0x22>
 800a0ce:	6025      	str	r5, [r4, #0]
 800a0d0:	e7dc      	b.n	800a08c <_malloc_r+0xb0>
 800a0d2:	605b      	str	r3, [r3, #4]
 800a0d4:	deff      	udf	#255	; 0xff
 800a0d6:	bf00      	nop
 800a0d8:	20000308 	.word	0x20000308

0800a0dc <__malloc_lock>:
 800a0dc:	4801      	ldr	r0, [pc, #4]	; (800a0e4 <__malloc_lock+0x8>)
 800a0de:	f7ff bf0e 	b.w	8009efe <__retarget_lock_acquire_recursive>
 800a0e2:	bf00      	nop
 800a0e4:	20000304 	.word	0x20000304

0800a0e8 <__malloc_unlock>:
 800a0e8:	4801      	ldr	r0, [pc, #4]	; (800a0f0 <__malloc_unlock+0x8>)
 800a0ea:	f7ff bf09 	b.w	8009f00 <__retarget_lock_release_recursive>
 800a0ee:	bf00      	nop
 800a0f0:	20000304 	.word	0x20000304

0800a0f4 <__sfputc_r>:
 800a0f4:	6893      	ldr	r3, [r2, #8]
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	6093      	str	r3, [r2, #8]
 800a0fc:	b410      	push	{r4}
 800a0fe:	da08      	bge.n	800a112 <__sfputc_r+0x1e>
 800a100:	6994      	ldr	r4, [r2, #24]
 800a102:	42a3      	cmp	r3, r4
 800a104:	db01      	blt.n	800a10a <__sfputc_r+0x16>
 800a106:	290a      	cmp	r1, #10
 800a108:	d103      	bne.n	800a112 <__sfputc_r+0x1e>
 800a10a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a10e:	f7ff bde8 	b.w	8009ce2 <__swbuf_r>
 800a112:	6813      	ldr	r3, [r2, #0]
 800a114:	1c58      	adds	r0, r3, #1
 800a116:	6010      	str	r0, [r2, #0]
 800a118:	4608      	mov	r0, r1
 800a11a:	7019      	strb	r1, [r3, #0]
 800a11c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <__sfputs_r>:
 800a122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a124:	4606      	mov	r6, r0
 800a126:	460f      	mov	r7, r1
 800a128:	4614      	mov	r4, r2
 800a12a:	18d5      	adds	r5, r2, r3
 800a12c:	42ac      	cmp	r4, r5
 800a12e:	d101      	bne.n	800a134 <__sfputs_r+0x12>
 800a130:	2000      	movs	r0, #0
 800a132:	e007      	b.n	800a144 <__sfputs_r+0x22>
 800a134:	463a      	mov	r2, r7
 800a136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a13a:	4630      	mov	r0, r6
 800a13c:	f7ff ffda 	bl	800a0f4 <__sfputc_r>
 800a140:	1c43      	adds	r3, r0, #1
 800a142:	d1f3      	bne.n	800a12c <__sfputs_r+0xa>
 800a144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a148 <_vfiprintf_r>:
 800a148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14c:	460d      	mov	r5, r1
 800a14e:	b09d      	sub	sp, #116	; 0x74
 800a150:	4614      	mov	r4, r2
 800a152:	4698      	mov	r8, r3
 800a154:	4606      	mov	r6, r0
 800a156:	b118      	cbz	r0, 800a160 <_vfiprintf_r+0x18>
 800a158:	6a03      	ldr	r3, [r0, #32]
 800a15a:	b90b      	cbnz	r3, 800a160 <_vfiprintf_r+0x18>
 800a15c:	f7ff fcda 	bl	8009b14 <__sinit>
 800a160:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a162:	07d9      	lsls	r1, r3, #31
 800a164:	d405      	bmi.n	800a172 <_vfiprintf_r+0x2a>
 800a166:	89ab      	ldrh	r3, [r5, #12]
 800a168:	059a      	lsls	r2, r3, #22
 800a16a:	d402      	bmi.n	800a172 <_vfiprintf_r+0x2a>
 800a16c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a16e:	f7ff fec6 	bl	8009efe <__retarget_lock_acquire_recursive>
 800a172:	89ab      	ldrh	r3, [r5, #12]
 800a174:	071b      	lsls	r3, r3, #28
 800a176:	d501      	bpl.n	800a17c <_vfiprintf_r+0x34>
 800a178:	692b      	ldr	r3, [r5, #16]
 800a17a:	b99b      	cbnz	r3, 800a1a4 <_vfiprintf_r+0x5c>
 800a17c:	4629      	mov	r1, r5
 800a17e:	4630      	mov	r0, r6
 800a180:	f7ff fdec 	bl	8009d5c <__swsetup_r>
 800a184:	b170      	cbz	r0, 800a1a4 <_vfiprintf_r+0x5c>
 800a186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a188:	07dc      	lsls	r4, r3, #31
 800a18a:	d504      	bpl.n	800a196 <_vfiprintf_r+0x4e>
 800a18c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a190:	b01d      	add	sp, #116	; 0x74
 800a192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a196:	89ab      	ldrh	r3, [r5, #12]
 800a198:	0598      	lsls	r0, r3, #22
 800a19a:	d4f7      	bmi.n	800a18c <_vfiprintf_r+0x44>
 800a19c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a19e:	f7ff feaf 	bl	8009f00 <__retarget_lock_release_recursive>
 800a1a2:	e7f3      	b.n	800a18c <_vfiprintf_r+0x44>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1aa:	f04f 0901 	mov.w	r9, #1
 800a1ae:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800a368 <_vfiprintf_r+0x220>
 800a1b2:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b4:	2320      	movs	r3, #32
 800a1b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1ba:	2330      	movs	r3, #48	; 0x30
 800a1bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1c0:	4623      	mov	r3, r4
 800a1c2:	469a      	mov	sl, r3
 800a1c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1c8:	b10a      	cbz	r2, 800a1ce <_vfiprintf_r+0x86>
 800a1ca:	2a25      	cmp	r2, #37	; 0x25
 800a1cc:	d1f9      	bne.n	800a1c2 <_vfiprintf_r+0x7a>
 800a1ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a1d2:	d00b      	beq.n	800a1ec <_vfiprintf_r+0xa4>
 800a1d4:	465b      	mov	r3, fp
 800a1d6:	4622      	mov	r2, r4
 800a1d8:	4629      	mov	r1, r5
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f7ff ffa1 	bl	800a122 <__sfputs_r>
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	f000 80a9 	beq.w	800a338 <_vfiprintf_r+0x1f0>
 800a1e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1e8:	445a      	add	r2, fp
 800a1ea:	9209      	str	r2, [sp, #36]	; 0x24
 800a1ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 80a1 	beq.w	800a338 <_vfiprintf_r+0x1f0>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a1fc:	f10a 0a01 	add.w	sl, sl, #1
 800a200:	9304      	str	r3, [sp, #16]
 800a202:	9307      	str	r3, [sp, #28]
 800a204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a208:	931a      	str	r3, [sp, #104]	; 0x68
 800a20a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a20e:	4654      	mov	r4, sl
 800a210:	2205      	movs	r2, #5
 800a212:	4855      	ldr	r0, [pc, #340]	; (800a368 <_vfiprintf_r+0x220>)
 800a214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a218:	f000 fb82 	bl	800a920 <memchr>
 800a21c:	9a04      	ldr	r2, [sp, #16]
 800a21e:	b9d8      	cbnz	r0, 800a258 <_vfiprintf_r+0x110>
 800a220:	06d1      	lsls	r1, r2, #27
 800a222:	bf44      	itt	mi
 800a224:	2320      	movmi	r3, #32
 800a226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a22a:	0713      	lsls	r3, r2, #28
 800a22c:	bf44      	itt	mi
 800a22e:	232b      	movmi	r3, #43	; 0x2b
 800a230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a234:	f89a 3000 	ldrb.w	r3, [sl]
 800a238:	2b2a      	cmp	r3, #42	; 0x2a
 800a23a:	d015      	beq.n	800a268 <_vfiprintf_r+0x120>
 800a23c:	9a07      	ldr	r2, [sp, #28]
 800a23e:	4654      	mov	r4, sl
 800a240:	2000      	movs	r0, #0
 800a242:	f04f 0c0a 	mov.w	ip, #10
 800a246:	4621      	mov	r1, r4
 800a248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a24c:	3b30      	subs	r3, #48	; 0x30
 800a24e:	2b09      	cmp	r3, #9
 800a250:	d94d      	bls.n	800a2ee <_vfiprintf_r+0x1a6>
 800a252:	b1b0      	cbz	r0, 800a282 <_vfiprintf_r+0x13a>
 800a254:	9207      	str	r2, [sp, #28]
 800a256:	e014      	b.n	800a282 <_vfiprintf_r+0x13a>
 800a258:	eba0 0308 	sub.w	r3, r0, r8
 800a25c:	46a2      	mov	sl, r4
 800a25e:	fa09 f303 	lsl.w	r3, r9, r3
 800a262:	4313      	orrs	r3, r2
 800a264:	9304      	str	r3, [sp, #16]
 800a266:	e7d2      	b.n	800a20e <_vfiprintf_r+0xc6>
 800a268:	9b03      	ldr	r3, [sp, #12]
 800a26a:	1d19      	adds	r1, r3, #4
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	9103      	str	r1, [sp, #12]
 800a272:	bfbb      	ittet	lt
 800a274:	425b      	neglt	r3, r3
 800a276:	f042 0202 	orrlt.w	r2, r2, #2
 800a27a:	9307      	strge	r3, [sp, #28]
 800a27c:	9307      	strlt	r3, [sp, #28]
 800a27e:	bfb8      	it	lt
 800a280:	9204      	strlt	r2, [sp, #16]
 800a282:	7823      	ldrb	r3, [r4, #0]
 800a284:	2b2e      	cmp	r3, #46	; 0x2e
 800a286:	d10c      	bne.n	800a2a2 <_vfiprintf_r+0x15a>
 800a288:	7863      	ldrb	r3, [r4, #1]
 800a28a:	2b2a      	cmp	r3, #42	; 0x2a
 800a28c:	d134      	bne.n	800a2f8 <_vfiprintf_r+0x1b0>
 800a28e:	9b03      	ldr	r3, [sp, #12]
 800a290:	3402      	adds	r4, #2
 800a292:	1d1a      	adds	r2, r3, #4
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	9203      	str	r2, [sp, #12]
 800a29a:	bfb8      	it	lt
 800a29c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a2a0:	9305      	str	r3, [sp, #20]
 800a2a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a378 <_vfiprintf_r+0x230>
 800a2a6:	2203      	movs	r2, #3
 800a2a8:	7821      	ldrb	r1, [r4, #0]
 800a2aa:	4650      	mov	r0, sl
 800a2ac:	f000 fb38 	bl	800a920 <memchr>
 800a2b0:	b138      	cbz	r0, 800a2c2 <_vfiprintf_r+0x17a>
 800a2b2:	eba0 000a 	sub.w	r0, r0, sl
 800a2b6:	2240      	movs	r2, #64	; 0x40
 800a2b8:	9b04      	ldr	r3, [sp, #16]
 800a2ba:	3401      	adds	r4, #1
 800a2bc:	4082      	lsls	r2, r0
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	9304      	str	r3, [sp, #16]
 800a2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2c6:	2206      	movs	r2, #6
 800a2c8:	4828      	ldr	r0, [pc, #160]	; (800a36c <_vfiprintf_r+0x224>)
 800a2ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2ce:	f000 fb27 	bl	800a920 <memchr>
 800a2d2:	2800      	cmp	r0, #0
 800a2d4:	d03f      	beq.n	800a356 <_vfiprintf_r+0x20e>
 800a2d6:	4b26      	ldr	r3, [pc, #152]	; (800a370 <_vfiprintf_r+0x228>)
 800a2d8:	bb1b      	cbnz	r3, 800a322 <_vfiprintf_r+0x1da>
 800a2da:	9b03      	ldr	r3, [sp, #12]
 800a2dc:	3307      	adds	r3, #7
 800a2de:	f023 0307 	bic.w	r3, r3, #7
 800a2e2:	3308      	adds	r3, #8
 800a2e4:	9303      	str	r3, [sp, #12]
 800a2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e8:	443b      	add	r3, r7
 800a2ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ec:	e768      	b.n	800a1c0 <_vfiprintf_r+0x78>
 800a2ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	2001      	movs	r0, #1
 800a2f6:	e7a6      	b.n	800a246 <_vfiprintf_r+0xfe>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	3401      	adds	r4, #1
 800a2fc:	f04f 0c0a 	mov.w	ip, #10
 800a300:	4619      	mov	r1, r3
 800a302:	9305      	str	r3, [sp, #20]
 800a304:	4620      	mov	r0, r4
 800a306:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a30a:	3a30      	subs	r2, #48	; 0x30
 800a30c:	2a09      	cmp	r2, #9
 800a30e:	d903      	bls.n	800a318 <_vfiprintf_r+0x1d0>
 800a310:	2b00      	cmp	r3, #0
 800a312:	d0c6      	beq.n	800a2a2 <_vfiprintf_r+0x15a>
 800a314:	9105      	str	r1, [sp, #20]
 800a316:	e7c4      	b.n	800a2a2 <_vfiprintf_r+0x15a>
 800a318:	fb0c 2101 	mla	r1, ip, r1, r2
 800a31c:	4604      	mov	r4, r0
 800a31e:	2301      	movs	r3, #1
 800a320:	e7f0      	b.n	800a304 <_vfiprintf_r+0x1bc>
 800a322:	ab03      	add	r3, sp, #12
 800a324:	462a      	mov	r2, r5
 800a326:	a904      	add	r1, sp, #16
 800a328:	4630      	mov	r0, r6
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	4b11      	ldr	r3, [pc, #68]	; (800a374 <_vfiprintf_r+0x22c>)
 800a32e:	f3af 8000 	nop.w
 800a332:	4607      	mov	r7, r0
 800a334:	1c78      	adds	r0, r7, #1
 800a336:	d1d6      	bne.n	800a2e6 <_vfiprintf_r+0x19e>
 800a338:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a33a:	07d9      	lsls	r1, r3, #31
 800a33c:	d405      	bmi.n	800a34a <_vfiprintf_r+0x202>
 800a33e:	89ab      	ldrh	r3, [r5, #12]
 800a340:	059a      	lsls	r2, r3, #22
 800a342:	d402      	bmi.n	800a34a <_vfiprintf_r+0x202>
 800a344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a346:	f7ff fddb 	bl	8009f00 <__retarget_lock_release_recursive>
 800a34a:	89ab      	ldrh	r3, [r5, #12]
 800a34c:	065b      	lsls	r3, r3, #25
 800a34e:	f53f af1d 	bmi.w	800a18c <_vfiprintf_r+0x44>
 800a352:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a354:	e71c      	b.n	800a190 <_vfiprintf_r+0x48>
 800a356:	ab03      	add	r3, sp, #12
 800a358:	462a      	mov	r2, r5
 800a35a:	a904      	add	r1, sp, #16
 800a35c:	4630      	mov	r0, r6
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	4b04      	ldr	r3, [pc, #16]	; (800a374 <_vfiprintf_r+0x22c>)
 800a362:	f000 f87d 	bl	800a460 <_printf_i>
 800a366:	e7e4      	b.n	800a332 <_vfiprintf_r+0x1ea>
 800a368:	0800ab2c 	.word	0x0800ab2c
 800a36c:	0800ab36 	.word	0x0800ab36
 800a370:	00000000 	.word	0x00000000
 800a374:	0800a123 	.word	0x0800a123
 800a378:	0800ab32 	.word	0x0800ab32

0800a37c <_printf_common>:
 800a37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a380:	4616      	mov	r6, r2
 800a382:	4699      	mov	r9, r3
 800a384:	688a      	ldr	r2, [r1, #8]
 800a386:	4607      	mov	r7, r0
 800a388:	690b      	ldr	r3, [r1, #16]
 800a38a:	460c      	mov	r4, r1
 800a38c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a390:	4293      	cmp	r3, r2
 800a392:	bfb8      	it	lt
 800a394:	4613      	movlt	r3, r2
 800a396:	6033      	str	r3, [r6, #0]
 800a398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a39c:	b10a      	cbz	r2, 800a3a2 <_printf_common+0x26>
 800a39e:	3301      	adds	r3, #1
 800a3a0:	6033      	str	r3, [r6, #0]
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	0699      	lsls	r1, r3, #26
 800a3a6:	bf42      	ittt	mi
 800a3a8:	6833      	ldrmi	r3, [r6, #0]
 800a3aa:	3302      	addmi	r3, #2
 800a3ac:	6033      	strmi	r3, [r6, #0]
 800a3ae:	6825      	ldr	r5, [r4, #0]
 800a3b0:	f015 0506 	ands.w	r5, r5, #6
 800a3b4:	d106      	bne.n	800a3c4 <_printf_common+0x48>
 800a3b6:	f104 0a19 	add.w	sl, r4, #25
 800a3ba:	68e3      	ldr	r3, [r4, #12]
 800a3bc:	6832      	ldr	r2, [r6, #0]
 800a3be:	1a9b      	subs	r3, r3, r2
 800a3c0:	42ab      	cmp	r3, r5
 800a3c2:	dc2b      	bgt.n	800a41c <_printf_common+0xa0>
 800a3c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a3c8:	1e13      	subs	r3, r2, #0
 800a3ca:	6822      	ldr	r2, [r4, #0]
 800a3cc:	bf18      	it	ne
 800a3ce:	2301      	movne	r3, #1
 800a3d0:	0692      	lsls	r2, r2, #26
 800a3d2:	d430      	bmi.n	800a436 <_printf_common+0xba>
 800a3d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a3d8:	4649      	mov	r1, r9
 800a3da:	4638      	mov	r0, r7
 800a3dc:	47c0      	blx	r8
 800a3de:	3001      	adds	r0, #1
 800a3e0:	d023      	beq.n	800a42a <_printf_common+0xae>
 800a3e2:	6823      	ldr	r3, [r4, #0]
 800a3e4:	341a      	adds	r4, #26
 800a3e6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a3ea:	f003 0306 	and.w	r3, r3, #6
 800a3ee:	2b04      	cmp	r3, #4
 800a3f0:	bf0a      	itet	eq
 800a3f2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a3f6:	2500      	movne	r5, #0
 800a3f8:	6833      	ldreq	r3, [r6, #0]
 800a3fa:	f04f 0600 	mov.w	r6, #0
 800a3fe:	bf08      	it	eq
 800a400:	1aed      	subeq	r5, r5, r3
 800a402:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a406:	bf08      	it	eq
 800a408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a40c:	4293      	cmp	r3, r2
 800a40e:	bfc4      	itt	gt
 800a410:	1a9b      	subgt	r3, r3, r2
 800a412:	18ed      	addgt	r5, r5, r3
 800a414:	42b5      	cmp	r5, r6
 800a416:	d11a      	bne.n	800a44e <_printf_common+0xd2>
 800a418:	2000      	movs	r0, #0
 800a41a:	e008      	b.n	800a42e <_printf_common+0xb2>
 800a41c:	2301      	movs	r3, #1
 800a41e:	4652      	mov	r2, sl
 800a420:	4649      	mov	r1, r9
 800a422:	4638      	mov	r0, r7
 800a424:	47c0      	blx	r8
 800a426:	3001      	adds	r0, #1
 800a428:	d103      	bne.n	800a432 <_printf_common+0xb6>
 800a42a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a432:	3501      	adds	r5, #1
 800a434:	e7c1      	b.n	800a3ba <_printf_common+0x3e>
 800a436:	18e1      	adds	r1, r4, r3
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	2030      	movs	r0, #48	; 0x30
 800a43c:	3302      	adds	r3, #2
 800a43e:	4422      	add	r2, r4
 800a440:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a44c:	e7c2      	b.n	800a3d4 <_printf_common+0x58>
 800a44e:	2301      	movs	r3, #1
 800a450:	4622      	mov	r2, r4
 800a452:	4649      	mov	r1, r9
 800a454:	4638      	mov	r0, r7
 800a456:	47c0      	blx	r8
 800a458:	3001      	adds	r0, #1
 800a45a:	d0e6      	beq.n	800a42a <_printf_common+0xae>
 800a45c:	3601      	adds	r6, #1
 800a45e:	e7d9      	b.n	800a414 <_printf_common+0x98>

0800a460 <_printf_i>:
 800a460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a464:	7e0f      	ldrb	r7, [r1, #24]
 800a466:	4691      	mov	r9, r2
 800a468:	4680      	mov	r8, r0
 800a46a:	460c      	mov	r4, r1
 800a46c:	2f78      	cmp	r7, #120	; 0x78
 800a46e:	469a      	mov	sl, r3
 800a470:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a472:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a476:	d807      	bhi.n	800a488 <_printf_i+0x28>
 800a478:	2f62      	cmp	r7, #98	; 0x62
 800a47a:	d80a      	bhi.n	800a492 <_printf_i+0x32>
 800a47c:	2f00      	cmp	r7, #0
 800a47e:	f000 80d3 	beq.w	800a628 <_printf_i+0x1c8>
 800a482:	2f58      	cmp	r7, #88	; 0x58
 800a484:	f000 80bf 	beq.w	800a606 <_printf_i+0x1a6>
 800a488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a48c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a490:	e03a      	b.n	800a508 <_printf_i+0xa8>
 800a492:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a496:	2b15      	cmp	r3, #21
 800a498:	d8f6      	bhi.n	800a488 <_printf_i+0x28>
 800a49a:	a101      	add	r1, pc, #4	; (adr r1, 800a4a0 <_printf_i+0x40>)
 800a49c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4a0:	0800a4f9 	.word	0x0800a4f9
 800a4a4:	0800a50d 	.word	0x0800a50d
 800a4a8:	0800a489 	.word	0x0800a489
 800a4ac:	0800a489 	.word	0x0800a489
 800a4b0:	0800a489 	.word	0x0800a489
 800a4b4:	0800a489 	.word	0x0800a489
 800a4b8:	0800a50d 	.word	0x0800a50d
 800a4bc:	0800a489 	.word	0x0800a489
 800a4c0:	0800a489 	.word	0x0800a489
 800a4c4:	0800a489 	.word	0x0800a489
 800a4c8:	0800a489 	.word	0x0800a489
 800a4cc:	0800a60f 	.word	0x0800a60f
 800a4d0:	0800a539 	.word	0x0800a539
 800a4d4:	0800a5cb 	.word	0x0800a5cb
 800a4d8:	0800a489 	.word	0x0800a489
 800a4dc:	0800a489 	.word	0x0800a489
 800a4e0:	0800a631 	.word	0x0800a631
 800a4e4:	0800a489 	.word	0x0800a489
 800a4e8:	0800a539 	.word	0x0800a539
 800a4ec:	0800a489 	.word	0x0800a489
 800a4f0:	0800a489 	.word	0x0800a489
 800a4f4:	0800a5d3 	.word	0x0800a5d3
 800a4f8:	682b      	ldr	r3, [r5, #0]
 800a4fa:	1d1a      	adds	r2, r3, #4
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	602a      	str	r2, [r5, #0]
 800a500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a508:	2301      	movs	r3, #1
 800a50a:	e09e      	b.n	800a64a <_printf_i+0x1ea>
 800a50c:	6820      	ldr	r0, [r4, #0]
 800a50e:	682b      	ldr	r3, [r5, #0]
 800a510:	0607      	lsls	r7, r0, #24
 800a512:	f103 0104 	add.w	r1, r3, #4
 800a516:	6029      	str	r1, [r5, #0]
 800a518:	d501      	bpl.n	800a51e <_printf_i+0xbe>
 800a51a:	681e      	ldr	r6, [r3, #0]
 800a51c:	e003      	b.n	800a526 <_printf_i+0xc6>
 800a51e:	0646      	lsls	r6, r0, #25
 800a520:	d5fb      	bpl.n	800a51a <_printf_i+0xba>
 800a522:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a526:	2e00      	cmp	r6, #0
 800a528:	da03      	bge.n	800a532 <_printf_i+0xd2>
 800a52a:	232d      	movs	r3, #45	; 0x2d
 800a52c:	4276      	negs	r6, r6
 800a52e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a532:	4859      	ldr	r0, [pc, #356]	; (800a698 <_printf_i+0x238>)
 800a534:	230a      	movs	r3, #10
 800a536:	e012      	b.n	800a55e <_printf_i+0xfe>
 800a538:	682b      	ldr	r3, [r5, #0]
 800a53a:	6820      	ldr	r0, [r4, #0]
 800a53c:	1d19      	adds	r1, r3, #4
 800a53e:	6029      	str	r1, [r5, #0]
 800a540:	0605      	lsls	r5, r0, #24
 800a542:	d501      	bpl.n	800a548 <_printf_i+0xe8>
 800a544:	681e      	ldr	r6, [r3, #0]
 800a546:	e002      	b.n	800a54e <_printf_i+0xee>
 800a548:	0641      	lsls	r1, r0, #25
 800a54a:	d5fb      	bpl.n	800a544 <_printf_i+0xe4>
 800a54c:	881e      	ldrh	r6, [r3, #0]
 800a54e:	2f6f      	cmp	r7, #111	; 0x6f
 800a550:	4851      	ldr	r0, [pc, #324]	; (800a698 <_printf_i+0x238>)
 800a552:	bf0c      	ite	eq
 800a554:	2308      	moveq	r3, #8
 800a556:	230a      	movne	r3, #10
 800a558:	2100      	movs	r1, #0
 800a55a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a55e:	6865      	ldr	r5, [r4, #4]
 800a560:	2d00      	cmp	r5, #0
 800a562:	60a5      	str	r5, [r4, #8]
 800a564:	bfa2      	ittt	ge
 800a566:	6821      	ldrge	r1, [r4, #0]
 800a568:	f021 0104 	bicge.w	r1, r1, #4
 800a56c:	6021      	strge	r1, [r4, #0]
 800a56e:	b90e      	cbnz	r6, 800a574 <_printf_i+0x114>
 800a570:	2d00      	cmp	r5, #0
 800a572:	d04a      	beq.n	800a60a <_printf_i+0x1aa>
 800a574:	4615      	mov	r5, r2
 800a576:	fbb6 f1f3 	udiv	r1, r6, r3
 800a57a:	fb03 6711 	mls	r7, r3, r1, r6
 800a57e:	5dc7      	ldrb	r7, [r0, r7]
 800a580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a584:	4637      	mov	r7, r6
 800a586:	460e      	mov	r6, r1
 800a588:	42bb      	cmp	r3, r7
 800a58a:	d9f4      	bls.n	800a576 <_printf_i+0x116>
 800a58c:	2b08      	cmp	r3, #8
 800a58e:	d10b      	bne.n	800a5a8 <_printf_i+0x148>
 800a590:	6823      	ldr	r3, [r4, #0]
 800a592:	07de      	lsls	r6, r3, #31
 800a594:	d508      	bpl.n	800a5a8 <_printf_i+0x148>
 800a596:	6923      	ldr	r3, [r4, #16]
 800a598:	6861      	ldr	r1, [r4, #4]
 800a59a:	4299      	cmp	r1, r3
 800a59c:	bfde      	ittt	le
 800a59e:	2330      	movle	r3, #48	; 0x30
 800a5a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5a4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a5a8:	1b52      	subs	r2, r2, r5
 800a5aa:	6122      	str	r2, [r4, #16]
 800a5ac:	464b      	mov	r3, r9
 800a5ae:	aa03      	add	r2, sp, #12
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	f8cd a000 	str.w	sl, [sp]
 800a5b8:	f7ff fee0 	bl	800a37c <_printf_common>
 800a5bc:	3001      	adds	r0, #1
 800a5be:	d149      	bne.n	800a654 <_printf_i+0x1f4>
 800a5c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5c4:	b004      	add	sp, #16
 800a5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	f043 0320 	orr.w	r3, r3, #32
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	2778      	movs	r7, #120	; 0x78
 800a5d4:	4831      	ldr	r0, [pc, #196]	; (800a69c <_printf_i+0x23c>)
 800a5d6:	6823      	ldr	r3, [r4, #0]
 800a5d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a5dc:	061f      	lsls	r7, r3, #24
 800a5de:	6829      	ldr	r1, [r5, #0]
 800a5e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a5e4:	d402      	bmi.n	800a5ec <_printf_i+0x18c>
 800a5e6:	065f      	lsls	r7, r3, #25
 800a5e8:	bf48      	it	mi
 800a5ea:	b2b6      	uxthmi	r6, r6
 800a5ec:	07df      	lsls	r7, r3, #31
 800a5ee:	6029      	str	r1, [r5, #0]
 800a5f0:	bf44      	itt	mi
 800a5f2:	f043 0320 	orrmi.w	r3, r3, #32
 800a5f6:	6023      	strmi	r3, [r4, #0]
 800a5f8:	b91e      	cbnz	r6, 800a602 <_printf_i+0x1a2>
 800a5fa:	6823      	ldr	r3, [r4, #0]
 800a5fc:	f023 0320 	bic.w	r3, r3, #32
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	2310      	movs	r3, #16
 800a604:	e7a8      	b.n	800a558 <_printf_i+0xf8>
 800a606:	4824      	ldr	r0, [pc, #144]	; (800a698 <_printf_i+0x238>)
 800a608:	e7e5      	b.n	800a5d6 <_printf_i+0x176>
 800a60a:	4615      	mov	r5, r2
 800a60c:	e7be      	b.n	800a58c <_printf_i+0x12c>
 800a60e:	682b      	ldr	r3, [r5, #0]
 800a610:	6826      	ldr	r6, [r4, #0]
 800a612:	1d18      	adds	r0, r3, #4
 800a614:	6961      	ldr	r1, [r4, #20]
 800a616:	6028      	str	r0, [r5, #0]
 800a618:	0635      	lsls	r5, r6, #24
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	d501      	bpl.n	800a622 <_printf_i+0x1c2>
 800a61e:	6019      	str	r1, [r3, #0]
 800a620:	e002      	b.n	800a628 <_printf_i+0x1c8>
 800a622:	0670      	lsls	r0, r6, #25
 800a624:	d5fb      	bpl.n	800a61e <_printf_i+0x1be>
 800a626:	8019      	strh	r1, [r3, #0]
 800a628:	2300      	movs	r3, #0
 800a62a:	4615      	mov	r5, r2
 800a62c:	6123      	str	r3, [r4, #16]
 800a62e:	e7bd      	b.n	800a5ac <_printf_i+0x14c>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	2100      	movs	r1, #0
 800a634:	1d1a      	adds	r2, r3, #4
 800a636:	602a      	str	r2, [r5, #0]
 800a638:	681d      	ldr	r5, [r3, #0]
 800a63a:	6862      	ldr	r2, [r4, #4]
 800a63c:	4628      	mov	r0, r5
 800a63e:	f000 f96f 	bl	800a920 <memchr>
 800a642:	b108      	cbz	r0, 800a648 <_printf_i+0x1e8>
 800a644:	1b40      	subs	r0, r0, r5
 800a646:	6060      	str	r0, [r4, #4]
 800a648:	6863      	ldr	r3, [r4, #4]
 800a64a:	6123      	str	r3, [r4, #16]
 800a64c:	2300      	movs	r3, #0
 800a64e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a652:	e7ab      	b.n	800a5ac <_printf_i+0x14c>
 800a654:	6923      	ldr	r3, [r4, #16]
 800a656:	462a      	mov	r2, r5
 800a658:	4649      	mov	r1, r9
 800a65a:	4640      	mov	r0, r8
 800a65c:	47d0      	blx	sl
 800a65e:	3001      	adds	r0, #1
 800a660:	d0ae      	beq.n	800a5c0 <_printf_i+0x160>
 800a662:	6823      	ldr	r3, [r4, #0]
 800a664:	079b      	lsls	r3, r3, #30
 800a666:	d413      	bmi.n	800a690 <_printf_i+0x230>
 800a668:	68e0      	ldr	r0, [r4, #12]
 800a66a:	9b03      	ldr	r3, [sp, #12]
 800a66c:	4298      	cmp	r0, r3
 800a66e:	bfb8      	it	lt
 800a670:	4618      	movlt	r0, r3
 800a672:	e7a7      	b.n	800a5c4 <_printf_i+0x164>
 800a674:	2301      	movs	r3, #1
 800a676:	4632      	mov	r2, r6
 800a678:	4649      	mov	r1, r9
 800a67a:	4640      	mov	r0, r8
 800a67c:	47d0      	blx	sl
 800a67e:	3001      	adds	r0, #1
 800a680:	d09e      	beq.n	800a5c0 <_printf_i+0x160>
 800a682:	3501      	adds	r5, #1
 800a684:	68e3      	ldr	r3, [r4, #12]
 800a686:	9903      	ldr	r1, [sp, #12]
 800a688:	1a5b      	subs	r3, r3, r1
 800a68a:	42ab      	cmp	r3, r5
 800a68c:	dcf2      	bgt.n	800a674 <_printf_i+0x214>
 800a68e:	e7eb      	b.n	800a668 <_printf_i+0x208>
 800a690:	2500      	movs	r5, #0
 800a692:	f104 0619 	add.w	r6, r4, #25
 800a696:	e7f5      	b.n	800a684 <_printf_i+0x224>
 800a698:	0800ab3d 	.word	0x0800ab3d
 800a69c:	0800ab4e 	.word	0x0800ab4e

0800a6a0 <__sflush_r>:
 800a6a0:	898a      	ldrh	r2, [r1, #12]
 800a6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	0710      	lsls	r0, r2, #28
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	d458      	bmi.n	800a760 <__sflush_r+0xc0>
 800a6ae:	684b      	ldr	r3, [r1, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	dc05      	bgt.n	800a6c0 <__sflush_r+0x20>
 800a6b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	dc02      	bgt.n	800a6c0 <__sflush_r+0x20>
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6c2:	2e00      	cmp	r6, #0
 800a6c4:	d0f9      	beq.n	800a6ba <__sflush_r+0x1a>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6cc:	682f      	ldr	r7, [r5, #0]
 800a6ce:	6a21      	ldr	r1, [r4, #32]
 800a6d0:	602b      	str	r3, [r5, #0]
 800a6d2:	d032      	beq.n	800a73a <__sflush_r+0x9a>
 800a6d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	075a      	lsls	r2, r3, #29
 800a6da:	d505      	bpl.n	800a6e8 <__sflush_r+0x48>
 800a6dc:	6863      	ldr	r3, [r4, #4]
 800a6de:	1ac0      	subs	r0, r0, r3
 800a6e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6e2:	b10b      	cbz	r3, 800a6e8 <__sflush_r+0x48>
 800a6e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6e6:	1ac0      	subs	r0, r0, r3
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	6a21      	ldr	r1, [r4, #32]
 800a6f2:	47b0      	blx	r6
 800a6f4:	1c43      	adds	r3, r0, #1
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	d106      	bne.n	800a708 <__sflush_r+0x68>
 800a6fa:	6829      	ldr	r1, [r5, #0]
 800a6fc:	291d      	cmp	r1, #29
 800a6fe:	d82b      	bhi.n	800a758 <__sflush_r+0xb8>
 800a700:	4a28      	ldr	r2, [pc, #160]	; (800a7a4 <__sflush_r+0x104>)
 800a702:	410a      	asrs	r2, r1
 800a704:	07d6      	lsls	r6, r2, #31
 800a706:	d427      	bmi.n	800a758 <__sflush_r+0xb8>
 800a708:	2200      	movs	r2, #0
 800a70a:	04d9      	lsls	r1, r3, #19
 800a70c:	6062      	str	r2, [r4, #4]
 800a70e:	6922      	ldr	r2, [r4, #16]
 800a710:	6022      	str	r2, [r4, #0]
 800a712:	d504      	bpl.n	800a71e <__sflush_r+0x7e>
 800a714:	1c42      	adds	r2, r0, #1
 800a716:	d101      	bne.n	800a71c <__sflush_r+0x7c>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	b903      	cbnz	r3, 800a71e <__sflush_r+0x7e>
 800a71c:	6560      	str	r0, [r4, #84]	; 0x54
 800a71e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a720:	602f      	str	r7, [r5, #0]
 800a722:	2900      	cmp	r1, #0
 800a724:	d0c9      	beq.n	800a6ba <__sflush_r+0x1a>
 800a726:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a72a:	4299      	cmp	r1, r3
 800a72c:	d002      	beq.n	800a734 <__sflush_r+0x94>
 800a72e:	4628      	mov	r0, r5
 800a730:	f7ff fbe8 	bl	8009f04 <_free_r>
 800a734:	2000      	movs	r0, #0
 800a736:	6360      	str	r0, [r4, #52]	; 0x34
 800a738:	e7c0      	b.n	800a6bc <__sflush_r+0x1c>
 800a73a:	2301      	movs	r3, #1
 800a73c:	4628      	mov	r0, r5
 800a73e:	47b0      	blx	r6
 800a740:	1c41      	adds	r1, r0, #1
 800a742:	d1c8      	bne.n	800a6d6 <__sflush_r+0x36>
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d0c5      	beq.n	800a6d6 <__sflush_r+0x36>
 800a74a:	2b1d      	cmp	r3, #29
 800a74c:	d001      	beq.n	800a752 <__sflush_r+0xb2>
 800a74e:	2b16      	cmp	r3, #22
 800a750:	d101      	bne.n	800a756 <__sflush_r+0xb6>
 800a752:	602f      	str	r7, [r5, #0]
 800a754:	e7b1      	b.n	800a6ba <__sflush_r+0x1a>
 800a756:	89a3      	ldrh	r3, [r4, #12]
 800a758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a75c:	81a3      	strh	r3, [r4, #12]
 800a75e:	e7ad      	b.n	800a6bc <__sflush_r+0x1c>
 800a760:	690f      	ldr	r7, [r1, #16]
 800a762:	2f00      	cmp	r7, #0
 800a764:	d0a9      	beq.n	800a6ba <__sflush_r+0x1a>
 800a766:	0793      	lsls	r3, r2, #30
 800a768:	680e      	ldr	r6, [r1, #0]
 800a76a:	600f      	str	r7, [r1, #0]
 800a76c:	bf0c      	ite	eq
 800a76e:	694b      	ldreq	r3, [r1, #20]
 800a770:	2300      	movne	r3, #0
 800a772:	eba6 0807 	sub.w	r8, r6, r7
 800a776:	608b      	str	r3, [r1, #8]
 800a778:	f1b8 0f00 	cmp.w	r8, #0
 800a77c:	dd9d      	ble.n	800a6ba <__sflush_r+0x1a>
 800a77e:	4643      	mov	r3, r8
 800a780:	463a      	mov	r2, r7
 800a782:	6a21      	ldr	r1, [r4, #32]
 800a784:	4628      	mov	r0, r5
 800a786:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a788:	47b0      	blx	r6
 800a78a:	2800      	cmp	r0, #0
 800a78c:	dc06      	bgt.n	800a79c <__sflush_r+0xfc>
 800a78e:	89a3      	ldrh	r3, [r4, #12]
 800a790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a798:	81a3      	strh	r3, [r4, #12]
 800a79a:	e78f      	b.n	800a6bc <__sflush_r+0x1c>
 800a79c:	4407      	add	r7, r0
 800a79e:	eba8 0800 	sub.w	r8, r8, r0
 800a7a2:	e7e9      	b.n	800a778 <__sflush_r+0xd8>
 800a7a4:	dfbffffe 	.word	0xdfbffffe

0800a7a8 <_fflush_r>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	690b      	ldr	r3, [r1, #16]
 800a7ac:	4605      	mov	r5, r0
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	b913      	cbnz	r3, 800a7b8 <_fflush_r+0x10>
 800a7b2:	2500      	movs	r5, #0
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	b118      	cbz	r0, 800a7c2 <_fflush_r+0x1a>
 800a7ba:	6a03      	ldr	r3, [r0, #32]
 800a7bc:	b90b      	cbnz	r3, 800a7c2 <_fflush_r+0x1a>
 800a7be:	f7ff f9a9 	bl	8009b14 <__sinit>
 800a7c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d0f3      	beq.n	800a7b2 <_fflush_r+0xa>
 800a7ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7cc:	07d0      	lsls	r0, r2, #31
 800a7ce:	d404      	bmi.n	800a7da <_fflush_r+0x32>
 800a7d0:	0599      	lsls	r1, r3, #22
 800a7d2:	d402      	bmi.n	800a7da <_fflush_r+0x32>
 800a7d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7d6:	f7ff fb92 	bl	8009efe <__retarget_lock_acquire_recursive>
 800a7da:	4628      	mov	r0, r5
 800a7dc:	4621      	mov	r1, r4
 800a7de:	f7ff ff5f 	bl	800a6a0 <__sflush_r>
 800a7e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7e4:	4605      	mov	r5, r0
 800a7e6:	07da      	lsls	r2, r3, #31
 800a7e8:	d4e4      	bmi.n	800a7b4 <_fflush_r+0xc>
 800a7ea:	89a3      	ldrh	r3, [r4, #12]
 800a7ec:	059b      	lsls	r3, r3, #22
 800a7ee:	d4e1      	bmi.n	800a7b4 <_fflush_r+0xc>
 800a7f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7f2:	f7ff fb85 	bl	8009f00 <__retarget_lock_release_recursive>
 800a7f6:	e7dd      	b.n	800a7b4 <_fflush_r+0xc>

0800a7f8 <__swhatbuf_r>:
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a800:	b096      	sub	sp, #88	; 0x58
 800a802:	4615      	mov	r5, r2
 800a804:	2900      	cmp	r1, #0
 800a806:	461e      	mov	r6, r3
 800a808:	da0c      	bge.n	800a824 <__swhatbuf_r+0x2c>
 800a80a:	89a3      	ldrh	r3, [r4, #12]
 800a80c:	2100      	movs	r1, #0
 800a80e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a812:	bf0c      	ite	eq
 800a814:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a818:	2340      	movne	r3, #64	; 0x40
 800a81a:	2000      	movs	r0, #0
 800a81c:	6031      	str	r1, [r6, #0]
 800a81e:	602b      	str	r3, [r5, #0]
 800a820:	b016      	add	sp, #88	; 0x58
 800a822:	bd70      	pop	{r4, r5, r6, pc}
 800a824:	466a      	mov	r2, sp
 800a826:	f000 f849 	bl	800a8bc <_fstat_r>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	dbed      	blt.n	800a80a <__swhatbuf_r+0x12>
 800a82e:	9901      	ldr	r1, [sp, #4]
 800a830:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a834:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a838:	4259      	negs	r1, r3
 800a83a:	4159      	adcs	r1, r3
 800a83c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a840:	e7eb      	b.n	800a81a <__swhatbuf_r+0x22>

0800a842 <__smakebuf_r>:
 800a842:	898b      	ldrh	r3, [r1, #12]
 800a844:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a846:	079d      	lsls	r5, r3, #30
 800a848:	4606      	mov	r6, r0
 800a84a:	460c      	mov	r4, r1
 800a84c:	d507      	bpl.n	800a85e <__smakebuf_r+0x1c>
 800a84e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a852:	6023      	str	r3, [r4, #0]
 800a854:	6123      	str	r3, [r4, #16]
 800a856:	2301      	movs	r3, #1
 800a858:	6163      	str	r3, [r4, #20]
 800a85a:	b002      	add	sp, #8
 800a85c:	bd70      	pop	{r4, r5, r6, pc}
 800a85e:	ab01      	add	r3, sp, #4
 800a860:	466a      	mov	r2, sp
 800a862:	f7ff ffc9 	bl	800a7f8 <__swhatbuf_r>
 800a866:	9900      	ldr	r1, [sp, #0]
 800a868:	4605      	mov	r5, r0
 800a86a:	4630      	mov	r0, r6
 800a86c:	f7ff fbb6 	bl	8009fdc <_malloc_r>
 800a870:	b948      	cbnz	r0, 800a886 <__smakebuf_r+0x44>
 800a872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a876:	059a      	lsls	r2, r3, #22
 800a878:	d4ef      	bmi.n	800a85a <__smakebuf_r+0x18>
 800a87a:	f023 0303 	bic.w	r3, r3, #3
 800a87e:	f043 0302 	orr.w	r3, r3, #2
 800a882:	81a3      	strh	r3, [r4, #12]
 800a884:	e7e3      	b.n	800a84e <__smakebuf_r+0xc>
 800a886:	89a3      	ldrh	r3, [r4, #12]
 800a888:	6020      	str	r0, [r4, #0]
 800a88a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a88e:	6120      	str	r0, [r4, #16]
 800a890:	81a3      	strh	r3, [r4, #12]
 800a892:	9b00      	ldr	r3, [sp, #0]
 800a894:	6163      	str	r3, [r4, #20]
 800a896:	9b01      	ldr	r3, [sp, #4]
 800a898:	b15b      	cbz	r3, 800a8b2 <__smakebuf_r+0x70>
 800a89a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a89e:	4630      	mov	r0, r6
 800a8a0:	f000 f81e 	bl	800a8e0 <_isatty_r>
 800a8a4:	b128      	cbz	r0, 800a8b2 <__smakebuf_r+0x70>
 800a8a6:	89a3      	ldrh	r3, [r4, #12]
 800a8a8:	f023 0303 	bic.w	r3, r3, #3
 800a8ac:	f043 0301 	orr.w	r3, r3, #1
 800a8b0:	81a3      	strh	r3, [r4, #12]
 800a8b2:	89a3      	ldrh	r3, [r4, #12]
 800a8b4:	431d      	orrs	r5, r3
 800a8b6:	81a5      	strh	r5, [r4, #12]
 800a8b8:	e7cf      	b.n	800a85a <__smakebuf_r+0x18>
	...

0800a8bc <_fstat_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	2300      	movs	r3, #0
 800a8c0:	4d06      	ldr	r5, [pc, #24]	; (800a8dc <_fstat_r+0x20>)
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	4608      	mov	r0, r1
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	602b      	str	r3, [r5, #0]
 800a8ca:	f7f6 fdee 	bl	80014aa <_fstat>
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	d102      	bne.n	800a8d8 <_fstat_r+0x1c>
 800a8d2:	682b      	ldr	r3, [r5, #0]
 800a8d4:	b103      	cbz	r3, 800a8d8 <_fstat_r+0x1c>
 800a8d6:	6023      	str	r3, [r4, #0]
 800a8d8:	bd38      	pop	{r3, r4, r5, pc}
 800a8da:	bf00      	nop
 800a8dc:	20000300 	.word	0x20000300

0800a8e0 <_isatty_r>:
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	4d05      	ldr	r5, [pc, #20]	; (800a8fc <_isatty_r+0x1c>)
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	4608      	mov	r0, r1
 800a8ea:	602b      	str	r3, [r5, #0]
 800a8ec:	f7f6 fded 	bl	80014ca <_isatty>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	d102      	bne.n	800a8fa <_isatty_r+0x1a>
 800a8f4:	682b      	ldr	r3, [r5, #0]
 800a8f6:	b103      	cbz	r3, 800a8fa <_isatty_r+0x1a>
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	20000300 	.word	0x20000300

0800a900 <_sbrk_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	2300      	movs	r3, #0
 800a904:	4d05      	ldr	r5, [pc, #20]	; (800a91c <_sbrk_r+0x1c>)
 800a906:	4604      	mov	r4, r0
 800a908:	4608      	mov	r0, r1
 800a90a:	602b      	str	r3, [r5, #0]
 800a90c:	f7f6 fdf6 	bl	80014fc <_sbrk>
 800a910:	1c43      	adds	r3, r0, #1
 800a912:	d102      	bne.n	800a91a <_sbrk_r+0x1a>
 800a914:	682b      	ldr	r3, [r5, #0]
 800a916:	b103      	cbz	r3, 800a91a <_sbrk_r+0x1a>
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	bd38      	pop	{r3, r4, r5, pc}
 800a91c:	20000300 	.word	0x20000300

0800a920 <memchr>:
 800a920:	b2c9      	uxtb	r1, r1
 800a922:	4402      	add	r2, r0
 800a924:	b510      	push	{r4, lr}
 800a926:	4290      	cmp	r0, r2
 800a928:	4603      	mov	r3, r0
 800a92a:	d101      	bne.n	800a930 <memchr+0x10>
 800a92c:	2300      	movs	r3, #0
 800a92e:	e003      	b.n	800a938 <memchr+0x18>
 800a930:	781c      	ldrb	r4, [r3, #0]
 800a932:	3001      	adds	r0, #1
 800a934:	428c      	cmp	r4, r1
 800a936:	d1f6      	bne.n	800a926 <memchr+0x6>
 800a938:	4618      	mov	r0, r3
 800a93a:	bd10      	pop	{r4, pc}

0800a93c <_init>:
 800a93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93e:	bf00      	nop
 800a940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a942:	bc08      	pop	{r3}
 800a944:	469e      	mov	lr, r3
 800a946:	4770      	bx	lr

0800a948 <_fini>:
 800a948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a94a:	bf00      	nop
 800a94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a94e:	bc08      	pop	{r3}
 800a950:	469e      	mov	lr, r3
 800a952:	4770      	bx	lr
