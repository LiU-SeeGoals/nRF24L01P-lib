
nrf-tx-h563-simple.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a758  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  0800a9a4  0800a9a4  0001a9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac44  0800ac44  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac44  0800ac44  0001ac44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac4c  0800ac4c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac4c  0800ac4c  0001ac4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac50  0800ac50  0001ac50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800ac54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000068  0800acbc  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  0800acbc  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000115fc  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002166  00000000  00000000  000316dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d08  00000000  00000000  00033848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009fa  00000000  00000000  00034550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003139e  00000000  00000000  00034f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010a37  00000000  00000000  000662e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001329ce  00000000  00000000  00076d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dc8  00000000  00000000  001a96f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001ad4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000068 	.word	0x20000068
 8000268:	00000000 	.word	0x00000000
 800026c:	0800a98c 	.word	0x0800a98c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000006c 	.word	0x2000006c
 8000288:	0800a98c 	.word	0x0800a98c

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800029c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b4:	1d39      	adds	r1, r7, #4
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <__io_putchar+0x20>)
 80005be:	f008 fc9c 	bl	8008efa <HAL_UART_Transmit>
  return ch;
 80005c2:	687b      	ldr	r3, [r7, #4]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000114 	.word	0x20000114

080005d0 <HAL_GPIO_EXTI_Rising_Callback>:
// END REDIRECT

// This is ran when user button is pressed
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BTN_USER_Pin) {
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005e0:	d134      	bne.n	800064c <HAL_GPIO_EXTI_Rising_Callback+0x7c>
    NRF_PrintStatus();
 80005e2:	f000 fd23 	bl	800102c <NRF_PrintStatus>

    printf("Sending data...\r\n");
 80005e6:	481b      	ldr	r0, [pc, #108]	; (8000654 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 80005e8:	f009 fb58 	bl	8009c9c <puts>

    uint8_t msg[10] = "HelloWorld";
 80005ec:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80005f4:	c303      	stmia	r3!, {r0, r1}
 80005f6:	801a      	strh	r2, [r3, #0]
    NRF_Status ret = NRF_TransmitAndWait(msg, 10);
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	210a      	movs	r1, #10
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fb86 	bl	8000d10 <NRF_TransmitAndWait>
 8000604:	4603      	mov	r3, r0
 8000606:	75fb      	strb	r3, [r7, #23]
    switch (ret) {
 8000608:	7dfb      	ldrb	r3, [r7, #23]
 800060a:	2b05      	cmp	r3, #5
 800060c:	d81e      	bhi.n	800064c <HAL_GPIO_EXTI_Rising_Callback+0x7c>
 800060e:	a201      	add	r2, pc, #4	; (adr r2, 8000614 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 8000610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000614:	0800063d 	.word	0x0800063d
 8000618:	08000635 	.word	0x08000635
 800061c:	08000635 	.word	0x08000635
 8000620:	08000635 	.word	0x08000635
 8000624:	08000645 	.word	0x08000645
 8000628:	0800062d 	.word	0x0800062d
      case NRF_MAX_RT:
        printf("Max retransmissions reached, RX device not responding?\r\n");
 800062c:	480b      	ldr	r0, [pc, #44]	; (800065c <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 800062e:	f009 fb35 	bl	8009c9c <puts>
        break;
 8000632:	e00b      	b.n	800064c <HAL_GPIO_EXTI_Rising_Callback+0x7c>
      case NRF_SPI_BUSY:
      case NRF_SPI_TIMEOUT:
      case NRF_SPI_ERROR:
        printf("SPI error, pins correctly connected?\r\n");
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8000636:	f009 fb31 	bl	8009c9c <puts>
        break;
 800063a:	e007      	b.n	800064c <HAL_GPIO_EXTI_Rising_Callback+0x7c>
      case NRF_OK:
        printf("Data sent...\r\n");
 800063c:	4809      	ldr	r0, [pc, #36]	; (8000664 <HAL_GPIO_EXTI_Rising_Callback+0x94>)
 800063e:	f009 fb2d 	bl	8009c9c <puts>
        break;
 8000642:	e003      	b.n	800064c <HAL_GPIO_EXTI_Rising_Callback+0x7c>
      case NRF_ERROR:
        printf("Error when sending.\r\n");
 8000644:	4808      	ldr	r0, [pc, #32]	; (8000668 <HAL_GPIO_EXTI_Rising_Callback+0x98>)
 8000646:	f009 fb29 	bl	8009c9c <puts>
        break;
 800064a:	bf00      	nop
    }
  }
}
 800064c:	bf00      	nop
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	0800a9a4 	.word	0x0800a9a4
 8000658:	0800aa40 	.word	0x0800aa40
 800065c:	0800a9b8 	.word	0x0800a9b8
 8000660:	0800a9f0 	.word	0x0800a9f0
 8000664:	0800aa18 	.word	0x0800aa18
 8000668:	0800aa28 	.word	0x0800aa28

0800066c <runExample>:

// Configure the device
void runExample() {
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af02      	add	r7, sp, #8
  printf("\r\nStarting up simple TX H5...\r\n");
 8000672:	4816      	ldr	r0, [pc, #88]	; (80006cc <runExample+0x60>)
 8000674:	f009 fb12 	bl	8009c9c <puts>

  // Initialise the library and make the device enter standby-I mode
  if(NRF_Init(&hspi1, NRF_CSN_GPIO_Port, NRF_CSN_Pin, NRF_CE_GPIO_Port, NRF_CE_Pin) != NRF_OK) {
 8000678:	2340      	movs	r3, #64	; 0x40
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <runExample+0x64>)
 800067e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000682:	4914      	ldr	r1, [pc, #80]	; (80006d4 <runExample+0x68>)
 8000684:	4814      	ldr	r0, [pc, #80]	; (80006d8 <runExample+0x6c>)
 8000686:	f000 fa37 	bl	8000af8 <NRF_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d004      	beq.n	800069a <runExample+0x2e>
    printf("Couldn't initialise device, are pins correctly connected?\r\n");
 8000690:	4812      	ldr	r0, [pc, #72]	; (80006dc <runExample+0x70>)
 8000692:	f009 fb03 	bl	8009c9c <puts>
    Error_Handler();
 8000696:	f000 f9e9 	bl	8000a6c <Error_Handler>
  }

  // Resets all registers but keeps the device in standby-I mode
  NRF_Reset();
 800069a:	f000 fc31 	bl	8000f00 <NRF_Reset>

  // Set the transmit adress
  uint8_t address[5] = {1,2,3,4,5};
 800069e:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <runExample+0x74>)
 80006a0:	463b      	mov	r3, r7
 80006a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a6:	6018      	str	r0, [r3, #0]
 80006a8:	3304      	adds	r3, #4
 80006aa:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 80006ac:	463b      	mov	r3, r7
 80006ae:	2205      	movs	r2, #5
 80006b0:	4619      	mov	r1, r3
 80006b2:	2010      	movs	r0, #16
 80006b4:	f000 fb64 	bl	8000d80 <NRF_WriteRegister>

  // To be able to receive auto acknowledgement from the receiver
  // we need to enter a receive address as well
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 80006b8:	463b      	mov	r3, r7
 80006ba:	2205      	movs	r2, #5
 80006bc:	4619      	mov	r1, r3
 80006be:	200a      	movs	r0, #10
 80006c0:	f000 fb5e 	bl	8000d80 <NRF_WriteRegister>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	0800aa4c 	.word	0x0800aa4c
 80006d0:	42020800 	.word	0x42020800
 80006d4:	42020400 	.word	0x42020400
 80006d8:	20000084 	.word	0x20000084
 80006dc:	0800aa6c 	.word	0x0800aa6c
 80006e0:	0800aaa8 	.word	0x0800aaa8

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e8:	f001 f80c 	bl	8001704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 f80c 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f000 f91c 	bl	800092c <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 80006f4:	f000 f870 	bl	80007d8 <MX_MEMORYMAP_Init>
  MX_SPI1_Init();
 80006f8:	f000 f876 	bl	80007e8 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80006fc:	f000 f8ca 	bl	8000894 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  runExample();
 8000700:	f7ff ffb4 	bl	800066c <runExample>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000704:	e7fe      	b.n	8000704 <main+0x20>
	...

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b09c      	sub	sp, #112	; 0x70
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0320 	add.w	r3, r7, #32
 8000712:	2250      	movs	r2, #80	; 0x50
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f009 fba0 	bl	8009e5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
 800072c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800072e:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <SystemClock_Config+0xcc>)
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	4a28      	ldr	r2, [pc, #160]	; (80007d4 <SystemClock_Config+0xcc>)
 8000734:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000738:	6113      	str	r3, [r2, #16]
 800073a:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <SystemClock_Config+0xcc>)
 800073c:	691b      	ldr	r3, [r3, #16]
 800073e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000746:	bf00      	nop
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <SystemClock_Config+0xcc>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	f003 0308 	and.w	r3, r3, #8
 8000750:	2b08      	cmp	r3, #8
 8000752:	d1f9      	bne.n	8000748 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000754:	2310      	movs	r3, #16
 8000756:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800075c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800075e:	2320      	movs	r3, #32
 8000760:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000766:	2302      	movs	r3, #2
 8000768:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 800076e:	237d      	movs	r3, #125	; 0x7d
 8000770:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800077e:	2308      	movs	r3, #8
 8000780:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000782:	2300      	movs	r3, #0
 8000784:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0320 	add.w	r3, r7, #32
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fb1c 	bl	8001dcc <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800079a:	f000 f967 	bl	8000a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	231f      	movs	r3, #31
 80007a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2303      	movs	r3, #3
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2105      	movs	r1, #5
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 ff3d 	bl	800263c <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007c8:	f000 f950 	bl	8000a6c <Error_Handler>
  }
}
 80007cc:	bf00      	nop
 80007ce:	3770      	adds	r7, #112	; 0x70
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	44020800 	.word	0x44020800

080007d8 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
	...

080007e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_SPI1_Init+0xa4>)
 80007ee:	4a28      	ldr	r2, [pc, #160]	; (8000890 <MX_SPI1_Init+0xa8>)
 80007f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_SPI1_Init+0xa4>)
 80007f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80007f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007fa:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_SPI1_Init+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_SPI1_Init+0xa4>)
 8000802:	2207      	movs	r2, #7
 8000804:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_SPI1_Init+0xa4>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_SPI1_Init+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_SPI1_Init+0xa4>)
 8000814:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000818:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800081a:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_SPI1_Init+0xa4>)
 800081c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000820:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_SPI1_Init+0xa4>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_SPI1_Init+0xa4>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_SPI1_Init+0xa4>)
 8000830:	2200      	movs	r2, #0
 8000832:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_SPI1_Init+0xa4>)
 8000836:	2207      	movs	r2, #7
 8000838:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_SPI1_Init+0xa4>)
 800083c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000840:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_SPI1_Init+0xa4>)
 8000844:	2200      	movs	r2, #0
 8000846:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000848:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_SPI1_Init+0xa4>)
 800084a:	2200      	movs	r2, #0
 800084c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_SPI1_Init+0xa4>)
 8000850:	2200      	movs	r2, #0
 8000852:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <MX_SPI1_Init+0xa4>)
 8000856:	2200      	movs	r2, #0
 8000858:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_SPI1_Init+0xa4>)
 800085c:	2200      	movs	r2, #0
 800085e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_SPI1_Init+0xa4>)
 8000862:	2200      	movs	r2, #0
 8000864:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_SPI1_Init+0xa4>)
 8000868:	2200      	movs	r2, #0
 800086a:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_SPI1_Init+0xa4>)
 800086e:	2200      	movs	r2, #0
 8000870:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_SPI1_Init+0xa4>)
 8000874:	2200      	movs	r2, #0
 8000876:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_SPI1_Init+0xa4>)
 800087a:	f007 fa73 	bl	8007d64 <HAL_SPI_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000884:	f000 f8f2 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000084 	.word	0x20000084
 8000890:	40013000 	.word	0x40013000

08000894 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <MX_USART3_UART_Init+0x90>)
 800089a:	4a23      	ldr	r2, [pc, #140]	; (8000928 <MX_USART3_UART_Init+0x94>)
 800089c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008dc:	4811      	ldr	r0, [pc, #68]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008de:	f008 fabc 	bl	8008e5a <HAL_UART_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008e8:	f000 f8c0 	bl	8000a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	480d      	ldr	r0, [pc, #52]	; (8000924 <MX_USART3_UART_Init+0x90>)
 80008f0:	f008 ffe2 	bl	80098b8 <HAL_UARTEx_SetTxFifoThreshold>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008fa:	f000 f8b7 	bl	8000a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fe:	2100      	movs	r1, #0
 8000900:	4808      	ldr	r0, [pc, #32]	; (8000924 <MX_USART3_UART_Init+0x90>)
 8000902:	f009 f817 	bl	8009934 <HAL_UARTEx_SetRxFifoThreshold>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800090c:	f000 f8ae 	bl	8000a6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_USART3_UART_Init+0x90>)
 8000912:	f008 ff98 	bl	8009846 <HAL_UARTEx_DisableFifoMode>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800091c:	f000 f8a6 	bl	8000a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000114 	.word	0x20000114
 8000928:	40004800 	.word	0x40004800

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08a      	sub	sp, #40	; 0x28
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <MX_GPIO_Init+0x130>)
 8000944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000948:	4a44      	ldr	r2, [pc, #272]	; (8000a5c <MX_GPIO_Init+0x130>)
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000952:	4b42      	ldr	r3, [pc, #264]	; (8000a5c <MX_GPIO_Init+0x130>)
 8000954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b3e      	ldr	r3, [pc, #248]	; (8000a5c <MX_GPIO_Init+0x130>)
 8000962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000966:	4a3d      	ldr	r2, [pc, #244]	; (8000a5c <MX_GPIO_Init+0x130>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000970:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <MX_GPIO_Init+0x130>)
 8000972:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097e:	4b37      	ldr	r3, [pc, #220]	; (8000a5c <MX_GPIO_Init+0x130>)
 8000980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000984:	4a35      	ldr	r2, [pc, #212]	; (8000a5c <MX_GPIO_Init+0x130>)
 8000986:	f043 0308 	orr.w	r3, r3, #8
 800098a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800098e:	4b33      	ldr	r3, [pc, #204]	; (8000a5c <MX_GPIO_Init+0x130>)
 8000990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000994:	f003 0308 	and.w	r3, r3, #8
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800099c:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <MX_GPIO_Init+0x130>)
 800099e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009a2:	4a2e      	ldr	r2, [pc, #184]	; (8000a5c <MX_GPIO_Init+0x130>)
 80009a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <MX_GPIO_Init+0x130>)
 80009ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <MX_GPIO_Init+0x130>)
 80009bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009c0:	4a26      	ldr	r2, [pc, #152]	; (8000a5c <MX_GPIO_Init+0x130>)
 80009c2:	f043 0302 	orr.w	r3, r3, #2
 80009c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009ca:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MX_GPIO_Init+0x130>)
 80009cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	2140      	movs	r1, #64	; 0x40
 80009dc:	4820      	ldr	r0, [pc, #128]	; (8000a60 <MX_GPIO_Init+0x134>)
 80009de:	f001 f9ab 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e8:	481e      	ldr	r0, [pc, #120]	; (8000a64 <MX_GPIO_Init+0x138>)
 80009ea:	f001 f9a5 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 80009ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_GPIO_Init+0x13c>)
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4817      	ldr	r0, [pc, #92]	; (8000a60 <MX_GPIO_Init+0x134>)
 8000a04:	f001 f82e 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000a08:	2340      	movs	r3, #64	; 0x40
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4810      	ldr	r0, [pc, #64]	; (8000a60 <MX_GPIO_Init+0x134>)
 8000a20:	f001 f820 	bl	8001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 8000a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_GPIO_Init+0x138>)
 8000a3e:	f001 f811 	bl	8001a64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2018      	movs	r0, #24
 8000a48:	f000 ffd7 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000a4c:	2018      	movs	r0, #24
 8000a4e:	f000 ffee 	bl	8001a2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	; 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	44020c00 	.word	0x44020c00
 8000a60:	42020800 	.word	0x42020800
 8000a64:	42020400 	.word	0x42020400
 8000a68:	10110000 	.word	0x10110000

08000a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <Error_Handler+0x8>
	...

08000a78 <csn_set>:

/*
 * Private functions
 */

void csn_set() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <csn_set+0x18>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <csn_set+0x1c>)
 8000a82:	8811      	ldrh	r1, [r2, #0]
 8000a84:	2201      	movs	r2, #1
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f956 	bl	8001d38 <HAL_GPIO_WritePin>
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200001ac 	.word	0x200001ac
 8000a94:	200001b0 	.word	0x200001b0

08000a98 <csn_reset>:

void csn_reset() {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <csn_reset+0x18>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <csn_reset+0x1c>)
 8000aa2:	8811      	ldrh	r1, [r2, #0]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 f946 	bl	8001d38 <HAL_GPIO_WritePin>
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	200001ac 	.word	0x200001ac
 8000ab4:	200001b0 	.word	0x200001b0

08000ab8 <ce_set>:

void ce_set() {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <ce_set+0x18>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <ce_set+0x1c>)
 8000ac2:	8811      	ldrh	r1, [r2, #0]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f001 f936 	bl	8001d38 <HAL_GPIO_WritePin>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	200001b4 	.word	0x200001b4
 8000ad4:	200001b8 	.word	0x200001b8

08000ad8 <ce_reset>:

void ce_reset() {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <ce_reset+0x18>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <ce_reset+0x1c>)
 8000ae2:	8811      	ldrh	r1, [r2, #0]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 f926 	bl	8001d38 <HAL_GPIO_WritePin>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200001b4 	.word	0x200001b4
 8000af4:	200001b8 	.word	0x200001b8

08000af8 <NRF_Init>:
 *
 * Main functions
 *
 */

NRF_Status NRF_Init(SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCSN, uint16_t PinCSN, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	4613      	mov	r3, r2
 8000b06:	80fb      	strh	r3, [r7, #6]
  HSPI = handle;
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <NRF_Init+0x48>)
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6013      	str	r3, [r2, #0]
  NRF_CSN_Port = PortCSN;
 8000b0e:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <NRF_Init+0x4c>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	6013      	str	r3, [r2, #0]
  NRF_CSN_Pin = PinCSN;
 8000b14:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <NRF_Init+0x50>)
 8000b16:	88fb      	ldrh	r3, [r7, #6]
 8000b18:	8013      	strh	r3, [r2, #0]
  NRF_CE_Port = PortCE;
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	; (8000b4c <NRF_Init+0x54>)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	6013      	str	r3, [r2, #0]
  NRF_CE_Pin = PinCE;
 8000b20:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <NRF_Init+0x58>)
 8000b22:	8b3b      	ldrh	r3, [r7, #24]
 8000b24:	8013      	strh	r3, [r2, #0]

  // Make sure CSN i pulled high
  csn_set();
 8000b26:	f7ff ffa7 	bl	8000a78 <csn_set>

  // Takes ~100ms from power on to start up
  HAL_Delay(100);
 8000b2a:	2064      	movs	r0, #100	; 0x64
 8000b2c:	f000 fe66 	bl	80017fc <HAL_Delay>

  return NRF_EnterMode(NRF_MODE_STANDBY1);
 8000b30:	2001      	movs	r0, #1
 8000b32:	f000 f89f 	bl	8000c74 <NRF_EnterMode>
 8000b36:	4603      	mov	r3, r0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200001a8 	.word	0x200001a8
 8000b44:	200001ac 	.word	0x200001ac
 8000b48:	200001b0 	.word	0x200001b0
 8000b4c:	200001b4 	.word	0x200001b4
 8000b50:	200001b8 	.word	0x200001b8

08000b54 <NRF_SendCommand>:

NRF_Status NRF_SendCommand(uint8_t cmd) {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af02      	add	r7, sp, #8
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000b62:	f7ff ff99 	bl	8000a98 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <NRF_SendCommand+0x44>)
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	f107 020e 	add.w	r2, r7, #14
 8000b6e:	1df9      	adds	r1, r7, #7
 8000b70:	230a      	movs	r3, #10
 8000b72:	9300      	str	r3, [sp, #0]
 8000b74:	2301      	movs	r3, #1
 8000b76:	f007 fe41 	bl	80087fc <HAL_SPI_TransmitReceive>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <NRF_SendCommand+0x34>
    return ret;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	e002      	b.n	8000b8e <NRF_SendCommand+0x3a>
  }
  csn_set();
 8000b88:	f7ff ff76 	bl	8000a78 <csn_set>

  return ret;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200001a8 	.word	0x200001a8

08000b9c <NRF_SendWriteCommand>:

NRF_Status NRF_SendWriteCommand(uint8_t cmd, uint8_t *write, uint8_t length) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af02      	add	r7, sp, #8
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000bb0:	f7ff ff72 	bl	8000a98 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <NRF_SendWriteCommand+0x68>)
 8000bb6:	6818      	ldr	r0, [r3, #0]
 8000bb8:	f107 020e 	add.w	r2, r7, #14
 8000bbc:	1df9      	adds	r1, r7, #7
 8000bbe:	230a      	movs	r3, #10
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f007 fe1a 	bl	80087fc <HAL_SPI_TransmitReceive>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <NRF_SendWriteCommand+0x3a>
    return ret;
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	e011      	b.n	8000bfa <NRF_SendWriteCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Transmit(HSPI, write, length, NRF_SPI_TIMEOUT_DUR);
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <NRF_SendWriteCommand+0x68>)
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	79bb      	ldrb	r3, [r7, #6]
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	230a      	movs	r3, #10
 8000be0:	6839      	ldr	r1, [r7, #0]
 8000be2:	f007 fa2f 	bl	8008044 <HAL_SPI_Transmit>
 8000be6:	4603      	mov	r3, r0
 8000be8:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <NRF_SendWriteCommand+0x58>
    return ret;
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	e002      	b.n	8000bfa <NRF_SendWriteCommand+0x5e>
  }
  csn_set();
 8000bf4:	f7ff ff40 	bl	8000a78 <csn_set>

  return ret;
 8000bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200001a8 	.word	0x200001a8

08000c08 <NRF_SendReadCommand>:

NRF_Status NRF_SendReadCommand(uint8_t cmd, uint8_t *read, uint8_t length) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	4613      	mov	r3, r2
 8000c16:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000c1c:	f7ff ff3c 	bl	8000a98 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <NRF_SendReadCommand+0x68>)
 8000c22:	6818      	ldr	r0, [r3, #0]
 8000c24:	f107 020e 	add.w	r2, r7, #14
 8000c28:	1df9      	adds	r1, r7, #7
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f007 fde4 	bl	80087fc <HAL_SPI_TransmitReceive>
 8000c34:	4603      	mov	r3, r0
 8000c36:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <NRF_SendReadCommand+0x3a>
    return ret;
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	e011      	b.n	8000c66 <NRF_SendReadCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Receive(HSPI, read, length, NRF_SPI_TIMEOUT_DUR);
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <NRF_SendReadCommand+0x68>)
 8000c44:	6818      	ldr	r0, [r3, #0]
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	b29a      	uxth	r2, r3
 8000c4a:	230a      	movs	r3, #10
 8000c4c:	6839      	ldr	r1, [r7, #0]
 8000c4e:	f007 fc1d 	bl	800848c <HAL_SPI_Receive>
 8000c52:	4603      	mov	r3, r0
 8000c54:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <NRF_SendReadCommand+0x58>
    return ret;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	e002      	b.n	8000c66 <NRF_SendReadCommand+0x5e>
  }
  csn_set();
 8000c60:	f7ff ff0a 	bl	8000a78 <csn_set>

  return ret;
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200001a8 	.word	0x200001a8

08000c74 <NRF_EnterMode>:
 *
 * Device control
 *
 */

NRF_Status NRF_EnterMode(uint8_t mode) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]

  switch(mode) {
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b03      	cmp	r3, #3
 8000c86:	dc2a      	bgt.n	8000cde <NRF_EnterMode+0x6a>
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	da15      	bge.n	8000cb8 <NRF_EnterMode+0x44>
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d002      	beq.n	8000c96 <NRF_EnterMode+0x22>
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d006      	beq.n	8000ca2 <NRF_EnterMode+0x2e>
 8000c94:	e023      	b.n	8000cde <NRF_EnterMode+0x6a>
    case NRF_MODE_POWERDOWN:
      // Can come from any mode
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000c96:	2101      	movs	r1, #1
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f000 f8ce 	bl	8000e3a <NRF_ResetRegisterBit>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	73fb      	strb	r3, [r7, #15]
    case NRF_MODE_STANDBY1:
      // We expect to come from powerdown
      ce_reset();
 8000ca2:	f7ff ff19 	bl	8000ad8 <ce_reset>
      ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f000 f895 	bl	8000dd8 <NRF_SetRegisterBit>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(2);
 8000cb2:	2002      	movs	r0, #2
 8000cb4:	f000 fda2 	bl	80017fc <HAL_Delay>
    case NRF_MODE_RX:
    case NRF_MODE_TX:
      // We expect to come from standby-I
      if (mode == NRF_MODE_TX) {
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2b03      	cmp	r3, #3
 8000cbc:	d106      	bne.n	8000ccc <NRF_EnterMode+0x58>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f000 f8ba 	bl	8000e3a <NRF_ResetRegisterBit>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	73fb      	strb	r3, [r7, #15]
 8000cca:	e005      	b.n	8000cd8 <NRF_EnterMode+0x64>
      } else {
        ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f882 	bl	8000dd8 <NRF_SetRegisterBit>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	73fb      	strb	r3, [r7, #15]
      }

      // Enter mode
      ce_set();
 8000cd8:	f7ff feee 	bl	8000ab8 <ce_set>
      break;
 8000cdc:	e002      	b.n	8000ce4 <NRF_EnterMode+0x70>
    default:
      ret = NRF_ERROR;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	73fb      	strb	r3, [r7, #15]
      break;
 8000ce2:	bf00      	nop
  }

  return ret;
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <NRF_WritePayload>:

NRF_Status NRF_WritePayload(uint8_t *payload, uint8_t length) {
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
 8000cf6:	460b      	mov	r3, r1
 8000cf8:	70fb      	strb	r3, [r7, #3]
  return NRF_SendWriteCommand(NRF_CMD_W_TX_PAYLOAD, payload, length);
 8000cfa:	78fb      	ldrb	r3, [r7, #3]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	20a0      	movs	r0, #160	; 0xa0
 8000d02:	f7ff ff4b 	bl	8000b9c <NRF_SendWriteCommand>
 8000d06:	4603      	mov	r3, r0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <NRF_TransmitAndWait>:
  ce_reset();

  return ret;
}

NRF_Status NRF_TransmitAndWait(uint8_t *payload, uint8_t length) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	70fb      	strb	r3, [r7, #3]
  NRF_Status ret = NRF_OK;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]

  ret = NRF_WritePayload(payload, length);
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	4619      	mov	r1, r3
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ffe2 	bl	8000cee <NRF_WritePayload>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <NRF_TransmitAndWait+0x28>
    return ret;
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	e01f      	b.n	8000d78 <NRF_TransmitAndWait+0x68>
  }

  // Transmit
  ce_set();
 8000d38:	f7ff febe 	bl	8000ab8 <ce_set>

  // Wait for status update
  uint8_t status;
  for(;;) {
    status = NRF_ReadStatus();
 8000d3c:	f000 f8c4 	bl	8000ec8 <NRF_ReadStatus>
 8000d40:	4603      	mov	r3, r0
 8000d42:	73bb      	strb	r3, [r7, #14]
    if (status & (1<<STATUS_BIT_TX_DS)) {
 8000d44:	7bbb      	ldrb	r3, [r7, #14]
 8000d46:	f003 0320 	and.w	r3, r3, #32
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d006      	beq.n	8000d5c <NRF_TransmitAndWait+0x4c>
      // Packet transmitted
      ret = NRF_SetRegisterBit(NRF_REG_STATUS, STATUS_BIT_TX_DS); // clear flag
 8000d4e:	2105      	movs	r1, #5
 8000d50:	2007      	movs	r0, #7
 8000d52:	f000 f841 	bl	8000dd8 <NRF_SetRegisterBit>
 8000d56:	4603      	mov	r3, r0
 8000d58:	73fb      	strb	r3, [r7, #15]
      break;
 8000d5a:	e00a      	b.n	8000d72 <NRF_TransmitAndWait+0x62>
    } else if (status & (1<<STATUS_BIT_MAX_RT)) {
 8000d5c:	7bbb      	ldrb	r3, [r7, #14]
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0ea      	beq.n	8000d3c <NRF_TransmitAndWait+0x2c>
      // Max retransmits reached
      NRF_SetRegisterBit(NRF_REG_STATUS, STATUS_BIT_MAX_RT); // clear flag
 8000d66:	2104      	movs	r1, #4
 8000d68:	2007      	movs	r0, #7
 8000d6a:	f000 f835 	bl	8000dd8 <NRF_SetRegisterBit>
      ret = NRF_MAX_RT;
 8000d6e:	2305      	movs	r3, #5
 8000d70:	73fb      	strb	r3, [r7, #15]
      break;
    }
  }
  ce_reset();
 8000d72:	f7ff feb1 	bl	8000ad8 <ce_reset>

  return ret;
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <NRF_WriteRegister>:
 * Register helpers
 *
 */

/* Writing */
NRF_Status NRF_WriteRegister(uint8_t reg, uint8_t *write, uint8_t length) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_REGISTER | reg, write, length);
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f043 0320 	orr.w	r3, r3, #32
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	79ba      	ldrb	r2, [r7, #6]
 8000d9a:	6839      	ldr	r1, [r7, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fefd 	bl	8000b9c <NRF_SendWriteCommand>
 8000da2:	4603      	mov	r3, r0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF_WriteRegisterByte>:

NRF_Status NRF_WriteRegisterByte(uint8_t reg, uint8_t byte) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	460a      	mov	r2, r1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	4613      	mov	r3, r2
 8000dba:	71bb      	strb	r3, [r7, #6]
  uint8_t write = byte;
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	73fb      	strb	r3, [r7, #15]
  return NRF_WriteRegister(reg, &write, 1);
 8000dc0:	f107 010f 	add.w	r1, r7, #15
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ffd9 	bl	8000d80 <NRF_WriteRegister>
 8000dce:	4603      	mov	r3, r0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3710      	adds	r7, #16
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <NRF_SetRegisterBit>:

NRF_Status NRF_SetRegisterBit(uint8_t reg, uint8_t bit) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	460a      	mov	r2, r1
 8000de2:	71fb      	strb	r3, [r7, #7]
 8000de4:	4613      	mov	r3, r2
 8000de6:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 8000df0:	f107 010e 	add.w	r1, r7, #14
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2201      	movs	r2, #1
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 f851 	bl	8000ea0 <NRF_ReadRegister>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <NRF_SetRegisterBit+0x34>
    return ret;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	e012      	b.n	8000e32 <NRF_SetRegisterBit+0x5a>
  }

  cfg = cfg | (1 << bit);
 8000e0c:	79bb      	ldrb	r3, [r7, #6]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	b25a      	sxtb	r2, r3
 8000e16:	7bbb      	ldrb	r3, [r7, #14]
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 8000e22:	f107 010e 	add.w	r1, r7, #14
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ffa8 	bl	8000d80 <NRF_WriteRegister>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <NRF_ResetRegisterBit>:

NRF_Status NRF_ResetRegisterBit(uint8_t reg, uint8_t bit) {
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	460a      	mov	r2, r1
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	4613      	mov	r3, r2
 8000e48:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 8000e52:	f107 010e 	add.w	r1, r7, #14
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f820 	bl	8000ea0 <NRF_ReadRegister>
 8000e60:	4603      	mov	r3, r0
 8000e62:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <NRF_ResetRegisterBit+0x34>
    return ret;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	e014      	b.n	8000e98 <NRF_ResetRegisterBit+0x5e>
  }

  cfg = cfg & ~(1 << bit);
 8000e6e:	79bb      	ldrb	r3, [r7, #6]
 8000e70:	2201      	movs	r2, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	b25a      	sxtb	r2, r3
 8000e7c:	7bbb      	ldrb	r3, [r7, #14]
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	4013      	ands	r3, r2
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 8000e88:	f107 010e 	add.w	r1, r7, #14
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff75 	bl	8000d80 <NRF_WriteRegister>
 8000e96:	4603      	mov	r3, r0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <NRF_ReadRegister>:


/* Reading */
NRF_Status NRF_ReadRegister(uint8_t reg, uint8_t *read, uint8_t length) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
  return NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, read, length);
 8000eb0:	79ba      	ldrb	r2, [r7, #6]
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	6839      	ldr	r1, [r7, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fea6 	bl	8000c08 <NRF_SendReadCommand>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <NRF_ReadStatus>:
  uint8_t read;
  NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, &read, 1);
  return read;
}

uint8_t NRF_ReadStatus() {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af02      	add	r7, sp, #8
  uint8_t status = 0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd = NRF_CMD_NOP;
 8000ed2:	23ff      	movs	r3, #255	; 0xff
 8000ed4:	71bb      	strb	r3, [r7, #6]

  csn_reset();
 8000ed6:	f7ff fddf 	bl	8000a98 <csn_reset>
  HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <NRF_ReadStatus+0x34>)
 8000edc:	6818      	ldr	r0, [r3, #0]
 8000ede:	1dfa      	adds	r2, r7, #7
 8000ee0:	1db9      	adds	r1, r7, #6
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f007 fc88 	bl	80087fc <HAL_SPI_TransmitReceive>
  csn_set();
 8000eec:	f7ff fdc4 	bl	8000a78 <csn_set>

  return status;
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200001a8 	.word	0x200001a8

08000f00 <NRF_Reset>:
  }

  return ret;
}

void NRF_Reset() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
  // Reset state (goto standby-I)
  csn_set();
 8000f06:	f7ff fdb7 	bl	8000a78 <csn_set>
  ce_reset();
 8000f0a:	f7ff fde5 	bl	8000ad8 <ce_reset>

  // Flush FIFOs
  NRF_EnterMode(NRF_MODE_TX);
 8000f0e:	2003      	movs	r0, #3
 8000f10:	f7ff feb0 	bl	8000c74 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_TX);
 8000f14:	20e1      	movs	r0, #225	; 0xe1
 8000f16:	f7ff fe1d 	bl	8000b54 <NRF_SendCommand>
  ce_reset();
 8000f1a:	f7ff fddd 	bl	8000ad8 <ce_reset>
  NRF_EnterMode(NRF_MODE_RX);
 8000f1e:	2002      	movs	r0, #2
 8000f20:	f7ff fea8 	bl	8000c74 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_RX);
 8000f24:	20e2      	movs	r0, #226	; 0xe2
 8000f26:	f7ff fe15 	bl	8000b54 <NRF_SendCommand>
  ce_reset();
 8000f2a:	f7ff fdd5 	bl	8000ad8 <ce_reset>

  // Flush register
  NRF_WriteRegisterByte(NRF_REG_CONFIG,       0x0A);
 8000f2e:	210a      	movs	r1, #10
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff ff3b 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_AA,        0x3f);
 8000f36:	213f      	movs	r1, #63	; 0x3f
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff ff37 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_RXADDR,    0x03);
 8000f3e:	2103      	movs	r1, #3
 8000f40:	2002      	movs	r0, #2
 8000f42:	f7ff ff33 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_AW,     0x03);
 8000f46:	2103      	movs	r1, #3
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f7ff ff2f 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_RETR,   0x03);
 8000f4e:	2103      	movs	r1, #3
 8000f50:	2004      	movs	r0, #4
 8000f52:	f7ff ff2b 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_CH,        0x02);
 8000f56:	2102      	movs	r1, #2
 8000f58:	2005      	movs	r0, #5
 8000f5a:	f7ff ff27 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_SETUP,     0x0e);
 8000f5e:	210e      	movs	r1, #14
 8000f60:	2006      	movs	r0, #6
 8000f62:	f7ff ff23 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_STATUS,       0x70); // clear flags
 8000f66:	2170      	movs	r1, #112	; 0x70
 8000f68:	2007      	movs	r0, #7
 8000f6a:	f7ff ff1f 	bl	8000dac <NRF_WriteRegisterByte>

  uint8_t address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000f6e:	4a2d      	ldr	r2, [pc, #180]	; (8001024 <NRF_Reset+0x124>)
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f78:	6018      	str	r0, [r3, #0]
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	7019      	strb	r1, [r3, #0]
  uint8_t address2[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000f7e:	4a2a      	ldr	r2, [pc, #168]	; (8001028 <NRF_Reset+0x128>)
 8000f80:	463b      	mov	r3, r7
 8000f82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f86:	6018      	str	r0, [r3, #0]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	2205      	movs	r2, #5
 8000f92:	4619      	mov	r1, r3
 8000f94:	200a      	movs	r0, #10
 8000f96:	f7ff fef3 	bl	8000d80 <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P1, address2, 5);
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2205      	movs	r2, #5
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	200b      	movs	r0, #11
 8000fa2:	f7ff feed 	bl	8000d80 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P2,   0xC3);
 8000fa6:	21c3      	movs	r1, #195	; 0xc3
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff feff 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P3,   0xC4);
 8000fae:	21c4      	movs	r1, #196	; 0xc4
 8000fb0:	200d      	movs	r0, #13
 8000fb2:	f7ff fefb 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P4,   0xC5);
 8000fb6:	21c5      	movs	r1, #197	; 0xc5
 8000fb8:	200e      	movs	r0, #14
 8000fba:	f7ff fef7 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P5,   0xC6);
 8000fbe:	21c6      	movs	r1, #198	; 0xc6
 8000fc0:	200f      	movs	r0, #15
 8000fc2:	f7ff fef3 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	2205      	movs	r2, #5
 8000fcc:	4619      	mov	r1, r3
 8000fce:	2010      	movs	r0, #16
 8000fd0:	f7ff fed6 	bl	8000d80 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,     0x00);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2011      	movs	r0, #17
 8000fd8:	f7ff fee8 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P1,     0x00);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2012      	movs	r0, #18
 8000fe0:	f7ff fee4 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P2,     0x00);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2013      	movs	r0, #19
 8000fe8:	f7ff fee0 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P3,     0x00);
 8000fec:	2100      	movs	r1, #0
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f7ff fedc 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P4,     0x00);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2015      	movs	r0, #21
 8000ff8:	f7ff fed8 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P5,     0x00);
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2016      	movs	r0, #22
 8001000:	f7ff fed4 	bl	8000dac <NRF_WriteRegisterByte>

  NRF_WriteRegisterByte(NRF_REG_FIFO_STATUS,  0x00);
 8001004:	2100      	movs	r1, #0
 8001006:	2017      	movs	r0, #23
 8001008:	f7ff fed0 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_DYNPD,        0x00);
 800100c:	2100      	movs	r1, #0
 800100e:	201c      	movs	r0, #28
 8001010:	f7ff fecc 	bl	8000dac <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_FEATURE,      0x00);
 8001014:	2100      	movs	r1, #0
 8001016:	201d      	movs	r0, #29
 8001018:	f7ff fec8 	bl	8000dac <NRF_WriteRegisterByte>
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	0800aab8 	.word	0x0800aab8
 8001028:	0800aac0 	.word	0x0800aac0

0800102c <NRF_PrintStatus>:

void NRF_PrintStatus() {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  uint8_t status = NRF_ReadStatus();
 8001032:	f7ff ff49 	bl	8000ec8 <NRF_ReadStatus>
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]

  printf("Status register: %02X\r\n", status);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4619      	mov	r1, r3
 800103e:	4825      	ldr	r0, [pc, #148]	; (80010d4 <NRF_PrintStatus+0xa8>)
 8001040:	f008 fdc6 	bl	8009bd0 <iprintf>
  printf("CE: %d\r\n", HAL_GPIO_ReadPin(NRF_CE_Port, NRF_CE_Pin));
 8001044:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <NRF_PrintStatus+0xac>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a24      	ldr	r2, [pc, #144]	; (80010dc <NRF_PrintStatus+0xb0>)
 800104a:	8812      	ldrh	r2, [r2, #0]
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fe5a 	bl	8001d08 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	4619      	mov	r1, r3
 8001058:	4821      	ldr	r0, [pc, #132]	; (80010e0 <NRF_PrintStatus+0xb4>)
 800105a:	f008 fdb9 	bl	8009bd0 <iprintf>
  printf("CSN: %d\r\n", HAL_GPIO_ReadPin(NRF_CSN_Port, NRF_CSN_Pin));
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <NRF_PrintStatus+0xb8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a21      	ldr	r2, [pc, #132]	; (80010e8 <NRF_PrintStatus+0xbc>)
 8001064:	8812      	ldrh	r2, [r2, #0]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fe4d 	bl	8001d08 <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	4619      	mov	r1, r3
 8001072:	481e      	ldr	r0, [pc, #120]	; (80010ec <NRF_PrintStatus+0xc0>)
 8001074:	f008 fdac 	bl	8009bd0 <iprintf>
  printf("TX_FULL:  %1X\r\n", status & (1<<STATUS_BIT_TX_FULL));
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	4619      	mov	r1, r3
 8001080:	481b      	ldr	r0, [pc, #108]	; (80010f0 <NRF_PrintStatus+0xc4>)
 8001082:	f008 fda5 	bl	8009bd0 <iprintf>
  printf("RX_P_NO:  %1X\r\n", (status & (0x3<<STATUS_BIT_RX_P_NO)) >> 1);
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	105b      	asrs	r3, r3, #1
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	4619      	mov	r1, r3
 8001090:	4818      	ldr	r0, [pc, #96]	; (80010f4 <NRF_PrintStatus+0xc8>)
 8001092:	f008 fd9d 	bl	8009bd0 <iprintf>
  printf("MAX_RT:   %1X\r\n", (status & (1<<STATUS_BIT_MAX_RT))    >> 4);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	111b      	asrs	r3, r3, #4
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	4619      	mov	r1, r3
 80010a0:	4815      	ldr	r0, [pc, #84]	; (80010f8 <NRF_PrintStatus+0xcc>)
 80010a2:	f008 fd95 	bl	8009bd0 <iprintf>
  printf("TX_DS:    %1X\r\n", (status & (1<<STATUS_BIT_TX_DS))     >> 5);
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	115b      	asrs	r3, r3, #5
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	4812      	ldr	r0, [pc, #72]	; (80010fc <NRF_PrintStatus+0xd0>)
 80010b2:	f008 fd8d 	bl	8009bd0 <iprintf>
  printf("RX_DR:    %1X\r\n", (status & (1<<STATUS_BIT_RX_DR))     >> 6);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	119b      	asrs	r3, r3, #6
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	4619      	mov	r1, r3
 80010c0:	480f      	ldr	r0, [pc, #60]	; (8001100 <NRF_PrintStatus+0xd4>)
 80010c2:	f008 fd85 	bl	8009bd0 <iprintf>
  printf("\r\n");
 80010c6:	480f      	ldr	r0, [pc, #60]	; (8001104 <NRF_PrintStatus+0xd8>)
 80010c8:	f008 fde8 	bl	8009c9c <puts>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	0800aac8 	.word	0x0800aac8
 80010d8:	200001b4 	.word	0x200001b4
 80010dc:	200001b8 	.word	0x200001b8
 80010e0:	0800aae0 	.word	0x0800aae0
 80010e4:	200001ac 	.word	0x200001ac
 80010e8:	200001b0 	.word	0x200001b0
 80010ec:	0800aaec 	.word	0x0800aaec
 80010f0:	0800aaf8 	.word	0x0800aaf8
 80010f4:	0800ab08 	.word	0x0800ab08
 80010f8:	0800ab18 	.word	0x0800ab18
 80010fc:	0800ab28 	.word	0x0800ab28
 8001100:	0800ab38 	.word	0x0800ab38
 8001104:	0800ab48 	.word	0x0800ab48

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0ce      	sub	sp, #312	; 0x138
 800111c:	af00      	add	r7, sp, #0
 800111e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001122:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001126:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001138:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800113c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001140:	4618      	mov	r0, r3
 8001142:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001146:	461a      	mov	r2, r3
 8001148:	2100      	movs	r1, #0
 800114a:	f008 fe87 	bl	8009e5c <memset>
  if(hspi->Instance==SPI1)
 800114e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001152:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a60      	ldr	r2, [pc, #384]	; (80012dc <HAL_SPI_MspInit+0x1c4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	f040 80b7 	bne.w	80012d0 <HAL_SPI_MspInit+0x1b8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001162:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001166:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 800116a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800116e:	f04f 0300 	mov.w	r3, #0
 8001172:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001176:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800117a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800117e:	2200      	movs	r2, #0
 8001180:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	4618      	mov	r0, r3
 800118a:	f001 fd99 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8001194:	f7ff fc6a 	bl	8000a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001198:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <HAL_SPI_MspInit+0x1c8>)
 800119a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800119e:	4a50      	ldr	r2, [pc, #320]	; (80012e0 <HAL_SPI_MspInit+0x1c8>)
 80011a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011a4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80011a8:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <HAL_SPI_MspInit+0x1c8>)
 80011aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80011b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011b6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80011c4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b46      	ldr	r3, [pc, #280]	; (80012e0 <HAL_SPI_MspInit+0x1c8>)
 80011c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011cc:	4a44      	ldr	r2, [pc, #272]	; (80012e0 <HAL_SPI_MspInit+0x1c8>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011d6:	4b42      	ldr	r3, [pc, #264]	; (80012e0 <HAL_SPI_MspInit+0x1c8>)
 80011d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011dc:	f003 0201 	and.w	r2, r3, #1
 80011e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80011ee:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80011f2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011f4:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <HAL_SPI_MspInit+0x1c8>)
 80011f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011fa:	4a39      	ldr	r2, [pc, #228]	; (80012e0 <HAL_SPI_MspInit+0x1c8>)
 80011fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001200:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001204:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <HAL_SPI_MspInit+0x1c8>)
 8001206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800120a:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800120e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001212:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800121c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001220:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <HAL_SPI_MspInit+0x1c8>)
 8001224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001228:	4a2d      	ldr	r2, [pc, #180]	; (80012e0 <HAL_SPI_MspInit+0x1c8>)
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <HAL_SPI_MspInit+0x1c8>)
 8001234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001238:	f003 0202 	and.w	r2, r3, #2
 800123c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001240:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800124a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800124e:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin;
 8001250:	2320      	movs	r3, #32
 8001252:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001268:	2305      	movs	r3, #5
 800126a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 800126e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001272:	4619      	mov	r1, r3
 8001274:	481b      	ldr	r0, [pc, #108]	; (80012e4 <HAL_SPI_MspInit+0x1cc>)
 8001276:	f000 fbf5 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 800127a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800127e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001294:	2305      	movs	r3, #5
 8001296:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 800129a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800129e:	4619      	mov	r1, r3
 80012a0:	4811      	ldr	r0, [pc, #68]	; (80012e8 <HAL_SPI_MspInit+0x1d0>)
 80012a2:	f000 fbdf 	bl	8001a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MOSI_Pin;
 80012a6:	2320      	movs	r3, #32
 80012a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012be:	2305      	movs	r3, #5
 80012c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_MOSI_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80012c8:	4619      	mov	r1, r3
 80012ca:	4808      	ldr	r0, [pc, #32]	; (80012ec <HAL_SPI_MspInit+0x1d4>)
 80012cc:	f000 fbca 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012d0:	bf00      	nop
 80012d2:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40013000 	.word	0x40013000
 80012e0:	44020c00 	.word	0x44020c00
 80012e4:	42020000 	.word	0x42020000
 80012e8:	42021800 	.word	0x42021800
 80012ec:	42020400 	.word	0x42020400

080012f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0cc      	sub	sp, #304	; 0x130
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80012fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001314:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001318:	4618      	mov	r0, r3
 800131a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800131e:	461a      	mov	r2, r3
 8001320:	2100      	movs	r1, #0
 8001322:	f008 fd9b 	bl	8009e5c <memset>
  if(huart->Instance==USART3)
 8001326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800132a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a33      	ldr	r2, [pc, #204]	; (8001400 <HAL_UART_MspInit+0x110>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d15d      	bne.n	80013f4 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800133c:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001340:	f04f 0204 	mov.w	r2, #4
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800134c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001350:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001354:	2200      	movs	r2, #0
 8001356:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4618      	mov	r0, r3
 800135e:	f001 fcaf 	bl	8002cc0 <HAL_RCCEx_PeriphCLKConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8001368:	f7ff fb80 	bl	8000a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800136c:	4b25      	ldr	r3, [pc, #148]	; (8001404 <HAL_UART_MspInit+0x114>)
 800136e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001372:	4a24      	ldr	r2, [pc, #144]	; (8001404 <HAL_UART_MspInit+0x114>)
 8001374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001378:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800137c:	4b21      	ldr	r3, [pc, #132]	; (8001404 <HAL_UART_MspInit+0x114>)
 800137e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001382:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8001386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800138a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001394:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001398:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <HAL_UART_MspInit+0x114>)
 800139c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a0:	4a18      	ldr	r2, [pc, #96]	; (8001404 <HAL_UART_MspInit+0x114>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <HAL_UART_MspInit+0x114>)
 80013ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b0:	f003 0208 	and.w	r2, r3, #8
 80013b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013b8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80013c6:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e2:	2307      	movs	r3, #7
 80013e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80013ec:	4619      	mov	r1, r3
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <HAL_UART_MspInit+0x118>)
 80013f0:	f000 fb38 	bl	8001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013f4:	bf00      	nop
 80013f6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40004800 	.word	0x40004800
 8001404:	44020c00 	.word	0x44020c00
 8001408:	42020c00 	.word	0x42020c00

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <NMI_Handler+0x4>

08001412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001416:	e7fe      	b.n	8001416 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	e7fe      	b.n	800141c <MemManage_Handler+0x4>

0800141e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <BusFault_Handler+0x4>

08001424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <UsageFault_Handler+0x4>

0800142a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001458:	f000 f9b0 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_USER_Pin);
 8001464:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001468:	f000 fc7e 	bl	8001d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e00a      	b.n	8001498 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001482:	f3af 8000 	nop.w
 8001486:	4601      	mov	r1, r0
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	b2ca      	uxtb	r2, r1
 8001490:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbf0      	blt.n	8001482 <_read+0x12>
  }

  return len;
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e009      	b.n	80014d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	1c5a      	adds	r2, r3, #1
 80014c0:	60ba      	str	r2, [r7, #8]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f871 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	697a      	ldr	r2, [r7, #20]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	dbf1      	blt.n	80014bc <_write+0x12>
  }
  return len;
 80014d8:	687b      	ldr	r3, [r7, #4]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_close>:

int _close(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150a:	605a      	str	r2, [r3, #4]
  return 0;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <_isatty>:

int _isatty(int file)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
	...

0800154c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <_sbrk+0x5c>)
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <_sbrk+0x60>)
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <_sbrk+0x64>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <_sbrk+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800157c:	f008 fcbc 	bl	8009ef8 <__errno>
 8001580:	4603      	mov	r3, r0
 8001582:	220c      	movs	r2, #12
 8001584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800158a:	e009      	b.n	80015a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <_sbrk+0x64>)
 800159c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	200a0000 	.word	0x200a0000
 80015ac:	00000400 	.word	0x00000400
 80015b0:	200001bc 	.word	0x200001bc
 80015b4:	20000310 	.word	0x20000310

080015b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80015be:	4b35      	ldr	r3, [pc, #212]	; (8001694 <SystemInit+0xdc>)
 80015c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c4:	4a33      	ldr	r2, [pc, #204]	; (8001694 <SystemInit+0xdc>)
 80015c6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80015ce:	4b32      	ldr	r3, [pc, #200]	; (8001698 <SystemInit+0xe0>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80015d4:	4b30      	ldr	r3, [pc, #192]	; (8001698 <SystemInit+0xe0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <SystemInit+0xe0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <SystemInit+0xe0>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	492c      	ldr	r1, [pc, #176]	; (8001698 <SystemInit+0xe0>)
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <SystemInit+0xe4>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80015ec:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <SystemInit+0xe0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 80015f2:	4b29      	ldr	r3, [pc, #164]	; (8001698 <SystemInit+0xe0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80015f8:	4b27      	ldr	r3, [pc, #156]	; (8001698 <SystemInit+0xe0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80015fe:	4b26      	ldr	r3, [pc, #152]	; (8001698 <SystemInit+0xe0>)
 8001600:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <SystemInit+0xe8>)
 8001602:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <SystemInit+0xe0>)
 8001606:	2200      	movs	r2, #0
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800160a:	4b23      	ldr	r3, [pc, #140]	; (8001698 <SystemInit+0xe0>)
 800160c:	4a24      	ldr	r2, [pc, #144]	; (80016a0 <SystemInit+0xe8>)
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001610:	4b21      	ldr	r3, [pc, #132]	; (8001698 <SystemInit+0xe0>)
 8001612:	2200      	movs	r2, #0
 8001614:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <SystemInit+0xe0>)
 8001618:	4a21      	ldr	r2, [pc, #132]	; (80016a0 <SystemInit+0xe8>)
 800161a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <SystemInit+0xe0>)
 800161e:	2200      	movs	r2, #0
 8001620:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <SystemInit+0xe0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <SystemInit+0xe0>)
 8001628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800162e:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <SystemInit+0xe0>)
 8001630:	2200      	movs	r2, #0
 8001632:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <SystemInit+0xdc>)
 8001636:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800163a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <SystemInit+0xec>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001644:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 800164c:	d003      	beq.n	8001656 <SystemInit+0x9e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001654:	d117      	bne.n	8001686 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <SystemInit+0xec>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d005      	beq.n	800166e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001662:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <SystemInit+0xec>)
 8001664:	4a10      	ldr	r2, [pc, #64]	; (80016a8 <SystemInit+0xf0>)
 8001666:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001668:	4b0e      	ldr	r3, [pc, #56]	; (80016a4 <SystemInit+0xec>)
 800166a:	4a10      	ldr	r2, [pc, #64]	; (80016ac <SystemInit+0xf4>)
 800166c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800166e:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <SystemInit+0xec>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <SystemInit+0xec>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <SystemInit+0xec>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	4a09      	ldr	r2, [pc, #36]	; (80016a4 <SystemInit+0xec>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	61d3      	str	r3, [r2, #28]
  }
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00
 8001698:	44020c00 	.word	0x44020c00
 800169c:	eae2eae3 	.word	0xeae2eae3
 80016a0:	01010280 	.word	0x01010280
 80016a4:	40022000 	.word	0x40022000
 80016a8:	08192a3b 	.word	0x08192a3b
 80016ac:	4c5d6e7f 	.word	0x4c5d6e7f

080016b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016b4:	f7ff ff80 	bl	80015b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b8:	480c      	ldr	r0, [pc, #48]	; (80016ec <LoopForever+0x6>)
  ldr r1, =_edata
 80016ba:	490d      	ldr	r1, [pc, #52]	; (80016f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016bc:	4a0d      	ldr	r2, [pc, #52]	; (80016f4 <LoopForever+0xe>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016d0:	4c0a      	ldr	r4, [pc, #40]	; (80016fc <LoopForever+0x16>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016de:	f008 fc11 	bl	8009f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016e2:	f7fe ffff 	bl	80006e4 <main>

080016e6 <LoopForever>:

LoopForever:
    b LoopForever
 80016e6:	e7fe      	b.n	80016e6 <LoopForever>
  ldr   r0, =_estack
 80016e8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80016ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016f4:	0800ac54 	.word	0x0800ac54
  ldr r2, =_sbss
 80016f8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016fc:	20000310 	.word	0x20000310

08001700 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC1_IRQHandler>
	...

08001704 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f96b 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800170e:	f001 f94d 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8001712:	4602      	mov	r2, r0
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_Init+0x40>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	490a      	ldr	r1, [pc, #40]	; (8001748 <HAL_Init+0x44>)
 800171e:	5ccb      	ldrb	r3, [r1, r3]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	4a09      	ldr	r2, [pc, #36]	; (800174c <HAL_Init+0x48>)
 8001726:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001728:	200f      	movs	r0, #15
 800172a:	f000 f811 	bl	8001750 <HAL_InitTick>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e002      	b.n	800173e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001738:	f7ff fce6 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	44020c00 	.word	0x44020c00
 8001748:	0800abd0 	.word	0x0800abd0
 800174c:	20000000 	.word	0x20000000

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <HAL_InitTick+0x60>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e021      	b.n	80017a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001764:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <HAL_InitTick+0x64>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_InitTick+0x60>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f965 	bl	8001a4a <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001798:	f000 f92f 	bl	80019fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <HAL_InitTick+0x68>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000008 	.word	0x20000008
 80017b4:	20000000 	.word	0x20000000
 80017b8:	20000004 	.word	0x20000004

080017bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000008 	.word	0x20000008
 80017e0:	200001c0 	.word	0x200001c0

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	200001c0 	.word	0x200001c0

080017fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff ffee 	bl	80017e4 <HAL_GetTick>
 8001808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001814:	d005      	beq.n	8001822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_Delay+0x44>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001822:	bf00      	nop
 8001824:	f7ff ffde 	bl	80017e4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	429a      	cmp	r2, r3
 8001832:	d8f7      	bhi.n	8001824 <HAL_Delay+0x28>
  {
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800186c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001876:	4a04      	ldr	r2, [pc, #16]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db0b      	blt.n	80018d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	4907      	ldr	r1, [pc, #28]	; (80018e0 <__NVIC_EnableIRQ+0x38>)
 80018c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2001      	movs	r0, #1
 80018ca:	fa00 f202 	lsl.w	r2, r0, r2
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	; (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	; (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b0:	d301      	bcc.n	80019b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00f      	b.n	80019d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <SysTick_Config+0x40>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019be:	210f      	movs	r1, #15
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019c4:	f7ff ff8e 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <SysTick_Config+0x40>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SysTick_Config+0x40>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff29 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff40 	bl	800188c <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ff90 	bl	8001938 <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff5f 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff33 	bl	80018a8 <__NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffa4 	bl	80019a0 <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a72:	e136      	b.n	8001ce2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a80:	4013      	ands	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8128 	beq.w	8001cdc <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x38>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b12      	cmp	r3, #18
 8001a9a:	d125      	bne.n	8001ae8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	08da      	lsrs	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3208      	adds	r2, #8
 8001aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4013      	ands	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f003 020f 	and.w	r2, r3, #15
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	08da      	lsrs	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3208      	adds	r2, #8
 8001ae2:	6979      	ldr	r1, [r7, #20]
 8001ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4013      	ands	r3, r2
 8001afe:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d00b      	beq.n	8001b3c <HAL_GPIO_Init+0xd8>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d007      	beq.n	8001b3c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b30:	2b11      	cmp	r3, #17
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b12      	cmp	r3, #18
 8001b3a:	d130      	bne.n	8001b9e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4013      	ands	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b72:	2201      	movs	r2, #1
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	091b      	lsrs	r3, r3, #4
 8001b88:	f003 0201 	and.w	r2, r3, #1
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d017      	beq.n	8001bd6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d07c      	beq.n	8001cdc <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001be2:	4a47      	ldr	r2, [pc, #284]	; (8001d00 <HAL_GPIO_Init+0x29c>)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	089b      	lsrs	r3, r3, #2
 8001be8:	3318      	adds	r3, #24
 8001bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bee:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	4013      	ands	r3, r2
 8001c04:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	0a9a      	lsrs	r2, r3, #10
 8001c0a:	4b3e      	ldr	r3, [pc, #248]	; (8001d04 <HAL_GPIO_Init+0x2a0>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	f002 0203 	and.w	r2, r2, #3
 8001c14:	00d2      	lsls	r2, r2, #3
 8001c16:	4093      	lsls	r3, r2
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001c1e:	4938      	ldr	r1, [pc, #224]	; (8001d00 <HAL_GPIO_Init+0x29c>)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	3318      	adds	r3, #24
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001c2c:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_GPIO_Init+0x29c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001c50:	4a2b      	ldr	r2, [pc, #172]	; (8001d00 <HAL_GPIO_Init+0x29c>)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_GPIO_Init+0x29c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	4013      	ands	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001c7a:	4a21      	ldr	r2, [pc, #132]	; (8001d00 <HAL_GPIO_Init+0x29c>)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001c80:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <HAL_GPIO_Init+0x29c>)
 8001c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c86:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001ca6:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <HAL_GPIO_Init+0x29c>)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <HAL_GPIO_Init+0x29c>)
 8001cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cb4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001cd4:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_GPIO_Init+0x29c>)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f47f aec1 	bne.w	8001a74 <HAL_GPIO_Init+0x10>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	44022000 	.word	0x44022000
 8001d04:	002f7f7f 	.word	0x002f7f7f

08001d08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	887b      	ldrh	r3, [r7, #2]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e001      	b.n	8001d2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
 8001d44:	4613      	mov	r3, r2
 8001d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d48:	787b      	ldrb	r3, [r7, #1]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001d72:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d006      	beq.n	8001d8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001d7e:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fc22 	bl	80005d0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d006      	beq.n	8001da6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 f807 	bl	8001db4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	44022000 	.word	0x44022000

08001db4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	f000 bc28 	b.w	8002630 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de0:	4b94      	ldr	r3, [pc, #592]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	f003 0318 	and.w	r3, r3, #24
 8001de8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001dea:	4b92      	ldr	r3, [pc, #584]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d05b      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d005      	beq.n	8001e12 <HAL_RCC_OscConfig+0x46>
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	2b18      	cmp	r3, #24
 8001e0a:	d114      	bne.n	8001e36 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d111      	bne.n	8001e36 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d102      	bne.n	8001e20 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	f000 bc08 	b.w	8002630 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001e20:	4b84      	ldr	r3, [pc, #528]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	4981      	ldr	r1, [pc, #516]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001e34:	e040      	b.n	8001eb8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d023      	beq.n	8001e86 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e3e:	4b7d      	ldr	r3, [pc, #500]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a7c      	ldr	r2, [pc, #496]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7ff fccb 	bl	80017e4 <HAL_GetTick>
 8001e4e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001e52:	f7ff fcc7 	bl	80017e4 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e3e5      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001e64:	4b73      	ldr	r3, [pc, #460]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001e70:	4b70      	ldr	r3, [pc, #448]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	041b      	lsls	r3, r3, #16
 8001e7e:	496d      	ldr	r1, [pc, #436]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	618b      	str	r3, [r1, #24]
 8001e84:	e018      	b.n	8001eb8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e86:	4b6b      	ldr	r3, [pc, #428]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a6a      	ldr	r2, [pc, #424]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7ff fca7 	bl	80017e4 <HAL_GetTick>
 8001e96:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001e9a:	f7ff fca3 	bl	80017e4 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e3c1      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001eac:	4b61      	ldr	r3, [pc, #388]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f0      	bne.n	8001e9a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	f000 80a0 	beq.w	8002006 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x10c>
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	2b18      	cmp	r3, #24
 8001ed0:	d109      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f040 8092 	bne.w	8002006 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e3a4      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eee:	d106      	bne.n	8001efe <HAL_RCC_OscConfig+0x132>
 8001ef0:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a4f      	ldr	r2, [pc, #316]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efa:	6013      	str	r3, [r2, #0]
 8001efc:	e058      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1e4>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d112      	bne.n	8001f2c <HAL_RCC_OscConfig+0x160>
 8001f06:	4b4b      	ldr	r3, [pc, #300]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a4a      	ldr	r2, [pc, #296]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b48      	ldr	r3, [pc, #288]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a47      	ldr	r2, [pc, #284]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f18:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4b45      	ldr	r3, [pc, #276]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a44      	ldr	r2, [pc, #272]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	e041      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1e4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f34:	d112      	bne.n	8001f5c <HAL_RCC_OscConfig+0x190>
 8001f36:	4b3f      	ldr	r3, [pc, #252]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a3e      	ldr	r2, [pc, #248]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a3b      	ldr	r2, [pc, #236]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f48:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b39      	ldr	r3, [pc, #228]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a38      	ldr	r2, [pc, #224]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e029      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1e4>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001f64:	d112      	bne.n	8001f8c <HAL_RCC_OscConfig+0x1c0>
 8001f66:	4b33      	ldr	r3, [pc, #204]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a32      	ldr	r2, [pc, #200]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a2f      	ldr	r2, [pc, #188]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2c      	ldr	r2, [pc, #176]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	e011      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1e4>
 8001f8c:	4b29      	ldr	r3, [pc, #164]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a28      	ldr	r2, [pc, #160]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4b26      	ldr	r3, [pc, #152]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a25      	ldr	r2, [pc, #148]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b23      	ldr	r3, [pc, #140]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a22      	ldr	r2, [pc, #136]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001faa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fc14 	bl	80017e4 <HAL_GetTick>
 8001fbc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fc10 	bl	80017e4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	; 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e32e      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd2:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x1f4>
 8001fde:	e012      	b.n	8002006 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fc00 	bl	80017e4 <HAL_GetTick>
 8001fe4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fbfc 	bl	80017e4 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	; 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e31a      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <HAL_RCC_OscConfig+0x268>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 809a 	beq.w	8002148 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_RCC_OscConfig+0x25a>
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	2b18      	cmp	r3, #24
 800201e:	d149      	bne.n	80020b4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d146      	bne.n	80020b4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d104      	bne.n	8002038 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e2fe      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
 8002032:	bf00      	nop
 8002034:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d11c      	bne.n	8002078 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800203e:	4b9a      	ldr	r3, [pc, #616]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0218 	and.w	r2, r3, #24
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	429a      	cmp	r2, r3
 800204c:	d014      	beq.n	8002078 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800204e:	4b96      	ldr	r3, [pc, #600]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 0218 	bic.w	r2, r3, #24
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	4993      	ldr	r1, [pc, #588]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002060:	f000 fdd0 	bl	8002c04 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002064:	4b91      	ldr	r3, [pc, #580]	; (80022ac <HAL_RCC_OscConfig+0x4e0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fb71 	bl	8001750 <HAL_InitTick>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e2db      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff fbb4 	bl	80017e4 <HAL_GetTick>
 800207c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002080:	f7ff fbb0 	bl	80017e4 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e2ce      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002092:	4b85      	ldr	r3, [pc, #532]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800209e:	4b82      	ldr	r3, [pc, #520]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	041b      	lsls	r3, r3, #16
 80020ac:	497e      	ldr	r1, [pc, #504]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80020b2:	e049      	b.n	8002148 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d02c      	beq.n	8002116 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80020bc:	4b7a      	ldr	r3, [pc, #488]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f023 0218 	bic.w	r2, r3, #24
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	4977      	ldr	r1, [pc, #476]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80020ce:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a75      	ldr	r2, [pc, #468]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7ff fb83 	bl	80017e4 <HAL_GetTick>
 80020de:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80020e2:	f7ff fb7f 	bl	80017e4 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e29d      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f4:	4b6c      	ldr	r3, [pc, #432]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002100:	4b69      	ldr	r3, [pc, #420]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	4966      	ldr	r1, [pc, #408]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002110:	4313      	orrs	r3, r2
 8002112:	610b      	str	r3, [r1, #16]
 8002114:	e018      	b.n	8002148 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002116:	4b64      	ldr	r3, [pc, #400]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a63      	ldr	r2, [pc, #396]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7ff fb5f 	bl	80017e4 <HAL_GetTick>
 8002126:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800212a:	f7ff fb5b 	bl	80017e4 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e279      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800213c:	4b5a      	ldr	r3, [pc, #360]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d03c      	beq.n	80021ce <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d01c      	beq.n	8002196 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215c:	4b52      	ldr	r3, [pc, #328]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 800215e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002162:	4a51      	ldr	r2, [pc, #324]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002168:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7ff fb3a 	bl	80017e4 <HAL_GetTick>
 8002170:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002174:	f7ff fb36 	bl	80017e4 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e254      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002186:	4b48      	ldr	r3, [pc, #288]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800218c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0ef      	beq.n	8002174 <HAL_RCC_OscConfig+0x3a8>
 8002194:	e01b      	b.n	80021ce <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002196:	4b44      	ldr	r3, [pc, #272]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800219c:	4a42      	ldr	r2, [pc, #264]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 800219e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a6:	f7ff fb1d 	bl	80017e4 <HAL_GetTick>
 80021aa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80021ae:	f7ff fb19 	bl	80017e4 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e237      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80021c0:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 80021c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1ef      	bne.n	80021ae <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0304 	and.w	r3, r3, #4
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80d2 	beq.w	8002380 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80021dc:	4b34      	ldr	r3, [pc, #208]	; (80022b0 <HAL_RCC_OscConfig+0x4e4>)
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d118      	bne.n	800221a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80021e8:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <HAL_RCC_OscConfig+0x4e4>)
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	4a30      	ldr	r2, [pc, #192]	; (80022b0 <HAL_RCC_OscConfig+0x4e4>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f4:	f7ff faf6 	bl	80017e4 <HAL_GetTick>
 80021f8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fc:	f7ff faf2 	bl	80017e4 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e210      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800220e:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <HAL_RCC_OscConfig+0x4e4>)
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d108      	bne.n	8002234 <HAL_RCC_OscConfig+0x468>
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002224:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002228:	4a1f      	ldr	r2, [pc, #124]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 800222a:	f043 0301 	orr.w	r3, r3, #1
 800222e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002232:	e074      	b.n	800231e <HAL_RCC_OscConfig+0x552>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d118      	bne.n	800226e <HAL_RCC_OscConfig+0x4a2>
 800223c:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 800223e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002242:	4a19      	ldr	r2, [pc, #100]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800224c:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 800224e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002258:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 800225e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002262:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002264:	f023 0304 	bic.w	r3, r3, #4
 8002268:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800226c:	e057      	b.n	800231e <HAL_RCC_OscConfig+0x552>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b05      	cmp	r3, #5
 8002274:	d11e      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4e8>
 8002276:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800227c:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800228c:	4a06      	ldr	r2, [pc, #24]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 800228e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002292:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002296:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 8002298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800229c:	4a02      	ldr	r2, [pc, #8]	; (80022a8 <HAL_RCC_OscConfig+0x4dc>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022a6:	e03a      	b.n	800231e <HAL_RCC_OscConfig+0x552>
 80022a8:	44020c00 	.word	0x44020c00
 80022ac:	20000004 	.word	0x20000004
 80022b0:	44020800 	.word	0x44020800
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b85      	cmp	r3, #133	; 0x85
 80022ba:	d118      	bne.n	80022ee <HAL_RCC_OscConfig+0x522>
 80022bc:	4ba2      	ldr	r3, [pc, #648]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80022be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022c2:	4aa1      	ldr	r2, [pc, #644]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022cc:	4b9e      	ldr	r3, [pc, #632]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80022ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022d2:	4a9d      	ldr	r2, [pc, #628]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80022d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022dc:	4b9a      	ldr	r3, [pc, #616]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80022de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022e2:	4a99      	ldr	r2, [pc, #612]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022ec:	e017      	b.n	800231e <HAL_RCC_OscConfig+0x552>
 80022ee:	4b96      	ldr	r3, [pc, #600]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80022f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022f4:	4a94      	ldr	r2, [pc, #592]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022fe:	4b92      	ldr	r3, [pc, #584]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 8002300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002304:	4a90      	ldr	r2, [pc, #576]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 8002306:	f023 0304 	bic.w	r3, r3, #4
 800230a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800230e:	4b8e      	ldr	r3, [pc, #568]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 8002310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002314:	4a8c      	ldr	r2, [pc, #560]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 8002316:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800231a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d016      	beq.n	8002354 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002326:	f7ff fa5d 	bl	80017e4 <HAL_GetTick>
 800232a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800232c:	e00a      	b.n	8002344 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7ff fa59 	bl	80017e4 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	f241 3288 	movw	r2, #5000	; 0x1388
 800233c:	4293      	cmp	r3, r2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e175      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002344:	4b80      	ldr	r3, [pc, #512]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 8002346:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0ed      	beq.n	800232e <HAL_RCC_OscConfig+0x562>
 8002352:	e015      	b.n	8002380 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002354:	f7ff fa46 	bl	80017e4 <HAL_GetTick>
 8002358:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800235a:	e00a      	b.n	8002372 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7ff fa42 	bl	80017e4 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	; 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e15e      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002372:	4b75      	ldr	r3, [pc, #468]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 8002374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1ed      	bne.n	800235c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b00      	cmp	r3, #0
 800238a:	d036      	beq.n	80023fa <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	2b00      	cmp	r3, #0
 8002392:	d019      	beq.n	80023c8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002394:	4b6c      	ldr	r3, [pc, #432]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a6b      	ldr	r2, [pc, #428]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 800239a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800239e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7ff fa20 	bl	80017e4 <HAL_GetTick>
 80023a4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80023a8:	f7ff fa1c 	bl	80017e4 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e13a      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x5dc>
 80023c6:	e018      	b.n	80023fa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023c8:	4b5f      	ldr	r3, [pc, #380]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a5e      	ldr	r2, [pc, #376]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80023ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7ff fa06 	bl	80017e4 <HAL_GetTick>
 80023d8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80023dc:	f7ff fa02 	bl	80017e4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e120      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80023ee:	4b56      	ldr	r3, [pc, #344]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8115 	beq.w	800262e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	2b18      	cmp	r3, #24
 8002408:	f000 80af 	beq.w	800256a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	2b02      	cmp	r3, #2
 8002412:	f040 8086 	bne.w	8002522 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002416:	4b4c      	ldr	r3, [pc, #304]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a4b      	ldr	r2, [pc, #300]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 800241c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7ff f9df 	bl	80017e4 <HAL_GetTick>
 8002426:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800242a:	f7ff f9db 	bl	80017e4 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0f9      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800243c:	4b42      	ldr	r3, [pc, #264]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1f0      	bne.n	800242a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002448:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002450:	f023 0303 	bic.w	r3, r3, #3
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800245c:	0212      	lsls	r2, r2, #8
 800245e:	430a      	orrs	r2, r1
 8002460:	4939      	ldr	r1, [pc, #228]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 8002462:	4313      	orrs	r3, r2
 8002464:	628b      	str	r3, [r1, #40]	; 0x28
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	3b01      	subs	r3, #1
 800246c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	3b01      	subs	r3, #1
 8002476:	025b      	lsls	r3, r3, #9
 8002478:	b29b      	uxth	r3, r3
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002480:	3b01      	subs	r3, #1
 8002482:	041b      	lsls	r3, r3, #16
 8002484:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	3b01      	subs	r3, #1
 8002490:	061b      	lsls	r3, r3, #24
 8002492:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002496:	492c      	ldr	r1, [pc, #176]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 8002498:	4313      	orrs	r3, r2
 800249a:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800249c:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 800249e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a0:	4a29      	ldr	r2, [pc, #164]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80024a2:	f023 0310 	bic.w	r3, r3, #16
 80024a6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ac:	4a26      	ldr	r2, [pc, #152]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80024b2:	4b25      	ldr	r3, [pc, #148]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	4a24      	ldr	r2, [pc, #144]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80024b8:	f043 0310 	orr.w	r3, r3, #16
 80024bc:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80024be:	4b22      	ldr	r3, [pc, #136]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80024c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c2:	f023 020c 	bic.w	r2, r3, #12
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	491f      	ldr	r1, [pc, #124]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80024d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d4:	f023 0220 	bic.w	r2, r3, #32
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024dc:	491a      	ldr	r1, [pc, #104]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80024e2:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	4a18      	ldr	r2, [pc, #96]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ec:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a15      	ldr	r2, [pc, #84]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 80024f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7ff f973 	bl	80017e4 <HAL_GetTick>
 80024fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002502:	f7ff f96f 	bl	80017e4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e08d      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002514:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x736>
 8002520:	e085      	b.n	800262e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <HAL_RCC_OscConfig+0x77c>)
 8002528:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800252c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252e:	f7ff f959 	bl	80017e4 <HAL_GetTick>
 8002532:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002534:	e00a      	b.n	800254c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002536:	f7ff f955 	bl	80017e4 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d903      	bls.n	800254c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e073      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
 8002548:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800254c:	4b3a      	ldr	r3, [pc, #232]	; (8002638 <HAL_RCC_OscConfig+0x86c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1ee      	bne.n	8002536 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002558:	4b37      	ldr	r3, [pc, #220]	; (8002638 <HAL_RCC_OscConfig+0x86c>)
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	4a36      	ldr	r2, [pc, #216]	; (8002638 <HAL_RCC_OscConfig+0x86c>)
 800255e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002562:	f023 0303 	bic.w	r3, r3, #3
 8002566:	6293      	str	r3, [r2, #40]	; 0x28
 8002568:	e061      	b.n	800262e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800256a:	4b33      	ldr	r3, [pc, #204]	; (8002638 <HAL_RCC_OscConfig+0x86c>)
 800256c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002570:	4b31      	ldr	r3, [pc, #196]	; (8002638 <HAL_RCC_OscConfig+0x86c>)
 8002572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002574:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800257a:	2b01      	cmp	r3, #1
 800257c:	d031      	beq.n	80025e2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f003 0203 	and.w	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d12a      	bne.n	80025e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d122      	bne.n	80025e2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d11a      	bne.n	80025e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	0a5b      	lsrs	r3, r3, #9
 80025b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d111      	bne.n	80025e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d108      	bne.n	80025e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	0e1b      	lsrs	r3, r3, #24
 80025d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e024      	b.n	8002630 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_RCC_OscConfig+0x86c>)
 80025e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ea:	08db      	lsrs	r3, r3, #3
 80025ec:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d01a      	beq.n	800262e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <HAL_RCC_OscConfig+0x86c>)
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <HAL_RCC_OscConfig+0x86c>)
 80025fe:	f023 0310 	bic.w	r3, r3, #16
 8002602:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f7ff f8ee 	bl	80017e4 <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800260a:	bf00      	nop
 800260c:	f7ff f8ea 	bl	80017e4 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	4293      	cmp	r3, r2
 8002616:	d0f9      	beq.n	800260c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261c:	4a06      	ldr	r2, [pc, #24]	; (8002638 <HAL_RCC_OscConfig+0x86c>)
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_OscConfig+0x86c>)
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <HAL_RCC_OscConfig+0x86c>)
 8002628:	f043 0310 	orr.w	r3, r3, #16
 800262c:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3720      	adds	r7, #32
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	44020c00 	.word	0x44020c00

0800263c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e19e      	b.n	800298e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002650:	4b83      	ldr	r3, [pc, #524]	; (8002860 <HAL_RCC_ClockConfig+0x224>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d910      	bls.n	8002680 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b80      	ldr	r3, [pc, #512]	; (8002860 <HAL_RCC_ClockConfig+0x224>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 020f 	bic.w	r2, r3, #15
 8002666:	497e      	ldr	r1, [pc, #504]	; (8002860 <HAL_RCC_ClockConfig+0x224>)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266e:	4b7c      	ldr	r3, [pc, #496]	; (8002860 <HAL_RCC_ClockConfig+0x224>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e186      	b.n	800298e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d012      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	4b74      	ldr	r3, [pc, #464]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800269a:	429a      	cmp	r2, r3
 800269c:	d909      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800269e:	4b71      	ldr	r3, [pc, #452]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	496d      	ldr	r1, [pc, #436]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d012      	beq.n	80026e4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	4b68      	ldr	r3, [pc, #416]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d909      	bls.n	80026e4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80026d0:	4b64      	ldr	r3, [pc, #400]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	4961      	ldr	r1, [pc, #388]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d010      	beq.n	8002712 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	4b5b      	ldr	r3, [pc, #364]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d908      	bls.n	8002712 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002700:	4b58      	ldr	r3, [pc, #352]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4955      	ldr	r1, [pc, #340]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 800270e:	4313      	orrs	r3, r2
 8002710:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d010      	beq.n	8002740 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	4b50      	ldr	r3, [pc, #320]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	429a      	cmp	r2, r3
 800272c:	d908      	bls.n	8002740 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800272e:	4b4d      	ldr	r3, [pc, #308]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f023 020f 	bic.w	r2, r3, #15
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	494a      	ldr	r1, [pc, #296]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 800273c:	4313      	orrs	r3, r2
 800273e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 8093 	beq.w	8002874 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d107      	bne.n	8002766 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002756:	4b43      	ldr	r3, [pc, #268]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d121      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e113      	b.n	800298e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800276e:	4b3d      	ldr	r3, [pc, #244]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d115      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e107      	b.n	800298e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d107      	bne.n	8002796 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002786:	4b37      	ldr	r3, [pc, #220]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800278e:	2b00      	cmp	r3, #0
 8002790:	d109      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e0fb      	b.n	800298e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002796:	4b33      	ldr	r3, [pc, #204]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e0f3      	b.n	800298e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80027a6:	4b2f      	ldr	r3, [pc, #188]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f023 0203 	bic.w	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	492c      	ldr	r1, [pc, #176]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b8:	f7ff f814 	bl	80017e4 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d112      	bne.n	80027ec <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80027c8:	f7ff f80c 	bl	80017e4 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e0d7      	b.n	800298e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027de:	4b21      	ldr	r3, [pc, #132]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 0318 	and.w	r3, r3, #24
 80027e6:	2b18      	cmp	r3, #24
 80027e8:	d1ee      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x18c>
 80027ea:	e043      	b.n	8002874 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d112      	bne.n	800281a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80027f6:	f7fe fff5 	bl	80017e4 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	; 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e0c0      	b.n	800298e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800280c:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f003 0318 	and.w	r3, r3, #24
 8002814:	2b10      	cmp	r3, #16
 8002816:	d1ee      	bne.n	80027f6 <HAL_RCC_ClockConfig+0x1ba>
 8002818:	e02c      	b.n	8002874 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d122      	bne.n	8002868 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002822:	e00a      	b.n	800283a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7fe ffde 	bl	80017e4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e0a9      	b.n	800298e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <HAL_RCC_ClockConfig+0x228>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f003 0318 	and.w	r3, r3, #24
 8002842:	2b08      	cmp	r3, #8
 8002844:	d1ee      	bne.n	8002824 <HAL_RCC_ClockConfig+0x1e8>
 8002846:	e015      	b.n	8002874 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7fe ffcc 	bl	80017e4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d906      	bls.n	8002868 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e097      	b.n	800298e <HAL_RCC_ClockConfig+0x352>
 800285e:	bf00      	nop
 8002860:	40022000 	.word	0x40022000
 8002864:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002868:	4b4b      	ldr	r3, [pc, #300]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	f003 0318 	and.w	r3, r3, #24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1e9      	bne.n	8002848 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d010      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	4b44      	ldr	r3, [pc, #272]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	429a      	cmp	r2, r3
 800288e:	d208      	bcs.n	80028a2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002890:	4b41      	ldr	r3, [pc, #260]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	f023 020f 	bic.w	r2, r3, #15
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	493e      	ldr	r1, [pc, #248]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a2:	4b3e      	ldr	r3, [pc, #248]	; (800299c <HAL_RCC_ClockConfig+0x360>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d210      	bcs.n	80028d2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b0:	4b3a      	ldr	r3, [pc, #232]	; (800299c <HAL_RCC_ClockConfig+0x360>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f023 020f 	bic.w	r2, r3, #15
 80028b8:	4938      	ldr	r1, [pc, #224]	; (800299c <HAL_RCC_ClockConfig+0x360>)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	4313      	orrs	r3, r2
 80028be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c0:	4b36      	ldr	r3, [pc, #216]	; (800299c <HAL_RCC_ClockConfig+0x360>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d001      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e05d      	b.n	800298e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0304 	and.w	r3, r3, #4
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d208      	bcs.n	8002900 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80028ee:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	4927      	ldr	r1, [pc, #156]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d012      	beq.n	8002932 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800291a:	429a      	cmp	r2, r3
 800291c:	d209      	bcs.n	8002932 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	491a      	ldr	r1, [pc, #104]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 800292e:	4313      	orrs	r3, r2
 8002930:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	d012      	beq.n	8002964 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800294c:	429a      	cmp	r2, r3
 800294e:	d209      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002950:	4b11      	ldr	r3, [pc, #68]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	021b      	lsls	r3, r3, #8
 800295e:	490e      	ldr	r1, [pc, #56]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 8002960:	4313      	orrs	r3, r2
 8002962:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002964:	f000 f822 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_ClockConfig+0x35c>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	490b      	ldr	r1, [pc, #44]	; (80029a0 <HAL_RCC_ClockConfig+0x364>)
 8002974:	5ccb      	ldrb	r3, [r1, r3]
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <HAL_RCC_ClockConfig+0x368>)
 800297c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_RCC_ClockConfig+0x36c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fee4 	bl	8001750 <HAL_InitTick>
 8002988:	4603      	mov	r3, r0
 800298a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800298c:	7afb      	ldrb	r3, [r7, #11]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	44020c00 	.word	0x44020c00
 800299c:	40022000 	.word	0x40022000
 80029a0:	0800abd0 	.word	0x0800abd0
 80029a4:	20000000 	.word	0x20000000
 80029a8:	20000004 	.word	0x20000004

080029ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b089      	sub	sp, #36	; 0x24
 80029b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80029b2:	4b8c      	ldr	r3, [pc, #560]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 0318 	and.w	r3, r3, #24
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d102      	bne.n	80029c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80029be:	4b8a      	ldr	r3, [pc, #552]	; (8002be8 <HAL_RCC_GetSysClockFreq+0x23c>)
 80029c0:	61fb      	str	r3, [r7, #28]
 80029c2:	e107      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029c4:	4b87      	ldr	r3, [pc, #540]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	f003 0318 	and.w	r3, r3, #24
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d112      	bne.n	80029f6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80029d0:	4b84      	ldr	r3, [pc, #528]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d009      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80029dc:	4b81      	ldr	r3, [pc, #516]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	08db      	lsrs	r3, r3, #3
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	4a81      	ldr	r2, [pc, #516]	; (8002bec <HAL_RCC_GetSysClockFreq+0x240>)
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	e0f1      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80029f0:	4b7e      	ldr	r3, [pc, #504]	; (8002bec <HAL_RCC_GetSysClockFreq+0x240>)
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	e0ee      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f6:	4b7b      	ldr	r3, [pc, #492]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f003 0318 	and.w	r3, r3, #24
 80029fe:	2b10      	cmp	r3, #16
 8002a00:	d102      	bne.n	8002a08 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a02:	4b7b      	ldr	r3, [pc, #492]	; (8002bf0 <HAL_RCC_GetSysClockFreq+0x244>)
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	e0e5      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a08:	4b76      	ldr	r3, [pc, #472]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f003 0318 	and.w	r3, r3, #24
 8002a10:	2b18      	cmp	r3, #24
 8002a12:	f040 80dd 	bne.w	8002bd0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002a16:	4b73      	ldr	r3, [pc, #460]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002a20:	4b70      	ldr	r3, [pc, #448]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a2a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002a2c:	4b6d      	ldr	r3, [pc, #436]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002a38:	4b6a      	ldr	r3, [pc, #424]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002a3c:	08db      	lsrs	r3, r3, #3
 8002a3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	fb02 f303 	mul.w	r3, r2, r3
 8002a48:	ee07 3a90 	vmov	s15, r3
 8002a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a50:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 80b7 	beq.w	8002bca <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d003      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0xbe>
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d056      	beq.n	8002b16 <HAL_RCC_GetSysClockFreq+0x16a>
 8002a68:	e077      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002a6a:	4b5e      	ldr	r3, [pc, #376]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d02d      	beq.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002a76:	4b5b      	ldr	r3, [pc, #364]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	08db      	lsrs	r3, r3, #3
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	4a5a      	ldr	r2, [pc, #360]	; (8002bec <HAL_RCC_GetSysClockFreq+0x240>)
 8002a82:	fa22 f303 	lsr.w	r3, r2, r3
 8002a86:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	ee07 3a90 	vmov	s15, r3
 8002a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aa0:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aa8:	ee07 3a90 	vmov	s15, r3
 8002aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ab0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ab4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002bf4 <HAL_RCC_GetSysClockFreq+0x248>
 8002ab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002abc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ac0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002acc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002ad0:	e065      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	ee07 3a90 	vmov	s15, r3
 8002ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002adc:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002bf8 <HAL_RCC_GetSysClockFreq+0x24c>
 8002ae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ae4:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aec:	ee07 3a90 	vmov	s15, r3
 8002af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002af4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002af8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002bf4 <HAL_RCC_GetSysClockFreq+0x248>
 8002afc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b08:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b10:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002b14:	e043      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	ee07 3a90 	vmov	s15, r3
 8002b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b20:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002bfc <HAL_RCC_GetSysClockFreq+0x250>
 8002b24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b28:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b30:	ee07 3a90 	vmov	s15, r3
 8002b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b38:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b3c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002bf4 <HAL_RCC_GetSysClockFreq+0x248>
 8002b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b54:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002b58:	e021      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b64:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002c00 <HAL_RCC_GetSysClockFreq+0x254>
 8002b68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b6c:	4b1d      	ldr	r3, [pc, #116]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b74:	ee07 3a90 	vmov	s15, r3
 8002b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b80:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002bf4 <HAL_RCC_GetSysClockFreq+0x248>
 8002b84:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b98:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002b9c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002b9e:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba2:	0a5b      	lsrs	r3, r3, #9
 8002ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ba8:	3301      	adds	r3, #1
 8002baa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	ee07 3a90 	vmov	s15, r3
 8002bb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bb6:	edd7 6a06 	vldr	s13, [r7, #24]
 8002bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bc2:	ee17 3a90 	vmov	r3, s15
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	e004      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	e001      	b.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <HAL_RCC_GetSysClockFreq+0x240>)
 8002bd2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	44020c00 	.word	0x44020c00
 8002be8:	003d0900 	.word	0x003d0900
 8002bec:	03d09000 	.word	0x03d09000
 8002bf0:	017d7840 	.word	0x017d7840
 8002bf4:	46000000 	.word	0x46000000
 8002bf8:	4c742400 	.word	0x4c742400
 8002bfc:	4bbebc20 	.word	0x4bbebc20
 8002c00:	4a742400 	.word	0x4a742400

08002c04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002c08:	f7ff fed0 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002c10:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002c12:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002c16:	4907      	ldr	r1, [pc, #28]	; (8002c34 <HAL_RCC_GetHCLKFreq+0x30>)
 8002c18:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002c1a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c22:	4a05      	ldr	r2, [pc, #20]	; (8002c38 <HAL_RCC_GetHCLKFreq+0x34>)
 8002c24:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002c26:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <HAL_RCC_GetHCLKFreq+0x34>)
 8002c28:	681b      	ldr	r3, [r3, #0]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	44020c00 	.word	0x44020c00
 8002c34:	0800abd0 	.word	0x0800abd0
 8002c38:	20000000 	.word	0x20000000

08002c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002c40:	f7ff ffe0 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	091b      	lsrs	r3, r3, #4
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4904      	ldr	r1, [pc, #16]	; (8002c64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	44020c00 	.word	0x44020c00
 8002c64:	0800abe0 	.word	0x0800abe0

08002c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002c6c:	f7ff ffca 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	4904      	ldr	r1, [pc, #16]	; (8002c90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c7e:	5ccb      	ldrb	r3, [r1, r3]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	44020c00 	.word	0x44020c00
 8002c90:	0800abe0 	.word	0x0800abe0

08002c94 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002c98:	f7ff ffb4 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	0b1b      	lsrs	r3, r3, #12
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	4904      	ldr	r1, [pc, #16]	; (8002cbc <HAL_RCC_GetPCLK3Freq+0x28>)
 8002caa:	5ccb      	ldrb	r3, [r1, r3]
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	44020c00 	.word	0x44020c00
 8002cbc:	0800abe0 	.word	0x0800abe0

08002cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc4:	b0d8      	sub	sp, #352	; 0x160
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce0:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002ce4:	2500      	movs	r5, #0
 8002ce6:	ea54 0305 	orrs.w	r3, r4, r5
 8002cea:	d00b      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002cec:	4bcd      	ldr	r3, [pc, #820]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cf2:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8002cf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfc:	4ac9      	ldr	r2, [pc, #804]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002cfe:	430b      	orrs	r3, r1
 8002d00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f002 0801 	and.w	r8, r2, #1
 8002d10:	f04f 0900 	mov.w	r9, #0
 8002d14:	ea58 0309 	orrs.w	r3, r8, r9
 8002d18:	d042      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002d1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d20:	2b05      	cmp	r3, #5
 8002d22:	d823      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002d24:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2a:	bf00      	nop
 8002d2c:	08002d75 	.word	0x08002d75
 8002d30:	08002d45 	.word	0x08002d45
 8002d34:	08002d59 	.word	0x08002d59
 8002d38:	08002d75 	.word	0x08002d75
 8002d3c:	08002d75 	.word	0x08002d75
 8002d40:	08002d75 	.word	0x08002d75
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d48:	3308      	adds	r3, #8
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f004 feda 	bl	8007b04 <RCCEx_PLL2_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002d56:	e00e      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d5c:	3330      	adds	r3, #48	; 0x30
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 ff68 	bl	8007c34 <RCCEx_PLL3_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002d6a:	e004      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002d72:	e000      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d76:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002d7e:	4ba9      	ldr	r3, [pc, #676]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002d80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d84:	f023 0107 	bic.w	r1, r3, #7
 8002d88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	4aa5      	ldr	r2, [pc, #660]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002d90:	430b      	orrs	r3, r1
 8002d92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d96:	e003      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d98:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d9c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002da0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	f002 0a02 	and.w	sl, r2, #2
 8002dac:	f04f 0b00 	mov.w	fp, #0
 8002db0:	ea5a 030b 	orrs.w	r3, sl, fp
 8002db4:	f000 8088 	beq.w	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbe:	2b28      	cmp	r3, #40	; 0x28
 8002dc0:	d868      	bhi.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002dc2:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc8:	08002e9d 	.word	0x08002e9d
 8002dcc:	08002e95 	.word	0x08002e95
 8002dd0:	08002e95 	.word	0x08002e95
 8002dd4:	08002e95 	.word	0x08002e95
 8002dd8:	08002e95 	.word	0x08002e95
 8002ddc:	08002e95 	.word	0x08002e95
 8002de0:	08002e95 	.word	0x08002e95
 8002de4:	08002e95 	.word	0x08002e95
 8002de8:	08002e6d 	.word	0x08002e6d
 8002dec:	08002e95 	.word	0x08002e95
 8002df0:	08002e95 	.word	0x08002e95
 8002df4:	08002e95 	.word	0x08002e95
 8002df8:	08002e95 	.word	0x08002e95
 8002dfc:	08002e95 	.word	0x08002e95
 8002e00:	08002e95 	.word	0x08002e95
 8002e04:	08002e95 	.word	0x08002e95
 8002e08:	08002e81 	.word	0x08002e81
 8002e0c:	08002e95 	.word	0x08002e95
 8002e10:	08002e95 	.word	0x08002e95
 8002e14:	08002e95 	.word	0x08002e95
 8002e18:	08002e95 	.word	0x08002e95
 8002e1c:	08002e95 	.word	0x08002e95
 8002e20:	08002e95 	.word	0x08002e95
 8002e24:	08002e95 	.word	0x08002e95
 8002e28:	08002e9d 	.word	0x08002e9d
 8002e2c:	08002e95 	.word	0x08002e95
 8002e30:	08002e95 	.word	0x08002e95
 8002e34:	08002e95 	.word	0x08002e95
 8002e38:	08002e95 	.word	0x08002e95
 8002e3c:	08002e95 	.word	0x08002e95
 8002e40:	08002e95 	.word	0x08002e95
 8002e44:	08002e95 	.word	0x08002e95
 8002e48:	08002e9d 	.word	0x08002e9d
 8002e4c:	08002e95 	.word	0x08002e95
 8002e50:	08002e95 	.word	0x08002e95
 8002e54:	08002e95 	.word	0x08002e95
 8002e58:	08002e95 	.word	0x08002e95
 8002e5c:	08002e95 	.word	0x08002e95
 8002e60:	08002e95 	.word	0x08002e95
 8002e64:	08002e95 	.word	0x08002e95
 8002e68:	08002e9d 	.word	0x08002e9d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e70:	3308      	adds	r3, #8
 8002e72:	4618      	mov	r0, r3
 8002e74:	f004 fe46 	bl	8007b04 <RCCEx_PLL2_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002e7e:	e00e      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e84:	3330      	adds	r3, #48	; 0x30
 8002e86:	4618      	mov	r0, r3
 8002e88:	f004 fed4 	bl	8007c34 <RCCEx_PLL3_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002e92:	e004      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002e9a:	e000      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10c      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002ea6:	4b5f      	ldr	r3, [pc, #380]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002eac:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb6:	4a5b      	ldr	r2, [pc, #364]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ebe:	e003      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ec4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f002 0304 	and.w	r3, r2, #4
 8002ed4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002ede:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	d04e      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002ee8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ef2:	d02c      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002ef4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002ef8:	d825      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efe:	d028      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f04:	d81f      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002f06:	2bc0      	cmp	r3, #192	; 0xc0
 8002f08:	d025      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002f0a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f0c:	d81b      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002f0e:	2b80      	cmp	r3, #128	; 0x80
 8002f10:	d00f      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002f12:	2b80      	cmp	r3, #128	; 0x80
 8002f14:	d817      	bhi.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01f      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d113      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f22:	3308      	adds	r3, #8
 8002f24:	4618      	mov	r0, r3
 8002f26:	f004 fded 	bl	8007b04 <RCCEx_PLL2_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002f30:	e014      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f36:	3330      	adds	r3, #48	; 0x30
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f004 fe7b 	bl	8007c34 <RCCEx_PLL3_Config>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002f44:	e00a      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002f4c:	e006      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002f4e:	bf00      	nop
 8002f50:	e004      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002f52:	bf00      	nop
 8002f54:	e002      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002f56:	bf00      	nop
 8002f58:	e000      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f5c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10c      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002f64:	4b2f      	ldr	r3, [pc, #188]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f6a:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f74:	4a2b      	ldr	r2, [pc, #172]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f76:	430b      	orrs	r3, r1
 8002f78:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f7c:	e003      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f82:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8e:	f002 0308 	and.w	r3, r2, #8
 8002f92:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002f96:	2300      	movs	r3, #0
 8002f98:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002f9c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	d056      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002fa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002fb0:	d031      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002fb2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002fb6:	d82a      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fbc:	d02d      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc2:	d824      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002fc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002fc8:	d029      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002fca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002fce:	d81e      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd4:	d011      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fda:	d818      	bhi.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d023      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe4:	d113      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fe6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fea:	3308      	adds	r3, #8
 8002fec:	4618      	mov	r0, r3
 8002fee:	f004 fd89 	bl	8007b04 <RCCEx_PLL2_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002ff8:	e017      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ffa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ffe:	3330      	adds	r3, #48	; 0x30
 8003000:	4618      	mov	r0, r3
 8003002:	f004 fe17 	bl	8007c34 <RCCEx_PLL3_Config>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800300c:	e00d      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003014:	e009      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003016:	bf00      	nop
 8003018:	e007      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800301a:	bf00      	nop
 800301c:	e005      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800301e:	bf00      	nop
 8003020:	e003      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003022:	bf00      	nop
 8003024:	44020c00 	.word	0x44020c00
        break;
 8003028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800302a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10c      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003032:	4bbb      	ldr	r3, [pc, #748]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003038:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800303c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003042:	4ab7      	ldr	r2, [pc, #732]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003044:	430b      	orrs	r3, r1
 8003046:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800304a:	e003      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003050:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003054:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305c:	f002 0310 	and.w	r3, r2, #16
 8003060:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003064:	2300      	movs	r3, #0
 8003066:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800306a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 800306e:	460b      	mov	r3, r1
 8003070:	4313      	orrs	r3, r2
 8003072:	d053      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003074:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800307a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800307e:	d031      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003080:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003084:	d82a      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003086:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308a:	d02d      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800308c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003090:	d824      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003092:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003096:	d029      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003098:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800309c:	d81e      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800309e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a2:	d011      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80030a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a8:	d818      	bhi.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d020      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80030ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b2:	d113      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030b8:	3308      	adds	r3, #8
 80030ba:	4618      	mov	r0, r3
 80030bc:	f004 fd22 	bl	8007b04 <RCCEx_PLL2_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80030c6:	e014      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030cc:	3330      	adds	r3, #48	; 0x30
 80030ce:	4618      	mov	r0, r3
 80030d0:	f004 fdb0 	bl	8007c34 <RCCEx_PLL3_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80030da:	e00a      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80030e2:	e006      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80030e4:	bf00      	nop
 80030e6:	e004      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80030e8:	bf00      	nop
 80030ea:	e002      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80030ec:	bf00      	nop
 80030ee:	e000      	b.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80030f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10c      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80030fa:	4b89      	ldr	r3, [pc, #548]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80030fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003100:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003104:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800310a:	4a85      	ldr	r2, [pc, #532]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800310c:	430b      	orrs	r3, r1
 800310e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003112:	e003      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003114:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003118:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800311c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003124:	f002 0320 	and.w	r3, r2, #32
 8003128:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003132:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8003136:	460b      	mov	r3, r1
 8003138:	4313      	orrs	r3, r2
 800313a:	d053      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800313c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003146:	d031      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003148:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800314c:	d82a      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800314e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003152:	d02d      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003158:	d824      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800315a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800315e:	d029      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003160:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003164:	d81e      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316a:	d011      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800316c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003170:	d818      	bhi.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d020      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003176:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800317a:	d113      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800317c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003180:	3308      	adds	r3, #8
 8003182:	4618      	mov	r0, r3
 8003184:	f004 fcbe 	bl	8007b04 <RCCEx_PLL2_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800318e:	e014      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003190:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003194:	3330      	adds	r3, #48	; 0x30
 8003196:	4618      	mov	r0, r3
 8003198:	f004 fd4c 	bl	8007c34 <RCCEx_PLL3_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80031a2:	e00a      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80031aa:	e006      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80031ac:	bf00      	nop
 80031ae:	e004      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80031b0:	bf00      	nop
 80031b2:	e002      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80031b4:	bf00      	nop
 80031b6:	e000      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80031b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80031c2:	4b57      	ldr	r3, [pc, #348]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80031c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031c8:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 80031cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	4a53      	ldr	r2, [pc, #332]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80031d4:	430b      	orrs	r3, r1
 80031d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80031da:	e003      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031e0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80031f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80031f4:	2300      	movs	r3, #0
 80031f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80031fa:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80031fe:	460b      	mov	r3, r1
 8003200:	4313      	orrs	r3, r2
 8003202:	d053      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8003204:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800320e:	d031      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003210:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003214:	d82a      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800321a:	d02d      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800321c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003220:	d824      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003222:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003226:	d029      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003228:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800322c:	d81e      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800322e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003232:	d011      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003234:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003238:	d818      	bhi.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d020      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800323e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003242:	d113      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003244:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003248:	3308      	adds	r3, #8
 800324a:	4618      	mov	r0, r3
 800324c:	f004 fc5a 	bl	8007b04 <RCCEx_PLL2_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003256:	e014      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003258:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800325c:	3330      	adds	r3, #48	; 0x30
 800325e:	4618      	mov	r0, r3
 8003260:	f004 fce8 	bl	8007c34 <RCCEx_PLL3_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800326a:	e00a      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003272:	e006      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003274:	bf00      	nop
 8003276:	e004      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003278:	bf00      	nop
 800327a:	e002      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800327c:	bf00      	nop
 800327e:	e000      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003282:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10c      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800328a:	4b25      	ldr	r3, [pc, #148]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800328c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003290:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8003294:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329a:	4a21      	ldr	r2, [pc, #132]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800329c:	430b      	orrs	r3, r1
 800329e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80032a2:	e003      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80032b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80032bc:	2300      	movs	r3, #0
 80032be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80032c2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 80032c6:	460b      	mov	r3, r1
 80032c8:	4313      	orrs	r3, r2
 80032ca:	d055      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80032cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032d2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80032d6:	d033      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80032d8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80032dc:	d82c      	bhi.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80032de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032e2:	d02f      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80032e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032e8:	d826      	bhi.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80032ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032ee:	d02b      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80032f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80032f4:	d820      	bhi.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80032f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fa:	d013      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80032fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003300:	d81a      	bhi.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d022      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8003306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800330a:	d115      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800330c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003310:	3308      	adds	r3, #8
 8003312:	4618      	mov	r0, r3
 8003314:	f004 fbf6 	bl	8007b04 <RCCEx_PLL2_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800331e:	e016      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003320:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003324:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003328:	3330      	adds	r3, #48	; 0x30
 800332a:	4618      	mov	r0, r3
 800332c:	f004 fc82 	bl	8007c34 <RCCEx_PLL3_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003336:	e00a      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800333e:	e006      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003340:	bf00      	nop
 8003342:	e004      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003344:	bf00      	nop
 8003346:	e002      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003348:	bf00      	nop
 800334a:	e000      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800334c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10c      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003356:	4bbb      	ldr	r3, [pc, #748]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003358:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800335c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003360:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003364:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003366:	4ab7      	ldr	r2, [pc, #732]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003368:	430b      	orrs	r3, r1
 800336a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800336e:	e003      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003370:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003374:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003378:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003384:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800338e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8003392:	460b      	mov	r3, r1
 8003394:	4313      	orrs	r3, r2
 8003396:	d053      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003398:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800339c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800339e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80033a2:	d031      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80033a4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80033a8:	d82a      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80033aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ae:	d02d      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80033b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033b4:	d824      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80033b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033ba:	d029      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80033bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033c0:	d81e      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80033c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033c6:	d011      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80033c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033cc:	d818      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d020      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80033d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033d6:	d113      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033dc:	3308      	adds	r3, #8
 80033de:	4618      	mov	r0, r3
 80033e0:	f004 fb90 	bl	8007b04 <RCCEx_PLL2_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80033ea:	e014      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033f0:	3330      	adds	r3, #48	; 0x30
 80033f2:	4618      	mov	r0, r3
 80033f4:	f004 fc1e 	bl	8007c34 <RCCEx_PLL3_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80033fe:	e00a      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003406:	e006      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003408:	bf00      	nop
 800340a:	e004      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800340c:	bf00      	nop
 800340e:	e002      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003410:	bf00      	nop
 8003412:	e000      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003416:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10c      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800341e:	4b89      	ldr	r3, [pc, #548]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003420:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003424:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003428:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800342c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800342e:	4a85      	ldr	r2, [pc, #532]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003430:	430b      	orrs	r3, r1
 8003432:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003436:	e003      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800343c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003440:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800344c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003450:	2300      	movs	r3, #0
 8003452:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003456:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800345a:	460b      	mov	r3, r1
 800345c:	4313      	orrs	r3, r2
 800345e:	d055      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003460:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003464:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003468:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800346c:	d031      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800346e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003472:	d82a      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003478:	d02d      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800347a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800347e:	d824      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003480:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003484:	d029      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003486:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800348a:	d81e      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800348c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003490:	d011      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003496:	d818      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d020      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800349c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a0:	d113      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034a6:	3308      	adds	r3, #8
 80034a8:	4618      	mov	r0, r3
 80034aa:	f004 fb2b 	bl	8007b04 <RCCEx_PLL2_Config>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80034b4:	e014      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034ba:	3330      	adds	r3, #48	; 0x30
 80034bc:	4618      	mov	r0, r3
 80034be:	f004 fbb9 	bl	8007c34 <RCCEx_PLL3_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80034c8:	e00a      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80034d0:	e006      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80034d2:	bf00      	nop
 80034d4:	e004      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80034d6:	bf00      	nop
 80034d8:	e002      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80034da:	bf00      	nop
 80034dc:	e000      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80034de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10d      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80034e8:	4b56      	ldr	r3, [pc, #344]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80034ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034ee:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 80034f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034fa:	4a52      	ldr	r2, [pc, #328]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80034fc:	430b      	orrs	r3, r1
 80034fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003502:	e003      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003504:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003508:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800350c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003514:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003518:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800351c:	2300      	movs	r3, #0
 800351e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003522:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003526:	460b      	mov	r3, r1
 8003528:	4313      	orrs	r3, r2
 800352a:	d044      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800352c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003534:	2b05      	cmp	r3, #5
 8003536:	d823      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003538:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800353a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353e:	bf00      	nop
 8003540:	08003589 	.word	0x08003589
 8003544:	08003559 	.word	0x08003559
 8003548:	0800356d 	.word	0x0800356d
 800354c:	08003589 	.word	0x08003589
 8003550:	08003589 	.word	0x08003589
 8003554:	08003589 	.word	0x08003589
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003558:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800355c:	3308      	adds	r3, #8
 800355e:	4618      	mov	r0, r3
 8003560:	f004 fad0 	bl	8007b04 <RCCEx_PLL2_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800356a:	e00e      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800356c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003570:	3330      	adds	r3, #48	; 0x30
 8003572:	4618      	mov	r0, r3
 8003574:	f004 fb5e 	bl	8007c34 <RCCEx_PLL3_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800357e:	e004      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003586:	e000      	b.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800358a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10d      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003592:	4b2c      	ldr	r3, [pc, #176]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003594:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003598:	f023 0107 	bic.w	r1, r3, #7
 800359c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a4:	4a27      	ldr	r2, [pc, #156]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80035a6:	430b      	orrs	r3, r1
 80035a8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80035ac:	e003      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035b2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80035b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035be:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80035c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80035c6:	2300      	movs	r3, #0
 80035c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80035cc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80035d0:	460b      	mov	r3, r1
 80035d2:	4313      	orrs	r3, r2
 80035d4:	d04f      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80035d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	2b50      	cmp	r3, #80	; 0x50
 80035e0:	d029      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80035e2:	2b50      	cmp	r3, #80	; 0x50
 80035e4:	d823      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80035e6:	2b40      	cmp	r3, #64	; 0x40
 80035e8:	d027      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d81f      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80035ee:	2b30      	cmp	r3, #48	; 0x30
 80035f0:	d025      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80035f2:	2b30      	cmp	r3, #48	; 0x30
 80035f4:	d81b      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d00f      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80035fa:	2b20      	cmp	r3, #32
 80035fc:	d817      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d022      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003602:	2b10      	cmp	r3, #16
 8003604:	d113      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003606:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800360a:	3308      	adds	r3, #8
 800360c:	4618      	mov	r0, r3
 800360e:	f004 fa79 	bl	8007b04 <RCCEx_PLL2_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003618:	e017      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800361a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800361e:	3330      	adds	r3, #48	; 0x30
 8003620:	4618      	mov	r0, r3
 8003622:	f004 fb07 	bl	8007c34 <RCCEx_PLL3_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800362c:	e00d      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003634:	e009      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003636:	bf00      	nop
 8003638:	e007      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800363a:	bf00      	nop
 800363c:	e005      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800363e:	bf00      	nop
 8003640:	e003      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003642:	bf00      	nop
 8003644:	44020c00 	.word	0x44020c00
        break;
 8003648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10d      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003652:	4baf      	ldr	r3, [pc, #700]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003654:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003658:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800365c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003664:	4aaa      	ldr	r2, [pc, #680]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003666:	430b      	orrs	r3, r1
 8003668:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800366c:	e003      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003672:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003676:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003682:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800368c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003690:	460b      	mov	r3, r1
 8003692:	4313      	orrs	r3, r2
 8003694:	d055      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003696:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800369a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800369e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80036a2:	d031      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80036a4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80036a8:	d82a      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80036aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036ae:	d02d      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80036b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036b4:	d824      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80036b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036ba:	d029      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80036bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036c0:	d81e      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80036c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036c6:	d011      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80036c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036cc:	d818      	bhi.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d020      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80036d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d6:	d113      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036dc:	3308      	adds	r3, #8
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 fa10 	bl	8007b04 <RCCEx_PLL2_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80036ea:	e014      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036f0:	3330      	adds	r3, #48	; 0x30
 80036f2:	4618      	mov	r0, r3
 80036f4:	f004 fa9e 	bl	8007c34 <RCCEx_PLL3_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80036fe:	e00a      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003706:	e006      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003708:	bf00      	nop
 800370a:	e004      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800370c:	bf00      	nop
 800370e:	e002      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003710:	bf00      	nop
 8003712:	e000      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003716:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10d      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800371e:	4b7c      	ldr	r3, [pc, #496]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003724:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003728:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800372c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003730:	4a77      	ldr	r2, [pc, #476]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003732:	430b      	orrs	r3, r1
 8003734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003738:	e003      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800373e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003742:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800374e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003752:	2300      	movs	r3, #0
 8003754:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003758:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800375c:	460b      	mov	r3, r1
 800375e:	4313      	orrs	r3, r2
 8003760:	d03d      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003762:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800376e:	d01b      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003770:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003774:	d814      	bhi.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003776:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800377a:	d017      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800377c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003780:	d80e      	bhi.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d014      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378a:	d109      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800378c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003790:	3330      	adds	r3, #48	; 0x30
 8003792:	4618      	mov	r0, r3
 8003794:	f004 fa4e 	bl	8007c34 <RCCEx_PLL3_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800379e:	e008      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80037a6:	e004      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80037a8:	bf00      	nop
 80037aa:	e002      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80037ac:	bf00      	nop
 80037ae:	e000      	b.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80037b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10d      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80037ba:	4b55      	ldr	r3, [pc, #340]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80037bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80037c0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80037c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037cc:	4a50      	ldr	r2, [pc, #320]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80037ce:	430b      	orrs	r3, r1
 80037d0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80037d4:	e003      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037da:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80037de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80037ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037ee:	2300      	movs	r3, #0
 80037f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037f4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4313      	orrs	r3, r2
 80037fc:	d03d      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80037fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003806:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800380a:	d01b      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800380c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003810:	d814      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003812:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003816:	d017      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003818:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800381c:	d80e      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d014      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003822:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003826:	d109      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003828:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800382c:	3330      	adds	r3, #48	; 0x30
 800382e:	4618      	mov	r0, r3
 8003830:	f004 fa00 	bl	8007c34 <RCCEx_PLL3_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800383a:	e008      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003842:	e004      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003844:	bf00      	nop
 8003846:	e002      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003848:	bf00      	nop
 800384a:	e000      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800384c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800384e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10d      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003856:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003858:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800385c:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003860:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003868:	4a29      	ldr	r2, [pc, #164]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800386a:	430b      	orrs	r3, r1
 800386c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003870:	e003      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003872:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003876:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800387a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003886:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800388a:	2300      	movs	r3, #0
 800388c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003890:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003894:	460b      	mov	r3, r1
 8003896:	4313      	orrs	r3, r2
 8003898:	d040      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800389a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800389e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038a6:	d01b      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80038a8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80038ac:	d814      	bhi.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80038ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038b2:	d017      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80038b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038b8:	d80e      	bhi.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d014      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80038be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038c2:	d109      	bne.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038c8:	3330      	adds	r3, #48	; 0x30
 80038ca:	4618      	mov	r0, r3
 80038cc:	f004 f9b2 	bl	8007c34 <RCCEx_PLL3_Config>
 80038d0:	4603      	mov	r3, r0
 80038d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80038d6:	e008      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80038de:	e004      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80038e0:	bf00      	nop
 80038e2:	e002      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80038e4:	bf00      	nop
 80038e6:	e000      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80038e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d110      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80038f2:	4b07      	ldr	r3, [pc, #28]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80038f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80038f8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80038fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003904:	4a02      	ldr	r2, [pc, #8]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003906:	430b      	orrs	r3, r1
 8003908:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800390c:	e006      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800390e:	bf00      	nop
 8003910:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003918:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800391c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003924:	2100      	movs	r1, #0
 8003926:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800392a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003932:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003936:	460b      	mov	r3, r1
 8003938:	4313      	orrs	r3, r2
 800393a:	d03d      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800393c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003940:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003944:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003948:	d01b      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800394a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800394e:	d814      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003950:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003954:	d017      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003956:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800395a:	d80e      	bhi.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800395c:	2b00      	cmp	r3, #0
 800395e:	d014      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003964:	d109      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003966:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800396a:	3330      	adds	r3, #48	; 0x30
 800396c:	4618      	mov	r0, r3
 800396e:	f004 f961 	bl	8007c34 <RCCEx_PLL3_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003978:	e008      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003980:	e004      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003982:	bf00      	nop
 8003984:	e002      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003986:	bf00      	nop
 8003988:	e000      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800398a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10d      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003994:	4bbe      	ldr	r3, [pc, #760]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003996:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800399a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800399e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039a6:	4aba      	ldr	r2, [pc, #744]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80039a8:	430b      	orrs	r3, r1
 80039aa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80039ae:	e003      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039b4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80039b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80039c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80039d2:	460b      	mov	r3, r1
 80039d4:	4313      	orrs	r3, r2
 80039d6:	d035      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80039d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039e4:	d015      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80039e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ea:	d80e      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d012      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80039f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f4:	d109      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039fa:	3330      	adds	r3, #48	; 0x30
 80039fc:	4618      	mov	r0, r3
 80039fe:	f004 f919 	bl	8007c34 <RCCEx_PLL3_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003a08:	e006      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a10:	e002      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003a12:	bf00      	nop
 8003a14:	e000      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a18:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10d      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003a20:	4b9b      	ldr	r3, [pc, #620]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003a22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003a26:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8003a2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a32:	4a97      	ldr	r2, [pc, #604]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003a34:	430b      	orrs	r3, r1
 8003a36:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003a3a:	e003      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a40:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a5e:	460b      	mov	r3, r1
 8003a60:	4313      	orrs	r3, r2
 8003a62:	d00e      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003a64:	4b8a      	ldr	r3, [pc, #552]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	4a89      	ldr	r2, [pc, #548]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003a6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a6e:	61d3      	str	r3, [r2, #28]
 8003a70:	4b87      	ldr	r3, [pc, #540]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003a72:	69d9      	ldr	r1, [r3, #28]
 8003a74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a78:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003a7c:	4a84      	ldr	r2, [pc, #528]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003a7e:	430b      	orrs	r3, r1
 8003a80:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003a8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a92:	2300      	movs	r3, #0
 8003a94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003a98:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	d055      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003aa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003aa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003aaa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003aae:	d031      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003ab0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003ab4:	d82a      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aba:	d02d      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac0:	d824      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ac6:	d029      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003ac8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003acc:	d81e      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad2:	d011      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad8:	d818      	bhi.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d020      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae2:	d113      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ae8:	3308      	adds	r3, #8
 8003aea:	4618      	mov	r0, r3
 8003aec:	f004 f80a 	bl	8007b04 <RCCEx_PLL2_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003af6:	e014      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003afc:	3330      	adds	r3, #48	; 0x30
 8003afe:	4618      	mov	r0, r3
 8003b00:	f004 f898 	bl	8007c34 <RCCEx_PLL3_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b12:	e006      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003b14:	bf00      	nop
 8003b16:	e004      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003b18:	bf00      	nop
 8003b1a:	e002      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003b1c:	bf00      	nop
 8003b1e:	e000      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10d      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003b2a:	4b59      	ldr	r3, [pc, #356]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003b2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003b30:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b3c:	4a54      	ldr	r2, [pc, #336]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003b44:	e003      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b4a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b64:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	d055      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003b6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b76:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003b7a:	d031      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003b7c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003b80:	d82a      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b86:	d02d      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b8c:	d824      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003b8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b92:	d029      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003b94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b98:	d81e      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9e:	d011      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba4:	d818      	bhi.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d020      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bae:	d113      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f003 ffa4 	bl	8007b04 <RCCEx_PLL2_Config>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003bc2:	e014      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bc8:	3330      	adds	r3, #48	; 0x30
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f004 f832 	bl	8007c34 <RCCEx_PLL3_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003bd6:	e00a      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003bde:	e006      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003be0:	bf00      	nop
 8003be2:	e004      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003be4:	bf00      	nop
 8003be6:	e002      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003be8:	bf00      	nop
 8003bea:	e000      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10d      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003bf6:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003bf8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003bfc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003c08:	4a21      	ldr	r2, [pc, #132]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003c10:	e003      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c12:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c16:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003c1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	2100      	movs	r1, #0
 8003c24:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003c34:	460b      	mov	r3, r1
 8003c36:	4313      	orrs	r3, r2
 8003c38:	d057      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c46:	d033      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c4c:	d82c      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003c4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c52:	d02f      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003c54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c58:	d826      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003c5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c5e:	d02b      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003c60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c64:	d820      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c6a:	d013      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003c6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c70:	d81a      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d022      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8003c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c7a:	d115      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c80:	3308      	adds	r3, #8
 8003c82:	4618      	mov	r0, r3
 8003c84:	f003 ff3e 	bl	8007b04 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003c8e:	e016      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003c90:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c98:	3330      	adds	r3, #48	; 0x30
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f003 ffca 	bl	8007c34 <RCCEx_PLL3_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003cae:	e006      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003cb0:	bf00      	nop
 8003cb2:	e004      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003cb4:	bf00      	nop
 8003cb6:	e002      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003cb8:	bf00      	nop
 8003cba:	e000      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10d      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003cc6:	4bbb      	ldr	r3, [pc, #748]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003cc8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003ccc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003cd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cd8:	4ab6      	ldr	r2, [pc, #728]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003ce0:	e003      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ce6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003d00:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4313      	orrs	r3, r2
 8003d08:	d055      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8003d0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d12:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003d16:	d031      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003d18:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003d1c:	d82a      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003d1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d22:	d02d      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d28:	d824      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003d2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d2e:	d029      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003d30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d34:	d81e      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d3a:	d011      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003d3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d40:	d818      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d020      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8003d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d4a:	d113      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d50:	3308      	adds	r3, #8
 8003d52:	4618      	mov	r0, r3
 8003d54:	f003 fed6 	bl	8007b04 <RCCEx_PLL2_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003d5e:	e014      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d64:	3330      	adds	r3, #48	; 0x30
 8003d66:	4618      	mov	r0, r3
 8003d68:	f003 ff64 	bl	8007c34 <RCCEx_PLL3_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003d72:	e00a      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d7a:	e006      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003d7c:	bf00      	nop
 8003d7e:	e004      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003d80:	bf00      	nop
 8003d82:	e002      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003d84:	bf00      	nop
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10d      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8003d92:	4b88      	ldr	r3, [pc, #544]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003d94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003d98:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8003d9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003da0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003da4:	4a83      	ldr	r2, [pc, #524]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003da6:	430b      	orrs	r3, r1
 8003da8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003dac:	e003      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003db2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8003db6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8003dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dcc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	d055      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8003dd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003dde:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003de2:	d031      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003de4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003de8:	d82a      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003dea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dee:	d02d      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8003df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df4:	d824      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003df6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003dfa:	d029      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8003dfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e00:	d81e      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003e02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e06:	d011      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8003e08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e0c:	d818      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d020      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8003e12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e16:	d113      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f003 fe70 	bl	8007b04 <RCCEx_PLL2_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003e2a:	e014      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e30:	3330      	adds	r3, #48	; 0x30
 8003e32:	4618      	mov	r0, r3
 8003e34:	f003 fefe 	bl	8007c34 <RCCEx_PLL3_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e46:	e006      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003e48:	bf00      	nop
 8003e4a:	e004      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10d      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8003e5e:	4b55      	ldr	r3, [pc, #340]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003e60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003e64:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e70:	4a50      	ldr	r2, [pc, #320]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003e72:	430b      	orrs	r3, r1
 8003e74:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e7e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8003e82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8003e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e98:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d055      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8003ea2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ea6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eae:	d031      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8003eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb4:	d82a      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eba:	d02d      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8003ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec0:	d824      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003ec2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ec6:	d029      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003ec8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ecc:	d81e      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed2:	d011      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8003ed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed8:	d818      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d020      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8003ede:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ee2:	d113      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ee8:	3308      	adds	r3, #8
 8003eea:	4618      	mov	r0, r3
 8003eec:	f003 fe0a 	bl	8007b04 <RCCEx_PLL2_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003ef6:	e014      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003efc:	3330      	adds	r3, #48	; 0x30
 8003efe:	4618      	mov	r0, r3
 8003f00:	f003 fe98 	bl	8007c34 <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f12:	e006      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003f14:	bf00      	nop
 8003f16:	e004      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003f18:	bf00      	nop
 8003f1a:	e002      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003f1c:	bf00      	nop
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10d      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8003f2a:	4b22      	ldr	r3, [pc, #136]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003f30:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f3e:	430b      	orrs	r3, r1
 8003f40:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003f44:	e003      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f4a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003f5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f64:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	d055      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f72:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003f76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f7a:	d035      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8003f7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f80:	d82e      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003f82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f86:	d031      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8003f88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f8c:	d828      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003f8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f92:	d01b      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8003f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f98:	d822      	bhi.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8003f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa2:	d009      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8003fa4:	e01c      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa6:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	4a02      	ldr	r2, [pc, #8]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fb0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fb2:	e01c      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8003fb4:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f003 fda0 	bl	8007b04 <RCCEx_PLL2_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fca:	e010      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fd0:	3330      	adds	r3, #48	; 0x30
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f003 fe2e 	bl	8007c34 <RCCEx_PLL3_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fde:	e006      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003fe6:	e002      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003fe8:	bf00      	nop
 8003fea:	e000      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10d      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003ff6:	4bc3      	ldr	r3, [pc, #780]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ffc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004000:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004004:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004008:	4abe      	ldr	r2, [pc, #760]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800400a:	430b      	orrs	r3, r1
 800400c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004010:	e003      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004012:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004016:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800401a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004026:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004030:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004034:	460b      	mov	r3, r1
 8004036:	4313      	orrs	r3, r2
 8004038:	d051      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800403a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800403e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004046:	d033      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004048:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800404c:	d82c      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800404e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004052:	d02d      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004054:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004058:	d826      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800405a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800405e:	d019      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004064:	d820      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800406a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800406e:	d007      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004070:	e01a      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004072:	4ba4      	ldr	r3, [pc, #656]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	4aa3      	ldr	r2, [pc, #652]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800407c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800407e:	e018      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004080:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004084:	3308      	adds	r3, #8
 8004086:	4618      	mov	r0, r3
 8004088:	f003 fd3c 	bl	8007b04 <RCCEx_PLL2_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004092:	e00e      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004094:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004098:	3330      	adds	r3, #48	; 0x30
 800409a:	4618      	mov	r0, r3
 800409c:	f003 fdca 	bl	8007c34 <RCCEx_PLL3_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80040a6:	e004      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80040ae:	e000      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80040b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10d      	bne.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80040ba:	4b92      	ldr	r3, [pc, #584]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80040bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040c0:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 80040c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80040cc:	4a8d      	ldr	r2, [pc, #564]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80040ce:	430b      	orrs	r3, r1
 80040d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040d4:	e003      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040da:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80040de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80040ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80040ec:	2300      	movs	r3, #0
 80040ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80040f4:	460b      	mov	r3, r1
 80040f6:	4313      	orrs	r3, r2
 80040f8:	d032      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80040fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004102:	2b05      	cmp	r3, #5
 8004104:	d80f      	bhi.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8004106:	2b03      	cmp	r3, #3
 8004108:	d211      	bcs.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800410a:	2b01      	cmp	r3, #1
 800410c:	d911      	bls.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800410e:	2b02      	cmp	r3, #2
 8004110:	d109      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004112:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004116:	3308      	adds	r3, #8
 8004118:	4618      	mov	r0, r3
 800411a:	f003 fcf3 	bl	8007b04 <RCCEx_PLL2_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004124:	e006      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800412c:	e002      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800412e:	bf00      	nop
 8004130:	e000      	b.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8004132:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004134:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10d      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800413c:	4b71      	ldr	r3, [pc, #452]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800413e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004142:	f023 0107 	bic.w	r1, r3, #7
 8004146:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800414a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800414e:	4a6d      	ldr	r2, [pc, #436]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004150:	430b      	orrs	r3, r1
 8004152:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004156:	e003      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004158:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800415c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004160:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004168:	2100      	movs	r1, #0
 800416a:	6739      	str	r1, [r7, #112]	; 0x70
 800416c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004170:	677b      	str	r3, [r7, #116]	; 0x74
 8004172:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004176:	460b      	mov	r3, r1
 8004178:	4313      	orrs	r3, r2
 800417a:	d024      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800417c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004180:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004188:	2b08      	cmp	r3, #8
 800418a:	d005      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004192:	e002      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004194:	bf00      	nop
 8004196:	e000      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800419a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10d      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80041a2:	4b58      	ldr	r3, [pc, #352]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80041a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041a8:	f023 0108 	bic.w	r1, r3, #8
 80041ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80041b4:	4a53      	ldr	r2, [pc, #332]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80041b6:	430b      	orrs	r3, r1
 80041b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041bc:	e003      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041c2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ce:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80041d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80041d4:	2300      	movs	r3, #0
 80041d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041d8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80041dc:	460b      	mov	r3, r1
 80041de:	4313      	orrs	r3, r2
 80041e0:	f000 80b9 	beq.w	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80041e4:	4b48      	ldr	r3, [pc, #288]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	4a47      	ldr	r2, [pc, #284]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80041ea:	f043 0301 	orr.w	r3, r3, #1
 80041ee:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041f0:	f7fd faf8 	bl	80017e4 <HAL_GetTick>
 80041f4:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80041f8:	e00b      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fa:	f7fd faf3 	bl	80017e4 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d903      	bls.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004210:	e005      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004212:	4b3d      	ldr	r3, [pc, #244]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0ed      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800421e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 8093 	bne.w	800434e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004228:	4b36      	ldr	r3, [pc, #216]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800422a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800422e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004232:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004236:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d023      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800423e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004242:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8004246:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800424a:	4293      	cmp	r3, r2
 800424c:	d01b      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800424e:	4b2d      	ldr	r3, [pc, #180]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004250:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004258:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800425c:	4b29      	ldr	r3, [pc, #164]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800425e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004262:	4a28      	ldr	r2, [pc, #160]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004268:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800426c:	4b25      	ldr	r3, [pc, #148]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800426e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004272:	4a24      	ldr	r2, [pc, #144]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004278:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800427e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004282:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004286:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d019      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004292:	f7fd faa7 	bl	80017e4 <HAL_GetTick>
 8004296:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800429a:	e00d      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429c:	f7fd faa2 	bl	80017e4 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80042a6:	1ad2      	subs	r2, r2, r3
 80042a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d903      	bls.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 80042b6:	e006      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b8:	4b12      	ldr	r3, [pc, #72]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80042ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0ea      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80042c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d13a      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80042ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042d2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80042d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042de:	d115      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80042e0:	4b08      	ldr	r3, [pc, #32]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80042e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042ec:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80042fa:	4a02      	ldr	r2, [pc, #8]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80042fc:	430b      	orrs	r3, r1
 80042fe:	61d3      	str	r3, [r2, #28]
 8004300:	e00a      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8004302:	bf00      	nop
 8004304:	44020c00 	.word	0x44020c00
 8004308:	44020800 	.word	0x44020800
 800430c:	4b9f      	ldr	r3, [pc, #636]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800430e:	69db      	ldr	r3, [r3, #28]
 8004310:	4a9e      	ldr	r2, [pc, #632]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004312:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004316:	61d3      	str	r3, [r2, #28]
 8004318:	4b9c      	ldr	r3, [pc, #624]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800431a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800431e:	4a9b      	ldr	r2, [pc, #620]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004324:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004328:	4b98      	ldr	r3, [pc, #608]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800432a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800432e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004332:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433a:	4a94      	ldr	r2, [pc, #592]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800433c:	430b      	orrs	r3, r1
 800433e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004342:	e008      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004344:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004348:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 800434c:	e003      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004352:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004356:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800435a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435e:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004362:	663b      	str	r3, [r7, #96]	; 0x60
 8004364:	2300      	movs	r3, #0
 8004366:	667b      	str	r3, [r7, #100]	; 0x64
 8004368:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800436c:	460b      	mov	r3, r1
 800436e:	4313      	orrs	r3, r2
 8004370:	d035      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004372:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004376:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800437a:	2b30      	cmp	r3, #48	; 0x30
 800437c:	d014      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800437e:	2b30      	cmp	r3, #48	; 0x30
 8004380:	d80e      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004382:	2b20      	cmp	r3, #32
 8004384:	d012      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004386:	2b20      	cmp	r3, #32
 8004388:	d80a      	bhi.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800438a:	2b00      	cmp	r3, #0
 800438c:	d010      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800438e:	2b10      	cmp	r3, #16
 8004390:	d106      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004392:	4b7e      	ldr	r3, [pc, #504]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004396:	4a7d      	ldr	r2, [pc, #500]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800439c:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800439e:	e008      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043a6:	e004      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80043a8:	bf00      	nop
 80043aa:	e002      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80043ac:	bf00      	nop
 80043ae:	e000      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80043b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10d      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80043ba:	4b74      	ldr	r3, [pc, #464]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80043bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043c0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80043c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043c8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80043cc:	4a6f      	ldr	r2, [pc, #444]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80043ce:	430b      	orrs	r3, r1
 80043d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043d4:	e003      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043da:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80043de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80043ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80043ec:	2300      	movs	r3, #0
 80043ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043f0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80043f4:	460b      	mov	r3, r1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	d033      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80043fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043fe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8004406:	2b40      	cmp	r3, #64	; 0x40
 8004408:	d007      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800440a:	e010      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800440c:	4b5f      	ldr	r3, [pc, #380]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	4a5e      	ldr	r2, [pc, #376]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004416:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004418:	e00d      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800441a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800441e:	3308      	adds	r3, #8
 8004420:	4618      	mov	r0, r3
 8004422:	f003 fb6f 	bl	8007b04 <RCCEx_PLL2_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800442c:	e003      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004436:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10d      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800443e:	4b53      	ldr	r3, [pc, #332]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004440:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004444:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004448:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800444c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004450:	4a4e      	ldr	r2, [pc, #312]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004452:	430b      	orrs	r3, r1
 8004454:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004458:	e003      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800445e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004462:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800446e:	653b      	str	r3, [r7, #80]	; 0x50
 8004470:	2300      	movs	r3, #0
 8004472:	657b      	str	r3, [r7, #84]	; 0x54
 8004474:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004478:	460b      	mov	r3, r1
 800447a:	4313      	orrs	r3, r2
 800447c:	d033      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800447e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004482:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800448a:	2b80      	cmp	r3, #128	; 0x80
 800448c:	d007      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800448e:	e010      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004490:	4b3e      	ldr	r3, [pc, #248]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004494:	4a3d      	ldr	r2, [pc, #244]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800449a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800449c:	e00d      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800449e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044a2:	3308      	adds	r3, #8
 80044a4:	4618      	mov	r0, r3
 80044a6:	f003 fb2d 	bl	8007b04 <RCCEx_PLL2_Config>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80044b0:	e003      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80044b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10d      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80044c2:	4b32      	ldr	r3, [pc, #200]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80044c8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80044cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044d0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80044d4:	4a2d      	ldr	r2, [pc, #180]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044d6:	430b      	orrs	r3, r1
 80044d8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80044dc:	e003      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044e2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80044e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ee:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80044f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044f4:	2300      	movs	r3, #0
 80044f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80044fc:	460b      	mov	r3, r1
 80044fe:	4313      	orrs	r3, r2
 8004500:	d04a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004502:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800450a:	2b04      	cmp	r3, #4
 800450c:	d827      	bhi.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800450e:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004514:	08004529 	.word	0x08004529
 8004518:	08004537 	.word	0x08004537
 800451c:	0800454b 	.word	0x0800454b
 8004520:	08004567 	.word	0x08004567
 8004524:	08004567 	.word	0x08004567
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004528:	4b18      	ldr	r3, [pc, #96]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800452a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452c:	4a17      	ldr	r2, [pc, #92]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800452e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004532:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004534:	e018      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004536:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800453a:	3308      	adds	r3, #8
 800453c:	4618      	mov	r0, r3
 800453e:	f003 fae1 	bl	8007b04 <RCCEx_PLL2_Config>
 8004542:	4603      	mov	r3, r0
 8004544:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004548:	e00e      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800454a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800454e:	3330      	adds	r3, #48	; 0x30
 8004550:	4618      	mov	r0, r3
 8004552:	f003 fb6f 	bl	8007c34 <RCCEx_PLL3_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800455c:	e004      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004564:	e000      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004568:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10f      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004570:	4b06      	ldr	r3, [pc, #24]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004576:	f023 0107 	bic.w	r1, r3, #7
 800457a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800457e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004582:	4a02      	ldr	r2, [pc, #8]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004584:	430b      	orrs	r3, r1
 8004586:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800458a:	e005      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800458c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004590:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004594:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004598:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80045a4:	643b      	str	r3, [r7, #64]	; 0x40
 80045a6:	2300      	movs	r3, #0
 80045a8:	647b      	str	r3, [r7, #68]	; 0x44
 80045aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80045ae:	460b      	mov	r3, r1
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f000 8081 	beq.w	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80045b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80045be:	2b20      	cmp	r3, #32
 80045c0:	d85f      	bhi.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80045c2:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	0800464d 	.word	0x0800464d
 80045cc:	08004683 	.word	0x08004683
 80045d0:	08004683 	.word	0x08004683
 80045d4:	08004683 	.word	0x08004683
 80045d8:	08004683 	.word	0x08004683
 80045dc:	08004683 	.word	0x08004683
 80045e0:	08004683 	.word	0x08004683
 80045e4:	08004683 	.word	0x08004683
 80045e8:	0800465b 	.word	0x0800465b
 80045ec:	08004683 	.word	0x08004683
 80045f0:	08004683 	.word	0x08004683
 80045f4:	08004683 	.word	0x08004683
 80045f8:	08004683 	.word	0x08004683
 80045fc:	08004683 	.word	0x08004683
 8004600:	08004683 	.word	0x08004683
 8004604:	08004683 	.word	0x08004683
 8004608:	0800466f 	.word	0x0800466f
 800460c:	08004683 	.word	0x08004683
 8004610:	08004683 	.word	0x08004683
 8004614:	08004683 	.word	0x08004683
 8004618:	08004683 	.word	0x08004683
 800461c:	08004683 	.word	0x08004683
 8004620:	08004683 	.word	0x08004683
 8004624:	08004683 	.word	0x08004683
 8004628:	0800468b 	.word	0x0800468b
 800462c:	08004683 	.word	0x08004683
 8004630:	08004683 	.word	0x08004683
 8004634:	08004683 	.word	0x08004683
 8004638:	08004683 	.word	0x08004683
 800463c:	08004683 	.word	0x08004683
 8004640:	08004683 	.word	0x08004683
 8004644:	08004683 	.word	0x08004683
 8004648:	0800468b 	.word	0x0800468b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800464c:	4bab      	ldr	r3, [pc, #684]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800464e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004650:	4aaa      	ldr	r2, [pc, #680]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004656:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004658:	e018      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800465a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800465e:	3308      	adds	r3, #8
 8004660:	4618      	mov	r0, r3
 8004662:	f003 fa4f 	bl	8007b04 <RCCEx_PLL2_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800466c:	e00e      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800466e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004672:	3330      	adds	r3, #48	; 0x30
 8004674:	4618      	mov	r0, r3
 8004676:	f003 fadd 	bl	8007c34 <RCCEx_PLL3_Config>
 800467a:	4603      	mov	r3, r0
 800467c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004680:	e004      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004688:	e000      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800468a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800468c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10d      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004694:	4b99      	ldr	r3, [pc, #612]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800469a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800469e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80046a6:	4a95      	ldr	r2, [pc, #596]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80046a8:	430b      	orrs	r3, r1
 80046aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046ae:	e003      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046b4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80046b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80046c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80046c6:	2300      	movs	r3, #0
 80046c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80046ce:	460b      	mov	r3, r1
 80046d0:	4313      	orrs	r3, r2
 80046d2:	d04e      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80046d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e0:	d02e      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80046e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046e6:	d827      	bhi.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80046e8:	2bc0      	cmp	r3, #192	; 0xc0
 80046ea:	d02b      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80046ec:	2bc0      	cmp	r3, #192	; 0xc0
 80046ee:	d823      	bhi.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80046f0:	2b80      	cmp	r3, #128	; 0x80
 80046f2:	d017      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80046f4:	2b80      	cmp	r3, #128	; 0x80
 80046f6:	d81f      	bhi.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d007      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004700:	e01a      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004702:	4b7e      	ldr	r3, [pc, #504]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	4a7d      	ldr	r2, [pc, #500]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800470c:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800470e:	e01a      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004710:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004714:	3308      	adds	r3, #8
 8004716:	4618      	mov	r0, r3
 8004718:	f003 f9f4 	bl	8007b04 <RCCEx_PLL2_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004722:	e010      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004724:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004728:	3330      	adds	r3, #48	; 0x30
 800472a:	4618      	mov	r0, r3
 800472c:	f003 fa82 	bl	8007c34 <RCCEx_PLL3_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004736:	e006      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800473e:	e002      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004740:	bf00      	nop
 8004742:	e000      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004746:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10d      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800474e:	4b6b      	ldr	r3, [pc, #428]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004754:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004758:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800475c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004760:	4a66      	ldr	r2, [pc, #408]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004762:	430b      	orrs	r3, r1
 8004764:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004768:	e003      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800476e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004772:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800477e:	633b      	str	r3, [r7, #48]	; 0x30
 8004780:	2300      	movs	r3, #0
 8004782:	637b      	str	r3, [r7, #52]	; 0x34
 8004784:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004788:	460b      	mov	r3, r1
 800478a:	4313      	orrs	r3, r2
 800478c:	d055      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800478e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004792:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004796:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800479a:	d031      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 800479c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80047a0:	d82a      	bhi.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80047a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a6:	d02d      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80047a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ac:	d824      	bhi.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80047ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047b2:	d029      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80047b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047b8:	d81e      	bhi.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80047ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047be:	d011      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80047c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c4:	d818      	bhi.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d020      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80047ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ce:	d113      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047d4:	3308      	adds	r3, #8
 80047d6:	4618      	mov	r0, r3
 80047d8:	f003 f994 	bl	8007b04 <RCCEx_PLL2_Config>
 80047dc:	4603      	mov	r3, r0
 80047de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80047e2:	e014      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047e8:	3330      	adds	r3, #48	; 0x30
 80047ea:	4618      	mov	r0, r3
 80047ec:	f003 fa22 	bl	8007c34 <RCCEx_PLL3_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80047f6:	e00a      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80047fe:	e006      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004800:	bf00      	nop
 8004802:	e004      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004804:	bf00      	nop
 8004806:	e002      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004808:	bf00      	nop
 800480a:	e000      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800480c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800480e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10d      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004816:	4b39      	ldr	r3, [pc, #228]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800481c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004820:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004824:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004828:	4a34      	ldr	r2, [pc, #208]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800482a:	430b      	orrs	r3, r1
 800482c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004830:	e003      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004832:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004836:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800483a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
 8004848:	2300      	movs	r3, #0
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800484c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004850:	460b      	mov	r3, r1
 8004852:	4313      	orrs	r3, r2
 8004854:	d058      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004856:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800485a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800485e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004862:	d031      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004864:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004868:	d82a      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800486a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800486e:	d02d      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004874:	d824      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004876:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800487a:	d029      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800487c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004880:	d81e      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004886:	d011      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488c:	d818      	bhi.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d020      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004896:	d113      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004898:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800489c:	3308      	adds	r3, #8
 800489e:	4618      	mov	r0, r3
 80048a0:	f003 f930 	bl	8007b04 <RCCEx_PLL2_Config>
 80048a4:	4603      	mov	r3, r0
 80048a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80048aa:	e014      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048b0:	3330      	adds	r3, #48	; 0x30
 80048b2:	4618      	mov	r0, r3
 80048b4:	f003 f9be 	bl	8007c34 <RCCEx_PLL3_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80048be:	e00a      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80048c6:	e006      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80048c8:	bf00      	nop
 80048ca:	e004      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80048cc:	bf00      	nop
 80048ce:	e002      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80048d0:	bf00      	nop
 80048d2:	e000      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80048d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d110      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80048de:	4b07      	ldr	r3, [pc, #28]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80048e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80048e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048f0:	4902      	ldr	r1, [pc, #8]	; (80048fc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80048f8:	e006      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80048fa:	bf00      	nop
 80048fc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004904:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004908:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800490c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004910:	2100      	movs	r1, #0
 8004912:	6239      	str	r1, [r7, #32]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
 800491a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800491e:	460b      	mov	r3, r1
 8004920:	4313      	orrs	r3, r2
 8004922:	d055      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004924:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004928:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800492c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004930:	d031      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004932:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004936:	d82a      	bhi.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004938:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800493c:	d02d      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800493e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004942:	d824      	bhi.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004944:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004948:	d029      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800494a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800494e:	d81e      	bhi.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004954:	d011      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495a:	d818      	bhi.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d020      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004964:	d113      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004966:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800496a:	3308      	adds	r3, #8
 800496c:	4618      	mov	r0, r3
 800496e:	f003 f8c9 	bl	8007b04 <RCCEx_PLL2_Config>
 8004972:	4603      	mov	r3, r0
 8004974:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004978:	e014      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800497a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800497e:	3330      	adds	r3, #48	; 0x30
 8004980:	4618      	mov	r0, r3
 8004982:	f003 f957 	bl	8007c34 <RCCEx_PLL3_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800498c:	e00a      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004994:	e006      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004996:	bf00      	nop
 8004998:	e004      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800499a:	bf00      	nop
 800499c:	e002      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800499e:	bf00      	nop
 80049a0:	e000      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80049a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10d      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80049ac:	4b88      	ldr	r3, [pc, #544]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80049ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049b2:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 80049b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049be:	4984      	ldr	r1, [pc, #528]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80049c6:	e003      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049cc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80049d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	2100      	movs	r1, #0
 80049da:	61b9      	str	r1, [r7, #24]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80049e6:	460b      	mov	r3, r1
 80049e8:	4313      	orrs	r3, r2
 80049ea:	d03d      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80049ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d81c      	bhi.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80049f8:	a201      	add	r2, pc, #4	; (adr r2, 8004a00 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80049fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004a3b 	.word	0x08004a3b
 8004a04:	08004a11 	.word	0x08004a11
 8004a08:	08004a1f 	.word	0x08004a1f
 8004a0c:	08004a3b 	.word	0x08004a3b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a10:	4b6f      	ldr	r3, [pc, #444]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	4a6e      	ldr	r2, [pc, #440]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a1a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004a1c:	e00e      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a22:	3308      	adds	r3, #8
 8004a24:	4618      	mov	r0, r3
 8004a26:	f003 f86d 	bl	8007b04 <RCCEx_PLL2_Config>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004a30:	e004      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a38:	e000      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a3c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10d      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004a44:	4b62      	ldr	r3, [pc, #392]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004a46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a4a:	f023 0203 	bic.w	r2, r3, #3
 8004a4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a52:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004a56:	495e      	ldr	r1, [pc, #376]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004a5e:	e003      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a60:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a64:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	2100      	movs	r1, #0
 8004a72:	6139      	str	r1, [r7, #16]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4313      	orrs	r3, r2
 8004a82:	d03a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a90:	d00e      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a96:	d815      	bhi.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d017      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aa0:	d110      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aa2:	4b4b      	ldr	r3, [pc, #300]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	4a4a      	ldr	r2, [pc, #296]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aac:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004aae:	e00e      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ab0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f003 f824 	bl	8007b04 <RCCEx_PLL2_Config>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004ac2:	e004      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004aca:	e000      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ace:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10d      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004ad6:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ad8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ae4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ae8:	4939      	ldr	r1, [pc, #228]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004af0:	e003      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004af6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004afa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	2100      	movs	r1, #0
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	f003 0310 	and.w	r3, r3, #16
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b10:	460b      	mov	r3, r1
 8004b12:	4313      	orrs	r3, r2
 8004b14:	d038      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004b16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b1a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004b1e:	2b30      	cmp	r3, #48	; 0x30
 8004b20:	d01b      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004b22:	2b30      	cmp	r3, #48	; 0x30
 8004b24:	d815      	bhi.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004b26:	2b10      	cmp	r3, #16
 8004b28:	d002      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d007      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004b2e:	e010      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b30:	4b27      	ldr	r3, [pc, #156]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b34:	4a26      	ldr	r2, [pc, #152]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b3a:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b3c:	e00e      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b42:	3330      	adds	r3, #48	; 0x30
 8004b44:	4618      	mov	r0, r3
 8004b46:	f003 f875 	bl	8007c34 <RCCEx_PLL3_Config>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004b50:	e004      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b58:	e000      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b5c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10d      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004b64:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004b76:	4916      	ldr	r1, [pc, #88]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004b7e:	e003      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b80:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b84:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b90:	2100      	movs	r1, #0
 8004b92:	6039      	str	r1, [r7, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	607b      	str	r3, [r7, #4]
 8004b9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	d00c      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ba6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004baa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bb2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004bb6:	4906      	ldr	r1, [pc, #24]	; (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8004bbe:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bce:	bf00      	nop
 8004bd0:	44020c00 	.word	0x44020c00

08004bd4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b08b      	sub	sp, #44	; 0x2c
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004bdc:	4bad      	ldr	r3, [pc, #692]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004be6:	4bab      	ldr	r3, [pc, #684]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004bf0:	4ba8      	ldr	r3, [pc, #672]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	0a1b      	lsrs	r3, r3, #8
 8004bf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bfa:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004bfc:	4ba5      	ldr	r3, [pc, #660]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004c06:	4ba3      	ldr	r3, [pc, #652]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	08db      	lsrs	r3, r3, #3
 8004c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	fb02 f303 	mul.w	r3, r2, r3
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8126 	beq.w	8004e76 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d053      	beq.n	8004cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d86f      	bhi.n	8004d16 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d003      	beq.n	8004c44 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d02b      	beq.n	8004c9a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8004c42:	e068      	b.n	8004d16 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c44:	4b93      	ldr	r3, [pc, #588]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	08db      	lsrs	r3, r3, #3
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	4a92      	ldr	r2, [pc, #584]	; (8004e98 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004c50:	fa22 f303 	lsr.w	r3, r2, r3
 8004c54:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	ee07 3a90 	vmov	s15, r3
 8004c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	ee07 3a90 	vmov	s15, r3
 8004c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	ee07 3a90 	vmov	s15, r3
 8004c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c78:	ed97 6a04 	vldr	s12, [r7, #16]
 8004c7c:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004e9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004c80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c94:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004c98:	e068      	b.n	8004d6c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	ee07 3a90 	vmov	s15, r3
 8004ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004ea0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004ca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb6:	ed97 6a04 	vldr	s12, [r7, #16]
 8004cba:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004e9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004cd6:	e049      	b.n	8004d6c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	ee07 3a90 	vmov	s15, r3
 8004cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce2:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	ee07 3a90 	vmov	s15, r3
 8004cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf4:	ed97 6a04 	vldr	s12, [r7, #16]
 8004cf8:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004e9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004d14:	e02a      	b.n	8004d6c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d16:	4b5f      	ldr	r3, [pc, #380]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	08db      	lsrs	r3, r3, #3
 8004d1c:	f003 0303 	and.w	r3, r3, #3
 8004d20:	4a5d      	ldr	r2, [pc, #372]	; (8004e98 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004d22:	fa22 f303 	lsr.w	r3, r2, r3
 8004d26:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	ee07 3a90 	vmov	s15, r3
 8004d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d4a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004d4e:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004e9c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d66:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004d6a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d6c:	4b49      	ldr	r3, [pc, #292]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d78:	d121      	bne.n	8004dbe <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004d7a:	4b46      	ldr	r3, [pc, #280]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d017      	beq.n	8004db6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004d86:	4b43      	ldr	r3, [pc, #268]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8a:	0a5b      	lsrs	r3, r3, #9
 8004d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d90:	ee07 3a90 	vmov	s15, r3
 8004d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8004d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004da0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dac:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e006      	b.n	8004dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	e002      	b.n	8004dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004dc4:	4b33      	ldr	r3, [pc, #204]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dd0:	d121      	bne.n	8004e16 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004dd2:	4b30      	ldr	r3, [pc, #192]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d017      	beq.n	8004e0e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004dde:	4b2d      	ldr	r3, [pc, #180]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	0c1b      	lsrs	r3, r3, #16
 8004de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004de8:	ee07 3a90 	vmov	s15, r3
 8004dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004df4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004df8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e04:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	605a      	str	r2, [r3, #4]
 8004e0c:	e006      	b.n	8004e1c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	605a      	str	r2, [r3, #4]
 8004e14:	e002      	b.n	8004e1c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e1c:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e28:	d121      	bne.n	8004e6e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004e2a:	4b1a      	ldr	r3, [pc, #104]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d017      	beq.n	8004e66 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004e36:	4b17      	ldr	r3, [pc, #92]	; (8004e94 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	0e1b      	lsrs	r3, r3, #24
 8004e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004e48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e4c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004e50:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e5c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004e64:	e010      	b.n	8004e88 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	609a      	str	r2, [r3, #8]
}
 8004e6c:	e00c      	b.n	8004e88 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	609a      	str	r2, [r3, #8]
}
 8004e74:	e008      	b.n	8004e88 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	609a      	str	r2, [r3, #8]
}
 8004e88:	bf00      	nop
 8004e8a:	372c      	adds	r7, #44	; 0x2c
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr
 8004e94:	44020c00 	.word	0x44020c00
 8004e98:	03d09000 	.word	0x03d09000
 8004e9c:	46000000 	.word	0x46000000
 8004ea0:	4a742400 	.word	0x4a742400
 8004ea4:	4bbebc20 	.word	0x4bbebc20

08004ea8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b08b      	sub	sp, #44	; 0x2c
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004eb0:	4bad      	ldr	r3, [pc, #692]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004eba:	4bab      	ldr	r3, [pc, #684]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004ec4:	4ba8      	ldr	r3, [pc, #672]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	0a1b      	lsrs	r3, r3, #8
 8004eca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ece:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004ed0:	4ba5      	ldr	r3, [pc, #660]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004eda:	4ba3      	ldr	r3, [pc, #652]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	08db      	lsrs	r3, r3, #3
 8004ee0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8126 	beq.w	800514a <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	2b03      	cmp	r3, #3
 8004f02:	d053      	beq.n	8004fac <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d86f      	bhi.n	8004fea <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d003      	beq.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d02b      	beq.n	8004f6e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8004f16:	e068      	b.n	8004fea <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f18:	4b93      	ldr	r3, [pc, #588]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	08db      	lsrs	r3, r3, #3
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	4a92      	ldr	r2, [pc, #584]	; (800516c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004f24:	fa22 f303 	lsr.w	r3, r2, r3
 8004f28:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	ee07 3a90 	vmov	s15, r3
 8004f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	ee07 3a90 	vmov	s15, r3
 8004f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f4c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f50:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005170 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004f54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f68:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004f6c:	e068      	b.n	8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f78:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005174 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f80:	6a3b      	ldr	r3, [r7, #32]
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f8a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005170 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004faa:	e049      	b.n	8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb6:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	ee07 3a90 	vmov	s15, r3
 8004fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc8:	ed97 6a04 	vldr	s12, [r7, #16]
 8004fcc:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005170 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004fe8:	e02a      	b.n	8005040 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fea:	4b5f      	ldr	r3, [pc, #380]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	08db      	lsrs	r3, r3, #3
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	4a5d      	ldr	r2, [pc, #372]	; (800516c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffa:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	ee07 3a90 	vmov	s15, r3
 8005002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	ee07 3a90 	vmov	s15, r3
 800500c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800501e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005022:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005170 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800502a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800502e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800503a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800503e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005040:	4b49      	ldr	r3, [pc, #292]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800504c:	d121      	bne.n	8005092 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800504e:	4b46      	ldr	r3, [pc, #280]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d017      	beq.n	800508a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800505a:	4b43      	ldr	r3, [pc, #268]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800505c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505e:	0a5b      	lsrs	r3, r3, #9
 8005060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005064:	ee07 3a90 	vmov	s15, r3
 8005068:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800506c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005070:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005074:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800507c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005080:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	e006      	b.n	8005098 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	e002      	b.n	8005098 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005098:	4b33      	ldr	r3, [pc, #204]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a4:	d121      	bne.n	80050ea <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80050a6:	4b30      	ldr	r3, [pc, #192]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d017      	beq.n	80050e2 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80050b2:	4b2d      	ldr	r3, [pc, #180]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80050b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b6:	0c1b      	lsrs	r3, r3, #16
 80050b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050bc:	ee07 3a90 	vmov	s15, r3
 80050c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80050c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80050c8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80050cc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80050d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050d8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	605a      	str	r2, [r3, #4]
 80050e0:	e006      	b.n	80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	605a      	str	r2, [r3, #4]
 80050e8:	e002      	b.n	80050f0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80050f0:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050fc:	d121      	bne.n	8005142 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80050fe:	4b1a      	ldr	r3, [pc, #104]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d017      	beq.n	800513a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800510a:	4b17      	ldr	r3, [pc, #92]	; (8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800510c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510e:	0e1b      	lsrs	r3, r3, #24
 8005110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005114:	ee07 3a90 	vmov	s15, r3
 8005118:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800511c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005120:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005124:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800512c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005130:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005138:	e010      	b.n	800515c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	e00c      	b.n	800515c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	609a      	str	r2, [r3, #8]
}
 8005148:	e008      	b.n	800515c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	609a      	str	r2, [r3, #8]
}
 800515c:	bf00      	nop
 800515e:	372c      	adds	r7, #44	; 0x2c
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	44020c00 	.word	0x44020c00
 800516c:	03d09000 	.word	0x03d09000
 8005170:	46000000 	.word	0x46000000
 8005174:	4a742400 	.word	0x4a742400
 8005178:	4bbebc20 	.word	0x4bbebc20

0800517c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800517c:	b480      	push	{r7}
 800517e:	b08b      	sub	sp, #44	; 0x2c
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005184:	4bad      	ldr	r3, [pc, #692]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800518e:	4bab      	ldr	r3, [pc, #684]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005198:	4ba8      	ldr	r3, [pc, #672]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	0a1b      	lsrs	r3, r3, #8
 800519e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051a2:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80051a4:	4ba5      	ldr	r3, [pc, #660]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80051ae:	4ba3      	ldr	r3, [pc, #652]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80051b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b2:	08db      	lsrs	r3, r3, #3
 80051b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	fb02 f303 	mul.w	r3, r2, r3
 80051be:	ee07 3a90 	vmov	s15, r3
 80051c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8126 	beq.w	800541e <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	2b03      	cmp	r3, #3
 80051d6:	d053      	beq.n	8005280 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d86f      	bhi.n	80052be <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d003      	beq.n	80051ec <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d02b      	beq.n	8005242 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80051ea:	e068      	b.n	80052be <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051ec:	4b93      	ldr	r3, [pc, #588]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	08db      	lsrs	r3, r3, #3
 80051f2:	f003 0303 	and.w	r3, r3, #3
 80051f6:	4a92      	ldr	r2, [pc, #584]	; (8005440 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80051f8:	fa22 f303 	lsr.w	r3, r2, r3
 80051fc:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	ee07 3a90 	vmov	s15, r3
 8005204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	ee07 3a90 	vmov	s15, r3
 800521c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005220:	ed97 6a04 	vldr	s12, [r7, #16]
 8005224:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005444 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800522c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800523c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005240:	e068      	b.n	8005314 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800524c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005448 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005262:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005444 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800527e:	e049      	b.n	8005314 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800544c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800528e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	ee07 3a90 	vmov	s15, r3
 8005298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800529c:	ed97 6a04 	vldr	s12, [r7, #16]
 80052a0:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005444 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80052a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80052bc:	e02a      	b.n	8005314 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052be:	4b5f      	ldr	r3, [pc, #380]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	08db      	lsrs	r3, r3, #3
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	4a5d      	ldr	r2, [pc, #372]	; (8005440 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80052ca:	fa22 f303 	lsr.w	r3, r2, r3
 80052ce:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	ee07 3a90 	vmov	s15, r3
 80052e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052f2:	ed97 6a04 	vldr	s12, [r7, #16]
 80052f6:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005444 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80052fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800530a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005312:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005314:	4b49      	ldr	r3, [pc, #292]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800531c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005320:	d121      	bne.n	8005366 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005322:	4b46      	ldr	r3, [pc, #280]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d017      	beq.n	800535e <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800532e:	4b43      	ldr	r3, [pc, #268]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005332:	0a5b      	lsrs	r3, r3, #9
 8005334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005338:	ee07 3a90 	vmov	s15, r3
 800533c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005344:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005348:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800534c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005354:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e006      	b.n	800536c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	e002      	b.n	800536c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800536c:	4b33      	ldr	r3, [pc, #204]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005378:	d121      	bne.n	80053be <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800537a:	4b30      	ldr	r3, [pc, #192]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d017      	beq.n	80053b6 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005386:	4b2d      	ldr	r3, [pc, #180]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	0c1b      	lsrs	r3, r3, #16
 800538c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005390:	ee07 3a90 	vmov	s15, r3
 8005394:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800539c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80053a0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80053a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053ac:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	605a      	str	r2, [r3, #4]
 80053b4:	e006      	b.n	80053c4 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	605a      	str	r2, [r3, #4]
 80053bc:	e002      	b.n	80053c4 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053c4:	4b1d      	ldr	r3, [pc, #116]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053d0:	d121      	bne.n	8005416 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80053d2:	4b1a      	ldr	r3, [pc, #104]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80053d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d017      	beq.n	800540e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80053de:	4b17      	ldr	r3, [pc, #92]	; (800543c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	0e1b      	lsrs	r3, r3, #24
 80053e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053e8:	ee07 3a90 	vmov	s15, r3
 80053ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80053f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053f4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80053f8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80053fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005404:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800540c:	e010      	b.n	8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	609a      	str	r2, [r3, #8]
}
 8005414:	e00c      	b.n	8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	609a      	str	r2, [r3, #8]
}
 800541c:	e008      	b.n	8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	609a      	str	r2, [r3, #8]
}
 8005430:	bf00      	nop
 8005432:	372c      	adds	r7, #44	; 0x2c
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	44020c00 	.word	0x44020c00
 8005440:	03d09000 	.word	0x03d09000
 8005444:	46000000 	.word	0x46000000
 8005448:	4a742400 	.word	0x4a742400
 800544c:	4bbebc20 	.word	0x4bbebc20

08005450 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b08f      	sub	sp, #60	; 0x3c
 8005454:	af00      	add	r7, sp, #0
 8005456:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800545a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800545e:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8005462:	4321      	orrs	r1, r4
 8005464:	d150      	bne.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005466:	4b26      	ldr	r3, [pc, #152]	; (8005500 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800546c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005470:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005472:	4b23      	ldr	r3, [pc, #140]	; (8005500 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b02      	cmp	r3, #2
 800547e:	d108      	bne.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005486:	d104      	bne.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005488:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800548c:	637b      	str	r3, [r7, #52]	; 0x34
 800548e:	f002 bb2a 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005492:	4b1b      	ldr	r3, [pc, #108]	; (8005500 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005494:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800549c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054a0:	d108      	bne.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a8:	d104      	bne.n	80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80054aa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80054ae:	637b      	str	r3, [r7, #52]	; 0x34
 80054b0:	f002 bb19 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80054b4:	4b12      	ldr	r3, [pc, #72]	; (8005500 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054c0:	d119      	bne.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054c8:	d115      	bne.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80054ca:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80054d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d6:	d30a      	bcc.n	80054ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80054d8:	4b09      	ldr	r3, [pc, #36]	; (8005500 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	0a1b      	lsrs	r3, r3, #8
 80054de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80054e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80054ea:	f002 bafc 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80054f2:	f002 baf8 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	637b      	str	r3, [r7, #52]	; 0x34
 80054fa:	f002 baf4 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80054fe:	bf00      	nop
 8005500:	44020c00 	.word	0x44020c00
 8005504:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005508:	e9d7 0100 	ldrd	r0, r1, [r7]
 800550c:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8005510:	ea50 0104 	orrs.w	r1, r0, r4
 8005514:	f001 8275 	beq.w	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8005518:	e9d7 0100 	ldrd	r0, r1, [r7]
 800551c:	2801      	cmp	r0, #1
 800551e:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8005522:	f082 82dd 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005526:	e9d7 0100 	ldrd	r0, r1, [r7]
 800552a:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800552e:	ea50 0104 	orrs.w	r1, r0, r4
 8005532:	f001 816c 	beq.w	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8005536:	e9d7 0100 	ldrd	r0, r1, [r7]
 800553a:	2801      	cmp	r0, #1
 800553c:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8005540:	f082 82ce 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005544:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005548:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 800554c:	ea50 0104 	orrs.w	r1, r0, r4
 8005550:	f001 8602 	beq.w	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8005554:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005558:	2801      	cmp	r0, #1
 800555a:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800555e:	f082 82bf 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005562:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005566:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800556a:	ea50 0104 	orrs.w	r1, r0, r4
 800556e:	f001 854c 	beq.w	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8005572:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005576:	2801      	cmp	r0, #1
 8005578:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800557c:	f082 82b0 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005580:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005584:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8005588:	ea50 0104 	orrs.w	r1, r0, r4
 800558c:	f001 849e 	beq.w	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005594:	2801      	cmp	r0, #1
 8005596:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800559a:	f082 82a1 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800559e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055a2:	f1a1 0420 	sub.w	r4, r1, #32
 80055a6:	ea50 0104 	orrs.w	r1, r0, r4
 80055aa:	f001 83e8 	beq.w	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80055ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055b2:	2801      	cmp	r0, #1
 80055b4:	f171 0120 	sbcs.w	r1, r1, #32
 80055b8:	f082 8292 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80055bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055c0:	f1a1 0410 	sub.w	r4, r1, #16
 80055c4:	ea50 0104 	orrs.w	r1, r0, r4
 80055c8:	f002 8256 	beq.w	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80055cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055d0:	2801      	cmp	r0, #1
 80055d2:	f171 0110 	sbcs.w	r1, r1, #16
 80055d6:	f082 8283 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80055da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055de:	f1a1 0408 	sub.w	r4, r1, #8
 80055e2:	ea50 0104 	orrs.w	r1, r0, r4
 80055e6:	f002 81cc 	beq.w	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80055ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ee:	2801      	cmp	r0, #1
 80055f0:	f171 0108 	sbcs.w	r1, r1, #8
 80055f4:	f082 8274 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80055f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055fc:	1f0c      	subs	r4, r1, #4
 80055fe:	ea50 0104 	orrs.w	r1, r0, r4
 8005602:	f001 8648 	beq.w	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8005606:	e9d7 0100 	ldrd	r0, r1, [r7]
 800560a:	2801      	cmp	r0, #1
 800560c:	f171 0104 	sbcs.w	r1, r1, #4
 8005610:	f082 8266 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005614:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005618:	1e8c      	subs	r4, r1, #2
 800561a:	ea50 0104 	orrs.w	r1, r0, r4
 800561e:	f002 8143 	beq.w	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8005622:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005626:	2801      	cmp	r0, #1
 8005628:	f171 0102 	sbcs.w	r1, r1, #2
 800562c:	f082 8258 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005630:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005634:	1e4c      	subs	r4, r1, #1
 8005636:	ea50 0104 	orrs.w	r1, r0, r4
 800563a:	f002 80ce 	beq.w	80077da <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800563e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005642:	2801      	cmp	r0, #1
 8005644:	f171 0101 	sbcs.w	r1, r1, #1
 8005648:	f082 824a 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800564c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005650:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8005654:	4321      	orrs	r1, r4
 8005656:	f002 8059 	beq.w	800770c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800565a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800565e:	4cd9      	ldr	r4, [pc, #868]	; (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005660:	42a0      	cmp	r0, r4
 8005662:	f171 0100 	sbcs.w	r1, r1, #0
 8005666:	f082 823b 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800566a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800566e:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8005672:	4321      	orrs	r1, r4
 8005674:	f001 87d9 	beq.w	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005678:	e9d7 0100 	ldrd	r0, r1, [r7]
 800567c:	4cd2      	ldr	r4, [pc, #840]	; (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800567e:	42a0      	cmp	r0, r4
 8005680:	f171 0100 	sbcs.w	r1, r1, #0
 8005684:	f082 822c 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005688:	e9d7 0100 	ldrd	r0, r1, [r7]
 800568c:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8005690:	4321      	orrs	r1, r4
 8005692:	f001 8751 	beq.w	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005696:	e9d7 0100 	ldrd	r0, r1, [r7]
 800569a:	4ccc      	ldr	r4, [pc, #816]	; (80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800569c:	42a0      	cmp	r0, r4
 800569e:	f171 0100 	sbcs.w	r1, r1, #0
 80056a2:	f082 821d 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056aa:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 80056ae:	4321      	orrs	r1, r4
 80056b0:	f001 869a 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80056b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056b8:	4cc5      	ldr	r4, [pc, #788]	; (80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80056ba:	42a0      	cmp	r0, r4
 80056bc:	f171 0100 	sbcs.w	r1, r1, #0
 80056c0:	f082 820e 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056c8:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 80056cc:	4321      	orrs	r1, r4
 80056ce:	f001 8612 	beq.w	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80056d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056d6:	4cbf      	ldr	r4, [pc, #764]	; (80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80056d8:	42a0      	cmp	r0, r4
 80056da:	f171 0100 	sbcs.w	r1, r1, #0
 80056de:	f082 81ff 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056e6:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 80056ea:	4321      	orrs	r1, r4
 80056ec:	f002 817e 	beq.w	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80056f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056f4:	4cb8      	ldr	r4, [pc, #736]	; (80059d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80056f6:	42a0      	cmp	r0, r4
 80056f8:	f171 0100 	sbcs.w	r1, r1, #0
 80056fc:	f082 81f0 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005700:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005704:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8005708:	4321      	orrs	r1, r4
 800570a:	f000 829e 	beq.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800570e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005712:	4cb2      	ldr	r4, [pc, #712]	; (80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005714:	42a0      	cmp	r0, r4
 8005716:	f171 0100 	sbcs.w	r1, r1, #0
 800571a:	f082 81e1 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800571e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005722:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8005726:	4321      	orrs	r1, r4
 8005728:	f000 826d 	beq.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800572c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005730:	4cab      	ldr	r4, [pc, #684]	; (80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005732:	42a0      	cmp	r0, r4
 8005734:	f171 0100 	sbcs.w	r1, r1, #0
 8005738:	f082 81d2 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800573c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005740:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8005744:	4321      	orrs	r1, r4
 8005746:	f001 800d 	beq.w	8006764 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800574a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800574e:	4ca5      	ldr	r4, [pc, #660]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005750:	42a0      	cmp	r0, r4
 8005752:	f171 0100 	sbcs.w	r1, r1, #0
 8005756:	f082 81c3 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800575a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800575e:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8005762:	4321      	orrs	r1, r4
 8005764:	f000 81d0 	beq.w	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005768:	e9d7 0100 	ldrd	r0, r1, [r7]
 800576c:	4c9e      	ldr	r4, [pc, #632]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800576e:	42a0      	cmp	r0, r4
 8005770:	f171 0100 	sbcs.w	r1, r1, #0
 8005774:	f082 81b4 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005778:	e9d7 0100 	ldrd	r0, r1, [r7]
 800577c:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8005780:	4321      	orrs	r1, r4
 8005782:	f000 8142 	beq.w	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005786:	e9d7 0100 	ldrd	r0, r1, [r7]
 800578a:	4c98      	ldr	r4, [pc, #608]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800578c:	42a0      	cmp	r0, r4
 800578e:	f171 0100 	sbcs.w	r1, r1, #0
 8005792:	f082 81a5 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005796:	e9d7 0100 	ldrd	r0, r1, [r7]
 800579a:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 800579e:	4321      	orrs	r1, r4
 80057a0:	f001 824e 	beq.w	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80057a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057a8:	4c91      	ldr	r4, [pc, #580]	; (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80057aa:	42a0      	cmp	r0, r4
 80057ac:	f171 0100 	sbcs.w	r1, r1, #0
 80057b0:	f082 8196 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057b8:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 80057bc:	4321      	orrs	r1, r4
 80057be:	f001 8197 	beq.w	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80057c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057c6:	4c8b      	ldr	r4, [pc, #556]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80057c8:	42a0      	cmp	r0, r4
 80057ca:	f171 0100 	sbcs.w	r1, r1, #0
 80057ce:	f082 8187 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057d6:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 80057da:	4321      	orrs	r1, r4
 80057dc:	f001 8154 	beq.w	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 80057e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057e4:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 80057e8:	f171 0100 	sbcs.w	r1, r1, #0
 80057ec:	f082 8178 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057f4:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 80057f8:	4321      	orrs	r1, r4
 80057fa:	f001 80b7 	beq.w	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80057fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005802:	f248 0401 	movw	r4, #32769	; 0x8001
 8005806:	42a0      	cmp	r0, r4
 8005808:	f171 0100 	sbcs.w	r1, r1, #0
 800580c:	f082 8168 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005810:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005814:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8005818:	4321      	orrs	r1, r4
 800581a:	f001 8064 	beq.w	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800581e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005822:	f244 0401 	movw	r4, #16385	; 0x4001
 8005826:	42a0      	cmp	r0, r4
 8005828:	f171 0100 	sbcs.w	r1, r1, #0
 800582c:	f082 8158 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005830:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005834:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8005838:	4321      	orrs	r1, r4
 800583a:	f001 8011 	beq.w	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800583e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005842:	f242 0401 	movw	r4, #8193	; 0x2001
 8005846:	42a0      	cmp	r0, r4
 8005848:	f171 0100 	sbcs.w	r1, r1, #0
 800584c:	f082 8148 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005850:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005854:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8005858:	4321      	orrs	r1, r4
 800585a:	f000 871e 	beq.w	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800585e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005862:	f241 0401 	movw	r4, #4097	; 0x1001
 8005866:	42a0      	cmp	r0, r4
 8005868:	f171 0100 	sbcs.w	r1, r1, #0
 800586c:	f082 8138 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005874:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8005878:	4321      	orrs	r1, r4
 800587a:	f000 86a8 	beq.w	80065ce <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800587e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005882:	f640 0401 	movw	r4, #2049	; 0x801
 8005886:	42a0      	cmp	r0, r4
 8005888:	f171 0100 	sbcs.w	r1, r1, #0
 800588c:	f082 8128 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005894:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8005898:	4321      	orrs	r1, r4
 800589a:	f000 8632 	beq.w	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800589e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058a2:	f240 4401 	movw	r4, #1025	; 0x401
 80058a6:	42a0      	cmp	r0, r4
 80058a8:	f171 0100 	sbcs.w	r1, r1, #0
 80058ac:	f082 8118 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058b4:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 80058b8:	4321      	orrs	r1, r4
 80058ba:	f000 85b0 	beq.w	800641e <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80058be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058c2:	f240 2401 	movw	r4, #513	; 0x201
 80058c6:	42a0      	cmp	r0, r4
 80058c8:	f171 0100 	sbcs.w	r1, r1, #0
 80058cc:	f082 8108 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058d4:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 80058d8:	4321      	orrs	r1, r4
 80058da:	f000 8535 	beq.w	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80058de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058e2:	f240 1401 	movw	r4, #257	; 0x101
 80058e6:	42a0      	cmp	r0, r4
 80058e8:	f171 0100 	sbcs.w	r1, r1, #0
 80058ec:	f082 80f8 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058f4:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 80058f8:	4321      	orrs	r1, r4
 80058fa:	f000 84ba 	beq.w	8006272 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80058fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005902:	2881      	cmp	r0, #129	; 0x81
 8005904:	f171 0100 	sbcs.w	r1, r1, #0
 8005908:	f082 80ea 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800590c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005910:	2821      	cmp	r0, #33	; 0x21
 8005912:	f171 0100 	sbcs.w	r1, r1, #0
 8005916:	d26f      	bcs.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800591c:	4301      	orrs	r1, r0
 800591e:	f002 80df 	beq.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005922:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005926:	1e42      	subs	r2, r0, #1
 8005928:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 800592c:	2a20      	cmp	r2, #32
 800592e:	f173 0100 	sbcs.w	r1, r3, #0
 8005932:	f082 80d5 	bcs.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005936:	2a1f      	cmp	r2, #31
 8005938:	f202 80d2 	bhi.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800593c:	a101      	add	r1, pc, #4	; (adr r1, 8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800593e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005942:	bf00      	nop
 8005944:	08005ca5 	.word	0x08005ca5
 8005948:	08005d71 	.word	0x08005d71
 800594c:	08007ae1 	.word	0x08007ae1
 8005950:	08005e31 	.word	0x08005e31
 8005954:	08007ae1 	.word	0x08007ae1
 8005958:	08007ae1 	.word	0x08007ae1
 800595c:	08007ae1 	.word	0x08007ae1
 8005960:	08005f01 	.word	0x08005f01
 8005964:	08007ae1 	.word	0x08007ae1
 8005968:	08007ae1 	.word	0x08007ae1
 800596c:	08007ae1 	.word	0x08007ae1
 8005970:	08007ae1 	.word	0x08007ae1
 8005974:	08007ae1 	.word	0x08007ae1
 8005978:	08007ae1 	.word	0x08007ae1
 800597c:	08007ae1 	.word	0x08007ae1
 8005980:	08005fe3 	.word	0x08005fe3
 8005984:	08007ae1 	.word	0x08007ae1
 8005988:	08007ae1 	.word	0x08007ae1
 800598c:	08007ae1 	.word	0x08007ae1
 8005990:	08007ae1 	.word	0x08007ae1
 8005994:	08007ae1 	.word	0x08007ae1
 8005998:	08007ae1 	.word	0x08007ae1
 800599c:	08007ae1 	.word	0x08007ae1
 80059a0:	08007ae1 	.word	0x08007ae1
 80059a4:	08007ae1 	.word	0x08007ae1
 80059a8:	08007ae1 	.word	0x08007ae1
 80059ac:	08007ae1 	.word	0x08007ae1
 80059b0:	08007ae1 	.word	0x08007ae1
 80059b4:	08007ae1 	.word	0x08007ae1
 80059b8:	08007ae1 	.word	0x08007ae1
 80059bc:	08007ae1 	.word	0x08007ae1
 80059c0:	080060b9 	.word	0x080060b9
 80059c4:	80000001 	.word	0x80000001
 80059c8:	40000001 	.word	0x40000001
 80059cc:	20000001 	.word	0x20000001
 80059d0:	10000001 	.word	0x10000001
 80059d4:	08000001 	.word	0x08000001
 80059d8:	04000001 	.word	0x04000001
 80059dc:	00800001 	.word	0x00800001
 80059e0:	00400001 	.word	0x00400001
 80059e4:	00200001 	.word	0x00200001
 80059e8:	00100001 	.word	0x00100001
 80059ec:	00080001 	.word	0x00080001
 80059f0:	00040001 	.word	0x00040001
 80059f4:	00020001 	.word	0x00020001
 80059f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059fc:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005a00:	430b      	orrs	r3, r1
 8005a02:	f000 83c4 	beq.w	800618e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005a06:	f002 b86b 	b.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005a0a:	4ba1      	ldr	r3, [pc, #644]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a10:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005a14:	633b      	str	r3, [r7, #48]	; 0x30
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a1c:	d036      	beq.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a24:	d86b      	bhi.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a2c:	d02b      	beq.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a34:	d863      	bhi.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a3c:	d01b      	beq.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a44:	d85b      	bhi.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d004      	beq.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a52:	d008      	beq.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8005a54:	e053      	b.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a56:	f107 0320 	add.w	r3, r7, #32
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff f8ba 	bl	8004bd4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a64:	e04e      	b.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a66:	f107 0314 	add.w	r3, r7, #20
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff fa1c 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a74:	e046      	b.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a76:	f107 0308 	add.w	r3, r7, #8
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fb7e 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a84:	e03e      	b.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005a86:	4b83      	ldr	r3, [pc, #524]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005a8a:	e03b      	b.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a8c:	4b80      	ldr	r3, [pc, #512]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a92:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a96:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a98:	4b7d      	ldr	r3, [pc, #500]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d10c      	bne.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d109      	bne.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005aaa:	4b79      	ldr	r3, [pc, #484]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	08db      	lsrs	r3, r3, #3
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	4a78      	ldr	r2, [pc, #480]	; (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aba:	637b      	str	r3, [r7, #52]	; 0x34
 8005abc:	e01e      	b.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005abe:	4b74      	ldr	r3, [pc, #464]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aca:	d106      	bne.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad2:	d102      	bne.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005ad4:	4b71      	ldr	r3, [pc, #452]	; (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad8:	e010      	b.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ada:	4b6d      	ldr	r3, [pc, #436]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ae6:	d106      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aee:	d102      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005af0:	4b6b      	ldr	r3, [pc, #428]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005af2:	637b      	str	r3, [r7, #52]	; 0x34
 8005af4:	e002      	b.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005afa:	e003      	b.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005afc:	e002      	b.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005b02:	bf00      	nop
          }
        }
        break;
 8005b04:	f001 bfef 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005b08:	4b61      	ldr	r3, [pc, #388]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b0e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005b12:	633b      	str	r3, [r7, #48]	; 0x30
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b1a:	d036      	beq.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b22:	d86b      	bhi.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005b2a:	d02b      	beq.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005b32:	d863      	bhi.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b3a:	d01b      	beq.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b42:	d85b      	bhi.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d004      	beq.n	8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b50:	d008      	beq.n	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8005b52:	e053      	b.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b54:	f107 0320 	add.w	r3, r7, #32
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff f83b 	bl	8004bd4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005b62:	e04e      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b64:	f107 0314 	add.w	r3, r7, #20
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff f99d 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005b72:	e046      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b74:	f107 0308 	add.w	r3, r7, #8
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff faff 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005b82:	e03e      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005b84:	4b43      	ldr	r3, [pc, #268]	; (8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005b86:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005b88:	e03b      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005b8a:	4b41      	ldr	r3, [pc, #260]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b90:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005b94:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b96:	4b3e      	ldr	r3, [pc, #248]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d10c      	bne.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d109      	bne.n	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ba8:	4b39      	ldr	r3, [pc, #228]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	08db      	lsrs	r3, r3, #3
 8005bae:	f003 0303 	and.w	r3, r3, #3
 8005bb2:	4a39      	ldr	r2, [pc, #228]	; (8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bba:	e01e      	b.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bbc:	4b34      	ldr	r3, [pc, #208]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bc8:	d106      	bne.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd0:	d102      	bne.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005bd2:	4b32      	ldr	r3, [pc, #200]	; (8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd6:	e010      	b.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005bd8:	4b2d      	ldr	r3, [pc, #180]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005be4:	d106      	bne.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bec:	d102      	bne.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005bee:	4b2c      	ldr	r3, [pc, #176]	; (8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf2:	e002      	b.n	8005bfa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005bf8:	e003      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8005bfa:	e002      	b.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c00:	bf00      	nop
          }
        }
        break;
 8005c02:	f001 bf70 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005c06:	4b22      	ldr	r3, [pc, #136]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c10:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d108      	bne.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c18:	f107 0320 	add.w	r3, r7, #32
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fe ffd9 	bl	8004bd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c26:	f001 bf5e 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	2b40      	cmp	r3, #64	; 0x40
 8005c2e:	d108      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c30:	f107 0314 	add.w	r3, r7, #20
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff f937 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c3e:	f001 bf52 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c46:	f001 bf4e 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8005c4a:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c54:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8005c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d108      	bne.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c5c:	f107 0320 	add.w	r3, r7, #32
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe ffb7 	bl	8004bd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005c6a:	f001 bf3c 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	2b80      	cmp	r3, #128	; 0x80
 8005c72:	d108      	bne.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c74:	f107 0314 	add.w	r3, r7, #20
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff f915 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c82:	f001 bf30 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005c86:	2300      	movs	r3, #0
 8005c88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c8a:	f001 bf2c 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005c8e:	bf00      	nop
 8005c90:	44020c00 	.word	0x44020c00
 8005c94:	00bb8000 	.word	0x00bb8000
 8005c98:	03d09000 	.word	0x03d09000
 8005c9c:	003d0900 	.word	0x003d0900
 8005ca0:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005ca4:	4b9d      	ldr	r3, [pc, #628]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ca6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d104      	bne.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005cb6:	f7fc ffd7 	bl	8002c68 <HAL_RCC_GetPCLK2Freq>
 8005cba:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005cbc:	f001 bf13 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005cc0:	4b96      	ldr	r3, [pc, #600]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ccc:	d10a      	bne.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d107      	bne.n	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cd4:	f107 0314 	add.w	r3, r7, #20
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff f8e5 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ce2:	e043      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005ce4:	4b8d      	ldr	r3, [pc, #564]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cf0:	d10a      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d107      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cf8:	f107 0308 	add.w	r3, r7, #8
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fa3d 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	637b      	str	r3, [r7, #52]	; 0x34
 8005d06:	e031      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005d08:	4b84      	ldr	r3, [pc, #528]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d10c      	bne.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d109      	bne.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d1a:	4b80      	ldr	r3, [pc, #512]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	08db      	lsrs	r3, r3, #3
 8005d20:	f003 0303 	and.w	r3, r3, #3
 8005d24:	4a7e      	ldr	r2, [pc, #504]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005d26:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d2c:	e01e      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005d2e:	4b7b      	ldr	r3, [pc, #492]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d3a:	d105      	bne.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d102      	bne.n	8005d48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8005d42:	4b78      	ldr	r3, [pc, #480]	; (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
 8005d46:	e011      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005d48:	4b74      	ldr	r3, [pc, #464]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d106      	bne.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8005d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d58:	2b05      	cmp	r3, #5
 8005d5a:	d103      	bne.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8005d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d60:	637b      	str	r3, [r7, #52]	; 0x34
 8005d62:	e003      	b.n	8005d6c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d68:	f001 bebd 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005d6c:	f001 bebb 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005d70:	4b6a      	ldr	r3, [pc, #424]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005d76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d7a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d104      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d82:	f7fc ff5b 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8005d86:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005d88:	f001 bead 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005d8c:	4b63      	ldr	r3, [pc, #396]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d98:	d10a      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d107      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005da0:	f107 0314 	add.w	r3, r7, #20
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff f87f 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	637b      	str	r3, [r7, #52]	; 0x34
 8005dae:	e03d      	b.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8005db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db2:	2b10      	cmp	r3, #16
 8005db4:	d108      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005db6:	f107 0308 	add.w	r3, r7, #8
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7ff f9de 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dc4:	f001 be8f 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005dc8:	4b54      	ldr	r3, [pc, #336]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0302 	and.w	r3, r3, #2
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d10c      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	2b18      	cmp	r3, #24
 8005dd8:	d109      	bne.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005dda:	4b50      	ldr	r3, [pc, #320]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	08db      	lsrs	r3, r3, #3
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	4a4e      	ldr	r2, [pc, #312]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005de6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dea:	637b      	str	r3, [r7, #52]	; 0x34
 8005dec:	e01e      	b.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005dee:	4b4b      	ldr	r3, [pc, #300]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dfa:	d105      	bne.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d102      	bne.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8005e02:	4b48      	ldr	r3, [pc, #288]	; (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005e04:	637b      	str	r3, [r7, #52]	; 0x34
 8005e06:	e011      	b.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005e08:	4b44      	ldr	r3, [pc, #272]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d106      	bne.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8005e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e18:	2b28      	cmp	r3, #40	; 0x28
 8005e1a:	d103      	bne.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8005e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e20:	637b      	str	r3, [r7, #52]	; 0x34
 8005e22:	e003      	b.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e28:	f001 be5d 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005e2c:	f001 be5b 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005e30:	4b3a      	ldr	r3, [pc, #232]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005e36:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005e3a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d104      	bne.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005e42:	f7fc fefb 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8005e46:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005e48:	f001 be4d 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005e4c:	4b33      	ldr	r3, [pc, #204]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e58:	d10a      	bne.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5c:	2b40      	cmp	r3, #64	; 0x40
 8005e5e:	d107      	bne.n	8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e60:	f107 0314 	add.w	r3, r7, #20
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff f81f 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e6e:	e045      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8005e70:	4b2a      	ldr	r3, [pc, #168]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e7c:	d10a      	bne.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	2b80      	cmp	r3, #128	; 0x80
 8005e82:	d107      	bne.n	8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e84:	f107 0308 	add.w	r3, r7, #8
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff f977 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	637b      	str	r3, [r7, #52]	; 0x34
 8005e92:	e033      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005e94:	4b21      	ldr	r3, [pc, #132]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d10c      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ea4:	d109      	bne.n	8005eba <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ea6:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	08db      	lsrs	r3, r3, #3
 8005eac:	f003 0303 	and.w	r3, r3, #3
 8005eb0:	4a1b      	ldr	r2, [pc, #108]	; (8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb8:	e020      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005eba:	4b18      	ldr	r3, [pc, #96]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec6:	d106      	bne.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ece:	d102      	bne.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8005ed0:	4b14      	ldr	r3, [pc, #80]	; (8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed4:	e012      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005ed6:	4b11      	ldr	r3, [pc, #68]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005edc:	f003 0302 	and.w	r3, r3, #2
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d107      	bne.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005eea:	d103      	bne.n	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8005eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef2:	e003      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ef8:	f001 bdf5 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005efc:	f001 bdf3 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005f00:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005f02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005f06:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8005f0a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10a      	bne.n	8005f28 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f12:	f7fc fe93 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8005f16:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f18:	f001 bde5 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005f1c:	44020c00 	.word	0x44020c00
 8005f20:	03d09000 	.word	0x03d09000
 8005f24:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005f28:	4ba0      	ldr	r3, [pc, #640]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f34:	d10b      	bne.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f3c:	d107      	bne.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f3e:	f107 0314 	add.w	r3, r7, #20
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe ffb0 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f4c:	e047      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8005f4e:	4b97      	ldr	r3, [pc, #604]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f5a:	d10b      	bne.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f62:	d107      	bne.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f64:	f107 0308 	add.w	r3, r7, #8
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff f907 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	637b      	str	r3, [r7, #52]	; 0x34
 8005f72:	e034      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005f74:	4b8d      	ldr	r3, [pc, #564]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d10d      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f86:	d109      	bne.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f88:	4b88      	ldr	r3, [pc, #544]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	08db      	lsrs	r3, r3, #3
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	4a87      	ldr	r2, [pc, #540]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005f94:	fa22 f303 	lsr.w	r3, r2, r3
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9a:	e020      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005f9c:	4b83      	ldr	r3, [pc, #524]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa8:	d106      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb0:	d102      	bne.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8005fb2:	4b80      	ldr	r3, [pc, #512]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb6:	e012      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005fb8:	4b7c      	ldr	r3, [pc, #496]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d107      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005fcc:	d103      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8005fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd4:	e003      	b.n	8005fde <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fda:	f001 bd84 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005fde:	f001 bd82 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005fe2:	4b72      	ldr	r3, [pc, #456]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005fe4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005fe8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005fec:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d104      	bne.n	8005ffe <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005ff4:	f7fc fe22 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8005ff8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8005ffa:	f001 bd74 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8005ffe:	4b6b      	ldr	r3, [pc, #428]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800600a:	d10b      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006012:	d107      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006014:	f107 0314 	add.w	r3, r7, #20
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe ff45 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	637b      	str	r3, [r7, #52]	; 0x34
 8006022:	e047      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8006024:	4b61      	ldr	r3, [pc, #388]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800602c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006030:	d10b      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006038:	d107      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800603a:	f107 0308 	add.w	r3, r7, #8
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff f89c 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	637b      	str	r3, [r7, #52]	; 0x34
 8006048:	e034      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800604a:	4b58      	ldr	r3, [pc, #352]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b02      	cmp	r3, #2
 8006054:	d10d      	bne.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800605c:	d109      	bne.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800605e:	4b53      	ldr	r3, [pc, #332]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	08db      	lsrs	r3, r3, #3
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	4a51      	ldr	r2, [pc, #324]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800606a:	fa22 f303 	lsr.w	r3, r2, r3
 800606e:	637b      	str	r3, [r7, #52]	; 0x34
 8006070:	e020      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8006072:	4b4e      	ldr	r3, [pc, #312]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800607a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607e:	d106      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006086:	d102      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8006088:	4b4a      	ldr	r3, [pc, #296]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
 800608c:	e012      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800608e:	4b47      	ldr	r3, [pc, #284]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006090:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b02      	cmp	r3, #2
 800609a:	d107      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80060a2:	d103      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80060a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060a8:	637b      	str	r3, [r7, #52]	; 0x34
 80060aa:	e003      	b.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060b0:	f001 bd19 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80060b4:	f001 bd17 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80060b8:	4b3c      	ldr	r3, [pc, #240]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80060ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80060be:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80060c2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80060ca:	f7fc fdb7 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 80060ce:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80060d0:	f001 bd09 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80060d4:	4b35      	ldr	r3, [pc, #212]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060e0:	d10b      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e8:	d107      	bne.n	80060fa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ea:	f107 0314 	add.w	r3, r7, #20
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe feda 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	637b      	str	r3, [r7, #52]	; 0x34
 80060f8:	e047      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80060fa:	4b2c      	ldr	r3, [pc, #176]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006102:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006106:	d10b      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800610e:	d107      	bne.n	8006120 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006110:	f107 0308 	add.w	r3, r7, #8
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff f831 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
 800611e:	e034      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006120:	4b22      	ldr	r3, [pc, #136]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b02      	cmp	r3, #2
 800612a:	d10d      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006132:	d109      	bne.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006134:	4b1d      	ldr	r3, [pc, #116]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	08db      	lsrs	r3, r3, #3
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	4a1c      	ldr	r2, [pc, #112]	; (80061b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006140:	fa22 f303 	lsr.w	r3, r2, r3
 8006144:	637b      	str	r3, [r7, #52]	; 0x34
 8006146:	e020      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006148:	4b18      	ldr	r3, [pc, #96]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006154:	d106      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800615c:	d102      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800615e:	4b15      	ldr	r3, [pc, #84]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
 8006162:	e012      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006164:	4b11      	ldr	r3, [pc, #68]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b02      	cmp	r3, #2
 8006170:	d107      	bne.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006178:	d103      	bne.n	8006182 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800617a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800617e:	637b      	str	r3, [r7, #52]	; 0x34
 8006180:	e003      	b.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006186:	f001 bcae 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800618a:	f001 bcac 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800618e:	4b07      	ldr	r3, [pc, #28]	; (80061ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006190:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006194:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8006198:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10b      	bne.n	80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80061a0:	f7fc fd4c 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 80061a4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80061a6:	f001 bc9e 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80061aa:	bf00      	nop
 80061ac:	44020c00 	.word	0x44020c00
 80061b0:	03d09000 	.word	0x03d09000
 80061b4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80061b8:	4ba0      	ldr	r3, [pc, #640]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061c4:	d10b      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061cc:	d107      	bne.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ce:	f107 0314 	add.w	r3, r7, #20
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fe68 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	637b      	str	r3, [r7, #52]	; 0x34
 80061dc:	e047      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80061de:	4b97      	ldr	r3, [pc, #604]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061ea:	d10b      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80061f2:	d107      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061f4:	f107 0308 	add.w	r3, r7, #8
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe ffbf 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	637b      	str	r3, [r7, #52]	; 0x34
 8006202:	e034      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8006204:	4b8d      	ldr	r3, [pc, #564]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b02      	cmp	r3, #2
 800620e:	d10d      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006216:	d109      	bne.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006218:	4b88      	ldr	r3, [pc, #544]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	08db      	lsrs	r3, r3, #3
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	4a87      	ldr	r2, [pc, #540]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006224:	fa22 f303 	lsr.w	r3, r2, r3
 8006228:	637b      	str	r3, [r7, #52]	; 0x34
 800622a:	e020      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800622c:	4b83      	ldr	r3, [pc, #524]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006238:	d106      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800623a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006240:	d102      	bne.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8006242:	4b80      	ldr	r3, [pc, #512]	; (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006244:	637b      	str	r3, [r7, #52]	; 0x34
 8006246:	e012      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8006248:	4b7c      	ldr	r3, [pc, #496]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800624a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b02      	cmp	r3, #2
 8006254:	d107      	bne.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800625c:	d103      	bne.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800625e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006262:	637b      	str	r3, [r7, #52]	; 0x34
 8006264:	e003      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800626a:	f001 bc3c 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800626e:	f001 bc3a 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8006272:	4b72      	ldr	r3, [pc, #456]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006274:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006278:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800627c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	2b00      	cmp	r3, #0
 8006282:	d104      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006284:	f7fc fcda 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8006288:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800628a:	f001 bc2c 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800628e:	4b6b      	ldr	r3, [pc, #428]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800629a:	d10b      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062a2:	d107      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062a4:	f107 0314 	add.w	r3, r7, #20
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fe fdfd 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
 80062b2:	e047      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80062b4:	4b61      	ldr	r3, [pc, #388]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062c0:	d10b      	bne.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062c8:	d107      	bne.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062ca:	f107 0308 	add.w	r3, r7, #8
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fe ff54 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	637b      	str	r3, [r7, #52]	; 0x34
 80062d8:	e034      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80062da:	4b58      	ldr	r3, [pc, #352]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d10d      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80062ec:	d109      	bne.n	8006302 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062ee:	4b53      	ldr	r3, [pc, #332]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	08db      	lsrs	r3, r3, #3
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	4a51      	ldr	r2, [pc, #324]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80062fa:	fa22 f303 	lsr.w	r3, r2, r3
 80062fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006300:	e020      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8006302:	4b4e      	ldr	r3, [pc, #312]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800630a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800630e:	d106      	bne.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8006310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006312:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006316:	d102      	bne.n	800631e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8006318:	4b4a      	ldr	r3, [pc, #296]	; (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800631a:	637b      	str	r3, [r7, #52]	; 0x34
 800631c:	e012      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800631e:	4b47      	ldr	r3, [pc, #284]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b02      	cmp	r3, #2
 800632a:	d107      	bne.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006332:	d103      	bne.n	800633c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8006334:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006338:	637b      	str	r3, [r7, #52]	; 0x34
 800633a:	e003      	b.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006340:	f001 bbd1 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006344:	f001 bbcf 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8006348:	4b3c      	ldr	r3, [pc, #240]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800634a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800634e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006352:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	2b00      	cmp	r3, #0
 8006358:	d104      	bne.n	8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800635a:	f7fc fc6f 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 800635e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8006360:	f001 bbc1 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8006364:	4b35      	ldr	r3, [pc, #212]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800636c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006370:	d10b      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006378:	d107      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800637a:	f107 0314 	add.w	r3, r7, #20
 800637e:	4618      	mov	r0, r3
 8006380:	f7fe fd92 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	637b      	str	r3, [r7, #52]	; 0x34
 8006388:	e047      	b.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800638a:	4b2c      	ldr	r3, [pc, #176]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006396:	d10b      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800639e:	d107      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063a0:	f107 0308 	add.w	r3, r7, #8
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fe fee9 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	637b      	str	r3, [r7, #52]	; 0x34
 80063ae:	e034      	b.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80063b0:	4b22      	ldr	r3, [pc, #136]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0302 	and.w	r3, r3, #2
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d10d      	bne.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063c2:	d109      	bne.n	80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063c4:	4b1d      	ldr	r3, [pc, #116]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	08db      	lsrs	r3, r3, #3
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	4a1c      	ldr	r2, [pc, #112]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80063d0:	fa22 f303 	lsr.w	r3, r2, r3
 80063d4:	637b      	str	r3, [r7, #52]	; 0x34
 80063d6:	e020      	b.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80063d8:	4b18      	ldr	r3, [pc, #96]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e4:	d106      	bne.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80063e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063ec:	d102      	bne.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80063ee:	4b15      	ldr	r3, [pc, #84]	; (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80063f0:	637b      	str	r3, [r7, #52]	; 0x34
 80063f2:	e012      	b.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80063f4:	4b11      	ldr	r3, [pc, #68]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80063f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	2b02      	cmp	r3, #2
 8006400:	d107      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006408:	d103      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800640a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640e:	637b      	str	r3, [r7, #52]	; 0x34
 8006410:	e003      	b.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006416:	f001 bb66 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800641a:	f001 bb64 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800641e:	4b07      	ldr	r3, [pc, #28]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006420:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006424:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8006428:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10b      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006430:	f7fc fc04 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8006434:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8006436:	f001 bb56 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800643a:	bf00      	nop
 800643c:	44020c00 	.word	0x44020c00
 8006440:	03d09000 	.word	0x03d09000
 8006444:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8006448:	4ba1      	ldr	r3, [pc, #644]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006450:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006454:	d10b      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800645c:	d107      	bne.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800645e:	f107 0314 	add.w	r3, r7, #20
 8006462:	4618      	mov	r0, r3
 8006464:	f7fe fd20 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	637b      	str	r3, [r7, #52]	; 0x34
 800646c:	e047      	b.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800646e:	4b98      	ldr	r3, [pc, #608]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800647a:	d10b      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006482:	d107      	bne.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006484:	f107 0308 	add.w	r3, r7, #8
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe fe77 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
 8006492:	e034      	b.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8006494:	4b8e      	ldr	r3, [pc, #568]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b02      	cmp	r3, #2
 800649e:	d10d      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80064a6:	d109      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064a8:	4b89      	ldr	r3, [pc, #548]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	08db      	lsrs	r3, r3, #3
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	4a88      	ldr	r2, [pc, #544]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
 80064ba:	e020      	b.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80064bc:	4b84      	ldr	r3, [pc, #528]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c8:	d106      	bne.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064d0:	d102      	bne.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80064d2:	4b81      	ldr	r3, [pc, #516]	; (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80064d4:	637b      	str	r3, [r7, #52]	; 0x34
 80064d6:	e012      	b.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80064d8:	4b7d      	ldr	r3, [pc, #500]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80064da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d107      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80064ec:	d103      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80064ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f2:	637b      	str	r3, [r7, #52]	; 0x34
 80064f4:	e003      	b.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064fa:	f001 baf4 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80064fe:	f001 baf2 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8006502:	4b73      	ldr	r3, [pc, #460]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006504:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	2b00      	cmp	r3, #0
 8006512:	d104      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006514:	f7fc fb92 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8006518:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800651a:	f001 bae4 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800651e:	4b6c      	ldr	r3, [pc, #432]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800652a:	d10a      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	2b01      	cmp	r3, #1
 8006530:	d107      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006532:	f107 0314 	add.w	r3, r7, #20
 8006536:	4618      	mov	r0, r3
 8006538:	f7fe fcb6 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	637b      	str	r3, [r7, #52]	; 0x34
 8006540:	e043      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8006542:	4b63      	ldr	r3, [pc, #396]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800654a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800654e:	d10a      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	2b02      	cmp	r3, #2
 8006554:	d107      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006556:	f107 0308 	add.w	r3, r7, #8
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fe0e 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	637b      	str	r3, [r7, #52]	; 0x34
 8006564:	e031      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006566:	4b5a      	ldr	r3, [pc, #360]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d10c      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	2b03      	cmp	r3, #3
 8006576:	d109      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006578:	4b55      	ldr	r3, [pc, #340]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	08db      	lsrs	r3, r3, #3
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	4a54      	ldr	r2, [pc, #336]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006584:	fa22 f303 	lsr.w	r3, r2, r3
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
 800658a:	e01e      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800658c:	4b50      	ldr	r3, [pc, #320]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006598:	d105      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	2b04      	cmp	r3, #4
 800659e:	d102      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80065a0:	4b4d      	ldr	r3, [pc, #308]	; (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80065a2:	637b      	str	r3, [r7, #52]	; 0x34
 80065a4:	e011      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80065a6:	4b4a      	ldr	r3, [pc, #296]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80065a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d106      	bne.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	2b05      	cmp	r3, #5
 80065b8:	d103      	bne.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80065ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065be:	637b      	str	r3, [r7, #52]	; 0x34
 80065c0:	e003      	b.n	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065c6:	f001 ba8e 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80065ca:	f001 ba8c 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80065ce:	4b40      	ldr	r3, [pc, #256]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80065d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80065d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065d8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d104      	bne.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065e0:	f7fc fb2c 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 80065e4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80065e6:	f001 ba7e 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80065ea:	4b39      	ldr	r3, [pc, #228]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065f6:	d10a      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80065f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fa:	2b10      	cmp	r3, #16
 80065fc:	d107      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065fe:	f107 0314 	add.w	r3, r7, #20
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fc50 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	637b      	str	r3, [r7, #52]	; 0x34
 800660c:	e043      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800660e:	4b30      	ldr	r3, [pc, #192]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800661a:	d10a      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	2b20      	cmp	r3, #32
 8006620:	d107      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006622:	f107 0308 	add.w	r3, r7, #8
 8006626:	4618      	mov	r0, r3
 8006628:	f7fe fda8 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	637b      	str	r3, [r7, #52]	; 0x34
 8006630:	e031      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8006632:	4b27      	ldr	r3, [pc, #156]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b02      	cmp	r3, #2
 800663c:	d10c      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	2b30      	cmp	r3, #48	; 0x30
 8006642:	d109      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006644:	4b22      	ldr	r3, [pc, #136]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	08db      	lsrs	r3, r3, #3
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	4a21      	ldr	r2, [pc, #132]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006650:	fa22 f303 	lsr.w	r3, r2, r3
 8006654:	637b      	str	r3, [r7, #52]	; 0x34
 8006656:	e01e      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006658:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006664:	d105      	bne.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	2b40      	cmp	r3, #64	; 0x40
 800666a:	d102      	bne.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800666c:	4b1a      	ldr	r3, [pc, #104]	; (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800666e:	637b      	str	r3, [r7, #52]	; 0x34
 8006670:	e011      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006672:	4b17      	ldr	r3, [pc, #92]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b02      	cmp	r3, #2
 800667e:	d106      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	2b50      	cmp	r3, #80	; 0x50
 8006684:	d103      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8006686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800668a:	637b      	str	r3, [r7, #52]	; 0x34
 800668c:	e003      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006692:	f001 ba28 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006696:	f001 ba26 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800669a:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800669c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066a0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80066a4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d104      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80066ac:	f7fc faf2 	bl	8002c94 <HAL_RCC_GetPCLK3Freq>
 80066b0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80066b2:	f001 ba18 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066bc:	d10e      	bne.n	80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066be:	f107 0314 	add.w	r3, r7, #20
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fe fbf0 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066cc:	f001 ba0b 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066d0:	44020c00 	.word	0x44020c00
 80066d4:	03d09000 	.word	0x03d09000
 80066d8:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066e2:	d108      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066e4:	f107 0308 	add.w	r3, r7, #8
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fe fd47 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066f2:	f001 b9f8 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80066f6:	4ba4      	ldr	r3, [pc, #656]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d10d      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006708:	d109      	bne.n	800671e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800670a:	4b9f      	ldr	r3, [pc, #636]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	08db      	lsrs	r3, r3, #3
 8006710:	f003 0303 	and.w	r3, r3, #3
 8006714:	4a9d      	ldr	r2, [pc, #628]	; (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006716:	fa22 f303 	lsr.w	r3, r2, r3
 800671a:	637b      	str	r3, [r7, #52]	; 0x34
 800671c:	e020      	b.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800671e:	4b9a      	ldr	r3, [pc, #616]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800672a:	d106      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006732:	d102      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8006734:	4b96      	ldr	r3, [pc, #600]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006736:	637b      	str	r3, [r7, #52]	; 0x34
 8006738:	e012      	b.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800673a:	4b93      	ldr	r3, [pc, #588]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800673c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b02      	cmp	r3, #2
 8006746:	d107      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800674e:	d103      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8006750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006754:	637b      	str	r3, [r7, #52]	; 0x34
 8006756:	e003      	b.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800675c:	f001 b9c3 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006760:	f001 b9c1 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006764:	4b88      	ldr	r3, [pc, #544]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006772:	2b00      	cmp	r3, #0
 8006774:	d104      	bne.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006776:	f7fc fa45 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 800677a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800677c:	f001 b9b3 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	2b01      	cmp	r3, #1
 8006784:	d104      	bne.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006786:	f7fc f911 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 800678a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800678c:	f001 b9ab 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	2b02      	cmp	r3, #2
 8006794:	d108      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006796:	f107 0314 	add.w	r3, r7, #20
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fb84 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067a4:	f001 b99f 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80067a8:	4b77      	ldr	r3, [pc, #476]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b4:	d105      	bne.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d102      	bne.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80067bc:	4b75      	ldr	r3, [pc, #468]	; (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80067be:	637b      	str	r3, [r7, #52]	; 0x34
 80067c0:	e023      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80067c2:	4b71      	ldr	r3, [pc, #452]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d10c      	bne.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d109      	bne.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067d4:	4b6c      	ldr	r3, [pc, #432]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	08db      	lsrs	r3, r3, #3
 80067da:	f003 0303 	and.w	r3, r3, #3
 80067de:	4a6b      	ldr	r2, [pc, #428]	; (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80067e0:	fa22 f303 	lsr.w	r3, r2, r3
 80067e4:	637b      	str	r3, [r7, #52]	; 0x34
 80067e6:	e010      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80067e8:	4b67      	ldr	r3, [pc, #412]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f4:	d105      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	2b05      	cmp	r3, #5
 80067fa:	d102      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 80067fc:	4b64      	ldr	r3, [pc, #400]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80067fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006800:	e003      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006806:	f001 b96e 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800680a:	f001 b96c 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800680e:	4b5e      	ldr	r3, [pc, #376]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006810:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006814:	f003 0308 	and.w	r3, r3, #8
 8006818:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800681a:	4b5b      	ldr	r3, [pc, #364]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800681c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b02      	cmp	r3, #2
 8006826:	d106      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	2b00      	cmp	r3, #0
 800682c:	d103      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800682e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006832:	637b      	str	r3, [r7, #52]	; 0x34
 8006834:	e012      	b.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006836:	4b54      	ldr	r3, [pc, #336]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800683c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006844:	d106      	bne.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	2b08      	cmp	r3, #8
 800684a:	d103      	bne.n	8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800684c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006850:	637b      	str	r3, [r7, #52]	; 0x34
 8006852:	e003      	b.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006858:	f001 b945 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800685c:	f001 b943 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006860:	4b49      	ldr	r3, [pc, #292]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006862:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006866:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800686a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800686c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686e:	2b00      	cmp	r3, #0
 8006870:	d104      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006872:	f7fc f9e3 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8006876:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006878:	f001 b935 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800687c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006882:	d108      	bne.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006884:	f107 0308 	add.w	r3, r7, #8
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe fc77 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006892:	f001 b928 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006896:	4b3c      	ldr	r3, [pc, #240]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d10d      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80068a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068a8:	d109      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068aa:	4b37      	ldr	r3, [pc, #220]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	08db      	lsrs	r3, r3, #3
 80068b0:	f003 0303 	and.w	r3, r3, #3
 80068b4:	4a35      	ldr	r2, [pc, #212]	; (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80068b6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ba:	637b      	str	r3, [r7, #52]	; 0x34
 80068bc:	e011      	b.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80068be:	4b32      	ldr	r3, [pc, #200]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ca:	d106      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068d2:	d102      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80068d4:	4b2e      	ldr	r3, [pc, #184]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80068d6:	637b      	str	r3, [r7, #52]	; 0x34
 80068d8:	e003      	b.n	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 80068da:	2300      	movs	r3, #0
 80068dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068de:	f001 b902 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80068e2:	f001 b900 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80068e6:	4b28      	ldr	r3, [pc, #160]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80068e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80068ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80068f0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d104      	bne.n	8006902 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068f8:	f7fc f9a0 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 80068fc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80068fe:	f001 b8f2 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006908:	d108      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800690a:	f107 0308 	add.w	r3, r7, #8
 800690e:	4618      	mov	r0, r3
 8006910:	f7fe fc34 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006918:	f001 b8e5 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800691c:	4b1a      	ldr	r3, [pc, #104]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b02      	cmp	r3, #2
 8006926:	d10d      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800692e:	d109      	bne.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006930:	4b15      	ldr	r3, [pc, #84]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	08db      	lsrs	r3, r3, #3
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	4a14      	ldr	r2, [pc, #80]	; (800698c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
 8006940:	637b      	str	r3, [r7, #52]	; 0x34
 8006942:	e011      	b.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006944:	4b10      	ldr	r3, [pc, #64]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800694c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006950:	d106      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006958:	d102      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800695a:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800695c:	637b      	str	r3, [r7, #52]	; 0x34
 800695e:	e003      	b.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006964:	f001 b8bf 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006968:	f001 b8bd 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800696c:	4b06      	ldr	r3, [pc, #24]	; (8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800696e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006972:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006976:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10c      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800697e:	f7fc f989 	bl	8002c94 <HAL_RCC_GetPCLK3Freq>
 8006982:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006984:	f001 b8af 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006988:	44020c00 	.word	0x44020c00
 800698c:	03d09000 	.word	0x03d09000
 8006990:	003d0900 	.word	0x003d0900
 8006994:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699e:	d108      	bne.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069a0:	f107 0308 	add.w	r3, r7, #8
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fe fbe9 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069ae:	f001 b89a 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80069b2:	4b9f      	ldr	r3, [pc, #636]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d10d      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069c4:	d109      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069c6:	4b9a      	ldr	r3, [pc, #616]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	08db      	lsrs	r3, r3, #3
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	4a98      	ldr	r2, [pc, #608]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80069d2:	fa22 f303 	lsr.w	r3, r2, r3
 80069d6:	637b      	str	r3, [r7, #52]	; 0x34
 80069d8:	e011      	b.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80069da:	4b95      	ldr	r3, [pc, #596]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e6:	d106      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80069ee:	d102      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80069f0:	4b91      	ldr	r3, [pc, #580]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34
 80069f4:	e003      	b.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069fa:	f001 b874 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069fe:	f001 b872 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006a02:	4b8b      	ldr	r3, [pc, #556]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a08:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006a0c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d104      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006a14:	f7fc f93e 	bl	8002c94 <HAL_RCC_GetPCLK3Freq>
 8006a18:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a1a:	f001 b864 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a24:	d108      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a26:	f107 0308 	add.w	r3, r7, #8
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7fe fba6 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a34:	f001 b857 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006a38:	4b7d      	ldr	r3, [pc, #500]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d10d      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006a4a:	d109      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a4c:	4b78      	ldr	r3, [pc, #480]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	08db      	lsrs	r3, r3, #3
 8006a52:	f003 0303 	and.w	r3, r3, #3
 8006a56:	4a77      	ldr	r2, [pc, #476]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006a58:	fa22 f303 	lsr.w	r3, r2, r3
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5e:	e011      	b.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006a60:	4b73      	ldr	r3, [pc, #460]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a6c:	d106      	bne.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a74:	d102      	bne.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006a76:	4b70      	ldr	r3, [pc, #448]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006a78:	637b      	str	r3, [r7, #52]	; 0x34
 8006a7a:	e003      	b.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a80:	f001 b831 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a84:	f001 b82f 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006a88:	4b69      	ldr	r3, [pc, #420]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006a8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a8e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006a92:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d104      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a9a:	f7fc f8cf 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8006a9e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006aa0:	f001 b821 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006aaa:	d108      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aac:	f107 0308 	add.w	r3, r7, #8
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe fb63 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006aba:	f001 b814 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006abe:	4b5c      	ldr	r3, [pc, #368]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d10e      	bne.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ad0:	d10a      	bne.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ad2:	4b57      	ldr	r3, [pc, #348]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	08db      	lsrs	r3, r3, #3
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	4a55      	ldr	r2, [pc, #340]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006ade:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ae4:	f000 bfff 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006aec:	f000 bffb 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006af0:	4b4f      	ldr	r3, [pc, #316]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006af2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006afa:	633b      	str	r3, [r7, #48]	; 0x30
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006b02:	d056      	beq.n	8006bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006b0a:	f200 808b 	bhi.w	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b14:	d03e      	beq.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b1c:	f200 8082 	bhi.w	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b26:	d027      	beq.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b2e:	d879      	bhi.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b36:	d017      	beq.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b3e:	d871      	bhi.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d004      	beq.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b4c:	d004      	beq.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8006b4e:	e069      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006b50:	f7fc f8a0 	bl	8002c94 <HAL_RCC_GetPCLK3Freq>
 8006b54:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006b56:	e068      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b58:	f107 0314 	add.w	r3, r7, #20
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe f9a3 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b66:	e060      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b68:	f107 0308 	add.w	r3, r7, #8
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fe fb05 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b76:	e058      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b78:	4b2d      	ldr	r3, [pc, #180]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006b7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d103      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8006b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b8a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006b8c:	e04d      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b92:	e04a      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006b94:	4b26      	ldr	r3, [pc, #152]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006b96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ba2:	d103      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8006ba4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006baa:	e03e      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006bac:	2300      	movs	r3, #0
 8006bae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006bb0:	e03b      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bb2:	4b1f      	ldr	r3, [pc, #124]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bb8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bbe:	4b1c      	ldr	r3, [pc, #112]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d10c      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d109      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bd0:	4b17      	ldr	r3, [pc, #92]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	08db      	lsrs	r3, r3, #3
 8006bd6:	f003 0303 	and.w	r3, r3, #3
 8006bda:	4a16      	ldr	r2, [pc, #88]	; (8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006be0:	637b      	str	r3, [r7, #52]	; 0x34
 8006be2:	e01e      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006be4:	4b12      	ldr	r3, [pc, #72]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf0:	d106      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8006bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf8:	d102      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006bfa:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bfe:	e010      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c00:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c0c:	d106      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8006c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c14:	d102      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006c16:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8006c18:	637b      	str	r3, [r7, #52]	; 0x34
 8006c1a:	e002      	b.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006c20:	e003      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8006c22:	e002      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c28:	bf00      	nop
          }
        }
        break;
 8006c2a:	f000 bf5c 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c2e:	bf00      	nop
 8006c30:	44020c00 	.word	0x44020c00
 8006c34:	03d09000 	.word	0x03d09000
 8006c38:	003d0900 	.word	0x003d0900
 8006c3c:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006c40:	4b9e      	ldr	r3, [pc, #632]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006c42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006c46:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006c4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006c52:	d056      	beq.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8006c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c56:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006c5a:	f200 808b 	bhi.w	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c64:	d03e      	beq.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c6c:	f200 8082 	bhi.w	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c76:	d027      	beq.n	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c7e:	d879      	bhi.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c86:	d017      	beq.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c8e:	d871      	bhi.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d004      	beq.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c9c:	d004      	beq.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8006c9e:	e069      	b.n	8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006ca0:	f7fb ffcc 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8006ca4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006ca6:	e068      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ca8:	f107 0314 	add.w	r3, r7, #20
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fe f8fb 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006cb6:	e060      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cb8:	f107 0308 	add.w	r3, r7, #8
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fe fa5d 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006cc6:	e058      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006cc8:	4b7c      	ldr	r3, [pc, #496]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006cca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d103      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8006cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cda:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006cdc:	e04d      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ce2:	e04a      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006ce4:	4b75      	ldr	r3, [pc, #468]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cf2:	d103      	bne.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8006cf4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006cf8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006cfa:	e03e      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d00:	e03b      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d02:	4b6e      	ldr	r3, [pc, #440]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006d04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d08:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006d0c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d0e:	4b6b      	ldr	r3, [pc, #428]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d10c      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8006d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d109      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d20:	4b66      	ldr	r3, [pc, #408]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	08db      	lsrs	r3, r3, #3
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	4a65      	ldr	r2, [pc, #404]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d30:	637b      	str	r3, [r7, #52]	; 0x34
 8006d32:	e01e      	b.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d34:	4b61      	ldr	r3, [pc, #388]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d40:	d106      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8006d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d48:	d102      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006d4a:	4b5e      	ldr	r3, [pc, #376]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8006d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d4e:	e010      	b.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d50:	4b5a      	ldr	r3, [pc, #360]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d5c:	d106      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8006d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d64:	d102      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006d66:	4b58      	ldr	r3, [pc, #352]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006d68:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6a:	e002      	b.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006d70:	e003      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8006d72:	e002      	b.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d78:	bf00      	nop
          }
        }
        break;
 8006d7a:	f000 beb4 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8006d7e:	4b4f      	ldr	r3, [pc, #316]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006d80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006d84:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006d88:	633b      	str	r3, [r7, #48]	; 0x30
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d90:	d056      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d98:	f200 808b 	bhi.w	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006da2:	d03e      	beq.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006daa:	f200 8082 	bhi.w	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006db4:	d027      	beq.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006dbc:	d879      	bhi.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dc4:	d017      	beq.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dcc:	d871      	bhi.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d004      	beq.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dda:	d004      	beq.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8006ddc:	e069      	b.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006dde:	f7fb ff59 	bl	8002c94 <HAL_RCC_GetPCLK3Freq>
 8006de2:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006de4:	e068      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006de6:	f107 0314 	add.w	r3, r7, #20
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fe f85c 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006df4:	e060      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006df6:	f107 0308 	add.w	r3, r7, #8
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7fe f9be 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e04:	e058      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e06:	4b2d      	ldr	r3, [pc, #180]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e0c:	f003 0302 	and.w	r3, r3, #2
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d103      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8006e14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006e1a:	e04d      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e20:	e04a      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006e22:	4b26      	ldr	r3, [pc, #152]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e30:	d103      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8006e32:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006e38:	e03e      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e3e:	e03b      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e40:	4b1e      	ldr	r3, [pc, #120]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e46:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e4a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e4c:	4b1b      	ldr	r3, [pc, #108]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d10c      	bne.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8006e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e5e:	4b17      	ldr	r3, [pc, #92]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	08db      	lsrs	r3, r3, #3
 8006e64:	f003 0303 	and.w	r3, r3, #3
 8006e68:	4a15      	ldr	r2, [pc, #84]	; (8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e70:	e01e      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e72:	4b12      	ldr	r3, [pc, #72]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e7e:	d106      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8006e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e86:	d102      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006e88:	4b0e      	ldr	r3, [pc, #56]	; (8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8006e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e8c:	e010      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e8e:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e9a:	d106      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ea2:	d102      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006ea4:	4b08      	ldr	r3, [pc, #32]	; (8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea8:	e002      	b.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006eae:	e003      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8006eb0:	e002      	b.n	8006eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006eb6:	bf00      	nop
          }
        }
        break;
 8006eb8:	f000 be15 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ebc:	44020c00 	.word	0x44020c00
 8006ec0:	03d09000 	.word	0x03d09000
 8006ec4:	003d0900 	.word	0x003d0900
 8006ec8:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8006ecc:	4b9e      	ldr	r3, [pc, #632]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006ece:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006ed2:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8006ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006ede:	d056      	beq.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006ee6:	f200 808b 	bhi.w	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ef0:	d03e      	beq.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ef8:	f200 8082 	bhi.w	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f02:	d027      	beq.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f0a:	d879      	bhi.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f12:	d017      	beq.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8006f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f1a:	d871      	bhi.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d004      	beq.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f28:	d004      	beq.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8006f2a:	e069      	b.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006f2c:	f7fb feb2 	bl	8002c94 <HAL_RCC_GetPCLK3Freq>
 8006f30:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006f32:	e068      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f34:	f107 0314 	add.w	r3, r7, #20
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fd ffb5 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f42:	e060      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f44:	f107 0308 	add.w	r3, r7, #8
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7fe f917 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f52:	e058      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f54:	4b7c      	ldr	r3, [pc, #496]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d103      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8006f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f66:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f68:	e04d      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f6e:	e04a      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006f70:	4b75      	ldr	r3, [pc, #468]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f7e:	d103      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8006f80:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006f84:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006f86:	e03e      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f8c:	e03b      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f8e:	4b6e      	ldr	r3, [pc, #440]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f94:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006f98:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f9a:	4b6b      	ldr	r3, [pc, #428]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d10c      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d109      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006fac:	4b66      	ldr	r3, [pc, #408]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	08db      	lsrs	r3, r3, #3
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	4a65      	ldr	r2, [pc, #404]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006fbe:	e01e      	b.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fc0:	4b61      	ldr	r3, [pc, #388]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fcc:	d106      	bne.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd4:	d102      	bne.n	8006fdc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006fd6:	4b5e      	ldr	r3, [pc, #376]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fda:	e010      	b.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fdc:	4b5a      	ldr	r3, [pc, #360]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fe8:	d106      	bne.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ff0:	d102      	bne.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006ff2:	4b58      	ldr	r3, [pc, #352]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff6:	e002      	b.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006ffc:	e003      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8006ffe:	e002      	b.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007004:	bf00      	nop
          }
        }
        break;
 8007006:	f000 bd6e 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800700a:	4b4f      	ldr	r3, [pc, #316]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800700c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007010:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007014:	633b      	str	r3, [r7, #48]	; 0x30
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800701c:	d056      	beq.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007024:	f200 808b 	bhi.w	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800702e:	d03e      	beq.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007036:	f200 8082 	bhi.w	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007040:	d027      	beq.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8007042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007044:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007048:	d879      	bhi.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007050:	d017      	beq.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007058:	d871      	bhi.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	2b00      	cmp	r3, #0
 800705e:	d004      	beq.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007066:	d004      	beq.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8007068:	e069      	b.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800706a:	f7fb fe13 	bl	8002c94 <HAL_RCC_GetPCLK3Freq>
 800706e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007070:	e068      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007072:	f107 0314 	add.w	r3, r7, #20
 8007076:	4618      	mov	r0, r3
 8007078:	f7fd ff16 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007080:	e060      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007082:	f107 0308 	add.w	r3, r7, #8
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe f878 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007090:	e058      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007092:	4b2d      	ldr	r3, [pc, #180]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007094:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b02      	cmp	r3, #2
 800709e:	d103      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80070a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070a4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070a6:	e04d      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070ac:	e04a      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80070ae:	4b26      	ldr	r3, [pc, #152]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80070b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070bc:	d103      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 80070be:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80070c2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80070c4:	e03e      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070ca:	e03b      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070cc:	4b1e      	ldr	r3, [pc, #120]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80070ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070d2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80070d6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070d8:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d10c      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d109      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070ea:	4b17      	ldr	r3, [pc, #92]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	08db      	lsrs	r3, r3, #3
 80070f0:	f003 0303 	and.w	r3, r3, #3
 80070f4:	4a15      	ldr	r2, [pc, #84]	; (800714c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80070f6:	fa22 f303 	lsr.w	r3, r2, r3
 80070fa:	637b      	str	r3, [r7, #52]	; 0x34
 80070fc:	e01e      	b.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070fe:	4b12      	ldr	r3, [pc, #72]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800710a:	d106      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800710c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800710e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007112:	d102      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007114:	4b0e      	ldr	r3, [pc, #56]	; (8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007116:	637b      	str	r3, [r7, #52]	; 0x34
 8007118:	e010      	b.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800711a:	4b0b      	ldr	r3, [pc, #44]	; (8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007126:	d106      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8007128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800712e:	d102      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007130:	4b08      	ldr	r3, [pc, #32]	; (8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8007132:	637b      	str	r3, [r7, #52]	; 0x34
 8007134:	e002      	b.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800713a:	e003      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800713c:	e002      	b.n	8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800713e:	2300      	movs	r3, #0
 8007140:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007142:	bf00      	nop
          }
        }
        break;
 8007144:	f000 bccf 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007148:	44020c00 	.word	0x44020c00
 800714c:	03d09000 	.word	0x03d09000
 8007150:	003d0900 	.word	0x003d0900
 8007154:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007158:	4b9e      	ldr	r3, [pc, #632]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800715a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800715e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007162:	633b      	str	r3, [r7, #48]	; 0x30
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800716a:	d056      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800716c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007172:	f200 808b 	bhi.w	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800717c:	d03e      	beq.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007184:	f200 8082 	bhi.w	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800718e:	d027      	beq.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007196:	d879      	bhi.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800719e:	d017      	beq.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a6:	d871      	bhi.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d004      	beq.n	80071b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071b4:	d004      	beq.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 80071b6:	e069      	b.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80071b8:	f7fb fd6c 	bl	8002c94 <HAL_RCC_GetPCLK3Freq>
 80071bc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80071be:	e068      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071c0:	f107 0314 	add.w	r3, r7, #20
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7fd fe6f 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071ce:	e060      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071d0:	f107 0308 	add.w	r3, r7, #8
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fd ffd1 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071de:	e058      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80071e0:	4b7c      	ldr	r3, [pc, #496]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80071e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	d103      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80071ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071f2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80071f4:	e04d      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80071f6:	2300      	movs	r3, #0
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071fa:	e04a      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80071fc:	4b75      	ldr	r3, [pc, #468]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80071fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800720a:	d103      	bne.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800720c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007210:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007212:	e03e      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007218:	e03b      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800721a:	4b6e      	ldr	r3, [pc, #440]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800721c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007220:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007224:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007226:	4b6b      	ldr	r3, [pc, #428]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b02      	cmp	r3, #2
 8007230:	d10c      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8007232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007234:	2b00      	cmp	r3, #0
 8007236:	d109      	bne.n	800724c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007238:	4b66      	ldr	r3, [pc, #408]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	08db      	lsrs	r3, r3, #3
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	4a65      	ldr	r2, [pc, #404]	; (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
 8007248:	637b      	str	r3, [r7, #52]	; 0x34
 800724a:	e01e      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800724c:	4b61      	ldr	r3, [pc, #388]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007258:	d106      	bne.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007260:	d102      	bne.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007262:	4b5e      	ldr	r3, [pc, #376]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007264:	637b      	str	r3, [r7, #52]	; 0x34
 8007266:	e010      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007268:	4b5a      	ldr	r3, [pc, #360]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007274:	d106      	bne.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800727c:	d102      	bne.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800727e:	4b58      	ldr	r3, [pc, #352]	; (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007280:	637b      	str	r3, [r7, #52]	; 0x34
 8007282:	e002      	b.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007284:	2300      	movs	r3, #0
 8007286:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007288:	e003      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800728a:	e002      	b.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007290:	bf00      	nop
          }
        }
        break;
 8007292:	f000 bc28 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007296:	4b4f      	ldr	r3, [pc, #316]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007298:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800729c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a0:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80072a2:	4b4c      	ldr	r3, [pc, #304]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072ae:	d106      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d103      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 80072b6:	4b4a      	ldr	r3, [pc, #296]	; (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80072b8:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80072ba:	f000 bc14 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80072be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072c4:	d108      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072c6:	f107 0320 	add.w	r3, r7, #32
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fd fc82 	bl	8004bd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072d4:	f000 bc07 	b.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80072d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072de:	d107      	bne.n	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072e0:	f107 0314 	add.w	r3, r7, #20
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fd fddf 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072ee:	e3fa      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072f4:	e3f7      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80072f6:	4b37      	ldr	r3, [pc, #220]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80072f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072fc:	f003 0307 	and.w	r3, r3, #7
 8007300:	633b      	str	r3, [r7, #48]	; 0x30
 8007302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007304:	2b04      	cmp	r3, #4
 8007306:	d861      	bhi.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8007308:	a201      	add	r2, pc, #4	; (adr r2, 8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800730a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730e:	bf00      	nop
 8007310:	08007325 	.word	0x08007325
 8007314:	08007335 	.word	0x08007335
 8007318:	08007345 	.word	0x08007345
 800731c:	08007355 	.word	0x08007355
 8007320:	0800735b 	.word	0x0800735b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007324:	f107 0320 	add.w	r3, r7, #32
 8007328:	4618      	mov	r0, r3
 800732a:	f7fd fc53 	bl	8004bd4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007332:	e04e      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007334:	f107 0314 	add.w	r3, r7, #20
 8007338:	4618      	mov	r0, r3
 800733a:	f7fd fdb5 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007342:	e046      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007344:	f107 0308 	add.w	r3, r7, #8
 8007348:	4618      	mov	r0, r3
 800734a:	f7fd ff17 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007352:	e03e      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007354:	4b23      	ldr	r3, [pc, #140]	; (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8007356:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007358:	e03b      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800735a:	4b1e      	ldr	r3, [pc, #120]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800735c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007360:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007366:	4b1b      	ldr	r3, [pc, #108]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b02      	cmp	r3, #2
 8007370:	d10c      	bne.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8007372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d109      	bne.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007378:	4b16      	ldr	r3, [pc, #88]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	08db      	lsrs	r3, r3, #3
 800737e:	f003 0303 	and.w	r3, r3, #3
 8007382:	4a15      	ldr	r2, [pc, #84]	; (80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8007384:	fa22 f303 	lsr.w	r3, r2, r3
 8007388:	637b      	str	r3, [r7, #52]	; 0x34
 800738a:	e01e      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800738c:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007398:	d106      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a0:	d102      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073a2:	4b0e      	ldr	r3, [pc, #56]	; (80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80073a4:	637b      	str	r3, [r7, #52]	; 0x34
 80073a6:	e010      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073a8:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073b4:	d106      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073bc:	d102      	bne.n	80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80073be:	4b08      	ldr	r3, [pc, #32]	; (80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80073c0:	637b      	str	r3, [r7, #52]	; 0x34
 80073c2:	e002      	b.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80073c8:	e003      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80073ca:	e002      	b.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073d0:	bf00      	nop
          }
        }
        break;
 80073d2:	e388      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80073d4:	44020c00 	.word	0x44020c00
 80073d8:	03d09000 	.word	0x03d09000
 80073dc:	003d0900 	.word	0x003d0900
 80073e0:	017d7840 	.word	0x017d7840
 80073e4:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80073e8:	4ba9      	ldr	r3, [pc, #676]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80073ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073f2:	633b      	str	r3, [r7, #48]	; 0x30
 80073f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	f200 809a 	bhi.w	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80073fc:	a201      	add	r2, pc, #4	; (adr r2, 8007404 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80073fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007402:	bf00      	nop
 8007404:	08007489 	.word	0x08007489
 8007408:	08007531 	.word	0x08007531
 800740c:	08007531 	.word	0x08007531
 8007410:	08007531 	.word	0x08007531
 8007414:	08007531 	.word	0x08007531
 8007418:	08007531 	.word	0x08007531
 800741c:	08007531 	.word	0x08007531
 8007420:	08007531 	.word	0x08007531
 8007424:	08007499 	.word	0x08007499
 8007428:	08007531 	.word	0x08007531
 800742c:	08007531 	.word	0x08007531
 8007430:	08007531 	.word	0x08007531
 8007434:	08007531 	.word	0x08007531
 8007438:	08007531 	.word	0x08007531
 800743c:	08007531 	.word	0x08007531
 8007440:	08007531 	.word	0x08007531
 8007444:	080074a9 	.word	0x080074a9
 8007448:	08007531 	.word	0x08007531
 800744c:	08007531 	.word	0x08007531
 8007450:	08007531 	.word	0x08007531
 8007454:	08007531 	.word	0x08007531
 8007458:	08007531 	.word	0x08007531
 800745c:	08007531 	.word	0x08007531
 8007460:	08007531 	.word	0x08007531
 8007464:	080074b9 	.word	0x080074b9
 8007468:	08007531 	.word	0x08007531
 800746c:	08007531 	.word	0x08007531
 8007470:	08007531 	.word	0x08007531
 8007474:	08007531 	.word	0x08007531
 8007478:	08007531 	.word	0x08007531
 800747c:	08007531 	.word	0x08007531
 8007480:	08007531 	.word	0x08007531
 8007484:	080074bf 	.word	0x080074bf
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007488:	f107 0320 	add.w	r3, r7, #32
 800748c:	4618      	mov	r0, r3
 800748e:	f7fd fba1 	bl	8004bd4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007496:	e04e      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007498:	f107 0314 	add.w	r3, r7, #20
 800749c:	4618      	mov	r0, r3
 800749e:	f7fd fd03 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074a6:	e046      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074a8:	f107 0308 	add.w	r3, r7, #8
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fd fe65 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074b6:	e03e      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80074b8:	4b76      	ldr	r3, [pc, #472]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80074ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074bc:	e03b      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074be:	4b74      	ldr	r3, [pc, #464]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80074c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80074c4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80074c8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074ca:	4b71      	ldr	r3, [pc, #452]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d10c      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80074d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d109      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074dc:	4b6c      	ldr	r3, [pc, #432]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	08db      	lsrs	r3, r3, #3
 80074e2:	f003 0303 	and.w	r3, r3, #3
 80074e6:	4a6c      	ldr	r2, [pc, #432]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80074e8:	fa22 f303 	lsr.w	r3, r2, r3
 80074ec:	637b      	str	r3, [r7, #52]	; 0x34
 80074ee:	e01e      	b.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074f0:	4b67      	ldr	r3, [pc, #412]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074fc:	d106      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007504:	d102      	bne.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007506:	4b65      	ldr	r3, [pc, #404]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007508:	637b      	str	r3, [r7, #52]	; 0x34
 800750a:	e010      	b.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800750c:	4b60      	ldr	r3, [pc, #384]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007518:	d106      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007520:	d102      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007522:	4b5f      	ldr	r3, [pc, #380]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
 8007526:	e002      	b.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800752c:	e003      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800752e:	e002      	b.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8007530:	2300      	movs	r3, #0
 8007532:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007534:	bf00      	nop
          }
        }
        break;
 8007536:	e2d6      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007538:	4b55      	ldr	r3, [pc, #340]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800753a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800753e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007542:	633b      	str	r3, [r7, #48]	; 0x30
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800754a:	d031      	beq.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007552:	d866      	bhi.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	2bc0      	cmp	r3, #192	; 0xc0
 8007558:	d027      	beq.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	2bc0      	cmp	r3, #192	; 0xc0
 800755e:	d860      	bhi.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	2b80      	cmp	r3, #128	; 0x80
 8007564:	d019      	beq.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	2b80      	cmp	r3, #128	; 0x80
 800756a:	d85a      	bhi.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756e:	2b00      	cmp	r3, #0
 8007570:	d003      	beq.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007574:	2b40      	cmp	r3, #64	; 0x40
 8007576:	d008      	beq.n	800758a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007578:	e053      	b.n	8007622 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800757a:	f107 0320 	add.w	r3, r7, #32
 800757e:	4618      	mov	r0, r3
 8007580:	f7fd fb28 	bl	8004bd4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007588:	e04e      	b.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800758a:	f107 0314 	add.w	r3, r7, #20
 800758e:	4618      	mov	r0, r3
 8007590:	f7fd fc8a 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007598:	e046      	b.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800759a:	f107 0308 	add.w	r3, r7, #8
 800759e:	4618      	mov	r0, r3
 80075a0:	f7fd fdec 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075a8:	e03e      	b.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80075aa:	4b3a      	ldr	r3, [pc, #232]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80075ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075ae:	e03b      	b.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075b0:	4b37      	ldr	r3, [pc, #220]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80075b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80075b6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80075ba:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075bc:	4b34      	ldr	r3, [pc, #208]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d10c      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d109      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075ce:	4b30      	ldr	r3, [pc, #192]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	08db      	lsrs	r3, r3, #3
 80075d4:	f003 0303 	and.w	r3, r3, #3
 80075d8:	4a2f      	ldr	r2, [pc, #188]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80075da:	fa22 f303 	lsr.w	r3, r2, r3
 80075de:	637b      	str	r3, [r7, #52]	; 0x34
 80075e0:	e01e      	b.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075e2:	4b2b      	ldr	r3, [pc, #172]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075ee:	d106      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 80075f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f6:	d102      	bne.n	80075fe <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80075f8:	4b28      	ldr	r3, [pc, #160]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
 80075fc:	e010      	b.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075fe:	4b24      	ldr	r3, [pc, #144]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800760a:	d106      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800760c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007612:	d102      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007614:	4b22      	ldr	r3, [pc, #136]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007616:	637b      	str	r3, [r7, #52]	; 0x34
 8007618:	e002      	b.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800761a:	2300      	movs	r3, #0
 800761c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800761e:	e003      	b.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8007620:	e002      	b.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8007622:	2300      	movs	r3, #0
 8007624:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007626:	bf00      	nop
          }
        }
        break;
 8007628:	e25d      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800762a:	4b19      	ldr	r3, [pc, #100]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800762c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007630:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007634:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	2b00      	cmp	r3, #0
 800763a:	d103      	bne.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800763c:	f7fb fb14 	bl	8002c68 <HAL_RCC_GetPCLK2Freq>
 8007640:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007642:	e250      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007644:	4b12      	ldr	r3, [pc, #72]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800764c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007650:	d10b      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007658:	d107      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800765a:	f107 0314 	add.w	r3, r7, #20
 800765e:	4618      	mov	r0, r3
 8007660:	f7fd fc22 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	637b      	str	r3, [r7, #52]	; 0x34
 8007668:	e04f      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800766a:	4b09      	ldr	r3, [pc, #36]	; (8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007676:	d115      	bne.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800767e:	d111      	bne.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007680:	f107 0308 	add.w	r3, r7, #8
 8007684:	4618      	mov	r0, r3
 8007686:	f7fd fd79 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	637b      	str	r3, [r7, #52]	; 0x34
 800768e:	e03c      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007690:	44020c00 	.word	0x44020c00
 8007694:	00bb8000 	.word	0x00bb8000
 8007698:	03d09000 	.word	0x03d09000
 800769c:	003d0900 	.word	0x003d0900
 80076a0:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80076a4:	4b94      	ldr	r3, [pc, #592]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d10d      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80076b6:	d109      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076b8:	4b8f      	ldr	r3, [pc, #572]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	08db      	lsrs	r3, r3, #3
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	4a8e      	ldr	r2, [pc, #568]	; (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80076c4:	fa22 f303 	lsr.w	r3, r2, r3
 80076c8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ca:	e01e      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80076cc:	4b8a      	ldr	r3, [pc, #552]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d8:	d106      	bne.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076e0:	d102      	bne.n	80076e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 80076e2:	4b87      	ldr	r3, [pc, #540]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80076e4:	637b      	str	r3, [r7, #52]	; 0x34
 80076e6:	e010      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80076e8:	4b83      	ldr	r3, [pc, #524]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076f4:	d106      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 80076f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80076fc:	d102      	bne.n	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 80076fe:	4b81      	ldr	r3, [pc, #516]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007700:	637b      	str	r3, [r7, #52]	; 0x34
 8007702:	e002      	b.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007708:	e1ed      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800770a:	e1ec      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800770c:	4b7a      	ldr	r3, [pc, #488]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800770e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007712:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007716:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	2b00      	cmp	r3, #0
 800771c:	d103      	bne.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800771e:	f7fb fab9 	bl	8002c94 <HAL_RCC_GetPCLK3Freq>
 8007722:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007724:	e1df      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8007726:	4b74      	ldr	r3, [pc, #464]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800772e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007732:	d10b      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800773a:	d107      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800773c:	f107 0314 	add.w	r3, r7, #20
 8007740:	4618      	mov	r0, r3
 8007742:	f7fd fbb1 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	637b      	str	r3, [r7, #52]	; 0x34
 800774a:	e045      	b.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800774c:	4b6a      	ldr	r3, [pc, #424]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007758:	d10b      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007760:	d107      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007762:	f107 0308 	add.w	r3, r7, #8
 8007766:	4618      	mov	r0, r3
 8007768:	f7fd fd08 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	637b      	str	r3, [r7, #52]	; 0x34
 8007770:	e032      	b.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007772:	4b61      	ldr	r3, [pc, #388]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	2b02      	cmp	r3, #2
 800777c:	d10d      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007780:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007784:	d109      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007786:	4b5c      	ldr	r3, [pc, #368]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	08db      	lsrs	r3, r3, #3
 800778c:	f003 0303 	and.w	r3, r3, #3
 8007790:	4a5a      	ldr	r2, [pc, #360]	; (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007792:	fa22 f303 	lsr.w	r3, r2, r3
 8007796:	637b      	str	r3, [r7, #52]	; 0x34
 8007798:	e01e      	b.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800779a:	4b57      	ldr	r3, [pc, #348]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077a6:	d106      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077ae:	d102      	bne.n	80077b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 80077b0:	4b53      	ldr	r3, [pc, #332]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80077b2:	637b      	str	r3, [r7, #52]	; 0x34
 80077b4:	e010      	b.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80077b6:	4b50      	ldr	r3, [pc, #320]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077c2:	d106      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80077ca:	d102      	bne.n	80077d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 80077cc:	4b4d      	ldr	r3, [pc, #308]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80077ce:	637b      	str	r3, [r7, #52]	; 0x34
 80077d0:	e002      	b.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077d6:	e186      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077d8:	e185      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80077da:	4b47      	ldr	r3, [pc, #284]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80077dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077e0:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80077e4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d103      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80077ec:	f7fb fa3c 	bl	8002c68 <HAL_RCC_GetPCLK2Freq>
 80077f0:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80077f2:	e178      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 80077f4:	4b40      	ldr	r3, [pc, #256]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007800:	d10b      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007808:	d107      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800780a:	f107 0314 	add.w	r3, r7, #20
 800780e:	4618      	mov	r0, r3
 8007810:	f7fd fb4a 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	637b      	str	r3, [r7, #52]	; 0x34
 8007818:	e045      	b.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800781a:	4b37      	ldr	r3, [pc, #220]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007826:	d10b      	bne.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800782e:	d107      	bne.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007830:	f107 0308 	add.w	r3, r7, #8
 8007834:	4618      	mov	r0, r3
 8007836:	f7fd fca1 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	637b      	str	r3, [r7, #52]	; 0x34
 800783e:	e032      	b.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007840:	4b2d      	ldr	r3, [pc, #180]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0302 	and.w	r3, r3, #2
 8007848:	2b02      	cmp	r3, #2
 800784a:	d10d      	bne.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007852:	d109      	bne.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007854:	4b28      	ldr	r3, [pc, #160]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	08db      	lsrs	r3, r3, #3
 800785a:	f003 0303 	and.w	r3, r3, #3
 800785e:	4a27      	ldr	r2, [pc, #156]	; (80078fc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
 8007864:	637b      	str	r3, [r7, #52]	; 0x34
 8007866:	e01e      	b.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007868:	4b23      	ldr	r3, [pc, #140]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007874:	d106      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800787c:	d102      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800787e:	4b20      	ldr	r3, [pc, #128]	; (8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007880:	637b      	str	r3, [r7, #52]	; 0x34
 8007882:	e010      	b.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007884:	4b1c      	ldr	r3, [pc, #112]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800788c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007890:	d106      	bne.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007898:	d102      	bne.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800789a:	4b1a      	ldr	r3, [pc, #104]	; (8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800789c:	637b      	str	r3, [r7, #52]	; 0x34
 800789e:	e002      	b.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 80078a0:	2300      	movs	r3, #0
 80078a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078a4:	e11f      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80078a6:	e11e      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80078a8:	4b13      	ldr	r3, [pc, #76]	; (80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80078aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80078ae:	f003 0303 	and.w	r3, r3, #3
 80078b2:	633b      	str	r3, [r7, #48]	; 0x30
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d85f      	bhi.n	800797a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 80078ba:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078d1 	.word	0x080078d1
 80078c4:	080078d9 	.word	0x080078d9
 80078c8:	080078e9 	.word	0x080078e9
 80078cc:	08007909 	.word	0x08007909

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80078d0:	f7fb f998 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 80078d4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80078d6:	e053      	b.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078d8:	f107 0320 	add.w	r3, r7, #32
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fd f979 	bl	8004bd4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80078e6:	e04b      	b.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078e8:	f107 0314 	add.w	r3, r7, #20
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fd fadb 	bl	8004ea8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80078f6:	e043      	b.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80078f8:	44020c00 	.word	0x44020c00
 80078fc:	03d09000 	.word	0x03d09000
 8007900:	003d0900 	.word	0x003d0900
 8007904:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007908:	4b79      	ldr	r3, [pc, #484]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800790a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800790e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007912:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007914:	4b76      	ldr	r3, [pc, #472]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0302 	and.w	r3, r3, #2
 800791c:	2b02      	cmp	r3, #2
 800791e:	d10c      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007922:	2b00      	cmp	r3, #0
 8007924:	d109      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007926:	4b72      	ldr	r3, [pc, #456]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	08db      	lsrs	r3, r3, #3
 800792c:	f003 0303 	and.w	r3, r3, #3
 8007930:	4a70      	ldr	r2, [pc, #448]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007932:	fa22 f303 	lsr.w	r3, r2, r3
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
 8007938:	e01e      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800793a:	4b6d      	ldr	r3, [pc, #436]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007946:	d106      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8007948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794e:	d102      	bne.n	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007950:	4b69      	ldr	r3, [pc, #420]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007952:	637b      	str	r3, [r7, #52]	; 0x34
 8007954:	e010      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007956:	4b66      	ldr	r3, [pc, #408]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007962:	d106      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007966:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800796a:	d102      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800796c:	4b63      	ldr	r3, [pc, #396]	; (8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800796e:	637b      	str	r3, [r7, #52]	; 0x34
 8007970:	e002      	b.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007972:	2300      	movs	r3, #0
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007976:	e003      	b.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007978:	e002      	b.n	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800797e:	bf00      	nop
          }
        }
        break;
 8007980:	e0b1      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007982:	4b5b      	ldr	r3, [pc, #364]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007988:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800798c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800798e:	4b58      	ldr	r3, [pc, #352]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b02      	cmp	r3, #2
 800799a:	d106      	bne.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d103      	bne.n	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 80079a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079a6:	637b      	str	r3, [r7, #52]	; 0x34
 80079a8:	e01f      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80079aa:	4b51      	ldr	r3, [pc, #324]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80079ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079b8:	d106      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	2b40      	cmp	r3, #64	; 0x40
 80079be:	d103      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 80079c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
 80079c6:	e010      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80079c8:	4b49      	ldr	r3, [pc, #292]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079d4:	d106      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	2b80      	cmp	r3, #128	; 0x80
 80079da:	d103      	bne.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 80079dc:	f248 0312 	movw	r3, #32786	; 0x8012
 80079e0:	637b      	str	r3, [r7, #52]	; 0x34
 80079e2:	e002      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 80079e8:	e07d      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80079ea:	e07c      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80079ec:	4b40      	ldr	r3, [pc, #256]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80079ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079f6:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80079f8:	4b3d      	ldr	r3, [pc, #244]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a04:	d105      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d102      	bne.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8007a0c:	4b3c      	ldr	r3, [pc, #240]	; (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a10:	e031      	b.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007a12:	4b37      	ldr	r3, [pc, #220]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a1e:	d10a      	bne.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	2b10      	cmp	r3, #16
 8007a24:	d107      	bne.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a26:	f107 0320 	add.w	r3, r7, #32
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fd f8d2 	bl	8004bd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	637b      	str	r3, [r7, #52]	; 0x34
 8007a34:	e01f      	b.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007a36:	4b2e      	ldr	r3, [pc, #184]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d106      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	d103      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8007a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a50:	e011      	b.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007a52:	4b27      	ldr	r3, [pc, #156]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a60:	d106      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	2b30      	cmp	r3, #48	; 0x30
 8007a66:	d103      	bne.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007a68:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a6e:	e002      	b.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007a70:	2300      	movs	r3, #0
 8007a72:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007a74:	e037      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a76:	e036      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007a78:	4b1d      	ldr	r3, [pc, #116]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007a7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a82:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	2b10      	cmp	r3, #16
 8007a88:	d107      	bne.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a8a:	f107 0320 	add.w	r3, r7, #32
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fd f8a0 	bl	8004bd4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a98:	e025      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007a9a:	4b15      	ldr	r3, [pc, #84]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aa6:	d10a      	bne.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8007aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aaa:	2b20      	cmp	r3, #32
 8007aac:	d107      	bne.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aae:	f107 0308 	add.w	r3, r7, #8
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fd fb62 	bl	800517c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	637b      	str	r3, [r7, #52]	; 0x34
 8007abc:	e00f      	b.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007abe:	4b0c      	ldr	r3, [pc, #48]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aca:	d105      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	2b30      	cmp	r3, #48	; 0x30
 8007ad0:	d102      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007ad2:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad6:	e002      	b.n	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8007adc:	e003      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ade:	e002      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ae4:	bf00      	nop
    }
  }

  return (frequency);
 8007ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	373c      	adds	r7, #60	; 0x3c
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd90      	pop	{r4, r7, pc}
 8007af0:	44020c00 	.word	0x44020c00
 8007af4:	03d09000 	.word	0x03d09000
 8007af8:	003d0900 	.word	0x003d0900
 8007afc:	017d7840 	.word	0x017d7840
 8007b00:	02dc6c00 	.word	0x02dc6c00

08007b04 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007b0c:	4b48      	ldr	r3, [pc, #288]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a47      	ldr	r2, [pc, #284]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007b12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b16:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b18:	f7f9 fe64 	bl	80017e4 <HAL_GetTick>
 8007b1c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b1e:	e008      	b.n	8007b32 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b20:	f7f9 fe60 	bl	80017e4 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e07a      	b.n	8007c28 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b32:	4b3f      	ldr	r3, [pc, #252]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f0      	bne.n	8007b20 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007b3e:	4b3c      	ldr	r3, [pc, #240]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b46:	f023 0303 	bic.w	r3, r3, #3
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6811      	ldr	r1, [r2, #0]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	6852      	ldr	r2, [r2, #4]
 8007b52:	0212      	lsls	r2, r2, #8
 8007b54:	430a      	orrs	r2, r1
 8007b56:	4936      	ldr	r1, [pc, #216]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	025b      	lsls	r3, r3, #9
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	431a      	orrs	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	041b      	lsls	r3, r3, #16
 8007b7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	061b      	lsls	r3, r3, #24
 8007b88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b8c:	4928      	ldr	r1, [pc, #160]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007b92:	4b27      	ldr	r3, [pc, #156]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b96:	f023 020c 	bic.w	r2, r3, #12
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	4924      	ldr	r1, [pc, #144]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007ba4:	4b22      	ldr	r3, [pc, #136]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba8:	f023 0220 	bic.w	r2, r3, #32
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	491f      	ldr	r1, [pc, #124]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007bb6:	4b1e      	ldr	r3, [pc, #120]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	491c      	ldr	r1, [pc, #112]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007bc4:	4b1a      	ldr	r3, [pc, #104]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	4a19      	ldr	r2, [pc, #100]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007bca:	f023 0310 	bic.w	r3, r3, #16
 8007bce:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007bd0:	4b17      	ldr	r3, [pc, #92]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bd8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6a12      	ldr	r2, [r2, #32]
 8007be0:	00d2      	lsls	r2, r2, #3
 8007be2:	4913      	ldr	r1, [pc, #76]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007be8:	4b11      	ldr	r3, [pc, #68]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bec:	4a10      	ldr	r2, [pc, #64]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007bee:	f043 0310 	orr.w	r3, r3, #16
 8007bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007bf4:	4b0e      	ldr	r3, [pc, #56]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a0d      	ldr	r2, [pc, #52]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007bfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bfe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c00:	f7f9 fdf0 	bl	80017e4 <HAL_GetTick>
 8007c04:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c06:	e008      	b.n	8007c1a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c08:	f7f9 fdec 	bl	80017e4 <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d901      	bls.n	8007c1a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e006      	b.n	8007c28 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c1a:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <RCCEx_PLL2_Config+0x12c>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0f0      	beq.n	8007c08 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007c26:	2300      	movs	r3, #0

}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	44020c00 	.word	0x44020c00

08007c34 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007c3c:	4b48      	ldr	r3, [pc, #288]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a47      	ldr	r2, [pc, #284]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c46:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c48:	f7f9 fdcc 	bl	80017e4 <HAL_GetTick>
 8007c4c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c4e:	e008      	b.n	8007c62 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c50:	f7f9 fdc8 	bl	80017e4 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d901      	bls.n	8007c62 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e07a      	b.n	8007d58 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c62:	4b3f      	ldr	r3, [pc, #252]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1f0      	bne.n	8007c50 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007c6e:	4b3c      	ldr	r3, [pc, #240]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007c76:	f023 0303 	bic.w	r3, r3, #3
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	6811      	ldr	r1, [r2, #0]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6852      	ldr	r2, [r2, #4]
 8007c82:	0212      	lsls	r2, r2, #8
 8007c84:	430a      	orrs	r2, r1
 8007c86:	4936      	ldr	r1, [pc, #216]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	630b      	str	r3, [r1, #48]	; 0x30
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	025b      	lsls	r3, r3, #9
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	041b      	lsls	r3, r3, #16
 8007caa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	695b      	ldr	r3, [r3, #20]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	061b      	lsls	r3, r3, #24
 8007cb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007cbc:	4928      	ldr	r1, [pc, #160]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007cc2:	4b27      	ldr	r3, [pc, #156]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc6:	f023 020c 	bic.w	r2, r3, #12
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	4924      	ldr	r1, [pc, #144]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007cd4:	4b22      	ldr	r3, [pc, #136]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd8:	f023 0220 	bic.w	r2, r3, #32
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	491f      	ldr	r1, [pc, #124]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007ce6:	4b1e      	ldr	r3, [pc, #120]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cee:	491c      	ldr	r1, [pc, #112]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007cf4:	4b1a      	ldr	r3, [pc, #104]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf8:	4a19      	ldr	r2, [pc, #100]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007cfa:	f023 0310 	bic.w	r3, r3, #16
 8007cfe:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8007d00:	4b17      	ldr	r3, [pc, #92]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d08:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	6a12      	ldr	r2, [r2, #32]
 8007d10:	00d2      	lsls	r2, r2, #3
 8007d12:	4913      	ldr	r1, [pc, #76]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8007d18:	4b11      	ldr	r3, [pc, #68]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1c:	4a10      	ldr	r2, [pc, #64]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007d1e:	f043 0310 	orr.w	r3, r3, #16
 8007d22:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007d24:	4b0e      	ldr	r3, [pc, #56]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a0d      	ldr	r2, [pc, #52]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d2e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d30:	f7f9 fd58 	bl	80017e4 <HAL_GetTick>
 8007d34:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d36:	e008      	b.n	8007d4a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d38:	f7f9 fd54 	bl	80017e4 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d901      	bls.n	8007d4a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e006      	b.n	8007d58 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d4a:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <RCCEx_PLL3_Config+0x12c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d0f0      	beq.n	8007d38 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	44020c00 	.word	0x44020c00

08007d64 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e162      	b.n	800803c <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a70      	ldr	r2, [pc, #448]	; (8007f3c <HAL_SPI_Init+0x1d8>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d018      	beq.n	8007db2 <HAL_SPI_Init+0x4e>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a6e      	ldr	r2, [pc, #440]	; (8007f40 <HAL_SPI_Init+0x1dc>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d013      	beq.n	8007db2 <HAL_SPI_Init+0x4e>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a6d      	ldr	r2, [pc, #436]	; (8007f44 <HAL_SPI_Init+0x1e0>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d00e      	beq.n	8007db2 <HAL_SPI_Init+0x4e>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a6b      	ldr	r2, [pc, #428]	; (8007f48 <HAL_SPI_Init+0x1e4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d009      	beq.n	8007db2 <HAL_SPI_Init+0x4e>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a6a      	ldr	r2, [pc, #424]	; (8007f4c <HAL_SPI_Init+0x1e8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d004      	beq.n	8007db2 <HAL_SPI_Init+0x4e>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a68      	ldr	r2, [pc, #416]	; (8007f50 <HAL_SPI_Init+0x1ec>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	e000      	b.n	8007db4 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007db2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a5f      	ldr	r2, [pc, #380]	; (8007f3c <HAL_SPI_Init+0x1d8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d018      	beq.n	8007df6 <HAL_SPI_Init+0x92>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a5d      	ldr	r2, [pc, #372]	; (8007f40 <HAL_SPI_Init+0x1dc>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d013      	beq.n	8007df6 <HAL_SPI_Init+0x92>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a5c      	ldr	r2, [pc, #368]	; (8007f44 <HAL_SPI_Init+0x1e0>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d00e      	beq.n	8007df6 <HAL_SPI_Init+0x92>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a5a      	ldr	r2, [pc, #360]	; (8007f48 <HAL_SPI_Init+0x1e4>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d009      	beq.n	8007df6 <HAL_SPI_Init+0x92>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a59      	ldr	r2, [pc, #356]	; (8007f4c <HAL_SPI_Init+0x1e8>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d004      	beq.n	8007df6 <HAL_SPI_Init+0x92>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a57      	ldr	r2, [pc, #348]	; (8007f50 <HAL_SPI_Init+0x1ec>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d105      	bne.n	8007e02 <HAL_SPI_Init+0x9e>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	2b0f      	cmp	r3, #15
 8007dfc:	d901      	bls.n	8007e02 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e11c      	b.n	800803c <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 f80e 	bl	8008e24 <SPI_GetPacketSize>
 8007e08:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a4b      	ldr	r2, [pc, #300]	; (8007f3c <HAL_SPI_Init+0x1d8>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d018      	beq.n	8007e46 <HAL_SPI_Init+0xe2>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a49      	ldr	r2, [pc, #292]	; (8007f40 <HAL_SPI_Init+0x1dc>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d013      	beq.n	8007e46 <HAL_SPI_Init+0xe2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a48      	ldr	r2, [pc, #288]	; (8007f44 <HAL_SPI_Init+0x1e0>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d00e      	beq.n	8007e46 <HAL_SPI_Init+0xe2>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a46      	ldr	r2, [pc, #280]	; (8007f48 <HAL_SPI_Init+0x1e4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d009      	beq.n	8007e46 <HAL_SPI_Init+0xe2>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a45      	ldr	r2, [pc, #276]	; (8007f4c <HAL_SPI_Init+0x1e8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d004      	beq.n	8007e46 <HAL_SPI_Init+0xe2>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a43      	ldr	r2, [pc, #268]	; (8007f50 <HAL_SPI_Init+0x1ec>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d102      	bne.n	8007e4c <HAL_SPI_Init+0xe8>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b08      	cmp	r3, #8
 8007e4a:	d820      	bhi.n	8007e8e <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e50:	4a40      	ldr	r2, [pc, #256]	; (8007f54 <HAL_SPI_Init+0x1f0>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d018      	beq.n	8007e88 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a3f      	ldr	r2, [pc, #252]	; (8007f58 <HAL_SPI_Init+0x1f4>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d013      	beq.n	8007e88 <HAL_SPI_Init+0x124>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a3d      	ldr	r2, [pc, #244]	; (8007f5c <HAL_SPI_Init+0x1f8>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00e      	beq.n	8007e88 <HAL_SPI_Init+0x124>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a3c      	ldr	r2, [pc, #240]	; (8007f60 <HAL_SPI_Init+0x1fc>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d009      	beq.n	8007e88 <HAL_SPI_Init+0x124>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a3a      	ldr	r2, [pc, #232]	; (8007f64 <HAL_SPI_Init+0x200>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d004      	beq.n	8007e88 <HAL_SPI_Init+0x124>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a39      	ldr	r2, [pc, #228]	; (8007f68 <HAL_SPI_Init+0x204>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d104      	bne.n	8007e92 <HAL_SPI_Init+0x12e>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2b10      	cmp	r3, #16
 8007e8c:	d901      	bls.n	8007e92 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e0d4      	b.n	800803c <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d106      	bne.n	8007eac <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7f9 f936 	bl	8001118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 0201 	bic.w	r2, r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007ece:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ed8:	d119      	bne.n	8007f0e <HAL_SPI_Init+0x1aa>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ee2:	d103      	bne.n	8007eec <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d008      	beq.n	8007efe <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10c      	bne.n	8007f0e <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007efc:	d107      	bne.n	8007f0e <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d028      	beq.n	8007f6c <HAL_SPI_Init+0x208>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	2b06      	cmp	r3, #6
 8007f20:	d924      	bls.n	8007f6c <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	e020      	b.n	8007f7c <HAL_SPI_Init+0x218>
 8007f3a:	bf00      	nop
 8007f3c:	40014c00 	.word	0x40014c00
 8007f40:	50014c00 	.word	0x50014c00
 8007f44:	44002000 	.word	0x44002000
 8007f48:	54002000 	.word	0x54002000
 8007f4c:	40015000 	.word	0x40015000
 8007f50:	50015000 	.word	0x50015000
 8007f54:	40013000 	.word	0x40013000
 8007f58:	50013000 	.word	0x50013000
 8007f5c:	40003800 	.word	0x40003800
 8007f60:	50003800 	.word	0x50003800
 8007f64:	40003c00 	.word	0x40003c00
 8007f68:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f7a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	69da      	ldr	r2, [r3, #28]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f84:	431a      	orrs	r2, r3
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	ea42 0103 	orr.w	r1, r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68da      	ldr	r2, [r3, #12]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fac:	431a      	orrs	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	431a      	orrs	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fe8:	ea42 0103 	orr.w	r1, r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0201 	bic.w	r2, r2, #1
 8008006:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00a      	beq.n	800802a <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	430a      	orrs	r2, r1
 8008028:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800803a:	2300      	movs	r3, #0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b08a      	sub	sp, #40	; 0x28
 8008048:	af02      	add	r7, sp, #8
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	4613      	mov	r3, r2
 8008052:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3320      	adds	r3, #32
 800805a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008066:	2b01      	cmp	r3, #1
 8008068:	d101      	bne.n	800806e <HAL_SPI_Transmit+0x2a>
 800806a:	2302      	movs	r3, #2
 800806c:	e209      	b.n	8008482 <HAL_SPI_Transmit+0x43e>
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008076:	f7f9 fbb5 	bl	80017e4 <HAL_GetTick>
 800807a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b01      	cmp	r3, #1
 8008086:	d007      	beq.n	8008098 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008088:	2302      	movs	r3, #2
 800808a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008094:	7efb      	ldrb	r3, [r7, #27]
 8008096:	e1f4      	b.n	8008482 <HAL_SPI_Transmit+0x43e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d002      	beq.n	80080a4 <HAL_SPI_Transmit+0x60>
 800809e:	88fb      	ldrh	r3, [r7, #6]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d107      	bne.n	80080b4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80080b0:	7efb      	ldrb	r3, [r7, #27]
 80080b2:	e1e6      	b.n	8008482 <HAL_SPI_Transmit+0x43e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2203      	movs	r2, #3
 80080b8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	88fa      	ldrh	r2, [r7, #6]
 80080ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	88fa      	ldrh	r2, [r7, #6]
 80080d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	2200      	movs	r2, #0
 80080f4:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008104:	d108      	bne.n	8008118 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	e009      	b.n	800812c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800812a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	0c1b      	lsrs	r3, r3, #16
 8008134:	041b      	lsls	r3, r3, #16
 8008136:	88f9      	ldrh	r1, [r7, #6]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	6812      	ldr	r2, [r2, #0]
 800813c:	430b      	orrs	r3, r1
 800813e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0201 	orr.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008158:	d107      	bne.n	800816a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008168:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	2b0f      	cmp	r3, #15
 8008170:	d965      	bls.n	800823e <HAL_SPI_Transmit+0x1fa>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a94      	ldr	r2, [pc, #592]	; (80083c8 <HAL_SPI_Transmit+0x384>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d059      	beq.n	8008230 <HAL_SPI_Transmit+0x1ec>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a92      	ldr	r2, [pc, #584]	; (80083cc <HAL_SPI_Transmit+0x388>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d054      	beq.n	8008230 <HAL_SPI_Transmit+0x1ec>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a91      	ldr	r2, [pc, #580]	; (80083d0 <HAL_SPI_Transmit+0x38c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d04f      	beq.n	8008230 <HAL_SPI_Transmit+0x1ec>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a8f      	ldr	r2, [pc, #572]	; (80083d4 <HAL_SPI_Transmit+0x390>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d04a      	beq.n	8008230 <HAL_SPI_Transmit+0x1ec>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a8e      	ldr	r2, [pc, #568]	; (80083d8 <HAL_SPI_Transmit+0x394>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d045      	beq.n	8008230 <HAL_SPI_Transmit+0x1ec>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a8c      	ldr	r2, [pc, #560]	; (80083dc <HAL_SPI_Transmit+0x398>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d147      	bne.n	800823e <HAL_SPI_Transmit+0x1fa>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80081ae:	e03f      	b.n	8008230 <HAL_SPI_Transmit+0x1ec>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	f003 0302 	and.w	r3, r3, #2
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d114      	bne.n	80081e8 <HAL_SPI_Transmit+0x1a4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6812      	ldr	r2, [r2, #0]
 80081c8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ce:	1d1a      	adds	r2, r3, #4
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80081da:	b29b      	uxth	r3, r3
 80081dc:	3b01      	subs	r3, #1
 80081de:	b29a      	uxth	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80081e6:	e023      	b.n	8008230 <HAL_SPI_Transmit+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081e8:	f7f9 fafc 	bl	80017e4 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d803      	bhi.n	8008200 <HAL_SPI_Transmit+0x1bc>
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081fe:	d102      	bne.n	8008206 <HAL_SPI_Transmit+0x1c2>
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d114      	bne.n	8008230 <HAL_SPI_Transmit+0x1ec>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f000 fd3e 	bl	8008c88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800821a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e128      	b.n	8008482 <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008236:	b29b      	uxth	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1b9      	bne.n	80081b0 <HAL_SPI_Transmit+0x16c>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800823c:	e0fb      	b.n	8008436 <HAL_SPI_Transmit+0x3f2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	2b07      	cmp	r3, #7
 8008244:	f240 80f0 	bls.w	8008428 <HAL_SPI_Transmit+0x3e4>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008248:	e05d      	b.n	8008306 <HAL_SPI_Transmit+0x2c2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	f003 0302 	and.w	r3, r3, #2
 8008254:	2b02      	cmp	r3, #2
 8008256:	d132      	bne.n	80082be <HAL_SPI_Transmit+0x27a>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800825e:	b29b      	uxth	r3, r3
 8008260:	2b01      	cmp	r3, #1
 8008262:	d918      	bls.n	8008296 <HAL_SPI_Transmit+0x252>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d014      	beq.n	8008296 <HAL_SPI_Transmit+0x252>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	6812      	ldr	r2, [r2, #0]
 8008276:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800827c:	1d1a      	adds	r2, r3, #4
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008288:	b29b      	uxth	r3, r3
 800828a:	3b02      	subs	r3, #2
 800828c:	b29a      	uxth	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008294:	e037      	b.n	8008306 <HAL_SPI_Transmit+0x2c2>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800829a:	881a      	ldrh	r2, [r3, #0]
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082a4:	1c9a      	adds	r2, r3, #2
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	3b01      	subs	r3, #1
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80082bc:	e023      	b.n	8008306 <HAL_SPI_Transmit+0x2c2>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082be:	f7f9 fa91 	bl	80017e4 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d803      	bhi.n	80082d6 <HAL_SPI_Transmit+0x292>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082d4:	d102      	bne.n	80082dc <HAL_SPI_Transmit+0x298>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d114      	bne.n	8008306 <HAL_SPI_Transmit+0x2c2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 fcd3 	bl	8008c88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e0bd      	b.n	8008482 <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800830c:	b29b      	uxth	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d19b      	bne.n	800824a <HAL_SPI_Transmit+0x206>
 8008312:	e090      	b.n	8008436 <HAL_SPI_Transmit+0x3f2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b02      	cmp	r3, #2
 8008320:	d15e      	bne.n	80083e0 <HAL_SPI_Transmit+0x39c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008328:	b29b      	uxth	r3, r3
 800832a:	2b03      	cmp	r3, #3
 800832c:	d918      	bls.n	8008360 <HAL_SPI_Transmit+0x31c>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008332:	2b40      	cmp	r3, #64	; 0x40
 8008334:	d914      	bls.n	8008360 <HAL_SPI_Transmit+0x31c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6812      	ldr	r2, [r2, #0]
 8008340:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008346:	1d1a      	adds	r2, r3, #4
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008352:	b29b      	uxth	r3, r3
 8008354:	3b04      	subs	r3, #4
 8008356:	b29a      	uxth	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800835e:	e063      	b.n	8008428 <HAL_SPI_Transmit+0x3e4>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008366:	b29b      	uxth	r3, r3
 8008368:	2b01      	cmp	r3, #1
 800836a:	d917      	bls.n	800839c <HAL_SPI_Transmit+0x358>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d013      	beq.n	800839c <HAL_SPI_Transmit+0x358>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008378:	881a      	ldrh	r2, [r3, #0]
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008382:	1c9a      	adds	r2, r3, #2
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800838e:	b29b      	uxth	r3, r3
 8008390:	3b02      	subs	r3, #2
 8008392:	b29a      	uxth	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800839a:	e045      	b.n	8008428 <HAL_SPI_Transmit+0x3e4>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3320      	adds	r3, #32
 80083a6:	7812      	ldrb	r2, [r2, #0]
 80083a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	b29a      	uxth	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80083c6:	e02f      	b.n	8008428 <HAL_SPI_Transmit+0x3e4>
 80083c8:	40013000 	.word	0x40013000
 80083cc:	50013000 	.word	0x50013000
 80083d0:	40003800 	.word	0x40003800
 80083d4:	50003800 	.word	0x50003800
 80083d8:	40003c00 	.word	0x40003c00
 80083dc:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083e0:	f7f9 fa00 	bl	80017e4 <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d803      	bhi.n	80083f8 <HAL_SPI_Transmit+0x3b4>
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083f6:	d102      	bne.n	80083fe <HAL_SPI_Transmit+0x3ba>
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d114      	bne.n	8008428 <HAL_SPI_Transmit+0x3e4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 fc42 	bl	8008c88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008412:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e02c      	b.n	8008482 <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800842e:	b29b      	uxth	r3, r3
 8008430:	2b00      	cmp	r3, #0
 8008432:	f47f af6f 	bne.w	8008314 <HAL_SPI_Transmit+0x2d0>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2200      	movs	r2, #0
 800843e:	2108      	movs	r1, #8
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 fcc1 	bl	8008dc8 <SPI_WaitOnFlagUntilTimeout>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d007      	beq.n	800845c <HAL_SPI_Transmit+0x418>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008452:	f043 0220 	orr.w	r2, r3, #32
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 fc13 	bl	8008c88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <HAL_SPI_Transmit+0x43c>
  {
    return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e000      	b.n	8008482 <HAL_SPI_Transmit+0x43e>
  }
  return errorcode;
 8008480:	7efb      	ldrb	r3, [r7, #27]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3720      	adds	r7, #32
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop

0800848c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	4613      	mov	r3, r2
 800849a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3330      	adds	r3, #48	; 0x30
 80084a6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d101      	bne.n	80084b6 <HAL_SPI_Receive+0x2a>
 80084b2:	2302      	movs	r3, #2
 80084b4:	e191      	b.n	80087da <HAL_SPI_Receive+0x34e>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084be:	f7f9 f991 	bl	80017e4 <HAL_GetTick>
 80084c2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d007      	beq.n	80084e0 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 80084d0:	2302      	movs	r3, #2
 80084d2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80084dc:	7ffb      	ldrb	r3, [r7, #31]
 80084de:	e17c      	b.n	80087da <HAL_SPI_Receive+0x34e>
  }

  if ((pData == NULL) || (Size == 0UL))
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <HAL_SPI_Receive+0x60>
 80084e6:	88fb      	ldrh	r3, [r7, #6]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d107      	bne.n	80084fc <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80084f8:	7ffb      	ldrb	r3, [r7, #31]
 80084fa:	e16e      	b.n	80087da <HAL_SPI_Receive+0x34e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2204      	movs	r2, #4
 8008500:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	88fa      	ldrh	r2, [r7, #6]
 8008516:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	88fa      	ldrh	r2, [r7, #6]
 800851e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800854c:	d108      	bne.n	8008560 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	e009      	b.n	8008574 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008572:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	0c1b      	lsrs	r3, r3, #16
 800857c:	041b      	lsls	r3, r3, #16
 800857e:	88f9      	ldrh	r1, [r7, #6]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	6812      	ldr	r2, [r2, #0]
 8008584:	430b      	orrs	r3, r1
 8008586:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f042 0201 	orr.w	r2, r2, #1
 8008596:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085a0:	d107      	bne.n	80085b2 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	2b0f      	cmp	r3, #15
 80085b8:	d966      	bls.n	8008688 <HAL_SPI_Receive+0x1fc>
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a89      	ldr	r2, [pc, #548]	; (80087e4 <HAL_SPI_Receive+0x358>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d05a      	beq.n	800867a <HAL_SPI_Receive+0x1ee>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a87      	ldr	r2, [pc, #540]	; (80087e8 <HAL_SPI_Receive+0x35c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d055      	beq.n	800867a <HAL_SPI_Receive+0x1ee>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a86      	ldr	r2, [pc, #536]	; (80087ec <HAL_SPI_Receive+0x360>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d050      	beq.n	800867a <HAL_SPI_Receive+0x1ee>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a84      	ldr	r2, [pc, #528]	; (80087f0 <HAL_SPI_Receive+0x364>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d04b      	beq.n	800867a <HAL_SPI_Receive+0x1ee>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a83      	ldr	r2, [pc, #524]	; (80087f4 <HAL_SPI_Receive+0x368>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d046      	beq.n	800867a <HAL_SPI_Receive+0x1ee>
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a81      	ldr	r2, [pc, #516]	; (80087f8 <HAL_SPI_Receive+0x36c>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d148      	bne.n	8008688 <HAL_SPI_Receive+0x1fc>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80085f6:	e040      	b.n	800867a <HAL_SPI_Receive+0x1ee>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	695a      	ldr	r2, [r3, #20]
 80085fe:	f248 0308 	movw	r3, #32776	; 0x8008
 8008602:	4013      	ands	r3, r2
 8008604:	2b00      	cmp	r3, #0
 8008606:	d014      	beq.n	8008632 <HAL_SPI_Receive+0x1a6>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008610:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008612:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008618:	1d1a      	adds	r2, r3, #4
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008624:	b29b      	uxth	r3, r3
 8008626:	3b01      	subs	r3, #1
 8008628:	b29a      	uxth	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008630:	e023      	b.n	800867a <HAL_SPI_Receive+0x1ee>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008632:	f7f9 f8d7 	bl	80017e4 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	1ad3      	subs	r3, r2, r3
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	429a      	cmp	r2, r3
 8008640:	d803      	bhi.n	800864a <HAL_SPI_Receive+0x1be>
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008648:	d102      	bne.n	8008650 <HAL_SPI_Receive+0x1c4>
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d114      	bne.n	800867a <HAL_SPI_Receive+0x1ee>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f000 fb19 	bl	8008c88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008664:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e0af      	b.n	80087da <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1b8      	bne.n	80085f8 <HAL_SPI_Receive+0x16c>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008686:	e095      	b.n	80087b4 <HAL_SPI_Receive+0x328>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	2b07      	cmp	r3, #7
 800868e:	f240 808b 	bls.w	80087a8 <HAL_SPI_Receive+0x31c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008692:	e03f      	b.n	8008714 <HAL_SPI_Receive+0x288>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d114      	bne.n	80086cc <HAL_SPI_Receive+0x240>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	8812      	ldrh	r2, [r2, #0]
 80086aa:	b292      	uxth	r2, r2
 80086ac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086b2:	1c9a      	adds	r2, r3, #2
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80086be:	b29b      	uxth	r3, r3
 80086c0:	3b01      	subs	r3, #1
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80086ca:	e023      	b.n	8008714 <HAL_SPI_Receive+0x288>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086cc:	f7f9 f88a 	bl	80017e4 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d803      	bhi.n	80086e4 <HAL_SPI_Receive+0x258>
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086e2:	d102      	bne.n	80086ea <HAL_SPI_Receive+0x25e>
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d114      	bne.n	8008714 <HAL_SPI_Receive+0x288>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80086ea:	68f8      	ldr	r0, [r7, #12]
 80086ec:	f000 facc 	bl	8008c88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e062      	b.n	80087da <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800871a:	b29b      	uxth	r3, r3
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1b9      	bne.n	8008694 <HAL_SPI_Receive+0x208>
 8008720:	e048      	b.n	80087b4 <HAL_SPI_Receive+0x328>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	695b      	ldr	r3, [r3, #20]
 8008728:	f003 0301 	and.w	r3, r3, #1
 800872c:	2b01      	cmp	r3, #1
 800872e:	d117      	bne.n	8008760 <HAL_SPI_Receive+0x2d4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800873c:	7812      	ldrb	r2, [r2, #0]
 800873e:	b2d2      	uxtb	r2, r2
 8008740:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008752:	b29b      	uxth	r3, r3
 8008754:	3b01      	subs	r3, #1
 8008756:	b29a      	uxth	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800875e:	e023      	b.n	80087a8 <HAL_SPI_Receive+0x31c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008760:	f7f9 f840 	bl	80017e4 <HAL_GetTick>
 8008764:	4602      	mov	r2, r0
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	429a      	cmp	r2, r3
 800876e:	d803      	bhi.n	8008778 <HAL_SPI_Receive+0x2ec>
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008776:	d102      	bne.n	800877e <HAL_SPI_Receive+0x2f2>
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d114      	bne.n	80087a8 <HAL_SPI_Receive+0x31c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f000 fa82 	bl	8008c88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008792:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e018      	b.n	80087da <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1b6      	bne.n	8008722 <HAL_SPI_Receive+0x296>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f000 fa67 	bl	8008c88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <HAL_SPI_Receive+0x34c>
  {
    return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e000      	b.n	80087da <HAL_SPI_Receive+0x34e>
  }
  return errorcode;
 80087d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3720      	adds	r7, #32
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	40013000 	.word	0x40013000
 80087e8:	50013000 	.word	0x50013000
 80087ec:	40003800 	.word	0x40003800
 80087f0:	50003800 	.word	0x50003800
 80087f4:	40003c00 	.word	0x40003c00
 80087f8:	50003c00 	.word	0x50003c00

080087fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08c      	sub	sp, #48	; 0x30
 8008800:	af02      	add	r7, sp, #8
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
 8008808:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3320      	adds	r3, #32
 8008816:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3330      	adds	r3, #48	; 0x30
 800881e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008826:	2b01      	cmp	r3, #1
 8008828:	d101      	bne.n	800882e <HAL_SPI_TransmitReceive+0x32>
 800882a:	2302      	movs	r3, #2
 800882c:	e227      	b.n	8008c7e <HAL_SPI_TransmitReceive+0x482>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008836:	f7f8 ffd5 	bl	80017e4 <HAL_GetTick>
 800883a:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 800883c:	887b      	ldrh	r3, [r7, #2]
 800883e:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8008840:	887b      	ldrh	r3, [r7, #2]
 8008842:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800884a:	b2db      	uxtb	r3, r3
 800884c:	2b01      	cmp	r3, #1
 800884e:	d009      	beq.n	8008864 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8008850:	2302      	movs	r3, #2
 8008852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800885e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008862:	e20c      	b.n	8008c7e <HAL_SPI_TransmitReceive+0x482>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d005      	beq.n	8008876 <HAL_SPI_TransmitReceive+0x7a>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <HAL_SPI_TransmitReceive+0x7a>
 8008870:	887b      	ldrh	r3, [r7, #2]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d109      	bne.n	800888a <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008888:	e1f9      	b.n	8008c7e <HAL_SPI_TransmitReceive+0x482>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2205      	movs	r2, #5
 800888e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	887a      	ldrh	r2, [r7, #2]
 80088a4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	887a      	ldrh	r2, [r7, #2]
 80088ac:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	887a      	ldrh	r2, [r7, #2]
 80088ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	887a      	ldrh	r2, [r7, #2]
 80088c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68da      	ldr	r2, [r3, #12]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 80088e0:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	0c1b      	lsrs	r3, r3, #16
 80088ea:	041b      	lsls	r3, r3, #16
 80088ec:	8879      	ldrh	r1, [r7, #2]
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	6812      	ldr	r2, [r2, #0]
 80088f2:	430b      	orrs	r3, r1
 80088f4:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0201 	orr.w	r2, r2, #1
 8008904:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800890e:	d107      	bne.n	8008920 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800891e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	2b0f      	cmp	r3, #15
 8008926:	f240 8090 	bls.w	8008a4a <HAL_SPI_TransmitReceive+0x24e>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a81      	ldr	r2, [pc, #516]	; (8008b34 <HAL_SPI_TransmitReceive+0x338>)
 8008930:	4293      	cmp	r3, r2
 8008932:	f000 8083 	beq.w	8008a3c <HAL_SPI_TransmitReceive+0x240>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a7f      	ldr	r2, [pc, #508]	; (8008b38 <HAL_SPI_TransmitReceive+0x33c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d07d      	beq.n	8008a3c <HAL_SPI_TransmitReceive+0x240>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a7d      	ldr	r2, [pc, #500]	; (8008b3c <HAL_SPI_TransmitReceive+0x340>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d078      	beq.n	8008a3c <HAL_SPI_TransmitReceive+0x240>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a7c      	ldr	r2, [pc, #496]	; (8008b40 <HAL_SPI_TransmitReceive+0x344>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d073      	beq.n	8008a3c <HAL_SPI_TransmitReceive+0x240>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a7a      	ldr	r2, [pc, #488]	; (8008b44 <HAL_SPI_TransmitReceive+0x348>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d06e      	beq.n	8008a3c <HAL_SPI_TransmitReceive+0x240>
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a79      	ldr	r2, [pc, #484]	; (8008b48 <HAL_SPI_TransmitReceive+0x34c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d170      	bne.n	8008a4a <HAL_SPI_TransmitReceive+0x24e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008968:	e068      	b.n	8008a3c <HAL_SPI_TransmitReceive+0x240>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	695b      	ldr	r3, [r3, #20]
 8008970:	f003 0302 	and.w	r3, r3, #2
 8008974:	2b02      	cmp	r3, #2
 8008976:	d11a      	bne.n	80089ae <HAL_SPI_TransmitReceive+0x1b2>
 8008978:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800897a:	2b00      	cmp	r3, #0
 800897c:	d017      	beq.n	80089ae <HAL_SPI_TransmitReceive+0x1b2>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	6812      	ldr	r2, [r2, #0]
 8008988:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800898e:	1d1a      	adds	r2, r3, #4
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800899a:	b29b      	uxth	r3, r3
 800899c:	3b01      	subs	r3, #1
 800899e:	b29a      	uxth	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80089ac:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	695a      	ldr	r2, [r3, #20]
 80089b4:	f248 0308 	movw	r3, #32776	; 0x8008
 80089b8:	4013      	ands	r3, r2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d01a      	beq.n	80089f4 <HAL_SPI_TransmitReceive+0x1f8>
 80089be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d017      	beq.n	80089f4 <HAL_SPI_TransmitReceive+0x1f8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80089ce:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089d4:	1d1a      	adds	r2, r3, #4
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	3b01      	subs	r3, #1
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80089f2:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089f4:	f7f8 fef6 	bl	80017e4 <HAL_GetTick>
 80089f8:	4602      	mov	r2, r0
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	1ad3      	subs	r3, r2, r3
 80089fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d803      	bhi.n	8008a0c <HAL_SPI_TransmitReceive+0x210>
 8008a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a0a:	d102      	bne.n	8008a12 <HAL_SPI_TransmitReceive+0x216>
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d114      	bne.n	8008a3c <HAL_SPI_TransmitReceive+0x240>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f000 f938 	bl	8008c88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e120      	b.n	8008c7e <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008a3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d193      	bne.n	800896a <HAL_SPI_TransmitReceive+0x16e>
 8008a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d190      	bne.n	800896a <HAL_SPI_TransmitReceive+0x16e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008a48:	e0f2      	b.n	8008c30 <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	2b07      	cmp	r3, #7
 8008a50:	f240 80e8 	bls.w	8008c24 <HAL_SPI_TransmitReceive+0x428>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008a54:	e066      	b.n	8008b24 <HAL_SPI_TransmitReceive+0x328>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d119      	bne.n	8008a98 <HAL_SPI_TransmitReceive+0x29c>
 8008a64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d016      	beq.n	8008a98 <HAL_SPI_TransmitReceive+0x29c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a6e:	881a      	ldrh	r2, [r3, #0]
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a78:	1c9a      	adds	r2, r3, #2
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a84:	b29b      	uxth	r3, r3
 8008a86:	3b01      	subs	r3, #1
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a96:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	f003 0301 	and.w	r3, r3, #1
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d11a      	bne.n	8008adc <HAL_SPI_TransmitReceive+0x2e0>
 8008aa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d017      	beq.n	8008adc <HAL_SPI_TransmitReceive+0x2e0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab0:	69ba      	ldr	r2, [r7, #24]
 8008ab2:	8812      	ldrh	r2, [r2, #0]
 8008ab4:	b292      	uxth	r2, r2
 8008ab6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008abc:	1c9a      	adds	r2, r3, #2
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3b01      	subs	r3, #1
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008ada:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008adc:	f7f8 fe82 	bl	80017e4 <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d803      	bhi.n	8008af4 <HAL_SPI_TransmitReceive+0x2f8>
 8008aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008af2:	d102      	bne.n	8008afa <HAL_SPI_TransmitReceive+0x2fe>
 8008af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d114      	bne.n	8008b24 <HAL_SPI_TransmitReceive+0x328>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 f8c4 	bl	8008c88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e0ac      	b.n	8008c7e <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008b24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d195      	bne.n	8008a56 <HAL_SPI_TransmitReceive+0x25a>
 8008b2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d192      	bne.n	8008a56 <HAL_SPI_TransmitReceive+0x25a>
 8008b30:	e07e      	b.n	8008c30 <HAL_SPI_TransmitReceive+0x434>
 8008b32:	bf00      	nop
 8008b34:	40013000 	.word	0x40013000
 8008b38:	50013000 	.word	0x50013000
 8008b3c:	40003800 	.word	0x40003800
 8008b40:	50003800 	.word	0x50003800
 8008b44:	40003c00 	.word	0x40003c00
 8008b48:	50003c00 	.word	0x50003c00
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d11b      	bne.n	8008b92 <HAL_SPI_TransmitReceive+0x396>
 8008b5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d018      	beq.n	8008b92 <HAL_SPI_TransmitReceive+0x396>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3320      	adds	r3, #32
 8008b6a:	7812      	ldrb	r2, [r2, #0]
 8008b6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	3b01      	subs	r3, #1
 8008b82:	b29a      	uxth	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b90:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d11d      	bne.n	8008bdc <HAL_SPI_TransmitReceive+0x3e0>
 8008ba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01a      	beq.n	8008bdc <HAL_SPI_TransmitReceive+0x3e0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bb2:	7812      	ldrb	r2, [r2, #0]
 8008bb4:	b2d2      	uxtb	r2, r2
 8008bb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008bda:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bdc:	f7f8 fe02 	bl	80017e4 <HAL_GetTick>
 8008be0:	4602      	mov	r2, r0
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d803      	bhi.n	8008bf4 <HAL_SPI_TransmitReceive+0x3f8>
 8008bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bf2:	d102      	bne.n	8008bfa <HAL_SPI_TransmitReceive+0x3fe>
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d114      	bne.n	8008c24 <HAL_SPI_TransmitReceive+0x428>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 f844 	bl	8008c88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e02c      	b.n	8008c7e <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008c24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d190      	bne.n	8008b4c <HAL_SPI_TransmitReceive+0x350>
 8008c2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d18d      	bne.n	8008b4c <HAL_SPI_TransmitReceive+0x350>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c36:	2200      	movs	r2, #0
 8008c38:	2108      	movs	r1, #8
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 f8c4 	bl	8008dc8 <SPI_WaitOnFlagUntilTimeout>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d007      	beq.n	8008c56 <HAL_SPI_TransmitReceive+0x45a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c4c:	f043 0220 	orr.w	r2, r3, #32
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 f816 	bl	8008c88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <HAL_SPI_TransmitReceive+0x47e>
  {
    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e001      	b.n	8008c7e <HAL_SPI_TransmitReceive+0x482>
  }
  return errorcode;
 8008c7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3728      	adds	r7, #40	; 0x28
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop

08008c88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	695b      	ldr	r3, [r3, #20]
 8008c96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	699a      	ldr	r2, [r3, #24]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f042 0208 	orr.w	r2, r2, #8
 8008ca6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	699a      	ldr	r2, [r3, #24]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f042 0210 	orr.w	r2, r2, #16
 8008cb6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0201 	bic.w	r2, r2, #1
 8008cc6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	6812      	ldr	r2, [r2, #0]
 8008cd2:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8008cd6:	f023 0303 	bic.w	r3, r3, #3
 8008cda:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689a      	ldr	r2, [r3, #8]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008cea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b04      	cmp	r3, #4
 8008cf6:	d014      	beq.n	8008d22 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f003 0320 	and.w	r3, r3, #32
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00f      	beq.n	8008d22 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	699a      	ldr	r2, [r3, #24]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f042 0220 	orr.w	r2, r2, #32
 8008d20:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d014      	beq.n	8008d58 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00f      	beq.n	8008d58 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d3e:	f043 0204 	orr.w	r2, r3, #4
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	699a      	ldr	r2, [r3, #24]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d56:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00f      	beq.n	8008d82 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d68:	f043 0201 	orr.w	r2, r3, #1
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	699a      	ldr	r2, [r3, #24]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d80:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00f      	beq.n	8008dac <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d92:	f043 0208 	orr.w	r2, r3, #8
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	699a      	ldr	r2, [r3, #24]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008daa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8008dbc:	bf00      	nop
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	603b      	str	r3, [r7, #0]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008dd8:	e010      	b.n	8008dfc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dda:	f7f8 fd03 	bl	80017e4 <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d803      	bhi.n	8008df2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008df0:	d102      	bne.n	8008df8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e00f      	b.n	8008e1c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	695a      	ldr	r2, [r3, #20]
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	4013      	ands	r3, r2
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	bf0c      	ite	eq
 8008e0c:	2301      	moveq	r3, #1
 8008e0e:	2300      	movne	r3, #0
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	461a      	mov	r2, r3
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d0df      	beq.n	8008dda <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e30:	095b      	lsrs	r3, r3, #5
 8008e32:	3301      	adds	r3, #1
 8008e34:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	3307      	adds	r3, #7
 8008e42:	08db      	lsrs	r3, r3, #3
 8008e44:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	fb02 f303 	mul.w	r3, r2, r3
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e042      	b.n	8008ef2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d106      	bne.n	8008e84 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7f8 fa36 	bl	80012f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2224      	movs	r2, #36	; 0x24
 8008e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 0201 	bic.w	r2, r2, #1
 8008e9a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fab5 	bl	8009414 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f8c4 	bl	8009038 <UART_SetConfig>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d101      	bne.n	8008eba <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e01b      	b.n	8008ef2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ec8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ed8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f042 0201 	orr.w	r2, r2, #1
 8008ee8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fb34 	bl	8009558 <UART_CheckIdleState>
 8008ef0:	4603      	mov	r3, r0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b08a      	sub	sp, #40	; 0x28
 8008efe:	af02      	add	r7, sp, #8
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	603b      	str	r3, [r7, #0]
 8008f06:	4613      	mov	r3, r2
 8008f08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f10:	2b20      	cmp	r3, #32
 8008f12:	f040 808b 	bne.w	800902c <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d002      	beq.n	8008f22 <HAL_UART_Transmit+0x28>
 8008f1c:	88fb      	ldrh	r3, [r7, #6]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e083      	b.n	800902e <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f30:	2b80      	cmp	r3, #128	; 0x80
 8008f32:	d107      	bne.n	8008f44 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689a      	ldr	r2, [r3, #8]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f42:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2221      	movs	r2, #33	; 0x21
 8008f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f54:	f7f8 fc46 	bl	80017e4 <HAL_GetTick>
 8008f58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	88fa      	ldrh	r2, [r7, #6]
 8008f5e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	88fa      	ldrh	r2, [r7, #6]
 8008f66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f72:	d108      	bne.n	8008f86 <HAL_UART_Transmit+0x8c>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d104      	bne.n	8008f86 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	61bb      	str	r3, [r7, #24]
 8008f84:	e003      	b.n	8008f8e <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008f8e:	e030      	b.n	8008ff2 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	9300      	str	r3, [sp, #0]
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2200      	movs	r2, #0
 8008f98:	2180      	movs	r1, #128	; 0x80
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f000 fb86 	bl	80096ac <UART_WaitOnFlagUntilTimeout>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d005      	beq.n	8008fb2 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2220      	movs	r2, #32
 8008faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e03d      	b.n	800902e <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10b      	bne.n	8008fd0 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	881b      	ldrh	r3, [r3, #0]
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	3302      	adds	r3, #2
 8008fcc:	61bb      	str	r3, [r7, #24]
 8008fce:	e007      	b.n	8008fe0 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	781a      	ldrb	r2, [r3, #0]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1c8      	bne.n	8008f90 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2200      	movs	r2, #0
 8009006:	2140      	movs	r1, #64	; 0x40
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f000 fb4f 	bl	80096ac <UART_WaitOnFlagUntilTimeout>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d005      	beq.n	8009020 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2220      	movs	r2, #32
 8009018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e006      	b.n	800902e <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2220      	movs	r2, #32
 8009024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	e000      	b.n	800902e <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800902c:	2302      	movs	r3, #2
  }
}
 800902e:	4618      	mov	r0, r3
 8009030:	3720      	adds	r7, #32
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800903c:	b094      	sub	sp, #80	; 0x50
 800903e:	af00      	add	r7, sp, #0
 8009040:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	4b78      	ldr	r3, [pc, #480]	; (8009230 <UART_SetConfig+0x1f8>)
 800904e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	431a      	orrs	r2, r3
 800905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	431a      	orrs	r2, r3
 8009060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009062:	69db      	ldr	r3, [r3, #28]
 8009064:	4313      	orrs	r3, r2
 8009066:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4971      	ldr	r1, [pc, #452]	; (8009234 <UART_SetConfig+0x1fc>)
 8009070:	4019      	ands	r1, r3
 8009072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009078:	430b      	orrs	r3, r1
 800907a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800907c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009088:	68d9      	ldr	r1, [r3, #12]
 800908a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	ea40 0301 	orr.w	r3, r0, r1
 8009092:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	699b      	ldr	r3, [r3, #24]
 8009098:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800909a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	4b64      	ldr	r3, [pc, #400]	; (8009230 <UART_SetConfig+0x1f8>)
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d009      	beq.n	80090b8 <UART_SetConfig+0x80>
 80090a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	4b63      	ldr	r3, [pc, #396]	; (8009238 <UART_SetConfig+0x200>)
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d004      	beq.n	80090b8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80090ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b0:	6a1a      	ldr	r2, [r3, #32]
 80090b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090b4:	4313      	orrs	r3, r2
 80090b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80090c2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80090c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090cc:	430b      	orrs	r3, r1
 80090ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d6:	f023 000f 	bic.w	r0, r3, #15
 80090da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80090de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	ea40 0301 	orr.w	r3, r0, r1
 80090e6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	4b53      	ldr	r3, [pc, #332]	; (800923c <UART_SetConfig+0x204>)
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d102      	bne.n	80090f8 <UART_SetConfig+0xc0>
 80090f2:	2301      	movs	r3, #1
 80090f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80090f6:	e066      	b.n	80091c6 <UART_SetConfig+0x18e>
 80090f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	4b50      	ldr	r3, [pc, #320]	; (8009240 <UART_SetConfig+0x208>)
 80090fe:	429a      	cmp	r2, r3
 8009100:	d102      	bne.n	8009108 <UART_SetConfig+0xd0>
 8009102:	2302      	movs	r3, #2
 8009104:	64bb      	str	r3, [r7, #72]	; 0x48
 8009106:	e05e      	b.n	80091c6 <UART_SetConfig+0x18e>
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	4b4d      	ldr	r3, [pc, #308]	; (8009244 <UART_SetConfig+0x20c>)
 800910e:	429a      	cmp	r2, r3
 8009110:	d102      	bne.n	8009118 <UART_SetConfig+0xe0>
 8009112:	2304      	movs	r3, #4
 8009114:	64bb      	str	r3, [r7, #72]	; 0x48
 8009116:	e056      	b.n	80091c6 <UART_SetConfig+0x18e>
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	4b4a      	ldr	r3, [pc, #296]	; (8009248 <UART_SetConfig+0x210>)
 800911e:	429a      	cmp	r2, r3
 8009120:	d102      	bne.n	8009128 <UART_SetConfig+0xf0>
 8009122:	2308      	movs	r3, #8
 8009124:	64bb      	str	r3, [r7, #72]	; 0x48
 8009126:	e04e      	b.n	80091c6 <UART_SetConfig+0x18e>
 8009128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	4b47      	ldr	r3, [pc, #284]	; (800924c <UART_SetConfig+0x214>)
 800912e:	429a      	cmp	r2, r3
 8009130:	d102      	bne.n	8009138 <UART_SetConfig+0x100>
 8009132:	2310      	movs	r3, #16
 8009134:	64bb      	str	r3, [r7, #72]	; 0x48
 8009136:	e046      	b.n	80091c6 <UART_SetConfig+0x18e>
 8009138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	4b44      	ldr	r3, [pc, #272]	; (8009250 <UART_SetConfig+0x218>)
 800913e:	429a      	cmp	r2, r3
 8009140:	d102      	bne.n	8009148 <UART_SetConfig+0x110>
 8009142:	2320      	movs	r3, #32
 8009144:	64bb      	str	r3, [r7, #72]	; 0x48
 8009146:	e03e      	b.n	80091c6 <UART_SetConfig+0x18e>
 8009148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	4b41      	ldr	r3, [pc, #260]	; (8009254 <UART_SetConfig+0x21c>)
 800914e:	429a      	cmp	r2, r3
 8009150:	d102      	bne.n	8009158 <UART_SetConfig+0x120>
 8009152:	2340      	movs	r3, #64	; 0x40
 8009154:	64bb      	str	r3, [r7, #72]	; 0x48
 8009156:	e036      	b.n	80091c6 <UART_SetConfig+0x18e>
 8009158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	4b3e      	ldr	r3, [pc, #248]	; (8009258 <UART_SetConfig+0x220>)
 800915e:	429a      	cmp	r2, r3
 8009160:	d102      	bne.n	8009168 <UART_SetConfig+0x130>
 8009162:	2380      	movs	r3, #128	; 0x80
 8009164:	64bb      	str	r3, [r7, #72]	; 0x48
 8009166:	e02e      	b.n	80091c6 <UART_SetConfig+0x18e>
 8009168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	4b3b      	ldr	r3, [pc, #236]	; (800925c <UART_SetConfig+0x224>)
 800916e:	429a      	cmp	r2, r3
 8009170:	d103      	bne.n	800917a <UART_SetConfig+0x142>
 8009172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009176:	64bb      	str	r3, [r7, #72]	; 0x48
 8009178:	e025      	b.n	80091c6 <UART_SetConfig+0x18e>
 800917a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	4b38      	ldr	r3, [pc, #224]	; (8009260 <UART_SetConfig+0x228>)
 8009180:	429a      	cmp	r2, r3
 8009182:	d103      	bne.n	800918c <UART_SetConfig+0x154>
 8009184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009188:	64bb      	str	r3, [r7, #72]	; 0x48
 800918a:	e01c      	b.n	80091c6 <UART_SetConfig+0x18e>
 800918c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	4b34      	ldr	r3, [pc, #208]	; (8009264 <UART_SetConfig+0x22c>)
 8009192:	429a      	cmp	r2, r3
 8009194:	d103      	bne.n	800919e <UART_SetConfig+0x166>
 8009196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800919a:	64bb      	str	r3, [r7, #72]	; 0x48
 800919c:	e013      	b.n	80091c6 <UART_SetConfig+0x18e>
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	4b31      	ldr	r3, [pc, #196]	; (8009268 <UART_SetConfig+0x230>)
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d103      	bne.n	80091b0 <UART_SetConfig+0x178>
 80091a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80091ae:	e00a      	b.n	80091c6 <UART_SetConfig+0x18e>
 80091b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	4b1e      	ldr	r3, [pc, #120]	; (8009230 <UART_SetConfig+0x1f8>)
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d103      	bne.n	80091c2 <UART_SetConfig+0x18a>
 80091ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091be:	64bb      	str	r3, [r7, #72]	; 0x48
 80091c0:	e001      	b.n	80091c6 <UART_SetConfig+0x18e>
 80091c2:	2300      	movs	r3, #0
 80091c4:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80091c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	4b19      	ldr	r3, [pc, #100]	; (8009230 <UART_SetConfig+0x1f8>)
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d005      	beq.n	80091dc <UART_SetConfig+0x1a4>
 80091d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	4b18      	ldr	r3, [pc, #96]	; (8009238 <UART_SetConfig+0x200>)
 80091d6:	429a      	cmp	r2, r3
 80091d8:	f040 8094 	bne.w	8009304 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80091dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091de:	2200      	movs	r2, #0
 80091e0:	623b      	str	r3, [r7, #32]
 80091e2:	627a      	str	r2, [r7, #36]	; 0x24
 80091e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80091e8:	f7fc f932 	bl	8005450 <HAL_RCCEx_GetPeriphCLKFreq>
 80091ec:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80091ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 80f7 	beq.w	80093e4 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	4a1c      	ldr	r2, [pc, #112]	; (800926c <UART_SetConfig+0x234>)
 80091fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009200:	461a      	mov	r2, r3
 8009202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009204:	fbb3 f3f2 	udiv	r3, r3, r2
 8009208:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	4613      	mov	r3, r2
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	4413      	add	r3, r2
 8009214:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009216:	429a      	cmp	r2, r3
 8009218:	d305      	bcc.n	8009226 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009222:	429a      	cmp	r2, r3
 8009224:	d924      	bls.n	8009270 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800922c:	e069      	b.n	8009302 <UART_SetConfig+0x2ca>
 800922e:	bf00      	nop
 8009230:	44002400 	.word	0x44002400
 8009234:	cfff69f3 	.word	0xcfff69f3
 8009238:	54002400 	.word	0x54002400
 800923c:	40013800 	.word	0x40013800
 8009240:	40004400 	.word	0x40004400
 8009244:	40004800 	.word	0x40004800
 8009248:	40004c00 	.word	0x40004c00
 800924c:	40005000 	.word	0x40005000
 8009250:	40006400 	.word	0x40006400
 8009254:	40007800 	.word	0x40007800
 8009258:	40007c00 	.word	0x40007c00
 800925c:	40008000 	.word	0x40008000
 8009260:	40006800 	.word	0x40006800
 8009264:	40006c00 	.word	0x40006c00
 8009268:	40008400 	.word	0x40008400
 800926c:	0800abe8 	.word	0x0800abe8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009272:	2200      	movs	r2, #0
 8009274:	61bb      	str	r3, [r7, #24]
 8009276:	61fa      	str	r2, [r7, #28]
 8009278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927c:	4a64      	ldr	r2, [pc, #400]	; (8009410 <UART_SetConfig+0x3d8>)
 800927e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009282:	b29b      	uxth	r3, r3
 8009284:	2200      	movs	r2, #0
 8009286:	613b      	str	r3, [r7, #16]
 8009288:	617a      	str	r2, [r7, #20]
 800928a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800928e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009292:	f7f6 fffb 	bl	800028c <__aeabi_uldivmod>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4610      	mov	r0, r2
 800929c:	4619      	mov	r1, r3
 800929e:	f04f 0200 	mov.w	r2, #0
 80092a2:	f04f 0300 	mov.w	r3, #0
 80092a6:	020b      	lsls	r3, r1, #8
 80092a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092ac:	0202      	lsls	r2, r0, #8
 80092ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092b0:	6849      	ldr	r1, [r1, #4]
 80092b2:	0849      	lsrs	r1, r1, #1
 80092b4:	2000      	movs	r0, #0
 80092b6:	460c      	mov	r4, r1
 80092b8:	4605      	mov	r5, r0
 80092ba:	eb12 0804 	adds.w	r8, r2, r4
 80092be:	eb43 0905 	adc.w	r9, r3, r5
 80092c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	60bb      	str	r3, [r7, #8]
 80092ca:	60fa      	str	r2, [r7, #12]
 80092cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092d0:	4640      	mov	r0, r8
 80092d2:	4649      	mov	r1, r9
 80092d4:	f7f6 ffda 	bl	800028c <__aeabi_uldivmod>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	4613      	mov	r3, r2
 80092de:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092e6:	d308      	bcc.n	80092fa <UART_SetConfig+0x2c2>
 80092e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092ee:	d204      	bcs.n	80092fa <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 80092f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80092f6:	60da      	str	r2, [r3, #12]
 80092f8:	e003      	b.n	8009302 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8009300:	e070      	b.n	80093e4 <UART_SetConfig+0x3ac>
 8009302:	e06f      	b.n	80093e4 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800930c:	d13c      	bne.n	8009388 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800930e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009310:	2200      	movs	r2, #0
 8009312:	603b      	str	r3, [r7, #0]
 8009314:	607a      	str	r2, [r7, #4]
 8009316:	e9d7 0100 	ldrd	r0, r1, [r7]
 800931a:	f7fc f899 	bl	8005450 <HAL_RCCEx_GetPeriphCLKFreq>
 800931e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009322:	2b00      	cmp	r3, #0
 8009324:	d05e      	beq.n	80093e4 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932a:	4a39      	ldr	r2, [pc, #228]	; (8009410 <UART_SetConfig+0x3d8>)
 800932c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009330:	461a      	mov	r2, r3
 8009332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009334:	fbb3 f3f2 	udiv	r3, r3, r2
 8009338:	005a      	lsls	r2, r3, #1
 800933a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	085b      	lsrs	r3, r3, #1
 8009340:	441a      	add	r2, r3
 8009342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	fbb2 f3f3 	udiv	r3, r2, r3
 800934a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800934c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934e:	2b0f      	cmp	r3, #15
 8009350:	d916      	bls.n	8009380 <UART_SetConfig+0x348>
 8009352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009358:	d212      	bcs.n	8009380 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800935a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800935c:	b29b      	uxth	r3, r3
 800935e:	f023 030f 	bic.w	r3, r3, #15
 8009362:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009366:	085b      	lsrs	r3, r3, #1
 8009368:	b29b      	uxth	r3, r3
 800936a:	f003 0307 	and.w	r3, r3, #7
 800936e:	b29a      	uxth	r2, r3
 8009370:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009372:	4313      	orrs	r3, r2
 8009374:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8009376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800937c:	60da      	str	r2, [r3, #12]
 800937e:	e031      	b.n	80093e4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009386:	e02d      	b.n	80093e4 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800938a:	2200      	movs	r2, #0
 800938c:	469a      	mov	sl, r3
 800938e:	4693      	mov	fp, r2
 8009390:	4650      	mov	r0, sl
 8009392:	4659      	mov	r1, fp
 8009394:	f7fc f85c 	bl	8005450 <HAL_RCCEx_GetPeriphCLKFreq>
 8009398:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800939a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800939c:	2b00      	cmp	r3, #0
 800939e:	d021      	beq.n	80093e4 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	4a1a      	ldr	r2, [pc, #104]	; (8009410 <UART_SetConfig+0x3d8>)
 80093a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093aa:	461a      	mov	r2, r3
 80093ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80093b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	085b      	lsrs	r3, r3, #1
 80093b8:	441a      	add	r2, r3
 80093ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	fbb2 f3f3 	udiv	r3, r2, r3
 80093c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c6:	2b0f      	cmp	r3, #15
 80093c8:	d909      	bls.n	80093de <UART_SetConfig+0x3a6>
 80093ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093d0:	d205      	bcs.n	80093de <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	60da      	str	r2, [r3, #12]
 80093dc:	e002      	b.n	80093e4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80093e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e6:	2201      	movs	r2, #1
 80093e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80093ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ee:	2201      	movs	r2, #1
 80093f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f6:	2200      	movs	r2, #0
 80093f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80093fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fc:	2200      	movs	r2, #0
 80093fe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009400:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009404:	4618      	mov	r0, r3
 8009406:	3750      	adds	r7, #80	; 0x50
 8009408:	46bd      	mov	sp, r7
 800940a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800940e:	bf00      	nop
 8009410:	0800abe8 	.word	0x0800abe8

08009414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009420:	f003 0308 	and.w	r3, r3, #8
 8009424:	2b00      	cmp	r3, #0
 8009426:	d00a      	beq.n	800943e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00a      	beq.n	8009460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	430a      	orrs	r2, r1
 800945e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009464:	f003 0302 	and.w	r3, r3, #2
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00a      	beq.n	8009482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009486:	f003 0304 	and.w	r3, r3, #4
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	430a      	orrs	r2, r1
 80094a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a8:	f003 0310 	and.w	r3, r3, #16
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00a      	beq.n	80094c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	430a      	orrs	r2, r1
 80094c4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ca:	f003 0320 	and.w	r3, r3, #32
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d00a      	beq.n	80094e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	430a      	orrs	r2, r1
 80094e6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d01a      	beq.n	800952a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	430a      	orrs	r2, r1
 8009508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009512:	d10a      	bne.n	800952a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	430a      	orrs	r2, r1
 8009528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	430a      	orrs	r2, r1
 800954a:	605a      	str	r2, [r3, #4]
  }
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b098      	sub	sp, #96	; 0x60
 800955c:	af02      	add	r7, sp, #8
 800955e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009568:	f7f8 f93c 	bl	80017e4 <HAL_GetTick>
 800956c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0308 	and.w	r3, r3, #8
 8009578:	2b08      	cmp	r3, #8
 800957a:	d12f      	bne.n	80095dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800957c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009584:	2200      	movs	r2, #0
 8009586:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f88e 	bl	80096ac <UART_WaitOnFlagUntilTimeout>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d022      	beq.n	80095dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959e:	e853 3f00 	ldrex	r3, [r3]
 80095a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095aa:	653b      	str	r3, [r7, #80]	; 0x50
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	461a      	mov	r2, r3
 80095b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095b4:	647b      	str	r3, [r7, #68]	; 0x44
 80095b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095bc:	e841 2300 	strex	r3, r2, [r1]
 80095c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1e6      	bne.n	8009596 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2220      	movs	r2, #32
 80095cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095d8:	2303      	movs	r3, #3
 80095da:	e063      	b.n	80096a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 0304 	and.w	r3, r3, #4
 80095e6:	2b04      	cmp	r3, #4
 80095e8:	d149      	bne.n	800967e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095f2:	2200      	movs	r2, #0
 80095f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 f857 	bl	80096ac <UART_WaitOnFlagUntilTimeout>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d03c      	beq.n	800967e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960c:	e853 3f00 	ldrex	r3, [r3]
 8009610:	623b      	str	r3, [r7, #32]
   return(result);
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009618:	64fb      	str	r3, [r7, #76]	; 0x4c
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009622:	633b      	str	r3, [r7, #48]	; 0x30
 8009624:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e6      	bne.n	8009604 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3308      	adds	r3, #8
 800963c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	e853 3f00 	ldrex	r3, [r3]
 8009644:	60fb      	str	r3, [r7, #12]
   return(result);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f023 0301 	bic.w	r3, r3, #1
 800964c:	64bb      	str	r3, [r7, #72]	; 0x48
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3308      	adds	r3, #8
 8009654:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009656:	61fa      	str	r2, [r7, #28]
 8009658:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965a:	69b9      	ldr	r1, [r7, #24]
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	e841 2300 	strex	r3, r2, [r1]
 8009662:	617b      	str	r3, [r7, #20]
   return(result);
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1e5      	bne.n	8009636 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2220      	movs	r2, #32
 800966e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800967a:	2303      	movs	r3, #3
 800967c:	e012      	b.n	80096a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2220      	movs	r2, #32
 8009682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2220      	movs	r2, #32
 800968a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3758      	adds	r7, #88	; 0x58
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	60f8      	str	r0, [r7, #12]
 80096b4:	60b9      	str	r1, [r7, #8]
 80096b6:	603b      	str	r3, [r7, #0]
 80096b8:	4613      	mov	r3, r2
 80096ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096bc:	e049      	b.n	8009752 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096c4:	d045      	beq.n	8009752 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096c6:	f7f8 f88d 	bl	80017e4 <HAL_GetTick>
 80096ca:	4602      	mov	r2, r0
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	1ad3      	subs	r3, r2, r3
 80096d0:	69ba      	ldr	r2, [r7, #24]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d302      	bcc.n	80096dc <UART_WaitOnFlagUntilTimeout+0x30>
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d101      	bne.n	80096e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e048      	b.n	8009772 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 0304 	and.w	r3, r3, #4
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d031      	beq.n	8009752 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	69db      	ldr	r3, [r3, #28]
 80096f4:	f003 0308 	and.w	r3, r3, #8
 80096f8:	2b08      	cmp	r3, #8
 80096fa:	d110      	bne.n	800971e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	2208      	movs	r2, #8
 8009702:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f000 f838 	bl	800977a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2208      	movs	r2, #8
 800970e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e029      	b.n	8009772 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69db      	ldr	r3, [r3, #28]
 8009724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800972c:	d111      	bne.n	8009752 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009736:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f000 f81e 	bl	800977a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2220      	movs	r2, #32
 8009742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800974e:	2303      	movs	r3, #3
 8009750:	e00f      	b.n	8009772 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	69da      	ldr	r2, [r3, #28]
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	4013      	ands	r3, r2
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	429a      	cmp	r2, r3
 8009760:	bf0c      	ite	eq
 8009762:	2301      	moveq	r3, #1
 8009764:	2300      	movne	r3, #0
 8009766:	b2db      	uxtb	r3, r3
 8009768:	461a      	mov	r2, r3
 800976a:	79fb      	ldrb	r3, [r7, #7]
 800976c:	429a      	cmp	r2, r3
 800976e:	d0a6      	beq.n	80096be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800977a:	b480      	push	{r7}
 800977c:	b095      	sub	sp, #84	; 0x54
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978a:	e853 3f00 	ldrex	r3, [r3]
 800978e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009792:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	461a      	mov	r2, r3
 800979e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a0:	643b      	str	r3, [r7, #64]	; 0x40
 80097a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80097a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097a8:	e841 2300 	strex	r3, r2, [r1]
 80097ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1e6      	bne.n	8009782 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3308      	adds	r3, #8
 80097ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	e853 3f00 	ldrex	r3, [r3]
 80097c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097ca:	f023 0301 	bic.w	r3, r3, #1
 80097ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3308      	adds	r3, #8
 80097d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097e0:	e841 2300 	strex	r3, r2, [r1]
 80097e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e3      	bne.n	80097b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d118      	bne.n	8009826 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	e853 3f00 	ldrex	r3, [r3]
 8009800:	60bb      	str	r3, [r7, #8]
   return(result);
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	f023 0310 	bic.w	r3, r3, #16
 8009808:	647b      	str	r3, [r7, #68]	; 0x44
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	461a      	mov	r2, r3
 8009810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009812:	61bb      	str	r3, [r7, #24]
 8009814:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009816:	6979      	ldr	r1, [r7, #20]
 8009818:	69ba      	ldr	r2, [r7, #24]
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	613b      	str	r3, [r7, #16]
   return(result);
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1e6      	bne.n	80097f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2220      	movs	r2, #32
 800982a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2200      	movs	r2, #0
 8009832:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	675a      	str	r2, [r3, #116]	; 0x74
}
 800983a:	bf00      	nop
 800983c:	3754      	adds	r7, #84	; 0x54
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009846:	b480      	push	{r7}
 8009848:	b085      	sub	sp, #20
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009854:	2b01      	cmp	r3, #1
 8009856:	d101      	bne.n	800985c <HAL_UARTEx_DisableFifoMode+0x16>
 8009858:	2302      	movs	r3, #2
 800985a:	e027      	b.n	80098ac <HAL_UARTEx_DisableFifoMode+0x66>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2224      	movs	r2, #36	; 0x24
 8009868:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 0201 	bic.w	r2, r2, #1
 8009882:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800988a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2220      	movs	r2, #32
 800989e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d101      	bne.n	80098d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098cc:	2302      	movs	r3, #2
 80098ce:	e02d      	b.n	800992c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2224      	movs	r2, #36	; 0x24
 80098dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f022 0201 	bic.w	r2, r2, #1
 80098f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	683a      	ldr	r2, [r7, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f84f 	bl	80099b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2220      	movs	r2, #32
 800991e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009944:	2b01      	cmp	r3, #1
 8009946:	d101      	bne.n	800994c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009948:	2302      	movs	r3, #2
 800994a:	e02d      	b.n	80099a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2224      	movs	r2, #36	; 0x24
 8009958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f022 0201 	bic.w	r2, r2, #1
 8009972:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	430a      	orrs	r2, r1
 8009986:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f811 	bl	80099b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2220      	movs	r2, #32
 800999a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3710      	adds	r7, #16
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d108      	bne.n	80099d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099d0:	e031      	b.n	8009a36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099d2:	2308      	movs	r3, #8
 80099d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099d6:	2308      	movs	r3, #8
 80099d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	0e5b      	lsrs	r3, r3, #25
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	f003 0307 	and.w	r3, r3, #7
 80099e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	0f5b      	lsrs	r3, r3, #29
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	f003 0307 	and.w	r3, r3, #7
 80099f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099fa:	7bbb      	ldrb	r3, [r7, #14]
 80099fc:	7b3a      	ldrb	r2, [r7, #12]
 80099fe:	4911      	ldr	r1, [pc, #68]	; (8009a44 <UARTEx_SetNbDataToProcess+0x94>)
 8009a00:	5c8a      	ldrb	r2, [r1, r2]
 8009a02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a06:	7b3a      	ldrb	r2, [r7, #12]
 8009a08:	490f      	ldr	r1, [pc, #60]	; (8009a48 <UARTEx_SetNbDataToProcess+0x98>)
 8009a0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
 8009a1a:	7b7a      	ldrb	r2, [r7, #13]
 8009a1c:	4909      	ldr	r1, [pc, #36]	; (8009a44 <UARTEx_SetNbDataToProcess+0x94>)
 8009a1e:	5c8a      	ldrb	r2, [r1, r2]
 8009a20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a24:	7b7a      	ldrb	r2, [r7, #13]
 8009a26:	4908      	ldr	r1, [pc, #32]	; (8009a48 <UARTEx_SetNbDataToProcess+0x98>)
 8009a28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a36:	bf00      	nop
 8009a38:	3714      	adds	r7, #20
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	0800ac00 	.word	0x0800ac00
 8009a48:	0800ac08 	.word	0x0800ac08

08009a4c <std>:
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	b510      	push	{r4, lr}
 8009a50:	4604      	mov	r4, r0
 8009a52:	6083      	str	r3, [r0, #8]
 8009a54:	8181      	strh	r1, [r0, #12]
 8009a56:	4619      	mov	r1, r3
 8009a58:	6643      	str	r3, [r0, #100]	; 0x64
 8009a5a:	81c2      	strh	r2, [r0, #14]
 8009a5c:	2208      	movs	r2, #8
 8009a5e:	6183      	str	r3, [r0, #24]
 8009a60:	e9c0 3300 	strd	r3, r3, [r0]
 8009a64:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a68:	305c      	adds	r0, #92	; 0x5c
 8009a6a:	f000 f9f7 	bl	8009e5c <memset>
 8009a6e:	4b0d      	ldr	r3, [pc, #52]	; (8009aa4 <std+0x58>)
 8009a70:	6224      	str	r4, [r4, #32]
 8009a72:	6263      	str	r3, [r4, #36]	; 0x24
 8009a74:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <std+0x5c>)
 8009a76:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a78:	4b0c      	ldr	r3, [pc, #48]	; (8009aac <std+0x60>)
 8009a7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a7c:	4b0c      	ldr	r3, [pc, #48]	; (8009ab0 <std+0x64>)
 8009a7e:	6323      	str	r3, [r4, #48]	; 0x30
 8009a80:	4b0c      	ldr	r3, [pc, #48]	; (8009ab4 <std+0x68>)
 8009a82:	429c      	cmp	r4, r3
 8009a84:	d006      	beq.n	8009a94 <std+0x48>
 8009a86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009a8a:	4294      	cmp	r4, r2
 8009a8c:	d002      	beq.n	8009a94 <std+0x48>
 8009a8e:	33d0      	adds	r3, #208	; 0xd0
 8009a90:	429c      	cmp	r4, r3
 8009a92:	d105      	bne.n	8009aa0 <std+0x54>
 8009a94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a9c:	f000 ba56 	b.w	8009f4c <__retarget_lock_init_recursive>
 8009aa0:	bd10      	pop	{r4, pc}
 8009aa2:	bf00      	nop
 8009aa4:	08009cad 	.word	0x08009cad
 8009aa8:	08009ccf 	.word	0x08009ccf
 8009aac:	08009d07 	.word	0x08009d07
 8009ab0:	08009d2b 	.word	0x08009d2b
 8009ab4:	200001c4 	.word	0x200001c4

08009ab8 <stdio_exit_handler>:
 8009ab8:	4a02      	ldr	r2, [pc, #8]	; (8009ac4 <stdio_exit_handler+0xc>)
 8009aba:	4903      	ldr	r1, [pc, #12]	; (8009ac8 <stdio_exit_handler+0x10>)
 8009abc:	4803      	ldr	r0, [pc, #12]	; (8009acc <stdio_exit_handler+0x14>)
 8009abe:	f000 b869 	b.w	8009b94 <_fwalk_sglue>
 8009ac2:	bf00      	nop
 8009ac4:	2000000c 	.word	0x2000000c
 8009ac8:	0800a7f9 	.word	0x0800a7f9
 8009acc:	20000018 	.word	0x20000018

08009ad0 <cleanup_stdio>:
 8009ad0:	6841      	ldr	r1, [r0, #4]
 8009ad2:	4b0c      	ldr	r3, [pc, #48]	; (8009b04 <cleanup_stdio+0x34>)
 8009ad4:	4299      	cmp	r1, r3
 8009ad6:	b510      	push	{r4, lr}
 8009ad8:	4604      	mov	r4, r0
 8009ada:	d001      	beq.n	8009ae0 <cleanup_stdio+0x10>
 8009adc:	f000 fe8c 	bl	800a7f8 <_fflush_r>
 8009ae0:	68a1      	ldr	r1, [r4, #8]
 8009ae2:	4b09      	ldr	r3, [pc, #36]	; (8009b08 <cleanup_stdio+0x38>)
 8009ae4:	4299      	cmp	r1, r3
 8009ae6:	d002      	beq.n	8009aee <cleanup_stdio+0x1e>
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f000 fe85 	bl	800a7f8 <_fflush_r>
 8009aee:	68e1      	ldr	r1, [r4, #12]
 8009af0:	4b06      	ldr	r3, [pc, #24]	; (8009b0c <cleanup_stdio+0x3c>)
 8009af2:	4299      	cmp	r1, r3
 8009af4:	d004      	beq.n	8009b00 <cleanup_stdio+0x30>
 8009af6:	4620      	mov	r0, r4
 8009af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009afc:	f000 be7c 	b.w	800a7f8 <_fflush_r>
 8009b00:	bd10      	pop	{r4, pc}
 8009b02:	bf00      	nop
 8009b04:	200001c4 	.word	0x200001c4
 8009b08:	2000022c 	.word	0x2000022c
 8009b0c:	20000294 	.word	0x20000294

08009b10 <global_stdio_init.part.0>:
 8009b10:	b510      	push	{r4, lr}
 8009b12:	4b0b      	ldr	r3, [pc, #44]	; (8009b40 <global_stdio_init.part.0+0x30>)
 8009b14:	2104      	movs	r1, #4
 8009b16:	4c0b      	ldr	r4, [pc, #44]	; (8009b44 <global_stdio_init.part.0+0x34>)
 8009b18:	4a0b      	ldr	r2, [pc, #44]	; (8009b48 <global_stdio_init.part.0+0x38>)
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f7ff ff94 	bl	8009a4c <std>
 8009b24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009b28:	2201      	movs	r2, #1
 8009b2a:	2109      	movs	r1, #9
 8009b2c:	f7ff ff8e 	bl	8009a4c <std>
 8009b30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009b34:	2202      	movs	r2, #2
 8009b36:	2112      	movs	r1, #18
 8009b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b3c:	f7ff bf86 	b.w	8009a4c <std>
 8009b40:	200002fc 	.word	0x200002fc
 8009b44:	200001c4 	.word	0x200001c4
 8009b48:	08009ab9 	.word	0x08009ab9

08009b4c <__sfp_lock_acquire>:
 8009b4c:	4801      	ldr	r0, [pc, #4]	; (8009b54 <__sfp_lock_acquire+0x8>)
 8009b4e:	f000 b9fe 	b.w	8009f4e <__retarget_lock_acquire_recursive>
 8009b52:	bf00      	nop
 8009b54:	20000305 	.word	0x20000305

08009b58 <__sfp_lock_release>:
 8009b58:	4801      	ldr	r0, [pc, #4]	; (8009b60 <__sfp_lock_release+0x8>)
 8009b5a:	f000 b9f9 	b.w	8009f50 <__retarget_lock_release_recursive>
 8009b5e:	bf00      	nop
 8009b60:	20000305 	.word	0x20000305

08009b64 <__sinit>:
 8009b64:	b510      	push	{r4, lr}
 8009b66:	4604      	mov	r4, r0
 8009b68:	f7ff fff0 	bl	8009b4c <__sfp_lock_acquire>
 8009b6c:	6a23      	ldr	r3, [r4, #32]
 8009b6e:	b11b      	cbz	r3, 8009b78 <__sinit+0x14>
 8009b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b74:	f7ff bff0 	b.w	8009b58 <__sfp_lock_release>
 8009b78:	4b04      	ldr	r3, [pc, #16]	; (8009b8c <__sinit+0x28>)
 8009b7a:	6223      	str	r3, [r4, #32]
 8009b7c:	4b04      	ldr	r3, [pc, #16]	; (8009b90 <__sinit+0x2c>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1f5      	bne.n	8009b70 <__sinit+0xc>
 8009b84:	f7ff ffc4 	bl	8009b10 <global_stdio_init.part.0>
 8009b88:	e7f2      	b.n	8009b70 <__sinit+0xc>
 8009b8a:	bf00      	nop
 8009b8c:	08009ad1 	.word	0x08009ad1
 8009b90:	200002fc 	.word	0x200002fc

08009b94 <_fwalk_sglue>:
 8009b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b98:	4607      	mov	r7, r0
 8009b9a:	4688      	mov	r8, r1
 8009b9c:	4614      	mov	r4, r2
 8009b9e:	2600      	movs	r6, #0
 8009ba0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ba4:	f1b9 0901 	subs.w	r9, r9, #1
 8009ba8:	d505      	bpl.n	8009bb6 <_fwalk_sglue+0x22>
 8009baa:	6824      	ldr	r4, [r4, #0]
 8009bac:	2c00      	cmp	r4, #0
 8009bae:	d1f7      	bne.n	8009ba0 <_fwalk_sglue+0xc>
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bb6:	89ab      	ldrh	r3, [r5, #12]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d907      	bls.n	8009bcc <_fwalk_sglue+0x38>
 8009bbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	d003      	beq.n	8009bcc <_fwalk_sglue+0x38>
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	47c0      	blx	r8
 8009bca:	4306      	orrs	r6, r0
 8009bcc:	3568      	adds	r5, #104	; 0x68
 8009bce:	e7e9      	b.n	8009ba4 <_fwalk_sglue+0x10>

08009bd0 <iprintf>:
 8009bd0:	b40f      	push	{r0, r1, r2, r3}
 8009bd2:	b507      	push	{r0, r1, r2, lr}
 8009bd4:	4906      	ldr	r1, [pc, #24]	; (8009bf0 <iprintf+0x20>)
 8009bd6:	ab04      	add	r3, sp, #16
 8009bd8:	6808      	ldr	r0, [r1, #0]
 8009bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bde:	6881      	ldr	r1, [r0, #8]
 8009be0:	9301      	str	r3, [sp, #4]
 8009be2:	f000 fad9 	bl	800a198 <_vfiprintf_r>
 8009be6:	b003      	add	sp, #12
 8009be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bec:	b004      	add	sp, #16
 8009bee:	4770      	bx	lr
 8009bf0:	20000064 	.word	0x20000064

08009bf4 <_puts_r>:
 8009bf4:	6a03      	ldr	r3, [r0, #32]
 8009bf6:	b570      	push	{r4, r5, r6, lr}
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	460e      	mov	r6, r1
 8009bfc:	6884      	ldr	r4, [r0, #8]
 8009bfe:	b90b      	cbnz	r3, 8009c04 <_puts_r+0x10>
 8009c00:	f7ff ffb0 	bl	8009b64 <__sinit>
 8009c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c06:	07db      	lsls	r3, r3, #31
 8009c08:	d405      	bmi.n	8009c16 <_puts_r+0x22>
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	0598      	lsls	r0, r3, #22
 8009c0e:	d402      	bmi.n	8009c16 <_puts_r+0x22>
 8009c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c12:	f000 f99c 	bl	8009f4e <__retarget_lock_acquire_recursive>
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	0719      	lsls	r1, r3, #28
 8009c1a:	d513      	bpl.n	8009c44 <_puts_r+0x50>
 8009c1c:	6923      	ldr	r3, [r4, #16]
 8009c1e:	b18b      	cbz	r3, 8009c44 <_puts_r+0x50>
 8009c20:	3e01      	subs	r6, #1
 8009c22:	68a3      	ldr	r3, [r4, #8]
 8009c24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	60a3      	str	r3, [r4, #8]
 8009c2c:	b9e9      	cbnz	r1, 8009c6a <_puts_r+0x76>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	da2e      	bge.n	8009c90 <_puts_r+0x9c>
 8009c32:	4622      	mov	r2, r4
 8009c34:	210a      	movs	r1, #10
 8009c36:	4628      	mov	r0, r5
 8009c38:	f000 f87b 	bl	8009d32 <__swbuf_r>
 8009c3c:	3001      	adds	r0, #1
 8009c3e:	d007      	beq.n	8009c50 <_puts_r+0x5c>
 8009c40:	250a      	movs	r5, #10
 8009c42:	e007      	b.n	8009c54 <_puts_r+0x60>
 8009c44:	4621      	mov	r1, r4
 8009c46:	4628      	mov	r0, r5
 8009c48:	f000 f8b0 	bl	8009dac <__swsetup_r>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	d0e7      	beq.n	8009c20 <_puts_r+0x2c>
 8009c50:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009c54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c56:	07da      	lsls	r2, r3, #31
 8009c58:	d405      	bmi.n	8009c66 <_puts_r+0x72>
 8009c5a:	89a3      	ldrh	r3, [r4, #12]
 8009c5c:	059b      	lsls	r3, r3, #22
 8009c5e:	d402      	bmi.n	8009c66 <_puts_r+0x72>
 8009c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c62:	f000 f975 	bl	8009f50 <__retarget_lock_release_recursive>
 8009c66:	4628      	mov	r0, r5
 8009c68:	bd70      	pop	{r4, r5, r6, pc}
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	da04      	bge.n	8009c78 <_puts_r+0x84>
 8009c6e:	69a2      	ldr	r2, [r4, #24]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	dc06      	bgt.n	8009c82 <_puts_r+0x8e>
 8009c74:	290a      	cmp	r1, #10
 8009c76:	d004      	beq.n	8009c82 <_puts_r+0x8e>
 8009c78:	6823      	ldr	r3, [r4, #0]
 8009c7a:	1c5a      	adds	r2, r3, #1
 8009c7c:	6022      	str	r2, [r4, #0]
 8009c7e:	7019      	strb	r1, [r3, #0]
 8009c80:	e7cf      	b.n	8009c22 <_puts_r+0x2e>
 8009c82:	4622      	mov	r2, r4
 8009c84:	4628      	mov	r0, r5
 8009c86:	f000 f854 	bl	8009d32 <__swbuf_r>
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	d1c9      	bne.n	8009c22 <_puts_r+0x2e>
 8009c8e:	e7df      	b.n	8009c50 <_puts_r+0x5c>
 8009c90:	6823      	ldr	r3, [r4, #0]
 8009c92:	250a      	movs	r5, #10
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	6022      	str	r2, [r4, #0]
 8009c98:	701d      	strb	r5, [r3, #0]
 8009c9a:	e7db      	b.n	8009c54 <_puts_r+0x60>

08009c9c <puts>:
 8009c9c:	4b02      	ldr	r3, [pc, #8]	; (8009ca8 <puts+0xc>)
 8009c9e:	4601      	mov	r1, r0
 8009ca0:	6818      	ldr	r0, [r3, #0]
 8009ca2:	f7ff bfa7 	b.w	8009bf4 <_puts_r>
 8009ca6:	bf00      	nop
 8009ca8:	20000064 	.word	0x20000064

08009cac <__sread>:
 8009cac:	b510      	push	{r4, lr}
 8009cae:	460c      	mov	r4, r1
 8009cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb4:	f000 f8fc 	bl	8009eb0 <_read_r>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	bfab      	itete	ge
 8009cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8009cc0:	181b      	addge	r3, r3, r0
 8009cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cc6:	bfac      	ite	ge
 8009cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cca:	81a3      	strhlt	r3, [r4, #12]
 8009ccc:	bd10      	pop	{r4, pc}

08009cce <__swrite>:
 8009cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd2:	461f      	mov	r7, r3
 8009cd4:	898b      	ldrh	r3, [r1, #12]
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	460c      	mov	r4, r1
 8009cda:	05db      	lsls	r3, r3, #23
 8009cdc:	4616      	mov	r6, r2
 8009cde:	d505      	bpl.n	8009cec <__swrite+0x1e>
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce8:	f000 f8d0 	bl	8009e8c <_lseek_r>
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	4632      	mov	r2, r6
 8009cf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cfa:	81a3      	strh	r3, [r4, #12]
 8009cfc:	463b      	mov	r3, r7
 8009cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d02:	f000 b8e7 	b.w	8009ed4 <_write_r>

08009d06 <__sseek>:
 8009d06:	b510      	push	{r4, lr}
 8009d08:	460c      	mov	r4, r1
 8009d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d0e:	f000 f8bd 	bl	8009e8c <_lseek_r>
 8009d12:	1c43      	adds	r3, r0, #1
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	bf15      	itete	ne
 8009d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d22:	81a3      	strheq	r3, [r4, #12]
 8009d24:	bf18      	it	ne
 8009d26:	81a3      	strhne	r3, [r4, #12]
 8009d28:	bd10      	pop	{r4, pc}

08009d2a <__sclose>:
 8009d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d2e:	f000 b89d 	b.w	8009e6c <_close_r>

08009d32 <__swbuf_r>:
 8009d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d34:	460e      	mov	r6, r1
 8009d36:	4614      	mov	r4, r2
 8009d38:	4605      	mov	r5, r0
 8009d3a:	b118      	cbz	r0, 8009d44 <__swbuf_r+0x12>
 8009d3c:	6a03      	ldr	r3, [r0, #32]
 8009d3e:	b90b      	cbnz	r3, 8009d44 <__swbuf_r+0x12>
 8009d40:	f7ff ff10 	bl	8009b64 <__sinit>
 8009d44:	69a3      	ldr	r3, [r4, #24]
 8009d46:	60a3      	str	r3, [r4, #8]
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	071a      	lsls	r2, r3, #28
 8009d4c:	d525      	bpl.n	8009d9a <__swbuf_r+0x68>
 8009d4e:	6923      	ldr	r3, [r4, #16]
 8009d50:	b31b      	cbz	r3, 8009d9a <__swbuf_r+0x68>
 8009d52:	6823      	ldr	r3, [r4, #0]
 8009d54:	b2f6      	uxtb	r6, r6
 8009d56:	6922      	ldr	r2, [r4, #16]
 8009d58:	4637      	mov	r7, r6
 8009d5a:	1a98      	subs	r0, r3, r2
 8009d5c:	6963      	ldr	r3, [r4, #20]
 8009d5e:	4283      	cmp	r3, r0
 8009d60:	dc04      	bgt.n	8009d6c <__swbuf_r+0x3a>
 8009d62:	4621      	mov	r1, r4
 8009d64:	4628      	mov	r0, r5
 8009d66:	f000 fd47 	bl	800a7f8 <_fflush_r>
 8009d6a:	b9e0      	cbnz	r0, 8009da6 <__swbuf_r+0x74>
 8009d6c:	68a3      	ldr	r3, [r4, #8]
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	60a3      	str	r3, [r4, #8]
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	1c5a      	adds	r2, r3, #1
 8009d76:	6022      	str	r2, [r4, #0]
 8009d78:	701e      	strb	r6, [r3, #0]
 8009d7a:	1c43      	adds	r3, r0, #1
 8009d7c:	6962      	ldr	r2, [r4, #20]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d004      	beq.n	8009d8c <__swbuf_r+0x5a>
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	07db      	lsls	r3, r3, #31
 8009d86:	d506      	bpl.n	8009d96 <__swbuf_r+0x64>
 8009d88:	2e0a      	cmp	r6, #10
 8009d8a:	d104      	bne.n	8009d96 <__swbuf_r+0x64>
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f000 fd32 	bl	800a7f8 <_fflush_r>
 8009d94:	b938      	cbnz	r0, 8009da6 <__swbuf_r+0x74>
 8009d96:	4638      	mov	r0, r7
 8009d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d9a:	4621      	mov	r1, r4
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	f000 f805 	bl	8009dac <__swsetup_r>
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d0d5      	beq.n	8009d52 <__swbuf_r+0x20>
 8009da6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009daa:	e7f4      	b.n	8009d96 <__swbuf_r+0x64>

08009dac <__swsetup_r>:
 8009dac:	b538      	push	{r3, r4, r5, lr}
 8009dae:	4b2a      	ldr	r3, [pc, #168]	; (8009e58 <__swsetup_r+0xac>)
 8009db0:	4605      	mov	r5, r0
 8009db2:	460c      	mov	r4, r1
 8009db4:	6818      	ldr	r0, [r3, #0]
 8009db6:	b118      	cbz	r0, 8009dc0 <__swsetup_r+0x14>
 8009db8:	6a03      	ldr	r3, [r0, #32]
 8009dba:	b90b      	cbnz	r3, 8009dc0 <__swsetup_r+0x14>
 8009dbc:	f7ff fed2 	bl	8009b64 <__sinit>
 8009dc0:	89a3      	ldrh	r3, [r4, #12]
 8009dc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009dc6:	0718      	lsls	r0, r3, #28
 8009dc8:	d422      	bmi.n	8009e10 <__swsetup_r+0x64>
 8009dca:	06d9      	lsls	r1, r3, #27
 8009dcc:	d407      	bmi.n	8009dde <__swsetup_r+0x32>
 8009dce:	2309      	movs	r3, #9
 8009dd0:	602b      	str	r3, [r5, #0]
 8009dd2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dda:	81a3      	strh	r3, [r4, #12]
 8009ddc:	e034      	b.n	8009e48 <__swsetup_r+0x9c>
 8009dde:	0758      	lsls	r0, r3, #29
 8009de0:	d512      	bpl.n	8009e08 <__swsetup_r+0x5c>
 8009de2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009de4:	b141      	cbz	r1, 8009df8 <__swsetup_r+0x4c>
 8009de6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dea:	4299      	cmp	r1, r3
 8009dec:	d002      	beq.n	8009df4 <__swsetup_r+0x48>
 8009dee:	4628      	mov	r0, r5
 8009df0:	f000 f8b0 	bl	8009f54 <_free_r>
 8009df4:	2300      	movs	r3, #0
 8009df6:	6363      	str	r3, [r4, #52]	; 0x34
 8009df8:	89a3      	ldrh	r3, [r4, #12]
 8009dfa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dfe:	81a3      	strh	r3, [r4, #12]
 8009e00:	2300      	movs	r3, #0
 8009e02:	6063      	str	r3, [r4, #4]
 8009e04:	6923      	ldr	r3, [r4, #16]
 8009e06:	6023      	str	r3, [r4, #0]
 8009e08:	89a3      	ldrh	r3, [r4, #12]
 8009e0a:	f043 0308 	orr.w	r3, r3, #8
 8009e0e:	81a3      	strh	r3, [r4, #12]
 8009e10:	6923      	ldr	r3, [r4, #16]
 8009e12:	b94b      	cbnz	r3, 8009e28 <__swsetup_r+0x7c>
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e1e:	d003      	beq.n	8009e28 <__swsetup_r+0x7c>
 8009e20:	4621      	mov	r1, r4
 8009e22:	4628      	mov	r0, r5
 8009e24:	f000 fd35 	bl	800a892 <__smakebuf_r>
 8009e28:	89a0      	ldrh	r0, [r4, #12]
 8009e2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e2e:	f010 0301 	ands.w	r3, r0, #1
 8009e32:	d00a      	beq.n	8009e4a <__swsetup_r+0x9e>
 8009e34:	2300      	movs	r3, #0
 8009e36:	60a3      	str	r3, [r4, #8]
 8009e38:	6963      	ldr	r3, [r4, #20]
 8009e3a:	425b      	negs	r3, r3
 8009e3c:	61a3      	str	r3, [r4, #24]
 8009e3e:	6923      	ldr	r3, [r4, #16]
 8009e40:	b943      	cbnz	r3, 8009e54 <__swsetup_r+0xa8>
 8009e42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e46:	d1c4      	bne.n	8009dd2 <__swsetup_r+0x26>
 8009e48:	bd38      	pop	{r3, r4, r5, pc}
 8009e4a:	0781      	lsls	r1, r0, #30
 8009e4c:	bf58      	it	pl
 8009e4e:	6963      	ldrpl	r3, [r4, #20]
 8009e50:	60a3      	str	r3, [r4, #8]
 8009e52:	e7f4      	b.n	8009e3e <__swsetup_r+0x92>
 8009e54:	2000      	movs	r0, #0
 8009e56:	e7f7      	b.n	8009e48 <__swsetup_r+0x9c>
 8009e58:	20000064 	.word	0x20000064

08009e5c <memset>:
 8009e5c:	4402      	add	r2, r0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d100      	bne.n	8009e66 <memset+0xa>
 8009e64:	4770      	bx	lr
 8009e66:	f803 1b01 	strb.w	r1, [r3], #1
 8009e6a:	e7f9      	b.n	8009e60 <memset+0x4>

08009e6c <_close_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	2300      	movs	r3, #0
 8009e70:	4d05      	ldr	r5, [pc, #20]	; (8009e88 <_close_r+0x1c>)
 8009e72:	4604      	mov	r4, r0
 8009e74:	4608      	mov	r0, r1
 8009e76:	602b      	str	r3, [r5, #0]
 8009e78:	f7f7 fb33 	bl	80014e2 <_close>
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	d102      	bne.n	8009e86 <_close_r+0x1a>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	b103      	cbz	r3, 8009e86 <_close_r+0x1a>
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	20000300 	.word	0x20000300

08009e8c <_lseek_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4604      	mov	r4, r0
 8009e90:	4d06      	ldr	r5, [pc, #24]	; (8009eac <_lseek_r+0x20>)
 8009e92:	4608      	mov	r0, r1
 8009e94:	4611      	mov	r1, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	602a      	str	r2, [r5, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f7f7 fb48 	bl	8001530 <_lseek>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d102      	bne.n	8009eaa <_lseek_r+0x1e>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	b103      	cbz	r3, 8009eaa <_lseek_r+0x1e>
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	20000300 	.word	0x20000300

08009eb0 <_read_r>:
 8009eb0:	b538      	push	{r3, r4, r5, lr}
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4d06      	ldr	r5, [pc, #24]	; (8009ed0 <_read_r+0x20>)
 8009eb6:	4608      	mov	r0, r1
 8009eb8:	4611      	mov	r1, r2
 8009eba:	2200      	movs	r2, #0
 8009ebc:	602a      	str	r2, [r5, #0]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	f7f7 fad6 	bl	8001470 <_read>
 8009ec4:	1c43      	adds	r3, r0, #1
 8009ec6:	d102      	bne.n	8009ece <_read_r+0x1e>
 8009ec8:	682b      	ldr	r3, [r5, #0]
 8009eca:	b103      	cbz	r3, 8009ece <_read_r+0x1e>
 8009ecc:	6023      	str	r3, [r4, #0]
 8009ece:	bd38      	pop	{r3, r4, r5, pc}
 8009ed0:	20000300 	.word	0x20000300

08009ed4 <_write_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	4d06      	ldr	r5, [pc, #24]	; (8009ef4 <_write_r+0x20>)
 8009eda:	4608      	mov	r0, r1
 8009edc:	4611      	mov	r1, r2
 8009ede:	2200      	movs	r2, #0
 8009ee0:	602a      	str	r2, [r5, #0]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	f7f7 fae1 	bl	80014aa <_write>
 8009ee8:	1c43      	adds	r3, r0, #1
 8009eea:	d102      	bne.n	8009ef2 <_write_r+0x1e>
 8009eec:	682b      	ldr	r3, [r5, #0]
 8009eee:	b103      	cbz	r3, 8009ef2 <_write_r+0x1e>
 8009ef0:	6023      	str	r3, [r4, #0]
 8009ef2:	bd38      	pop	{r3, r4, r5, pc}
 8009ef4:	20000300 	.word	0x20000300

08009ef8 <__errno>:
 8009ef8:	4b01      	ldr	r3, [pc, #4]	; (8009f00 <__errno+0x8>)
 8009efa:	6818      	ldr	r0, [r3, #0]
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	20000064 	.word	0x20000064

08009f04 <__libc_init_array>:
 8009f04:	b570      	push	{r4, r5, r6, lr}
 8009f06:	4d0d      	ldr	r5, [pc, #52]	; (8009f3c <__libc_init_array+0x38>)
 8009f08:	2600      	movs	r6, #0
 8009f0a:	4c0d      	ldr	r4, [pc, #52]	; (8009f40 <__libc_init_array+0x3c>)
 8009f0c:	1b64      	subs	r4, r4, r5
 8009f0e:	10a4      	asrs	r4, r4, #2
 8009f10:	42a6      	cmp	r6, r4
 8009f12:	d109      	bne.n	8009f28 <__libc_init_array+0x24>
 8009f14:	4d0b      	ldr	r5, [pc, #44]	; (8009f44 <__libc_init_array+0x40>)
 8009f16:	2600      	movs	r6, #0
 8009f18:	4c0b      	ldr	r4, [pc, #44]	; (8009f48 <__libc_init_array+0x44>)
 8009f1a:	f000 fd37 	bl	800a98c <_init>
 8009f1e:	1b64      	subs	r4, r4, r5
 8009f20:	10a4      	asrs	r4, r4, #2
 8009f22:	42a6      	cmp	r6, r4
 8009f24:	d105      	bne.n	8009f32 <__libc_init_array+0x2e>
 8009f26:	bd70      	pop	{r4, r5, r6, pc}
 8009f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f2c:	3601      	adds	r6, #1
 8009f2e:	4798      	blx	r3
 8009f30:	e7ee      	b.n	8009f10 <__libc_init_array+0xc>
 8009f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f36:	3601      	adds	r6, #1
 8009f38:	4798      	blx	r3
 8009f3a:	e7f2      	b.n	8009f22 <__libc_init_array+0x1e>
 8009f3c:	0800ac4c 	.word	0x0800ac4c
 8009f40:	0800ac4c 	.word	0x0800ac4c
 8009f44:	0800ac4c 	.word	0x0800ac4c
 8009f48:	0800ac50 	.word	0x0800ac50

08009f4c <__retarget_lock_init_recursive>:
 8009f4c:	4770      	bx	lr

08009f4e <__retarget_lock_acquire_recursive>:
 8009f4e:	4770      	bx	lr

08009f50 <__retarget_lock_release_recursive>:
 8009f50:	4770      	bx	lr
	...

08009f54 <_free_r>:
 8009f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f56:	2900      	cmp	r1, #0
 8009f58:	d043      	beq.n	8009fe2 <_free_r+0x8e>
 8009f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f5e:	1f0c      	subs	r4, r1, #4
 8009f60:	9001      	str	r0, [sp, #4]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	bfb8      	it	lt
 8009f66:	18e4      	addlt	r4, r4, r3
 8009f68:	f000 f8e0 	bl	800a12c <__malloc_lock>
 8009f6c:	4a1e      	ldr	r2, [pc, #120]	; (8009fe8 <_free_r+0x94>)
 8009f6e:	9801      	ldr	r0, [sp, #4]
 8009f70:	6813      	ldr	r3, [r2, #0]
 8009f72:	b933      	cbnz	r3, 8009f82 <_free_r+0x2e>
 8009f74:	6063      	str	r3, [r4, #4]
 8009f76:	6014      	str	r4, [r2, #0]
 8009f78:	b003      	add	sp, #12
 8009f7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f7e:	f000 b8db 	b.w	800a138 <__malloc_unlock>
 8009f82:	42a3      	cmp	r3, r4
 8009f84:	d908      	bls.n	8009f98 <_free_r+0x44>
 8009f86:	6825      	ldr	r5, [r4, #0]
 8009f88:	1961      	adds	r1, r4, r5
 8009f8a:	428b      	cmp	r3, r1
 8009f8c:	bf01      	itttt	eq
 8009f8e:	6819      	ldreq	r1, [r3, #0]
 8009f90:	685b      	ldreq	r3, [r3, #4]
 8009f92:	1949      	addeq	r1, r1, r5
 8009f94:	6021      	streq	r1, [r4, #0]
 8009f96:	e7ed      	b.n	8009f74 <_free_r+0x20>
 8009f98:	461a      	mov	r2, r3
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	b10b      	cbz	r3, 8009fa2 <_free_r+0x4e>
 8009f9e:	42a3      	cmp	r3, r4
 8009fa0:	d9fa      	bls.n	8009f98 <_free_r+0x44>
 8009fa2:	6811      	ldr	r1, [r2, #0]
 8009fa4:	1855      	adds	r5, r2, r1
 8009fa6:	42a5      	cmp	r5, r4
 8009fa8:	d10b      	bne.n	8009fc2 <_free_r+0x6e>
 8009faa:	6824      	ldr	r4, [r4, #0]
 8009fac:	4421      	add	r1, r4
 8009fae:	1854      	adds	r4, r2, r1
 8009fb0:	6011      	str	r1, [r2, #0]
 8009fb2:	42a3      	cmp	r3, r4
 8009fb4:	d1e0      	bne.n	8009f78 <_free_r+0x24>
 8009fb6:	681c      	ldr	r4, [r3, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	440c      	add	r4, r1
 8009fbc:	6053      	str	r3, [r2, #4]
 8009fbe:	6014      	str	r4, [r2, #0]
 8009fc0:	e7da      	b.n	8009f78 <_free_r+0x24>
 8009fc2:	d902      	bls.n	8009fca <_free_r+0x76>
 8009fc4:	230c      	movs	r3, #12
 8009fc6:	6003      	str	r3, [r0, #0]
 8009fc8:	e7d6      	b.n	8009f78 <_free_r+0x24>
 8009fca:	6825      	ldr	r5, [r4, #0]
 8009fcc:	1961      	adds	r1, r4, r5
 8009fce:	428b      	cmp	r3, r1
 8009fd0:	bf02      	ittt	eq
 8009fd2:	6819      	ldreq	r1, [r3, #0]
 8009fd4:	685b      	ldreq	r3, [r3, #4]
 8009fd6:	1949      	addeq	r1, r1, r5
 8009fd8:	6063      	str	r3, [r4, #4]
 8009fda:	bf08      	it	eq
 8009fdc:	6021      	streq	r1, [r4, #0]
 8009fde:	6054      	str	r4, [r2, #4]
 8009fe0:	e7ca      	b.n	8009f78 <_free_r+0x24>
 8009fe2:	b003      	add	sp, #12
 8009fe4:	bd30      	pop	{r4, r5, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20000308 	.word	0x20000308

08009fec <sbrk_aligned>:
 8009fec:	b570      	push	{r4, r5, r6, lr}
 8009fee:	4e0e      	ldr	r6, [pc, #56]	; (800a028 <sbrk_aligned+0x3c>)
 8009ff0:	460c      	mov	r4, r1
 8009ff2:	4605      	mov	r5, r0
 8009ff4:	6831      	ldr	r1, [r6, #0]
 8009ff6:	b911      	cbnz	r1, 8009ffe <sbrk_aligned+0x12>
 8009ff8:	f000 fcaa 	bl	800a950 <_sbrk_r>
 8009ffc:	6030      	str	r0, [r6, #0]
 8009ffe:	4621      	mov	r1, r4
 800a000:	4628      	mov	r0, r5
 800a002:	f000 fca5 	bl	800a950 <_sbrk_r>
 800a006:	1c43      	adds	r3, r0, #1
 800a008:	d00a      	beq.n	800a020 <sbrk_aligned+0x34>
 800a00a:	1cc4      	adds	r4, r0, #3
 800a00c:	f024 0403 	bic.w	r4, r4, #3
 800a010:	42a0      	cmp	r0, r4
 800a012:	d007      	beq.n	800a024 <sbrk_aligned+0x38>
 800a014:	1a21      	subs	r1, r4, r0
 800a016:	4628      	mov	r0, r5
 800a018:	f000 fc9a 	bl	800a950 <_sbrk_r>
 800a01c:	3001      	adds	r0, #1
 800a01e:	d101      	bne.n	800a024 <sbrk_aligned+0x38>
 800a020:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a024:	4620      	mov	r0, r4
 800a026:	bd70      	pop	{r4, r5, r6, pc}
 800a028:	2000030c 	.word	0x2000030c

0800a02c <_malloc_r>:
 800a02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a030:	1ccd      	adds	r5, r1, #3
 800a032:	4607      	mov	r7, r0
 800a034:	f025 0503 	bic.w	r5, r5, #3
 800a038:	3508      	adds	r5, #8
 800a03a:	2d0c      	cmp	r5, #12
 800a03c:	bf38      	it	cc
 800a03e:	250c      	movcc	r5, #12
 800a040:	2d00      	cmp	r5, #0
 800a042:	db01      	blt.n	800a048 <_malloc_r+0x1c>
 800a044:	42a9      	cmp	r1, r5
 800a046:	d905      	bls.n	800a054 <_malloc_r+0x28>
 800a048:	230c      	movs	r3, #12
 800a04a:	2600      	movs	r6, #0
 800a04c:	603b      	str	r3, [r7, #0]
 800a04e:	4630      	mov	r0, r6
 800a050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a054:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a128 <_malloc_r+0xfc>
 800a058:	f000 f868 	bl	800a12c <__malloc_lock>
 800a05c:	f8d8 3000 	ldr.w	r3, [r8]
 800a060:	461c      	mov	r4, r3
 800a062:	bb5c      	cbnz	r4, 800a0bc <_malloc_r+0x90>
 800a064:	4629      	mov	r1, r5
 800a066:	4638      	mov	r0, r7
 800a068:	f7ff ffc0 	bl	8009fec <sbrk_aligned>
 800a06c:	1c43      	adds	r3, r0, #1
 800a06e:	4604      	mov	r4, r0
 800a070:	d155      	bne.n	800a11e <_malloc_r+0xf2>
 800a072:	f8d8 4000 	ldr.w	r4, [r8]
 800a076:	4626      	mov	r6, r4
 800a078:	2e00      	cmp	r6, #0
 800a07a:	d145      	bne.n	800a108 <_malloc_r+0xdc>
 800a07c:	2c00      	cmp	r4, #0
 800a07e:	d048      	beq.n	800a112 <_malloc_r+0xe6>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	4631      	mov	r1, r6
 800a084:	4638      	mov	r0, r7
 800a086:	eb04 0903 	add.w	r9, r4, r3
 800a08a:	f000 fc61 	bl	800a950 <_sbrk_r>
 800a08e:	4581      	cmp	r9, r0
 800a090:	d13f      	bne.n	800a112 <_malloc_r+0xe6>
 800a092:	6821      	ldr	r1, [r4, #0]
 800a094:	4638      	mov	r0, r7
 800a096:	1a6d      	subs	r5, r5, r1
 800a098:	4629      	mov	r1, r5
 800a09a:	f7ff ffa7 	bl	8009fec <sbrk_aligned>
 800a09e:	3001      	adds	r0, #1
 800a0a0:	d037      	beq.n	800a112 <_malloc_r+0xe6>
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	442b      	add	r3, r5
 800a0a6:	6023      	str	r3, [r4, #0]
 800a0a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d038      	beq.n	800a122 <_malloc_r+0xf6>
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	42a2      	cmp	r2, r4
 800a0b4:	d12b      	bne.n	800a10e <_malloc_r+0xe2>
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	605a      	str	r2, [r3, #4]
 800a0ba:	e00f      	b.n	800a0dc <_malloc_r+0xb0>
 800a0bc:	6822      	ldr	r2, [r4, #0]
 800a0be:	1b52      	subs	r2, r2, r5
 800a0c0:	d41f      	bmi.n	800a102 <_malloc_r+0xd6>
 800a0c2:	2a0b      	cmp	r2, #11
 800a0c4:	d917      	bls.n	800a0f6 <_malloc_r+0xca>
 800a0c6:	1961      	adds	r1, r4, r5
 800a0c8:	42a3      	cmp	r3, r4
 800a0ca:	6025      	str	r5, [r4, #0]
 800a0cc:	bf18      	it	ne
 800a0ce:	6059      	strne	r1, [r3, #4]
 800a0d0:	6863      	ldr	r3, [r4, #4]
 800a0d2:	bf08      	it	eq
 800a0d4:	f8c8 1000 	streq.w	r1, [r8]
 800a0d8:	5162      	str	r2, [r4, r5]
 800a0da:	604b      	str	r3, [r1, #4]
 800a0dc:	f104 060b 	add.w	r6, r4, #11
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	f000 f829 	bl	800a138 <__malloc_unlock>
 800a0e6:	1d23      	adds	r3, r4, #4
 800a0e8:	f026 0607 	bic.w	r6, r6, #7
 800a0ec:	1af2      	subs	r2, r6, r3
 800a0ee:	d0ae      	beq.n	800a04e <_malloc_r+0x22>
 800a0f0:	1b9b      	subs	r3, r3, r6
 800a0f2:	50a3      	str	r3, [r4, r2]
 800a0f4:	e7ab      	b.n	800a04e <_malloc_r+0x22>
 800a0f6:	42a3      	cmp	r3, r4
 800a0f8:	6862      	ldr	r2, [r4, #4]
 800a0fa:	d1dd      	bne.n	800a0b8 <_malloc_r+0x8c>
 800a0fc:	f8c8 2000 	str.w	r2, [r8]
 800a100:	e7ec      	b.n	800a0dc <_malloc_r+0xb0>
 800a102:	4623      	mov	r3, r4
 800a104:	6864      	ldr	r4, [r4, #4]
 800a106:	e7ac      	b.n	800a062 <_malloc_r+0x36>
 800a108:	4634      	mov	r4, r6
 800a10a:	6876      	ldr	r6, [r6, #4]
 800a10c:	e7b4      	b.n	800a078 <_malloc_r+0x4c>
 800a10e:	4613      	mov	r3, r2
 800a110:	e7cc      	b.n	800a0ac <_malloc_r+0x80>
 800a112:	230c      	movs	r3, #12
 800a114:	4638      	mov	r0, r7
 800a116:	603b      	str	r3, [r7, #0]
 800a118:	f000 f80e 	bl	800a138 <__malloc_unlock>
 800a11c:	e797      	b.n	800a04e <_malloc_r+0x22>
 800a11e:	6025      	str	r5, [r4, #0]
 800a120:	e7dc      	b.n	800a0dc <_malloc_r+0xb0>
 800a122:	605b      	str	r3, [r3, #4]
 800a124:	deff      	udf	#255	; 0xff
 800a126:	bf00      	nop
 800a128:	20000308 	.word	0x20000308

0800a12c <__malloc_lock>:
 800a12c:	4801      	ldr	r0, [pc, #4]	; (800a134 <__malloc_lock+0x8>)
 800a12e:	f7ff bf0e 	b.w	8009f4e <__retarget_lock_acquire_recursive>
 800a132:	bf00      	nop
 800a134:	20000304 	.word	0x20000304

0800a138 <__malloc_unlock>:
 800a138:	4801      	ldr	r0, [pc, #4]	; (800a140 <__malloc_unlock+0x8>)
 800a13a:	f7ff bf09 	b.w	8009f50 <__retarget_lock_release_recursive>
 800a13e:	bf00      	nop
 800a140:	20000304 	.word	0x20000304

0800a144 <__sfputc_r>:
 800a144:	6893      	ldr	r3, [r2, #8]
 800a146:	3b01      	subs	r3, #1
 800a148:	2b00      	cmp	r3, #0
 800a14a:	6093      	str	r3, [r2, #8]
 800a14c:	b410      	push	{r4}
 800a14e:	da08      	bge.n	800a162 <__sfputc_r+0x1e>
 800a150:	6994      	ldr	r4, [r2, #24]
 800a152:	42a3      	cmp	r3, r4
 800a154:	db01      	blt.n	800a15a <__sfputc_r+0x16>
 800a156:	290a      	cmp	r1, #10
 800a158:	d103      	bne.n	800a162 <__sfputc_r+0x1e>
 800a15a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a15e:	f7ff bde8 	b.w	8009d32 <__swbuf_r>
 800a162:	6813      	ldr	r3, [r2, #0]
 800a164:	1c58      	adds	r0, r3, #1
 800a166:	6010      	str	r0, [r2, #0]
 800a168:	4608      	mov	r0, r1
 800a16a:	7019      	strb	r1, [r3, #0]
 800a16c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a170:	4770      	bx	lr

0800a172 <__sfputs_r>:
 800a172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a174:	4606      	mov	r6, r0
 800a176:	460f      	mov	r7, r1
 800a178:	4614      	mov	r4, r2
 800a17a:	18d5      	adds	r5, r2, r3
 800a17c:	42ac      	cmp	r4, r5
 800a17e:	d101      	bne.n	800a184 <__sfputs_r+0x12>
 800a180:	2000      	movs	r0, #0
 800a182:	e007      	b.n	800a194 <__sfputs_r+0x22>
 800a184:	463a      	mov	r2, r7
 800a186:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a18a:	4630      	mov	r0, r6
 800a18c:	f7ff ffda 	bl	800a144 <__sfputc_r>
 800a190:	1c43      	adds	r3, r0, #1
 800a192:	d1f3      	bne.n	800a17c <__sfputs_r+0xa>
 800a194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a198 <_vfiprintf_r>:
 800a198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19c:	460d      	mov	r5, r1
 800a19e:	b09d      	sub	sp, #116	; 0x74
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	4698      	mov	r8, r3
 800a1a4:	4606      	mov	r6, r0
 800a1a6:	b118      	cbz	r0, 800a1b0 <_vfiprintf_r+0x18>
 800a1a8:	6a03      	ldr	r3, [r0, #32]
 800a1aa:	b90b      	cbnz	r3, 800a1b0 <_vfiprintf_r+0x18>
 800a1ac:	f7ff fcda 	bl	8009b64 <__sinit>
 800a1b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1b2:	07d9      	lsls	r1, r3, #31
 800a1b4:	d405      	bmi.n	800a1c2 <_vfiprintf_r+0x2a>
 800a1b6:	89ab      	ldrh	r3, [r5, #12]
 800a1b8:	059a      	lsls	r2, r3, #22
 800a1ba:	d402      	bmi.n	800a1c2 <_vfiprintf_r+0x2a>
 800a1bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1be:	f7ff fec6 	bl	8009f4e <__retarget_lock_acquire_recursive>
 800a1c2:	89ab      	ldrh	r3, [r5, #12]
 800a1c4:	071b      	lsls	r3, r3, #28
 800a1c6:	d501      	bpl.n	800a1cc <_vfiprintf_r+0x34>
 800a1c8:	692b      	ldr	r3, [r5, #16]
 800a1ca:	b99b      	cbnz	r3, 800a1f4 <_vfiprintf_r+0x5c>
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f7ff fdec 	bl	8009dac <__swsetup_r>
 800a1d4:	b170      	cbz	r0, 800a1f4 <_vfiprintf_r+0x5c>
 800a1d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1d8:	07dc      	lsls	r4, r3, #31
 800a1da:	d504      	bpl.n	800a1e6 <_vfiprintf_r+0x4e>
 800a1dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1e0:	b01d      	add	sp, #116	; 0x74
 800a1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e6:	89ab      	ldrh	r3, [r5, #12]
 800a1e8:	0598      	lsls	r0, r3, #22
 800a1ea:	d4f7      	bmi.n	800a1dc <_vfiprintf_r+0x44>
 800a1ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1ee:	f7ff feaf 	bl	8009f50 <__retarget_lock_release_recursive>
 800a1f2:	e7f3      	b.n	800a1dc <_vfiprintf_r+0x44>
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1fa:	f04f 0901 	mov.w	r9, #1
 800a1fe:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800a3b8 <_vfiprintf_r+0x220>
 800a202:	9309      	str	r3, [sp, #36]	; 0x24
 800a204:	2320      	movs	r3, #32
 800a206:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a20a:	2330      	movs	r3, #48	; 0x30
 800a20c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a210:	4623      	mov	r3, r4
 800a212:	469a      	mov	sl, r3
 800a214:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a218:	b10a      	cbz	r2, 800a21e <_vfiprintf_r+0x86>
 800a21a:	2a25      	cmp	r2, #37	; 0x25
 800a21c:	d1f9      	bne.n	800a212 <_vfiprintf_r+0x7a>
 800a21e:	ebba 0b04 	subs.w	fp, sl, r4
 800a222:	d00b      	beq.n	800a23c <_vfiprintf_r+0xa4>
 800a224:	465b      	mov	r3, fp
 800a226:	4622      	mov	r2, r4
 800a228:	4629      	mov	r1, r5
 800a22a:	4630      	mov	r0, r6
 800a22c:	f7ff ffa1 	bl	800a172 <__sfputs_r>
 800a230:	3001      	adds	r0, #1
 800a232:	f000 80a9 	beq.w	800a388 <_vfiprintf_r+0x1f0>
 800a236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a238:	445a      	add	r2, fp
 800a23a:	9209      	str	r2, [sp, #36]	; 0x24
 800a23c:	f89a 3000 	ldrb.w	r3, [sl]
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 80a1 	beq.w	800a388 <_vfiprintf_r+0x1f0>
 800a246:	2300      	movs	r3, #0
 800a248:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a24c:	f10a 0a01 	add.w	sl, sl, #1
 800a250:	9304      	str	r3, [sp, #16]
 800a252:	9307      	str	r3, [sp, #28]
 800a254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a258:	931a      	str	r3, [sp, #104]	; 0x68
 800a25a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a25e:	4654      	mov	r4, sl
 800a260:	2205      	movs	r2, #5
 800a262:	4855      	ldr	r0, [pc, #340]	; (800a3b8 <_vfiprintf_r+0x220>)
 800a264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a268:	f000 fb82 	bl	800a970 <memchr>
 800a26c:	9a04      	ldr	r2, [sp, #16]
 800a26e:	b9d8      	cbnz	r0, 800a2a8 <_vfiprintf_r+0x110>
 800a270:	06d1      	lsls	r1, r2, #27
 800a272:	bf44      	itt	mi
 800a274:	2320      	movmi	r3, #32
 800a276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a27a:	0713      	lsls	r3, r2, #28
 800a27c:	bf44      	itt	mi
 800a27e:	232b      	movmi	r3, #43	; 0x2b
 800a280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a284:	f89a 3000 	ldrb.w	r3, [sl]
 800a288:	2b2a      	cmp	r3, #42	; 0x2a
 800a28a:	d015      	beq.n	800a2b8 <_vfiprintf_r+0x120>
 800a28c:	9a07      	ldr	r2, [sp, #28]
 800a28e:	4654      	mov	r4, sl
 800a290:	2000      	movs	r0, #0
 800a292:	f04f 0c0a 	mov.w	ip, #10
 800a296:	4621      	mov	r1, r4
 800a298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a29c:	3b30      	subs	r3, #48	; 0x30
 800a29e:	2b09      	cmp	r3, #9
 800a2a0:	d94d      	bls.n	800a33e <_vfiprintf_r+0x1a6>
 800a2a2:	b1b0      	cbz	r0, 800a2d2 <_vfiprintf_r+0x13a>
 800a2a4:	9207      	str	r2, [sp, #28]
 800a2a6:	e014      	b.n	800a2d2 <_vfiprintf_r+0x13a>
 800a2a8:	eba0 0308 	sub.w	r3, r0, r8
 800a2ac:	46a2      	mov	sl, r4
 800a2ae:	fa09 f303 	lsl.w	r3, r9, r3
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	9304      	str	r3, [sp, #16]
 800a2b6:	e7d2      	b.n	800a25e <_vfiprintf_r+0xc6>
 800a2b8:	9b03      	ldr	r3, [sp, #12]
 800a2ba:	1d19      	adds	r1, r3, #4
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	9103      	str	r1, [sp, #12]
 800a2c2:	bfbb      	ittet	lt
 800a2c4:	425b      	neglt	r3, r3
 800a2c6:	f042 0202 	orrlt.w	r2, r2, #2
 800a2ca:	9307      	strge	r3, [sp, #28]
 800a2cc:	9307      	strlt	r3, [sp, #28]
 800a2ce:	bfb8      	it	lt
 800a2d0:	9204      	strlt	r2, [sp, #16]
 800a2d2:	7823      	ldrb	r3, [r4, #0]
 800a2d4:	2b2e      	cmp	r3, #46	; 0x2e
 800a2d6:	d10c      	bne.n	800a2f2 <_vfiprintf_r+0x15a>
 800a2d8:	7863      	ldrb	r3, [r4, #1]
 800a2da:	2b2a      	cmp	r3, #42	; 0x2a
 800a2dc:	d134      	bne.n	800a348 <_vfiprintf_r+0x1b0>
 800a2de:	9b03      	ldr	r3, [sp, #12]
 800a2e0:	3402      	adds	r4, #2
 800a2e2:	1d1a      	adds	r2, r3, #4
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	9203      	str	r2, [sp, #12]
 800a2ea:	bfb8      	it	lt
 800a2ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a2f0:	9305      	str	r3, [sp, #20]
 800a2f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a3c8 <_vfiprintf_r+0x230>
 800a2f6:	2203      	movs	r2, #3
 800a2f8:	7821      	ldrb	r1, [r4, #0]
 800a2fa:	4650      	mov	r0, sl
 800a2fc:	f000 fb38 	bl	800a970 <memchr>
 800a300:	b138      	cbz	r0, 800a312 <_vfiprintf_r+0x17a>
 800a302:	eba0 000a 	sub.w	r0, r0, sl
 800a306:	2240      	movs	r2, #64	; 0x40
 800a308:	9b04      	ldr	r3, [sp, #16]
 800a30a:	3401      	adds	r4, #1
 800a30c:	4082      	lsls	r2, r0
 800a30e:	4313      	orrs	r3, r2
 800a310:	9304      	str	r3, [sp, #16]
 800a312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a316:	2206      	movs	r2, #6
 800a318:	4828      	ldr	r0, [pc, #160]	; (800a3bc <_vfiprintf_r+0x224>)
 800a31a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a31e:	f000 fb27 	bl	800a970 <memchr>
 800a322:	2800      	cmp	r0, #0
 800a324:	d03f      	beq.n	800a3a6 <_vfiprintf_r+0x20e>
 800a326:	4b26      	ldr	r3, [pc, #152]	; (800a3c0 <_vfiprintf_r+0x228>)
 800a328:	bb1b      	cbnz	r3, 800a372 <_vfiprintf_r+0x1da>
 800a32a:	9b03      	ldr	r3, [sp, #12]
 800a32c:	3307      	adds	r3, #7
 800a32e:	f023 0307 	bic.w	r3, r3, #7
 800a332:	3308      	adds	r3, #8
 800a334:	9303      	str	r3, [sp, #12]
 800a336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a338:	443b      	add	r3, r7
 800a33a:	9309      	str	r3, [sp, #36]	; 0x24
 800a33c:	e768      	b.n	800a210 <_vfiprintf_r+0x78>
 800a33e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a342:	460c      	mov	r4, r1
 800a344:	2001      	movs	r0, #1
 800a346:	e7a6      	b.n	800a296 <_vfiprintf_r+0xfe>
 800a348:	2300      	movs	r3, #0
 800a34a:	3401      	adds	r4, #1
 800a34c:	f04f 0c0a 	mov.w	ip, #10
 800a350:	4619      	mov	r1, r3
 800a352:	9305      	str	r3, [sp, #20]
 800a354:	4620      	mov	r0, r4
 800a356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a35a:	3a30      	subs	r2, #48	; 0x30
 800a35c:	2a09      	cmp	r2, #9
 800a35e:	d903      	bls.n	800a368 <_vfiprintf_r+0x1d0>
 800a360:	2b00      	cmp	r3, #0
 800a362:	d0c6      	beq.n	800a2f2 <_vfiprintf_r+0x15a>
 800a364:	9105      	str	r1, [sp, #20]
 800a366:	e7c4      	b.n	800a2f2 <_vfiprintf_r+0x15a>
 800a368:	fb0c 2101 	mla	r1, ip, r1, r2
 800a36c:	4604      	mov	r4, r0
 800a36e:	2301      	movs	r3, #1
 800a370:	e7f0      	b.n	800a354 <_vfiprintf_r+0x1bc>
 800a372:	ab03      	add	r3, sp, #12
 800a374:	462a      	mov	r2, r5
 800a376:	a904      	add	r1, sp, #16
 800a378:	4630      	mov	r0, r6
 800a37a:	9300      	str	r3, [sp, #0]
 800a37c:	4b11      	ldr	r3, [pc, #68]	; (800a3c4 <_vfiprintf_r+0x22c>)
 800a37e:	f3af 8000 	nop.w
 800a382:	4607      	mov	r7, r0
 800a384:	1c78      	adds	r0, r7, #1
 800a386:	d1d6      	bne.n	800a336 <_vfiprintf_r+0x19e>
 800a388:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a38a:	07d9      	lsls	r1, r3, #31
 800a38c:	d405      	bmi.n	800a39a <_vfiprintf_r+0x202>
 800a38e:	89ab      	ldrh	r3, [r5, #12]
 800a390:	059a      	lsls	r2, r3, #22
 800a392:	d402      	bmi.n	800a39a <_vfiprintf_r+0x202>
 800a394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a396:	f7ff fddb 	bl	8009f50 <__retarget_lock_release_recursive>
 800a39a:	89ab      	ldrh	r3, [r5, #12]
 800a39c:	065b      	lsls	r3, r3, #25
 800a39e:	f53f af1d 	bmi.w	800a1dc <_vfiprintf_r+0x44>
 800a3a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3a4:	e71c      	b.n	800a1e0 <_vfiprintf_r+0x48>
 800a3a6:	ab03      	add	r3, sp, #12
 800a3a8:	462a      	mov	r2, r5
 800a3aa:	a904      	add	r1, sp, #16
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	4b04      	ldr	r3, [pc, #16]	; (800a3c4 <_vfiprintf_r+0x22c>)
 800a3b2:	f000 f87d 	bl	800a4b0 <_printf_i>
 800a3b6:	e7e4      	b.n	800a382 <_vfiprintf_r+0x1ea>
 800a3b8:	0800ac10 	.word	0x0800ac10
 800a3bc:	0800ac1a 	.word	0x0800ac1a
 800a3c0:	00000000 	.word	0x00000000
 800a3c4:	0800a173 	.word	0x0800a173
 800a3c8:	0800ac16 	.word	0x0800ac16

0800a3cc <_printf_common>:
 800a3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3d0:	4616      	mov	r6, r2
 800a3d2:	4699      	mov	r9, r3
 800a3d4:	688a      	ldr	r2, [r1, #8]
 800a3d6:	4607      	mov	r7, r0
 800a3d8:	690b      	ldr	r3, [r1, #16]
 800a3da:	460c      	mov	r4, r1
 800a3dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	bfb8      	it	lt
 800a3e4:	4613      	movlt	r3, r2
 800a3e6:	6033      	str	r3, [r6, #0]
 800a3e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3ec:	b10a      	cbz	r2, 800a3f2 <_printf_common+0x26>
 800a3ee:	3301      	adds	r3, #1
 800a3f0:	6033      	str	r3, [r6, #0]
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	0699      	lsls	r1, r3, #26
 800a3f6:	bf42      	ittt	mi
 800a3f8:	6833      	ldrmi	r3, [r6, #0]
 800a3fa:	3302      	addmi	r3, #2
 800a3fc:	6033      	strmi	r3, [r6, #0]
 800a3fe:	6825      	ldr	r5, [r4, #0]
 800a400:	f015 0506 	ands.w	r5, r5, #6
 800a404:	d106      	bne.n	800a414 <_printf_common+0x48>
 800a406:	f104 0a19 	add.w	sl, r4, #25
 800a40a:	68e3      	ldr	r3, [r4, #12]
 800a40c:	6832      	ldr	r2, [r6, #0]
 800a40e:	1a9b      	subs	r3, r3, r2
 800a410:	42ab      	cmp	r3, r5
 800a412:	dc2b      	bgt.n	800a46c <_printf_common+0xa0>
 800a414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a418:	1e13      	subs	r3, r2, #0
 800a41a:	6822      	ldr	r2, [r4, #0]
 800a41c:	bf18      	it	ne
 800a41e:	2301      	movne	r3, #1
 800a420:	0692      	lsls	r2, r2, #26
 800a422:	d430      	bmi.n	800a486 <_printf_common+0xba>
 800a424:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a428:	4649      	mov	r1, r9
 800a42a:	4638      	mov	r0, r7
 800a42c:	47c0      	blx	r8
 800a42e:	3001      	adds	r0, #1
 800a430:	d023      	beq.n	800a47a <_printf_common+0xae>
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	341a      	adds	r4, #26
 800a436:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a43a:	f003 0306 	and.w	r3, r3, #6
 800a43e:	2b04      	cmp	r3, #4
 800a440:	bf0a      	itet	eq
 800a442:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a446:	2500      	movne	r5, #0
 800a448:	6833      	ldreq	r3, [r6, #0]
 800a44a:	f04f 0600 	mov.w	r6, #0
 800a44e:	bf08      	it	eq
 800a450:	1aed      	subeq	r5, r5, r3
 800a452:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a456:	bf08      	it	eq
 800a458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a45c:	4293      	cmp	r3, r2
 800a45e:	bfc4      	itt	gt
 800a460:	1a9b      	subgt	r3, r3, r2
 800a462:	18ed      	addgt	r5, r5, r3
 800a464:	42b5      	cmp	r5, r6
 800a466:	d11a      	bne.n	800a49e <_printf_common+0xd2>
 800a468:	2000      	movs	r0, #0
 800a46a:	e008      	b.n	800a47e <_printf_common+0xb2>
 800a46c:	2301      	movs	r3, #1
 800a46e:	4652      	mov	r2, sl
 800a470:	4649      	mov	r1, r9
 800a472:	4638      	mov	r0, r7
 800a474:	47c0      	blx	r8
 800a476:	3001      	adds	r0, #1
 800a478:	d103      	bne.n	800a482 <_printf_common+0xb6>
 800a47a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a482:	3501      	adds	r5, #1
 800a484:	e7c1      	b.n	800a40a <_printf_common+0x3e>
 800a486:	18e1      	adds	r1, r4, r3
 800a488:	1c5a      	adds	r2, r3, #1
 800a48a:	2030      	movs	r0, #48	; 0x30
 800a48c:	3302      	adds	r3, #2
 800a48e:	4422      	add	r2, r4
 800a490:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a49c:	e7c2      	b.n	800a424 <_printf_common+0x58>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	4622      	mov	r2, r4
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	4638      	mov	r0, r7
 800a4a6:	47c0      	blx	r8
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	d0e6      	beq.n	800a47a <_printf_common+0xae>
 800a4ac:	3601      	adds	r6, #1
 800a4ae:	e7d9      	b.n	800a464 <_printf_common+0x98>

0800a4b0 <_printf_i>:
 800a4b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4b4:	7e0f      	ldrb	r7, [r1, #24]
 800a4b6:	4691      	mov	r9, r2
 800a4b8:	4680      	mov	r8, r0
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	2f78      	cmp	r7, #120	; 0x78
 800a4be:	469a      	mov	sl, r3
 800a4c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a4c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a4c6:	d807      	bhi.n	800a4d8 <_printf_i+0x28>
 800a4c8:	2f62      	cmp	r7, #98	; 0x62
 800a4ca:	d80a      	bhi.n	800a4e2 <_printf_i+0x32>
 800a4cc:	2f00      	cmp	r7, #0
 800a4ce:	f000 80d3 	beq.w	800a678 <_printf_i+0x1c8>
 800a4d2:	2f58      	cmp	r7, #88	; 0x58
 800a4d4:	f000 80bf 	beq.w	800a656 <_printf_i+0x1a6>
 800a4d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4e0:	e03a      	b.n	800a558 <_printf_i+0xa8>
 800a4e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4e6:	2b15      	cmp	r3, #21
 800a4e8:	d8f6      	bhi.n	800a4d8 <_printf_i+0x28>
 800a4ea:	a101      	add	r1, pc, #4	; (adr r1, 800a4f0 <_printf_i+0x40>)
 800a4ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4f0:	0800a549 	.word	0x0800a549
 800a4f4:	0800a55d 	.word	0x0800a55d
 800a4f8:	0800a4d9 	.word	0x0800a4d9
 800a4fc:	0800a4d9 	.word	0x0800a4d9
 800a500:	0800a4d9 	.word	0x0800a4d9
 800a504:	0800a4d9 	.word	0x0800a4d9
 800a508:	0800a55d 	.word	0x0800a55d
 800a50c:	0800a4d9 	.word	0x0800a4d9
 800a510:	0800a4d9 	.word	0x0800a4d9
 800a514:	0800a4d9 	.word	0x0800a4d9
 800a518:	0800a4d9 	.word	0x0800a4d9
 800a51c:	0800a65f 	.word	0x0800a65f
 800a520:	0800a589 	.word	0x0800a589
 800a524:	0800a61b 	.word	0x0800a61b
 800a528:	0800a4d9 	.word	0x0800a4d9
 800a52c:	0800a4d9 	.word	0x0800a4d9
 800a530:	0800a681 	.word	0x0800a681
 800a534:	0800a4d9 	.word	0x0800a4d9
 800a538:	0800a589 	.word	0x0800a589
 800a53c:	0800a4d9 	.word	0x0800a4d9
 800a540:	0800a4d9 	.word	0x0800a4d9
 800a544:	0800a623 	.word	0x0800a623
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	1d1a      	adds	r2, r3, #4
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	602a      	str	r2, [r5, #0]
 800a550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a554:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a558:	2301      	movs	r3, #1
 800a55a:	e09e      	b.n	800a69a <_printf_i+0x1ea>
 800a55c:	6820      	ldr	r0, [r4, #0]
 800a55e:	682b      	ldr	r3, [r5, #0]
 800a560:	0607      	lsls	r7, r0, #24
 800a562:	f103 0104 	add.w	r1, r3, #4
 800a566:	6029      	str	r1, [r5, #0]
 800a568:	d501      	bpl.n	800a56e <_printf_i+0xbe>
 800a56a:	681e      	ldr	r6, [r3, #0]
 800a56c:	e003      	b.n	800a576 <_printf_i+0xc6>
 800a56e:	0646      	lsls	r6, r0, #25
 800a570:	d5fb      	bpl.n	800a56a <_printf_i+0xba>
 800a572:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a576:	2e00      	cmp	r6, #0
 800a578:	da03      	bge.n	800a582 <_printf_i+0xd2>
 800a57a:	232d      	movs	r3, #45	; 0x2d
 800a57c:	4276      	negs	r6, r6
 800a57e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a582:	4859      	ldr	r0, [pc, #356]	; (800a6e8 <_printf_i+0x238>)
 800a584:	230a      	movs	r3, #10
 800a586:	e012      	b.n	800a5ae <_printf_i+0xfe>
 800a588:	682b      	ldr	r3, [r5, #0]
 800a58a:	6820      	ldr	r0, [r4, #0]
 800a58c:	1d19      	adds	r1, r3, #4
 800a58e:	6029      	str	r1, [r5, #0]
 800a590:	0605      	lsls	r5, r0, #24
 800a592:	d501      	bpl.n	800a598 <_printf_i+0xe8>
 800a594:	681e      	ldr	r6, [r3, #0]
 800a596:	e002      	b.n	800a59e <_printf_i+0xee>
 800a598:	0641      	lsls	r1, r0, #25
 800a59a:	d5fb      	bpl.n	800a594 <_printf_i+0xe4>
 800a59c:	881e      	ldrh	r6, [r3, #0]
 800a59e:	2f6f      	cmp	r7, #111	; 0x6f
 800a5a0:	4851      	ldr	r0, [pc, #324]	; (800a6e8 <_printf_i+0x238>)
 800a5a2:	bf0c      	ite	eq
 800a5a4:	2308      	moveq	r3, #8
 800a5a6:	230a      	movne	r3, #10
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5ae:	6865      	ldr	r5, [r4, #4]
 800a5b0:	2d00      	cmp	r5, #0
 800a5b2:	60a5      	str	r5, [r4, #8]
 800a5b4:	bfa2      	ittt	ge
 800a5b6:	6821      	ldrge	r1, [r4, #0]
 800a5b8:	f021 0104 	bicge.w	r1, r1, #4
 800a5bc:	6021      	strge	r1, [r4, #0]
 800a5be:	b90e      	cbnz	r6, 800a5c4 <_printf_i+0x114>
 800a5c0:	2d00      	cmp	r5, #0
 800a5c2:	d04a      	beq.n	800a65a <_printf_i+0x1aa>
 800a5c4:	4615      	mov	r5, r2
 800a5c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a5ca:	fb03 6711 	mls	r7, r3, r1, r6
 800a5ce:	5dc7      	ldrb	r7, [r0, r7]
 800a5d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a5d4:	4637      	mov	r7, r6
 800a5d6:	460e      	mov	r6, r1
 800a5d8:	42bb      	cmp	r3, r7
 800a5da:	d9f4      	bls.n	800a5c6 <_printf_i+0x116>
 800a5dc:	2b08      	cmp	r3, #8
 800a5de:	d10b      	bne.n	800a5f8 <_printf_i+0x148>
 800a5e0:	6823      	ldr	r3, [r4, #0]
 800a5e2:	07de      	lsls	r6, r3, #31
 800a5e4:	d508      	bpl.n	800a5f8 <_printf_i+0x148>
 800a5e6:	6923      	ldr	r3, [r4, #16]
 800a5e8:	6861      	ldr	r1, [r4, #4]
 800a5ea:	4299      	cmp	r1, r3
 800a5ec:	bfde      	ittt	le
 800a5ee:	2330      	movle	r3, #48	; 0x30
 800a5f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a5f8:	1b52      	subs	r2, r2, r5
 800a5fa:	6122      	str	r2, [r4, #16]
 800a5fc:	464b      	mov	r3, r9
 800a5fe:	aa03      	add	r2, sp, #12
 800a600:	4621      	mov	r1, r4
 800a602:	4640      	mov	r0, r8
 800a604:	f8cd a000 	str.w	sl, [sp]
 800a608:	f7ff fee0 	bl	800a3cc <_printf_common>
 800a60c:	3001      	adds	r0, #1
 800a60e:	d149      	bne.n	800a6a4 <_printf_i+0x1f4>
 800a610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a614:	b004      	add	sp, #16
 800a616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	f043 0320 	orr.w	r3, r3, #32
 800a620:	6023      	str	r3, [r4, #0]
 800a622:	2778      	movs	r7, #120	; 0x78
 800a624:	4831      	ldr	r0, [pc, #196]	; (800a6ec <_printf_i+0x23c>)
 800a626:	6823      	ldr	r3, [r4, #0]
 800a628:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a62c:	061f      	lsls	r7, r3, #24
 800a62e:	6829      	ldr	r1, [r5, #0]
 800a630:	f851 6b04 	ldr.w	r6, [r1], #4
 800a634:	d402      	bmi.n	800a63c <_printf_i+0x18c>
 800a636:	065f      	lsls	r7, r3, #25
 800a638:	bf48      	it	mi
 800a63a:	b2b6      	uxthmi	r6, r6
 800a63c:	07df      	lsls	r7, r3, #31
 800a63e:	6029      	str	r1, [r5, #0]
 800a640:	bf44      	itt	mi
 800a642:	f043 0320 	orrmi.w	r3, r3, #32
 800a646:	6023      	strmi	r3, [r4, #0]
 800a648:	b91e      	cbnz	r6, 800a652 <_printf_i+0x1a2>
 800a64a:	6823      	ldr	r3, [r4, #0]
 800a64c:	f023 0320 	bic.w	r3, r3, #32
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	2310      	movs	r3, #16
 800a654:	e7a8      	b.n	800a5a8 <_printf_i+0xf8>
 800a656:	4824      	ldr	r0, [pc, #144]	; (800a6e8 <_printf_i+0x238>)
 800a658:	e7e5      	b.n	800a626 <_printf_i+0x176>
 800a65a:	4615      	mov	r5, r2
 800a65c:	e7be      	b.n	800a5dc <_printf_i+0x12c>
 800a65e:	682b      	ldr	r3, [r5, #0]
 800a660:	6826      	ldr	r6, [r4, #0]
 800a662:	1d18      	adds	r0, r3, #4
 800a664:	6961      	ldr	r1, [r4, #20]
 800a666:	6028      	str	r0, [r5, #0]
 800a668:	0635      	lsls	r5, r6, #24
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	d501      	bpl.n	800a672 <_printf_i+0x1c2>
 800a66e:	6019      	str	r1, [r3, #0]
 800a670:	e002      	b.n	800a678 <_printf_i+0x1c8>
 800a672:	0670      	lsls	r0, r6, #25
 800a674:	d5fb      	bpl.n	800a66e <_printf_i+0x1be>
 800a676:	8019      	strh	r1, [r3, #0]
 800a678:	2300      	movs	r3, #0
 800a67a:	4615      	mov	r5, r2
 800a67c:	6123      	str	r3, [r4, #16]
 800a67e:	e7bd      	b.n	800a5fc <_printf_i+0x14c>
 800a680:	682b      	ldr	r3, [r5, #0]
 800a682:	2100      	movs	r1, #0
 800a684:	1d1a      	adds	r2, r3, #4
 800a686:	602a      	str	r2, [r5, #0]
 800a688:	681d      	ldr	r5, [r3, #0]
 800a68a:	6862      	ldr	r2, [r4, #4]
 800a68c:	4628      	mov	r0, r5
 800a68e:	f000 f96f 	bl	800a970 <memchr>
 800a692:	b108      	cbz	r0, 800a698 <_printf_i+0x1e8>
 800a694:	1b40      	subs	r0, r0, r5
 800a696:	6060      	str	r0, [r4, #4]
 800a698:	6863      	ldr	r3, [r4, #4]
 800a69a:	6123      	str	r3, [r4, #16]
 800a69c:	2300      	movs	r3, #0
 800a69e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6a2:	e7ab      	b.n	800a5fc <_printf_i+0x14c>
 800a6a4:	6923      	ldr	r3, [r4, #16]
 800a6a6:	462a      	mov	r2, r5
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	4640      	mov	r0, r8
 800a6ac:	47d0      	blx	sl
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	d0ae      	beq.n	800a610 <_printf_i+0x160>
 800a6b2:	6823      	ldr	r3, [r4, #0]
 800a6b4:	079b      	lsls	r3, r3, #30
 800a6b6:	d413      	bmi.n	800a6e0 <_printf_i+0x230>
 800a6b8:	68e0      	ldr	r0, [r4, #12]
 800a6ba:	9b03      	ldr	r3, [sp, #12]
 800a6bc:	4298      	cmp	r0, r3
 800a6be:	bfb8      	it	lt
 800a6c0:	4618      	movlt	r0, r3
 800a6c2:	e7a7      	b.n	800a614 <_printf_i+0x164>
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	4632      	mov	r2, r6
 800a6c8:	4649      	mov	r1, r9
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	47d0      	blx	sl
 800a6ce:	3001      	adds	r0, #1
 800a6d0:	d09e      	beq.n	800a610 <_printf_i+0x160>
 800a6d2:	3501      	adds	r5, #1
 800a6d4:	68e3      	ldr	r3, [r4, #12]
 800a6d6:	9903      	ldr	r1, [sp, #12]
 800a6d8:	1a5b      	subs	r3, r3, r1
 800a6da:	42ab      	cmp	r3, r5
 800a6dc:	dcf2      	bgt.n	800a6c4 <_printf_i+0x214>
 800a6de:	e7eb      	b.n	800a6b8 <_printf_i+0x208>
 800a6e0:	2500      	movs	r5, #0
 800a6e2:	f104 0619 	add.w	r6, r4, #25
 800a6e6:	e7f5      	b.n	800a6d4 <_printf_i+0x224>
 800a6e8:	0800ac21 	.word	0x0800ac21
 800a6ec:	0800ac32 	.word	0x0800ac32

0800a6f0 <__sflush_r>:
 800a6f0:	898a      	ldrh	r2, [r1, #12]
 800a6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f6:	4605      	mov	r5, r0
 800a6f8:	0710      	lsls	r0, r2, #28
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	d458      	bmi.n	800a7b0 <__sflush_r+0xc0>
 800a6fe:	684b      	ldr	r3, [r1, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	dc05      	bgt.n	800a710 <__sflush_r+0x20>
 800a704:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a706:	2b00      	cmp	r3, #0
 800a708:	dc02      	bgt.n	800a710 <__sflush_r+0x20>
 800a70a:	2000      	movs	r0, #0
 800a70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a712:	2e00      	cmp	r6, #0
 800a714:	d0f9      	beq.n	800a70a <__sflush_r+0x1a>
 800a716:	2300      	movs	r3, #0
 800a718:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a71c:	682f      	ldr	r7, [r5, #0]
 800a71e:	6a21      	ldr	r1, [r4, #32]
 800a720:	602b      	str	r3, [r5, #0]
 800a722:	d032      	beq.n	800a78a <__sflush_r+0x9a>
 800a724:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a726:	89a3      	ldrh	r3, [r4, #12]
 800a728:	075a      	lsls	r2, r3, #29
 800a72a:	d505      	bpl.n	800a738 <__sflush_r+0x48>
 800a72c:	6863      	ldr	r3, [r4, #4]
 800a72e:	1ac0      	subs	r0, r0, r3
 800a730:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a732:	b10b      	cbz	r3, 800a738 <__sflush_r+0x48>
 800a734:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a736:	1ac0      	subs	r0, r0, r3
 800a738:	2300      	movs	r3, #0
 800a73a:	4602      	mov	r2, r0
 800a73c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a73e:	4628      	mov	r0, r5
 800a740:	6a21      	ldr	r1, [r4, #32]
 800a742:	47b0      	blx	r6
 800a744:	1c43      	adds	r3, r0, #1
 800a746:	89a3      	ldrh	r3, [r4, #12]
 800a748:	d106      	bne.n	800a758 <__sflush_r+0x68>
 800a74a:	6829      	ldr	r1, [r5, #0]
 800a74c:	291d      	cmp	r1, #29
 800a74e:	d82b      	bhi.n	800a7a8 <__sflush_r+0xb8>
 800a750:	4a28      	ldr	r2, [pc, #160]	; (800a7f4 <__sflush_r+0x104>)
 800a752:	410a      	asrs	r2, r1
 800a754:	07d6      	lsls	r6, r2, #31
 800a756:	d427      	bmi.n	800a7a8 <__sflush_r+0xb8>
 800a758:	2200      	movs	r2, #0
 800a75a:	04d9      	lsls	r1, r3, #19
 800a75c:	6062      	str	r2, [r4, #4]
 800a75e:	6922      	ldr	r2, [r4, #16]
 800a760:	6022      	str	r2, [r4, #0]
 800a762:	d504      	bpl.n	800a76e <__sflush_r+0x7e>
 800a764:	1c42      	adds	r2, r0, #1
 800a766:	d101      	bne.n	800a76c <__sflush_r+0x7c>
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	b903      	cbnz	r3, 800a76e <__sflush_r+0x7e>
 800a76c:	6560      	str	r0, [r4, #84]	; 0x54
 800a76e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a770:	602f      	str	r7, [r5, #0]
 800a772:	2900      	cmp	r1, #0
 800a774:	d0c9      	beq.n	800a70a <__sflush_r+0x1a>
 800a776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a77a:	4299      	cmp	r1, r3
 800a77c:	d002      	beq.n	800a784 <__sflush_r+0x94>
 800a77e:	4628      	mov	r0, r5
 800a780:	f7ff fbe8 	bl	8009f54 <_free_r>
 800a784:	2000      	movs	r0, #0
 800a786:	6360      	str	r0, [r4, #52]	; 0x34
 800a788:	e7c0      	b.n	800a70c <__sflush_r+0x1c>
 800a78a:	2301      	movs	r3, #1
 800a78c:	4628      	mov	r0, r5
 800a78e:	47b0      	blx	r6
 800a790:	1c41      	adds	r1, r0, #1
 800a792:	d1c8      	bne.n	800a726 <__sflush_r+0x36>
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0c5      	beq.n	800a726 <__sflush_r+0x36>
 800a79a:	2b1d      	cmp	r3, #29
 800a79c:	d001      	beq.n	800a7a2 <__sflush_r+0xb2>
 800a79e:	2b16      	cmp	r3, #22
 800a7a0:	d101      	bne.n	800a7a6 <__sflush_r+0xb6>
 800a7a2:	602f      	str	r7, [r5, #0]
 800a7a4:	e7b1      	b.n	800a70a <__sflush_r+0x1a>
 800a7a6:	89a3      	ldrh	r3, [r4, #12]
 800a7a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ac:	81a3      	strh	r3, [r4, #12]
 800a7ae:	e7ad      	b.n	800a70c <__sflush_r+0x1c>
 800a7b0:	690f      	ldr	r7, [r1, #16]
 800a7b2:	2f00      	cmp	r7, #0
 800a7b4:	d0a9      	beq.n	800a70a <__sflush_r+0x1a>
 800a7b6:	0793      	lsls	r3, r2, #30
 800a7b8:	680e      	ldr	r6, [r1, #0]
 800a7ba:	600f      	str	r7, [r1, #0]
 800a7bc:	bf0c      	ite	eq
 800a7be:	694b      	ldreq	r3, [r1, #20]
 800a7c0:	2300      	movne	r3, #0
 800a7c2:	eba6 0807 	sub.w	r8, r6, r7
 800a7c6:	608b      	str	r3, [r1, #8]
 800a7c8:	f1b8 0f00 	cmp.w	r8, #0
 800a7cc:	dd9d      	ble.n	800a70a <__sflush_r+0x1a>
 800a7ce:	4643      	mov	r3, r8
 800a7d0:	463a      	mov	r2, r7
 800a7d2:	6a21      	ldr	r1, [r4, #32]
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a7d8:	47b0      	blx	r6
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	dc06      	bgt.n	800a7ec <__sflush_r+0xfc>
 800a7de:	89a3      	ldrh	r3, [r4, #12]
 800a7e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7e8:	81a3      	strh	r3, [r4, #12]
 800a7ea:	e78f      	b.n	800a70c <__sflush_r+0x1c>
 800a7ec:	4407      	add	r7, r0
 800a7ee:	eba8 0800 	sub.w	r8, r8, r0
 800a7f2:	e7e9      	b.n	800a7c8 <__sflush_r+0xd8>
 800a7f4:	dfbffffe 	.word	0xdfbffffe

0800a7f8 <_fflush_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	690b      	ldr	r3, [r1, #16]
 800a7fc:	4605      	mov	r5, r0
 800a7fe:	460c      	mov	r4, r1
 800a800:	b913      	cbnz	r3, 800a808 <_fflush_r+0x10>
 800a802:	2500      	movs	r5, #0
 800a804:	4628      	mov	r0, r5
 800a806:	bd38      	pop	{r3, r4, r5, pc}
 800a808:	b118      	cbz	r0, 800a812 <_fflush_r+0x1a>
 800a80a:	6a03      	ldr	r3, [r0, #32]
 800a80c:	b90b      	cbnz	r3, 800a812 <_fflush_r+0x1a>
 800a80e:	f7ff f9a9 	bl	8009b64 <__sinit>
 800a812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d0f3      	beq.n	800a802 <_fflush_r+0xa>
 800a81a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a81c:	07d0      	lsls	r0, r2, #31
 800a81e:	d404      	bmi.n	800a82a <_fflush_r+0x32>
 800a820:	0599      	lsls	r1, r3, #22
 800a822:	d402      	bmi.n	800a82a <_fflush_r+0x32>
 800a824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a826:	f7ff fb92 	bl	8009f4e <__retarget_lock_acquire_recursive>
 800a82a:	4628      	mov	r0, r5
 800a82c:	4621      	mov	r1, r4
 800a82e:	f7ff ff5f 	bl	800a6f0 <__sflush_r>
 800a832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a834:	4605      	mov	r5, r0
 800a836:	07da      	lsls	r2, r3, #31
 800a838:	d4e4      	bmi.n	800a804 <_fflush_r+0xc>
 800a83a:	89a3      	ldrh	r3, [r4, #12]
 800a83c:	059b      	lsls	r3, r3, #22
 800a83e:	d4e1      	bmi.n	800a804 <_fflush_r+0xc>
 800a840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a842:	f7ff fb85 	bl	8009f50 <__retarget_lock_release_recursive>
 800a846:	e7dd      	b.n	800a804 <_fflush_r+0xc>

0800a848 <__swhatbuf_r>:
 800a848:	b570      	push	{r4, r5, r6, lr}
 800a84a:	460c      	mov	r4, r1
 800a84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a850:	b096      	sub	sp, #88	; 0x58
 800a852:	4615      	mov	r5, r2
 800a854:	2900      	cmp	r1, #0
 800a856:	461e      	mov	r6, r3
 800a858:	da0c      	bge.n	800a874 <__swhatbuf_r+0x2c>
 800a85a:	89a3      	ldrh	r3, [r4, #12]
 800a85c:	2100      	movs	r1, #0
 800a85e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a862:	bf0c      	ite	eq
 800a864:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a868:	2340      	movne	r3, #64	; 0x40
 800a86a:	2000      	movs	r0, #0
 800a86c:	6031      	str	r1, [r6, #0]
 800a86e:	602b      	str	r3, [r5, #0]
 800a870:	b016      	add	sp, #88	; 0x58
 800a872:	bd70      	pop	{r4, r5, r6, pc}
 800a874:	466a      	mov	r2, sp
 800a876:	f000 f849 	bl	800a90c <_fstat_r>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	dbed      	blt.n	800a85a <__swhatbuf_r+0x12>
 800a87e:	9901      	ldr	r1, [sp, #4]
 800a880:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a884:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a888:	4259      	negs	r1, r3
 800a88a:	4159      	adcs	r1, r3
 800a88c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a890:	e7eb      	b.n	800a86a <__swhatbuf_r+0x22>

0800a892 <__smakebuf_r>:
 800a892:	898b      	ldrh	r3, [r1, #12]
 800a894:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a896:	079d      	lsls	r5, r3, #30
 800a898:	4606      	mov	r6, r0
 800a89a:	460c      	mov	r4, r1
 800a89c:	d507      	bpl.n	800a8ae <__smakebuf_r+0x1c>
 800a89e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8a2:	6023      	str	r3, [r4, #0]
 800a8a4:	6123      	str	r3, [r4, #16]
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	6163      	str	r3, [r4, #20]
 800a8aa:	b002      	add	sp, #8
 800a8ac:	bd70      	pop	{r4, r5, r6, pc}
 800a8ae:	ab01      	add	r3, sp, #4
 800a8b0:	466a      	mov	r2, sp
 800a8b2:	f7ff ffc9 	bl	800a848 <__swhatbuf_r>
 800a8b6:	9900      	ldr	r1, [sp, #0]
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	4630      	mov	r0, r6
 800a8bc:	f7ff fbb6 	bl	800a02c <_malloc_r>
 800a8c0:	b948      	cbnz	r0, 800a8d6 <__smakebuf_r+0x44>
 800a8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c6:	059a      	lsls	r2, r3, #22
 800a8c8:	d4ef      	bmi.n	800a8aa <__smakebuf_r+0x18>
 800a8ca:	f023 0303 	bic.w	r3, r3, #3
 800a8ce:	f043 0302 	orr.w	r3, r3, #2
 800a8d2:	81a3      	strh	r3, [r4, #12]
 800a8d4:	e7e3      	b.n	800a89e <__smakebuf_r+0xc>
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	6020      	str	r0, [r4, #0]
 800a8da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8de:	6120      	str	r0, [r4, #16]
 800a8e0:	81a3      	strh	r3, [r4, #12]
 800a8e2:	9b00      	ldr	r3, [sp, #0]
 800a8e4:	6163      	str	r3, [r4, #20]
 800a8e6:	9b01      	ldr	r3, [sp, #4]
 800a8e8:	b15b      	cbz	r3, 800a902 <__smakebuf_r+0x70>
 800a8ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f000 f81e 	bl	800a930 <_isatty_r>
 800a8f4:	b128      	cbz	r0, 800a902 <__smakebuf_r+0x70>
 800a8f6:	89a3      	ldrh	r3, [r4, #12]
 800a8f8:	f023 0303 	bic.w	r3, r3, #3
 800a8fc:	f043 0301 	orr.w	r3, r3, #1
 800a900:	81a3      	strh	r3, [r4, #12]
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	431d      	orrs	r5, r3
 800a906:	81a5      	strh	r5, [r4, #12]
 800a908:	e7cf      	b.n	800a8aa <__smakebuf_r+0x18>
	...

0800a90c <_fstat_r>:
 800a90c:	b538      	push	{r3, r4, r5, lr}
 800a90e:	2300      	movs	r3, #0
 800a910:	4d06      	ldr	r5, [pc, #24]	; (800a92c <_fstat_r+0x20>)
 800a912:	4604      	mov	r4, r0
 800a914:	4608      	mov	r0, r1
 800a916:	4611      	mov	r1, r2
 800a918:	602b      	str	r3, [r5, #0]
 800a91a:	f7f6 fdee 	bl	80014fa <_fstat>
 800a91e:	1c43      	adds	r3, r0, #1
 800a920:	d102      	bne.n	800a928 <_fstat_r+0x1c>
 800a922:	682b      	ldr	r3, [r5, #0]
 800a924:	b103      	cbz	r3, 800a928 <_fstat_r+0x1c>
 800a926:	6023      	str	r3, [r4, #0]
 800a928:	bd38      	pop	{r3, r4, r5, pc}
 800a92a:	bf00      	nop
 800a92c:	20000300 	.word	0x20000300

0800a930 <_isatty_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	2300      	movs	r3, #0
 800a934:	4d05      	ldr	r5, [pc, #20]	; (800a94c <_isatty_r+0x1c>)
 800a936:	4604      	mov	r4, r0
 800a938:	4608      	mov	r0, r1
 800a93a:	602b      	str	r3, [r5, #0]
 800a93c:	f7f6 fded 	bl	800151a <_isatty>
 800a940:	1c43      	adds	r3, r0, #1
 800a942:	d102      	bne.n	800a94a <_isatty_r+0x1a>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	b103      	cbz	r3, 800a94a <_isatty_r+0x1a>
 800a948:	6023      	str	r3, [r4, #0]
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
 800a94c:	20000300 	.word	0x20000300

0800a950 <_sbrk_r>:
 800a950:	b538      	push	{r3, r4, r5, lr}
 800a952:	2300      	movs	r3, #0
 800a954:	4d05      	ldr	r5, [pc, #20]	; (800a96c <_sbrk_r+0x1c>)
 800a956:	4604      	mov	r4, r0
 800a958:	4608      	mov	r0, r1
 800a95a:	602b      	str	r3, [r5, #0]
 800a95c:	f7f6 fdf6 	bl	800154c <_sbrk>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	d102      	bne.n	800a96a <_sbrk_r+0x1a>
 800a964:	682b      	ldr	r3, [r5, #0]
 800a966:	b103      	cbz	r3, 800a96a <_sbrk_r+0x1a>
 800a968:	6023      	str	r3, [r4, #0]
 800a96a:	bd38      	pop	{r3, r4, r5, pc}
 800a96c:	20000300 	.word	0x20000300

0800a970 <memchr>:
 800a970:	b2c9      	uxtb	r1, r1
 800a972:	4402      	add	r2, r0
 800a974:	b510      	push	{r4, lr}
 800a976:	4290      	cmp	r0, r2
 800a978:	4603      	mov	r3, r0
 800a97a:	d101      	bne.n	800a980 <memchr+0x10>
 800a97c:	2300      	movs	r3, #0
 800a97e:	e003      	b.n	800a988 <memchr+0x18>
 800a980:	781c      	ldrb	r4, [r3, #0]
 800a982:	3001      	adds	r0, #1
 800a984:	428c      	cmp	r4, r1
 800a986:	d1f6      	bne.n	800a976 <memchr+0x6>
 800a988:	4618      	mov	r0, r3
 800a98a:	bd10      	pop	{r4, pc}

0800a98c <_init>:
 800a98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98e:	bf00      	nop
 800a990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a992:	bc08      	pop	{r3}
 800a994:	469e      	mov	lr, r3
 800a996:	4770      	bx	lr

0800a998 <_fini>:
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	bf00      	nop
 800a99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a99e:	bc08      	pop	{r3}
 800a9a0:	469e      	mov	lr, r3
 800a9a2:	4770      	bx	lr
