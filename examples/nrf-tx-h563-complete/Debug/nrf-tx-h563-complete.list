
nrf-tx-h563-complete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a99c  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  0800abe8  0800abe8  0001abe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae14  0800ae14  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae14  0800ae14  0001ae14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae1c  0800ae1c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae1c  0800ae1c  0001ae1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae20  0800ae20  0001ae20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800ae24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000006c  0800ae90  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  0800ae90  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001170c  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002161  00000000  00000000  000317f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  00033958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a07  00000000  00000000  00034670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000313b0  00000000  00000000  00035077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ae6  00000000  00000000  00066427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001329d7  00000000  00000000  00076f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e78  00000000  00000000  001a98e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001ad75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000006c 	.word	0x2000006c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800abd0 	.word	0x0800abd0

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000070 	.word	0x20000070
 8000288:	0800abd0 	.word	0x0800abd0

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800029c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b4:	1d39      	adds	r1, r7, #4
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <__io_putchar+0x20>)
 80005be:	f008 fd82 	bl	80090c6 <HAL_UART_Transmit>
  return ch;
 80005c2:	687b      	ldr	r3, [r7, #4]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000118 	.word	0x20000118

080005d0 <HAL_GPIO_EXTI_Rising_Callback>:
/*******************************************/

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
  printf("Interrupt\r\n");
 80005da:	481f      	ldr	r0, [pc, #124]	; (8000658 <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 80005dc:	f009 fc4c 	bl	8009e78 <puts>
  switch (GPIO_Pin) {
 80005e0:	88fb      	ldrh	r3, [r7, #6]
 80005e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005e6:	d12f      	bne.n	8000648 <HAL_GPIO_EXTI_Rising_Callback+0x78>
    case BTN_USER_Pin:
      {
        NRF_PrintStatus();
 80005e8:	f000 fdc2 	bl	8001170 <NRF_PrintStatus>
        NRF_PrintFIFOStatus();
 80005ec:	f000 fe2e 	bl	800124c <NRF_PrintFIFOStatus>
        if (!(NRF_ReadRegisterByte(NRF_REG_FIFO_STATUS) & 0x01)) {
 80005f0:	2017      	movs	r0, #23
 80005f2:	f000 fcfb 	bl	8000fec <NRF_ReadRegisterByte>
 80005f6:	4603      	mov	r3, r0
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d11c      	bne.n	800063a <HAL_GPIO_EXTI_Rising_Callback+0x6a>
          uint8_t payload[10];
          NRF_ReadPayload(payload, 10);
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	210a      	movs	r1, #10
 8000606:	4618      	mov	r0, r3
 8000608:	f000 fc1c 	bl	8000e44 <NRF_ReadPayload>
          printf("ACK Payload:");
 800060c:	4813      	ldr	r0, [pc, #76]	; (800065c <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 800060e:	f009 fbc5 	bl	8009d9c <iprintf>
          for (int i = 0; i < 10; i++) {
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	e00a      	b.n	800062e <HAL_GPIO_EXTI_Rising_Callback+0x5e>
            printf("%c", payload[i]);
 8000618:	f107 0208 	add.w	r2, r7, #8
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	4413      	add	r3, r2
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f009 fbcc 	bl	8009dc0 <putchar>
          for (int i = 0; i < 10; i++) {
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	3301      	adds	r3, #1
 800062c:	617b      	str	r3, [r7, #20]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	2b09      	cmp	r3, #9
 8000632:	ddf1      	ble.n	8000618 <HAL_GPIO_EXTI_Rising_Callback+0x48>
          }
          printf("\r\n");
 8000634:	480a      	ldr	r0, [pc, #40]	; (8000660 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8000636:	f009 fc1f 	bl	8009e78 <puts>
        }
        count++;
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <HAL_GPIO_EXTI_Rising_Callback+0x94>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	3301      	adds	r3, #1
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HAL_GPIO_EXTI_Rising_Callback+0x94>)
 8000644:	701a      	strb	r2, [r3, #0]
      }
      break;
 8000646:	e003      	b.n	8000650 <HAL_GPIO_EXTI_Rising_Callback+0x80>
    default:
      printf("Unhandled interrupt...\r\n");
 8000648:	4807      	ldr	r0, [pc, #28]	; (8000668 <HAL_GPIO_EXTI_Rising_Callback+0x98>)
 800064a:	f009 fc15 	bl	8009e78 <puts>
      break;
 800064e:	bf00      	nop
  }
}
 8000650:	bf00      	nop
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	0800abe8 	.word	0x0800abe8
 800065c:	0800abf4 	.word	0x0800abf4
 8000660:	0800ac04 	.word	0x0800ac04
 8000664:	20000000 	.word	0x20000000
 8000668:	0800ac08 	.word	0x0800ac08

0800066c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) {
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	2b08      	cmp	r3, #8
 800067a:	d142      	bne.n	8000702 <HAL_GPIO_EXTI_Falling_Callback+0x96>
    case NRF_IRQ_Pin:
      {
        uint8_t status = NRF_ReadStatus();
 800067c:	f000 fcc8 	bl	8001010 <NRF_ReadStatus>
 8000680:	4603      	mov	r3, r0
 8000682:	74fb      	strb	r3, [r7, #19]
        if (status & (1<<4)) {
 8000684:	7cfb      	ldrb	r3, [r7, #19]
 8000686:	f003 0310 	and.w	r3, r3, #16
 800068a:	2b00      	cmp	r3, #0
 800068c:	d006      	beq.n	800069c <HAL_GPIO_EXTI_Falling_Callback+0x30>
          // MAX_RT
          printf("Reached max retransmissions...\r\n");
 800068e:	4821      	ldr	r0, [pc, #132]	; (8000714 <HAL_GPIO_EXTI_Falling_Callback+0xa8>)
 8000690:	f009 fbf2 	bl	8009e78 <puts>
          NRF_SetRegisterBit(NRF_REG_STATUS, 4);
 8000694:	2104      	movs	r1, #4
 8000696:	2007      	movs	r0, #7
 8000698:	f000 fc31 	bl	8000efe <NRF_SetRegisterBit>
        }

        if (status & (1<<5)) {
 800069c:	7cfb      	ldrb	r3, [r7, #19]
 800069e:	f003 0320 	and.w	r3, r3, #32
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d006      	beq.n	80006b4 <HAL_GPIO_EXTI_Falling_Callback+0x48>
          // TX_DS
          printf("Data sent...\r\n");
 80006a6:	481c      	ldr	r0, [pc, #112]	; (8000718 <HAL_GPIO_EXTI_Falling_Callback+0xac>)
 80006a8:	f009 fbe6 	bl	8009e78 <puts>
          NRF_SetRegisterBit(NRF_REG_STATUS, 5);
 80006ac:	2105      	movs	r1, #5
 80006ae:	2007      	movs	r0, #7
 80006b0:	f000 fc25 	bl	8000efe <NRF_SetRegisterBit>
        }

        if (status & (1<<6)) {
 80006b4:	7cfb      	ldrb	r3, [r7, #19]
 80006b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d025      	beq.n	800070a <HAL_GPIO_EXTI_Falling_Callback+0x9e>
          // RX_DR
          NRF_SetRegisterBit(NRF_REG_STATUS, 5);
 80006be:	2105      	movs	r1, #5
 80006c0:	2007      	movs	r0, #7
 80006c2:	f000 fc1c 	bl	8000efe <NRF_SetRegisterBit>

          uint8_t payload[10];
          NRF_ReadPayload(payload, 10);
 80006c6:	f107 0308 	add.w	r3, r7, #8
 80006ca:	210a      	movs	r1, #10
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fbb9 	bl	8000e44 <NRF_ReadPayload>
          printf("Received data: ");
 80006d2:	4812      	ldr	r0, [pc, #72]	; (800071c <HAL_GPIO_EXTI_Falling_Callback+0xb0>)
 80006d4:	f009 fb62 	bl	8009d9c <iprintf>
          for (int i = 0; i < 10; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
 80006dc:	e00a      	b.n	80006f4 <HAL_GPIO_EXTI_Falling_Callback+0x88>
            printf("%c", payload[i]);
 80006de:	f107 0208 	add.w	r2, r7, #8
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	4413      	add	r3, r2
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f009 fb69 	bl	8009dc0 <putchar>
          for (int i = 0; i < 10; i++) {
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	2b09      	cmp	r3, #9
 80006f8:	ddf1      	ble.n	80006de <HAL_GPIO_EXTI_Falling_Callback+0x72>
          }
          printf("\r\n");
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <HAL_GPIO_EXTI_Falling_Callback+0xb4>)
 80006fc:	f009 fbbc 	bl	8009e78 <puts>
        }
      }
      break;
 8000700:	e003      	b.n	800070a <HAL_GPIO_EXTI_Falling_Callback+0x9e>
    default:
      printf("Unhandled interrupt...\r\n");
 8000702:	4808      	ldr	r0, [pc, #32]	; (8000724 <HAL_GPIO_EXTI_Falling_Callback+0xb8>)
 8000704:	f009 fbb8 	bl	8009e78 <puts>
      break;
 8000708:	e000      	b.n	800070c <HAL_GPIO_EXTI_Falling_Callback+0xa0>
      break;
 800070a:	bf00      	nop
  }
}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	0800ac20 	.word	0x0800ac20
 8000718:	0800ac40 	.word	0x0800ac40
 800071c:	0800ac50 	.word	0x0800ac50
 8000720:	0800ac04 	.word	0x0800ac04
 8000724:	0800ac08 	.word	0x0800ac08

08000728 <runExample>:

void runExample() {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af02      	add	r7, sp, #8
  printf("... starting up H5\r\n\r\n");
 800072e:	4818      	ldr	r0, [pc, #96]	; (8000790 <runExample+0x68>)
 8000730:	f009 fba2 	bl	8009e78 <puts>
  NRF_Init(&hspi1, NRF_CSN_GPIO_Port, NRF_CSN_Pin, NRF_CE_GPIO_Port, NRF_CE_Pin);
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <runExample+0x6c>)
 800073a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800073e:	4916      	ldr	r1, [pc, #88]	; (8000798 <runExample+0x70>)
 8000740:	4816      	ldr	r0, [pc, #88]	; (800079c <runExample+0x74>)
 8000742:	f000 fa73 	bl	8000c2c <NRF_Init>
  NRF_Reset();
 8000746:	f000 fc7d 	bl	8001044 <NRF_Reset>

  // Config
  uint8_t address[5] = {1,2,3,4,5};
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <runExample+0x78>)
 800074c:	463b      	mov	r3, r7
 800074e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000752:	6018      	str	r0, [r3, #0]
 8000754:	3304      	adds	r3, #4
 8000756:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 8000758:	463b      	mov	r3, r7
 800075a:	2205      	movs	r2, #5
 800075c:	4619      	mov	r1, r3
 800075e:	2010      	movs	r0, #16
 8000760:	f000 fba1 	bl	8000ea6 <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5); // for auto acknowledgement
 8000764:	463b      	mov	r3, r7
 8000766:	2205      	movs	r2, #5
 8000768:	4619      	mov	r1, r3
 800076a:	200a      	movs	r0, #10
 800076c:	f000 fb9b 	bl	8000ea6 <NRF_WriteRegister>

  // Enable ACK payloads (which needs dynamic payload length enabled)
  NRF_SetRegisterBit(NRF_REG_FEATURE, 1);
 8000770:	2101      	movs	r1, #1
 8000772:	201d      	movs	r0, #29
 8000774:	f000 fbc3 	bl	8000efe <NRF_SetRegisterBit>
  NRF_SetRegisterBit(NRF_REG_FEATURE, 2);
 8000778:	2102      	movs	r1, #2
 800077a:	201d      	movs	r0, #29
 800077c:	f000 fbbf 	bl	8000efe <NRF_SetRegisterBit>
  NRF_SetRegisterBit(NRF_REG_DYNPD, 0);
 8000780:	2100      	movs	r1, #0
 8000782:	201c      	movs	r0, #28
 8000784:	f000 fbbb 	bl	8000efe <NRF_SetRegisterBit>
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	0800ac60 	.word	0x0800ac60
 8000794:	42020800 	.word	0x42020800
 8000798:	42020400 	.word	0x42020400
 800079c:	20000088 	.word	0x20000088
 80007a0:	0800ac78 	.word	0x0800ac78

080007a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007aa:	f001 f89d 	bl	80018e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ae:	f000 f81f 	bl	80007f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b2:	f000 f92f 	bl	8000a14 <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 80007b6:	f000 f883 	bl	80008c0 <MX_MEMORYMAP_Init>
  MX_SPI1_Init();
 80007ba:	f000 f889 	bl	80008d0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80007be:	f000 f8dd 	bl	800097c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  runExample();
 80007c2:	f7ff ffb1 	bl	8000728 <runExample>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uint8_t msg[10] = {count};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	811a      	strh	r2, [r3, #8]
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <main+0x48>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	713b      	strb	r3, [r7, #4]
    NRF_Transmit(msg, 10);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	210a      	movs	r1, #10
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fb43 	bl	8000e66 <NRF_Transmit>
    HAL_Delay(4000);
 80007e0:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80007e4:	f001 f8fc 	bl	80019e0 <HAL_Delay>
  {
 80007e8:	e7ed      	b.n	80007c6 <main+0x22>
 80007ea:	bf00      	nop
 80007ec:	20000000 	.word	0x20000000

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b09c      	sub	sp, #112	; 0x70
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	2250      	movs	r2, #80	; 0x50
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f009 fc1a 	bl	800a038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000816:	4b29      	ldr	r3, [pc, #164]	; (80008bc <SystemClock_Config+0xcc>)
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	4a28      	ldr	r2, [pc, #160]	; (80008bc <SystemClock_Config+0xcc>)
 800081c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000820:	6113      	str	r3, [r2, #16]
 8000822:	4b26      	ldr	r3, [pc, #152]	; (80008bc <SystemClock_Config+0xcc>)
 8000824:	691b      	ldr	r3, [r3, #16]
 8000826:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800082e:	bf00      	nop
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <SystemClock_Config+0xcc>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	f003 0308 	and.w	r3, r3, #8
 8000838:	2b08      	cmp	r3, #8
 800083a:	d1f9      	bne.n	8000830 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 800083c:	2310      	movs	r3, #16
 800083e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000844:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 8000846:	2320      	movs	r3, #32
 8000848:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 800084e:	2302      	movs	r3, #2
 8000850:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 8000856:	237d      	movs	r3, #125	; 0x7d
 8000858:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800085e:	2302      	movs	r3, #2
 8000860:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 8000866:	2308      	movs	r3, #8
 8000868:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800086a:	2300      	movs	r3, #0
 800086c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fb8e 	bl	8001f98 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000882:	f000 f98d 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	231f      	movs	r3, #31
 8000888:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2303      	movs	r3, #3
 800088c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	2105      	movs	r1, #5
 80008a4:	4618      	mov	r0, r3
 80008a6:	f001 ffaf 	bl	8002808 <HAL_RCC_ClockConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008b0:	f000 f976 	bl	8000ba0 <Error_Handler>
  }
}
 80008b4:	bf00      	nop
 80008b6:	3770      	adds	r7, #112	; 0x70
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	44020800 	.word	0x44020800

080008c0 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
	...

080008d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_SPI1_Init+0xa4>)
 80008d6:	4a28      	ldr	r2, [pc, #160]	; (8000978 <MX_SPI1_Init+0xa8>)
 80008d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_SPI1_Init+0xa4>)
 80008dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e2:	4b24      	ldr	r3, [pc, #144]	; (8000974 <MX_SPI1_Init+0xa4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e8:	4b22      	ldr	r3, [pc, #136]	; (8000974 <MX_SPI1_Init+0xa4>)
 80008ea:	2207      	movs	r2, #7
 80008ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ee:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_SPI1_Init+0xa4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_SPI1_Init+0xa4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <MX_SPI1_Init+0xa4>)
 80008fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000900:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000902:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_SPI1_Init+0xa4>)
 8000904:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000908:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_SPI1_Init+0xa4>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_SPI1_Init+0xa4>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_SPI1_Init+0xa4>)
 8000918:	2200      	movs	r2, #0
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_SPI1_Init+0xa4>)
 800091e:	2207      	movs	r2, #7
 8000920:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_SPI1_Init+0xa4>)
 8000924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_SPI1_Init+0xa4>)
 800092c:	2200      	movs	r2, #0
 800092e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_SPI1_Init+0xa4>)
 8000932:	2200      	movs	r2, #0
 8000934:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_SPI1_Init+0xa4>)
 8000938:	2200      	movs	r2, #0
 800093a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <MX_SPI1_Init+0xa4>)
 800093e:	2200      	movs	r2, #0
 8000940:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_SPI1_Init+0xa4>)
 8000944:	2200      	movs	r2, #0
 8000946:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <MX_SPI1_Init+0xa4>)
 800094a:	2200      	movs	r2, #0
 800094c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_SPI1_Init+0xa4>)
 8000950:	2200      	movs	r2, #0
 8000952:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000954:	4b07      	ldr	r3, [pc, #28]	; (8000974 <MX_SPI1_Init+0xa4>)
 8000956:	2200      	movs	r2, #0
 8000958:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_SPI1_Init+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <MX_SPI1_Init+0xa4>)
 8000962:	f007 fae5 	bl	8007f30 <HAL_SPI_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800096c:	f000 f918 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000088 	.word	0x20000088
 8000978:	40013000 	.word	0x40013000

0800097c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000980:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 8000982:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <MX_USART3_UART_Init+0x94>)
 8000984:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009c6:	f008 fb2e 	bl	8009026 <HAL_UART_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009d0:	f000 f8e6 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	2100      	movs	r1, #0
 80009d6:	480d      	ldr	r0, [pc, #52]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009d8:	f009 f854 	bl	8009a84 <HAL_UARTEx_SetTxFifoThreshold>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009e2:	f000 f8dd 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	2100      	movs	r1, #0
 80009e8:	4808      	ldr	r0, [pc, #32]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009ea:	f009 f889 	bl	8009b00 <HAL_UARTEx_SetRxFifoThreshold>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f000 f8d4 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_USART3_UART_Init+0x90>)
 80009fa:	f009 f80a 	bl	8009a12 <HAL_UARTEx_DisableFifoMode>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a04:	f000 f8cc 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000118 	.word	0x20000118
 8000a10:	40004800 	.word	0x40004800

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b57      	ldr	r3, [pc, #348]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a30:	4a55      	ldr	r2, [pc, #340]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a3a:	4b53      	ldr	r3, [pc, #332]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	61bb      	str	r3, [r7, #24]
 8000a46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a48:	4b4f      	ldr	r3, [pc, #316]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a4e:	4a4e      	ldr	r2, [pc, #312]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000a50:	f043 0320 	orr.w	r3, r3, #32
 8000a54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a58:	4b4b      	ldr	r3, [pc, #300]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000a5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a5e:	f003 0320 	and.w	r3, r3, #32
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b48      	ldr	r3, [pc, #288]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a6c:	4a46      	ldr	r2, [pc, #280]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a76:	4b44      	ldr	r3, [pc, #272]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a84:	4b40      	ldr	r3, [pc, #256]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a8a:	4a3f      	ldr	r2, [pc, #252]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a94:	4b3c      	ldr	r3, [pc, #240]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	4b39      	ldr	r3, [pc, #228]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000aa8:	4a37      	ldr	r2, [pc, #220]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ab2:	4b35      	ldr	r3, [pc, #212]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac0:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ac6:	4a30      	ldr	r2, [pc, #192]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ad0:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <MX_GPIO_Init+0x174>)
 8000ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2140      	movs	r1, #64	; 0x40
 8000ae2:	482a      	ldr	r0, [pc, #168]	; (8000b8c <MX_GPIO_Init+0x178>)
 8000ae4:	f001 fa1a 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aee:	4828      	ldr	r0, [pc, #160]	; (8000b90 <MX_GPIO_Init+0x17c>)
 8000af0:	f001 fa14 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_GPIO_Init+0x180>)
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4820      	ldr	r0, [pc, #128]	; (8000b8c <MX_GPIO_Init+0x178>)
 8000b0a:	f001 f89d 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000b0e:	2308      	movs	r3, #8
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_GPIO_Init+0x184>)
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481e      	ldr	r0, [pc, #120]	; (8000b9c <MX_GPIO_Init+0x188>)
 8000b22:	f001 f891 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000b26:	2340      	movs	r3, #64	; 0x40
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4813      	ldr	r0, [pc, #76]	; (8000b8c <MX_GPIO_Init+0x178>)
 8000b3e:	f001 f883 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 8000b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <MX_GPIO_Init+0x17c>)
 8000b5c:	f001 f874 	bl	8001c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	200e      	movs	r0, #14
 8000b66:	f001 f83a 	bl	8001bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b6a:	200e      	movs	r0, #14
 8000b6c:	f001 f851 	bl	8001c12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	2018      	movs	r0, #24
 8000b76:	f001 f832 	bl	8001bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b7a:	2018      	movs	r0, #24
 8000b7c:	f001 f849 	bl	8001c12 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b80:	bf00      	nop
 8000b82:	3730      	adds	r7, #48	; 0x30
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	44020c00 	.word	0x44020c00
 8000b8c:	42020800 	.word	0x42020800
 8000b90:	42020400 	.word	0x42020400
 8000b94:	10110000 	.word	0x10110000
 8000b98:	10210000 	.word	0x10210000
 8000b9c:	42021400 	.word	0x42021400

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <csn_set>:

/*
 * Private functions
 */

void csn_set() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <csn_set+0x18>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <csn_set+0x1c>)
 8000bb6:	8811      	ldrh	r1, [r2, #0]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 f9ae 	bl	8001f1c <HAL_GPIO_WritePin>
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200001b0 	.word	0x200001b0
 8000bc8:	200001b4 	.word	0x200001b4

08000bcc <csn_reset>:

void csn_reset() {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <csn_reset+0x18>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <csn_reset+0x1c>)
 8000bd6:	8811      	ldrh	r1, [r2, #0]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 f99e 	bl	8001f1c <HAL_GPIO_WritePin>
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200001b0 	.word	0x200001b0
 8000be8:	200001b4 	.word	0x200001b4

08000bec <ce_set>:

void ce_set() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <ce_set+0x18>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <ce_set+0x1c>)
 8000bf6:	8811      	ldrh	r1, [r2, #0]
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 f98e 	bl	8001f1c <HAL_GPIO_WritePin>
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200001b8 	.word	0x200001b8
 8000c08:	200001bc 	.word	0x200001bc

08000c0c <ce_reset>:

void ce_reset() {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <ce_reset+0x18>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <ce_reset+0x1c>)
 8000c16:	8811      	ldrh	r1, [r2, #0]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 f97e 	bl	8001f1c <HAL_GPIO_WritePin>
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200001b8 	.word	0x200001b8
 8000c28:	200001bc 	.word	0x200001bc

08000c2c <NRF_Init>:
 *
 * Main functions
 *
 */

NRF_Status NRF_Init(SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCSN, uint16_t PinCSN, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	4613      	mov	r3, r2
 8000c3a:	80fb      	strh	r3, [r7, #6]
  HSPI = handle;
 8000c3c:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <NRF_Init+0x48>)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	6013      	str	r3, [r2, #0]
  NRF_CSN_Port = PortCSN;
 8000c42:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <NRF_Init+0x4c>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	6013      	str	r3, [r2, #0]
  NRF_CSN_Pin = PinCSN;
 8000c48:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <NRF_Init+0x50>)
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	8013      	strh	r3, [r2, #0]
  NRF_CE_Port = PortCE;
 8000c4e:	4a0c      	ldr	r2, [pc, #48]	; (8000c80 <NRF_Init+0x54>)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	6013      	str	r3, [r2, #0]
  NRF_CE_Pin = PinCE;
 8000c54:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <NRF_Init+0x58>)
 8000c56:	8b3b      	ldrh	r3, [r7, #24]
 8000c58:	8013      	strh	r3, [r2, #0]

  // Make sure CSN i pulled high
  csn_set();
 8000c5a:	f7ff ffa7 	bl	8000bac <csn_set>

  // Takes ~100ms from power on to start up
  HAL_Delay(100);
 8000c5e:	2064      	movs	r0, #100	; 0x64
 8000c60:	f000 febe 	bl	80019e0 <HAL_Delay>

  NRF_EnterMode(NRF_MODE_STANDBY1);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f000 f89f 	bl	8000da8 <NRF_EnterMode>

  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	200001ac 	.word	0x200001ac
 8000c78:	200001b0 	.word	0x200001b0
 8000c7c:	200001b4 	.word	0x200001b4
 8000c80:	200001b8 	.word	0x200001b8
 8000c84:	200001bc 	.word	0x200001bc

08000c88 <NRF_SendCommand>:

NRF_Status NRF_SendCommand(uint8_t cmd) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000c96:	f7ff ff99 	bl	8000bcc <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <NRF_SendCommand+0x44>)
 8000c9c:	6818      	ldr	r0, [r3, #0]
 8000c9e:	f107 020e 	add.w	r2, r7, #14
 8000ca2:	1df9      	adds	r1, r7, #7
 8000ca4:	230a      	movs	r3, #10
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	f007 fe8d 	bl	80089c8 <HAL_SPI_TransmitReceive>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000cb2:	7bfb      	ldrb	r3, [r7, #15]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <NRF_SendCommand+0x34>
    return ret;
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	e002      	b.n	8000cc2 <NRF_SendCommand+0x3a>
  }
  csn_set();
 8000cbc:	f7ff ff76 	bl	8000bac <csn_set>

  return ret;
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200001ac 	.word	0x200001ac

08000cd0 <NRF_SendWriteCommand>:

NRF_Status NRF_SendWriteCommand(uint8_t cmd, uint8_t *write, uint8_t length) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af02      	add	r7, sp, #8
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000ce4:	f7ff ff72 	bl	8000bcc <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <NRF_SendWriteCommand+0x68>)
 8000cea:	6818      	ldr	r0, [r3, #0]
 8000cec:	f107 020e 	add.w	r2, r7, #14
 8000cf0:	1df9      	adds	r1, r7, #7
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	f007 fe66 	bl	80089c8 <HAL_SPI_TransmitReceive>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <NRF_SendWriteCommand+0x3a>
    return ret;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	e011      	b.n	8000d2e <NRF_SendWriteCommand+0x5e>
  }
  ret = HAL_SPI_Transmit(HSPI, write, length, NRF_SPI_TIMEOUT);
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <NRF_SendWriteCommand+0x68>)
 8000d0c:	6818      	ldr	r0, [r3, #0]
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	230a      	movs	r3, #10
 8000d14:	6839      	ldr	r1, [r7, #0]
 8000d16:	f007 fa7b 	bl	8008210 <HAL_SPI_Transmit>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <NRF_SendWriteCommand+0x58>
    return ret;
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	e002      	b.n	8000d2e <NRF_SendWriteCommand+0x5e>
  }
  csn_set();
 8000d28:	f7ff ff40 	bl	8000bac <csn_set>

  return ret;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001ac 	.word	0x200001ac

08000d3c <NRF_SendReadCommand>:

NRF_Status NRF_SendReadCommand(uint8_t cmd, uint8_t *read, uint8_t length) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af02      	add	r7, sp, #8
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	4613      	mov	r3, r2
 8000d4a:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000d50:	f7ff ff3c 	bl	8000bcc <csn_reset>
  ret = HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <NRF_SendReadCommand+0x68>)
 8000d56:	6818      	ldr	r0, [r3, #0]
 8000d58:	f107 020e 	add.w	r2, r7, #14
 8000d5c:	1df9      	adds	r1, r7, #7
 8000d5e:	230a      	movs	r3, #10
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2301      	movs	r3, #1
 8000d64:	f007 fe30 	bl	80089c8 <HAL_SPI_TransmitReceive>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK) {
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <NRF_SendReadCommand+0x3a>
    return ret;
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
 8000d74:	e011      	b.n	8000d9a <NRF_SendReadCommand+0x5e>
  }
  ret = HAL_SPI_Receive(HSPI, read, length, NRF_SPI_TIMEOUT);
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <NRF_SendReadCommand+0x68>)
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	79bb      	ldrb	r3, [r7, #6]
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	230a      	movs	r3, #10
 8000d80:	6839      	ldr	r1, [r7, #0]
 8000d82:	f007 fc69 	bl	8008658 <HAL_SPI_Receive>
 8000d86:	4603      	mov	r3, r0
 8000d88:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK) {
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <NRF_SendReadCommand+0x58>
    return ret;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	e002      	b.n	8000d9a <NRF_SendReadCommand+0x5e>
  }
  csn_set();
 8000d94:	f7ff ff0a 	bl	8000bac <csn_set>

  return ret;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200001ac 	.word	0x200001ac

08000da8 <NRF_EnterMode>:
 *
 * Device control
 *
 */

NRF_Status NRF_EnterMode(uint8_t mode) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]

  switch(mode) {
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b03      	cmp	r3, #3
 8000dba:	dc2a      	bgt.n	8000e12 <NRF_EnterMode+0x6a>
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	da15      	bge.n	8000dec <NRF_EnterMode+0x44>
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <NRF_EnterMode+0x22>
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d006      	beq.n	8000dd6 <NRF_EnterMode+0x2e>
 8000dc8:	e023      	b.n	8000e12 <NRF_EnterMode+0x6a>
    case NRF_MODE_POWERDOWN:
      // Can come from any mode
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000dca:	2101      	movs	r1, #1
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f000 f8c7 	bl	8000f60 <NRF_ResetRegisterBit>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	73fb      	strb	r3, [r7, #15]
    case NRF_MODE_STANDBY1:
      // We expect to come from powerdown
      ce_reset();
 8000dd6:	f7ff ff19 	bl	8000c0c <ce_reset>
      ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000dda:	2101      	movs	r1, #1
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 f88e 	bl	8000efe <NRF_SetRegisterBit>
 8000de2:	4603      	mov	r3, r0
 8000de4:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(2);
 8000de6:	2002      	movs	r0, #2
 8000de8:	f000 fdfa 	bl	80019e0 <HAL_Delay>
    case NRF_MODE_RX:
    case NRF_MODE_TX:
      // We expect to come from standby-I
      if (mode == NRF_MODE_TX) {
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b03      	cmp	r3, #3
 8000df0:	d106      	bne.n	8000e00 <NRF_EnterMode+0x58>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000df2:	2100      	movs	r1, #0
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 f8b3 	bl	8000f60 <NRF_ResetRegisterBit>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	73fb      	strb	r3, [r7, #15]
 8000dfe:	e005      	b.n	8000e0c <NRF_EnterMode+0x64>
      } else {
        ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000e00:	2100      	movs	r1, #0
 8000e02:	2000      	movs	r0, #0
 8000e04:	f000 f87b 	bl	8000efe <NRF_SetRegisterBit>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	73fb      	strb	r3, [r7, #15]
      }

      // Enter mode
      ce_set();
 8000e0c:	f7ff feee 	bl	8000bec <ce_set>
      break;
 8000e10:	e002      	b.n	8000e18 <NRF_EnterMode+0x70>
    default:
      ret = HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]
      break;
 8000e16:	bf00      	nop
  }

  return ret;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <NRF_WritePayload>:

NRF_Status NRF_WritePayload(uint8_t *payload, uint8_t length) {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	70fb      	strb	r3, [r7, #3]
  return NRF_SendWriteCommand(NRF_CMD_W_TX_PAYLOAD, payload, length);
 8000e2e:	78fb      	ldrb	r3, [r7, #3]
 8000e30:	461a      	mov	r2, r3
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	20a0      	movs	r0, #160	; 0xa0
 8000e36:	f7ff ff4b 	bl	8000cd0 <NRF_SendWriteCommand>
 8000e3a:	4603      	mov	r3, r0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <NRF_ReadPayload>:

NRF_Status NRF_ReadPayload(uint8_t *read, uint8_t length) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
  return NRF_SendReadCommand(NRF_CMD_R_RX_PAYLOAD, read, length);
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	461a      	mov	r2, r3
 8000e54:	6879      	ldr	r1, [r7, #4]
 8000e56:	2061      	movs	r0, #97	; 0x61
 8000e58:	f7ff ff70 	bl	8000d3c <NRF_SendReadCommand>
 8000e5c:	4603      	mov	r3, r0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <NRF_Transmit>:

NRF_Status NRF_Transmit(uint8_t *payload, uint8_t length) {
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	70fb      	strb	r3, [r7, #3]
  NRF_Status ret = HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	73fb      	strb	r3, [r7, #15]
  ret = NRF_WritePayload(payload, length);
 8000e76:	78fb      	ldrb	r3, [r7, #3]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffd1 	bl	8000e22 <NRF_WritePayload>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]
  if(ret != HAL_OK) {
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <NRF_Transmit+0x28>
    return ret;
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	e007      	b.n	8000e9e <NRF_Transmit+0x38>
  }

  ce_set();
 8000e8e:	f7ff fead 	bl	8000bec <ce_set>
  HAL_Delay(1);
 8000e92:	2001      	movs	r0, #1
 8000e94:	f000 fda4 	bl	80019e0 <HAL_Delay>
  ce_reset();
 8000e98:	f7ff feb8 	bl	8000c0c <ce_reset>

  return ret;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <NRF_WriteRegister>:
 * Register helpers
 *
 */

/* Writing */
NRF_Status NRF_WriteRegister(uint8_t reg, uint8_t *write, uint8_t length) {
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	6039      	str	r1, [r7, #0]
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_REGISTER | reg, write, length);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f043 0320 	orr.w	r3, r3, #32
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	79ba      	ldrb	r2, [r7, #6]
 8000ec0:	6839      	ldr	r1, [r7, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff04 	bl	8000cd0 <NRF_SendWriteCommand>
 8000ec8:	4603      	mov	r3, r0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <NRF_WriteRegisterByte>:

NRF_Status NRF_WriteRegisterByte(uint8_t reg, uint8_t byte) {
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	460a      	mov	r2, r1
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	4613      	mov	r3, r2
 8000ee0:	71bb      	strb	r3, [r7, #6]
  uint8_t write = byte;
 8000ee2:	79bb      	ldrb	r3, [r7, #6]
 8000ee4:	73fb      	strb	r3, [r7, #15]
  return NRF_WriteRegister(reg, &write, 1);
 8000ee6:	f107 010f 	add.w	r1, r7, #15
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2201      	movs	r2, #1
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ffd9 	bl	8000ea6 <NRF_WriteRegister>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <NRF_SetRegisterBit>:

NRF_Status NRF_SetRegisterBit(uint8_t reg, uint8_t bit) {
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	460a      	mov	r2, r1
 8000f08:	71fb      	strb	r3, [r7, #7]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8000f12:	2300      	movs	r3, #0
 8000f14:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 8000f16:	f107 010e 	add.w	r1, r7, #14
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f851 	bl	8000fc6 <NRF_ReadRegister>
 8000f24:	4603      	mov	r3, r0
 8000f26:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <NRF_SetRegisterBit+0x34>
    return ret;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	e012      	b.n	8000f58 <NRF_SetRegisterBit+0x5a>
  }
  cfg = cfg | (1 << bit);
 8000f32:	79bb      	ldrb	r3, [r7, #6]
 8000f34:	2201      	movs	r2, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	b25a      	sxtb	r2, r3
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	b25b      	sxtb	r3, r3
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 8000f48:	f107 010e 	add.w	r1, r7, #14
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ffa8 	bl	8000ea6 <NRF_WriteRegister>
 8000f56:	4603      	mov	r3, r0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <NRF_ResetRegisterBit>:

NRF_Status NRF_ResetRegisterBit(uint8_t reg, uint8_t bit) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	460a      	mov	r2, r1
 8000f6a:	71fb      	strb	r3, [r7, #7]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 8000f78:	f107 010e 	add.w	r1, r7, #14
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f820 	bl	8000fc6 <NRF_ReadRegister>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
  if (ret != HAL_OK) {
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <NRF_ResetRegisterBit+0x34>
    return ret;
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	e014      	b.n	8000fbe <NRF_ResetRegisterBit+0x5e>
  }
  cfg = cfg & ~(1 << bit);
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	2201      	movs	r2, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	b25a      	sxtb	r2, r3
 8000fa2:	7bbb      	ldrb	r3, [r7, #14]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 8000fae:	f107 010e 	add.w	r1, r7, #14
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff ff75 	bl	8000ea6 <NRF_WriteRegister>
 8000fbc:	4603      	mov	r3, r0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <NRF_ReadRegister>:


/* Reading */
NRF_Status NRF_ReadRegister(uint8_t reg, uint8_t *read, uint8_t length) {
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	6039      	str	r1, [r7, #0]
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	71bb      	strb	r3, [r7, #6]
  return NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, read, length);
 8000fd6:	79ba      	ldrb	r2, [r7, #6]
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	6839      	ldr	r1, [r7, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fead 	bl	8000d3c <NRF_SendReadCommand>
 8000fe2:	4603      	mov	r3, r0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <NRF_ReadRegisterByte>:

uint8_t NRF_ReadRegisterByte(uint8_t reg) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  uint8_t read;
  NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, &read, 1);
 8000ff6:	f107 010f 	add.w	r1, r7, #15
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fe9c 	bl	8000d3c <NRF_SendReadCommand>
  return read;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <NRF_ReadStatus>:

uint8_t NRF_ReadStatus() {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af02      	add	r7, sp, #8
  uint8_t status;
  uint8_t cmd = NRF_CMD_NOP;
 8001016:	23ff      	movs	r3, #255	; 0xff
 8001018:	71bb      	strb	r3, [r7, #6]

  csn_reset();
 800101a:	f7ff fdd7 	bl	8000bcc <csn_reset>
  HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT);
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <NRF_ReadStatus+0x30>)
 8001020:	6818      	ldr	r0, [r3, #0]
 8001022:	1dfa      	adds	r2, r7, #7
 8001024:	1db9      	adds	r1, r7, #6
 8001026:	230a      	movs	r3, #10
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2301      	movs	r3, #1
 800102c:	f007 fccc 	bl	80089c8 <HAL_SPI_TransmitReceive>
  csn_set();
 8001030:	f7ff fdbc 	bl	8000bac <csn_set>

  return status;
 8001034:	79fb      	ldrb	r3, [r7, #7]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200001ac 	.word	0x200001ac

08001044 <NRF_Reset>:
  }

  return ret;
}

void NRF_Reset() {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
  // Reset state (goto standby-I)
  csn_set();
 800104a:	f7ff fdaf 	bl	8000bac <csn_set>
  ce_reset();
 800104e:	f7ff fddd 	bl	8000c0c <ce_reset>

  // Flush FIFOs
  NRF_EnterMode(NRF_MODE_TX);
 8001052:	2003      	movs	r0, #3
 8001054:	f7ff fea8 	bl	8000da8 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_TX);
 8001058:	20e1      	movs	r0, #225	; 0xe1
 800105a:	f7ff fe15 	bl	8000c88 <NRF_SendCommand>
  ce_reset();
 800105e:	f7ff fdd5 	bl	8000c0c <ce_reset>
  NRF_EnterMode(NRF_MODE_RX);
 8001062:	2002      	movs	r0, #2
 8001064:	f7ff fea0 	bl	8000da8 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_RX);
 8001068:	20e2      	movs	r0, #226	; 0xe2
 800106a:	f7ff fe0d 	bl	8000c88 <NRF_SendCommand>
  ce_reset();
 800106e:	f7ff fdcd 	bl	8000c0c <ce_reset>

  // Flush register
  NRF_WriteRegisterByte(NRF_REG_CONFIG,       0x0A);
 8001072:	210a      	movs	r1, #10
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff ff2c 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_AA,        0x3f);
 800107a:	213f      	movs	r1, #63	; 0x3f
 800107c:	2001      	movs	r0, #1
 800107e:	f7ff ff28 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_RXADDR,    0x03);
 8001082:	2103      	movs	r1, #3
 8001084:	2002      	movs	r0, #2
 8001086:	f7ff ff24 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_AW,     0x03);
 800108a:	2103      	movs	r1, #3
 800108c:	2003      	movs	r0, #3
 800108e:	f7ff ff20 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_RETR,   0x03);
 8001092:	2103      	movs	r1, #3
 8001094:	2004      	movs	r0, #4
 8001096:	f7ff ff1c 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_CH,        0x02);
 800109a:	2102      	movs	r1, #2
 800109c:	2005      	movs	r0, #5
 800109e:	f7ff ff18 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_SETUP,     0x0e);
 80010a2:	210e      	movs	r1, #14
 80010a4:	2006      	movs	r0, #6
 80010a6:	f7ff ff14 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_STATUS,       0x70); // clear flags
 80010aa:	2170      	movs	r1, #112	; 0x70
 80010ac:	2007      	movs	r0, #7
 80010ae:	f7ff ff10 	bl	8000ed2 <NRF_WriteRegisterByte>

  uint8_t address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80010b2:	4a2d      	ldr	r2, [pc, #180]	; (8001168 <NRF_Reset+0x124>)
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010bc:	6018      	str	r0, [r3, #0]
 80010be:	3304      	adds	r3, #4
 80010c0:	7019      	strb	r1, [r3, #0]
  uint8_t address2[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80010c2:	4a2a      	ldr	r2, [pc, #168]	; (800116c <NRF_Reset+0x128>)
 80010c4:	463b      	mov	r3, r7
 80010c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ca:	6018      	str	r0, [r3, #0]
 80010cc:	3304      	adds	r3, #4
 80010ce:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	2205      	movs	r2, #5
 80010d6:	4619      	mov	r1, r3
 80010d8:	200a      	movs	r0, #10
 80010da:	f7ff fee4 	bl	8000ea6 <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P1, address2, 5);
 80010de:	463b      	mov	r3, r7
 80010e0:	2205      	movs	r2, #5
 80010e2:	4619      	mov	r1, r3
 80010e4:	200b      	movs	r0, #11
 80010e6:	f7ff fede 	bl	8000ea6 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P2,   0xC3);
 80010ea:	21c3      	movs	r1, #195	; 0xc3
 80010ec:	200c      	movs	r0, #12
 80010ee:	f7ff fef0 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P3,   0xC4);
 80010f2:	21c4      	movs	r1, #196	; 0xc4
 80010f4:	200d      	movs	r0, #13
 80010f6:	f7ff feec 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P4,   0xC5);
 80010fa:	21c5      	movs	r1, #197	; 0xc5
 80010fc:	200e      	movs	r0, #14
 80010fe:	f7ff fee8 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P5,   0xC6);
 8001102:	21c6      	movs	r1, #198	; 0xc6
 8001104:	200f      	movs	r0, #15
 8001106:	f7ff fee4 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	2205      	movs	r2, #5
 8001110:	4619      	mov	r1, r3
 8001112:	2010      	movs	r0, #16
 8001114:	f7ff fec7 	bl	8000ea6 <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,     0x00);
 8001118:	2100      	movs	r1, #0
 800111a:	2011      	movs	r0, #17
 800111c:	f7ff fed9 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P1,     0x00);
 8001120:	2100      	movs	r1, #0
 8001122:	2012      	movs	r0, #18
 8001124:	f7ff fed5 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P2,     0x00);
 8001128:	2100      	movs	r1, #0
 800112a:	2013      	movs	r0, #19
 800112c:	f7ff fed1 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P3,     0x00);
 8001130:	2100      	movs	r1, #0
 8001132:	2014      	movs	r0, #20
 8001134:	f7ff fecd 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P4,     0x00);
 8001138:	2100      	movs	r1, #0
 800113a:	2015      	movs	r0, #21
 800113c:	f7ff fec9 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P5,     0x00);
 8001140:	2100      	movs	r1, #0
 8001142:	2016      	movs	r0, #22
 8001144:	f7ff fec5 	bl	8000ed2 <NRF_WriteRegisterByte>

  NRF_WriteRegisterByte(NRF_REG_FIFO_STATUS,  0x00);
 8001148:	2100      	movs	r1, #0
 800114a:	2017      	movs	r0, #23
 800114c:	f7ff fec1 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_DYNPD,        0x00);
 8001150:	2100      	movs	r1, #0
 8001152:	201c      	movs	r0, #28
 8001154:	f7ff febd 	bl	8000ed2 <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_FEATURE,      0x00);
 8001158:	2100      	movs	r1, #0
 800115a:	201d      	movs	r0, #29
 800115c:	f7ff feb9 	bl	8000ed2 <NRF_WriteRegisterByte>
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	0800ac88 	.word	0x0800ac88
 800116c:	0800ac90 	.word	0x0800ac90

08001170 <NRF_PrintStatus>:

void NRF_PrintStatus() {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  uint8_t status = NRF_ReadStatus();
 8001176:	f7ff ff4b 	bl	8001010 <NRF_ReadStatus>
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]

  printf("Status register: %02X\r\n", status);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4619      	mov	r1, r3
 8001182:	4825      	ldr	r0, [pc, #148]	; (8001218 <NRF_PrintStatus+0xa8>)
 8001184:	f008 fe0a 	bl	8009d9c <iprintf>
  printf("CE: %d\r\n", HAL_GPIO_ReadPin(NRF_CE_Port, NRF_CE_Pin));
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <NRF_PrintStatus+0xac>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a24      	ldr	r2, [pc, #144]	; (8001220 <NRF_PrintStatus+0xb0>)
 800118e:	8812      	ldrh	r2, [r2, #0]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f000 feaa 	bl	8001eec <HAL_GPIO_ReadPin>
 8001198:	4603      	mov	r3, r0
 800119a:	4619      	mov	r1, r3
 800119c:	4821      	ldr	r0, [pc, #132]	; (8001224 <NRF_PrintStatus+0xb4>)
 800119e:	f008 fdfd 	bl	8009d9c <iprintf>
  printf("CSN: %d\r\n", HAL_GPIO_ReadPin(NRF_CSN_Port, NRF_CSN_Pin));
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <NRF_PrintStatus+0xb8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a21      	ldr	r2, [pc, #132]	; (800122c <NRF_PrintStatus+0xbc>)
 80011a8:	8812      	ldrh	r2, [r2, #0]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fe9d 	bl	8001eec <HAL_GPIO_ReadPin>
 80011b2:	4603      	mov	r3, r0
 80011b4:	4619      	mov	r1, r3
 80011b6:	481e      	ldr	r0, [pc, #120]	; (8001230 <NRF_PrintStatus+0xc0>)
 80011b8:	f008 fdf0 	bl	8009d9c <iprintf>
  printf("TX_FULL:  %1X\r\n", status & (1<<STATUS_BIT_TX_FULL));
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	4619      	mov	r1, r3
 80011c4:	481b      	ldr	r0, [pc, #108]	; (8001234 <NRF_PrintStatus+0xc4>)
 80011c6:	f008 fde9 	bl	8009d9c <iprintf>
  printf("RX_P_NO:  %1X\r\n", (status & (0x3<<STATUS_BIT_RX_P_NO)) >> 1);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	105b      	asrs	r3, r3, #1
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	4619      	mov	r1, r3
 80011d4:	4818      	ldr	r0, [pc, #96]	; (8001238 <NRF_PrintStatus+0xc8>)
 80011d6:	f008 fde1 	bl	8009d9c <iprintf>
  printf("MAX_RT:   %1X\r\n", (status & (1<<STATUS_BIT_MAX_RT))    >> 4);
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	111b      	asrs	r3, r3, #4
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	4619      	mov	r1, r3
 80011e4:	4815      	ldr	r0, [pc, #84]	; (800123c <NRF_PrintStatus+0xcc>)
 80011e6:	f008 fdd9 	bl	8009d9c <iprintf>
  printf("TX_DS:    %1X\r\n", (status & (1<<STATUS_BIT_TX_DS))     >> 5);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	115b      	asrs	r3, r3, #5
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	4812      	ldr	r0, [pc, #72]	; (8001240 <NRF_PrintStatus+0xd0>)
 80011f6:	f008 fdd1 	bl	8009d9c <iprintf>
  printf("RX_DR:    %1X\r\n", (status & (1<<STATUS_BIT_RX_DR))     >> 6);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	119b      	asrs	r3, r3, #6
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	4619      	mov	r1, r3
 8001204:	480f      	ldr	r0, [pc, #60]	; (8001244 <NRF_PrintStatus+0xd4>)
 8001206:	f008 fdc9 	bl	8009d9c <iprintf>
  printf("\r\n");
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <NRF_PrintStatus+0xd8>)
 800120c:	f008 fe34 	bl	8009e78 <puts>
}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	0800ac98 	.word	0x0800ac98
 800121c:	200001b8 	.word	0x200001b8
 8001220:	200001bc 	.word	0x200001bc
 8001224:	0800acb0 	.word	0x0800acb0
 8001228:	200001b0 	.word	0x200001b0
 800122c:	200001b4 	.word	0x200001b4
 8001230:	0800acbc 	.word	0x0800acbc
 8001234:	0800acc8 	.word	0x0800acc8
 8001238:	0800acd8 	.word	0x0800acd8
 800123c:	0800ace8 	.word	0x0800ace8
 8001240:	0800acf8 	.word	0x0800acf8
 8001244:	0800ad08 	.word	0x0800ad08
 8001248:	0800ad18 	.word	0x0800ad18

0800124c <NRF_PrintFIFOStatus>:

void NRF_PrintFIFOStatus() {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  uint8_t reg = NRF_ReadRegisterByte(NRF_REG_FIFO_STATUS);
 8001252:	2017      	movs	r0, #23
 8001254:	f7ff feca 	bl	8000fec <NRF_ReadRegisterByte>
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]

  printf("FIFO status register: %02X\r\n", reg);
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	4619      	mov	r1, r3
 8001260:	4818      	ldr	r0, [pc, #96]	; (80012c4 <NRF_PrintFIFOStatus+0x78>)
 8001262:	f008 fd9b 	bl	8009d9c <iprintf>
  printf("RX_EMPTY:   %2X\r\n", reg &  (1<<FIFO_STATUS_BIT_RX_EMPTY));
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	4619      	mov	r1, r3
 800126e:	4816      	ldr	r0, [pc, #88]	; (80012c8 <NRF_PrintFIFOStatus+0x7c>)
 8001270:	f008 fd94 	bl	8009d9c <iprintf>
  printf("RX_FULL:    %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_RX_FULL))     >> 1);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	105b      	asrs	r3, r3, #1
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	4619      	mov	r1, r3
 800127e:	4813      	ldr	r0, [pc, #76]	; (80012cc <NRF_PrintFIFOStatus+0x80>)
 8001280:	f008 fd8c 	bl	8009d9c <iprintf>
  printf("TX_EMPTY:   %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_EMPTY))    >> 4);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	111b      	asrs	r3, r3, #4
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	4619      	mov	r1, r3
 800128e:	4810      	ldr	r0, [pc, #64]	; (80012d0 <NRF_PrintFIFOStatus+0x84>)
 8001290:	f008 fd84 	bl	8009d9c <iprintf>
  printf("TX_FULL:    %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_FULL))     >> 5);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	115b      	asrs	r3, r3, #5
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	4619      	mov	r1, r3
 800129e:	480d      	ldr	r0, [pc, #52]	; (80012d4 <NRF_PrintFIFOStatus+0x88>)
 80012a0:	f008 fd7c 	bl	8009d9c <iprintf>
  printf("TX_REUSE:   %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_REUSE))    >> 6);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	119b      	asrs	r3, r3, #6
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	4619      	mov	r1, r3
 80012ae:	480a      	ldr	r0, [pc, #40]	; (80012d8 <NRF_PrintFIFOStatus+0x8c>)
 80012b0:	f008 fd74 	bl	8009d9c <iprintf>
  printf("\r\n");
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <NRF_PrintFIFOStatus+0x90>)
 80012b6:	f008 fddf 	bl	8009e78 <puts>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	0800ad1c 	.word	0x0800ad1c
 80012c8:	0800ad3c 	.word	0x0800ad3c
 80012cc:	0800ad50 	.word	0x0800ad50
 80012d0:	0800ad64 	.word	0x0800ad64
 80012d4:	0800ad78 	.word	0x0800ad78
 80012d8:	0800ad8c 	.word	0x0800ad8c
 80012dc:	0800ad18 	.word	0x0800ad18

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0ce      	sub	sp, #312	; 0x138
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012fa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001310:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001314:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001318:	4618      	mov	r0, r3
 800131a:	f44f 7384 	mov.w	r3, #264	; 0x108
 800131e:	461a      	mov	r2, r3
 8001320:	2100      	movs	r1, #0
 8001322:	f008 fe89 	bl	800a038 <memset>
  if(hspi->Instance==SPI1)
 8001326:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800132a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a60      	ldr	r2, [pc, #384]	; (80014b4 <HAL_SPI_MspInit+0x1c4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	f040 80b7 	bne.w	80014a8 <HAL_SPI_MspInit+0x1b8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800133a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800133e:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001342:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 800134e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001352:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001356:	2200      	movs	r2, #0
 8001358:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135c:	f107 0318 	add.w	r3, r7, #24
 8001360:	4618      	mov	r0, r3
 8001362:	f001 fd93 	bl	8002e8c <HAL_RCCEx_PeriphCLKConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 800136c:	f7ff fc18 	bl	8000ba0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001370:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <HAL_SPI_MspInit+0x1c8>)
 8001372:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001376:	4a50      	ldr	r2, [pc, #320]	; (80014b8 <HAL_SPI_MspInit+0x1c8>)
 8001378:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800137c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001380:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <HAL_SPI_MspInit+0x1c8>)
 8001382:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001386:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800138a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800138e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001398:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800139c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b46      	ldr	r3, [pc, #280]	; (80014b8 <HAL_SPI_MspInit+0x1c8>)
 80013a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a4:	4a44      	ldr	r2, [pc, #272]	; (80014b8 <HAL_SPI_MspInit+0x1c8>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013ae:	4b42      	ldr	r3, [pc, #264]	; (80014b8 <HAL_SPI_MspInit+0x1c8>)
 80013b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b4:	f003 0201 	and.w	r2, r3, #1
 80013b8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013bc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80013ca:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013cc:	4b3a      	ldr	r3, [pc, #232]	; (80014b8 <HAL_SPI_MspInit+0x1c8>)
 80013ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d2:	4a39      	ldr	r2, [pc, #228]	; (80014b8 <HAL_SPI_MspInit+0x1c8>)
 80013d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013dc:	4b36      	ldr	r3, [pc, #216]	; (80014b8 <HAL_SPI_MspInit+0x1c8>)
 80013de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013e2:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80013e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013f8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <HAL_SPI_MspInit+0x1c8>)
 80013fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001400:	4a2d      	ldr	r2, [pc, #180]	; (80014b8 <HAL_SPI_MspInit+0x1c8>)
 8001402:	f043 0302 	orr.w	r3, r3, #2
 8001406:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800140a:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_SPI_MspInit+0x1c8>)
 800140c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001410:	f003 0202 	and.w	r2, r3, #2
 8001414:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001426:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin;
 8001428:	2320      	movs	r3, #32
 800142a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001440:	2305      	movs	r3, #5
 8001442:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 8001446:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800144a:	4619      	mov	r1, r3
 800144c:	481b      	ldr	r0, [pc, #108]	; (80014bc <HAL_SPI_MspInit+0x1cc>)
 800144e:	f000 fbfb 	bl	8001c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 8001452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001456:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800146c:	2305      	movs	r3, #5
 800146e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 8001472:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001476:	4619      	mov	r1, r3
 8001478:	4811      	ldr	r0, [pc, #68]	; (80014c0 <HAL_SPI_MspInit+0x1d0>)
 800147a:	f000 fbe5 	bl	8001c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MOSI_Pin;
 800147e:	2320      	movs	r3, #32
 8001480:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001496:	2305      	movs	r3, #5
 8001498:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_MOSI_GPIO_Port, &GPIO_InitStruct);
 800149c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80014a0:	4619      	mov	r1, r3
 80014a2:	4808      	ldr	r0, [pc, #32]	; (80014c4 <HAL_SPI_MspInit+0x1d4>)
 80014a4:	f000 fbd0 	bl	8001c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40013000 	.word	0x40013000
 80014b8:	44020c00 	.word	0x44020c00
 80014bc:	42020000 	.word	0x42020000
 80014c0:	42021800 	.word	0x42021800
 80014c4:	42020400 	.word	0x42020400

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0cc      	sub	sp, #304	; 0x130
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014d6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014f0:	4618      	mov	r0, r3
 80014f2:	f44f 7384 	mov.w	r3, #264	; 0x108
 80014f6:	461a      	mov	r2, r3
 80014f8:	2100      	movs	r1, #0
 80014fa:	f008 fd9d 	bl	800a038 <memset>
  if(huart->Instance==USART3)
 80014fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001502:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a33      	ldr	r2, [pc, #204]	; (80015d8 <HAL_UART_MspInit+0x110>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d15d      	bne.n	80015cc <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001514:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8001518:	f04f 0204 	mov.w	r2, #4
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001528:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800152c:	2200      	movs	r2, #0
 800152e:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	4618      	mov	r0, r3
 8001536:	f001 fca9 	bl	8002e8c <HAL_RCCEx_PeriphCLKConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8001540:	f7ff fb2e 	bl	8000ba0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001544:	4b25      	ldr	r3, [pc, #148]	; (80015dc <HAL_UART_MspInit+0x114>)
 8001546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800154a:	4a24      	ldr	r2, [pc, #144]	; (80015dc <HAL_UART_MspInit+0x114>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <HAL_UART_MspInit+0x114>)
 8001556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800155a:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 800155e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001562:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800156c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001570:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_UART_MspInit+0x114>)
 8001574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001578:	4a18      	ldr	r2, [pc, #96]	; (80015dc <HAL_UART_MspInit+0x114>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <HAL_UART_MspInit+0x114>)
 8001584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001588:	f003 0208 	and.w	r2, r3, #8
 800158c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001590:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800159a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800159e:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015a4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015ba:	2307      	movs	r3, #7
 80015bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80015c4:	4619      	mov	r1, r3
 80015c6:	4806      	ldr	r0, [pc, #24]	; (80015e0 <HAL_UART_MspInit+0x118>)
 80015c8:	f000 fb3e 	bl	8001c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015cc:	bf00      	nop
 80015ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40004800 	.word	0x40004800
 80015dc:	44020c00 	.word	0x44020c00
 80015e0:	42020c00 	.word	0x42020c00

080015e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <NMI_Handler+0x4>

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f000 f9b6 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 800163c:	2008      	movs	r0, #8
 800163e:	f000 fc85 	bl	8001f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}

08001646 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_USER_Pin);
 800164a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800164e:	f000 fc7d 	bl	8001f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}

08001656 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e00a      	b.n	800167e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001668:	f3af 8000 	nop.w
 800166c:	4601      	mov	r1, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	60ba      	str	r2, [r7, #8]
 8001674:	b2ca      	uxtb	r2, r1
 8001676:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	429a      	cmp	r2, r3
 8001684:	dbf0      	blt.n	8001668 <_read+0x12>
  }

  return len;
 8001686:	687b      	ldr	r3, [r7, #4]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	e009      	b.n	80016b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	60ba      	str	r2, [r7, #8]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff7e 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3301      	adds	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	dbf1      	blt.n	80016a2 <_write+0x12>
  }
  return len;
 80016be:	687b      	ldr	r3, [r7, #4]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_close>:

int _close(int file)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f0:	605a      	str	r2, [r3, #4]
  return 0;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <_isatty>:

int _isatty(int file)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001708:	2301      	movs	r3, #1
}
 800170a:	4618      	mov	r0, r3
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001716:	b480      	push	{r7}
 8001718:	b085      	sub	sp, #20
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f008 fcb8 	bl	800a0d4 <__errno>
 8001764:	4603      	mov	r3, r0
 8001766:	220c      	movs	r2, #12
 8001768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200a0000 	.word	0x200a0000
 8001790:	00000400 	.word	0x00000400
 8001794:	200001c0 	.word	0x200001c0
 8001798:	20000318 	.word	0x20000318

0800179c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017a2:	4b35      	ldr	r3, [pc, #212]	; (8001878 <SystemInit+0xdc>)
 80017a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a8:	4a33      	ldr	r2, [pc, #204]	; (8001878 <SystemInit+0xdc>)
 80017aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80017b2:	4b32      	ldr	r3, [pc, #200]	; (800187c <SystemInit+0xe0>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80017b8:	4b30      	ldr	r3, [pc, #192]	; (800187c <SystemInit+0xe0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80017be:	4b2f      	ldr	r3, [pc, #188]	; (800187c <SystemInit+0xe0>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80017c4:	4b2d      	ldr	r3, [pc, #180]	; (800187c <SystemInit+0xe0>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	492c      	ldr	r1, [pc, #176]	; (800187c <SystemInit+0xe0>)
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <SystemInit+0xe4>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80017d0:	4b2a      	ldr	r3, [pc, #168]	; (800187c <SystemInit+0xe0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <SystemInit+0xe0>)
 80017d8:	2200      	movs	r2, #0
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <SystemInit+0xe0>)
 80017de:	2200      	movs	r2, #0
 80017e0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80017e2:	4b26      	ldr	r3, [pc, #152]	; (800187c <SystemInit+0xe0>)
 80017e4:	4a27      	ldr	r2, [pc, #156]	; (8001884 <SystemInit+0xe8>)
 80017e6:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80017e8:	4b24      	ldr	r3, [pc, #144]	; (800187c <SystemInit+0xe0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80017ee:	4b23      	ldr	r3, [pc, #140]	; (800187c <SystemInit+0xe0>)
 80017f0:	4a24      	ldr	r2, [pc, #144]	; (8001884 <SystemInit+0xe8>)
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <SystemInit+0xe0>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <SystemInit+0xe0>)
 80017fc:	4a21      	ldr	r2, [pc, #132]	; (8001884 <SystemInit+0xe8>)
 80017fe:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <SystemInit+0xe0>)
 8001802:	2200      	movs	r2, #0
 8001804:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <SystemInit+0xe0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a1c      	ldr	r2, [pc, #112]	; (800187c <SystemInit+0xe0>)
 800180c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <SystemInit+0xe0>)
 8001814:	2200      	movs	r2, #0
 8001816:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <SystemInit+0xdc>)
 800181a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800181e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <SystemInit+0xec>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001828:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001830:	d003      	beq.n	800183a <SystemInit+0x9e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001838:	d117      	bne.n	800186a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <SystemInit+0xec>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <SystemInit+0xec>)
 8001848:	4a10      	ldr	r2, [pc, #64]	; (800188c <SystemInit+0xf0>)
 800184a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <SystemInit+0xec>)
 800184e:	4a10      	ldr	r2, [pc, #64]	; (8001890 <SystemInit+0xf4>)
 8001850:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <SystemInit+0xec>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <SystemInit+0xec>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <SystemInit+0xec>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <SystemInit+0xec>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	61d3      	str	r3, [r2, #28]
  }
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00
 800187c:	44020c00 	.word	0x44020c00
 8001880:	eae2eae3 	.word	0xeae2eae3
 8001884:	01010280 	.word	0x01010280
 8001888:	40022000 	.word	0x40022000
 800188c:	08192a3b 	.word	0x08192a3b
 8001890:	4c5d6e7f 	.word	0x4c5d6e7f

08001894 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001896:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001898:	f7ff ff80 	bl	800179c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800189c:	480c      	ldr	r0, [pc, #48]	; (80018d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800189e:	490d      	ldr	r1, [pc, #52]	; (80018d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <LoopForever+0xe>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80018b4:	4c0a      	ldr	r4, [pc, #40]	; (80018e0 <LoopForever+0x16>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018c2:	f008 fc0d 	bl	800a0e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018c6:	f7fe ff6d 	bl	80007a4 <main>

080018ca <LoopForever>:

LoopForever:
    b LoopForever
 80018ca:	e7fe      	b.n	80018ca <LoopForever>
  ldr   r0, =_estack
 80018cc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80018d8:	0800ae24 	.word	0x0800ae24
  ldr r2, =_sbss
 80018dc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80018e0:	20000314 	.word	0x20000314

080018e4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC1_IRQHandler>
	...

080018e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f96b 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80018f2:	f001 f941 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 80018f6:	4602      	mov	r2, r0
 80018f8:	4b0b      	ldr	r3, [pc, #44]	; (8001928 <HAL_Init+0x40>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	490a      	ldr	r1, [pc, #40]	; (800192c <HAL_Init+0x44>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	fa22 f303 	lsr.w	r3, r2, r3
 8001908:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_Init+0x48>)
 800190a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800190c:	200f      	movs	r0, #15
 800190e:	f000 f811 	bl	8001934 <HAL_InitTick>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e002      	b.n	8001922 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800191c:	f7ff fce0 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	44020c00 	.word	0x44020c00
 800192c:	0800ada0 	.word	0x0800ada0
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800193c:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_InitTick+0x60>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e021      	b.n	800198c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <HAL_InitTick+0x64>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_InitTick+0x60>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001956:	fbb3 f3f1 	udiv	r3, r3, r1
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f965 	bl	8001c2e <HAL_SYSTICK_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e00e      	b.n	800198c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d80a      	bhi.n	800198a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800197c:	f000 f92f 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001980:	4a06      	ldr	r2, [pc, #24]	; (800199c <HAL_InitTick+0x68>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	e000      	b.n	800198c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	2000000c 	.word	0x2000000c
 8001998:	20000004 	.word	0x20000004
 800199c:	20000008 	.word	0x20000008

080019a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x20>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x24>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_IncTick+0x24>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	200001c4 	.word	0x200001c4

080019c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_GetTick+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	200001c4 	.word	0x200001c4

080019e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff ffee 	bl	80019c8 <HAL_GetTick>
 80019ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019f8:	d005      	beq.n	8001a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_Delay+0x44>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a06:	bf00      	nop
 8001a08:	f7ff ffde 	bl	80019c8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d8f7      	bhi.n	8001a08 <HAL_Delay+0x28>
  {
  }
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000000c 	.word	0x2000000c

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	60d3      	str	r3, [r2, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db0b      	blt.n	8001ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <__NVIC_EnableIRQ+0x38>)
 8001aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2001      	movs	r0, #1
 8001aae:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	; (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ba8:	f7ff ff8e 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff29 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff40 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff90 	bl	8001b1c <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5f 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff33 	bl	8001a8c <__NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffa4 	bl	8001b84 <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c56:	e136      	b.n	8001ec6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	4013      	ands	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 8128 	beq.w	8001ec0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x38>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b12      	cmp	r3, #18
 8001c7e:	d125      	bne.n	8001ccc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f003 020f 	and.w	r2, r3, #15
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	08da      	lsrs	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3208      	adds	r2, #8
 8001cc6:	6979      	ldr	r1, [r7, #20]
 8001cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d00b      	beq.n	8001d20 <HAL_GPIO_Init+0xd8>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d007      	beq.n	8001d20 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d14:	2b11      	cmp	r3, #17
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b12      	cmp	r3, #18
 8001d1e:	d130      	bne.n	8001d82 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4013      	ands	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d56:	2201      	movs	r2, #1
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	4013      	ands	r3, r2
 8001d64:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	f003 0201 	and.w	r2, r3, #1
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d017      	beq.n	8001dba <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	2203      	movs	r2, #3
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d07c      	beq.n	8001ec0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001dc6:	4a47      	ldr	r2, [pc, #284]	; (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3318      	adds	r3, #24
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4013      	ands	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0a9a      	lsrs	r2, r3, #10
 8001dee:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <HAL_GPIO_Init+0x2a0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	f002 0203 	and.w	r2, r2, #3
 8001df8:	00d2      	lsls	r2, r2, #3
 8001dfa:	4093      	lsls	r3, r2
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e02:	4938      	ldr	r1, [pc, #224]	; (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3318      	adds	r3, #24
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e10:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001e34:	4a2b      	ldr	r2, [pc, #172]	; (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001e3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	4013      	ands	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001e5e:	4a21      	ldr	r2, [pc, #132]	; (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001e64:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e6a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	4013      	ands	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e98:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001eb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <HAL_GPIO_Init+0x29c>)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f47f aec1 	bne.w	8001c58 <HAL_GPIO_Init+0x10>
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	371c      	adds	r7, #28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	44022000 	.word	0x44022000
 8001ee8:	002f7f7f 	.word	0x002f7f7f

08001eec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	887b      	ldrh	r3, [r7, #2]
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d002      	beq.n	8001f0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	e001      	b.n	8001f0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f2c:	787b      	ldrb	r3, [r7, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d006      	beq.n	8001f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001f62:	4a0c      	ldr	r2, [pc, #48]	; (8001f94 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fb30 	bl	80005d0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001f7c:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe fb71 	bl	800066c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	44022000 	.word	0x44022000

08001f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f000 bc28 	b.w	80027fc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fac:	4b94      	ldr	r3, [pc, #592]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	f003 0318 	and.w	r3, r3, #24
 8001fb4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001fb6:	4b92      	ldr	r3, [pc, #584]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0310 	and.w	r3, r3, #16
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d05b      	beq.n	8002084 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d005      	beq.n	8001fde <HAL_RCC_OscConfig+0x46>
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	2b18      	cmp	r3, #24
 8001fd6:	d114      	bne.n	8002002 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d111      	bne.n	8002002 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	f000 bc08 	b.w	80027fc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001fec:	4b84      	ldr	r3, [pc, #528]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	4981      	ldr	r1, [pc, #516]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002000:	e040      	b.n	8002084 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d023      	beq.n	8002052 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800200a:	4b7d      	ldr	r3, [pc, #500]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a7c      	ldr	r2, [pc, #496]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7ff fcd7 	bl	80019c8 <HAL_GetTick>
 800201a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800201e:	f7ff fcd3 	bl	80019c8 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e3e5      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002030:	4b73      	ldr	r3, [pc, #460]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800203c:	4b70      	ldr	r3, [pc, #448]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	041b      	lsls	r3, r3, #16
 800204a:	496d      	ldr	r1, [pc, #436]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 800204c:	4313      	orrs	r3, r2
 800204e:	618b      	str	r3, [r1, #24]
 8002050:	e018      	b.n	8002084 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002052:	4b6b      	ldr	r3, [pc, #428]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a6a      	ldr	r2, [pc, #424]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800205c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7ff fcb3 	bl	80019c8 <HAL_GetTick>
 8002062:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002066:	f7ff fcaf 	bl	80019c8 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e3c1      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002078:	4b61      	ldr	r3, [pc, #388]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1f0      	bne.n	8002066 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a0 	beq.w	80021d2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	2b10      	cmp	r3, #16
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_OscConfig+0x10c>
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	2b18      	cmp	r3, #24
 800209c:	d109      	bne.n	80020b2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d106      	bne.n	80020b2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f040 8092 	bne.w	80021d2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e3a4      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x132>
 80020bc:	4b50      	ldr	r3, [pc, #320]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a4f      	ldr	r2, [pc, #316]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 80020c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	e058      	b.n	800217c <HAL_RCC_OscConfig+0x1e4>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d112      	bne.n	80020f8 <HAL_RCC_OscConfig+0x160>
 80020d2:	4b4b      	ldr	r3, [pc, #300]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a4a      	ldr	r2, [pc, #296]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 80020d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b48      	ldr	r3, [pc, #288]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a47      	ldr	r2, [pc, #284]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 80020e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b45      	ldr	r3, [pc, #276]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a44      	ldr	r2, [pc, #272]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 80020f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	e041      	b.n	800217c <HAL_RCC_OscConfig+0x1e4>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002100:	d112      	bne.n	8002128 <HAL_RCC_OscConfig+0x190>
 8002102:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a3e      	ldr	r2, [pc, #248]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002108:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210c:	6013      	str	r3, [r2, #0]
 800210e:	4b3c      	ldr	r3, [pc, #240]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a3b      	ldr	r2, [pc, #236]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002114:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b39      	ldr	r3, [pc, #228]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a38      	ldr	r2, [pc, #224]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002124:	6013      	str	r3, [r2, #0]
 8002126:	e029      	b.n	800217c <HAL_RCC_OscConfig+0x1e4>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002130:	d112      	bne.n	8002158 <HAL_RCC_OscConfig+0x1c0>
 8002132:	4b33      	ldr	r3, [pc, #204]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a32      	ldr	r2, [pc, #200]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a2f      	ldr	r2, [pc, #188]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2c      	ldr	r2, [pc, #176]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e011      	b.n	800217c <HAL_RCC_OscConfig+0x1e4>
 8002158:	4b29      	ldr	r3, [pc, #164]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a28      	ldr	r2, [pc, #160]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 800215e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b26      	ldr	r3, [pc, #152]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a25      	ldr	r2, [pc, #148]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 800216a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b23      	ldr	r3, [pc, #140]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a22      	ldr	r2, [pc, #136]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 8002176:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800217a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff fc20 	bl	80019c8 <HAL_GetTick>
 8002188:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800218c:	f7ff fc1c 	bl	80019c8 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e32e      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x1f4>
 80021aa:	e012      	b.n	80021d2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff fc0c 	bl	80019c8 <HAL_GetTick>
 80021b0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80021b4:	f7ff fc08 	bl	80019c8 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e31a      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <HAL_RCC_OscConfig+0x268>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 809a 	beq.w	8002314 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_RCC_OscConfig+0x25a>
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	2b18      	cmp	r3, #24
 80021ea:	d149      	bne.n	8002280 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d146      	bne.n	8002280 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d104      	bne.n	8002204 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e2fe      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
 80021fe:	bf00      	nop
 8002200:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d11c      	bne.n	8002244 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800220a:	4b9a      	ldr	r3, [pc, #616]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0218 	and.w	r2, r3, #24
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	429a      	cmp	r2, r3
 8002218:	d014      	beq.n	8002244 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800221a:	4b96      	ldr	r3, [pc, #600]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0218 	bic.w	r2, r3, #24
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	4993      	ldr	r1, [pc, #588]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 8002228:	4313      	orrs	r3, r2
 800222a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800222c:	f000 fdd0 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002230:	4b91      	ldr	r3, [pc, #580]	; (8002478 <HAL_RCC_OscConfig+0x4e0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff fb7d 	bl	8001934 <HAL_InitTick>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e2db      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7ff fbc0 	bl	80019c8 <HAL_GetTick>
 8002248:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800224c:	f7ff fbbc 	bl	80019c8 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e2ce      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225e:	4b85      	ldr	r3, [pc, #532]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800226a:	4b82      	ldr	r3, [pc, #520]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	041b      	lsls	r3, r3, #16
 8002278:	497e      	ldr	r1, [pc, #504]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800227a:	4313      	orrs	r3, r2
 800227c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800227e:	e049      	b.n	8002314 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d02c      	beq.n	80022e2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002288:	4b7a      	ldr	r3, [pc, #488]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f023 0218 	bic.w	r2, r3, #24
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	4977      	ldr	r1, [pc, #476]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 8002296:	4313      	orrs	r3, r2
 8002298:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800229a:	4b76      	ldr	r3, [pc, #472]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a75      	ldr	r2, [pc, #468]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7ff fb8f 	bl	80019c8 <HAL_GetTick>
 80022aa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80022ae:	f7ff fb8b 	bl	80019c8 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e29d      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c0:	4b6c      	ldr	r3, [pc, #432]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80022cc:	4b69      	ldr	r3, [pc, #420]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	041b      	lsls	r3, r3, #16
 80022da:	4966      	ldr	r1, [pc, #408]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	610b      	str	r3, [r1, #16]
 80022e0:	e018      	b.n	8002314 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e2:	4b64      	ldr	r3, [pc, #400]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a63      	ldr	r2, [pc, #396]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7ff fb6b 	bl	80019c8 <HAL_GetTick>
 80022f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80022f6:	f7ff fb67 	bl	80019c8 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e279      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002308:	4b5a      	ldr	r3, [pc, #360]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d03c      	beq.n	800239a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01c      	beq.n	8002362 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002328:	4b52      	ldr	r3, [pc, #328]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800232a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800232e:	4a51      	ldr	r2, [pc, #324]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 8002330:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002334:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002338:	f7ff fb46 	bl	80019c8 <HAL_GetTick>
 800233c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002340:	f7ff fb42 	bl	80019c8 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e254      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002352:	4b48      	ldr	r3, [pc, #288]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 8002354:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ef      	beq.n	8002340 <HAL_RCC_OscConfig+0x3a8>
 8002360:	e01b      	b.n	800239a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002362:	4b44      	ldr	r3, [pc, #272]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 8002364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002368:	4a42      	ldr	r2, [pc, #264]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800236a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800236e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002372:	f7ff fb29 	bl	80019c8 <HAL_GetTick>
 8002376:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800237a:	f7ff fb25 	bl	80019c8 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e237      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800238c:	4b39      	ldr	r3, [pc, #228]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800238e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002392:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1ef      	bne.n	800237a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80d2 	beq.w	800254c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80023a8:	4b34      	ldr	r3, [pc, #208]	; (800247c <HAL_RCC_OscConfig+0x4e4>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d118      	bne.n	80023e6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80023b4:	4b31      	ldr	r3, [pc, #196]	; (800247c <HAL_RCC_OscConfig+0x4e4>)
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	4a30      	ldr	r2, [pc, #192]	; (800247c <HAL_RCC_OscConfig+0x4e4>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c0:	f7ff fb02 	bl	80019c8 <HAL_GetTick>
 80023c4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7ff fafe 	bl	80019c8 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e210      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_RCC_OscConfig+0x4e4>)
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d108      	bne.n	8002400 <HAL_RCC_OscConfig+0x468>
 80023ee:	4b21      	ldr	r3, [pc, #132]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 80023f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023f4:	4a1f      	ldr	r2, [pc, #124]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023fe:	e074      	b.n	80024ea <HAL_RCC_OscConfig+0x552>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d118      	bne.n	800243a <HAL_RCC_OscConfig+0x4a2>
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800240a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800240e:	4a19      	ldr	r2, [pc, #100]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800241a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800241e:	4a15      	ldr	r2, [pc, #84]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 8002420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002424:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800242a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800242e:	4a11      	ldr	r2, [pc, #68]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002438:	e057      	b.n	80024ea <HAL_RCC_OscConfig+0x552>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b05      	cmp	r3, #5
 8002440:	d11e      	bne.n	8002480 <HAL_RCC_OscConfig+0x4e8>
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 8002444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800244a:	f043 0304 	orr.w	r3, r3, #4
 800244e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 8002454:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002458:	4a06      	ldr	r2, [pc, #24]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800245a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800245e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002462:	4b04      	ldr	r3, [pc, #16]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 8002464:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002468:	4a02      	ldr	r2, [pc, #8]	; (8002474 <HAL_RCC_OscConfig+0x4dc>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002472:	e03a      	b.n	80024ea <HAL_RCC_OscConfig+0x552>
 8002474:	44020c00 	.word	0x44020c00
 8002478:	20000008 	.word	0x20000008
 800247c:	44020800 	.word	0x44020800
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b85      	cmp	r3, #133	; 0x85
 8002486:	d118      	bne.n	80024ba <HAL_RCC_OscConfig+0x522>
 8002488:	4ba2      	ldr	r3, [pc, #648]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 800248a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800248e:	4aa1      	ldr	r2, [pc, #644]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002498:	4b9e      	ldr	r3, [pc, #632]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 800249a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800249e:	4a9d      	ldr	r2, [pc, #628]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80024a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024a8:	4b9a      	ldr	r3, [pc, #616]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80024aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024ae:	4a99      	ldr	r2, [pc, #612]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024b8:	e017      	b.n	80024ea <HAL_RCC_OscConfig+0x552>
 80024ba:	4b96      	ldr	r3, [pc, #600]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80024bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024c0:	4a94      	ldr	r2, [pc, #592]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80024c2:	f023 0301 	bic.w	r3, r3, #1
 80024c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024ca:	4b92      	ldr	r3, [pc, #584]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80024cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024d0:	4a90      	ldr	r2, [pc, #576]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80024d2:	f023 0304 	bic.w	r3, r3, #4
 80024d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024da:	4b8e      	ldr	r3, [pc, #568]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80024dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024e0:	4a8c      	ldr	r2, [pc, #560]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80024e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d016      	beq.n	8002520 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f2:	f7ff fa69 	bl	80019c8 <HAL_GetTick>
 80024f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f8:	e00a      	b.n	8002510 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7ff fa65 	bl	80019c8 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e175      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002510:	4b80      	ldr	r3, [pc, #512]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 8002512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0ed      	beq.n	80024fa <HAL_RCC_OscConfig+0x562>
 800251e:	e015      	b.n	800254c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7ff fa52 	bl	80019c8 <HAL_GetTick>
 8002524:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002526:	e00a      	b.n	800253e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002528:	f7ff fa4e 	bl	80019c8 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	f241 3288 	movw	r2, #5000	; 0x1388
 8002536:	4293      	cmp	r3, r2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e15e      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800253e:	4b75      	ldr	r3, [pc, #468]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 8002540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ed      	bne.n	8002528 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d036      	beq.n	80025c6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	2b00      	cmp	r3, #0
 800255e:	d019      	beq.n	8002594 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002560:	4b6c      	ldr	r3, [pc, #432]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a6b      	ldr	r2, [pc, #428]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 8002566:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800256a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256c:	f7ff fa2c 	bl	80019c8 <HAL_GetTick>
 8002570:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002574:	f7ff fa28 	bl	80019c8 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e13a      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002586:	4b63      	ldr	r3, [pc, #396]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x5dc>
 8002592:	e018      	b.n	80025c6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002594:	4b5f      	ldr	r3, [pc, #380]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a5e      	ldr	r2, [pc, #376]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 800259a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800259e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a0:	f7ff fa12 	bl	80019c8 <HAL_GetTick>
 80025a4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80025a8:	f7ff fa0e 	bl	80019c8 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e120      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80025ba:	4b56      	ldr	r3, [pc, #344]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 8115 	beq.w	80027fa <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	2b18      	cmp	r3, #24
 80025d4:	f000 80af 	beq.w	8002736 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	2b02      	cmp	r3, #2
 80025de:	f040 8086 	bne.w	80026ee <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80025e2:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a4b      	ldr	r2, [pc, #300]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80025e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ee:	f7ff f9eb 	bl	80019c8 <HAL_GetTick>
 80025f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80025f6:	f7ff f9e7 	bl	80019c8 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0f9      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002608:	4b42      	ldr	r3, [pc, #264]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f0      	bne.n	80025f6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002614:	4b3f      	ldr	r3, [pc, #252]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800261c:	f023 0303 	bic.w	r3, r3, #3
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002628:	0212      	lsls	r2, r2, #8
 800262a:	430a      	orrs	r2, r1
 800262c:	4939      	ldr	r1, [pc, #228]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 800262e:	4313      	orrs	r3, r2
 8002630:	628b      	str	r3, [r1, #40]	; 0x28
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002636:	3b01      	subs	r3, #1
 8002638:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002640:	3b01      	subs	r3, #1
 8002642:	025b      	lsls	r3, r3, #9
 8002644:	b29b      	uxth	r3, r3
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264c:	3b01      	subs	r3, #1
 800264e:	041b      	lsls	r3, r3, #16
 8002650:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	3b01      	subs	r3, #1
 800265c:	061b      	lsls	r3, r3, #24
 800265e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002662:	492c      	ldr	r1, [pc, #176]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 8002664:	4313      	orrs	r3, r2
 8002666:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002668:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	4a29      	ldr	r2, [pc, #164]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 800266e:	f023 0310 	bic.w	r3, r3, #16
 8002672:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002678:	4a26      	ldr	r2, [pc, #152]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800267e:	4b25      	ldr	r3, [pc, #148]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	4a24      	ldr	r2, [pc, #144]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 8002684:	f043 0310 	orr.w	r3, r3, #16
 8002688:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800268a:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	f023 020c 	bic.w	r2, r3, #12
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	491f      	ldr	r1, [pc, #124]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 8002698:	4313      	orrs	r3, r2
 800269a:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800269c:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	f023 0220 	bic.w	r2, r3, #32
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a8:	491a      	ldr	r1, [pc, #104]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	4a18      	ldr	r2, [pc, #96]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80026b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a15      	ldr	r2, [pc, #84]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80026c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7ff f97f 	bl	80019c8 <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80026ce:	f7ff f97b 	bl	80019c8 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e08d      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80026e0:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x736>
 80026ec:	e085      	b.n	80027fa <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a08      	ldr	r2, [pc, #32]	; (8002714 <HAL_RCC_OscConfig+0x77c>)
 80026f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7ff f965 	bl	80019c8 <HAL_GetTick>
 80026fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002702:	f7ff f961 	bl	80019c8 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d903      	bls.n	8002718 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e073      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
 8002714:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002718:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <HAL_RCC_OscConfig+0x86c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1ee      	bne.n	8002702 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002724:	4b37      	ldr	r3, [pc, #220]	; (8002804 <HAL_RCC_OscConfig+0x86c>)
 8002726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002728:	4a36      	ldr	r2, [pc, #216]	; (8002804 <HAL_RCC_OscConfig+0x86c>)
 800272a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	6293      	str	r3, [r2, #40]	; 0x28
 8002734:	e061      	b.n	80027fa <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002736:	4b33      	ldr	r3, [pc, #204]	; (8002804 <HAL_RCC_OscConfig+0x86c>)
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800273c:	4b31      	ldr	r3, [pc, #196]	; (8002804 <HAL_RCC_OscConfig+0x86c>)
 800273e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002740:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	2b01      	cmp	r3, #1
 8002748:	d031      	beq.n	80027ae <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	f003 0203 	and.w	r2, r3, #3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d12a      	bne.n	80027ae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d122      	bne.n	80027ae <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002772:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002774:	429a      	cmp	r2, r3
 8002776:	d11a      	bne.n	80027ae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	0a5b      	lsrs	r3, r3, #9
 800277c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002784:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d111      	bne.n	80027ae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	0c1b      	lsrs	r3, r3, #16
 800278e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d108      	bne.n	80027ae <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	0e1b      	lsrs	r3, r3, #24
 80027a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e024      	b.n	80027fc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <HAL_RCC_OscConfig+0x86c>)
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	08db      	lsrs	r3, r3, #3
 80027b8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d01a      	beq.n	80027fa <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_RCC_OscConfig+0x86c>)
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <HAL_RCC_OscConfig+0x86c>)
 80027ca:	f023 0310 	bic.w	r3, r3, #16
 80027ce:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7ff f8fa 	bl	80019c8 <HAL_GetTick>
 80027d4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80027d6:	bf00      	nop
 80027d8:	f7ff f8f6 	bl	80019c8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d0f9      	beq.n	80027d8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e8:	4a06      	ldr	r2, [pc, #24]	; (8002804 <HAL_RCC_OscConfig+0x86c>)
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_RCC_OscConfig+0x86c>)
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	4a04      	ldr	r2, [pc, #16]	; (8002804 <HAL_RCC_OscConfig+0x86c>)
 80027f4:	f043 0310 	orr.w	r3, r3, #16
 80027f8:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	44020c00 	.word	0x44020c00

08002808 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e19e      	b.n	8002b5a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800281c:	4b83      	ldr	r3, [pc, #524]	; (8002a2c <HAL_RCC_ClockConfig+0x224>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d910      	bls.n	800284c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b80      	ldr	r3, [pc, #512]	; (8002a2c <HAL_RCC_ClockConfig+0x224>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 020f 	bic.w	r2, r3, #15
 8002832:	497e      	ldr	r1, [pc, #504]	; (8002a2c <HAL_RCC_ClockConfig+0x224>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b7c      	ldr	r3, [pc, #496]	; (8002a2c <HAL_RCC_ClockConfig+0x224>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e186      	b.n	8002b5a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b00      	cmp	r3, #0
 8002856:	d012      	beq.n	800287e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	4b74      	ldr	r3, [pc, #464]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002866:	429a      	cmp	r2, r3
 8002868:	d909      	bls.n	800287e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800286a:	4b71      	ldr	r3, [pc, #452]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	496d      	ldr	r1, [pc, #436]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 800287a:	4313      	orrs	r3, r2
 800287c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d012      	beq.n	80028b0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	4b68      	ldr	r3, [pc, #416]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	091b      	lsrs	r3, r3, #4
 8002894:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002898:	429a      	cmp	r2, r3
 800289a:	d909      	bls.n	80028b0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800289c:	4b64      	ldr	r3, [pc, #400]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	4961      	ldr	r1, [pc, #388]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d010      	beq.n	80028de <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	4b5b      	ldr	r3, [pc, #364]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d908      	bls.n	80028de <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80028cc:	4b58      	ldr	r3, [pc, #352]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4955      	ldr	r1, [pc, #340]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d010      	beq.n	800290c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	4b50      	ldr	r3, [pc, #320]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d908      	bls.n	800290c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80028fa:	4b4d      	ldr	r3, [pc, #308]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	f023 020f 	bic.w	r2, r3, #15
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	494a      	ldr	r1, [pc, #296]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 8002908:	4313      	orrs	r3, r2
 800290a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8093 	beq.w	8002a40 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002922:	4b43      	ldr	r3, [pc, #268]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d121      	bne.n	8002972 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e113      	b.n	8002b5a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800293a:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d115      	bne.n	8002972 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e107      	b.n	8002b5a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002952:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e0fb      	b.n	8002b5a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002962:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0f3      	b.n	8002b5a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002972:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f023 0203 	bic.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	492c      	ldr	r1, [pc, #176]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 8002980:	4313      	orrs	r3, r2
 8002982:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002984:	f7ff f820 	bl	80019c8 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b03      	cmp	r3, #3
 8002990:	d112      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002992:	e00a      	b.n	80029aa <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002994:	f7ff f818 	bl	80019c8 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e0d7      	b.n	8002b5a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029aa:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 0318 	and.w	r3, r3, #24
 80029b2:	2b18      	cmp	r3, #24
 80029b4:	d1ee      	bne.n	8002994 <HAL_RCC_ClockConfig+0x18c>
 80029b6:	e043      	b.n	8002a40 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d112      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80029c2:	f7ff f801 	bl	80019c8 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e0c0      	b.n	8002b5a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f003 0318 	and.w	r3, r3, #24
 80029e0:	2b10      	cmp	r3, #16
 80029e2:	d1ee      	bne.n	80029c2 <HAL_RCC_ClockConfig+0x1ba>
 80029e4:	e02c      	b.n	8002a40 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d122      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80029f0:	f7fe ffea 	bl	80019c8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e0a9      	b.n	8002b5a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002a06:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <HAL_RCC_ClockConfig+0x228>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f003 0318 	and.w	r3, r3, #24
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d1ee      	bne.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
 8002a12:	e015      	b.n	8002a40 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a14:	f7fe ffd8 	bl	80019c8 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d906      	bls.n	8002a34 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e097      	b.n	8002b5a <HAL_RCC_ClockConfig+0x352>
 8002a2a:	bf00      	nop
 8002a2c:	40022000 	.word	0x40022000
 8002a30:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a34:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_RCC_ClockConfig+0x35c>)
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	f003 0318 	and.w	r3, r3, #24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e9      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d010      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	4b44      	ldr	r3, [pc, #272]	; (8002b64 <HAL_RCC_ClockConfig+0x35c>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d208      	bcs.n	8002a6e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002a5c:	4b41      	ldr	r3, [pc, #260]	; (8002b64 <HAL_RCC_ClockConfig+0x35c>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f023 020f 	bic.w	r2, r3, #15
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	493e      	ldr	r1, [pc, #248]	; (8002b64 <HAL_RCC_ClockConfig+0x35c>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a6e:	4b3e      	ldr	r3, [pc, #248]	; (8002b68 <HAL_RCC_ClockConfig+0x360>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d210      	bcs.n	8002a9e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7c:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <HAL_RCC_ClockConfig+0x360>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 020f 	bic.w	r2, r3, #15
 8002a84:	4938      	ldr	r1, [pc, #224]	; (8002b68 <HAL_RCC_ClockConfig+0x360>)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <HAL_RCC_ClockConfig+0x360>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 030f 	and.w	r3, r3, #15
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e05d      	b.n	8002b5a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d010      	beq.n	8002acc <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <HAL_RCC_ClockConfig+0x35c>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d208      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002aba:	4b2a      	ldr	r3, [pc, #168]	; (8002b64 <HAL_RCC_ClockConfig+0x35c>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	4927      	ldr	r1, [pc, #156]	; (8002b64 <HAL_RCC_ClockConfig+0x35c>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d012      	beq.n	8002afe <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	4b21      	ldr	r3, [pc, #132]	; (8002b64 <HAL_RCC_ClockConfig+0x35c>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d209      	bcs.n	8002afe <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002aea:	4b1e      	ldr	r3, [pc, #120]	; (8002b64 <HAL_RCC_ClockConfig+0x35c>)
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	491a      	ldr	r1, [pc, #104]	; (8002b64 <HAL_RCC_ClockConfig+0x35c>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d012      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_RCC_ClockConfig+0x35c>)
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	0a1b      	lsrs	r3, r3, #8
 8002b14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d209      	bcs.n	8002b30 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <HAL_RCC_ClockConfig+0x35c>)
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	021b      	lsls	r3, r3, #8
 8002b2a:	490e      	ldr	r1, [pc, #56]	; (8002b64 <HAL_RCC_ClockConfig+0x35c>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b30:	f000 f822 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_ClockConfig+0x35c>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	490b      	ldr	r1, [pc, #44]	; (8002b6c <HAL_RCC_ClockConfig+0x364>)
 8002b40:	5ccb      	ldrb	r3, [r1, r3]
 8002b42:	fa22 f303 	lsr.w	r3, r2, r3
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <HAL_RCC_ClockConfig+0x368>)
 8002b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <HAL_RCC_ClockConfig+0x36c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fef0 	bl	8001934 <HAL_InitTick>
 8002b54:	4603      	mov	r3, r0
 8002b56:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002b58:	7afb      	ldrb	r3, [r7, #11]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	44020c00 	.word	0x44020c00
 8002b68:	40022000 	.word	0x40022000
 8002b6c:	0800ada0 	.word	0x0800ada0
 8002b70:	20000004 	.word	0x20000004
 8002b74:	20000008 	.word	0x20000008

08002b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002b7e:	4b8c      	ldr	r3, [pc, #560]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f003 0318 	and.w	r3, r3, #24
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d102      	bne.n	8002b90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002b8a:	4b8a      	ldr	r3, [pc, #552]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	e107      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b90:	4b87      	ldr	r3, [pc, #540]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	f003 0318 	and.w	r3, r3, #24
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d112      	bne.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002b9c:	4b84      	ldr	r3, [pc, #528]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002ba8:	4b81      	ldr	r3, [pc, #516]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	08db      	lsrs	r3, r3, #3
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	4a81      	ldr	r2, [pc, #516]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x240>)
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e0f1      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002bbc:	4b7e      	ldr	r3, [pc, #504]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x240>)
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	e0ee      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc2:	4b7b      	ldr	r3, [pc, #492]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	f003 0318 	and.w	r3, r3, #24
 8002bca:	2b10      	cmp	r3, #16
 8002bcc:	d102      	bne.n	8002bd4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bce:	4b7b      	ldr	r3, [pc, #492]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x244>)
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	e0e5      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd4:	4b76      	ldr	r3, [pc, #472]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f003 0318 	and.w	r3, r3, #24
 8002bdc:	2b18      	cmp	r3, #24
 8002bde:	f040 80dd 	bne.w	8002d9c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002be2:	4b73      	ldr	r3, [pc, #460]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002bec:	4b70      	ldr	r3, [pc, #448]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf0:	0a1b      	lsrs	r3, r3, #8
 8002bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bf6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002bf8:	4b6d      	ldr	r3, [pc, #436]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002c04:	4b6a      	ldr	r3, [pc, #424]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002c08:	08db      	lsrs	r3, r3, #3
 8002c0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	fb02 f303 	mul.w	r3, r2, r3
 8002c14:	ee07 3a90 	vmov	s15, r3
 8002c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80b7 	beq.w	8002d96 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d003      	beq.n	8002c36 <HAL_RCC_GetSysClockFreq+0xbe>
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d056      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x16a>
 8002c34:	e077      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002c36:	4b5e      	ldr	r3, [pc, #376]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d02d      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002c42:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	08db      	lsrs	r3, r3, #3
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	4a5a      	ldr	r2, [pc, #360]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	ee07 3a90 	vmov	s15, r3
 8002c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	ee07 3a90 	vmov	s15, r3
 8002c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c6c:	4b50      	ldr	r3, [pc, #320]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c80:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002dc0 <HAL_RCC_GetSysClockFreq+0x248>
 8002c84:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c90:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c98:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002c9c:	e065      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	ee07 3a90 	vmov	s15, r3
 8002ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca8:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002dc4 <HAL_RCC_GetSysClockFreq+0x24c>
 8002cac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cb0:	4b3f      	ldr	r3, [pc, #252]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb8:	ee07 3a90 	vmov	s15, r3
 8002cbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cc4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002dc0 <HAL_RCC_GetSysClockFreq+0x248>
 8002cc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ccc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cdc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002ce0:	e043      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cec:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002dc8 <HAL_RCC_GetSysClockFreq+0x250>
 8002cf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cf4:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cfc:	ee07 3a90 	vmov	s15, r3
 8002d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d04:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d08:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002dc0 <HAL_RCC_GetSysClockFreq+0x248>
 8002d0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d10:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d18:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d20:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002d24:	e021      	b.n	8002d6a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	ee07 3a90 	vmov	s15, r3
 8002d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d30:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002dcc <HAL_RCC_GetSysClockFreq+0x254>
 8002d34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d40:	ee07 3a90 	vmov	s15, r3
 8002d44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d48:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d4c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002dc0 <HAL_RCC_GetSysClockFreq+0x248>
 8002d50:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d64:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002d68:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x238>)
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6e:	0a5b      	lsrs	r3, r3, #9
 8002d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d74:	3301      	adds	r3, #1
 8002d76:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	ee07 3a90 	vmov	s15, r3
 8002d7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d82:	edd7 6a06 	vldr	s13, [r7, #24]
 8002d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d8e:	ee17 3a90 	vmov	r3, s15
 8002d92:	61fb      	str	r3, [r7, #28]
 8002d94:	e004      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	e001      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002d9c:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d9e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002da0:	69fb      	ldr	r3, [r7, #28]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3724      	adds	r7, #36	; 0x24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	44020c00 	.word	0x44020c00
 8002db4:	003d0900 	.word	0x003d0900
 8002db8:	03d09000 	.word	0x03d09000
 8002dbc:	017d7840 	.word	0x017d7840
 8002dc0:	46000000 	.word	0x46000000
 8002dc4:	4c742400 	.word	0x4c742400
 8002dc8:	4bbebc20 	.word	0x4bbebc20
 8002dcc:	4a742400 	.word	0x4a742400

08002dd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002dd4:	f7ff fed0 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_RCC_GetHCLKFreq+0x2c>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002dde:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002de2:	4907      	ldr	r1, [pc, #28]	; (8002e00 <HAL_RCC_GetHCLKFreq+0x30>)
 8002de4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002de6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002dea:	fa22 f303 	lsr.w	r3, r2, r3
 8002dee:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x34>)
 8002df0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002df2:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <HAL_RCC_GetHCLKFreq+0x34>)
 8002df4:	681b      	ldr	r3, [r3, #0]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	44020c00 	.word	0x44020c00
 8002e00:	0800ada0 	.word	0x0800ada0
 8002e04:	20000004 	.word	0x20000004

08002e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002e0c:	f7ff ffe0 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4904      	ldr	r1, [pc, #16]	; (8002e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	44020c00 	.word	0x44020c00
 8002e30:	0800adb0 	.word	0x0800adb0

08002e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002e38:	f7ff ffca 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	4904      	ldr	r1, [pc, #16]	; (8002e5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	44020c00 	.word	0x44020c00
 8002e5c:	0800adb0 	.word	0x0800adb0

08002e60 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002e64:	f7ff ffb4 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	0b1b      	lsrs	r3, r3, #12
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	4904      	ldr	r1, [pc, #16]	; (8002e88 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002e76:	5ccb      	ldrb	r3, [r1, r3]
 8002e78:	f003 031f 	and.w	r3, r3, #31
 8002e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	44020c00 	.word	0x44020c00
 8002e88:	0800adb0 	.word	0x0800adb0

08002e8c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e90:	b0d8      	sub	sp, #352	; 0x160
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eac:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002eb0:	2500      	movs	r5, #0
 8002eb2:	ea54 0305 	orrs.w	r3, r4, r5
 8002eb6:	d00b      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002eb8:	4bcd      	ldr	r3, [pc, #820]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002eba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ebe:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8002ec2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec8:	4ac9      	ldr	r2, [pc, #804]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed8:	f002 0801 	and.w	r8, r2, #1
 8002edc:	f04f 0900 	mov.w	r9, #0
 8002ee0:	ea58 0309 	orrs.w	r3, r8, r9
 8002ee4:	d042      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002ee6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eec:	2b05      	cmp	r3, #5
 8002eee:	d823      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002ef0:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f41 	.word	0x08002f41
 8002efc:	08002f11 	.word	0x08002f11
 8002f00:	08002f25 	.word	0x08002f25
 8002f04:	08002f41 	.word	0x08002f41
 8002f08:	08002f41 	.word	0x08002f41
 8002f0c:	08002f41 	.word	0x08002f41
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f14:	3308      	adds	r3, #8
 8002f16:	4618      	mov	r0, r3
 8002f18:	f004 feda 	bl	8007cd0 <RCCEx_PLL2_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002f22:	e00e      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f28:	3330      	adds	r3, #48	; 0x30
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f004 ff68 	bl	8007e00 <RCCEx_PLL3_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002f36:	e004      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002f3e:	e000      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002f4a:	4ba9      	ldr	r3, [pc, #676]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f50:	f023 0107 	bic.w	r1, r3, #7
 8002f54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5a:	4aa5      	ldr	r2, [pc, #660]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f62:	e003      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f68:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f002 0a02 	and.w	sl, r2, #2
 8002f78:	f04f 0b00 	mov.w	fp, #0
 8002f7c:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f80:	f000 8088 	beq.w	8003094 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8a:	2b28      	cmp	r3, #40	; 0x28
 8002f8c:	d868      	bhi.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002f8e:	a201      	add	r2, pc, #4	; (adr r2, 8002f94 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f94:	08003069 	.word	0x08003069
 8002f98:	08003061 	.word	0x08003061
 8002f9c:	08003061 	.word	0x08003061
 8002fa0:	08003061 	.word	0x08003061
 8002fa4:	08003061 	.word	0x08003061
 8002fa8:	08003061 	.word	0x08003061
 8002fac:	08003061 	.word	0x08003061
 8002fb0:	08003061 	.word	0x08003061
 8002fb4:	08003039 	.word	0x08003039
 8002fb8:	08003061 	.word	0x08003061
 8002fbc:	08003061 	.word	0x08003061
 8002fc0:	08003061 	.word	0x08003061
 8002fc4:	08003061 	.word	0x08003061
 8002fc8:	08003061 	.word	0x08003061
 8002fcc:	08003061 	.word	0x08003061
 8002fd0:	08003061 	.word	0x08003061
 8002fd4:	0800304d 	.word	0x0800304d
 8002fd8:	08003061 	.word	0x08003061
 8002fdc:	08003061 	.word	0x08003061
 8002fe0:	08003061 	.word	0x08003061
 8002fe4:	08003061 	.word	0x08003061
 8002fe8:	08003061 	.word	0x08003061
 8002fec:	08003061 	.word	0x08003061
 8002ff0:	08003061 	.word	0x08003061
 8002ff4:	08003069 	.word	0x08003069
 8002ff8:	08003061 	.word	0x08003061
 8002ffc:	08003061 	.word	0x08003061
 8003000:	08003061 	.word	0x08003061
 8003004:	08003061 	.word	0x08003061
 8003008:	08003061 	.word	0x08003061
 800300c:	08003061 	.word	0x08003061
 8003010:	08003061 	.word	0x08003061
 8003014:	08003069 	.word	0x08003069
 8003018:	08003061 	.word	0x08003061
 800301c:	08003061 	.word	0x08003061
 8003020:	08003061 	.word	0x08003061
 8003024:	08003061 	.word	0x08003061
 8003028:	08003061 	.word	0x08003061
 800302c:	08003061 	.word	0x08003061
 8003030:	08003061 	.word	0x08003061
 8003034:	08003069 	.word	0x08003069
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003038:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800303c:	3308      	adds	r3, #8
 800303e:	4618      	mov	r0, r3
 8003040:	f004 fe46 	bl	8007cd0 <RCCEx_PLL2_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800304a:	e00e      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800304c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003050:	3330      	adds	r3, #48	; 0x30
 8003052:	4618      	mov	r0, r3
 8003054:	f004 fed4 	bl	8007e00 <RCCEx_PLL3_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800305e:	e004      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003066:	e000      	b.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800306a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10c      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003072:	4b5f      	ldr	r3, [pc, #380]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003074:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003078:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800307c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003082:	4a5b      	ldr	r2, [pc, #364]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003084:	430b      	orrs	r3, r1
 8003086:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800308a:	e003      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003090:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003094:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	f002 0304 	and.w	r3, r2, #4
 80030a0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80030a4:	2300      	movs	r3, #0
 80030a6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80030aa:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 80030ae:	460b      	mov	r3, r1
 80030b0:	4313      	orrs	r3, r2
 80030b2:	d04e      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80030b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80030be:	d02c      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80030c0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80030c4:	d825      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80030c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ca:	d028      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80030cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d0:	d81f      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80030d2:	2bc0      	cmp	r3, #192	; 0xc0
 80030d4:	d025      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80030d6:	2bc0      	cmp	r3, #192	; 0xc0
 80030d8:	d81b      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80030da:	2b80      	cmp	r3, #128	; 0x80
 80030dc:	d00f      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x272>
 80030de:	2b80      	cmp	r3, #128	; 0x80
 80030e0:	d817      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d01f      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80030e6:	2b40      	cmp	r3, #64	; 0x40
 80030e8:	d113      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030ee:	3308      	adds	r3, #8
 80030f0:	4618      	mov	r0, r3
 80030f2:	f004 fded 	bl	8007cd0 <RCCEx_PLL2_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80030fc:	e014      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003102:	3330      	adds	r3, #48	; 0x30
 8003104:	4618      	mov	r0, r3
 8003106:	f004 fe7b 	bl	8007e00 <RCCEx_PLL3_Config>
 800310a:	4603      	mov	r3, r0
 800310c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003110:	e00a      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003118:	e006      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800311a:	bf00      	nop
 800311c:	e004      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800311e:	bf00      	nop
 8003120:	e002      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003122:	bf00      	nop
 8003124:	e000      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003128:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10c      	bne.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003130:	4b2f      	ldr	r3, [pc, #188]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003132:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003136:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800313a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800313e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003140:	4a2b      	ldr	r2, [pc, #172]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003142:	430b      	orrs	r3, r1
 8003144:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003148:	e003      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800314e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003152:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315a:	f002 0308 	and.w	r3, r2, #8
 800315e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003162:	2300      	movs	r3, #0
 8003164:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003168:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 800316c:	460b      	mov	r3, r1
 800316e:	4313      	orrs	r3, r2
 8003170:	d056      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003172:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003178:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800317c:	d031      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800317e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003182:	d82a      	bhi.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d02d      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800318a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800318e:	d824      	bhi.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003190:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003194:	d029      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003196:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800319a:	d81e      	bhi.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800319c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a0:	d011      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80031a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a6:	d818      	bhi.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d023      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80031ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b0:	d113      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031b6:	3308      	adds	r3, #8
 80031b8:	4618      	mov	r0, r3
 80031ba:	f004 fd89 	bl	8007cd0 <RCCEx_PLL2_Config>
 80031be:	4603      	mov	r3, r0
 80031c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80031c4:	e017      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031ca:	3330      	adds	r3, #48	; 0x30
 80031cc:	4618      	mov	r0, r3
 80031ce:	f004 fe17 	bl	8007e00 <RCCEx_PLL3_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80031d8:	e00d      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80031e0:	e009      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80031e2:	bf00      	nop
 80031e4:	e007      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80031e6:	bf00      	nop
 80031e8:	e005      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80031ea:	bf00      	nop
 80031ec:	e003      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80031ee:	bf00      	nop
 80031f0:	44020c00 	.word	0x44020c00
        break;
 80031f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10c      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80031fe:	4bbb      	ldr	r3, [pc, #748]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003200:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003204:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003208:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800320c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800320e:	4ab7      	ldr	r2, [pc, #732]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003210:	430b      	orrs	r3, r1
 8003212:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003216:	e003      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003218:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800321c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003220:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f002 0310 	and.w	r3, r2, #16
 800322c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003230:	2300      	movs	r3, #0
 8003232:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003236:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 800323a:	460b      	mov	r3, r1
 800323c:	4313      	orrs	r3, r2
 800323e:	d053      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003240:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003246:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800324a:	d031      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800324c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003250:	d82a      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003256:	d02d      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800325c:	d824      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800325e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003262:	d029      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003264:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003268:	d81e      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800326a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326e:	d011      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003274:	d818      	bhi.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d020      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x430>
 800327a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327e:	d113      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003280:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003284:	3308      	adds	r3, #8
 8003286:	4618      	mov	r0, r3
 8003288:	f004 fd22 	bl	8007cd0 <RCCEx_PLL2_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003292:	e014      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003294:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003298:	3330      	adds	r3, #48	; 0x30
 800329a:	4618      	mov	r0, r3
 800329c:	f004 fdb0 	bl	8007e00 <RCCEx_PLL3_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80032a6:	e00a      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80032ae:	e006      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80032b0:	bf00      	nop
 80032b2:	e004      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80032b4:	bf00      	nop
 80032b6:	e002      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80032b8:	bf00      	nop
 80032ba:	e000      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80032bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80032c6:	4b89      	ldr	r3, [pc, #548]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80032c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80032cc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80032d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032d6:	4a85      	ldr	r2, [pc, #532]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80032d8:	430b      	orrs	r3, r1
 80032da:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80032de:	e003      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032e4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80032e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f0:	f002 0320 	and.w	r3, r2, #32
 80032f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80032f8:	2300      	movs	r3, #0
 80032fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80032fe:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8003302:	460b      	mov	r3, r1
 8003304:	4313      	orrs	r3, r2
 8003306:	d053      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003308:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003312:	d031      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003314:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003318:	d82a      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800331a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800331e:	d02d      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003324:	d824      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003326:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800332a:	d029      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800332c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003330:	d81e      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003336:	d011      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333c:	d818      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d020      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003346:	d113      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003348:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800334c:	3308      	adds	r3, #8
 800334e:	4618      	mov	r0, r3
 8003350:	f004 fcbe 	bl	8007cd0 <RCCEx_PLL2_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800335a:	e014      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800335c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003360:	3330      	adds	r3, #48	; 0x30
 8003362:	4618      	mov	r0, r3
 8003364:	f004 fd4c 	bl	8007e00 <RCCEx_PLL3_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800336e:	e00a      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003376:	e006      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003378:	bf00      	nop
 800337a:	e004      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800337c:	bf00      	nop
 800337e:	e002      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003380:	bf00      	nop
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003386:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800338e:	4b57      	ldr	r3, [pc, #348]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003390:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003394:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8003398:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a53      	ldr	r2, [pc, #332]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80033a0:	430b      	orrs	r3, r1
 80033a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80033a6:	e003      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80033ac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80033b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80033bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80033c0:	2300      	movs	r3, #0
 80033c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80033c6:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80033ca:	460b      	mov	r3, r1
 80033cc:	4313      	orrs	r3, r2
 80033ce:	d053      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80033d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80033da:	d031      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80033dc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80033e0:	d82a      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80033e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033e6:	d02d      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80033e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ec:	d824      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80033ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033f2:	d029      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033f8:	d81e      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80033fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033fe:	d011      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003400:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003404:	d818      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d020      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800340a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800340e:	d113      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003410:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003414:	3308      	adds	r3, #8
 8003416:	4618      	mov	r0, r3
 8003418:	f004 fc5a 	bl	8007cd0 <RCCEx_PLL2_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003422:	e014      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003424:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003428:	3330      	adds	r3, #48	; 0x30
 800342a:	4618      	mov	r0, r3
 800342c:	f004 fce8 	bl	8007e00 <RCCEx_PLL3_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003436:	e00a      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800343e:	e006      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003440:	bf00      	nop
 8003442:	e004      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003444:	bf00      	nop
 8003446:	e002      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003448:	bf00      	nop
 800344a:	e000      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800344c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800344e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10c      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003456:	4b25      	ldr	r3, [pc, #148]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003458:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800345c:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8003460:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003466:	4a21      	ldr	r2, [pc, #132]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003468:	430b      	orrs	r3, r1
 800346a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800346e:	e003      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003470:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003474:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003478:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003484:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003488:	2300      	movs	r3, #0
 800348a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800348e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8003492:	460b      	mov	r3, r1
 8003494:	4313      	orrs	r3, r2
 8003496:	d055      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003498:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800349c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800349e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80034a2:	d033      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x680>
 80034a4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80034a8:	d82c      	bhi.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80034aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034ae:	d02f      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80034b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034b4:	d826      	bhi.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80034b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80034ba:	d02b      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80034bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80034c0:	d820      	bhi.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80034c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c6:	d013      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80034c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034cc:	d81a      	bhi.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d022      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80034d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034d6:	d115      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034dc:	3308      	adds	r3, #8
 80034de:	4618      	mov	r0, r3
 80034e0:	f004 fbf6 	bl	8007cd0 <RCCEx_PLL2_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80034ea:	e016      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80034ec:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034f4:	3330      	adds	r3, #48	; 0x30
 80034f6:	4618      	mov	r0, r3
 80034f8:	f004 fc82 	bl	8007e00 <RCCEx_PLL3_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003502:	e00a      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800350a:	e006      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800350c:	bf00      	nop
 800350e:	e004      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003510:	bf00      	nop
 8003512:	e002      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003514:	bf00      	nop
 8003516:	e000      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10c      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003522:	4bbb      	ldr	r3, [pc, #748]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003524:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003528:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800352c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003532:	4ab7      	ldr	r2, [pc, #732]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003534:	430b      	orrs	r3, r1
 8003536:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800353a:	e003      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003540:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003544:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003550:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003554:	2300      	movs	r3, #0
 8003556:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800355a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800355e:	460b      	mov	r3, r1
 8003560:	4313      	orrs	r3, r2
 8003562:	d053      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003564:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800356a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800356e:	d031      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003570:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003574:	d82a      	bhi.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003576:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800357a:	d02d      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800357c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003580:	d824      	bhi.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003582:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003586:	d029      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003588:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800358c:	d81e      	bhi.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 800358e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003592:	d011      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003598:	d818      	bhi.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x740>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d020      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800359e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a2:	d113      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035a8:	3308      	adds	r3, #8
 80035aa:	4618      	mov	r0, r3
 80035ac:	f004 fb90 	bl	8007cd0 <RCCEx_PLL2_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80035b6:	e014      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035bc:	3330      	adds	r3, #48	; 0x30
 80035be:	4618      	mov	r0, r3
 80035c0:	f004 fc1e 	bl	8007e00 <RCCEx_PLL3_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80035ca:	e00a      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80035d2:	e006      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80035d4:	bf00      	nop
 80035d6:	e004      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80035d8:	bf00      	nop
 80035da:	e002      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80035dc:	bf00      	nop
 80035de:	e000      	b.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80035e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80035ea:	4b89      	ldr	r3, [pc, #548]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80035ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035f0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80035f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035fa:	4a85      	ldr	r2, [pc, #532]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80035fc:	430b      	orrs	r3, r1
 80035fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003602:	e003      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003604:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003608:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800360c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003618:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800361c:	2300      	movs	r3, #0
 800361e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003622:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003626:	460b      	mov	r3, r1
 8003628:	4313      	orrs	r3, r2
 800362a:	d055      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800362c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003630:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003634:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003638:	d031      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x812>
 800363a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800363e:	d82a      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003644:	d02d      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800364a:	d824      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800364c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003650:	d029      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003652:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003656:	d81e      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800365c:	d011      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800365e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003662:	d818      	bhi.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800366c:	d113      	bne.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800366e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003672:	3308      	adds	r3, #8
 8003674:	4618      	mov	r0, r3
 8003676:	f004 fb2b 	bl	8007cd0 <RCCEx_PLL2_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003680:	e014      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003682:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003686:	3330      	adds	r3, #48	; 0x30
 8003688:	4618      	mov	r0, r3
 800368a:	f004 fbb9 	bl	8007e00 <RCCEx_PLL3_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003694:	e00a      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800369c:	e006      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800369e:	bf00      	nop
 80036a0:	e004      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80036a2:	bf00      	nop
 80036a4:	e002      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80036a6:	bf00      	nop
 80036a8:	e000      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80036aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ac:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10d      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80036b4:	4b56      	ldr	r3, [pc, #344]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80036b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80036ba:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 80036be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c6:	4a52      	ldr	r2, [pc, #328]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80036c8:	430b      	orrs	r3, r1
 80036ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80036ce:	e003      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036d4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80036d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80036e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036ee:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80036f2:	460b      	mov	r3, r1
 80036f4:	4313      	orrs	r3, r2
 80036f6:	d044      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80036f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003700:	2b05      	cmp	r3, #5
 8003702:	d823      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003704:	a201      	add	r2, pc, #4	; (adr r2, 800370c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	08003755 	.word	0x08003755
 8003710:	08003725 	.word	0x08003725
 8003714:	08003739 	.word	0x08003739
 8003718:	08003755 	.word	0x08003755
 800371c:	08003755 	.word	0x08003755
 8003720:	08003755 	.word	0x08003755
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003724:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003728:	3308      	adds	r3, #8
 800372a:	4618      	mov	r0, r3
 800372c:	f004 fad0 	bl	8007cd0 <RCCEx_PLL2_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003736:	e00e      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003738:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800373c:	3330      	adds	r3, #48	; 0x30
 800373e:	4618      	mov	r0, r3
 8003740:	f004 fb5e 	bl	8007e00 <RCCEx_PLL3_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800374a:	e004      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003752:	e000      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003756:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10d      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800375e:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003760:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003764:	f023 0107 	bic.w	r1, r3, #7
 8003768:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800376c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003770:	4a27      	ldr	r2, [pc, #156]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003772:	430b      	orrs	r3, r1
 8003774:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003778:	e003      	b.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800377a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800377e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003782:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800378e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003798:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800379c:	460b      	mov	r3, r1
 800379e:	4313      	orrs	r3, r2
 80037a0:	d04f      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80037a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	2b50      	cmp	r3, #80	; 0x50
 80037ac:	d029      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80037ae:	2b50      	cmp	r3, #80	; 0x50
 80037b0:	d823      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80037b2:	2b40      	cmp	r3, #64	; 0x40
 80037b4:	d027      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80037b6:	2b40      	cmp	r3, #64	; 0x40
 80037b8:	d81f      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80037ba:	2b30      	cmp	r3, #48	; 0x30
 80037bc:	d025      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80037be:	2b30      	cmp	r3, #48	; 0x30
 80037c0:	d81b      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80037c2:	2b20      	cmp	r3, #32
 80037c4:	d00f      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d817      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d022      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80037ce:	2b10      	cmp	r3, #16
 80037d0:	d113      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037d6:	3308      	adds	r3, #8
 80037d8:	4618      	mov	r0, r3
 80037da:	f004 fa79 	bl	8007cd0 <RCCEx_PLL2_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80037e4:	e017      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037ea:	3330      	adds	r3, #48	; 0x30
 80037ec:	4618      	mov	r0, r3
 80037ee:	f004 fb07 	bl	8007e00 <RCCEx_PLL3_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80037f8:	e00d      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003800:	e009      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003802:	bf00      	nop
 8003804:	e007      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003806:	bf00      	nop
 8003808:	e005      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800380a:	bf00      	nop
 800380c:	e003      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800380e:	bf00      	nop
 8003810:	44020c00 	.word	0x44020c00
        break;
 8003814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003816:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800381e:	4baf      	ldr	r3, [pc, #700]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003820:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003824:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003828:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	4aaa      	ldr	r2, [pc, #680]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003832:	430b      	orrs	r3, r1
 8003834:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003838:	e003      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800383e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003842:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800384e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003852:	2300      	movs	r3, #0
 8003854:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003858:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800385c:	460b      	mov	r3, r1
 800385e:	4313      	orrs	r3, r2
 8003860:	d055      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003862:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800386a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800386e:	d031      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003870:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003874:	d82a      	bhi.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003876:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800387a:	d02d      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800387c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003880:	d824      	bhi.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003882:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003886:	d029      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003888:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800388c:	d81e      	bhi.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800388e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003892:	d011      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003894:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003898:	d818      	bhi.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d020      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800389e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038a2:	d113      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038a8:	3308      	adds	r3, #8
 80038aa:	4618      	mov	r0, r3
 80038ac:	f004 fa10 	bl	8007cd0 <RCCEx_PLL2_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80038b6:	e014      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038bc:	3330      	adds	r3, #48	; 0x30
 80038be:	4618      	mov	r0, r3
 80038c0:	f004 fa9e 	bl	8007e00 <RCCEx_PLL3_Config>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80038ca:	e00a      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80038d2:	e006      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80038d4:	bf00      	nop
 80038d6:	e004      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80038d8:	bf00      	nop
 80038da:	e002      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80038dc:	bf00      	nop
 80038de:	e000      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80038e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80038ea:	4b7c      	ldr	r3, [pc, #496]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80038ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038f0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80038f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038fc:	4a77      	ldr	r2, [pc, #476]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80038fe:	430b      	orrs	r3, r1
 8003900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003904:	e003      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003906:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800390a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800390e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800391a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003924:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003928:	460b      	mov	r3, r1
 800392a:	4313      	orrs	r3, r2
 800392c:	d03d      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800392e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800393a:	d01b      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 800393c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003940:	d814      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003946:	d017      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800394c:	d80e      	bhi.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800394e:	2b00      	cmp	r3, #0
 8003950:	d014      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003956:	d109      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003958:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800395c:	3330      	adds	r3, #48	; 0x30
 800395e:	4618      	mov	r0, r3
 8003960:	f004 fa4e 	bl	8007e00 <RCCEx_PLL3_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 800396a:	e008      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003972:	e004      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003974:	bf00      	nop
 8003976:	e002      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003978:	bf00      	nop
 800397a:	e000      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800397c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10d      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003986:	4b55      	ldr	r3, [pc, #340]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003988:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800398c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003990:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003998:	4a50      	ldr	r2, [pc, #320]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800399a:	430b      	orrs	r3, r1
 800399c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80039a0:	e003      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039a6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80039b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039c0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4313      	orrs	r3, r2
 80039c8:	d03d      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80039ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039d6:	d01b      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80039d8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039dc:	d814      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80039de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039e2:	d017      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80039e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039e8:	d80e      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d014      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80039ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039f2:	d109      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039f8:	3330      	adds	r3, #48	; 0x30
 80039fa:	4618      	mov	r0, r3
 80039fc:	f004 fa00 	bl	8007e00 <RCCEx_PLL3_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003a06:	e008      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a0e:	e004      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003a10:	bf00      	nop
 8003a12:	e002      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003a14:	bf00      	nop
 8003a16:	e000      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10d      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003a22:	4b2e      	ldr	r3, [pc, #184]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003a28:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a34:	4a29      	ldr	r2, [pc, #164]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a36:	430b      	orrs	r3, r1
 8003a38:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003a3c:	e003      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a42:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a56:	2300      	movs	r3, #0
 8003a58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a5c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a60:	460b      	mov	r3, r1
 8003a62:	4313      	orrs	r3, r2
 8003a64:	d040      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003a66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a72:	d01b      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003a74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a78:	d814      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003a7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a7e:	d017      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a84:	d80e      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d014      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a8e:	d109      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a94:	3330      	adds	r3, #48	; 0x30
 8003a96:	4618      	mov	r0, r3
 8003a98:	f004 f9b2 	bl	8007e00 <RCCEx_PLL3_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003aaa:	e004      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003aac:	bf00      	nop
 8003aae:	e002      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003ab0:	bf00      	nop
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d110      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003abe:	4b07      	ldr	r3, [pc, #28]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003ac0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ac4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ad0:	4a02      	ldr	r2, [pc, #8]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003ad2:	430b      	orrs	r3, r1
 8003ad4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003ad8:	e006      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003ada:	bf00      	nop
 8003adc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ae4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ae8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	2100      	movs	r1, #0
 8003af2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003afe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4313      	orrs	r3, r2
 8003b06:	d03d      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003b08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b14:	d01b      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003b16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b1a:	d814      	bhi.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b20:	d017      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b26:	d80e      	bhi.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d014      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b30:	d109      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b36:	3330      	adds	r3, #48	; 0x30
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f004 f961 	bl	8007e00 <RCCEx_PLL3_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003b44:	e008      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b4c:	e004      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003b4e:	bf00      	nop
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b58:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10d      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003b60:	4bbe      	ldr	r3, [pc, #760]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003b62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003b66:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003b6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b72:	4aba      	ldr	r2, [pc, #744]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003b74:	430b      	orrs	r3, r1
 8003b76:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003b7a:	e003      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b80:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003b90:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b94:	2300      	movs	r3, #0
 8003b96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b9a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	d035      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003ba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ba8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bb0:	d015      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003bb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bb6:	d80e      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d012      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bc0:	d109      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bc6:	3330      	adds	r3, #48	; 0x30
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f004 f919 	bl	8007e00 <RCCEx_PLL3_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003bd4:	e006      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003bdc:	e002      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003bec:	4b9b      	ldr	r3, [pc, #620]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003bee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003bf2:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8003bf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bfe:	4a97      	ldr	r2, [pc, #604]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c00:	430b      	orrs	r3, r1
 8003c02:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003c06:	e003      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c0c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	d00e      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003c30:	4b8a      	ldr	r3, [pc, #552]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	4a89      	ldr	r2, [pc, #548]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c3a:	61d3      	str	r3, [r2, #28]
 8003c3c:	4b87      	ldr	r3, [pc, #540]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c3e:	69d9      	ldr	r1, [r3, #28]
 8003c40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c44:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003c48:	4a84      	ldr	r2, [pc, #528]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c5e:	2300      	movs	r3, #0
 8003c60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003c64:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	d055      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003c6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c76:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003c7a:	d031      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003c7c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003c80:	d82a      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c86:	d02d      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8c:	d824      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003c8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c92:	d029      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003c94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c98:	d81e      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c9e:	d011      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ca4:	d818      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d020      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cae:	d113      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cb4:	3308      	adds	r3, #8
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f004 f80a 	bl	8007cd0 <RCCEx_PLL2_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003cc2:	e014      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cc8:	3330      	adds	r3, #48	; 0x30
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f004 f898 	bl	8007e00 <RCCEx_PLL3_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003cd6:	e00a      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003cde:	e006      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003ce0:	bf00      	nop
 8003ce2:	e004      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003ce4:	bf00      	nop
 8003ce6:	e002      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003ce8:	bf00      	nop
 8003cea:	e000      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10d      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003cf6:	4b59      	ldr	r3, [pc, #356]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003cf8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003cfc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003d00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d08:	4a54      	ldr	r2, [pc, #336]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003d10:	e003      	b.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d12:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d16:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003d26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d30:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4313      	orrs	r3, r2
 8003d38:	d055      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003d3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d42:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003d46:	d031      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003d48:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003d4c:	d82a      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003d4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d52:	d02d      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d58:	d824      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003d5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d5e:	d029      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003d60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d64:	d81e      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6a:	d011      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d70:	d818      	bhi.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d020      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7a:	d113      	bne.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d80:	3308      	adds	r3, #8
 8003d82:	4618      	mov	r0, r3
 8003d84:	f003 ffa4 	bl	8007cd0 <RCCEx_PLL2_Config>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003d8e:	e014      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d94:	3330      	adds	r3, #48	; 0x30
 8003d96:	4618      	mov	r0, r3
 8003d98:	f004 f832 	bl	8007e00 <RCCEx_PLL3_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003da2:	e00a      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003daa:	e006      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003dac:	bf00      	nop
 8003dae:	e004      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003db0:	bf00      	nop
 8003db2:	e002      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003db4:	bf00      	nop
 8003db6:	e000      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10d      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003dc2:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003dc4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003dc8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003dcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dd0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003dd4:	4a21      	ldr	r2, [pc, #132]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003ddc:	e003      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003de2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003de6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	2100      	movs	r1, #0
 8003df0:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e00:	460b      	mov	r3, r1
 8003e02:	4313      	orrs	r3, r2
 8003e04:	d057      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e12:	d033      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e18:	d82c      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003e1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e1e:	d02f      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003e20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e24:	d826      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003e26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e2a:	d02b      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003e2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e30:	d820      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003e32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e36:	d013      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e3c:	d81a      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d022      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8003e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e46:	d115      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f003 ff3e 	bl	8007cd0 <RCCEx_PLL2_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003e5a:	e016      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003e5c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e64:	3330      	adds	r3, #48	; 0x30
 8003e66:	4618      	mov	r0, r3
 8003e68:	f003 ffca 	bl	8007e00 <RCCEx_PLL3_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003e72:	e00a      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e7a:	e006      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003e7c:	bf00      	nop
 8003e7e:	e004      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003e80:	bf00      	nop
 8003e82:	e002      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003e84:	bf00      	nop
 8003e86:	e000      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10d      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003e92:	4bbb      	ldr	r3, [pc, #748]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003e94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003e98:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003e9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ea0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ea4:	4ab6      	ldr	r2, [pc, #728]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003ea6:	430b      	orrs	r3, r1
 8003ea8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003eac:	e003      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003eb2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003eb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003ecc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	d055      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8003ed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ede:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003ee2:	d031      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003ee4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003ee8:	d82a      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eee:	d02d      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ef4:	d824      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003ef6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003efa:	d029      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003efc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f00:	d81e      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003f02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f06:	d011      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003f08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f0c:	d818      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d020      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8003f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f16:	d113      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f003 fed6 	bl	8007cd0 <RCCEx_PLL2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003f2a:	e014      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f30:	3330      	adds	r3, #48	; 0x30
 8003f32:	4618      	mov	r0, r3
 8003f34:	f003 ff64 	bl	8007e00 <RCCEx_PLL3_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f46:	e006      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003f48:	bf00      	nop
 8003f4a:	e004      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003f4c:	bf00      	nop
 8003f4e:	e002      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003f50:	bf00      	nop
 8003f52:	e000      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10d      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8003f5e:	4b88      	ldr	r3, [pc, #544]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003f64:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8003f68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f70:	4a83      	ldr	r2, [pc, #524]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f72:	430b      	orrs	r3, r1
 8003f74:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003f78:	e003      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f7e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8003f82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8003f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f98:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	d055      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8003fa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003faa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003fae:	d031      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003fb0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003fb4:	d82a      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003fb6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fba:	d02d      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8003fbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fc0:	d824      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003fc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fc6:	d029      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8003fc8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fcc:	d81e      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003fce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fd2:	d011      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8003fd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fd8:	d818      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d020      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8003fde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fe2:	d113      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fe4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fe8:	3308      	adds	r3, #8
 8003fea:	4618      	mov	r0, r3
 8003fec:	f003 fe70 	bl	8007cd0 <RCCEx_PLL2_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003ff6:	e014      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ffc:	3330      	adds	r3, #48	; 0x30
 8003ffe:	4618      	mov	r0, r3
 8004000:	f003 fefe 	bl	8007e00 <RCCEx_PLL3_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800400a:	e00a      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004012:	e006      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004014:	bf00      	nop
 8004016:	e004      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004018:	bf00      	nop
 800401a:	e002      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800401c:	bf00      	nop
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004022:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800402a:	4b55      	ldr	r3, [pc, #340]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800402c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004030:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004034:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004038:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800403c:	4a50      	ldr	r2, [pc, #320]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800403e:	430b      	orrs	r3, r1
 8004040:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004044:	e003      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004046:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800404a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800404e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	2100      	movs	r1, #0
 8004058:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004064:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004068:	460b      	mov	r3, r1
 800406a:	4313      	orrs	r3, r2
 800406c:	d055      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800406e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004072:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004076:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800407a:	d031      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800407c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004080:	d82a      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004086:	d02d      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408c:	d824      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800408e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004092:	d029      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004094:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004098:	d81e      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800409a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800409e:	d011      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80040a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a4:	d818      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d020      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80040aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ae:	d113      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040b4:	3308      	adds	r3, #8
 80040b6:	4618      	mov	r0, r3
 80040b8:	f003 fe0a 	bl	8007cd0 <RCCEx_PLL2_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80040c2:	e014      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040c8:	3330      	adds	r3, #48	; 0x30
 80040ca:	4618      	mov	r0, r3
 80040cc:	f003 fe98 	bl	8007e00 <RCCEx_PLL3_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80040d6:	e00a      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80040de:	e006      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80040e0:	bf00      	nop
 80040e2:	e004      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80040e4:	bf00      	nop
 80040e6:	e002      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80040e8:	bf00      	nop
 80040ea:	e000      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80040ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10d      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80040f6:	4b22      	ldr	r3, [pc, #136]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80040f8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80040fc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004100:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004104:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004108:	4a1d      	ldr	r2, [pc, #116]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800410a:	430b      	orrs	r3, r1
 800410c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004110:	e003      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004116:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800411a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004126:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004130:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004134:	460b      	mov	r3, r1
 8004136:	4313      	orrs	r3, r2
 8004138:	d055      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800413a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800413e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004142:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004146:	d035      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004148:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800414c:	d82e      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800414e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004152:	d031      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004154:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004158:	d828      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800415a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800415e:	d01b      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004164:	d822      	bhi.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800416a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416e:	d009      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004170:	e01c      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004172:	4b03      	ldr	r3, [pc, #12]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	4a02      	ldr	r2, [pc, #8]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800417c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800417e:	e01c      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004180:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004184:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004188:	3308      	adds	r3, #8
 800418a:	4618      	mov	r0, r3
 800418c:	f003 fda0 	bl	8007cd0 <RCCEx_PLL2_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004196:	e010      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004198:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800419c:	3330      	adds	r3, #48	; 0x30
 800419e:	4618      	mov	r0, r3
 80041a0:	f003 fe2e 	bl	8007e00 <RCCEx_PLL3_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80041aa:	e006      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80041b2:	e002      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80041b4:	bf00      	nop
 80041b6:	e000      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80041b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10d      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80041c2:	4bc3      	ldr	r3, [pc, #780]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80041c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041c8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80041cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80041d4:	4abe      	ldr	r2, [pc, #760]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80041d6:	430b      	orrs	r3, r1
 80041d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041dc:	e003      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041e2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80041e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80041f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041f6:	2300      	movs	r3, #0
 80041f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041fc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004200:	460b      	mov	r3, r1
 8004202:	4313      	orrs	r3, r2
 8004204:	d051      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004206:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800420a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800420e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004212:	d033      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004218:	d82c      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800421a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800421e:	d02d      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004220:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004224:	d826      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800422a:	d019      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800422c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004230:	d820      	bhi.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8004236:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800423a:	d007      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800423c:	e01a      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800423e:	4ba4      	ldr	r3, [pc, #656]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004242:	4aa3      	ldr	r2, [pc, #652]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004248:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800424a:	e018      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800424c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004250:	3308      	adds	r3, #8
 8004252:	4618      	mov	r0, r3
 8004254:	f003 fd3c 	bl	8007cd0 <RCCEx_PLL2_Config>
 8004258:	4603      	mov	r3, r0
 800425a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800425e:	e00e      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004260:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004264:	3330      	adds	r3, #48	; 0x30
 8004266:	4618      	mov	r0, r3
 8004268:	f003 fdca 	bl	8007e00 <RCCEx_PLL3_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004272:	e004      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800427a:	e000      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800427c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10d      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004286:	4b92      	ldr	r3, [pc, #584]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800428c:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8004290:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004294:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004298:	4a8d      	ldr	r2, [pc, #564]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800429a:	430b      	orrs	r3, r1
 800429c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042a0:	e003      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042a6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80042aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80042b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80042b8:	2300      	movs	r3, #0
 80042ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80042c0:	460b      	mov	r3, r1
 80042c2:	4313      	orrs	r3, r2
 80042c4:	d032      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80042c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80042ce:	2b05      	cmp	r3, #5
 80042d0:	d80f      	bhi.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d211      	bcs.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d911      	bls.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d109      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042e2:	3308      	adds	r3, #8
 80042e4:	4618      	mov	r0, r3
 80042e6:	f003 fcf3 	bl	8007cd0 <RCCEx_PLL2_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042f0:	e006      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042f8:	e002      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80042fa:	bf00      	nop
 80042fc:	e000      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80042fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004300:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10d      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004308:	4b71      	ldr	r3, [pc, #452]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800430a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800430e:	f023 0107 	bic.w	r1, r3, #7
 8004312:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004316:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800431a:	4a6d      	ldr	r2, [pc, #436]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800431c:	430b      	orrs	r3, r1
 800431e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004322:	e003      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004328:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800432c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	2100      	movs	r1, #0
 8004336:	6739      	str	r1, [r7, #112]	; 0x70
 8004338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800433c:	677b      	str	r3, [r7, #116]	; 0x74
 800433e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004342:	460b      	mov	r3, r1
 8004344:	4313      	orrs	r3, r2
 8004346:	d024      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004348:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800434c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004354:	2b08      	cmp	r3, #8
 8004356:	d005      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800435e:	e002      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004360:	bf00      	nop
 8004362:	e000      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004366:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10d      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800436e:	4b58      	ldr	r3, [pc, #352]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004374:	f023 0108 	bic.w	r1, r3, #8
 8004378:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800437c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004380:	4a53      	ldr	r2, [pc, #332]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004382:	430b      	orrs	r3, r1
 8004384:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004388:	e003      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800438e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004392:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800439e:	66bb      	str	r3, [r7, #104]	; 0x68
 80043a0:	2300      	movs	r3, #0
 80043a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80043a8:	460b      	mov	r3, r1
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f000 80b9 	beq.w	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80043b0:	4b48      	ldr	r3, [pc, #288]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	4a47      	ldr	r2, [pc, #284]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043bc:	f7fd fb04 	bl	80019c8 <HAL_GetTick>
 80043c0:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80043c4:	e00b      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c6:	f7fd faff 	bl	80019c8 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d903      	bls.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043dc:	e005      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80043de:	4b3d      	ldr	r3, [pc, #244]	; (80044d4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0ed      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80043ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f040 8093 	bne.w	800451a <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043f4:	4b36      	ldr	r3, [pc, #216]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043fe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004402:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d023      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800440a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800440e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8004412:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004416:	4293      	cmp	r3, r2
 8004418:	d01b      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800441a:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800441c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004424:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004428:	4b29      	ldr	r3, [pc, #164]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800442a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800442e:	4a28      	ldr	r2, [pc, #160]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004434:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004438:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800443a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800443e:	4a24      	ldr	r2, [pc, #144]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004444:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004448:	4a21      	ldr	r2, [pc, #132]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800444a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800444e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004452:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d019      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7fd fab3 	bl	80019c8 <HAL_GetTick>
 8004462:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004466:	e00d      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004468:	f7fd faae 	bl	80019c8 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004472:	1ad2      	subs	r2, r2, r3
 8004474:	f241 3388 	movw	r3, #5000	; 0x1388
 8004478:	429a      	cmp	r2, r3
 800447a:	d903      	bls.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8004482:	e006      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004484:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ea      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8004492:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004496:	2b00      	cmp	r3, #0
 8004498:	d13a      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800449a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800449e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80044a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044aa:	d115      	bne.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80044ac:	4b08      	ldr	r3, [pc, #32]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80044b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044b8:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80044bc:	091b      	lsrs	r3, r3, #4
 80044be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80044c2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80044c6:	4a02      	ldr	r2, [pc, #8]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044c8:	430b      	orrs	r3, r1
 80044ca:	61d3      	str	r3, [r2, #28]
 80044cc:	e00a      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80044ce:	bf00      	nop
 80044d0:	44020c00 	.word	0x44020c00
 80044d4:	44020800 	.word	0x44020800
 80044d8:	4b9f      	ldr	r3, [pc, #636]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	4a9e      	ldr	r2, [pc, #632]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044e2:	61d3      	str	r3, [r2, #28]
 80044e4:	4b9c      	ldr	r3, [pc, #624]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044ea:	4a9b      	ldr	r2, [pc, #620]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80044f4:	4b98      	ldr	r3, [pc, #608]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044f6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80044fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044fe:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004502:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004506:	4a94      	ldr	r2, [pc, #592]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004508:	430b      	orrs	r3, r1
 800450a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800450e:	e008      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004510:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004514:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8004518:	e003      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800451e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004522:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452a:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800452e:	663b      	str	r3, [r7, #96]	; 0x60
 8004530:	2300      	movs	r3, #0
 8004532:	667b      	str	r3, [r7, #100]	; 0x64
 8004534:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004538:	460b      	mov	r3, r1
 800453a:	4313      	orrs	r3, r2
 800453c:	d035      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800453e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004542:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004546:	2b30      	cmp	r3, #48	; 0x30
 8004548:	d014      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800454a:	2b30      	cmp	r3, #48	; 0x30
 800454c:	d80e      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800454e:	2b20      	cmp	r3, #32
 8004550:	d012      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004552:	2b20      	cmp	r3, #32
 8004554:	d80a      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004556:	2b00      	cmp	r3, #0
 8004558:	d010      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800455a:	2b10      	cmp	r3, #16
 800455c:	d106      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800455e:	4b7e      	ldr	r3, [pc, #504]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004562:	4a7d      	ldr	r2, [pc, #500]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004568:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800456a:	e008      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004572:	e004      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004574:	bf00      	nop
 8004576:	e002      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004578:	bf00      	nop
 800457a:	e000      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800457c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004586:	4b74      	ldr	r3, [pc, #464]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004588:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800458c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004590:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004594:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004598:	4a6f      	ldr	r2, [pc, #444]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800459a:	430b      	orrs	r3, r1
 800459c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045a0:	e003      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045a6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80045b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80045b8:	2300      	movs	r3, #0
 80045ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045bc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80045c0:	460b      	mov	r3, r1
 80045c2:	4313      	orrs	r3, r2
 80045c4:	d033      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80045c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045ca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d007      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80045d6:	e010      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d8:	4b5f      	ldr	r3, [pc, #380]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	4a5e      	ldr	r2, [pc, #376]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80045e4:	e00d      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045ea:	3308      	adds	r3, #8
 80045ec:	4618      	mov	r0, r3
 80045ee:	f003 fb6f 	bl	8007cd0 <RCCEx_PLL2_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80045f8:	e003      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004602:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10d      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800460a:	4b53      	ldr	r3, [pc, #332]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800460c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004610:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004614:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004618:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800461c:	4a4e      	ldr	r2, [pc, #312]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800461e:	430b      	orrs	r3, r1
 8004620:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004624:	e003      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004626:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800462a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800462e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800463a:	653b      	str	r3, [r7, #80]	; 0x50
 800463c:	2300      	movs	r3, #0
 800463e:	657b      	str	r3, [r7, #84]	; 0x54
 8004640:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004644:	460b      	mov	r3, r1
 8004646:	4313      	orrs	r3, r2
 8004648:	d033      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800464a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800464e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8004656:	2b80      	cmp	r3, #128	; 0x80
 8004658:	d007      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800465a:	e010      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800465c:	4b3e      	ldr	r3, [pc, #248]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800465e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004660:	4a3d      	ldr	r2, [pc, #244]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004666:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004668:	e00d      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800466a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800466e:	3308      	adds	r3, #8
 8004670:	4618      	mov	r0, r3
 8004672:	f003 fb2d 	bl	8007cd0 <RCCEx_PLL2_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800467c:	e003      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004686:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10d      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800468e:	4b32      	ldr	r3, [pc, #200]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004690:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004694:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004698:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800469c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80046a0:	4a2d      	ldr	r2, [pc, #180]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046a2:	430b      	orrs	r3, r1
 80046a4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80046a8:	e003      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046ae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80046b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80046be:	64bb      	str	r3, [r7, #72]	; 0x48
 80046c0:	2300      	movs	r3, #0
 80046c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80046c8:	460b      	mov	r3, r1
 80046ca:	4313      	orrs	r3, r2
 80046cc:	d04a      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80046ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d827      	bhi.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80046da:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80046dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e0:	080046f5 	.word	0x080046f5
 80046e4:	08004703 	.word	0x08004703
 80046e8:	08004717 	.word	0x08004717
 80046ec:	08004733 	.word	0x08004733
 80046f0:	08004733 	.word	0x08004733
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046f4:	4b18      	ldr	r3, [pc, #96]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f8:	4a17      	ldr	r2, [pc, #92]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fe:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004700:	e018      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004702:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004706:	3308      	adds	r3, #8
 8004708:	4618      	mov	r0, r3
 800470a:	f003 fae1 	bl	8007cd0 <RCCEx_PLL2_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004714:	e00e      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004716:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800471a:	3330      	adds	r3, #48	; 0x30
 800471c:	4618      	mov	r0, r3
 800471e:	f003 fb6f 	bl	8007e00 <RCCEx_PLL3_Config>
 8004722:	4603      	mov	r3, r0
 8004724:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004728:	e004      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004730:	e000      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004734:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10f      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800473e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004742:	f023 0107 	bic.w	r1, r3, #7
 8004746:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800474a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800474e:	4a02      	ldr	r2, [pc, #8]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004750:	430b      	orrs	r3, r1
 8004752:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004756:	e005      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004758:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004760:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004764:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004770:	643b      	str	r3, [r7, #64]	; 0x40
 8004772:	2300      	movs	r3, #0
 8004774:	647b      	str	r3, [r7, #68]	; 0x44
 8004776:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800477a:	460b      	mov	r3, r1
 800477c:	4313      	orrs	r3, r2
 800477e:	f000 8081 	beq.w	8004884 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004782:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004786:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800478a:	2b20      	cmp	r3, #32
 800478c:	d85f      	bhi.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800478e:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004794:	08004819 	.word	0x08004819
 8004798:	0800484f 	.word	0x0800484f
 800479c:	0800484f 	.word	0x0800484f
 80047a0:	0800484f 	.word	0x0800484f
 80047a4:	0800484f 	.word	0x0800484f
 80047a8:	0800484f 	.word	0x0800484f
 80047ac:	0800484f 	.word	0x0800484f
 80047b0:	0800484f 	.word	0x0800484f
 80047b4:	08004827 	.word	0x08004827
 80047b8:	0800484f 	.word	0x0800484f
 80047bc:	0800484f 	.word	0x0800484f
 80047c0:	0800484f 	.word	0x0800484f
 80047c4:	0800484f 	.word	0x0800484f
 80047c8:	0800484f 	.word	0x0800484f
 80047cc:	0800484f 	.word	0x0800484f
 80047d0:	0800484f 	.word	0x0800484f
 80047d4:	0800483b 	.word	0x0800483b
 80047d8:	0800484f 	.word	0x0800484f
 80047dc:	0800484f 	.word	0x0800484f
 80047e0:	0800484f 	.word	0x0800484f
 80047e4:	0800484f 	.word	0x0800484f
 80047e8:	0800484f 	.word	0x0800484f
 80047ec:	0800484f 	.word	0x0800484f
 80047f0:	0800484f 	.word	0x0800484f
 80047f4:	08004857 	.word	0x08004857
 80047f8:	0800484f 	.word	0x0800484f
 80047fc:	0800484f 	.word	0x0800484f
 8004800:	0800484f 	.word	0x0800484f
 8004804:	0800484f 	.word	0x0800484f
 8004808:	0800484f 	.word	0x0800484f
 800480c:	0800484f 	.word	0x0800484f
 8004810:	0800484f 	.word	0x0800484f
 8004814:	08004857 	.word	0x08004857
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004818:	4bab      	ldr	r3, [pc, #684]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	4aaa      	ldr	r2, [pc, #680]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800481e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004822:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004824:	e018      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004826:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800482a:	3308      	adds	r3, #8
 800482c:	4618      	mov	r0, r3
 800482e:	f003 fa4f 	bl	8007cd0 <RCCEx_PLL2_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004838:	e00e      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800483a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800483e:	3330      	adds	r3, #48	; 0x30
 8004840:	4618      	mov	r0, r3
 8004842:	f003 fadd 	bl	8007e00 <RCCEx_PLL3_Config>
 8004846:	4603      	mov	r3, r0
 8004848:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800484c:	e004      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004854:	e000      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004856:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004858:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10d      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004860:	4b99      	ldr	r3, [pc, #612]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004866:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800486a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800486e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004872:	4a95      	ldr	r2, [pc, #596]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004874:	430b      	orrs	r3, r1
 8004876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800487a:	e003      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800487c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004880:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004884:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004890:	63bb      	str	r3, [r7, #56]	; 0x38
 8004892:	2300      	movs	r3, #0
 8004894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004896:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800489a:	460b      	mov	r3, r1
 800489c:	4313      	orrs	r3, r2
 800489e:	d04e      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80048a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ac:	d02e      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80048ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048b2:	d827      	bhi.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80048b4:	2bc0      	cmp	r3, #192	; 0xc0
 80048b6:	d02b      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80048b8:	2bc0      	cmp	r3, #192	; 0xc0
 80048ba:	d823      	bhi.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80048bc:	2b80      	cmp	r3, #128	; 0x80
 80048be:	d017      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80048c0:	2b80      	cmp	r3, #128	; 0x80
 80048c2:	d81f      	bhi.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d007      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80048cc:	e01a      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048ce:	4b7e      	ldr	r3, [pc, #504]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	4a7d      	ldr	r2, [pc, #500]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80048d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d8:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80048da:	e01a      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048e0:	3308      	adds	r3, #8
 80048e2:	4618      	mov	r0, r3
 80048e4:	f003 f9f4 	bl	8007cd0 <RCCEx_PLL2_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80048ee:	e010      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048f4:	3330      	adds	r3, #48	; 0x30
 80048f6:	4618      	mov	r0, r3
 80048f8:	f003 fa82 	bl	8007e00 <RCCEx_PLL3_Config>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004902:	e006      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800490a:	e002      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800490c:	bf00      	nop
 800490e:	e000      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004912:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10d      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800491a:	4b6b      	ldr	r3, [pc, #428]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800491c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004920:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004924:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800492c:	4a66      	ldr	r2, [pc, #408]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800492e:	430b      	orrs	r3, r1
 8004930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004934:	e003      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004936:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800493a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800493e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800494a:	633b      	str	r3, [r7, #48]	; 0x30
 800494c:	2300      	movs	r3, #0
 800494e:	637b      	str	r3, [r7, #52]	; 0x34
 8004950:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004954:	460b      	mov	r3, r1
 8004956:	4313      	orrs	r3, r2
 8004958:	d055      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800495a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800495e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004962:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004966:	d031      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004968:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800496c:	d82a      	bhi.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800496e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004972:	d02d      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004974:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004978:	d824      	bhi.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800497a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800497e:	d029      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004980:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004984:	d81e      	bhi.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800498a:	d011      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 800498c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004990:	d818      	bhi.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d020      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499a:	d113      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800499c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049a0:	3308      	adds	r3, #8
 80049a2:	4618      	mov	r0, r3
 80049a4:	f003 f994 	bl	8007cd0 <RCCEx_PLL2_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80049ae:	e014      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049b4:	3330      	adds	r3, #48	; 0x30
 80049b6:	4618      	mov	r0, r3
 80049b8:	f003 fa22 	bl	8007e00 <RCCEx_PLL3_Config>
 80049bc:	4603      	mov	r3, r0
 80049be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80049c2:	e00a      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80049ca:	e006      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80049cc:	bf00      	nop
 80049ce:	e004      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80049d0:	bf00      	nop
 80049d2:	e002      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80049d4:	bf00      	nop
 80049d6:	e000      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80049d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10d      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80049e2:	4b39      	ldr	r3, [pc, #228]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80049e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049e8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80049ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80049f4:	4a34      	ldr	r2, [pc, #208]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80049f6:	430b      	orrs	r3, r1
 80049f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049fc:	e003      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a02:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004a06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004a12:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a14:	2300      	movs	r3, #0
 8004a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a18:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	d058      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004a22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a2a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004a2e:	d031      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004a30:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004a34:	d82a      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004a36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a3a:	d02d      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a40:	d824      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004a42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a46:	d029      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004a48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a4c:	d81e      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a52:	d011      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a58:	d818      	bhi.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d020      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a62:	d113      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a68:	3308      	adds	r3, #8
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f003 f930 	bl	8007cd0 <RCCEx_PLL2_Config>
 8004a70:	4603      	mov	r3, r0
 8004a72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004a76:	e014      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a7c:	3330      	adds	r3, #48	; 0x30
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f003 f9be 	bl	8007e00 <RCCEx_PLL3_Config>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a92:	e006      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004a94:	bf00      	nop
 8004a96:	e004      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004a98:	bf00      	nop
 8004a9a:	e002      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004a9c:	bf00      	nop
 8004a9e:	e000      	b.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d110      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004aaa:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ab0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004ab4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004abc:	4902      	ldr	r1, [pc, #8]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004ac4:	e006      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004ac6:	bf00      	nop
 8004ac8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004acc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ad0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004adc:	2100      	movs	r1, #0
 8004ade:	6239      	str	r1, [r7, #32]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004aea:	460b      	mov	r3, r1
 8004aec:	4313      	orrs	r3, r2
 8004aee:	d055      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004af0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004af8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004afc:	d031      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004afe:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004b02:	d82a      	bhi.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004b04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b08:	d02d      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b0e:	d824      	bhi.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004b10:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004b14:	d029      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004b16:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004b1a:	d81e      	bhi.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b20:	d011      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b26:	d818      	bhi.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d020      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b30:	d113      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b36:	3308      	adds	r3, #8
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f003 f8c9 	bl	8007cd0 <RCCEx_PLL2_Config>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b44:	e014      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b4a:	3330      	adds	r3, #48	; 0x30
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f003 f957 	bl	8007e00 <RCCEx_PLL3_Config>
 8004b52:	4603      	mov	r3, r0
 8004b54:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b58:	e00a      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b60:	e006      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004b62:	bf00      	nop
 8004b64:	e004      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004b66:	bf00      	nop
 8004b68:	e002      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004b6a:	bf00      	nop
 8004b6c:	e000      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b70:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10d      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004b78:	4b88      	ldr	r3, [pc, #544]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b7e:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8004b82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b8a:	4984      	ldr	r1, [pc, #528]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004b92:	e003      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b94:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b98:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	61b9      	str	r1, [r7, #24]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	61fb      	str	r3, [r7, #28]
 8004bae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	d03d      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d81c      	bhi.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004bc4:	a201      	add	r2, pc, #4	; (adr r2, 8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004c07 	.word	0x08004c07
 8004bd0:	08004bdd 	.word	0x08004bdd
 8004bd4:	08004beb 	.word	0x08004beb
 8004bd8:	08004c07 	.word	0x08004c07
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bdc:	4b6f      	ldr	r3, [pc, #444]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	4a6e      	ldr	r2, [pc, #440]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004be8:	e00e      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bee:	3308      	adds	r3, #8
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f003 f86d 	bl	8007cd0 <RCCEx_PLL2_Config>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004bfc:	e004      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004c04:	e000      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c08:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10d      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004c10:	4b62      	ldr	r3, [pc, #392]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c16:	f023 0203 	bic.w	r2, r3, #3
 8004c1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004c22:	495e      	ldr	r1, [pc, #376]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004c2a:	e003      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c30:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	6139      	str	r1, [r7, #16]
 8004c40:	f003 0304 	and.w	r3, r3, #4
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	d03a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004c50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c54:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c5c:	d00e      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c62:	d815      	bhi.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d017      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6c:	d110      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c6e:	4b4b      	ldr	r3, [pc, #300]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	4a4a      	ldr	r2, [pc, #296]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c78:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004c7a:	e00e      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c80:	3308      	adds	r3, #8
 8004c82:	4618      	mov	r0, r3
 8004c84:	f003 f824 	bl	8007cd0 <RCCEx_PLL2_Config>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004c8e:	e004      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004c96:	e000      	b.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10d      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004ca2:	4b3e      	ldr	r3, [pc, #248]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004cb4:	4939      	ldr	r1, [pc, #228]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004cbc:	e003      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004cc2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cce:	2100      	movs	r1, #0
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	d038      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004ce2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ce6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004cea:	2b30      	cmp	r3, #48	; 0x30
 8004cec:	d01b      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004cee:	2b30      	cmp	r3, #48	; 0x30
 8004cf0:	d815      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	d002      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d007      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004cfa:	e010      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cfc:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	4a26      	ldr	r2, [pc, #152]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d06:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d08:	e00e      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d0e:	3330      	adds	r3, #48	; 0x30
 8004d10:	4618      	mov	r0, r3
 8004d12:	f003 f875 	bl	8007e00 <RCCEx_PLL3_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004d1c:	e004      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d24:	e000      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d28:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10d      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004d30:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d3e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004d42:	4916      	ldr	r1, [pc, #88]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004d4a:	e003      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d50:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	6039      	str	r1, [r7, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	607b      	str	r3, [r7, #4]
 8004d66:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	d00c      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004d70:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d7e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004d82:	4906      	ldr	r1, [pc, #24]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8004d8a:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8004d94:	46bd      	mov	sp, r7
 8004d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d9a:	bf00      	nop
 8004d9c:	44020c00 	.word	0x44020c00

08004da0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b08b      	sub	sp, #44	; 0x2c
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004da8:	4bad      	ldr	r3, [pc, #692]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004db2:	4bab      	ldr	r3, [pc, #684]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004dbc:	4ba8      	ldr	r3, [pc, #672]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dc6:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004dc8:	4ba5      	ldr	r3, [pc, #660]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	f003 0310 	and.w	r3, r3, #16
 8004dd0:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004dd2:	4ba3      	ldr	r3, [pc, #652]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	08db      	lsrs	r3, r3, #3
 8004dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dea:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8126 	beq.w	8005042 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d053      	beq.n	8004ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d86f      	bhi.n	8004ee2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d003      	beq.n	8004e10 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d02b      	beq.n	8004e66 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8004e0e:	e068      	b.n	8004ee2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e10:	4b93      	ldr	r3, [pc, #588]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	08db      	lsrs	r3, r3, #3
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	4a92      	ldr	r2, [pc, #584]	; (8005064 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e20:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	ee07 3a90 	vmov	s15, r3
 8004e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	ee07 3a90 	vmov	s15, r3
 8004e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e44:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e48:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005068 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004e4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e60:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004e64:	e068      	b.n	8004f38 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	ee07 3a90 	vmov	s15, r3
 8004e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e70:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800506c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004e74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e82:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005068 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004ea2:	e049      	b.n	8004f38 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eae:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005070 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	ee07 3a90 	vmov	s15, r3
 8004ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec0:	ed97 6a04 	vldr	s12, [r7, #16]
 8004ec4:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005068 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004edc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004ee0:	e02a      	b.n	8004f38 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ee2:	4b5f      	ldr	r3, [pc, #380]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	08db      	lsrs	r3, r3, #3
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	4a5d      	ldr	r2, [pc, #372]	; (8005064 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004eee:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	ee07 3a90 	vmov	s15, r3
 8004f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f16:	ed97 6a04 	vldr	s12, [r7, #16]
 8004f1a:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005068 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f32:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004f36:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f38:	4b49      	ldr	r3, [pc, #292]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f44:	d121      	bne.n	8004f8a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004f46:	4b46      	ldr	r3, [pc, #280]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d017      	beq.n	8004f82 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004f52:	4b43      	ldr	r3, [pc, #268]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f56:	0a5b      	lsrs	r3, r3, #9
 8004f58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f5c:	ee07 3a90 	vmov	s15, r3
 8004f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8004f64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f68:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004f6c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f78:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	e006      	b.n	8004f90 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	e002      	b.n	8004f90 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f90:	4b33      	ldr	r3, [pc, #204]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f9c:	d121      	bne.n	8004fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004f9e:	4b30      	ldr	r3, [pc, #192]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d017      	beq.n	8004fda <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004faa:	4b2d      	ldr	r3, [pc, #180]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fae:	0c1b      	lsrs	r3, r3, #16
 8004fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fb4:	ee07 3a90 	vmov	s15, r3
 8004fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004fbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fc0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004fc4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fd0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	e006      	b.n	8004fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	605a      	str	r2, [r3, #4]
 8004fe0:	e002      	b.n	8004fe8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fe8:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ff4:	d121      	bne.n	800503a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004ff6:	4b1a      	ldr	r3, [pc, #104]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d017      	beq.n	8005032 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005002:	4b17      	ldr	r3, [pc, #92]	; (8005060 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005006:	0e1b      	lsrs	r3, r3, #24
 8005008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800500c:	ee07 3a90 	vmov	s15, r3
 8005010:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005018:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800501c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005028:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005030:	e010      	b.n	8005054 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	609a      	str	r2, [r3, #8]
}
 8005038:	e00c      	b.n	8005054 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	e008      	b.n	8005054 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	609a      	str	r2, [r3, #8]
}
 8005054:	bf00      	nop
 8005056:	372c      	adds	r7, #44	; 0x2c
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	44020c00 	.word	0x44020c00
 8005064:	03d09000 	.word	0x03d09000
 8005068:	46000000 	.word	0x46000000
 800506c:	4a742400 	.word	0x4a742400
 8005070:	4bbebc20 	.word	0x4bbebc20

08005074 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005074:	b480      	push	{r7}
 8005076:	b08b      	sub	sp, #44	; 0x2c
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800507c:	4bad      	ldr	r3, [pc, #692]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800507e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005084:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005086:	4bab      	ldr	r3, [pc, #684]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005090:	4ba8      	ldr	r3, [pc, #672]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	0a1b      	lsrs	r3, r3, #8
 8005096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800509a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800509c:	4ba5      	ldr	r3, [pc, #660]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80050a6:	4ba3      	ldr	r3, [pc, #652]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	08db      	lsrs	r3, r3, #3
 80050ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	fb02 f303 	mul.w	r3, r2, r3
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050be:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8126 	beq.w	8005316 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d053      	beq.n	8005178 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	2b03      	cmp	r3, #3
 80050d4:	d86f      	bhi.n	80051b6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d003      	beq.n	80050e4 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d02b      	beq.n	800513a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80050e2:	e068      	b.n	80051b6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050e4:	4b93      	ldr	r3, [pc, #588]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	08db      	lsrs	r3, r3, #3
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	4a92      	ldr	r2, [pc, #584]	; (8005338 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
 80050f4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	ee07 3a90 	vmov	s15, r3
 80050fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	ee07 3a90 	vmov	s15, r3
 8005114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005118:	ed97 6a04 	vldr	s12, [r7, #16]
 800511c:	eddf 5a87 	vldr	s11, [pc, #540]	; 800533c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005120:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005124:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005128:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800512c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005130:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005134:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005138:	e068      	b.n	800520c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	ee07 3a90 	vmov	s15, r3
 8005140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005144:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005340 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005148:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005156:	ed97 6a04 	vldr	s12, [r7, #16]
 800515a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800533c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800515e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800516a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800516e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005172:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005176:	e049      	b.n	800520c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005182:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005344 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005194:	ed97 6a04 	vldr	s12, [r7, #16]
 8005198:	eddf 5a68 	vldr	s11, [pc, #416]	; 800533c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800519c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80051b4:	e02a      	b.n	800520c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051b6:	4b5f      	ldr	r3, [pc, #380]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	08db      	lsrs	r3, r3, #3
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	4a5d      	ldr	r2, [pc, #372]	; (8005338 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80051c2:	fa22 f303 	lsr.w	r3, r2, r3
 80051c6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	ee07 3a90 	vmov	s15, r3
 80051d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e0:	6a3b      	ldr	r3, [r7, #32]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ea:	ed97 6a04 	vldr	s12, [r7, #16]
 80051ee:	eddf 5a53 	vldr	s11, [pc, #332]	; 800533c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80051f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005206:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800520a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800520c:	4b49      	ldr	r3, [pc, #292]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005214:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005218:	d121      	bne.n	800525e <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800521a:	4b46      	ldr	r3, [pc, #280]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d017      	beq.n	8005256 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005226:	4b43      	ldr	r3, [pc, #268]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522a:	0a5b      	lsrs	r3, r3, #9
 800522c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005230:	ee07 3a90 	vmov	s15, r3
 8005234:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800523c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005240:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800524c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	e006      	b.n	8005264 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	e002      	b.n	8005264 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005264:	4b33      	ldr	r3, [pc, #204]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800526c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005270:	d121      	bne.n	80052b6 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005272:	4b30      	ldr	r3, [pc, #192]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d017      	beq.n	80052ae <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800527e:	4b2d      	ldr	r3, [pc, #180]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	0c1b      	lsrs	r3, r3, #16
 8005284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005288:	ee07 3a90 	vmov	s15, r3
 800528c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005290:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005294:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005298:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800529c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	605a      	str	r2, [r3, #4]
 80052ac:	e006      	b.n	80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	605a      	str	r2, [r3, #4]
 80052b4:	e002      	b.n	80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052bc:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c8:	d121      	bne.n	800530e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80052ca:	4b1a      	ldr	r3, [pc, #104]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d017      	beq.n	8005306 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80052d6:	4b17      	ldr	r3, [pc, #92]	; (8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80052d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052da:	0e1b      	lsrs	r3, r3, #24
 80052dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e0:	ee07 3a90 	vmov	s15, r3
 80052e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80052e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80052f0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80052f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052fc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005304:	e010      	b.n	8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	609a      	str	r2, [r3, #8]
}
 800530c:	e00c      	b.n	8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	609a      	str	r2, [r3, #8]
}
 8005314:	e008      	b.n	8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	609a      	str	r2, [r3, #8]
}
 8005328:	bf00      	nop
 800532a:	372c      	adds	r7, #44	; 0x2c
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	44020c00 	.word	0x44020c00
 8005338:	03d09000 	.word	0x03d09000
 800533c:	46000000 	.word	0x46000000
 8005340:	4a742400 	.word	0x4a742400
 8005344:	4bbebc20 	.word	0x4bbebc20

08005348 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005348:	b480      	push	{r7}
 800534a:	b08b      	sub	sp, #44	; 0x2c
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005350:	4bad      	ldr	r3, [pc, #692]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005358:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800535a:	4bab      	ldr	r3, [pc, #684]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005364:	4ba8      	ldr	r3, [pc, #672]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005368:	0a1b      	lsrs	r3, r3, #8
 800536a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800536e:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005370:	4ba5      	ldr	r3, [pc, #660]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800537a:	4ba3      	ldr	r3, [pc, #652]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800537c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537e:	08db      	lsrs	r3, r3, #3
 8005380:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	fb02 f303 	mul.w	r3, r2, r3
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005392:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 8126 	beq.w	80055ea <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d053      	beq.n	800544c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	2b03      	cmp	r3, #3
 80053a8:	d86f      	bhi.n	800548a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d003      	beq.n	80053b8 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d02b      	beq.n	800540e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80053b6:	e068      	b.n	800548a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053b8:	4b93      	ldr	r3, [pc, #588]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	08db      	lsrs	r3, r3, #3
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	4a92      	ldr	r2, [pc, #584]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
 80053c8:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	ee07 3a90 	vmov	s15, r3
 80053d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80053f0:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80053f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005404:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005408:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800540c:	e068      	b.n	80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	ee07 3a90 	vmov	s15, r3
 8005414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005418:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005614 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800541c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	ee07 3a90 	vmov	s15, r3
 8005426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542a:	ed97 6a04 	vldr	s12, [r7, #16]
 800542e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800543e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005446:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800544a:	e049      	b.n	80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005456:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005618 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800545a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	ee07 3a90 	vmov	s15, r3
 8005464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005468:	ed97 6a04 	vldr	s12, [r7, #16]
 800546c:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005470:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005474:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005478:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800547c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005484:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005488:	e02a      	b.n	80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800548a:	4b5f      	ldr	r3, [pc, #380]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	08db      	lsrs	r3, r3, #3
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	4a5d      	ldr	r2, [pc, #372]	; (800560c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005496:	fa22 f303 	lsr.w	r3, r2, r3
 800549a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	ee07 3a90 	vmov	s15, r3
 80054ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054be:	ed97 6a04 	vldr	s12, [r7, #16]
 80054c2:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005610 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80054c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054da:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80054de:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054e0:	4b49      	ldr	r3, [pc, #292]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ec:	d121      	bne.n	8005532 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80054ee:	4b46      	ldr	r3, [pc, #280]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d017      	beq.n	800552a <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80054fa:	4b43      	ldr	r3, [pc, #268]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	0a5b      	lsrs	r3, r3, #9
 8005500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005504:	ee07 3a90 	vmov	s15, r3
 8005508:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800550c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005510:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005514:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800551c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005520:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	e006      	b.n	8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	e002      	b.n	8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005538:	4b33      	ldr	r3, [pc, #204]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005544:	d121      	bne.n	800558a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005546:	4b30      	ldr	r3, [pc, #192]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d017      	beq.n	8005582 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005552:	4b2d      	ldr	r3, [pc, #180]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005556:	0c1b      	lsrs	r3, r3, #16
 8005558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800555c:	ee07 3a90 	vmov	s15, r3
 8005560:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005568:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800556c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005578:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	605a      	str	r2, [r3, #4]
 8005580:	e006      	b.n	8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	605a      	str	r2, [r3, #4]
 8005588:	e002      	b.n	8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005590:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800559c:	d121      	bne.n	80055e2 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800559e:	4b1a      	ldr	r3, [pc, #104]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d017      	beq.n	80055da <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80055aa:	4b17      	ldr	r3, [pc, #92]	; (8005608 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80055ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ae:	0e1b      	lsrs	r3, r3, #24
 80055b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b4:	ee07 3a90 	vmov	s15, r3
 80055b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80055bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055c0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80055c4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80055c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80055d8:	e010      	b.n	80055fc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	609a      	str	r2, [r3, #8]
}
 80055e0:	e00c      	b.n	80055fc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	609a      	str	r2, [r3, #8]
}
 80055e8:	e008      	b.n	80055fc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	609a      	str	r2, [r3, #8]
}
 80055fc:	bf00      	nop
 80055fe:	372c      	adds	r7, #44	; 0x2c
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	44020c00 	.word	0x44020c00
 800560c:	03d09000 	.word	0x03d09000
 8005610:	46000000 	.word	0x46000000
 8005614:	4a742400 	.word	0x4a742400
 8005618:	4bbebc20 	.word	0x4bbebc20

0800561c <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800561c:	b590      	push	{r4, r7, lr}
 800561e:	b08f      	sub	sp, #60	; 0x3c
 8005620:	af00      	add	r7, sp, #0
 8005622:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005626:	e9d7 0100 	ldrd	r0, r1, [r7]
 800562a:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800562e:	4321      	orrs	r1, r4
 8005630:	d150      	bne.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005632:	4b26      	ldr	r3, [pc, #152]	; (80056cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800563e:	4b23      	ldr	r3, [pc, #140]	; (80056cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b02      	cmp	r3, #2
 800564a:	d108      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005652:	d104      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005658:	637b      	str	r3, [r7, #52]	; 0x34
 800565a:	f002 bb2a 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800565e:	4b1b      	ldr	r3, [pc, #108]	; (80056cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800566c:	d108      	bne.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005674:	d104      	bne.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005676:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800567a:	637b      	str	r3, [r7, #52]	; 0x34
 800567c:	f002 bb19 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005680:	4b12      	ldr	r3, [pc, #72]	; (80056cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800568c:	d119      	bne.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005694:	d115      	bne.n	80056c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005696:	4b0d      	ldr	r3, [pc, #52]	; (80056cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800569e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056a2:	d30a      	bcc.n	80056ba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80056a4:	4b09      	ldr	r3, [pc, #36]	; (80056cc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	0a1b      	lsrs	r3, r3, #8
 80056aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056ae:	4a08      	ldr	r2, [pc, #32]	; (80056d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80056b6:	f002 bafc 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80056be:	f002 baf8 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	637b      	str	r3, [r7, #52]	; 0x34
 80056c6:	f002 baf4 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80056ca:	bf00      	nop
 80056cc:	44020c00 	.word	0x44020c00
 80056d0:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80056d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056d8:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80056dc:	ea50 0104 	orrs.w	r1, r0, r4
 80056e0:	f001 8275 	beq.w	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80056e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056e8:	2801      	cmp	r0, #1
 80056ea:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 80056ee:	f082 82dd 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056f6:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 80056fa:	ea50 0104 	orrs.w	r1, r0, r4
 80056fe:	f001 816c 	beq.w	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8005702:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005706:	2801      	cmp	r0, #1
 8005708:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 800570c:	f082 82ce 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005710:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005714:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8005718:	ea50 0104 	orrs.w	r1, r0, r4
 800571c:	f001 8602 	beq.w	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8005720:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005724:	2801      	cmp	r0, #1
 8005726:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800572a:	f082 82bf 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800572e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005732:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8005736:	ea50 0104 	orrs.w	r1, r0, r4
 800573a:	f001 854c 	beq.w	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800573e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005742:	2801      	cmp	r0, #1
 8005744:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8005748:	f082 82b0 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800574c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005750:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8005754:	ea50 0104 	orrs.w	r1, r0, r4
 8005758:	f001 849e 	beq.w	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 800575c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005760:	2801      	cmp	r0, #1
 8005762:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8005766:	f082 82a1 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800576a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800576e:	f1a1 0420 	sub.w	r4, r1, #32
 8005772:	ea50 0104 	orrs.w	r1, r0, r4
 8005776:	f001 83e8 	beq.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800577a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800577e:	2801      	cmp	r0, #1
 8005780:	f171 0120 	sbcs.w	r1, r1, #32
 8005784:	f082 8292 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005788:	e9d7 0100 	ldrd	r0, r1, [r7]
 800578c:	f1a1 0410 	sub.w	r4, r1, #16
 8005790:	ea50 0104 	orrs.w	r1, r0, r4
 8005794:	f002 8256 	beq.w	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005798:	e9d7 0100 	ldrd	r0, r1, [r7]
 800579c:	2801      	cmp	r0, #1
 800579e:	f171 0110 	sbcs.w	r1, r1, #16
 80057a2:	f082 8283 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057aa:	f1a1 0408 	sub.w	r4, r1, #8
 80057ae:	ea50 0104 	orrs.w	r1, r0, r4
 80057b2:	f002 81cc 	beq.w	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80057b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057ba:	2801      	cmp	r0, #1
 80057bc:	f171 0108 	sbcs.w	r1, r1, #8
 80057c0:	f082 8274 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057c8:	1f0c      	subs	r4, r1, #4
 80057ca:	ea50 0104 	orrs.w	r1, r0, r4
 80057ce:	f001 8648 	beq.w	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80057d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057d6:	2801      	cmp	r0, #1
 80057d8:	f171 0104 	sbcs.w	r1, r1, #4
 80057dc:	f082 8266 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057e4:	1e8c      	subs	r4, r1, #2
 80057e6:	ea50 0104 	orrs.w	r1, r0, r4
 80057ea:	f002 8143 	beq.w	8007a74 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80057ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057f2:	2801      	cmp	r0, #1
 80057f4:	f171 0102 	sbcs.w	r1, r1, #2
 80057f8:	f082 8258 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005800:	1e4c      	subs	r4, r1, #1
 8005802:	ea50 0104 	orrs.w	r1, r0, r4
 8005806:	f002 80ce 	beq.w	80079a6 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800580a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800580e:	2801      	cmp	r0, #1
 8005810:	f171 0101 	sbcs.w	r1, r1, #1
 8005814:	f082 824a 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005818:	e9d7 0100 	ldrd	r0, r1, [r7]
 800581c:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8005820:	4321      	orrs	r1, r4
 8005822:	f002 8059 	beq.w	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8005826:	e9d7 0100 	ldrd	r0, r1, [r7]
 800582a:	4cd9      	ldr	r4, [pc, #868]	; (8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800582c:	42a0      	cmp	r0, r4
 800582e:	f171 0100 	sbcs.w	r1, r1, #0
 8005832:	f082 823b 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005836:	e9d7 0100 	ldrd	r0, r1, [r7]
 800583a:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800583e:	4321      	orrs	r1, r4
 8005840:	f001 87d9 	beq.w	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005844:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005848:	4cd2      	ldr	r4, [pc, #840]	; (8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800584a:	42a0      	cmp	r0, r4
 800584c:	f171 0100 	sbcs.w	r1, r1, #0
 8005850:	f082 822c 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005854:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005858:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800585c:	4321      	orrs	r1, r4
 800585e:	f001 8751 	beq.w	8007704 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005862:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005866:	4ccc      	ldr	r4, [pc, #816]	; (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005868:	42a0      	cmp	r0, r4
 800586a:	f171 0100 	sbcs.w	r1, r1, #0
 800586e:	f082 821d 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005872:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005876:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 800587a:	4321      	orrs	r1, r4
 800587c:	f001 869a 	beq.w	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005880:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005884:	4cc5      	ldr	r4, [pc, #788]	; (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005886:	42a0      	cmp	r0, r4
 8005888:	f171 0100 	sbcs.w	r1, r1, #0
 800588c:	f082 820e 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005894:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8005898:	4321      	orrs	r1, r4
 800589a:	f001 8612 	beq.w	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800589e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058a2:	4cbf      	ldr	r4, [pc, #764]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80058a4:	42a0      	cmp	r0, r4
 80058a6:	f171 0100 	sbcs.w	r1, r1, #0
 80058aa:	f082 81ff 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058b2:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 80058b6:	4321      	orrs	r1, r4
 80058b8:	f002 817e 	beq.w	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80058bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058c0:	4cb8      	ldr	r4, [pc, #736]	; (8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80058c2:	42a0      	cmp	r0, r4
 80058c4:	f171 0100 	sbcs.w	r1, r1, #0
 80058c8:	f082 81f0 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058d0:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 80058d4:	4321      	orrs	r1, r4
 80058d6:	f000 829e 	beq.w	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80058da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058de:	4cb2      	ldr	r4, [pc, #712]	; (8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058e0:	42a0      	cmp	r0, r4
 80058e2:	f171 0100 	sbcs.w	r1, r1, #0
 80058e6:	f082 81e1 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058ee:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 80058f2:	4321      	orrs	r1, r4
 80058f4:	f000 826d 	beq.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80058f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058fc:	4cab      	ldr	r4, [pc, #684]	; (8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058fe:	42a0      	cmp	r0, r4
 8005900:	f171 0100 	sbcs.w	r1, r1, #0
 8005904:	f082 81d2 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005908:	e9d7 0100 	ldrd	r0, r1, [r7]
 800590c:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8005910:	4321      	orrs	r1, r4
 8005912:	f001 800d 	beq.w	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8005916:	e9d7 0100 	ldrd	r0, r1, [r7]
 800591a:	4ca5      	ldr	r4, [pc, #660]	; (8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800591c:	42a0      	cmp	r0, r4
 800591e:	f171 0100 	sbcs.w	r1, r1, #0
 8005922:	f082 81c3 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005926:	e9d7 0100 	ldrd	r0, r1, [r7]
 800592a:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 800592e:	4321      	orrs	r1, r4
 8005930:	f000 81d0 	beq.w	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005934:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005938:	4c9e      	ldr	r4, [pc, #632]	; (8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800593a:	42a0      	cmp	r0, r4
 800593c:	f171 0100 	sbcs.w	r1, r1, #0
 8005940:	f082 81b4 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005944:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005948:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 800594c:	4321      	orrs	r1, r4
 800594e:	f000 8142 	beq.w	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005952:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005956:	4c98      	ldr	r4, [pc, #608]	; (8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005958:	42a0      	cmp	r0, r4
 800595a:	f171 0100 	sbcs.w	r1, r1, #0
 800595e:	f082 81a5 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005962:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005966:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 800596a:	4321      	orrs	r1, r4
 800596c:	f001 824e 	beq.w	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005970:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005974:	4c91      	ldr	r4, [pc, #580]	; (8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005976:	42a0      	cmp	r0, r4
 8005978:	f171 0100 	sbcs.w	r1, r1, #0
 800597c:	f082 8196 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005980:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005984:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8005988:	4321      	orrs	r1, r4
 800598a:	f001 8197 	beq.w	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800598e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005992:	4c8b      	ldr	r4, [pc, #556]	; (8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005994:	42a0      	cmp	r0, r4
 8005996:	f171 0100 	sbcs.w	r1, r1, #0
 800599a:	f082 8187 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800599e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059a2:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 80059a6:	4321      	orrs	r1, r4
 80059a8:	f001 8154 	beq.w	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 80059ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059b0:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 80059b4:	f171 0100 	sbcs.w	r1, r1, #0
 80059b8:	f082 8178 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059c0:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 80059c4:	4321      	orrs	r1, r4
 80059c6:	f001 80b7 	beq.w	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80059ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ce:	f248 0401 	movw	r4, #32769	; 0x8001
 80059d2:	42a0      	cmp	r0, r4
 80059d4:	f171 0100 	sbcs.w	r1, r1, #0
 80059d8:	f082 8168 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059e0:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 80059e4:	4321      	orrs	r1, r4
 80059e6:	f001 8064 	beq.w	8006ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80059ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ee:	f244 0401 	movw	r4, #16385	; 0x4001
 80059f2:	42a0      	cmp	r0, r4
 80059f4:	f171 0100 	sbcs.w	r1, r1, #0
 80059f8:	f082 8158 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a00:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8005a04:	4321      	orrs	r1, r4
 8005a06:	f001 8011 	beq.w	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8005a0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a0e:	f242 0401 	movw	r4, #8193	; 0x2001
 8005a12:	42a0      	cmp	r0, r4
 8005a14:	f171 0100 	sbcs.w	r1, r1, #0
 8005a18:	f082 8148 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a20:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8005a24:	4321      	orrs	r1, r4
 8005a26:	f000 871e 	beq.w	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8005a2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a2e:	f241 0401 	movw	r4, #4097	; 0x1001
 8005a32:	42a0      	cmp	r0, r4
 8005a34:	f171 0100 	sbcs.w	r1, r1, #0
 8005a38:	f082 8138 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a40:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8005a44:	4321      	orrs	r1, r4
 8005a46:	f000 86a8 	beq.w	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8005a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a4e:	f640 0401 	movw	r4, #2049	; 0x801
 8005a52:	42a0      	cmp	r0, r4
 8005a54:	f171 0100 	sbcs.w	r1, r1, #0
 8005a58:	f082 8128 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a60:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8005a64:	4321      	orrs	r1, r4
 8005a66:	f000 8632 	beq.w	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8005a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a6e:	f240 4401 	movw	r4, #1025	; 0x401
 8005a72:	42a0      	cmp	r0, r4
 8005a74:	f171 0100 	sbcs.w	r1, r1, #0
 8005a78:	f082 8118 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a80:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8005a84:	4321      	orrs	r1, r4
 8005a86:	f000 85b0 	beq.w	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8005a8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a8e:	f240 2401 	movw	r4, #513	; 0x201
 8005a92:	42a0      	cmp	r0, r4
 8005a94:	f171 0100 	sbcs.w	r1, r1, #0
 8005a98:	f082 8108 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aa0:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8005aa4:	4321      	orrs	r1, r4
 8005aa6:	f000 8535 	beq.w	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005aaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aae:	f240 1401 	movw	r4, #257	; 0x101
 8005ab2:	42a0      	cmp	r0, r4
 8005ab4:	f171 0100 	sbcs.w	r1, r1, #0
 8005ab8:	f082 80f8 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005abc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ac0:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8005ac4:	4321      	orrs	r1, r4
 8005ac6:	f000 84ba 	beq.w	800643e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8005aca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ace:	2881      	cmp	r0, #129	; 0x81
 8005ad0:	f171 0100 	sbcs.w	r1, r1, #0
 8005ad4:	f082 80ea 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005adc:	2821      	cmp	r0, #33	; 0x21
 8005ade:	f171 0100 	sbcs.w	r1, r1, #0
 8005ae2:	d26f      	bcs.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005ae4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ae8:	4301      	orrs	r1, r0
 8005aea:	f002 80df 	beq.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005aee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005af2:	1e42      	subs	r2, r0, #1
 8005af4:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8005af8:	2a20      	cmp	r2, #32
 8005afa:	f173 0100 	sbcs.w	r1, r3, #0
 8005afe:	f082 80d5 	bcs.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b02:	2a1f      	cmp	r2, #31
 8005b04:	f202 80d2 	bhi.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b08:	a101      	add	r1, pc, #4	; (adr r1, 8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005b0a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b0e:	bf00      	nop
 8005b10:	08005e71 	.word	0x08005e71
 8005b14:	08005f3d 	.word	0x08005f3d
 8005b18:	08007cad 	.word	0x08007cad
 8005b1c:	08005ffd 	.word	0x08005ffd
 8005b20:	08007cad 	.word	0x08007cad
 8005b24:	08007cad 	.word	0x08007cad
 8005b28:	08007cad 	.word	0x08007cad
 8005b2c:	080060cd 	.word	0x080060cd
 8005b30:	08007cad 	.word	0x08007cad
 8005b34:	08007cad 	.word	0x08007cad
 8005b38:	08007cad 	.word	0x08007cad
 8005b3c:	08007cad 	.word	0x08007cad
 8005b40:	08007cad 	.word	0x08007cad
 8005b44:	08007cad 	.word	0x08007cad
 8005b48:	08007cad 	.word	0x08007cad
 8005b4c:	080061af 	.word	0x080061af
 8005b50:	08007cad 	.word	0x08007cad
 8005b54:	08007cad 	.word	0x08007cad
 8005b58:	08007cad 	.word	0x08007cad
 8005b5c:	08007cad 	.word	0x08007cad
 8005b60:	08007cad 	.word	0x08007cad
 8005b64:	08007cad 	.word	0x08007cad
 8005b68:	08007cad 	.word	0x08007cad
 8005b6c:	08007cad 	.word	0x08007cad
 8005b70:	08007cad 	.word	0x08007cad
 8005b74:	08007cad 	.word	0x08007cad
 8005b78:	08007cad 	.word	0x08007cad
 8005b7c:	08007cad 	.word	0x08007cad
 8005b80:	08007cad 	.word	0x08007cad
 8005b84:	08007cad 	.word	0x08007cad
 8005b88:	08007cad 	.word	0x08007cad
 8005b8c:	08006285 	.word	0x08006285
 8005b90:	80000001 	.word	0x80000001
 8005b94:	40000001 	.word	0x40000001
 8005b98:	20000001 	.word	0x20000001
 8005b9c:	10000001 	.word	0x10000001
 8005ba0:	08000001 	.word	0x08000001
 8005ba4:	04000001 	.word	0x04000001
 8005ba8:	00800001 	.word	0x00800001
 8005bac:	00400001 	.word	0x00400001
 8005bb0:	00200001 	.word	0x00200001
 8005bb4:	00100001 	.word	0x00100001
 8005bb8:	00080001 	.word	0x00080001
 8005bbc:	00040001 	.word	0x00040001
 8005bc0:	00020001 	.word	0x00020001
 8005bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bc8:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	f000 83c4 	beq.w	800635a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005bd2:	f002 b86b 	b.w	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005bd6:	4ba1      	ldr	r3, [pc, #644]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bdc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005be0:	633b      	str	r3, [r7, #48]	; 0x30
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005be8:	d036      	beq.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bf0:	d86b      	bhi.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bf8:	d02b      	beq.n	8005c52 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c00:	d863      	bhi.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c08:	d01b      	beq.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c10:	d85b      	bhi.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d004      	beq.n	8005c22 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c1e:	d008      	beq.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8005c20:	e053      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c22:	f107 0320 	add.w	r3, r7, #32
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7ff f8ba 	bl	8004da0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c30:	e04e      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c32:	f107 0314 	add.w	r3, r7, #20
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff fa1c 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c40:	e046      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c42:	f107 0308 	add.w	r3, r7, #8
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff fb7e 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c50:	e03e      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005c52:	4b83      	ldr	r3, [pc, #524]	; (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005c54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c56:	e03b      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c58:	4b80      	ldr	r3, [pc, #512]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c5e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005c62:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c64:	4b7d      	ldr	r3, [pc, #500]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d10c      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c76:	4b79      	ldr	r3, [pc, #484]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	08db      	lsrs	r3, r3, #3
 8005c7c:	f003 0303 	and.w	r3, r3, #3
 8005c80:	4a78      	ldr	r2, [pc, #480]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005c82:	fa22 f303 	lsr.w	r3, r2, r3
 8005c86:	637b      	str	r3, [r7, #52]	; 0x34
 8005c88:	e01e      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c8a:	4b74      	ldr	r3, [pc, #464]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c96:	d106      	bne.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9e:	d102      	bne.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005ca0:	4b71      	ldr	r3, [pc, #452]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ca4:	e010      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ca6:	4b6d      	ldr	r3, [pc, #436]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cb2:	d106      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cba:	d102      	bne.n	8005cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005cbc:	4b6b      	ldr	r3, [pc, #428]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc0:	e002      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005cc6:	e003      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005cc8:	e002      	b.n	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005cce:	bf00      	nop
          }
        }
        break;
 8005cd0:	f001 bfef 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005cd4:	4b61      	ldr	r3, [pc, #388]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cda:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005cde:	633b      	str	r3, [r7, #48]	; 0x30
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ce6:	d036      	beq.n	8005d56 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cee:	d86b      	bhi.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005cf6:	d02b      	beq.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005cfe:	d863      	bhi.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d06:	d01b      	beq.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d0e:	d85b      	bhi.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d004      	beq.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d1c:	d008      	beq.n	8005d30 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8005d1e:	e053      	b.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d20:	f107 0320 	add.w	r3, r7, #32
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff f83b 	bl	8004da0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d2e:	e04e      	b.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d30:	f107 0314 	add.w	r3, r7, #20
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff f99d 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d3e:	e046      	b.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d40:	f107 0308 	add.w	r3, r7, #8
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff faff 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d4e:	e03e      	b.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005d50:	4b43      	ldr	r3, [pc, #268]	; (8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005d52:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d54:	e03b      	b.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d56:	4b41      	ldr	r3, [pc, #260]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d5c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005d60:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d62:	4b3e      	ldr	r3, [pc, #248]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d10c      	bne.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d109      	bne.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d74:	4b39      	ldr	r3, [pc, #228]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	08db      	lsrs	r3, r3, #3
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	4a39      	ldr	r2, [pc, #228]	; (8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005d80:	fa22 f303 	lsr.w	r3, r2, r3
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
 8005d86:	e01e      	b.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d88:	4b34      	ldr	r3, [pc, #208]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d94:	d106      	bne.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9c:	d102      	bne.n	8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005d9e:	4b32      	ldr	r3, [pc, #200]	; (8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005da0:	637b      	str	r3, [r7, #52]	; 0x34
 8005da2:	e010      	b.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005da4:	4b2d      	ldr	r3, [pc, #180]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005db0:	d106      	bne.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8005db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005db8:	d102      	bne.n	8005dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005dba:	4b2c      	ldr	r3, [pc, #176]	; (8005e6c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dbe:	e002      	b.n	8005dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005dc4:	e003      	b.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8005dc6:	e002      	b.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005dcc:	bf00      	nop
          }
        }
        break;
 8005dce:	f001 bf70 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005dd2:	4b22      	ldr	r3, [pc, #136]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005dd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ddc:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d108      	bne.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005de4:	f107 0320 	add.w	r3, r7, #32
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fe ffd9 	bl	8004da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005df2:	f001 bf5e 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	2b40      	cmp	r3, #64	; 0x40
 8005dfa:	d108      	bne.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dfc:	f107 0314 	add.w	r3, r7, #20
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff f937 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e0a:	f001 bf52 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e12:	f001 bf4e 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8005e16:	4b11      	ldr	r3, [pc, #68]	; (8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e20:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d108      	bne.n	8005e3a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e28:	f107 0320 	add.w	r3, r7, #32
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fe ffb7 	bl	8004da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e36:	f001 bf3c 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	2b80      	cmp	r3, #128	; 0x80
 8005e3e:	d108      	bne.n	8005e52 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e40:	f107 0314 	add.w	r3, r7, #20
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff f915 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e4e:	f001 bf30 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e56:	f001 bf2c 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005e5a:	bf00      	nop
 8005e5c:	44020c00 	.word	0x44020c00
 8005e60:	00bb8000 	.word	0x00bb8000
 8005e64:	03d09000 	.word	0x03d09000
 8005e68:	003d0900 	.word	0x003d0900
 8005e6c:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005e70:	4b9d      	ldr	r3, [pc, #628]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d104      	bne.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005e82:	f7fc ffd7 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 8005e86:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005e88:	f001 bf13 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005e8c:	4b96      	ldr	r3, [pc, #600]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e98:	d10a      	bne.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d107      	bne.n	8005eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ea0:	f107 0314 	add.w	r3, r7, #20
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff f8e5 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
 8005eae:	e043      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005eb0:	4b8d      	ldr	r3, [pc, #564]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ebc:	d10a      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d107      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ec4:	f107 0308 	add.w	r3, r7, #8
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff fa3d 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed2:	e031      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005ed4:	4b84      	ldr	r3, [pc, #528]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d10c      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d109      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ee6:	4b80      	ldr	r3, [pc, #512]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	08db      	lsrs	r3, r3, #3
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	4a7e      	ldr	r2, [pc, #504]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef8:	e01e      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005efa:	4b7b      	ldr	r3, [pc, #492]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f06:	d105      	bne.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	2b04      	cmp	r3, #4
 8005f0c:	d102      	bne.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8005f0e:	4b78      	ldr	r3, [pc, #480]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005f10:	637b      	str	r3, [r7, #52]	; 0x34
 8005f12:	e011      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005f14:	4b74      	ldr	r3, [pc, #464]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005f16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d106      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8005f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f24:	2b05      	cmp	r3, #5
 8005f26:	d103      	bne.n	8005f30 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8005f28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f2e:	e003      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f34:	f001 bebd 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005f38:	f001 bebb 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005f3c:	4b6a      	ldr	r3, [pc, #424]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005f3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f46:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d104      	bne.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f4e:	f7fc ff5b 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8005f52:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f54:	f001 bead 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005f58:	4b63      	ldr	r3, [pc, #396]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f64:	d10a      	bne.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d107      	bne.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f6c:	f107 0314 	add.w	r3, r7, #20
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff f87f 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	637b      	str	r3, [r7, #52]	; 0x34
 8005f7a:	e03d      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	2b10      	cmp	r3, #16
 8005f80:	d108      	bne.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f82:	f107 0308 	add.w	r3, r7, #8
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff f9de 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f90:	f001 be8f 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005f94:	4b54      	ldr	r3, [pc, #336]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d10c      	bne.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	2b18      	cmp	r3, #24
 8005fa4:	d109      	bne.n	8005fba <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005fa6:	4b50      	ldr	r3, [pc, #320]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	08db      	lsrs	r3, r3, #3
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	4a4e      	ldr	r2, [pc, #312]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb8:	e01e      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005fba:	4b4b      	ldr	r3, [pc, #300]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fc6:	d105      	bne.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d102      	bne.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8005fce:	4b48      	ldr	r3, [pc, #288]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd2:	e011      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005fd4:	4b44      	ldr	r3, [pc, #272]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d106      	bne.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	2b28      	cmp	r3, #40	; 0x28
 8005fe6:	d103      	bne.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8005fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fec:	637b      	str	r3, [r7, #52]	; 0x34
 8005fee:	e003      	b.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ff4:	f001 be5d 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005ff8:	f001 be5b 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005ffc:	4b3a      	ldr	r3, [pc, #232]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ffe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006002:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006006:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	2b00      	cmp	r3, #0
 800600c:	d104      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800600e:	f7fc fefb 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8006012:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006014:	f001 be4d 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006018:	4b33      	ldr	r3, [pc, #204]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006024:	d10a      	bne.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	d107      	bne.n	800603c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800602c:	f107 0314 	add.w	r3, r7, #20
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff f81f 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	637b      	str	r3, [r7, #52]	; 0x34
 800603a:	e045      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800603c:	4b2a      	ldr	r3, [pc, #168]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006048:	d10a      	bne.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	2b80      	cmp	r3, #128	; 0x80
 800604e:	d107      	bne.n	8006060 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006050:	f107 0308 	add.w	r3, r7, #8
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff f977 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	637b      	str	r3, [r7, #52]	; 0x34
 800605e:	e033      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006060:	4b21      	ldr	r3, [pc, #132]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b02      	cmp	r3, #2
 800606a:	d10c      	bne.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	2bc0      	cmp	r3, #192	; 0xc0
 8006070:	d109      	bne.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006072:	4b1d      	ldr	r3, [pc, #116]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	08db      	lsrs	r3, r3, #3
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	4a1b      	ldr	r2, [pc, #108]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800607e:	fa22 f303 	lsr.w	r3, r2, r3
 8006082:	637b      	str	r3, [r7, #52]	; 0x34
 8006084:	e020      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006086:	4b18      	ldr	r3, [pc, #96]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800608e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006092:	d106      	bne.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800609a:	d102      	bne.n	80060a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800609c:	4b14      	ldr	r3, [pc, #80]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
 80060a0:	e012      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80060a2:	4b11      	ldr	r3, [pc, #68]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d107      	bne.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80060b6:	d103      	bne.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80060b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060bc:	637b      	str	r3, [r7, #52]	; 0x34
 80060be:	e003      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060c4:	f001 bdf5 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80060c8:	f001 bdf3 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80060cc:	4b06      	ldr	r3, [pc, #24]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80060d2:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80060d6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80060d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80060de:	f7fc fe93 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 80060e2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80060e4:	f001 bde5 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80060e8:	44020c00 	.word	0x44020c00
 80060ec:	03d09000 	.word	0x03d09000
 80060f0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80060f4:	4ba0      	ldr	r3, [pc, #640]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006100:	d10b      	bne.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006108:	d107      	bne.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800610a:	f107 0314 	add.w	r3, r7, #20
 800610e:	4618      	mov	r0, r3
 8006110:	f7fe ffb0 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	637b      	str	r3, [r7, #52]	; 0x34
 8006118:	e047      	b.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800611a:	4b97      	ldr	r3, [pc, #604]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006126:	d10b      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800612e:	d107      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006130:	f107 0308 	add.w	r3, r7, #8
 8006134:	4618      	mov	r0, r3
 8006136:	f7ff f907 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
 800613e:	e034      	b.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006140:	4b8d      	ldr	r3, [pc, #564]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b02      	cmp	r3, #2
 800614a:	d10d      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006152:	d109      	bne.n	8006168 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006154:	4b88      	ldr	r3, [pc, #544]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	08db      	lsrs	r3, r3, #3
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	4a87      	ldr	r2, [pc, #540]	; (800637c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006160:	fa22 f303 	lsr.w	r3, r2, r3
 8006164:	637b      	str	r3, [r7, #52]	; 0x34
 8006166:	e020      	b.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006168:	4b83      	ldr	r3, [pc, #524]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006174:	d106      	bne.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800617c:	d102      	bne.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800617e:	4b80      	ldr	r3, [pc, #512]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
 8006182:	e012      	b.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006184:	4b7c      	ldr	r3, [pc, #496]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b02      	cmp	r3, #2
 8006190:	d107      	bne.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006198:	d103      	bne.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800619a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
 80061a0:	e003      	b.n	80061aa <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061a6:	f001 bd84 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80061aa:	f001 bd82 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80061ae:	4b72      	ldr	r3, [pc, #456]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80061b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80061b4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80061b8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80061c0:	f7fc fe22 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 80061c4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80061c6:	f001 bd74 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80061ca:	4b6b      	ldr	r3, [pc, #428]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061d6:	d10b      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061de:	d107      	bne.n	80061f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061e0:	f107 0314 	add.w	r3, r7, #20
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fe ff45 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	637b      	str	r3, [r7, #52]	; 0x34
 80061ee:	e047      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80061f0:	4b61      	ldr	r3, [pc, #388]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061fc:	d10b      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006204:	d107      	bne.n	8006216 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006206:	f107 0308 	add.w	r3, r7, #8
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff f89c 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
 8006214:	e034      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006216:	4b58      	ldr	r3, [pc, #352]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b02      	cmp	r3, #2
 8006220:	d10d      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006228:	d109      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800622a:	4b53      	ldr	r3, [pc, #332]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	08db      	lsrs	r3, r3, #3
 8006230:	f003 0303 	and.w	r3, r3, #3
 8006234:	4a51      	ldr	r2, [pc, #324]	; (800637c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006236:	fa22 f303 	lsr.w	r3, r2, r3
 800623a:	637b      	str	r3, [r7, #52]	; 0x34
 800623c:	e020      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800623e:	4b4e      	ldr	r3, [pc, #312]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800624a:	d106      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006252:	d102      	bne.n	800625a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8006254:	4b4a      	ldr	r3, [pc, #296]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006256:	637b      	str	r3, [r7, #52]	; 0x34
 8006258:	e012      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800625a:	4b47      	ldr	r3, [pc, #284]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800625c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b02      	cmp	r3, #2
 8006266:	d107      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800626e:	d103      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8006270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006274:	637b      	str	r3, [r7, #52]	; 0x34
 8006276:	e003      	b.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800627c:	f001 bd19 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006280:	f001 bd17 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006284:	4b3c      	ldr	r3, [pc, #240]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006286:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800628a:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800628e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	2b00      	cmp	r3, #0
 8006294:	d104      	bne.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006296:	f7fc fdb7 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 800629a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800629c:	f001 bd09 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80062a0:	4b35      	ldr	r3, [pc, #212]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062ac:	d10b      	bne.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b4:	d107      	bne.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062b6:	f107 0314 	add.w	r3, r7, #20
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe feda 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	637b      	str	r3, [r7, #52]	; 0x34
 80062c4:	e047      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80062c6:	4b2c      	ldr	r3, [pc, #176]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062d2:	d10b      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062da:	d107      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062dc:	f107 0308 	add.w	r3, r7, #8
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff f831 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ea:	e034      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80062ec:	4b22      	ldr	r3, [pc, #136]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d10d      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80062f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fa:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80062fe:	d109      	bne.n	8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006300:	4b1d      	ldr	r3, [pc, #116]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	08db      	lsrs	r3, r3, #3
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	4a1c      	ldr	r2, [pc, #112]	; (800637c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800630c:	fa22 f303 	lsr.w	r3, r2, r3
 8006310:	637b      	str	r3, [r7, #52]	; 0x34
 8006312:	e020      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006314:	4b18      	ldr	r3, [pc, #96]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800631c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006320:	d106      	bne.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006328:	d102      	bne.n	8006330 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800632a:	4b15      	ldr	r3, [pc, #84]	; (8006380 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800632c:	637b      	str	r3, [r7, #52]	; 0x34
 800632e:	e012      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006330:	4b11      	ldr	r3, [pc, #68]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b02      	cmp	r3, #2
 800633c:	d107      	bne.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006344:	d103      	bne.n	800634e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8006346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800634a:	637b      	str	r3, [r7, #52]	; 0x34
 800634c:	e003      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006352:	f001 bcae 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006356:	f001 bcac 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800635a:	4b07      	ldr	r3, [pc, #28]	; (8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800635c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006360:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8006364:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10b      	bne.n	8006384 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800636c:	f7fc fd4c 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8006370:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8006372:	f001 bc9e 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006376:	bf00      	nop
 8006378:	44020c00 	.word	0x44020c00
 800637c:	03d09000 	.word	0x03d09000
 8006380:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8006384:	4ba0      	ldr	r3, [pc, #640]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800638c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006390:	d10b      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006398:	d107      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800639a:	f107 0314 	add.w	r3, r7, #20
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe fe68 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	637b      	str	r3, [r7, #52]	; 0x34
 80063a8:	e047      	b.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80063aa:	4b97      	ldr	r3, [pc, #604]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063b6:	d10b      	bne.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80063b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80063be:	d107      	bne.n	80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063c0:	f107 0308 	add.w	r3, r7, #8
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fe ffbf 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
 80063ce:	e034      	b.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80063d0:	4b8d      	ldr	r3, [pc, #564]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d10d      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80063dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80063e2:	d109      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063e4:	4b88      	ldr	r3, [pc, #544]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	08db      	lsrs	r3, r3, #3
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	4a87      	ldr	r2, [pc, #540]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80063f0:	fa22 f303 	lsr.w	r3, r2, r3
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
 80063f6:	e020      	b.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80063f8:	4b83      	ldr	r3, [pc, #524]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006404:	d106      	bne.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800640c:	d102      	bne.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800640e:	4b80      	ldr	r3, [pc, #512]	; (8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006410:	637b      	str	r3, [r7, #52]	; 0x34
 8006412:	e012      	b.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8006414:	4b7c      	ldr	r3, [pc, #496]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b02      	cmp	r3, #2
 8006420:	d107      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006428:	d103      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800642a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642e:	637b      	str	r3, [r7, #52]	; 0x34
 8006430:	e003      	b.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006436:	f001 bc3c 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800643a:	f001 bc3a 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800643e:	4b72      	ldr	r3, [pc, #456]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006440:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006444:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006448:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	2b00      	cmp	r3, #0
 800644e:	d104      	bne.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006450:	f7fc fcda 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8006454:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8006456:	f001 bc2c 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800645a:	4b6b      	ldr	r3, [pc, #428]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006466:	d10b      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800646e:	d107      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006470:	f107 0314 	add.w	r3, r7, #20
 8006474:	4618      	mov	r0, r3
 8006476:	f7fe fdfd 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	637b      	str	r3, [r7, #52]	; 0x34
 800647e:	e047      	b.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8006480:	4b61      	ldr	r3, [pc, #388]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800648c:	d10b      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006494:	d107      	bne.n	80064a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006496:	f107 0308 	add.w	r3, r7, #8
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe ff54 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	637b      	str	r3, [r7, #52]	; 0x34
 80064a4:	e034      	b.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80064a6:	4b58      	ldr	r3, [pc, #352]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d10d      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064b8:	d109      	bne.n	80064ce <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064ba:	4b53      	ldr	r3, [pc, #332]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	08db      	lsrs	r3, r3, #3
 80064c0:	f003 0303 	and.w	r3, r3, #3
 80064c4:	4a51      	ldr	r2, [pc, #324]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80064c6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ca:	637b      	str	r3, [r7, #52]	; 0x34
 80064cc:	e020      	b.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80064ce:	4b4e      	ldr	r3, [pc, #312]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064da:	d106      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064e2:	d102      	bne.n	80064ea <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80064e4:	4b4a      	ldr	r3, [pc, #296]	; (8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80064e6:	637b      	str	r3, [r7, #52]	; 0x34
 80064e8:	e012      	b.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80064ea:	4b47      	ldr	r3, [pc, #284]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80064ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d107      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80064fe:	d103      	bne.n	8006508 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8006500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006504:	637b      	str	r3, [r7, #52]	; 0x34
 8006506:	e003      	b.n	8006510 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800650c:	f001 bbd1 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006510:	f001 bbcf 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8006514:	4b3c      	ldr	r3, [pc, #240]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006516:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800651a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800651e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	2b00      	cmp	r3, #0
 8006524:	d104      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006526:	f7fc fc6f 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 800652a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800652c:	f001 bbc1 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8006530:	4b35      	ldr	r3, [pc, #212]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800653c:	d10b      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006544:	d107      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006546:	f107 0314 	add.w	r3, r7, #20
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe fd92 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	637b      	str	r3, [r7, #52]	; 0x34
 8006554:	e047      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8006556:	4b2c      	ldr	r3, [pc, #176]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800655e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006562:	d10b      	bne.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800656a:	d107      	bne.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800656c:	f107 0308 	add.w	r3, r7, #8
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe fee9 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	637b      	str	r3, [r7, #52]	; 0x34
 800657a:	e034      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800657c:	4b22      	ldr	r3, [pc, #136]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b02      	cmp	r3, #2
 8006586:	d10d      	bne.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800658e:	d109      	bne.n	80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006590:	4b1d      	ldr	r3, [pc, #116]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	08db      	lsrs	r3, r3, #3
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	4a1c      	ldr	r2, [pc, #112]	; (800660c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800659c:	fa22 f303 	lsr.w	r3, r2, r3
 80065a0:	637b      	str	r3, [r7, #52]	; 0x34
 80065a2:	e020      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80065a4:	4b18      	ldr	r3, [pc, #96]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065b0:	d106      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065b8:	d102      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80065ba:	4b15      	ldr	r3, [pc, #84]	; (8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
 80065be:	e012      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80065c0:	4b11      	ldr	r3, [pc, #68]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065c6:	f003 0302 	and.w	r3, r3, #2
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d107      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80065d4:	d103      	bne.n	80065de <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80065d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065da:	637b      	str	r3, [r7, #52]	; 0x34
 80065dc:	e003      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065e2:	f001 bb66 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80065e6:	f001 bb64 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80065ea:	4b07      	ldr	r3, [pc, #28]	; (8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80065f0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80065f4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10b      	bne.n	8006614 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065fc:	f7fc fc04 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8006600:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8006602:	f001 bb56 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006606:	bf00      	nop
 8006608:	44020c00 	.word	0x44020c00
 800660c:	03d09000 	.word	0x03d09000
 8006610:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8006614:	4ba1      	ldr	r3, [pc, #644]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800661c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006620:	d10b      	bne.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006628:	d107      	bne.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800662a:	f107 0314 	add.w	r3, r7, #20
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe fd20 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	637b      	str	r3, [r7, #52]	; 0x34
 8006638:	e047      	b.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800663a:	4b98      	ldr	r3, [pc, #608]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006646:	d10b      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800664e:	d107      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006650:	f107 0308 	add.w	r3, r7, #8
 8006654:	4618      	mov	r0, r3
 8006656:	f7fe fe77 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
 800665e:	e034      	b.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8006660:	4b8e      	ldr	r3, [pc, #568]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b02      	cmp	r3, #2
 800666a:	d10d      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800666c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006672:	d109      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006674:	4b89      	ldr	r3, [pc, #548]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	08db      	lsrs	r3, r3, #3
 800667a:	f003 0303 	and.w	r3, r3, #3
 800667e:	4a88      	ldr	r2, [pc, #544]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006680:	fa22 f303 	lsr.w	r3, r2, r3
 8006684:	637b      	str	r3, [r7, #52]	; 0x34
 8006686:	e020      	b.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8006688:	4b84      	ldr	r3, [pc, #528]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006694:	d106      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800669c:	d102      	bne.n	80066a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800669e:	4b81      	ldr	r3, [pc, #516]	; (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80066a0:	637b      	str	r3, [r7, #52]	; 0x34
 80066a2:	e012      	b.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80066a4:	4b7d      	ldr	r3, [pc, #500]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80066a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d107      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80066b8:	d103      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80066ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066be:	637b      	str	r3, [r7, #52]	; 0x34
 80066c0:	e003      	b.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066c6:	f001 baf4 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066ca:	f001 baf2 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80066ce:	4b73      	ldr	r3, [pc, #460]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80066d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80066d4:	f003 0307 	and.w	r3, r3, #7
 80066d8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d104      	bne.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066e0:	f7fc fb92 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 80066e4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80066e6:	f001 bae4 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80066ea:	4b6c      	ldr	r3, [pc, #432]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066f6:	d10a      	bne.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d107      	bne.n	800670e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066fe:	f107 0314 	add.w	r3, r7, #20
 8006702:	4618      	mov	r0, r3
 8006704:	f7fe fcb6 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	637b      	str	r3, [r7, #52]	; 0x34
 800670c:	e043      	b.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800670e:	4b63      	ldr	r3, [pc, #396]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800671a:	d10a      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800671c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671e:	2b02      	cmp	r3, #2
 8006720:	d107      	bne.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006722:	f107 0308 	add.w	r3, r7, #8
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe fe0e 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	637b      	str	r3, [r7, #52]	; 0x34
 8006730:	e031      	b.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006732:	4b5a      	ldr	r3, [pc, #360]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b02      	cmp	r3, #2
 800673c:	d10c      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	2b03      	cmp	r3, #3
 8006742:	d109      	bne.n	8006758 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006744:	4b55      	ldr	r3, [pc, #340]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	08db      	lsrs	r3, r3, #3
 800674a:	f003 0303 	and.w	r3, r3, #3
 800674e:	4a54      	ldr	r2, [pc, #336]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
 8006754:	637b      	str	r3, [r7, #52]	; 0x34
 8006756:	e01e      	b.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006758:	4b50      	ldr	r3, [pc, #320]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006764:	d105      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	2b04      	cmp	r3, #4
 800676a:	d102      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800676c:	4b4d      	ldr	r3, [pc, #308]	; (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800676e:	637b      	str	r3, [r7, #52]	; 0x34
 8006770:	e011      	b.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8006772:	4b4a      	ldr	r3, [pc, #296]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b02      	cmp	r3, #2
 800677e:	d106      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	2b05      	cmp	r3, #5
 8006784:	d103      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8006786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800678a:	637b      	str	r3, [r7, #52]	; 0x34
 800678c:	e003      	b.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006792:	f001 ba8e 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006796:	f001 ba8c 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800679a:	4b40      	ldr	r3, [pc, #256]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800679c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80067a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067a4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d104      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80067ac:	f7fc fb2c 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 80067b0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80067b2:	f001 ba7e 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80067b6:	4b39      	ldr	r3, [pc, #228]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067c2:	d10a      	bne.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	2b10      	cmp	r3, #16
 80067c8:	d107      	bne.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ca:	f107 0314 	add.w	r3, r7, #20
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe fc50 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	637b      	str	r3, [r7, #52]	; 0x34
 80067d8:	e043      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80067da:	4b30      	ldr	r3, [pc, #192]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067e6:	d10a      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	2b20      	cmp	r3, #32
 80067ec:	d107      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ee:	f107 0308 	add.w	r3, r7, #8
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe fda8 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	637b      	str	r3, [r7, #52]	; 0x34
 80067fc:	e031      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80067fe:	4b27      	ldr	r3, [pc, #156]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b02      	cmp	r3, #2
 8006808:	d10c      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	2b30      	cmp	r3, #48	; 0x30
 800680e:	d109      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006810:	4b22      	ldr	r3, [pc, #136]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	08db      	lsrs	r3, r3, #3
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	4a21      	ldr	r2, [pc, #132]	; (80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800681c:	fa22 f303 	lsr.w	r3, r2, r3
 8006820:	637b      	str	r3, [r7, #52]	; 0x34
 8006822:	e01e      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006824:	4b1d      	ldr	r3, [pc, #116]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800682c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006830:	d105      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	2b40      	cmp	r3, #64	; 0x40
 8006836:	d102      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006838:	4b1a      	ldr	r3, [pc, #104]	; (80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800683a:	637b      	str	r3, [r7, #52]	; 0x34
 800683c:	e011      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800683e:	4b17      	ldr	r3, [pc, #92]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006840:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b02      	cmp	r3, #2
 800684a:	d106      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	2b50      	cmp	r3, #80	; 0x50
 8006850:	d103      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8006852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006856:	637b      	str	r3, [r7, #52]	; 0x34
 8006858:	e003      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800685a:	2300      	movs	r3, #0
 800685c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800685e:	f001 ba28 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006862:	f001 ba26 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006866:	4b0d      	ldr	r3, [pc, #52]	; (800689c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800686c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006870:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006878:	f7fc faf2 	bl	8002e60 <HAL_RCC_GetPCLK3Freq>
 800687c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800687e:	f001 ba18 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006888:	d10e      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800688a:	f107 0314 	add.w	r3, r7, #20
 800688e:	4618      	mov	r0, r3
 8006890:	f7fe fbf0 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006898:	f001 ba0b 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800689c:	44020c00 	.word	0x44020c00
 80068a0:	03d09000 	.word	0x03d09000
 80068a4:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ae:	d108      	bne.n	80068c2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068b0:	f107 0308 	add.w	r3, r7, #8
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7fe fd47 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068be:	f001 b9f8 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80068c2:	4ba4      	ldr	r3, [pc, #656]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0302 	and.w	r3, r3, #2
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d10d      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068d4:	d109      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068d6:	4b9f      	ldr	r3, [pc, #636]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	08db      	lsrs	r3, r3, #3
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	4a9d      	ldr	r2, [pc, #628]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80068e2:	fa22 f303 	lsr.w	r3, r2, r3
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34
 80068e8:	e020      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80068ea:	4b9a      	ldr	r3, [pc, #616]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068f6:	d106      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068fe:	d102      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8006900:	4b96      	ldr	r3, [pc, #600]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006902:	637b      	str	r3, [r7, #52]	; 0x34
 8006904:	e012      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006906:	4b93      	ldr	r3, [pc, #588]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006908:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b02      	cmp	r3, #2
 8006912:	d107      	bne.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800691a:	d103      	bne.n	8006924 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800691c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006920:	637b      	str	r3, [r7, #52]	; 0x34
 8006922:	e003      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006928:	f001 b9c3 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800692c:	f001 b9c1 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006930:	4b88      	ldr	r3, [pc, #544]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006932:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006936:	f003 0307 	and.w	r3, r3, #7
 800693a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	2b00      	cmp	r3, #0
 8006940:	d104      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006942:	f7fc fa45 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8006946:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006948:	f001 b9b3 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	2b01      	cmp	r3, #1
 8006950:	d104      	bne.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006952:	f7fc f911 	bl	8002b78 <HAL_RCC_GetSysClockFreq>
 8006956:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006958:	f001 b9ab 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	2b02      	cmp	r3, #2
 8006960:	d108      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006962:	f107 0314 	add.w	r3, r7, #20
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fb84 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006970:	f001 b99f 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006974:	4b77      	ldr	r3, [pc, #476]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006980:	d105      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006984:	2b03      	cmp	r3, #3
 8006986:	d102      	bne.n	800698e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006988:	4b75      	ldr	r3, [pc, #468]	; (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800698a:	637b      	str	r3, [r7, #52]	; 0x34
 800698c:	e023      	b.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800698e:	4b71      	ldr	r3, [pc, #452]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b02      	cmp	r3, #2
 8006998:	d10c      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	2b04      	cmp	r3, #4
 800699e:	d109      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069a0:	4b6c      	ldr	r3, [pc, #432]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	08db      	lsrs	r3, r3, #3
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	4a6b      	ldr	r2, [pc, #428]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
 80069b0:	637b      	str	r3, [r7, #52]	; 0x34
 80069b2:	e010      	b.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80069b4:	4b67      	ldr	r3, [pc, #412]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069c0:	d105      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	2b05      	cmp	r3, #5
 80069c6:	d102      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 80069c8:	4b64      	ldr	r3, [pc, #400]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80069ca:	637b      	str	r3, [r7, #52]	; 0x34
 80069cc:	e003      	b.n	80069d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069d2:	f001 b96e 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069d6:	f001 b96c 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80069da:	4b5e      	ldr	r3, [pc, #376]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80069dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80069e6:	4b5b      	ldr	r3, [pc, #364]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80069e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d106      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d103      	bne.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80069fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006a00:	e012      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006a02:	4b54      	ldr	r3, [pc, #336]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a10:	d106      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d103      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8006a18:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1e:	e003      	b.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006a24:	f001 b945 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a28:	f001 b943 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006a2c:	4b49      	ldr	r3, [pc, #292]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a36:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d104      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a3e:	f7fc f9e3 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8006a42:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a44:	f001 b935 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a4e:	d108      	bne.n	8006a62 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a50:	f107 0308 	add.w	r3, r7, #8
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7fe fc77 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a5e:	f001 b928 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006a62:	4b3c      	ldr	r3, [pc, #240]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d10d      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a74:	d109      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a76:	4b37      	ldr	r3, [pc, #220]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	08db      	lsrs	r3, r3, #3
 8006a7c:	f003 0303 	and.w	r3, r3, #3
 8006a80:	4a35      	ldr	r2, [pc, #212]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006a82:	fa22 f303 	lsr.w	r3, r2, r3
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
 8006a88:	e011      	b.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006a8a:	4b32      	ldr	r3, [pc, #200]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a96:	d106      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a9e:	d102      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006aa0:	4b2e      	ldr	r3, [pc, #184]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa4:	e003      	b.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006aaa:	f001 b902 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006aae:	f001 b900 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006ab2:	4b28      	ldr	r3, [pc, #160]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ab4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ab8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006abc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d104      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006ac4:	f7fc f9a0 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8006ac8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006aca:	f001 b8f2 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ad4:	d108      	bne.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ad6:	f107 0308 	add.w	r3, r7, #8
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fe fc34 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ae4:	f001 b8e5 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006ae8:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d10d      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006afa:	d109      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006afc:	4b15      	ldr	r3, [pc, #84]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	08db      	lsrs	r3, r3, #3
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	4a14      	ldr	r2, [pc, #80]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006b08:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b0e:	e011      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006b10:	4b10      	ldr	r3, [pc, #64]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b1c:	d106      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006b24:	d102      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8006b26:	4b0d      	ldr	r3, [pc, #52]	; (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2a:	e003      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b30:	f001 b8bf 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b34:	f001 b8bd 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006b38:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b3e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006b42:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10c      	bne.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006b4a:	f7fc f989 	bl	8002e60 <HAL_RCC_GetPCLK3Freq>
 8006b4e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b50:	f001 b8af 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b54:	44020c00 	.word	0x44020c00
 8006b58:	03d09000 	.word	0x03d09000
 8006b5c:	003d0900 	.word	0x003d0900
 8006b60:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b6a:	d108      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b6c:	f107 0308 	add.w	r3, r7, #8
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fe fbe9 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b7a:	f001 b89a 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006b7e:	4b9f      	ldr	r3, [pc, #636]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d10d      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b90:	d109      	bne.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b92:	4b9a      	ldr	r3, [pc, #616]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	08db      	lsrs	r3, r3, #3
 8006b98:	f003 0303 	and.w	r3, r3, #3
 8006b9c:	4a98      	ldr	r2, [pc, #608]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba4:	e011      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006ba6:	4b95      	ldr	r3, [pc, #596]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bb2:	d106      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bba:	d102      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006bbc:	4b91      	ldr	r3, [pc, #580]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc0:	e003      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bc6:	f001 b874 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006bca:	f001 b872 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006bce:	4b8b      	ldr	r3, [pc, #556]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006bd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bd4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006bd8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006be0:	f7fc f93e 	bl	8002e60 <HAL_RCC_GetPCLK3Freq>
 8006be4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006be6:	f001 b864 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bf0:	d108      	bne.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bf2:	f107 0308 	add.w	r3, r7, #8
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe fba6 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c00:	f001 b857 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006c04:	4b7d      	ldr	r3, [pc, #500]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d10d      	bne.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c16:	d109      	bne.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c18:	4b78      	ldr	r3, [pc, #480]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	08db      	lsrs	r3, r3, #3
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	4a77      	ldr	r2, [pc, #476]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006c24:	fa22 f303 	lsr.w	r3, r2, r3
 8006c28:	637b      	str	r3, [r7, #52]	; 0x34
 8006c2a:	e011      	b.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006c2c:	4b73      	ldr	r3, [pc, #460]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c38:	d106      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c40:	d102      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006c42:	4b70      	ldr	r3, [pc, #448]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006c44:	637b      	str	r3, [r7, #52]	; 0x34
 8006c46:	e003      	b.n	8006c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c4c:	f001 b831 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c50:	f001 b82f 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006c54:	4b69      	ldr	r3, [pc, #420]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006c56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c5a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006c5e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d104      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c66:	f7fc f8cf 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8006c6a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c6c:	f001 b821 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c76:	d108      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c78:	f107 0308 	add.w	r3, r7, #8
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe fb63 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c86:	f001 b814 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006c8a:	4b5c      	ldr	r3, [pc, #368]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d10e      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c9c:	d10a      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c9e:	4b57      	ldr	r3, [pc, #348]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	08db      	lsrs	r3, r3, #3
 8006ca4:	f003 0303 	and.w	r3, r3, #3
 8006ca8:	4a55      	ldr	r2, [pc, #340]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006caa:	fa22 f303 	lsr.w	r3, r2, r3
 8006cae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cb0:	f000 bfff 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cb8:	f000 bffb 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006cbc:	4b4f      	ldr	r3, [pc, #316]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006cbe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006cc2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006cce:	d056      	beq.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006cd6:	f200 808b 	bhi.w	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce0:	d03e      	beq.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce8:	f200 8082 	bhi.w	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cf2:	d027      	beq.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cfa:	d879      	bhi.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d02:	d017      	beq.n	8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d0a:	d871      	bhi.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d004      	beq.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d18:	d004      	beq.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8006d1a:	e069      	b.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006d1c:	f7fc f8a0 	bl	8002e60 <HAL_RCC_GetPCLK3Freq>
 8006d20:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006d22:	e068      	b.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d24:	f107 0314 	add.w	r3, r7, #20
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f7fe f9a3 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d32:	e060      	b.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d34:	f107 0308 	add.w	r3, r7, #8
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe fb05 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d42:	e058      	b.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d44:	4b2d      	ldr	r3, [pc, #180]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d103      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8006d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d56:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006d58:	e04d      	b.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d5e:	e04a      	b.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006d60:	4b26      	ldr	r3, [pc, #152]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d6e:	d103      	bne.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8006d70:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006d74:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006d76:	e03e      	b.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d7c:	e03b      	b.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d7e:	4b1f      	ldr	r3, [pc, #124]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d84:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d8a:	4b1c      	ldr	r3, [pc, #112]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d10c      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8006d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d109      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d9c:	4b17      	ldr	r3, [pc, #92]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	08db      	lsrs	r3, r3, #3
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	4a16      	ldr	r2, [pc, #88]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006da8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
 8006dae:	e01e      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006db0:	4b12      	ldr	r3, [pc, #72]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dbc:	d106      	bne.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc4:	d102      	bne.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006dc6:	4b0f      	ldr	r3, [pc, #60]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dca:	e010      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dd8:	d106      	bne.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8006dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006de0:	d102      	bne.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006de2:	4b09      	ldr	r3, [pc, #36]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8006de4:	637b      	str	r3, [r7, #52]	; 0x34
 8006de6:	e002      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006de8:	2300      	movs	r3, #0
 8006dea:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006dec:	e003      	b.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8006dee:	e002      	b.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006df4:	bf00      	nop
          }
        }
        break;
 8006df6:	f000 bf5c 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006dfa:	bf00      	nop
 8006dfc:	44020c00 	.word	0x44020c00
 8006e00:	03d09000 	.word	0x03d09000
 8006e04:	003d0900 	.word	0x003d0900
 8006e08:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006e0c:	4b9e      	ldr	r3, [pc, #632]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006e12:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006e16:	633b      	str	r3, [r7, #48]	; 0x30
 8006e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006e1e:	d056      	beq.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006e26:	f200 808b 	bhi.w	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e30:	d03e      	beq.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e38:	f200 8082 	bhi.w	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e42:	d027      	beq.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e4a:	d879      	bhi.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e52:	d017      	beq.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e5a:	d871      	bhi.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d004      	beq.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e68:	d004      	beq.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8006e6a:	e069      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006e6c:	f7fb ffcc 	bl	8002e08 <HAL_RCC_GetPCLK1Freq>
 8006e70:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006e72:	e068      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e74:	f107 0314 	add.w	r3, r7, #20
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fe f8fb 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e82:	e060      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e84:	f107 0308 	add.w	r3, r7, #8
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fe fa5d 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e92:	e058      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e94:	4b7c      	ldr	r3, [pc, #496]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d103      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8006ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ea6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006ea8:	e04d      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006eae:	e04a      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006eb0:	4b75      	ldr	r3, [pc, #468]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006eb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ebe:	d103      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8006ec0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ec4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006ec6:	e03e      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ecc:	e03b      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006ece:	4b6e      	ldr	r3, [pc, #440]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ed4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006ed8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006eda:	4b6b      	ldr	r3, [pc, #428]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d10c      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8006ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d109      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006eec:	4b66      	ldr	r3, [pc, #408]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	08db      	lsrs	r3, r3, #3
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	4a65      	ldr	r2, [pc, #404]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
 8006efe:	e01e      	b.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f00:	4b61      	ldr	r3, [pc, #388]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f0c:	d106      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f14:	d102      	bne.n	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006f16:	4b5e      	ldr	r3, [pc, #376]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1a:	e010      	b.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f1c:	4b5a      	ldr	r3, [pc, #360]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f28:	d106      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8006f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f30:	d102      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006f32:	4b58      	ldr	r3, [pc, #352]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006f34:	637b      	str	r3, [r7, #52]	; 0x34
 8006f36:	e002      	b.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006f3c:	e003      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8006f3e:	e002      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f44:	bf00      	nop
          }
        }
        break;
 8006f46:	f000 beb4 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8006f4a:	4b4f      	ldr	r3, [pc, #316]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006f4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006f50:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006f54:	633b      	str	r3, [r7, #48]	; 0x30
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f5c:	d056      	beq.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f64:	f200 808b 	bhi.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f6e:	d03e      	beq.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f76:	f200 8082 	bhi.w	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f80:	d027      	beq.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f88:	d879      	bhi.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f90:	d017      	beq.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f98:	d871      	bhi.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d004      	beq.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa6:	d004      	beq.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8006fa8:	e069      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006faa:	f7fb ff59 	bl	8002e60 <HAL_RCC_GetPCLK3Freq>
 8006fae:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006fb0:	e068      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fb2:	f107 0314 	add.w	r3, r7, #20
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fe f85c 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fc0:	e060      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fc2:	f107 0308 	add.w	r3, r7, #8
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe f9be 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fd0:	e058      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006fd2:	4b2d      	ldr	r3, [pc, #180]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d103      	bne.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8006fe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fe4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006fe6:	e04d      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fec:	e04a      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006fee:	4b26      	ldr	r3, [pc, #152]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ffc:	d103      	bne.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8006ffe:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007002:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007004:	e03e      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800700a:	e03b      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800700c:	4b1e      	ldr	r3, [pc, #120]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800700e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007012:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007018:	4b1b      	ldr	r3, [pc, #108]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b02      	cmp	r3, #2
 8007022:	d10c      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8007024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007026:	2b00      	cmp	r3, #0
 8007028:	d109      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800702a:	4b17      	ldr	r3, [pc, #92]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	08db      	lsrs	r3, r3, #3
 8007030:	f003 0303 	and.w	r3, r3, #3
 8007034:	4a15      	ldr	r2, [pc, #84]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007036:	fa22 f303 	lsr.w	r3, r2, r3
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
 800703c:	e01e      	b.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800703e:	4b12      	ldr	r3, [pc, #72]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800704a:	d106      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800704c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800704e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007052:	d102      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007054:	4b0e      	ldr	r3, [pc, #56]	; (8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007056:	637b      	str	r3, [r7, #52]	; 0x34
 8007058:	e010      	b.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800705a:	4b0b      	ldr	r3, [pc, #44]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007062:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007066:	d106      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8007068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800706e:	d102      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007070:	4b08      	ldr	r3, [pc, #32]	; (8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007072:	637b      	str	r3, [r7, #52]	; 0x34
 8007074:	e002      	b.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800707a:	e003      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800707c:	e002      	b.n	8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007082:	bf00      	nop
          }
        }
        break;
 8007084:	f000 be15 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007088:	44020c00 	.word	0x44020c00
 800708c:	03d09000 	.word	0x03d09000
 8007090:	003d0900 	.word	0x003d0900
 8007094:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007098:	4b9e      	ldr	r3, [pc, #632]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800709a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800709e:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 80070a2:	633b      	str	r3, [r7, #48]	; 0x30
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80070aa:	d056      	beq.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80070b2:	f200 808b 	bhi.w	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80070b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070bc:	d03e      	beq.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070c4:	f200 8082 	bhi.w	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070ce:	d027      	beq.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070d6:	d879      	bhi.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80070d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070de:	d017      	beq.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070e6:	d871      	bhi.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d004      	beq.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070f4:	d004      	beq.n	8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80070f6:	e069      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80070f8:	f7fb feb2 	bl	8002e60 <HAL_RCC_GetPCLK3Freq>
 80070fc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80070fe:	e068      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007100:	f107 0314 	add.w	r3, r7, #20
 8007104:	4618      	mov	r0, r3
 8007106:	f7fd ffb5 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800710e:	e060      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007110:	f107 0308 	add.w	r3, r7, #8
 8007114:	4618      	mov	r0, r3
 8007116:	f7fe f917 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800711e:	e058      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007120:	4b7c      	ldr	r3, [pc, #496]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007122:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b02      	cmp	r3, #2
 800712c:	d103      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800712e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007132:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007134:	e04d      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800713a:	e04a      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800713c:	4b75      	ldr	r3, [pc, #468]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800713e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800714a:	d103      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800714c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007150:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007152:	e03e      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007154:	2300      	movs	r3, #0
 8007156:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007158:	e03b      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800715a:	4b6e      	ldr	r3, [pc, #440]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800715c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007160:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007164:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007166:	4b6b      	ldr	r3, [pc, #428]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b02      	cmp	r3, #2
 8007170:	d10c      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d109      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007178:	4b66      	ldr	r3, [pc, #408]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	08db      	lsrs	r3, r3, #3
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	4a65      	ldr	r2, [pc, #404]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
 800718a:	e01e      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800718c:	4b61      	ldr	r3, [pc, #388]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007194:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007198:	d106      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a0:	d102      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80071a2:	4b5e      	ldr	r3, [pc, #376]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80071a4:	637b      	str	r3, [r7, #52]	; 0x34
 80071a6:	e010      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071a8:	4b5a      	ldr	r3, [pc, #360]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071b4:	d106      	bne.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071bc:	d102      	bne.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80071be:	4b58      	ldr	r3, [pc, #352]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80071c0:	637b      	str	r3, [r7, #52]	; 0x34
 80071c2:	e002      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80071c8:	e003      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80071ca:	e002      	b.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071d0:	bf00      	nop
          }
        }
        break;
 80071d2:	f000 bd6e 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80071d6:	4b4f      	ldr	r3, [pc, #316]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80071d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80071dc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80071e0:	633b      	str	r3, [r7, #48]	; 0x30
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80071e8:	d056      	beq.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80071f0:	f200 808b 	bhi.w	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071fa:	d03e      	beq.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80071fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007202:	f200 8082 	bhi.w	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800720c:	d027      	beq.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007214:	d879      	bhi.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800721c:	d017      	beq.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007224:	d871      	bhi.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007228:	2b00      	cmp	r3, #0
 800722a:	d004      	beq.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007232:	d004      	beq.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8007234:	e069      	b.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007236:	f7fb fe13 	bl	8002e60 <HAL_RCC_GetPCLK3Freq>
 800723a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800723c:	e068      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800723e:	f107 0314 	add.w	r3, r7, #20
 8007242:	4618      	mov	r0, r3
 8007244:	f7fd ff16 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800724c:	e060      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800724e:	f107 0308 	add.w	r3, r7, #8
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe f878 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800725c:	e058      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800725e:	4b2d      	ldr	r3, [pc, #180]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b02      	cmp	r3, #2
 800726a:	d103      	bne.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800726c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007270:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007272:	e04d      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007278:	e04a      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800727a:	4b26      	ldr	r3, [pc, #152]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800727c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007288:	d103      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800728a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800728e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007290:	e03e      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007296:	e03b      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007298:	4b1e      	ldr	r3, [pc, #120]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800729a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800729e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80072a2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072a4:	4b1b      	ldr	r3, [pc, #108]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d10c      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80072b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d109      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072b6:	4b17      	ldr	r3, [pc, #92]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	08db      	lsrs	r3, r3, #3
 80072bc:	f003 0303 	and.w	r3, r3, #3
 80072c0:	4a15      	ldr	r2, [pc, #84]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80072c2:	fa22 f303 	lsr.w	r3, r2, r3
 80072c6:	637b      	str	r3, [r7, #52]	; 0x34
 80072c8:	e01e      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072ca:	4b12      	ldr	r3, [pc, #72]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d6:	d106      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80072d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072de:	d102      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80072e0:	4b0e      	ldr	r3, [pc, #56]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80072e2:	637b      	str	r3, [r7, #52]	; 0x34
 80072e4:	e010      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072e6:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072f2:	d106      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072fa:	d102      	bne.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072fc:	4b08      	ldr	r3, [pc, #32]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007300:	e002      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007306:	e003      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8007308:	e002      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800730e:	bf00      	nop
          }
        }
        break;
 8007310:	f000 bccf 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007314:	44020c00 	.word	0x44020c00
 8007318:	03d09000 	.word	0x03d09000
 800731c:	003d0900 	.word	0x003d0900
 8007320:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007324:	4b9e      	ldr	r3, [pc, #632]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007326:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800732a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800732e:	633b      	str	r3, [r7, #48]	; 0x30
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007336:	d056      	beq.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800733e:	f200 808b 	bhi.w	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007348:	d03e      	beq.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800734a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007350:	f200 8082 	bhi.w	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800735a:	d027      	beq.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007362:	d879      	bhi.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800736a:	d017      	beq.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007372:	d871      	bhi.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	2b00      	cmp	r3, #0
 8007378:	d004      	beq.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007380:	d004      	beq.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8007382:	e069      	b.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007384:	f7fb fd6c 	bl	8002e60 <HAL_RCC_GetPCLK3Freq>
 8007388:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800738a:	e068      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800738c:	f107 0314 	add.w	r3, r7, #20
 8007390:	4618      	mov	r0, r3
 8007392:	f7fd fe6f 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800739a:	e060      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800739c:	f107 0308 	add.w	r3, r7, #8
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fd ffd1 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073aa:	e058      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80073ac:	4b7c      	ldr	r3, [pc, #496]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80073ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073b2:	f003 0302 	and.w	r3, r3, #2
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d103      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80073ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073be:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80073c0:	e04d      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073c6:	e04a      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80073c8:	4b75      	ldr	r3, [pc, #468]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80073ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073d6:	d103      	bne.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80073d8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80073dc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80073de:	e03e      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073e4:	e03b      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073e6:	4b6e      	ldr	r3, [pc, #440]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80073e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80073ec:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80073f0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073f2:	4b6b      	ldr	r3, [pc, #428]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d10c      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	2b00      	cmp	r3, #0
 8007402:	d109      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007404:	4b66      	ldr	r3, [pc, #408]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	08db      	lsrs	r3, r3, #3
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	4a65      	ldr	r2, [pc, #404]	; (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8007410:	fa22 f303 	lsr.w	r3, r2, r3
 8007414:	637b      	str	r3, [r7, #52]	; 0x34
 8007416:	e01e      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007418:	4b61      	ldr	r3, [pc, #388]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007424:	d106      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800742c:	d102      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800742e:	4b5e      	ldr	r3, [pc, #376]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007430:	637b      	str	r3, [r7, #52]	; 0x34
 8007432:	e010      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007434:	4b5a      	ldr	r3, [pc, #360]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800743c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007440:	d106      	bne.n	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007448:	d102      	bne.n	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800744a:	4b58      	ldr	r3, [pc, #352]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800744c:	637b      	str	r3, [r7, #52]	; 0x34
 800744e:	e002      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007454:	e003      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8007456:	e002      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800745c:	bf00      	nop
          }
        }
        break;
 800745e:	f000 bc28 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007462:	4b4f      	ldr	r3, [pc, #316]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800746c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800746e:	4b4c      	ldr	r3, [pc, #304]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800747a:	d106      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747e:	2b00      	cmp	r3, #0
 8007480:	d103      	bne.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8007482:	4b4a      	ldr	r3, [pc, #296]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007484:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007486:	f000 bc14 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007490:	d108      	bne.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007492:	f107 0320 	add.w	r3, r7, #32
 8007496:	4618      	mov	r0, r3
 8007498:	f7fd fc82 	bl	8004da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074a0:	f000 bc07 	b.w	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074aa:	d107      	bne.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ac:	f107 0314 	add.w	r3, r7, #20
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fd fddf 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074ba:	e3fa      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074c0:	e3f7      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80074c2:	4b37      	ldr	r3, [pc, #220]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80074c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074c8:	f003 0307 	and.w	r3, r3, #7
 80074cc:	633b      	str	r3, [r7, #48]	; 0x30
 80074ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	d861      	bhi.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80074d4:	a201      	add	r2, pc, #4	; (adr r2, 80074dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80074d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074da:	bf00      	nop
 80074dc:	080074f1 	.word	0x080074f1
 80074e0:	08007501 	.word	0x08007501
 80074e4:	08007511 	.word	0x08007511
 80074e8:	08007521 	.word	0x08007521
 80074ec:	08007527 	.word	0x08007527
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074f0:	f107 0320 	add.w	r3, r7, #32
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fd fc53 	bl	8004da0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074fe:	e04e      	b.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007500:	f107 0314 	add.w	r3, r7, #20
 8007504:	4618      	mov	r0, r3
 8007506:	f7fd fdb5 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800750e:	e046      	b.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007510:	f107 0308 	add.w	r3, r7, #8
 8007514:	4618      	mov	r0, r3
 8007516:	f7fd ff17 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800751e:	e03e      	b.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007520:	4b23      	ldr	r3, [pc, #140]	; (80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007524:	e03b      	b.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007526:	4b1e      	ldr	r3, [pc, #120]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007528:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800752c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007530:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007532:	4b1b      	ldr	r3, [pc, #108]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b02      	cmp	r3, #2
 800753c:	d10c      	bne.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800753e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007540:	2b00      	cmp	r3, #0
 8007542:	d109      	bne.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007544:	4b16      	ldr	r3, [pc, #88]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	08db      	lsrs	r3, r3, #3
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	4a15      	ldr	r2, [pc, #84]	; (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8007550:	fa22 f303 	lsr.w	r3, r2, r3
 8007554:	637b      	str	r3, [r7, #52]	; 0x34
 8007556:	e01e      	b.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007558:	4b11      	ldr	r3, [pc, #68]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007564:	d106      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800756c:	d102      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800756e:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007570:	637b      	str	r3, [r7, #52]	; 0x34
 8007572:	e010      	b.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007574:	4b0a      	ldr	r3, [pc, #40]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007580:	d106      	bne.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007588:	d102      	bne.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800758a:	4b08      	ldr	r3, [pc, #32]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800758c:	637b      	str	r3, [r7, #52]	; 0x34
 800758e:	e002      	b.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007594:	e003      	b.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8007596:	e002      	b.n	800759e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8007598:	2300      	movs	r3, #0
 800759a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800759c:	bf00      	nop
          }
        }
        break;
 800759e:	e388      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80075a0:	44020c00 	.word	0x44020c00
 80075a4:	03d09000 	.word	0x03d09000
 80075a8:	003d0900 	.word	0x003d0900
 80075ac:	017d7840 	.word	0x017d7840
 80075b0:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80075b4:	4ba9      	ldr	r3, [pc, #676]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80075b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075be:	633b      	str	r3, [r7, #48]	; 0x30
 80075c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c2:	2b20      	cmp	r3, #32
 80075c4:	f200 809a 	bhi.w	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80075c8:	a201      	add	r2, pc, #4	; (adr r2, 80075d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80075ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ce:	bf00      	nop
 80075d0:	08007655 	.word	0x08007655
 80075d4:	080076fd 	.word	0x080076fd
 80075d8:	080076fd 	.word	0x080076fd
 80075dc:	080076fd 	.word	0x080076fd
 80075e0:	080076fd 	.word	0x080076fd
 80075e4:	080076fd 	.word	0x080076fd
 80075e8:	080076fd 	.word	0x080076fd
 80075ec:	080076fd 	.word	0x080076fd
 80075f0:	08007665 	.word	0x08007665
 80075f4:	080076fd 	.word	0x080076fd
 80075f8:	080076fd 	.word	0x080076fd
 80075fc:	080076fd 	.word	0x080076fd
 8007600:	080076fd 	.word	0x080076fd
 8007604:	080076fd 	.word	0x080076fd
 8007608:	080076fd 	.word	0x080076fd
 800760c:	080076fd 	.word	0x080076fd
 8007610:	08007675 	.word	0x08007675
 8007614:	080076fd 	.word	0x080076fd
 8007618:	080076fd 	.word	0x080076fd
 800761c:	080076fd 	.word	0x080076fd
 8007620:	080076fd 	.word	0x080076fd
 8007624:	080076fd 	.word	0x080076fd
 8007628:	080076fd 	.word	0x080076fd
 800762c:	080076fd 	.word	0x080076fd
 8007630:	08007685 	.word	0x08007685
 8007634:	080076fd 	.word	0x080076fd
 8007638:	080076fd 	.word	0x080076fd
 800763c:	080076fd 	.word	0x080076fd
 8007640:	080076fd 	.word	0x080076fd
 8007644:	080076fd 	.word	0x080076fd
 8007648:	080076fd 	.word	0x080076fd
 800764c:	080076fd 	.word	0x080076fd
 8007650:	0800768b 	.word	0x0800768b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007654:	f107 0320 	add.w	r3, r7, #32
 8007658:	4618      	mov	r0, r3
 800765a:	f7fd fba1 	bl	8004da0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007662:	e04e      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007664:	f107 0314 	add.w	r3, r7, #20
 8007668:	4618      	mov	r0, r3
 800766a:	f7fd fd03 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007672:	e046      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007674:	f107 0308 	add.w	r3, r7, #8
 8007678:	4618      	mov	r0, r3
 800767a:	f7fd fe65 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007682:	e03e      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007684:	4b76      	ldr	r3, [pc, #472]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007686:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007688:	e03b      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800768a:	4b74      	ldr	r3, [pc, #464]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800768c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007690:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007694:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007696:	4b71      	ldr	r3, [pc, #452]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d10c      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80076a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d109      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076a8:	4b6c      	ldr	r3, [pc, #432]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	08db      	lsrs	r3, r3, #3
 80076ae:	f003 0303 	and.w	r3, r3, #3
 80076b2:	4a6c      	ldr	r2, [pc, #432]	; (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80076b4:	fa22 f303 	lsr.w	r3, r2, r3
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ba:	e01e      	b.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076bc:	4b67      	ldr	r3, [pc, #412]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c8:	d106      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076d0:	d102      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80076d2:	4b65      	ldr	r3, [pc, #404]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80076d4:	637b      	str	r3, [r7, #52]	; 0x34
 80076d6:	e010      	b.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076d8:	4b60      	ldr	r3, [pc, #384]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076e4:	d106      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076ec:	d102      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80076ee:	4b5f      	ldr	r3, [pc, #380]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
 80076f2:	e002      	b.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80076f8:	e003      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80076fa:	e002      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007700:	bf00      	nop
          }
        }
        break;
 8007702:	e2d6      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007704:	4b55      	ldr	r3, [pc, #340]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800770a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800770e:	633b      	str	r3, [r7, #48]	; 0x30
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007716:	d031      	beq.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800771e:	d866      	bhi.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007722:	2bc0      	cmp	r3, #192	; 0xc0
 8007724:	d027      	beq.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	2bc0      	cmp	r3, #192	; 0xc0
 800772a:	d860      	bhi.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	2b80      	cmp	r3, #128	; 0x80
 8007730:	d019      	beq.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	2b80      	cmp	r3, #128	; 0x80
 8007736:	d85a      	bhi.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	2b40      	cmp	r3, #64	; 0x40
 8007742:	d008      	beq.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007744:	e053      	b.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007746:	f107 0320 	add.w	r3, r7, #32
 800774a:	4618      	mov	r0, r3
 800774c:	f7fd fb28 	bl	8004da0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007752:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007754:	e04e      	b.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007756:	f107 0314 	add.w	r3, r7, #20
 800775a:	4618      	mov	r0, r3
 800775c:	f7fd fc8a 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007764:	e046      	b.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007766:	f107 0308 	add.w	r3, r7, #8
 800776a:	4618      	mov	r0, r3
 800776c:	f7fd fdec 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007774:	e03e      	b.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007776:	4b3a      	ldr	r3, [pc, #232]	; (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007778:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800777a:	e03b      	b.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800777c:	4b37      	ldr	r3, [pc, #220]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800777e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007782:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007786:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007788:	4b34      	ldr	r3, [pc, #208]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0302 	and.w	r3, r3, #2
 8007790:	2b02      	cmp	r3, #2
 8007792:	d10c      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8007794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d109      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800779a:	4b30      	ldr	r3, [pc, #192]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	08db      	lsrs	r3, r3, #3
 80077a0:	f003 0303 	and.w	r3, r3, #3
 80077a4:	4a2f      	ldr	r2, [pc, #188]	; (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80077a6:	fa22 f303 	lsr.w	r3, r2, r3
 80077aa:	637b      	str	r3, [r7, #52]	; 0x34
 80077ac:	e01e      	b.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077ae:	4b2b      	ldr	r3, [pc, #172]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ba:	d106      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 80077bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c2:	d102      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80077c4:	4b28      	ldr	r3, [pc, #160]	; (8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80077c6:	637b      	str	r3, [r7, #52]	; 0x34
 80077c8:	e010      	b.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077ca:	4b24      	ldr	r3, [pc, #144]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077d6:	d106      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80077d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077de:	d102      	bne.n	80077e6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80077e0:	4b22      	ldr	r3, [pc, #136]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80077e2:	637b      	str	r3, [r7, #52]	; 0x34
 80077e4:	e002      	b.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80077ea:	e003      	b.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80077ec:	e002      	b.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077f2:	bf00      	nop
          }
        }
        break;
 80077f4:	e25d      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80077f6:	4b19      	ldr	r3, [pc, #100]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80077f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077fc:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007800:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007808:	f7fb fb14 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 800780c:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800780e:	e250      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007810:	4b12      	ldr	r3, [pc, #72]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800781c:	d10b      	bne.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007824:	d107      	bne.n	8007836 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007826:	f107 0314 	add.w	r3, r7, #20
 800782a:	4618      	mov	r0, r3
 800782c:	f7fd fc22 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	637b      	str	r3, [r7, #52]	; 0x34
 8007834:	e04f      	b.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007836:	4b09      	ldr	r3, [pc, #36]	; (800785c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800783e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007842:	d115      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800784a:	d111      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800784c:	f107 0308 	add.w	r3, r7, #8
 8007850:	4618      	mov	r0, r3
 8007852:	f7fd fd79 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	637b      	str	r3, [r7, #52]	; 0x34
 800785a:	e03c      	b.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800785c:	44020c00 	.word	0x44020c00
 8007860:	00bb8000 	.word	0x00bb8000
 8007864:	03d09000 	.word	0x03d09000
 8007868:	003d0900 	.word	0x003d0900
 800786c:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007870:	4b94      	ldr	r3, [pc, #592]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b02      	cmp	r3, #2
 800787a:	d10d      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007882:	d109      	bne.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007884:	4b8f      	ldr	r3, [pc, #572]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	08db      	lsrs	r3, r3, #3
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	4a8e      	ldr	r2, [pc, #568]	; (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007890:	fa22 f303 	lsr.w	r3, r2, r3
 8007894:	637b      	str	r3, [r7, #52]	; 0x34
 8007896:	e01e      	b.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007898:	4b8a      	ldr	r3, [pc, #552]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078a4:	d106      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 80078a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ac:	d102      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 80078ae:	4b87      	ldr	r3, [pc, #540]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80078b0:	637b      	str	r3, [r7, #52]	; 0x34
 80078b2:	e010      	b.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80078b4:	4b83      	ldr	r3, [pc, #524]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078c0:	d106      	bne.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80078c8:	d102      	bne.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 80078ca:	4b81      	ldr	r3, [pc, #516]	; (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80078cc:	637b      	str	r3, [r7, #52]	; 0x34
 80078ce:	e002      	b.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078d4:	e1ed      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80078d6:	e1ec      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80078d8:	4b7a      	ldr	r3, [pc, #488]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80078da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078de:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80078e2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d103      	bne.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80078ea:	f7fb fab9 	bl	8002e60 <HAL_RCC_GetPCLK3Freq>
 80078ee:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80078f0:	e1df      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80078f2:	4b74      	ldr	r3, [pc, #464]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078fe:	d10b      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8007900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007906:	d107      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007908:	f107 0314 	add.w	r3, r7, #20
 800790c:	4618      	mov	r0, r3
 800790e:	f7fd fbb1 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	637b      	str	r3, [r7, #52]	; 0x34
 8007916:	e045      	b.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007918:	4b6a      	ldr	r3, [pc, #424]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007924:	d10b      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800792c:	d107      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800792e:	f107 0308 	add.w	r3, r7, #8
 8007932:	4618      	mov	r0, r3
 8007934:	f7fd fd08 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	637b      	str	r3, [r7, #52]	; 0x34
 800793c:	e032      	b.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800793e:	4b61      	ldr	r3, [pc, #388]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b02      	cmp	r3, #2
 8007948:	d10d      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007950:	d109      	bne.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007952:	4b5c      	ldr	r3, [pc, #368]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	08db      	lsrs	r3, r3, #3
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	4a5a      	ldr	r2, [pc, #360]	; (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800795e:	fa22 f303 	lsr.w	r3, r2, r3
 8007962:	637b      	str	r3, [r7, #52]	; 0x34
 8007964:	e01e      	b.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007966:	4b57      	ldr	r3, [pc, #348]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800796e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007972:	d106      	bne.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800797a:	d102      	bne.n	8007982 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800797c:	4b53      	ldr	r3, [pc, #332]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800797e:	637b      	str	r3, [r7, #52]	; 0x34
 8007980:	e010      	b.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007982:	4b50      	ldr	r3, [pc, #320]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800798a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800798e:	d106      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007996:	d102      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007998:	4b4d      	ldr	r3, [pc, #308]	; (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800799a:	637b      	str	r3, [r7, #52]	; 0x34
 800799c:	e002      	b.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800799e:	2300      	movs	r3, #0
 80079a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079a2:	e186      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80079a4:	e185      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80079a6:	4b47      	ldr	r3, [pc, #284]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80079a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079ac:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80079b0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 80079b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d103      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80079b8:	f7fb fa3c 	bl	8002e34 <HAL_RCC_GetPCLK2Freq>
 80079bc:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80079be:	e178      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 80079c0:	4b40      	ldr	r3, [pc, #256]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079cc:	d10b      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079d4:	d107      	bne.n	80079e6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079d6:	f107 0314 	add.w	r3, r7, #20
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fd fb4a 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	637b      	str	r3, [r7, #52]	; 0x34
 80079e4:	e045      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80079e6:	4b37      	ldr	r3, [pc, #220]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f2:	d10b      	bne.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079fa:	d107      	bne.n	8007a0c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079fc:	f107 0308 	add.w	r3, r7, #8
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7fd fca1 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	637b      	str	r3, [r7, #52]	; 0x34
 8007a0a:	e032      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007a0c:	4b2d      	ldr	r3, [pc, #180]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d10d      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007a1e:	d109      	bne.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a20:	4b28      	ldr	r3, [pc, #160]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	08db      	lsrs	r3, r3, #3
 8007a26:	f003 0303 	and.w	r3, r3, #3
 8007a2a:	4a27      	ldr	r2, [pc, #156]	; (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a30:	637b      	str	r3, [r7, #52]	; 0x34
 8007a32:	e01e      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007a34:	4b23      	ldr	r3, [pc, #140]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a40:	d106      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a48:	d102      	bne.n	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8007a4a:	4b20      	ldr	r3, [pc, #128]	; (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4e:	e010      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007a50:	4b1c      	ldr	r3, [pc, #112]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a5c:	d106      	bne.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007a64:	d102      	bne.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8007a66:	4b1a      	ldr	r3, [pc, #104]	; (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007a68:	637b      	str	r3, [r7, #52]	; 0x34
 8007a6a:	e002      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a70:	e11f      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a72:	e11e      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007a74:	4b13      	ldr	r3, [pc, #76]	; (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a76:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d85f      	bhi.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007a9d 	.word	0x08007a9d
 8007a90:	08007aa5 	.word	0x08007aa5
 8007a94:	08007ab5 	.word	0x08007ab5
 8007a98:	08007ad5 	.word	0x08007ad5

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007a9c:	f7fb f998 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8007aa0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007aa2:	e053      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aa4:	f107 0320 	add.w	r3, r7, #32
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fd f979 	bl	8004da0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ab2:	e04b      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ab4:	f107 0314 	add.w	r3, r7, #20
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7fd fadb 	bl	8005074 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ac2:	e043      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007ac4:	44020c00 	.word	0x44020c00
 8007ac8:	03d09000 	.word	0x03d09000
 8007acc:	003d0900 	.word	0x003d0900
 8007ad0:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007ad4:	4b79      	ldr	r3, [pc, #484]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ad6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ada:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ae0:	4b76      	ldr	r3, [pc, #472]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0302 	and.w	r3, r3, #2
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d10c      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d109      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007af2:	4b72      	ldr	r3, [pc, #456]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	08db      	lsrs	r3, r3, #3
 8007af8:	f003 0303 	and.w	r3, r3, #3
 8007afc:	4a70      	ldr	r2, [pc, #448]	; (8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007afe:	fa22 f303 	lsr.w	r3, r2, r3
 8007b02:	637b      	str	r3, [r7, #52]	; 0x34
 8007b04:	e01e      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b06:	4b6d      	ldr	r3, [pc, #436]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b12:	d106      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b1a:	d102      	bne.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007b1c:	4b69      	ldr	r3, [pc, #420]	; (8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b20:	e010      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b22:	4b66      	ldr	r3, [pc, #408]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b2e:	d106      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b36:	d102      	bne.n	8007b3e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007b38:	4b63      	ldr	r3, [pc, #396]	; (8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8007b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b3c:	e002      	b.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007b42:	e003      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007b44:	e002      	b.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b4a:	bf00      	nop
          }
        }
        break;
 8007b4c:	e0b1      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007b4e:	4b5b      	ldr	r3, [pc, #364]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b58:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007b5a:	4b58      	ldr	r3, [pc, #352]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d106      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d103      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b72:	637b      	str	r3, [r7, #52]	; 0x34
 8007b74:	e01f      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007b76:	4b51      	ldr	r3, [pc, #324]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b84:	d106      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	2b40      	cmp	r3, #64	; 0x40
 8007b8a:	d103      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007b8c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
 8007b92:	e010      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007b94:	4b49      	ldr	r3, [pc, #292]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ba0:	d106      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	2b80      	cmp	r3, #128	; 0x80
 8007ba6:	d103      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007ba8:	f248 0312 	movw	r3, #32786	; 0x8012
 8007bac:	637b      	str	r3, [r7, #52]	; 0x34
 8007bae:	e002      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007bb4:	e07d      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bb6:	e07c      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007bb8:	4b40      	ldr	r3, [pc, #256]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007bba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007bbe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bc2:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007bc4:	4b3d      	ldr	r3, [pc, #244]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bd0:	d105      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8007bd8:	4b3c      	ldr	r3, [pc, #240]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007bda:	637b      	str	r3, [r7, #52]	; 0x34
 8007bdc:	e031      	b.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007bde:	4b37      	ldr	r3, [pc, #220]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007be6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bea:	d10a      	bne.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bee:	2b10      	cmp	r3, #16
 8007bf0:	d107      	bne.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bf2:	f107 0320 	add.w	r3, r7, #32
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fd f8d2 	bl	8004da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8007c00:	e01f      	b.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007c02:	4b2e      	ldr	r3, [pc, #184]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d106      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8007c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c12:	2b20      	cmp	r3, #32
 8007c14:	d103      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8007c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c1c:	e011      	b.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007c1e:	4b27      	ldr	r3, [pc, #156]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c2c:	d106      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	2b30      	cmp	r3, #48	; 0x30
 8007c32:	d103      	bne.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007c34:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c38:	637b      	str	r3, [r7, #52]	; 0x34
 8007c3a:	e002      	b.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007c40:	e037      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c42:	e036      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007c44:	4b1d      	ldr	r3, [pc, #116]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c4e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	2b10      	cmp	r3, #16
 8007c54:	d107      	bne.n	8007c66 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c56:	f107 0320 	add.w	r3, r7, #32
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fd f8a0 	bl	8004da0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c62:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007c64:	e025      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007c66:	4b15      	ldr	r3, [pc, #84]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c72:	d10a      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8007c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d107      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c7a:	f107 0308 	add.w	r3, r7, #8
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fd fb62 	bl	8005348 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	637b      	str	r3, [r7, #52]	; 0x34
 8007c88:	e00f      	b.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007c8a:	4b0c      	ldr	r3, [pc, #48]	; (8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c96:	d105      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	2b30      	cmp	r3, #48	; 0x30
 8007c9c:	d102      	bne.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007c9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca2:	e002      	b.n	8007caa <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8007ca8:	e003      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007caa:	e002      	b.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cb0:	bf00      	nop
    }
  }

  return (frequency);
 8007cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	373c      	adds	r7, #60	; 0x3c
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd90      	pop	{r4, r7, pc}
 8007cbc:	44020c00 	.word	0x44020c00
 8007cc0:	03d09000 	.word	0x03d09000
 8007cc4:	003d0900 	.word	0x003d0900
 8007cc8:	017d7840 	.word	0x017d7840
 8007ccc:	02dc6c00 	.word	0x02dc6c00

08007cd0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007cd8:	4b48      	ldr	r3, [pc, #288]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a47      	ldr	r2, [pc, #284]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007cde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ce2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ce4:	f7f9 fe70 	bl	80019c8 <HAL_GetTick>
 8007ce8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cea:	e008      	b.n	8007cfe <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007cec:	f7f9 fe6c 	bl	80019c8 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d901      	bls.n	8007cfe <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e07a      	b.n	8007df4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cfe:	4b3f      	ldr	r3, [pc, #252]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f0      	bne.n	8007cec <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007d0a:	4b3c      	ldr	r3, [pc, #240]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007d12:	f023 0303 	bic.w	r3, r3, #3
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6811      	ldr	r1, [r2, #0]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6852      	ldr	r2, [r2, #4]
 8007d1e:	0212      	lsls	r2, r2, #8
 8007d20:	430a      	orrs	r2, r1
 8007d22:	4936      	ldr	r1, [pc, #216]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	025b      	lsls	r3, r3, #9
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	041b      	lsls	r3, r3, #16
 8007d46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	061b      	lsls	r3, r3, #24
 8007d54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d58:	4928      	ldr	r1, [pc, #160]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007d5e:	4b27      	ldr	r3, [pc, #156]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d62:	f023 020c 	bic.w	r2, r3, #12
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	4924      	ldr	r1, [pc, #144]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007d70:	4b22      	ldr	r3, [pc, #136]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d74:	f023 0220 	bic.w	r2, r3, #32
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	491f      	ldr	r1, [pc, #124]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007d82:	4b1e      	ldr	r3, [pc, #120]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	491c      	ldr	r1, [pc, #112]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007d90:	4b1a      	ldr	r3, [pc, #104]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d94:	4a19      	ldr	r2, [pc, #100]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007d96:	f023 0310 	bic.w	r3, r3, #16
 8007d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007d9c:	4b17      	ldr	r3, [pc, #92]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007da4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	6a12      	ldr	r2, [r2, #32]
 8007dac:	00d2      	lsls	r2, r2, #3
 8007dae:	4913      	ldr	r1, [pc, #76]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007db4:	4b11      	ldr	r3, [pc, #68]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	4a10      	ldr	r2, [pc, #64]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007dba:	f043 0310 	orr.w	r3, r3, #16
 8007dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007dc0:	4b0e      	ldr	r3, [pc, #56]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a0d      	ldr	r2, [pc, #52]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007dc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007dca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007dcc:	f7f9 fdfc 	bl	80019c8 <HAL_GetTick>
 8007dd0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007dd2:	e008      	b.n	8007de6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007dd4:	f7f9 fdf8 	bl	80019c8 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d901      	bls.n	8007de6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e006      	b.n	8007df4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007de6:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <RCCEx_PLL2_Config+0x12c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d0f0      	beq.n	8007dd4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007df2:	2300      	movs	r3, #0

}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	44020c00 	.word	0x44020c00

08007e00 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007e08:	4b48      	ldr	r3, [pc, #288]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a47      	ldr	r2, [pc, #284]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e12:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e14:	f7f9 fdd8 	bl	80019c8 <HAL_GetTick>
 8007e18:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e1a:	e008      	b.n	8007e2e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e1c:	f7f9 fdd4 	bl	80019c8 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d901      	bls.n	8007e2e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e07a      	b.n	8007f24 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e2e:	4b3f      	ldr	r3, [pc, #252]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1f0      	bne.n	8007e1c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007e3a:	4b3c      	ldr	r3, [pc, #240]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e42:	f023 0303 	bic.w	r3, r3, #3
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6811      	ldr	r1, [r2, #0]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	6852      	ldr	r2, [r2, #4]
 8007e4e:	0212      	lsls	r2, r2, #8
 8007e50:	430a      	orrs	r2, r1
 8007e52:	4936      	ldr	r1, [pc, #216]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	630b      	str	r3, [r1, #48]	; 0x30
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	025b      	lsls	r3, r3, #9
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	431a      	orrs	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	041b      	lsls	r3, r3, #16
 8007e76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	061b      	lsls	r3, r3, #24
 8007e84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e88:	4928      	ldr	r1, [pc, #160]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e8e:	4b27      	ldr	r3, [pc, #156]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e92:	f023 020c 	bic.w	r2, r3, #12
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	4924      	ldr	r1, [pc, #144]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007ea0:	4b22      	ldr	r3, [pc, #136]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea4:	f023 0220 	bic.w	r2, r3, #32
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	491f      	ldr	r1, [pc, #124]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007eb2:	4b1e      	ldr	r3, [pc, #120]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	491c      	ldr	r1, [pc, #112]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007ec0:	4b1a      	ldr	r3, [pc, #104]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec4:	4a19      	ldr	r2, [pc, #100]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007ec6:	f023 0310 	bic.w	r3, r3, #16
 8007eca:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8007ecc:	4b17      	ldr	r3, [pc, #92]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ed0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ed4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	6a12      	ldr	r2, [r2, #32]
 8007edc:	00d2      	lsls	r2, r2, #3
 8007ede:	4913      	ldr	r1, [pc, #76]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8007ee4:	4b11      	ldr	r3, [pc, #68]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee8:	4a10      	ldr	r2, [pc, #64]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007eea:	f043 0310 	orr.w	r3, r3, #16
 8007eee:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007ef0:	4b0e      	ldr	r3, [pc, #56]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a0d      	ldr	r2, [pc, #52]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007efa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007efc:	f7f9 fd64 	bl	80019c8 <HAL_GetTick>
 8007f00:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f02:	e008      	b.n	8007f16 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f04:	f7f9 fd60 	bl	80019c8 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d901      	bls.n	8007f16 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e006      	b.n	8007f24 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f16:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <RCCEx_PLL3_Config+0x12c>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0f0      	beq.n	8007f04 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	44020c00 	.word	0x44020c00

08007f30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d101      	bne.n	8007f42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e162      	b.n	8008208 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a70      	ldr	r2, [pc, #448]	; (8008108 <HAL_SPI_Init+0x1d8>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d018      	beq.n	8007f7e <HAL_SPI_Init+0x4e>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a6e      	ldr	r2, [pc, #440]	; (800810c <HAL_SPI_Init+0x1dc>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d013      	beq.n	8007f7e <HAL_SPI_Init+0x4e>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a6d      	ldr	r2, [pc, #436]	; (8008110 <HAL_SPI_Init+0x1e0>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d00e      	beq.n	8007f7e <HAL_SPI_Init+0x4e>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a6b      	ldr	r2, [pc, #428]	; (8008114 <HAL_SPI_Init+0x1e4>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d009      	beq.n	8007f7e <HAL_SPI_Init+0x4e>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a6a      	ldr	r2, [pc, #424]	; (8008118 <HAL_SPI_Init+0x1e8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d004      	beq.n	8007f7e <HAL_SPI_Init+0x4e>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a68      	ldr	r2, [pc, #416]	; (800811c <HAL_SPI_Init+0x1ec>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	e000      	b.n	8007f80 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007f7e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a5f      	ldr	r2, [pc, #380]	; (8008108 <HAL_SPI_Init+0x1d8>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d018      	beq.n	8007fc2 <HAL_SPI_Init+0x92>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a5d      	ldr	r2, [pc, #372]	; (800810c <HAL_SPI_Init+0x1dc>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d013      	beq.n	8007fc2 <HAL_SPI_Init+0x92>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a5c      	ldr	r2, [pc, #368]	; (8008110 <HAL_SPI_Init+0x1e0>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d00e      	beq.n	8007fc2 <HAL_SPI_Init+0x92>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a5a      	ldr	r2, [pc, #360]	; (8008114 <HAL_SPI_Init+0x1e4>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d009      	beq.n	8007fc2 <HAL_SPI_Init+0x92>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a59      	ldr	r2, [pc, #356]	; (8008118 <HAL_SPI_Init+0x1e8>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d004      	beq.n	8007fc2 <HAL_SPI_Init+0x92>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a57      	ldr	r2, [pc, #348]	; (800811c <HAL_SPI_Init+0x1ec>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d105      	bne.n	8007fce <HAL_SPI_Init+0x9e>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	2b0f      	cmp	r3, #15
 8007fc8:	d901      	bls.n	8007fce <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e11c      	b.n	8008208 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 f80e 	bl	8008ff0 <SPI_GetPacketSize>
 8007fd4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a4b      	ldr	r2, [pc, #300]	; (8008108 <HAL_SPI_Init+0x1d8>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d018      	beq.n	8008012 <HAL_SPI_Init+0xe2>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a49      	ldr	r2, [pc, #292]	; (800810c <HAL_SPI_Init+0x1dc>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d013      	beq.n	8008012 <HAL_SPI_Init+0xe2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a48      	ldr	r2, [pc, #288]	; (8008110 <HAL_SPI_Init+0x1e0>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d00e      	beq.n	8008012 <HAL_SPI_Init+0xe2>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a46      	ldr	r2, [pc, #280]	; (8008114 <HAL_SPI_Init+0x1e4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d009      	beq.n	8008012 <HAL_SPI_Init+0xe2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a45      	ldr	r2, [pc, #276]	; (8008118 <HAL_SPI_Init+0x1e8>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d004      	beq.n	8008012 <HAL_SPI_Init+0xe2>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a43      	ldr	r2, [pc, #268]	; (800811c <HAL_SPI_Init+0x1ec>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d102      	bne.n	8008018 <HAL_SPI_Init+0xe8>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2b08      	cmp	r3, #8
 8008016:	d820      	bhi.n	800805a <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800801c:	4a40      	ldr	r2, [pc, #256]	; (8008120 <HAL_SPI_Init+0x1f0>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d018      	beq.n	8008054 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a3f      	ldr	r2, [pc, #252]	; (8008124 <HAL_SPI_Init+0x1f4>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d013      	beq.n	8008054 <HAL_SPI_Init+0x124>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a3d      	ldr	r2, [pc, #244]	; (8008128 <HAL_SPI_Init+0x1f8>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d00e      	beq.n	8008054 <HAL_SPI_Init+0x124>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a3c      	ldr	r2, [pc, #240]	; (800812c <HAL_SPI_Init+0x1fc>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d009      	beq.n	8008054 <HAL_SPI_Init+0x124>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a3a      	ldr	r2, [pc, #232]	; (8008130 <HAL_SPI_Init+0x200>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d004      	beq.n	8008054 <HAL_SPI_Init+0x124>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a39      	ldr	r2, [pc, #228]	; (8008134 <HAL_SPI_Init+0x204>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d104      	bne.n	800805e <HAL_SPI_Init+0x12e>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b10      	cmp	r3, #16
 8008058:	d901      	bls.n	800805e <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e0d4      	b.n	8008208 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008064:	b2db      	uxtb	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d106      	bne.n	8008078 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7f9 f93c 	bl	80012f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2202      	movs	r2, #2
 800807c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f022 0201 	bic.w	r2, r2, #1
 800808e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800809a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080a4:	d119      	bne.n	80080da <HAL_SPI_Init+0x1aa>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080ae:	d103      	bne.n	80080b8 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d008      	beq.n	80080ca <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10c      	bne.n	80080da <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80080c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080c8:	d107      	bne.n	80080da <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080d8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d028      	beq.n	8008138 <HAL_SPI_Init+0x208>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	2b06      	cmp	r3, #6
 80080ec:	d924      	bls.n	8008138 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	430a      	orrs	r2, r1
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	e020      	b.n	8008148 <HAL_SPI_Init+0x218>
 8008106:	bf00      	nop
 8008108:	40014c00 	.word	0x40014c00
 800810c:	50014c00 	.word	0x50014c00
 8008110:	44002000 	.word	0x44002000
 8008114:	54002000 	.word	0x54002000
 8008118:	40015000 	.word	0x40015000
 800811c:	50015000 	.word	0x50015000
 8008120:	40013000 	.word	0x40013000
 8008124:	50013000 	.word	0x50013000
 8008128:	40003800 	.word	0x40003800
 800812c:	50003800 	.word	0x50003800
 8008130:	40003c00 	.word	0x40003c00
 8008134:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008146:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	69da      	ldr	r2, [r3, #28]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008150:	431a      	orrs	r2, r3
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	431a      	orrs	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815a:	ea42 0103 	orr.w	r1, r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	430a      	orrs	r2, r1
 8008168:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	431a      	orrs	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	431a      	orrs	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	431a      	orrs	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	431a      	orrs	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	431a      	orrs	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	431a      	orrs	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800819c:	431a      	orrs	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	431a      	orrs	r2, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081a8:	431a      	orrs	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b4:	ea42 0103 	orr.w	r1, r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0201 	bic.w	r2, r2, #1
 80081d2:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00a      	beq.n	80081f6 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08a      	sub	sp, #40	; 0x28
 8008214:	af02      	add	r7, sp, #8
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	4613      	mov	r3, r2
 800821e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3320      	adds	r3, #32
 8008226:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008232:	2b01      	cmp	r3, #1
 8008234:	d101      	bne.n	800823a <HAL_SPI_Transmit+0x2a>
 8008236:	2302      	movs	r3, #2
 8008238:	e209      	b.n	800864e <HAL_SPI_Transmit+0x43e>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008242:	f7f9 fbc1 	bl	80019c8 <HAL_GetTick>
 8008246:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b01      	cmp	r3, #1
 8008252:	d007      	beq.n	8008264 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008254:	2302      	movs	r3, #2
 8008256:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008260:	7efb      	ldrb	r3, [r7, #27]
 8008262:	e1f4      	b.n	800864e <HAL_SPI_Transmit+0x43e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d002      	beq.n	8008270 <HAL_SPI_Transmit+0x60>
 800826a:	88fb      	ldrh	r3, [r7, #6]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d107      	bne.n	8008280 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800827c:	7efb      	ldrb	r3, [r7, #27]
 800827e:	e1e6      	b.n	800864e <HAL_SPI_Transmit+0x43e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2203      	movs	r2, #3
 8008284:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	88fa      	ldrh	r2, [r7, #6]
 800829a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	88fa      	ldrh	r2, [r7, #6]
 80082a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80082d0:	d108      	bne.n	80082e4 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	e009      	b.n	80082f8 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80082f6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	0c1b      	lsrs	r3, r3, #16
 8008300:	041b      	lsls	r3, r3, #16
 8008302:	88f9      	ldrh	r1, [r7, #6]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	6812      	ldr	r2, [r2, #0]
 8008308:	430b      	orrs	r3, r1
 800830a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f042 0201 	orr.w	r2, r2, #1
 800831a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008324:	d107      	bne.n	8008336 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008334:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	2b0f      	cmp	r3, #15
 800833c:	d965      	bls.n	800840a <HAL_SPI_Transmit+0x1fa>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a94      	ldr	r2, [pc, #592]	; (8008594 <HAL_SPI_Transmit+0x384>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d059      	beq.n	80083fc <HAL_SPI_Transmit+0x1ec>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a92      	ldr	r2, [pc, #584]	; (8008598 <HAL_SPI_Transmit+0x388>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d054      	beq.n	80083fc <HAL_SPI_Transmit+0x1ec>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a91      	ldr	r2, [pc, #580]	; (800859c <HAL_SPI_Transmit+0x38c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d04f      	beq.n	80083fc <HAL_SPI_Transmit+0x1ec>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a8f      	ldr	r2, [pc, #572]	; (80085a0 <HAL_SPI_Transmit+0x390>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d04a      	beq.n	80083fc <HAL_SPI_Transmit+0x1ec>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a8e      	ldr	r2, [pc, #568]	; (80085a4 <HAL_SPI_Transmit+0x394>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d045      	beq.n	80083fc <HAL_SPI_Transmit+0x1ec>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a8c      	ldr	r2, [pc, #560]	; (80085a8 <HAL_SPI_Transmit+0x398>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d147      	bne.n	800840a <HAL_SPI_Transmit+0x1fa>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800837a:	e03f      	b.n	80083fc <HAL_SPI_Transmit+0x1ec>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	f003 0302 	and.w	r3, r3, #2
 8008386:	2b02      	cmp	r3, #2
 8008388:	d114      	bne.n	80083b4 <HAL_SPI_Transmit+0x1a4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	6812      	ldr	r2, [r2, #0]
 8008394:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800839a:	1d1a      	adds	r2, r3, #4
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083a6:	b29b      	uxth	r3, r3
 80083a8:	3b01      	subs	r3, #1
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80083b2:	e023      	b.n	80083fc <HAL_SPI_Transmit+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083b4:	f7f9 fb08 	bl	80019c8 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d803      	bhi.n	80083cc <HAL_SPI_Transmit+0x1bc>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083ca:	d102      	bne.n	80083d2 <HAL_SPI_Transmit+0x1c2>
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d114      	bne.n	80083fc <HAL_SPI_Transmit+0x1ec>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f000 fd3e 	bl	8008e54 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e128      	b.n	800864e <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008402:	b29b      	uxth	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1b9      	bne.n	800837c <HAL_SPI_Transmit+0x16c>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008408:	e0fb      	b.n	8008602 <HAL_SPI_Transmit+0x3f2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	2b07      	cmp	r3, #7
 8008410:	f240 80f0 	bls.w	80085f4 <HAL_SPI_Transmit+0x3e4>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008414:	e05d      	b.n	80084d2 <HAL_SPI_Transmit+0x2c2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b02      	cmp	r3, #2
 8008422:	d132      	bne.n	800848a <HAL_SPI_Transmit+0x27a>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800842a:	b29b      	uxth	r3, r3
 800842c:	2b01      	cmp	r3, #1
 800842e:	d918      	bls.n	8008462 <HAL_SPI_Transmit+0x252>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008434:	2b00      	cmp	r3, #0
 8008436:	d014      	beq.n	8008462 <HAL_SPI_Transmit+0x252>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6812      	ldr	r2, [r2, #0]
 8008442:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008448:	1d1a      	adds	r2, r3, #4
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008454:	b29b      	uxth	r3, r3
 8008456:	3b02      	subs	r3, #2
 8008458:	b29a      	uxth	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008460:	e037      	b.n	80084d2 <HAL_SPI_Transmit+0x2c2>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008466:	881a      	ldrh	r2, [r3, #0]
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008470:	1c9a      	adds	r2, r3, #2
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800847c:	b29b      	uxth	r3, r3
 800847e:	3b01      	subs	r3, #1
 8008480:	b29a      	uxth	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008488:	e023      	b.n	80084d2 <HAL_SPI_Transmit+0x2c2>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800848a:	f7f9 fa9d 	bl	80019c8 <HAL_GetTick>
 800848e:	4602      	mov	r2, r0
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	1ad3      	subs	r3, r2, r3
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	429a      	cmp	r2, r3
 8008498:	d803      	bhi.n	80084a2 <HAL_SPI_Transmit+0x292>
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084a0:	d102      	bne.n	80084a8 <HAL_SPI_Transmit+0x298>
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d114      	bne.n	80084d2 <HAL_SPI_Transmit+0x2c2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 fcd3 	bl	8008e54 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e0bd      	b.n	800864e <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084d8:	b29b      	uxth	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d19b      	bne.n	8008416 <HAL_SPI_Transmit+0x206>
 80084de:	e090      	b.n	8008602 <HAL_SPI_Transmit+0x3f2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d15e      	bne.n	80085ac <HAL_SPI_Transmit+0x39c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d918      	bls.n	800852c <HAL_SPI_Transmit+0x31c>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fe:	2b40      	cmp	r3, #64	; 0x40
 8008500:	d914      	bls.n	800852c <HAL_SPI_Transmit+0x31c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6812      	ldr	r2, [r2, #0]
 800850c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008512:	1d1a      	adds	r2, r3, #4
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800851e:	b29b      	uxth	r3, r3
 8008520:	3b04      	subs	r3, #4
 8008522:	b29a      	uxth	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800852a:	e063      	b.n	80085f4 <HAL_SPI_Transmit+0x3e4>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008532:	b29b      	uxth	r3, r3
 8008534:	2b01      	cmp	r3, #1
 8008536:	d917      	bls.n	8008568 <HAL_SPI_Transmit+0x358>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853c:	2b00      	cmp	r3, #0
 800853e:	d013      	beq.n	8008568 <HAL_SPI_Transmit+0x358>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008544:	881a      	ldrh	r2, [r3, #0]
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800854e:	1c9a      	adds	r2, r3, #2
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800855a:	b29b      	uxth	r3, r3
 800855c:	3b02      	subs	r3, #2
 800855e:	b29a      	uxth	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008566:	e045      	b.n	80085f4 <HAL_SPI_Transmit+0x3e4>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3320      	adds	r3, #32
 8008572:	7812      	ldrb	r2, [r2, #0]
 8008574:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800857a:	1c5a      	adds	r2, r3, #1
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008586:	b29b      	uxth	r3, r3
 8008588:	3b01      	subs	r3, #1
 800858a:	b29a      	uxth	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008592:	e02f      	b.n	80085f4 <HAL_SPI_Transmit+0x3e4>
 8008594:	40013000 	.word	0x40013000
 8008598:	50013000 	.word	0x50013000
 800859c:	40003800 	.word	0x40003800
 80085a0:	50003800 	.word	0x50003800
 80085a4:	40003c00 	.word	0x40003c00
 80085a8:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085ac:	f7f9 fa0c 	bl	80019c8 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d803      	bhi.n	80085c4 <HAL_SPI_Transmit+0x3b4>
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085c2:	d102      	bne.n	80085ca <HAL_SPI_Transmit+0x3ba>
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d114      	bne.n	80085f4 <HAL_SPI_Transmit+0x3e4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 fc42 	bl	8008e54 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e02c      	b.n	800864e <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f47f af6f 	bne.w	80084e0 <HAL_SPI_Transmit+0x2d0>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	2200      	movs	r2, #0
 800860a:	2108      	movs	r1, #8
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 fcc1 	bl	8008f94 <SPI_WaitOnFlagUntilTimeout>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <HAL_SPI_Transmit+0x418>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800861e:	f043 0220 	orr.w	r2, r3, #32
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f000 fc13 	bl	8008e54 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2201      	movs	r2, #1
 800863a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <HAL_SPI_Transmit+0x43c>
  {
    return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e000      	b.n	800864e <HAL_SPI_Transmit+0x43e>
  }
  return errorcode;
 800864c:	7efb      	ldrb	r3, [r7, #27]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3720      	adds	r7, #32
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop

08008658 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b088      	sub	sp, #32
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	603b      	str	r3, [r7, #0]
 8008664:	4613      	mov	r3, r2
 8008666:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3330      	adds	r3, #48	; 0x30
 8008672:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800867a:	2b01      	cmp	r3, #1
 800867c:	d101      	bne.n	8008682 <HAL_SPI_Receive+0x2a>
 800867e:	2302      	movs	r3, #2
 8008680:	e191      	b.n	80089a6 <HAL_SPI_Receive+0x34e>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800868a:	f7f9 f99d 	bl	80019c8 <HAL_GetTick>
 800868e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b01      	cmp	r3, #1
 800869a:	d007      	beq.n	80086ac <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800869c:	2302      	movs	r3, #2
 800869e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80086a8:	7ffb      	ldrb	r3, [r7, #31]
 80086aa:	e17c      	b.n	80089a6 <HAL_SPI_Receive+0x34e>
  }

  if ((pData == NULL) || (Size == 0UL))
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <HAL_SPI_Receive+0x60>
 80086b2:	88fb      	ldrh	r3, [r7, #6]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d107      	bne.n	80086c8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80086c4:	7ffb      	ldrb	r3, [r7, #31]
 80086c6:	e16e      	b.n	80089a6 <HAL_SPI_Receive+0x34e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2204      	movs	r2, #4
 80086cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	88fa      	ldrh	r2, [r7, #6]
 80086e2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	88fa      	ldrh	r2, [r7, #6]
 80086ea:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008718:	d108      	bne.n	800872c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	e009      	b.n	8008740 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800873e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	0c1b      	lsrs	r3, r3, #16
 8008748:	041b      	lsls	r3, r3, #16
 800874a:	88f9      	ldrh	r1, [r7, #6]
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	6812      	ldr	r2, [r2, #0]
 8008750:	430b      	orrs	r3, r1
 8008752:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f042 0201 	orr.w	r2, r2, #1
 8008762:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800876c:	d107      	bne.n	800877e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800877c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	2b0f      	cmp	r3, #15
 8008784:	d966      	bls.n	8008854 <HAL_SPI_Receive+0x1fc>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a89      	ldr	r2, [pc, #548]	; (80089b0 <HAL_SPI_Receive+0x358>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d05a      	beq.n	8008846 <HAL_SPI_Receive+0x1ee>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a87      	ldr	r2, [pc, #540]	; (80089b4 <HAL_SPI_Receive+0x35c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d055      	beq.n	8008846 <HAL_SPI_Receive+0x1ee>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a86      	ldr	r2, [pc, #536]	; (80089b8 <HAL_SPI_Receive+0x360>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d050      	beq.n	8008846 <HAL_SPI_Receive+0x1ee>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a84      	ldr	r2, [pc, #528]	; (80089bc <HAL_SPI_Receive+0x364>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d04b      	beq.n	8008846 <HAL_SPI_Receive+0x1ee>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a83      	ldr	r2, [pc, #524]	; (80089c0 <HAL_SPI_Receive+0x368>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d046      	beq.n	8008846 <HAL_SPI_Receive+0x1ee>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a81      	ldr	r2, [pc, #516]	; (80089c4 <HAL_SPI_Receive+0x36c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d148      	bne.n	8008854 <HAL_SPI_Receive+0x1fc>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80087c2:	e040      	b.n	8008846 <HAL_SPI_Receive+0x1ee>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	695a      	ldr	r2, [r3, #20]
 80087ca:	f248 0308 	movw	r3, #32776	; 0x8008
 80087ce:	4013      	ands	r3, r2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d014      	beq.n	80087fe <HAL_SPI_Receive+0x1a6>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80087de:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087e4:	1d1a      	adds	r2, r3, #4
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3b01      	subs	r3, #1
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80087fc:	e023      	b.n	8008846 <HAL_SPI_Receive+0x1ee>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087fe:	f7f9 f8e3 	bl	80019c8 <HAL_GetTick>
 8008802:	4602      	mov	r2, r0
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d803      	bhi.n	8008816 <HAL_SPI_Receive+0x1be>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008814:	d102      	bne.n	800881c <HAL_SPI_Receive+0x1c4>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d114      	bne.n	8008846 <HAL_SPI_Receive+0x1ee>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 fb19 	bl	8008e54 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008830:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008842:	2303      	movs	r3, #3
 8008844:	e0af      	b.n	80089a6 <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800884c:	b29b      	uxth	r3, r3
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1b8      	bne.n	80087c4 <HAL_SPI_Receive+0x16c>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008852:	e095      	b.n	8008980 <HAL_SPI_Receive+0x328>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	2b07      	cmp	r3, #7
 800885a:	f240 808b 	bls.w	8008974 <HAL_SPI_Receive+0x31c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800885e:	e03f      	b.n	80088e0 <HAL_SPI_Receive+0x288>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b01      	cmp	r3, #1
 800886c:	d114      	bne.n	8008898 <HAL_SPI_Receive+0x240>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	8812      	ldrh	r2, [r2, #0]
 8008876:	b292      	uxth	r2, r2
 8008878:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800887e:	1c9a      	adds	r2, r3, #2
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800888a:	b29b      	uxth	r3, r3
 800888c:	3b01      	subs	r3, #1
 800888e:	b29a      	uxth	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008896:	e023      	b.n	80088e0 <HAL_SPI_Receive+0x288>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008898:	f7f9 f896 	bl	80019c8 <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d803      	bhi.n	80088b0 <HAL_SPI_Receive+0x258>
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088ae:	d102      	bne.n	80088b6 <HAL_SPI_Receive+0x25e>
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d114      	bne.n	80088e0 <HAL_SPI_Receive+0x288>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f000 facc 	bl	8008e54 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80088dc:	2303      	movs	r3, #3
 80088de:	e062      	b.n	80089a6 <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1b9      	bne.n	8008860 <HAL_SPI_Receive+0x208>
 80088ec:	e048      	b.n	8008980 <HAL_SPI_Receive+0x328>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d117      	bne.n	800892c <HAL_SPI_Receive+0x2d4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008908:	7812      	ldrb	r2, [r2, #0]
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800891e:	b29b      	uxth	r3, r3
 8008920:	3b01      	subs	r3, #1
 8008922:	b29a      	uxth	r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 800892a:	e023      	b.n	8008974 <HAL_SPI_Receive+0x31c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800892c:	f7f9 f84c 	bl	80019c8 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	429a      	cmp	r2, r3
 800893a:	d803      	bhi.n	8008944 <HAL_SPI_Receive+0x2ec>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008942:	d102      	bne.n	800894a <HAL_SPI_Receive+0x2f2>
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d114      	bne.n	8008974 <HAL_SPI_Receive+0x31c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 fa82 	bl	8008e54 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800895e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e018      	b.n	80089a6 <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 800897a:	b29b      	uxth	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1b6      	bne.n	80088ee <HAL_SPI_Receive+0x296>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 fa67 	bl	8008e54 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <HAL_SPI_Receive+0x34c>
  {
    return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e000      	b.n	80089a6 <HAL_SPI_Receive+0x34e>
  }
  return errorcode;
 80089a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3720      	adds	r7, #32
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	40013000 	.word	0x40013000
 80089b4:	50013000 	.word	0x50013000
 80089b8:	40003800 	.word	0x40003800
 80089bc:	50003800 	.word	0x50003800
 80089c0:	40003c00 	.word	0x40003c00
 80089c4:	50003c00 	.word	0x50003c00

080089c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b08c      	sub	sp, #48	; 0x30
 80089cc:	af02      	add	r7, sp, #8
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
 80089d4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	3320      	adds	r3, #32
 80089e2:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3330      	adds	r3, #48	; 0x30
 80089ea:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <HAL_SPI_TransmitReceive+0x32>
 80089f6:	2302      	movs	r3, #2
 80089f8:	e227      	b.n	8008e4a <HAL_SPI_TransmitReceive+0x482>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a02:	f7f8 ffe1 	bl	80019c8 <HAL_GetTick>
 8008a06:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 8008a08:	887b      	ldrh	r3, [r7, #2]
 8008a0a:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 8008a0c:	887b      	ldrh	r3, [r7, #2]
 8008a0e:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d009      	beq.n	8008a30 <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a2e:	e20c      	b.n	8008e4a <HAL_SPI_TransmitReceive+0x482>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d005      	beq.n	8008a42 <HAL_SPI_TransmitReceive+0x7a>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d002      	beq.n	8008a42 <HAL_SPI_TransmitReceive+0x7a>
 8008a3c:	887b      	ldrh	r3, [r7, #2]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d109      	bne.n	8008a56 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008a50:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a54:	e1f9      	b.n	8008e4a <HAL_SPI_TransmitReceive+0x482>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2205      	movs	r2, #5
 8008a5a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	887a      	ldrh	r2, [r7, #2]
 8008a70:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	887a      	ldrh	r2, [r7, #2]
 8008a78:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	68ba      	ldr	r2, [r7, #8]
 8008a80:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	887a      	ldrh	r2, [r7, #2]
 8008a86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	887a      	ldrh	r2, [r7, #2]
 8008a8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68da      	ldr	r2, [r3, #12]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8008aac:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	0c1b      	lsrs	r3, r3, #16
 8008ab6:	041b      	lsls	r3, r3, #16
 8008ab8:	8879      	ldrh	r1, [r7, #2]
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	6812      	ldr	r2, [r2, #0]
 8008abe:	430b      	orrs	r3, r1
 8008ac0:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f042 0201 	orr.w	r2, r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ada:	d107      	bne.n	8008aec <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008aea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	2b0f      	cmp	r3, #15
 8008af2:	f240 8090 	bls.w	8008c16 <HAL_SPI_TransmitReceive+0x24e>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a81      	ldr	r2, [pc, #516]	; (8008d00 <HAL_SPI_TransmitReceive+0x338>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	f000 8083 	beq.w	8008c08 <HAL_SPI_TransmitReceive+0x240>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a7f      	ldr	r2, [pc, #508]	; (8008d04 <HAL_SPI_TransmitReceive+0x33c>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d07d      	beq.n	8008c08 <HAL_SPI_TransmitReceive+0x240>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a7d      	ldr	r2, [pc, #500]	; (8008d08 <HAL_SPI_TransmitReceive+0x340>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d078      	beq.n	8008c08 <HAL_SPI_TransmitReceive+0x240>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a7c      	ldr	r2, [pc, #496]	; (8008d0c <HAL_SPI_TransmitReceive+0x344>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d073      	beq.n	8008c08 <HAL_SPI_TransmitReceive+0x240>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a7a      	ldr	r2, [pc, #488]	; (8008d10 <HAL_SPI_TransmitReceive+0x348>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d06e      	beq.n	8008c08 <HAL_SPI_TransmitReceive+0x240>
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a79      	ldr	r2, [pc, #484]	; (8008d14 <HAL_SPI_TransmitReceive+0x34c>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d170      	bne.n	8008c16 <HAL_SPI_TransmitReceive+0x24e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008b34:	e068      	b.n	8008c08 <HAL_SPI_TransmitReceive+0x240>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	695b      	ldr	r3, [r3, #20]
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d11a      	bne.n	8008b7a <HAL_SPI_TransmitReceive+0x1b2>
 8008b44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d017      	beq.n	8008b7a <HAL_SPI_TransmitReceive+0x1b2>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6812      	ldr	r2, [r2, #0]
 8008b54:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b5a:	1d1a      	adds	r2, r3, #4
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b78:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695a      	ldr	r2, [r3, #20]
 8008b80:	f248 0308 	movw	r3, #32776	; 0x8008
 8008b84:	4013      	ands	r3, r2
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d01a      	beq.n	8008bc0 <HAL_SPI_TransmitReceive+0x1f8>
 8008b8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d017      	beq.n	8008bc0 <HAL_SPI_TransmitReceive+0x1f8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008b9a:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ba0:	1d1a      	adds	r2, r3, #4
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008bbe:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bc0:	f7f8 ff02 	bl	80019c8 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d803      	bhi.n	8008bd8 <HAL_SPI_TransmitReceive+0x210>
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bd6:	d102      	bne.n	8008bde <HAL_SPI_TransmitReceive+0x216>
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d114      	bne.n	8008c08 <HAL_SPI_TransmitReceive+0x240>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 f938 	bl	8008e54 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e120      	b.n	8008e4a <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008c08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d193      	bne.n	8008b36 <HAL_SPI_TransmitReceive+0x16e>
 8008c0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d190      	bne.n	8008b36 <HAL_SPI_TransmitReceive+0x16e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008c14:	e0f2      	b.n	8008dfc <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	2b07      	cmp	r3, #7
 8008c1c:	f240 80e8 	bls.w	8008df0 <HAL_SPI_TransmitReceive+0x428>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008c20:	e066      	b.n	8008cf0 <HAL_SPI_TransmitReceive+0x328>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	f003 0302 	and.w	r3, r3, #2
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d119      	bne.n	8008c64 <HAL_SPI_TransmitReceive+0x29c>
 8008c30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d016      	beq.n	8008c64 <HAL_SPI_TransmitReceive+0x29c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c3a:	881a      	ldrh	r2, [r3, #0]
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c44:	1c9a      	adds	r2, r3, #2
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	3b01      	subs	r3, #1
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c62:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d11a      	bne.n	8008ca8 <HAL_SPI_TransmitReceive+0x2e0>
 8008c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d017      	beq.n	8008ca8 <HAL_SPI_TransmitReceive+0x2e0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	8812      	ldrh	r2, [r2, #0]
 8008c80:	b292      	uxth	r2, r2
 8008c82:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c88:	1c9a      	adds	r2, r3, #2
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	3b01      	subs	r3, #1
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008ca6:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ca8:	f7f8 fe8e 	bl	80019c8 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d803      	bhi.n	8008cc0 <HAL_SPI_TransmitReceive+0x2f8>
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cbe:	d102      	bne.n	8008cc6 <HAL_SPI_TransmitReceive+0x2fe>
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d114      	bne.n	8008cf0 <HAL_SPI_TransmitReceive+0x328>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 f8c4 	bl	8008e54 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	e0ac      	b.n	8008e4a <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008cf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d195      	bne.n	8008c22 <HAL_SPI_TransmitReceive+0x25a>
 8008cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d192      	bne.n	8008c22 <HAL_SPI_TransmitReceive+0x25a>
 8008cfc:	e07e      	b.n	8008dfc <HAL_SPI_TransmitReceive+0x434>
 8008cfe:	bf00      	nop
 8008d00:	40013000 	.word	0x40013000
 8008d04:	50013000 	.word	0x50013000
 8008d08:	40003800 	.word	0x40003800
 8008d0c:	50003800 	.word	0x50003800
 8008d10:	40003c00 	.word	0x40003c00
 8008d14:	50003c00 	.word	0x50003c00
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d11b      	bne.n	8008d5e <HAL_SPI_TransmitReceive+0x396>
 8008d26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d018      	beq.n	8008d5e <HAL_SPI_TransmitReceive+0x396>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3320      	adds	r3, #32
 8008d36:	7812      	ldrb	r2, [r2, #0]
 8008d38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d5c:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	f003 0301 	and.w	r3, r3, #1
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d11d      	bne.n	8008da8 <HAL_SPI_TransmitReceive+0x3e0>
 8008d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d01a      	beq.n	8008da8 <HAL_SPI_TransmitReceive+0x3e0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d7e:	7812      	ldrb	r2, [r2, #0]
 8008d80:	b2d2      	uxtb	r2, r2
 8008d82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d88:	1c5a      	adds	r2, r3, #1
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	3b01      	subs	r3, #1
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008da6:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008da8:	f7f8 fe0e 	bl	80019c8 <HAL_GetTick>
 8008dac:	4602      	mov	r2, r0
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d803      	bhi.n	8008dc0 <HAL_SPI_TransmitReceive+0x3f8>
 8008db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dbe:	d102      	bne.n	8008dc6 <HAL_SPI_TransmitReceive+0x3fe>
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d114      	bne.n	8008df0 <HAL_SPI_TransmitReceive+0x428>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 f844 	bl	8008e54 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e02c      	b.n	8008e4a <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008df0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d190      	bne.n	8008d18 <HAL_SPI_TransmitReceive+0x350>
 8008df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d18d      	bne.n	8008d18 <HAL_SPI_TransmitReceive+0x350>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	2200      	movs	r2, #0
 8008e04:	2108      	movs	r1, #8
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 f8c4 	bl	8008f94 <SPI_WaitOnFlagUntilTimeout>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d007      	beq.n	8008e22 <HAL_SPI_TransmitReceive+0x45a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e18:	f043 0220 	orr.w	r2, r3, #32
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 f816 	bl	8008e54 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <HAL_SPI_TransmitReceive+0x47e>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e001      	b.n	8008e4a <HAL_SPI_TransmitReceive+0x482>
  }
  return errorcode;
 8008e46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3728      	adds	r7, #40	; 0x28
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop

08008e54 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	699a      	ldr	r2, [r3, #24]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f042 0208 	orr.w	r2, r2, #8
 8008e72:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	699a      	ldr	r2, [r3, #24]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0210 	orr.w	r2, r2, #16
 8008e82:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f022 0201 	bic.w	r2, r2, #1
 8008e92:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	6812      	ldr	r2, [r2, #0]
 8008e9e:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8008ea2:	f023 0303 	bic.w	r3, r3, #3
 8008ea6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	689a      	ldr	r2, [r3, #8]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008eb6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b04      	cmp	r3, #4
 8008ec2:	d014      	beq.n	8008eee <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f003 0320 	and.w	r3, r3, #32
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00f      	beq.n	8008eee <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ed4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	699a      	ldr	r2, [r3, #24]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f042 0220 	orr.w	r2, r2, #32
 8008eec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d014      	beq.n	8008f24 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00f      	beq.n	8008f24 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f0a:	f043 0204 	orr.w	r2, r3, #4
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	699a      	ldr	r2, [r3, #24]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f22:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00f      	beq.n	8008f4e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f34:	f043 0201 	orr.w	r2, r3, #1
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	699a      	ldr	r2, [r3, #24]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f4c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00f      	beq.n	8008f78 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f5e:	f043 0208 	orr.w	r2, r3, #8
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f76:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8008f88:	bf00      	nop
 8008f8a:	3714      	adds	r7, #20
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	603b      	str	r3, [r7, #0]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008fa4:	e010      	b.n	8008fc8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fa6:	f7f8 fd0f 	bl	80019c8 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d803      	bhi.n	8008fbe <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fbc:	d102      	bne.n	8008fc4 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e00f      	b.n	8008fe8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	695a      	ldr	r2, [r3, #20]
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	bf0c      	ite	eq
 8008fd8:	2301      	moveq	r3, #1
 8008fda:	2300      	movne	r3, #0
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	461a      	mov	r2, r3
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d0df      	beq.n	8008fa6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffc:	095b      	lsrs	r3, r3, #5
 8008ffe:	3301      	adds	r3, #1
 8009000:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	3301      	adds	r3, #1
 8009008:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	3307      	adds	r3, #7
 800900e:	08db      	lsrs	r3, r3, #3
 8009010:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	fb02 f303 	mul.w	r3, r2, r3
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d101      	bne.n	8009038 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e042      	b.n	80090be <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800903e:	2b00      	cmp	r3, #0
 8009040:	d106      	bne.n	8009050 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7f8 fa3c 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2224      	movs	r2, #36	; 0x24
 8009054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f022 0201 	bic.w	r2, r2, #1
 8009066:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fab5 	bl	80095e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f8c4 	bl	8009204 <UART_SetConfig>
 800907c:	4603      	mov	r3, r0
 800907e:	2b01      	cmp	r3, #1
 8009080:	d101      	bne.n	8009086 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e01b      	b.n	80090be <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	685a      	ldr	r2, [r3, #4]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009094:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f042 0201 	orr.w	r2, r2, #1
 80090b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fb34 	bl	8009724 <UART_CheckIdleState>
 80090bc:	4603      	mov	r3, r0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b08a      	sub	sp, #40	; 0x28
 80090ca:	af02      	add	r7, sp, #8
 80090cc:	60f8      	str	r0, [r7, #12]
 80090ce:	60b9      	str	r1, [r7, #8]
 80090d0:	603b      	str	r3, [r7, #0]
 80090d2:	4613      	mov	r3, r2
 80090d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090dc:	2b20      	cmp	r3, #32
 80090de:	f040 808b 	bne.w	80091f8 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d002      	beq.n	80090ee <HAL_UART_Transmit+0x28>
 80090e8:	88fb      	ldrh	r3, [r7, #6]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d101      	bne.n	80090f2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e083      	b.n	80091fa <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090fc:	2b80      	cmp	r3, #128	; 0x80
 80090fe:	d107      	bne.n	8009110 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800910e:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2221      	movs	r2, #33	; 0x21
 800911c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009120:	f7f8 fc52 	bl	80019c8 <HAL_GetTick>
 8009124:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	88fa      	ldrh	r2, [r7, #6]
 800912a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	88fa      	ldrh	r2, [r7, #6]
 8009132:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800913e:	d108      	bne.n	8009152 <HAL_UART_Transmit+0x8c>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d104      	bne.n	8009152 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009148:	2300      	movs	r3, #0
 800914a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	61bb      	str	r3, [r7, #24]
 8009150:	e003      	b.n	800915a <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009156:	2300      	movs	r3, #0
 8009158:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800915a:	e030      	b.n	80091be <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2200      	movs	r2, #0
 8009164:	2180      	movs	r1, #128	; 0x80
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f000 fb86 	bl	8009878 <UART_WaitOnFlagUntilTimeout>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d005      	beq.n	800917e <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2220      	movs	r2, #32
 8009176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e03d      	b.n	80091fa <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10b      	bne.n	800919c <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	461a      	mov	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009192:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	3302      	adds	r3, #2
 8009198:	61bb      	str	r3, [r7, #24]
 800919a:	e007      	b.n	80091ac <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	781a      	ldrb	r2, [r3, #0]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	3301      	adds	r3, #1
 80091aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	3b01      	subs	r3, #1
 80091b6:	b29a      	uxth	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1c8      	bne.n	800915c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	9300      	str	r3, [sp, #0]
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	2200      	movs	r2, #0
 80091d2:	2140      	movs	r1, #64	; 0x40
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 fb4f 	bl	8009878 <UART_WaitOnFlagUntilTimeout>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e006      	b.n	80091fa <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2220      	movs	r2, #32
 80091f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	e000      	b.n	80091fa <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80091f8:	2302      	movs	r3, #2
  }
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3720      	adds	r7, #32
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009208:	b094      	sub	sp, #80	; 0x50
 800920a:	af00      	add	r7, sp, #0
 800920c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	4b78      	ldr	r3, [pc, #480]	; (80093fc <UART_SetConfig+0x1f8>)
 800921a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800921c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921e:	689a      	ldr	r2, [r3, #8]
 8009220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	431a      	orrs	r2, r3
 8009226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	431a      	orrs	r2, r3
 800922c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922e:	69db      	ldr	r3, [r3, #28]
 8009230:	4313      	orrs	r3, r2
 8009232:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4971      	ldr	r1, [pc, #452]	; (8009400 <UART_SetConfig+0x1fc>)
 800923c:	4019      	ands	r1, r3
 800923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009244:	430b      	orrs	r3, r1
 8009246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009254:	68d9      	ldr	r1, [r3, #12]
 8009256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	ea40 0301 	orr.w	r3, r0, r1
 800925e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	4b64      	ldr	r3, [pc, #400]	; (80093fc <UART_SetConfig+0x1f8>)
 800926c:	429a      	cmp	r2, r3
 800926e:	d009      	beq.n	8009284 <UART_SetConfig+0x80>
 8009270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	4b63      	ldr	r3, [pc, #396]	; (8009404 <UART_SetConfig+0x200>)
 8009276:	429a      	cmp	r2, r3
 8009278:	d004      	beq.n	8009284 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800927a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927c:	6a1a      	ldr	r2, [r3, #32]
 800927e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009280:	4313      	orrs	r3, r2
 8009282:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800928e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009298:	430b      	orrs	r3, r1
 800929a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a2:	f023 000f 	bic.w	r0, r3, #15
 80092a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80092aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	ea40 0301 	orr.w	r3, r0, r1
 80092b2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	4b53      	ldr	r3, [pc, #332]	; (8009408 <UART_SetConfig+0x204>)
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d102      	bne.n	80092c4 <UART_SetConfig+0xc0>
 80092be:	2301      	movs	r3, #1
 80092c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80092c2:	e066      	b.n	8009392 <UART_SetConfig+0x18e>
 80092c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	4b50      	ldr	r3, [pc, #320]	; (800940c <UART_SetConfig+0x208>)
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d102      	bne.n	80092d4 <UART_SetConfig+0xd0>
 80092ce:	2302      	movs	r3, #2
 80092d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80092d2:	e05e      	b.n	8009392 <UART_SetConfig+0x18e>
 80092d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	4b4d      	ldr	r3, [pc, #308]	; (8009410 <UART_SetConfig+0x20c>)
 80092da:	429a      	cmp	r2, r3
 80092dc:	d102      	bne.n	80092e4 <UART_SetConfig+0xe0>
 80092de:	2304      	movs	r3, #4
 80092e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80092e2:	e056      	b.n	8009392 <UART_SetConfig+0x18e>
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	4b4a      	ldr	r3, [pc, #296]	; (8009414 <UART_SetConfig+0x210>)
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d102      	bne.n	80092f4 <UART_SetConfig+0xf0>
 80092ee:	2308      	movs	r3, #8
 80092f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80092f2:	e04e      	b.n	8009392 <UART_SetConfig+0x18e>
 80092f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	4b47      	ldr	r3, [pc, #284]	; (8009418 <UART_SetConfig+0x214>)
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d102      	bne.n	8009304 <UART_SetConfig+0x100>
 80092fe:	2310      	movs	r3, #16
 8009300:	64bb      	str	r3, [r7, #72]	; 0x48
 8009302:	e046      	b.n	8009392 <UART_SetConfig+0x18e>
 8009304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	4b44      	ldr	r3, [pc, #272]	; (800941c <UART_SetConfig+0x218>)
 800930a:	429a      	cmp	r2, r3
 800930c:	d102      	bne.n	8009314 <UART_SetConfig+0x110>
 800930e:	2320      	movs	r3, #32
 8009310:	64bb      	str	r3, [r7, #72]	; 0x48
 8009312:	e03e      	b.n	8009392 <UART_SetConfig+0x18e>
 8009314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	4b41      	ldr	r3, [pc, #260]	; (8009420 <UART_SetConfig+0x21c>)
 800931a:	429a      	cmp	r2, r3
 800931c:	d102      	bne.n	8009324 <UART_SetConfig+0x120>
 800931e:	2340      	movs	r3, #64	; 0x40
 8009320:	64bb      	str	r3, [r7, #72]	; 0x48
 8009322:	e036      	b.n	8009392 <UART_SetConfig+0x18e>
 8009324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	4b3e      	ldr	r3, [pc, #248]	; (8009424 <UART_SetConfig+0x220>)
 800932a:	429a      	cmp	r2, r3
 800932c:	d102      	bne.n	8009334 <UART_SetConfig+0x130>
 800932e:	2380      	movs	r3, #128	; 0x80
 8009330:	64bb      	str	r3, [r7, #72]	; 0x48
 8009332:	e02e      	b.n	8009392 <UART_SetConfig+0x18e>
 8009334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	4b3b      	ldr	r3, [pc, #236]	; (8009428 <UART_SetConfig+0x224>)
 800933a:	429a      	cmp	r2, r3
 800933c:	d103      	bne.n	8009346 <UART_SetConfig+0x142>
 800933e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009342:	64bb      	str	r3, [r7, #72]	; 0x48
 8009344:	e025      	b.n	8009392 <UART_SetConfig+0x18e>
 8009346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	4b38      	ldr	r3, [pc, #224]	; (800942c <UART_SetConfig+0x228>)
 800934c:	429a      	cmp	r2, r3
 800934e:	d103      	bne.n	8009358 <UART_SetConfig+0x154>
 8009350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009354:	64bb      	str	r3, [r7, #72]	; 0x48
 8009356:	e01c      	b.n	8009392 <UART_SetConfig+0x18e>
 8009358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	4b34      	ldr	r3, [pc, #208]	; (8009430 <UART_SetConfig+0x22c>)
 800935e:	429a      	cmp	r2, r3
 8009360:	d103      	bne.n	800936a <UART_SetConfig+0x166>
 8009362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009366:	64bb      	str	r3, [r7, #72]	; 0x48
 8009368:	e013      	b.n	8009392 <UART_SetConfig+0x18e>
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	4b31      	ldr	r3, [pc, #196]	; (8009434 <UART_SetConfig+0x230>)
 8009370:	429a      	cmp	r2, r3
 8009372:	d103      	bne.n	800937c <UART_SetConfig+0x178>
 8009374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009378:	64bb      	str	r3, [r7, #72]	; 0x48
 800937a:	e00a      	b.n	8009392 <UART_SetConfig+0x18e>
 800937c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	4b1e      	ldr	r3, [pc, #120]	; (80093fc <UART_SetConfig+0x1f8>)
 8009382:	429a      	cmp	r2, r3
 8009384:	d103      	bne.n	800938e <UART_SetConfig+0x18a>
 8009386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800938a:	64bb      	str	r3, [r7, #72]	; 0x48
 800938c:	e001      	b.n	8009392 <UART_SetConfig+0x18e>
 800938e:	2300      	movs	r3, #0
 8009390:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	4b19      	ldr	r3, [pc, #100]	; (80093fc <UART_SetConfig+0x1f8>)
 8009398:	429a      	cmp	r2, r3
 800939a:	d005      	beq.n	80093a8 <UART_SetConfig+0x1a4>
 800939c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	4b18      	ldr	r3, [pc, #96]	; (8009404 <UART_SetConfig+0x200>)
 80093a2:	429a      	cmp	r2, r3
 80093a4:	f040 8094 	bne.w	80094d0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80093a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093aa:	2200      	movs	r2, #0
 80093ac:	623b      	str	r3, [r7, #32]
 80093ae:	627a      	str	r2, [r7, #36]	; 0x24
 80093b0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80093b4:	f7fc f932 	bl	800561c <HAL_RCCEx_GetPeriphCLKFreq>
 80093b8:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80093ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 80f7 	beq.w	80095b0 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c6:	4a1c      	ldr	r2, [pc, #112]	; (8009438 <UART_SetConfig+0x234>)
 80093c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093cc:	461a      	mov	r2, r3
 80093ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80093d4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	4613      	mov	r3, r2
 80093dc:	005b      	lsls	r3, r3, #1
 80093de:	4413      	add	r3, r2
 80093e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d305      	bcc.n	80093f2 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d924      	bls.n	800943c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80093f8:	e069      	b.n	80094ce <UART_SetConfig+0x2ca>
 80093fa:	bf00      	nop
 80093fc:	44002400 	.word	0x44002400
 8009400:	cfff69f3 	.word	0xcfff69f3
 8009404:	54002400 	.word	0x54002400
 8009408:	40013800 	.word	0x40013800
 800940c:	40004400 	.word	0x40004400
 8009410:	40004800 	.word	0x40004800
 8009414:	40004c00 	.word	0x40004c00
 8009418:	40005000 	.word	0x40005000
 800941c:	40006400 	.word	0x40006400
 8009420:	40007800 	.word	0x40007800
 8009424:	40007c00 	.word	0x40007c00
 8009428:	40008000 	.word	0x40008000
 800942c:	40006800 	.word	0x40006800
 8009430:	40006c00 	.word	0x40006c00
 8009434:	40008400 	.word	0x40008400
 8009438:	0800adb8 	.word	0x0800adb8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800943c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800943e:	2200      	movs	r2, #0
 8009440:	61bb      	str	r3, [r7, #24]
 8009442:	61fa      	str	r2, [r7, #28]
 8009444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	4a64      	ldr	r2, [pc, #400]	; (80095dc <UART_SetConfig+0x3d8>)
 800944a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800944e:	b29b      	uxth	r3, r3
 8009450:	2200      	movs	r2, #0
 8009452:	613b      	str	r3, [r7, #16]
 8009454:	617a      	str	r2, [r7, #20]
 8009456:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800945a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800945e:	f7f6 ff15 	bl	800028c <__aeabi_uldivmod>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4610      	mov	r0, r2
 8009468:	4619      	mov	r1, r3
 800946a:	f04f 0200 	mov.w	r2, #0
 800946e:	f04f 0300 	mov.w	r3, #0
 8009472:	020b      	lsls	r3, r1, #8
 8009474:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009478:	0202      	lsls	r2, r0, #8
 800947a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800947c:	6849      	ldr	r1, [r1, #4]
 800947e:	0849      	lsrs	r1, r1, #1
 8009480:	2000      	movs	r0, #0
 8009482:	460c      	mov	r4, r1
 8009484:	4605      	mov	r5, r0
 8009486:	eb12 0804 	adds.w	r8, r2, r4
 800948a:	eb43 0905 	adc.w	r9, r3, r5
 800948e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	60bb      	str	r3, [r7, #8]
 8009496:	60fa      	str	r2, [r7, #12]
 8009498:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800949c:	4640      	mov	r0, r8
 800949e:	4649      	mov	r1, r9
 80094a0:	f7f6 fef4 	bl	800028c <__aeabi_uldivmod>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	4613      	mov	r3, r2
 80094aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094b2:	d308      	bcc.n	80094c6 <UART_SetConfig+0x2c2>
 80094b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094ba:	d204      	bcs.n	80094c6 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 80094bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094c2:	60da      	str	r2, [r3, #12]
 80094c4:	e003      	b.n	80094ce <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80094cc:	e070      	b.n	80095b0 <UART_SetConfig+0x3ac>
 80094ce:	e06f      	b.n	80095b0 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d2:	69db      	ldr	r3, [r3, #28]
 80094d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094d8:	d13c      	bne.n	8009554 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80094da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094dc:	2200      	movs	r2, #0
 80094de:	603b      	str	r3, [r7, #0]
 80094e0:	607a      	str	r2, [r7, #4]
 80094e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094e6:	f7fc f899 	bl	800561c <HAL_RCCEx_GetPeriphCLKFreq>
 80094ea:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d05e      	beq.n	80095b0 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	4a39      	ldr	r2, [pc, #228]	; (80095dc <UART_SetConfig+0x3d8>)
 80094f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094fc:	461a      	mov	r2, r3
 80094fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009500:	fbb3 f3f2 	udiv	r3, r3, r2
 8009504:	005a      	lsls	r2, r3, #1
 8009506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	085b      	lsrs	r3, r3, #1
 800950c:	441a      	add	r2, r3
 800950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	fbb2 f3f3 	udiv	r3, r2, r3
 8009516:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951a:	2b0f      	cmp	r3, #15
 800951c:	d916      	bls.n	800954c <UART_SetConfig+0x348>
 800951e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009524:	d212      	bcs.n	800954c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009528:	b29b      	uxth	r3, r3
 800952a:	f023 030f 	bic.w	r3, r3, #15
 800952e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009532:	085b      	lsrs	r3, r3, #1
 8009534:	b29b      	uxth	r3, r3
 8009536:	f003 0307 	and.w	r3, r3, #7
 800953a:	b29a      	uxth	r2, r3
 800953c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800953e:	4313      	orrs	r3, r2
 8009540:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8009542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009548:	60da      	str	r2, [r3, #12]
 800954a:	e031      	b.n	80095b0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009552:	e02d      	b.n	80095b0 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009556:	2200      	movs	r2, #0
 8009558:	469a      	mov	sl, r3
 800955a:	4693      	mov	fp, r2
 800955c:	4650      	mov	r0, sl
 800955e:	4659      	mov	r1, fp
 8009560:	f7fc f85c 	bl	800561c <HAL_RCCEx_GetPeriphCLKFreq>
 8009564:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8009566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009568:	2b00      	cmp	r3, #0
 800956a:	d021      	beq.n	80095b0 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800956c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009570:	4a1a      	ldr	r2, [pc, #104]	; (80095dc <UART_SetConfig+0x3d8>)
 8009572:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009576:	461a      	mov	r2, r3
 8009578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800957a:	fbb3 f2f2 	udiv	r2, r3, r2
 800957e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	085b      	lsrs	r3, r3, #1
 8009584:	441a      	add	r2, r3
 8009586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	fbb2 f3f3 	udiv	r3, r2, r3
 800958e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009592:	2b0f      	cmp	r3, #15
 8009594:	d909      	bls.n	80095aa <UART_SetConfig+0x3a6>
 8009596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800959c:	d205      	bcs.n	80095aa <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800959e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	60da      	str	r2, [r3, #12]
 80095a8:	e002      	b.n	80095b0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b2:	2201      	movs	r2, #1
 80095b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80095b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ba:	2201      	movs	r2, #1
 80095bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c2:	2200      	movs	r2, #0
 80095c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80095c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c8:	2200      	movs	r2, #0
 80095ca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80095cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3750      	adds	r7, #80	; 0x50
 80095d4:	46bd      	mov	sp, r7
 80095d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095da:	bf00      	nop
 80095dc:	0800adb8 	.word	0x0800adb8

080095e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ec:	f003 0308 	and.w	r3, r3, #8
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00a      	beq.n	800960a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	430a      	orrs	r2, r1
 8009608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00a      	beq.n	800962c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009630:	f003 0302 	and.w	r3, r3, #2
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00a      	beq.n	800964e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009652:	f003 0304 	and.w	r3, r3, #4
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00a      	beq.n	8009670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	430a      	orrs	r2, r1
 800966e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009674:	f003 0310 	and.w	r3, r3, #16
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00a      	beq.n	8009692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009696:	f003 0320 	and.w	r3, r3, #32
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00a      	beq.n	80096b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d01a      	beq.n	80096f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096de:	d10a      	bne.n	80096f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	430a      	orrs	r2, r1
 80096f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	430a      	orrs	r2, r1
 8009716:	605a      	str	r2, [r3, #4]
  }
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b098      	sub	sp, #96	; 0x60
 8009728:	af02      	add	r7, sp, #8
 800972a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009734:	f7f8 f948 	bl	80019c8 <HAL_GetTick>
 8009738:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0308 	and.w	r3, r3, #8
 8009744:	2b08      	cmp	r3, #8
 8009746:	d12f      	bne.n	80097a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009750:	2200      	movs	r2, #0
 8009752:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f88e 	bl	8009878 <UART_WaitOnFlagUntilTimeout>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d022      	beq.n	80097a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976a:	e853 3f00 	ldrex	r3, [r3]
 800976e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009776:	653b      	str	r3, [r7, #80]	; 0x50
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	461a      	mov	r2, r3
 800977e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009780:	647b      	str	r3, [r7, #68]	; 0x44
 8009782:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009784:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009788:	e841 2300 	strex	r3, r2, [r1]
 800978c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800978e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1e6      	bne.n	8009762 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2220      	movs	r2, #32
 8009798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097a4:	2303      	movs	r3, #3
 80097a6:	e063      	b.n	8009870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0304 	and.w	r3, r3, #4
 80097b2:	2b04      	cmp	r3, #4
 80097b4:	d149      	bne.n	800984a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097be:	2200      	movs	r2, #0
 80097c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f857 	bl	8009878 <UART_WaitOnFlagUntilTimeout>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d03c      	beq.n	800984a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	e853 3f00 	ldrex	r3, [r3]
 80097dc:	623b      	str	r3, [r7, #32]
   return(result);
 80097de:	6a3b      	ldr	r3, [r7, #32]
 80097e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ee:	633b      	str	r3, [r7, #48]	; 0x30
 80097f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097f6:	e841 2300 	strex	r3, r2, [r1]
 80097fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1e6      	bne.n	80097d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3308      	adds	r3, #8
 8009808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	e853 3f00 	ldrex	r3, [r3]
 8009810:	60fb      	str	r3, [r7, #12]
   return(result);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f023 0301 	bic.w	r3, r3, #1
 8009818:	64bb      	str	r3, [r7, #72]	; 0x48
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	3308      	adds	r3, #8
 8009820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009822:	61fa      	str	r2, [r7, #28]
 8009824:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009826:	69b9      	ldr	r1, [r7, #24]
 8009828:	69fa      	ldr	r2, [r7, #28]
 800982a:	e841 2300 	strex	r3, r2, [r1]
 800982e:	617b      	str	r3, [r7, #20]
   return(result);
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d1e5      	bne.n	8009802 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2220      	movs	r2, #32
 800983a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009846:	2303      	movs	r3, #3
 8009848:	e012      	b.n	8009870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2220      	movs	r2, #32
 800984e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2220      	movs	r2, #32
 8009856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3758      	adds	r7, #88	; 0x58
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	4613      	mov	r3, r2
 8009886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009888:	e049      	b.n	800991e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009890:	d045      	beq.n	800991e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009892:	f7f8 f899 	bl	80019c8 <HAL_GetTick>
 8009896:	4602      	mov	r2, r0
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	69ba      	ldr	r2, [r7, #24]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d302      	bcc.n	80098a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d101      	bne.n	80098ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e048      	b.n	800993e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 0304 	and.w	r3, r3, #4
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d031      	beq.n	800991e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	69db      	ldr	r3, [r3, #28]
 80098c0:	f003 0308 	and.w	r3, r3, #8
 80098c4:	2b08      	cmp	r3, #8
 80098c6:	d110      	bne.n	80098ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2208      	movs	r2, #8
 80098ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f000 f838 	bl	8009946 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2208      	movs	r2, #8
 80098da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e029      	b.n	800993e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	69db      	ldr	r3, [r3, #28]
 80098f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098f8:	d111      	bne.n	800991e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 f81e 	bl	8009946 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2220      	movs	r2, #32
 800990e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800991a:	2303      	movs	r3, #3
 800991c:	e00f      	b.n	800993e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	69da      	ldr	r2, [r3, #28]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	4013      	ands	r3, r2
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	429a      	cmp	r2, r3
 800992c:	bf0c      	ite	eq
 800992e:	2301      	moveq	r3, #1
 8009930:	2300      	movne	r3, #0
 8009932:	b2db      	uxtb	r3, r3
 8009934:	461a      	mov	r2, r3
 8009936:	79fb      	ldrb	r3, [r7, #7]
 8009938:	429a      	cmp	r2, r3
 800993a:	d0a6      	beq.n	800988a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009946:	b480      	push	{r7}
 8009948:	b095      	sub	sp, #84	; 0x54
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009956:	e853 3f00 	ldrex	r3, [r3]
 800995a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800995c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	461a      	mov	r2, r3
 800996a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800996c:	643b      	str	r3, [r7, #64]	; 0x40
 800996e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009970:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009974:	e841 2300 	strex	r3, r2, [r1]
 8009978:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800997a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1e6      	bne.n	800994e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3308      	adds	r3, #8
 8009986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	e853 3f00 	ldrex	r3, [r3]
 800998e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009996:	f023 0301 	bic.w	r3, r3, #1
 800999a:	64bb      	str	r3, [r7, #72]	; 0x48
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3308      	adds	r3, #8
 80099a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ac:	e841 2300 	strex	r3, r2, [r1]
 80099b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1e3      	bne.n	8009980 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d118      	bne.n	80099f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	e853 3f00 	ldrex	r3, [r3]
 80099cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	f023 0310 	bic.w	r3, r3, #16
 80099d4:	647b      	str	r3, [r7, #68]	; 0x44
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	461a      	mov	r2, r3
 80099dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099de:	61bb      	str	r3, [r7, #24]
 80099e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e2:	6979      	ldr	r1, [r7, #20]
 80099e4:	69ba      	ldr	r2, [r7, #24]
 80099e6:	e841 2300 	strex	r3, r2, [r1]
 80099ea:	613b      	str	r3, [r7, #16]
   return(result);
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1e6      	bne.n	80099c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2220      	movs	r2, #32
 80099f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009a06:	bf00      	nop
 8009a08:	3754      	adds	r7, #84	; 0x54
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a12:	b480      	push	{r7}
 8009a14:	b085      	sub	sp, #20
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d101      	bne.n	8009a28 <HAL_UARTEx_DisableFifoMode+0x16>
 8009a24:	2302      	movs	r3, #2
 8009a26:	e027      	b.n	8009a78 <HAL_UARTEx_DisableFifoMode+0x66>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2224      	movs	r2, #36	; 0x24
 8009a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f022 0201 	bic.w	r2, r2, #1
 8009a4e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2220      	movs	r2, #32
 8009a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3714      	adds	r7, #20
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d101      	bne.n	8009a9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a98:	2302      	movs	r3, #2
 8009a9a:	e02d      	b.n	8009af8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2224      	movs	r2, #36	; 0x24
 8009aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f022 0201 	bic.w	r2, r2, #1
 8009ac2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	430a      	orrs	r2, r1
 8009ad6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f84f 	bl	8009b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2220      	movs	r2, #32
 8009aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d101      	bne.n	8009b18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b14:	2302      	movs	r3, #2
 8009b16:	e02d      	b.n	8009b74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2224      	movs	r2, #36	; 0x24
 8009b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f022 0201 	bic.w	r2, r2, #1
 8009b3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	430a      	orrs	r2, r1
 8009b52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f811 	bl	8009b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b085      	sub	sp, #20
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d108      	bne.n	8009b9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b9c:	e031      	b.n	8009c02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b9e:	2308      	movs	r3, #8
 8009ba0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ba2:	2308      	movs	r3, #8
 8009ba4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	0e5b      	lsrs	r3, r3, #25
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	f003 0307 	and.w	r3, r3, #7
 8009bb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	0f5b      	lsrs	r3, r3, #29
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	f003 0307 	and.w	r3, r3, #7
 8009bc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bc6:	7bbb      	ldrb	r3, [r7, #14]
 8009bc8:	7b3a      	ldrb	r2, [r7, #12]
 8009bca:	4911      	ldr	r1, [pc, #68]	; (8009c10 <UARTEx_SetNbDataToProcess+0x94>)
 8009bcc:	5c8a      	ldrb	r2, [r1, r2]
 8009bce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009bd2:	7b3a      	ldrb	r2, [r7, #12]
 8009bd4:	490f      	ldr	r1, [pc, #60]	; (8009c14 <UARTEx_SetNbDataToProcess+0x98>)
 8009bd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009be4:	7bfb      	ldrb	r3, [r7, #15]
 8009be6:	7b7a      	ldrb	r2, [r7, #13]
 8009be8:	4909      	ldr	r1, [pc, #36]	; (8009c10 <UARTEx_SetNbDataToProcess+0x94>)
 8009bea:	5c8a      	ldrb	r2, [r1, r2]
 8009bec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009bf0:	7b7a      	ldrb	r2, [r7, #13]
 8009bf2:	4908      	ldr	r1, [pc, #32]	; (8009c14 <UARTEx_SetNbDataToProcess+0x98>)
 8009bf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bf6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c02:	bf00      	nop
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	0800add0 	.word	0x0800add0
 8009c14:	0800add8 	.word	0x0800add8

08009c18 <std>:
 8009c18:	2300      	movs	r3, #0
 8009c1a:	b510      	push	{r4, lr}
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	6083      	str	r3, [r0, #8]
 8009c20:	8181      	strh	r1, [r0, #12]
 8009c22:	4619      	mov	r1, r3
 8009c24:	6643      	str	r3, [r0, #100]	; 0x64
 8009c26:	81c2      	strh	r2, [r0, #14]
 8009c28:	2208      	movs	r2, #8
 8009c2a:	6183      	str	r3, [r0, #24]
 8009c2c:	e9c0 3300 	strd	r3, r3, [r0]
 8009c30:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c34:	305c      	adds	r0, #92	; 0x5c
 8009c36:	f000 f9ff 	bl	800a038 <memset>
 8009c3a:	4b0d      	ldr	r3, [pc, #52]	; (8009c70 <std+0x58>)
 8009c3c:	6224      	str	r4, [r4, #32]
 8009c3e:	6263      	str	r3, [r4, #36]	; 0x24
 8009c40:	4b0c      	ldr	r3, [pc, #48]	; (8009c74 <std+0x5c>)
 8009c42:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c44:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <std+0x60>)
 8009c46:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c48:	4b0c      	ldr	r3, [pc, #48]	; (8009c7c <std+0x64>)
 8009c4a:	6323      	str	r3, [r4, #48]	; 0x30
 8009c4c:	4b0c      	ldr	r3, [pc, #48]	; (8009c80 <std+0x68>)
 8009c4e:	429c      	cmp	r4, r3
 8009c50:	d006      	beq.n	8009c60 <std+0x48>
 8009c52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009c56:	4294      	cmp	r4, r2
 8009c58:	d002      	beq.n	8009c60 <std+0x48>
 8009c5a:	33d0      	adds	r3, #208	; 0xd0
 8009c5c:	429c      	cmp	r4, r3
 8009c5e:	d105      	bne.n	8009c6c <std+0x54>
 8009c60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c68:	f000 ba5e 	b.w	800a128 <__retarget_lock_init_recursive>
 8009c6c:	bd10      	pop	{r4, pc}
 8009c6e:	bf00      	nop
 8009c70:	08009e89 	.word	0x08009e89
 8009c74:	08009eab 	.word	0x08009eab
 8009c78:	08009ee3 	.word	0x08009ee3
 8009c7c:	08009f07 	.word	0x08009f07
 8009c80:	200001c8 	.word	0x200001c8

08009c84 <stdio_exit_handler>:
 8009c84:	4a02      	ldr	r2, [pc, #8]	; (8009c90 <stdio_exit_handler+0xc>)
 8009c86:	4903      	ldr	r1, [pc, #12]	; (8009c94 <stdio_exit_handler+0x10>)
 8009c88:	4803      	ldr	r0, [pc, #12]	; (8009c98 <stdio_exit_handler+0x14>)
 8009c8a:	f000 b869 	b.w	8009d60 <_fwalk_sglue>
 8009c8e:	bf00      	nop
 8009c90:	20000010 	.word	0x20000010
 8009c94:	0800a9d5 	.word	0x0800a9d5
 8009c98:	2000001c 	.word	0x2000001c

08009c9c <cleanup_stdio>:
 8009c9c:	6841      	ldr	r1, [r0, #4]
 8009c9e:	4b0c      	ldr	r3, [pc, #48]	; (8009cd0 <cleanup_stdio+0x34>)
 8009ca0:	4299      	cmp	r1, r3
 8009ca2:	b510      	push	{r4, lr}
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	d001      	beq.n	8009cac <cleanup_stdio+0x10>
 8009ca8:	f000 fe94 	bl	800a9d4 <_fflush_r>
 8009cac:	68a1      	ldr	r1, [r4, #8]
 8009cae:	4b09      	ldr	r3, [pc, #36]	; (8009cd4 <cleanup_stdio+0x38>)
 8009cb0:	4299      	cmp	r1, r3
 8009cb2:	d002      	beq.n	8009cba <cleanup_stdio+0x1e>
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f000 fe8d 	bl	800a9d4 <_fflush_r>
 8009cba:	68e1      	ldr	r1, [r4, #12]
 8009cbc:	4b06      	ldr	r3, [pc, #24]	; (8009cd8 <cleanup_stdio+0x3c>)
 8009cbe:	4299      	cmp	r1, r3
 8009cc0:	d004      	beq.n	8009ccc <cleanup_stdio+0x30>
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc8:	f000 be84 	b.w	800a9d4 <_fflush_r>
 8009ccc:	bd10      	pop	{r4, pc}
 8009cce:	bf00      	nop
 8009cd0:	200001c8 	.word	0x200001c8
 8009cd4:	20000230 	.word	0x20000230
 8009cd8:	20000298 	.word	0x20000298

08009cdc <global_stdio_init.part.0>:
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	4b0b      	ldr	r3, [pc, #44]	; (8009d0c <global_stdio_init.part.0+0x30>)
 8009ce0:	2104      	movs	r1, #4
 8009ce2:	4c0b      	ldr	r4, [pc, #44]	; (8009d10 <global_stdio_init.part.0+0x34>)
 8009ce4:	4a0b      	ldr	r2, [pc, #44]	; (8009d14 <global_stdio_init.part.0+0x38>)
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	601a      	str	r2, [r3, #0]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f7ff ff94 	bl	8009c18 <std>
 8009cf0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	2109      	movs	r1, #9
 8009cf8:	f7ff ff8e 	bl	8009c18 <std>
 8009cfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009d00:	2202      	movs	r2, #2
 8009d02:	2112      	movs	r1, #18
 8009d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d08:	f7ff bf86 	b.w	8009c18 <std>
 8009d0c:	20000300 	.word	0x20000300
 8009d10:	200001c8 	.word	0x200001c8
 8009d14:	08009c85 	.word	0x08009c85

08009d18 <__sfp_lock_acquire>:
 8009d18:	4801      	ldr	r0, [pc, #4]	; (8009d20 <__sfp_lock_acquire+0x8>)
 8009d1a:	f000 ba06 	b.w	800a12a <__retarget_lock_acquire_recursive>
 8009d1e:	bf00      	nop
 8009d20:	20000309 	.word	0x20000309

08009d24 <__sfp_lock_release>:
 8009d24:	4801      	ldr	r0, [pc, #4]	; (8009d2c <__sfp_lock_release+0x8>)
 8009d26:	f000 ba01 	b.w	800a12c <__retarget_lock_release_recursive>
 8009d2a:	bf00      	nop
 8009d2c:	20000309 	.word	0x20000309

08009d30 <__sinit>:
 8009d30:	b510      	push	{r4, lr}
 8009d32:	4604      	mov	r4, r0
 8009d34:	f7ff fff0 	bl	8009d18 <__sfp_lock_acquire>
 8009d38:	6a23      	ldr	r3, [r4, #32]
 8009d3a:	b11b      	cbz	r3, 8009d44 <__sinit+0x14>
 8009d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d40:	f7ff bff0 	b.w	8009d24 <__sfp_lock_release>
 8009d44:	4b04      	ldr	r3, [pc, #16]	; (8009d58 <__sinit+0x28>)
 8009d46:	6223      	str	r3, [r4, #32]
 8009d48:	4b04      	ldr	r3, [pc, #16]	; (8009d5c <__sinit+0x2c>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1f5      	bne.n	8009d3c <__sinit+0xc>
 8009d50:	f7ff ffc4 	bl	8009cdc <global_stdio_init.part.0>
 8009d54:	e7f2      	b.n	8009d3c <__sinit+0xc>
 8009d56:	bf00      	nop
 8009d58:	08009c9d 	.word	0x08009c9d
 8009d5c:	20000300 	.word	0x20000300

08009d60 <_fwalk_sglue>:
 8009d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d64:	4607      	mov	r7, r0
 8009d66:	4688      	mov	r8, r1
 8009d68:	4614      	mov	r4, r2
 8009d6a:	2600      	movs	r6, #0
 8009d6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d70:	f1b9 0901 	subs.w	r9, r9, #1
 8009d74:	d505      	bpl.n	8009d82 <_fwalk_sglue+0x22>
 8009d76:	6824      	ldr	r4, [r4, #0]
 8009d78:	2c00      	cmp	r4, #0
 8009d7a:	d1f7      	bne.n	8009d6c <_fwalk_sglue+0xc>
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d82:	89ab      	ldrh	r3, [r5, #12]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d907      	bls.n	8009d98 <_fwalk_sglue+0x38>
 8009d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	d003      	beq.n	8009d98 <_fwalk_sglue+0x38>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4638      	mov	r0, r7
 8009d94:	47c0      	blx	r8
 8009d96:	4306      	orrs	r6, r0
 8009d98:	3568      	adds	r5, #104	; 0x68
 8009d9a:	e7e9      	b.n	8009d70 <_fwalk_sglue+0x10>

08009d9c <iprintf>:
 8009d9c:	b40f      	push	{r0, r1, r2, r3}
 8009d9e:	b507      	push	{r0, r1, r2, lr}
 8009da0:	4906      	ldr	r1, [pc, #24]	; (8009dbc <iprintf+0x20>)
 8009da2:	ab04      	add	r3, sp, #16
 8009da4:	6808      	ldr	r0, [r1, #0]
 8009da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009daa:	6881      	ldr	r1, [r0, #8]
 8009dac:	9301      	str	r3, [sp, #4]
 8009dae:	f000 fae1 	bl	800a374 <_vfiprintf_r>
 8009db2:	b003      	add	sp, #12
 8009db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009db8:	b004      	add	sp, #16
 8009dba:	4770      	bx	lr
 8009dbc:	20000068 	.word	0x20000068

08009dc0 <putchar>:
 8009dc0:	4b02      	ldr	r3, [pc, #8]	; (8009dcc <putchar+0xc>)
 8009dc2:	4601      	mov	r1, r0
 8009dc4:	6818      	ldr	r0, [r3, #0]
 8009dc6:	6882      	ldr	r2, [r0, #8]
 8009dc8:	f000 be8d 	b.w	800aae6 <_putc_r>
 8009dcc:	20000068 	.word	0x20000068

08009dd0 <_puts_r>:
 8009dd0:	6a03      	ldr	r3, [r0, #32]
 8009dd2:	b570      	push	{r4, r5, r6, lr}
 8009dd4:	4605      	mov	r5, r0
 8009dd6:	460e      	mov	r6, r1
 8009dd8:	6884      	ldr	r4, [r0, #8]
 8009dda:	b90b      	cbnz	r3, 8009de0 <_puts_r+0x10>
 8009ddc:	f7ff ffa8 	bl	8009d30 <__sinit>
 8009de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009de2:	07db      	lsls	r3, r3, #31
 8009de4:	d405      	bmi.n	8009df2 <_puts_r+0x22>
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	0598      	lsls	r0, r3, #22
 8009dea:	d402      	bmi.n	8009df2 <_puts_r+0x22>
 8009dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dee:	f000 f99c 	bl	800a12a <__retarget_lock_acquire_recursive>
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	0719      	lsls	r1, r3, #28
 8009df6:	d513      	bpl.n	8009e20 <_puts_r+0x50>
 8009df8:	6923      	ldr	r3, [r4, #16]
 8009dfa:	b18b      	cbz	r3, 8009e20 <_puts_r+0x50>
 8009dfc:	3e01      	subs	r6, #1
 8009dfe:	68a3      	ldr	r3, [r4, #8]
 8009e00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e04:	3b01      	subs	r3, #1
 8009e06:	60a3      	str	r3, [r4, #8]
 8009e08:	b9e9      	cbnz	r1, 8009e46 <_puts_r+0x76>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	da2e      	bge.n	8009e6c <_puts_r+0x9c>
 8009e0e:	4622      	mov	r2, r4
 8009e10:	210a      	movs	r1, #10
 8009e12:	4628      	mov	r0, r5
 8009e14:	f000 f87b 	bl	8009f0e <__swbuf_r>
 8009e18:	3001      	adds	r0, #1
 8009e1a:	d007      	beq.n	8009e2c <_puts_r+0x5c>
 8009e1c:	250a      	movs	r5, #10
 8009e1e:	e007      	b.n	8009e30 <_puts_r+0x60>
 8009e20:	4621      	mov	r1, r4
 8009e22:	4628      	mov	r0, r5
 8009e24:	f000 f8b0 	bl	8009f88 <__swsetup_r>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d0e7      	beq.n	8009dfc <_puts_r+0x2c>
 8009e2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009e30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e32:	07da      	lsls	r2, r3, #31
 8009e34:	d405      	bmi.n	8009e42 <_puts_r+0x72>
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	059b      	lsls	r3, r3, #22
 8009e3a:	d402      	bmi.n	8009e42 <_puts_r+0x72>
 8009e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e3e:	f000 f975 	bl	800a12c <__retarget_lock_release_recursive>
 8009e42:	4628      	mov	r0, r5
 8009e44:	bd70      	pop	{r4, r5, r6, pc}
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	da04      	bge.n	8009e54 <_puts_r+0x84>
 8009e4a:	69a2      	ldr	r2, [r4, #24]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	dc06      	bgt.n	8009e5e <_puts_r+0x8e>
 8009e50:	290a      	cmp	r1, #10
 8009e52:	d004      	beq.n	8009e5e <_puts_r+0x8e>
 8009e54:	6823      	ldr	r3, [r4, #0]
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	6022      	str	r2, [r4, #0]
 8009e5a:	7019      	strb	r1, [r3, #0]
 8009e5c:	e7cf      	b.n	8009dfe <_puts_r+0x2e>
 8009e5e:	4622      	mov	r2, r4
 8009e60:	4628      	mov	r0, r5
 8009e62:	f000 f854 	bl	8009f0e <__swbuf_r>
 8009e66:	3001      	adds	r0, #1
 8009e68:	d1c9      	bne.n	8009dfe <_puts_r+0x2e>
 8009e6a:	e7df      	b.n	8009e2c <_puts_r+0x5c>
 8009e6c:	6823      	ldr	r3, [r4, #0]
 8009e6e:	250a      	movs	r5, #10
 8009e70:	1c5a      	adds	r2, r3, #1
 8009e72:	6022      	str	r2, [r4, #0]
 8009e74:	701d      	strb	r5, [r3, #0]
 8009e76:	e7db      	b.n	8009e30 <_puts_r+0x60>

08009e78 <puts>:
 8009e78:	4b02      	ldr	r3, [pc, #8]	; (8009e84 <puts+0xc>)
 8009e7a:	4601      	mov	r1, r0
 8009e7c:	6818      	ldr	r0, [r3, #0]
 8009e7e:	f7ff bfa7 	b.w	8009dd0 <_puts_r>
 8009e82:	bf00      	nop
 8009e84:	20000068 	.word	0x20000068

08009e88 <__sread>:
 8009e88:	b510      	push	{r4, lr}
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e90:	f000 f8fc 	bl	800a08c <_read_r>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	bfab      	itete	ge
 8009e98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8009e9c:	181b      	addge	r3, r3, r0
 8009e9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ea2:	bfac      	ite	ge
 8009ea4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ea6:	81a3      	strhlt	r3, [r4, #12]
 8009ea8:	bd10      	pop	{r4, pc}

08009eaa <__swrite>:
 8009eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eae:	461f      	mov	r7, r3
 8009eb0:	898b      	ldrh	r3, [r1, #12]
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	460c      	mov	r4, r1
 8009eb6:	05db      	lsls	r3, r3, #23
 8009eb8:	4616      	mov	r6, r2
 8009eba:	d505      	bpl.n	8009ec8 <__swrite+0x1e>
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec4:	f000 f8d0 	bl	800a068 <_lseek_r>
 8009ec8:	89a3      	ldrh	r3, [r4, #12]
 8009eca:	4632      	mov	r2, r6
 8009ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed0:	4628      	mov	r0, r5
 8009ed2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	463b      	mov	r3, r7
 8009eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ede:	f000 b8e7 	b.w	800a0b0 <_write_r>

08009ee2 <__sseek>:
 8009ee2:	b510      	push	{r4, lr}
 8009ee4:	460c      	mov	r4, r1
 8009ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eea:	f000 f8bd 	bl	800a068 <_lseek_r>
 8009eee:	1c43      	adds	r3, r0, #1
 8009ef0:	89a3      	ldrh	r3, [r4, #12]
 8009ef2:	bf15      	itete	ne
 8009ef4:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ef6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009efa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009efe:	81a3      	strheq	r3, [r4, #12]
 8009f00:	bf18      	it	ne
 8009f02:	81a3      	strhne	r3, [r4, #12]
 8009f04:	bd10      	pop	{r4, pc}

08009f06 <__sclose>:
 8009f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f0a:	f000 b89d 	b.w	800a048 <_close_r>

08009f0e <__swbuf_r>:
 8009f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f10:	460e      	mov	r6, r1
 8009f12:	4614      	mov	r4, r2
 8009f14:	4605      	mov	r5, r0
 8009f16:	b118      	cbz	r0, 8009f20 <__swbuf_r+0x12>
 8009f18:	6a03      	ldr	r3, [r0, #32]
 8009f1a:	b90b      	cbnz	r3, 8009f20 <__swbuf_r+0x12>
 8009f1c:	f7ff ff08 	bl	8009d30 <__sinit>
 8009f20:	69a3      	ldr	r3, [r4, #24]
 8009f22:	60a3      	str	r3, [r4, #8]
 8009f24:	89a3      	ldrh	r3, [r4, #12]
 8009f26:	071a      	lsls	r2, r3, #28
 8009f28:	d525      	bpl.n	8009f76 <__swbuf_r+0x68>
 8009f2a:	6923      	ldr	r3, [r4, #16]
 8009f2c:	b31b      	cbz	r3, 8009f76 <__swbuf_r+0x68>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	b2f6      	uxtb	r6, r6
 8009f32:	6922      	ldr	r2, [r4, #16]
 8009f34:	4637      	mov	r7, r6
 8009f36:	1a98      	subs	r0, r3, r2
 8009f38:	6963      	ldr	r3, [r4, #20]
 8009f3a:	4283      	cmp	r3, r0
 8009f3c:	dc04      	bgt.n	8009f48 <__swbuf_r+0x3a>
 8009f3e:	4621      	mov	r1, r4
 8009f40:	4628      	mov	r0, r5
 8009f42:	f000 fd47 	bl	800a9d4 <_fflush_r>
 8009f46:	b9e0      	cbnz	r0, 8009f82 <__swbuf_r+0x74>
 8009f48:	68a3      	ldr	r3, [r4, #8]
 8009f4a:	3b01      	subs	r3, #1
 8009f4c:	60a3      	str	r3, [r4, #8]
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	6022      	str	r2, [r4, #0]
 8009f54:	701e      	strb	r6, [r3, #0]
 8009f56:	1c43      	adds	r3, r0, #1
 8009f58:	6962      	ldr	r2, [r4, #20]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d004      	beq.n	8009f68 <__swbuf_r+0x5a>
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	07db      	lsls	r3, r3, #31
 8009f62:	d506      	bpl.n	8009f72 <__swbuf_r+0x64>
 8009f64:	2e0a      	cmp	r6, #10
 8009f66:	d104      	bne.n	8009f72 <__swbuf_r+0x64>
 8009f68:	4621      	mov	r1, r4
 8009f6a:	4628      	mov	r0, r5
 8009f6c:	f000 fd32 	bl	800a9d4 <_fflush_r>
 8009f70:	b938      	cbnz	r0, 8009f82 <__swbuf_r+0x74>
 8009f72:	4638      	mov	r0, r7
 8009f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f76:	4621      	mov	r1, r4
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f000 f805 	bl	8009f88 <__swsetup_r>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	d0d5      	beq.n	8009f2e <__swbuf_r+0x20>
 8009f82:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009f86:	e7f4      	b.n	8009f72 <__swbuf_r+0x64>

08009f88 <__swsetup_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4b2a      	ldr	r3, [pc, #168]	; (800a034 <__swsetup_r+0xac>)
 8009f8c:	4605      	mov	r5, r0
 8009f8e:	460c      	mov	r4, r1
 8009f90:	6818      	ldr	r0, [r3, #0]
 8009f92:	b118      	cbz	r0, 8009f9c <__swsetup_r+0x14>
 8009f94:	6a03      	ldr	r3, [r0, #32]
 8009f96:	b90b      	cbnz	r3, 8009f9c <__swsetup_r+0x14>
 8009f98:	f7ff feca 	bl	8009d30 <__sinit>
 8009f9c:	89a3      	ldrh	r3, [r4, #12]
 8009f9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fa2:	0718      	lsls	r0, r3, #28
 8009fa4:	d422      	bmi.n	8009fec <__swsetup_r+0x64>
 8009fa6:	06d9      	lsls	r1, r3, #27
 8009fa8:	d407      	bmi.n	8009fba <__swsetup_r+0x32>
 8009faa:	2309      	movs	r3, #9
 8009fac:	602b      	str	r3, [r5, #0]
 8009fae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fb6:	81a3      	strh	r3, [r4, #12]
 8009fb8:	e034      	b.n	800a024 <__swsetup_r+0x9c>
 8009fba:	0758      	lsls	r0, r3, #29
 8009fbc:	d512      	bpl.n	8009fe4 <__swsetup_r+0x5c>
 8009fbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fc0:	b141      	cbz	r1, 8009fd4 <__swsetup_r+0x4c>
 8009fc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009fc6:	4299      	cmp	r1, r3
 8009fc8:	d002      	beq.n	8009fd0 <__swsetup_r+0x48>
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f000 f8b0 	bl	800a130 <_free_r>
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	6363      	str	r3, [r4, #52]	; 0x34
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fda:	81a3      	strh	r3, [r4, #12]
 8009fdc:	2300      	movs	r3, #0
 8009fde:	6063      	str	r3, [r4, #4]
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	6023      	str	r3, [r4, #0]
 8009fe4:	89a3      	ldrh	r3, [r4, #12]
 8009fe6:	f043 0308 	orr.w	r3, r3, #8
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	6923      	ldr	r3, [r4, #16]
 8009fee:	b94b      	cbnz	r3, 800a004 <__swsetup_r+0x7c>
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ffa:	d003      	beq.n	800a004 <__swsetup_r+0x7c>
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	4628      	mov	r0, r5
 800a000:	f000 fd35 	bl	800aa6e <__smakebuf_r>
 800a004:	89a0      	ldrh	r0, [r4, #12]
 800a006:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a00a:	f010 0301 	ands.w	r3, r0, #1
 800a00e:	d00a      	beq.n	800a026 <__swsetup_r+0x9e>
 800a010:	2300      	movs	r3, #0
 800a012:	60a3      	str	r3, [r4, #8]
 800a014:	6963      	ldr	r3, [r4, #20]
 800a016:	425b      	negs	r3, r3
 800a018:	61a3      	str	r3, [r4, #24]
 800a01a:	6923      	ldr	r3, [r4, #16]
 800a01c:	b943      	cbnz	r3, 800a030 <__swsetup_r+0xa8>
 800a01e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a022:	d1c4      	bne.n	8009fae <__swsetup_r+0x26>
 800a024:	bd38      	pop	{r3, r4, r5, pc}
 800a026:	0781      	lsls	r1, r0, #30
 800a028:	bf58      	it	pl
 800a02a:	6963      	ldrpl	r3, [r4, #20]
 800a02c:	60a3      	str	r3, [r4, #8]
 800a02e:	e7f4      	b.n	800a01a <__swsetup_r+0x92>
 800a030:	2000      	movs	r0, #0
 800a032:	e7f7      	b.n	800a024 <__swsetup_r+0x9c>
 800a034:	20000068 	.word	0x20000068

0800a038 <memset>:
 800a038:	4402      	add	r2, r0
 800a03a:	4603      	mov	r3, r0
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d100      	bne.n	800a042 <memset+0xa>
 800a040:	4770      	bx	lr
 800a042:	f803 1b01 	strb.w	r1, [r3], #1
 800a046:	e7f9      	b.n	800a03c <memset+0x4>

0800a048 <_close_r>:
 800a048:	b538      	push	{r3, r4, r5, lr}
 800a04a:	2300      	movs	r3, #0
 800a04c:	4d05      	ldr	r5, [pc, #20]	; (800a064 <_close_r+0x1c>)
 800a04e:	4604      	mov	r4, r0
 800a050:	4608      	mov	r0, r1
 800a052:	602b      	str	r3, [r5, #0]
 800a054:	f7f7 fb38 	bl	80016c8 <_close>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	d102      	bne.n	800a062 <_close_r+0x1a>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	b103      	cbz	r3, 800a062 <_close_r+0x1a>
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	20000304 	.word	0x20000304

0800a068 <_lseek_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	4604      	mov	r4, r0
 800a06c:	4d06      	ldr	r5, [pc, #24]	; (800a088 <_lseek_r+0x20>)
 800a06e:	4608      	mov	r0, r1
 800a070:	4611      	mov	r1, r2
 800a072:	2200      	movs	r2, #0
 800a074:	602a      	str	r2, [r5, #0]
 800a076:	461a      	mov	r2, r3
 800a078:	f7f7 fb4d 	bl	8001716 <_lseek>
 800a07c:	1c43      	adds	r3, r0, #1
 800a07e:	d102      	bne.n	800a086 <_lseek_r+0x1e>
 800a080:	682b      	ldr	r3, [r5, #0]
 800a082:	b103      	cbz	r3, 800a086 <_lseek_r+0x1e>
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	bd38      	pop	{r3, r4, r5, pc}
 800a088:	20000304 	.word	0x20000304

0800a08c <_read_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4604      	mov	r4, r0
 800a090:	4d06      	ldr	r5, [pc, #24]	; (800a0ac <_read_r+0x20>)
 800a092:	4608      	mov	r0, r1
 800a094:	4611      	mov	r1, r2
 800a096:	2200      	movs	r2, #0
 800a098:	602a      	str	r2, [r5, #0]
 800a09a:	461a      	mov	r2, r3
 800a09c:	f7f7 fadb 	bl	8001656 <_read>
 800a0a0:	1c43      	adds	r3, r0, #1
 800a0a2:	d102      	bne.n	800a0aa <_read_r+0x1e>
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	b103      	cbz	r3, 800a0aa <_read_r+0x1e>
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	bd38      	pop	{r3, r4, r5, pc}
 800a0ac:	20000304 	.word	0x20000304

0800a0b0 <_write_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	4d06      	ldr	r5, [pc, #24]	; (800a0d0 <_write_r+0x20>)
 800a0b6:	4608      	mov	r0, r1
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	602a      	str	r2, [r5, #0]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	f7f7 fae6 	bl	8001690 <_write>
 800a0c4:	1c43      	adds	r3, r0, #1
 800a0c6:	d102      	bne.n	800a0ce <_write_r+0x1e>
 800a0c8:	682b      	ldr	r3, [r5, #0]
 800a0ca:	b103      	cbz	r3, 800a0ce <_write_r+0x1e>
 800a0cc:	6023      	str	r3, [r4, #0]
 800a0ce:	bd38      	pop	{r3, r4, r5, pc}
 800a0d0:	20000304 	.word	0x20000304

0800a0d4 <__errno>:
 800a0d4:	4b01      	ldr	r3, [pc, #4]	; (800a0dc <__errno+0x8>)
 800a0d6:	6818      	ldr	r0, [r3, #0]
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	20000068 	.word	0x20000068

0800a0e0 <__libc_init_array>:
 800a0e0:	b570      	push	{r4, r5, r6, lr}
 800a0e2:	4d0d      	ldr	r5, [pc, #52]	; (800a118 <__libc_init_array+0x38>)
 800a0e4:	2600      	movs	r6, #0
 800a0e6:	4c0d      	ldr	r4, [pc, #52]	; (800a11c <__libc_init_array+0x3c>)
 800a0e8:	1b64      	subs	r4, r4, r5
 800a0ea:	10a4      	asrs	r4, r4, #2
 800a0ec:	42a6      	cmp	r6, r4
 800a0ee:	d109      	bne.n	800a104 <__libc_init_array+0x24>
 800a0f0:	4d0b      	ldr	r5, [pc, #44]	; (800a120 <__libc_init_array+0x40>)
 800a0f2:	2600      	movs	r6, #0
 800a0f4:	4c0b      	ldr	r4, [pc, #44]	; (800a124 <__libc_init_array+0x44>)
 800a0f6:	f000 fd6b 	bl	800abd0 <_init>
 800a0fa:	1b64      	subs	r4, r4, r5
 800a0fc:	10a4      	asrs	r4, r4, #2
 800a0fe:	42a6      	cmp	r6, r4
 800a100:	d105      	bne.n	800a10e <__libc_init_array+0x2e>
 800a102:	bd70      	pop	{r4, r5, r6, pc}
 800a104:	f855 3b04 	ldr.w	r3, [r5], #4
 800a108:	3601      	adds	r6, #1
 800a10a:	4798      	blx	r3
 800a10c:	e7ee      	b.n	800a0ec <__libc_init_array+0xc>
 800a10e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a112:	3601      	adds	r6, #1
 800a114:	4798      	blx	r3
 800a116:	e7f2      	b.n	800a0fe <__libc_init_array+0x1e>
 800a118:	0800ae1c 	.word	0x0800ae1c
 800a11c:	0800ae1c 	.word	0x0800ae1c
 800a120:	0800ae1c 	.word	0x0800ae1c
 800a124:	0800ae20 	.word	0x0800ae20

0800a128 <__retarget_lock_init_recursive>:
 800a128:	4770      	bx	lr

0800a12a <__retarget_lock_acquire_recursive>:
 800a12a:	4770      	bx	lr

0800a12c <__retarget_lock_release_recursive>:
 800a12c:	4770      	bx	lr
	...

0800a130 <_free_r>:
 800a130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a132:	2900      	cmp	r1, #0
 800a134:	d043      	beq.n	800a1be <_free_r+0x8e>
 800a136:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a13a:	1f0c      	subs	r4, r1, #4
 800a13c:	9001      	str	r0, [sp, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	bfb8      	it	lt
 800a142:	18e4      	addlt	r4, r4, r3
 800a144:	f000 f8e0 	bl	800a308 <__malloc_lock>
 800a148:	4a1e      	ldr	r2, [pc, #120]	; (800a1c4 <_free_r+0x94>)
 800a14a:	9801      	ldr	r0, [sp, #4]
 800a14c:	6813      	ldr	r3, [r2, #0]
 800a14e:	b933      	cbnz	r3, 800a15e <_free_r+0x2e>
 800a150:	6063      	str	r3, [r4, #4]
 800a152:	6014      	str	r4, [r2, #0]
 800a154:	b003      	add	sp, #12
 800a156:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a15a:	f000 b8db 	b.w	800a314 <__malloc_unlock>
 800a15e:	42a3      	cmp	r3, r4
 800a160:	d908      	bls.n	800a174 <_free_r+0x44>
 800a162:	6825      	ldr	r5, [r4, #0]
 800a164:	1961      	adds	r1, r4, r5
 800a166:	428b      	cmp	r3, r1
 800a168:	bf01      	itttt	eq
 800a16a:	6819      	ldreq	r1, [r3, #0]
 800a16c:	685b      	ldreq	r3, [r3, #4]
 800a16e:	1949      	addeq	r1, r1, r5
 800a170:	6021      	streq	r1, [r4, #0]
 800a172:	e7ed      	b.n	800a150 <_free_r+0x20>
 800a174:	461a      	mov	r2, r3
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	b10b      	cbz	r3, 800a17e <_free_r+0x4e>
 800a17a:	42a3      	cmp	r3, r4
 800a17c:	d9fa      	bls.n	800a174 <_free_r+0x44>
 800a17e:	6811      	ldr	r1, [r2, #0]
 800a180:	1855      	adds	r5, r2, r1
 800a182:	42a5      	cmp	r5, r4
 800a184:	d10b      	bne.n	800a19e <_free_r+0x6e>
 800a186:	6824      	ldr	r4, [r4, #0]
 800a188:	4421      	add	r1, r4
 800a18a:	1854      	adds	r4, r2, r1
 800a18c:	6011      	str	r1, [r2, #0]
 800a18e:	42a3      	cmp	r3, r4
 800a190:	d1e0      	bne.n	800a154 <_free_r+0x24>
 800a192:	681c      	ldr	r4, [r3, #0]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	440c      	add	r4, r1
 800a198:	6053      	str	r3, [r2, #4]
 800a19a:	6014      	str	r4, [r2, #0]
 800a19c:	e7da      	b.n	800a154 <_free_r+0x24>
 800a19e:	d902      	bls.n	800a1a6 <_free_r+0x76>
 800a1a0:	230c      	movs	r3, #12
 800a1a2:	6003      	str	r3, [r0, #0]
 800a1a4:	e7d6      	b.n	800a154 <_free_r+0x24>
 800a1a6:	6825      	ldr	r5, [r4, #0]
 800a1a8:	1961      	adds	r1, r4, r5
 800a1aa:	428b      	cmp	r3, r1
 800a1ac:	bf02      	ittt	eq
 800a1ae:	6819      	ldreq	r1, [r3, #0]
 800a1b0:	685b      	ldreq	r3, [r3, #4]
 800a1b2:	1949      	addeq	r1, r1, r5
 800a1b4:	6063      	str	r3, [r4, #4]
 800a1b6:	bf08      	it	eq
 800a1b8:	6021      	streq	r1, [r4, #0]
 800a1ba:	6054      	str	r4, [r2, #4]
 800a1bc:	e7ca      	b.n	800a154 <_free_r+0x24>
 800a1be:	b003      	add	sp, #12
 800a1c0:	bd30      	pop	{r4, r5, pc}
 800a1c2:	bf00      	nop
 800a1c4:	2000030c 	.word	0x2000030c

0800a1c8 <sbrk_aligned>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	4e0e      	ldr	r6, [pc, #56]	; (800a204 <sbrk_aligned+0x3c>)
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	4605      	mov	r5, r0
 800a1d0:	6831      	ldr	r1, [r6, #0]
 800a1d2:	b911      	cbnz	r1, 800a1da <sbrk_aligned+0x12>
 800a1d4:	f000 fcde 	bl	800ab94 <_sbrk_r>
 800a1d8:	6030      	str	r0, [r6, #0]
 800a1da:	4621      	mov	r1, r4
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f000 fcd9 	bl	800ab94 <_sbrk_r>
 800a1e2:	1c43      	adds	r3, r0, #1
 800a1e4:	d00a      	beq.n	800a1fc <sbrk_aligned+0x34>
 800a1e6:	1cc4      	adds	r4, r0, #3
 800a1e8:	f024 0403 	bic.w	r4, r4, #3
 800a1ec:	42a0      	cmp	r0, r4
 800a1ee:	d007      	beq.n	800a200 <sbrk_aligned+0x38>
 800a1f0:	1a21      	subs	r1, r4, r0
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	f000 fcce 	bl	800ab94 <_sbrk_r>
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	d101      	bne.n	800a200 <sbrk_aligned+0x38>
 800a1fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a200:	4620      	mov	r0, r4
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	20000310 	.word	0x20000310

0800a208 <_malloc_r>:
 800a208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a20c:	1ccd      	adds	r5, r1, #3
 800a20e:	4607      	mov	r7, r0
 800a210:	f025 0503 	bic.w	r5, r5, #3
 800a214:	3508      	adds	r5, #8
 800a216:	2d0c      	cmp	r5, #12
 800a218:	bf38      	it	cc
 800a21a:	250c      	movcc	r5, #12
 800a21c:	2d00      	cmp	r5, #0
 800a21e:	db01      	blt.n	800a224 <_malloc_r+0x1c>
 800a220:	42a9      	cmp	r1, r5
 800a222:	d905      	bls.n	800a230 <_malloc_r+0x28>
 800a224:	230c      	movs	r3, #12
 800a226:	2600      	movs	r6, #0
 800a228:	603b      	str	r3, [r7, #0]
 800a22a:	4630      	mov	r0, r6
 800a22c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a230:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a304 <_malloc_r+0xfc>
 800a234:	f000 f868 	bl	800a308 <__malloc_lock>
 800a238:	f8d8 3000 	ldr.w	r3, [r8]
 800a23c:	461c      	mov	r4, r3
 800a23e:	bb5c      	cbnz	r4, 800a298 <_malloc_r+0x90>
 800a240:	4629      	mov	r1, r5
 800a242:	4638      	mov	r0, r7
 800a244:	f7ff ffc0 	bl	800a1c8 <sbrk_aligned>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	4604      	mov	r4, r0
 800a24c:	d155      	bne.n	800a2fa <_malloc_r+0xf2>
 800a24e:	f8d8 4000 	ldr.w	r4, [r8]
 800a252:	4626      	mov	r6, r4
 800a254:	2e00      	cmp	r6, #0
 800a256:	d145      	bne.n	800a2e4 <_malloc_r+0xdc>
 800a258:	2c00      	cmp	r4, #0
 800a25a:	d048      	beq.n	800a2ee <_malloc_r+0xe6>
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	4631      	mov	r1, r6
 800a260:	4638      	mov	r0, r7
 800a262:	eb04 0903 	add.w	r9, r4, r3
 800a266:	f000 fc95 	bl	800ab94 <_sbrk_r>
 800a26a:	4581      	cmp	r9, r0
 800a26c:	d13f      	bne.n	800a2ee <_malloc_r+0xe6>
 800a26e:	6821      	ldr	r1, [r4, #0]
 800a270:	4638      	mov	r0, r7
 800a272:	1a6d      	subs	r5, r5, r1
 800a274:	4629      	mov	r1, r5
 800a276:	f7ff ffa7 	bl	800a1c8 <sbrk_aligned>
 800a27a:	3001      	adds	r0, #1
 800a27c:	d037      	beq.n	800a2ee <_malloc_r+0xe6>
 800a27e:	6823      	ldr	r3, [r4, #0]
 800a280:	442b      	add	r3, r5
 800a282:	6023      	str	r3, [r4, #0]
 800a284:	f8d8 3000 	ldr.w	r3, [r8]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d038      	beq.n	800a2fe <_malloc_r+0xf6>
 800a28c:	685a      	ldr	r2, [r3, #4]
 800a28e:	42a2      	cmp	r2, r4
 800a290:	d12b      	bne.n	800a2ea <_malloc_r+0xe2>
 800a292:	2200      	movs	r2, #0
 800a294:	605a      	str	r2, [r3, #4]
 800a296:	e00f      	b.n	800a2b8 <_malloc_r+0xb0>
 800a298:	6822      	ldr	r2, [r4, #0]
 800a29a:	1b52      	subs	r2, r2, r5
 800a29c:	d41f      	bmi.n	800a2de <_malloc_r+0xd6>
 800a29e:	2a0b      	cmp	r2, #11
 800a2a0:	d917      	bls.n	800a2d2 <_malloc_r+0xca>
 800a2a2:	1961      	adds	r1, r4, r5
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	6025      	str	r5, [r4, #0]
 800a2a8:	bf18      	it	ne
 800a2aa:	6059      	strne	r1, [r3, #4]
 800a2ac:	6863      	ldr	r3, [r4, #4]
 800a2ae:	bf08      	it	eq
 800a2b0:	f8c8 1000 	streq.w	r1, [r8]
 800a2b4:	5162      	str	r2, [r4, r5]
 800a2b6:	604b      	str	r3, [r1, #4]
 800a2b8:	f104 060b 	add.w	r6, r4, #11
 800a2bc:	4638      	mov	r0, r7
 800a2be:	f000 f829 	bl	800a314 <__malloc_unlock>
 800a2c2:	1d23      	adds	r3, r4, #4
 800a2c4:	f026 0607 	bic.w	r6, r6, #7
 800a2c8:	1af2      	subs	r2, r6, r3
 800a2ca:	d0ae      	beq.n	800a22a <_malloc_r+0x22>
 800a2cc:	1b9b      	subs	r3, r3, r6
 800a2ce:	50a3      	str	r3, [r4, r2]
 800a2d0:	e7ab      	b.n	800a22a <_malloc_r+0x22>
 800a2d2:	42a3      	cmp	r3, r4
 800a2d4:	6862      	ldr	r2, [r4, #4]
 800a2d6:	d1dd      	bne.n	800a294 <_malloc_r+0x8c>
 800a2d8:	f8c8 2000 	str.w	r2, [r8]
 800a2dc:	e7ec      	b.n	800a2b8 <_malloc_r+0xb0>
 800a2de:	4623      	mov	r3, r4
 800a2e0:	6864      	ldr	r4, [r4, #4]
 800a2e2:	e7ac      	b.n	800a23e <_malloc_r+0x36>
 800a2e4:	4634      	mov	r4, r6
 800a2e6:	6876      	ldr	r6, [r6, #4]
 800a2e8:	e7b4      	b.n	800a254 <_malloc_r+0x4c>
 800a2ea:	4613      	mov	r3, r2
 800a2ec:	e7cc      	b.n	800a288 <_malloc_r+0x80>
 800a2ee:	230c      	movs	r3, #12
 800a2f0:	4638      	mov	r0, r7
 800a2f2:	603b      	str	r3, [r7, #0]
 800a2f4:	f000 f80e 	bl	800a314 <__malloc_unlock>
 800a2f8:	e797      	b.n	800a22a <_malloc_r+0x22>
 800a2fa:	6025      	str	r5, [r4, #0]
 800a2fc:	e7dc      	b.n	800a2b8 <_malloc_r+0xb0>
 800a2fe:	605b      	str	r3, [r3, #4]
 800a300:	deff      	udf	#255	; 0xff
 800a302:	bf00      	nop
 800a304:	2000030c 	.word	0x2000030c

0800a308 <__malloc_lock>:
 800a308:	4801      	ldr	r0, [pc, #4]	; (800a310 <__malloc_lock+0x8>)
 800a30a:	f7ff bf0e 	b.w	800a12a <__retarget_lock_acquire_recursive>
 800a30e:	bf00      	nop
 800a310:	20000308 	.word	0x20000308

0800a314 <__malloc_unlock>:
 800a314:	4801      	ldr	r0, [pc, #4]	; (800a31c <__malloc_unlock+0x8>)
 800a316:	f7ff bf09 	b.w	800a12c <__retarget_lock_release_recursive>
 800a31a:	bf00      	nop
 800a31c:	20000308 	.word	0x20000308

0800a320 <__sfputc_r>:
 800a320:	6893      	ldr	r3, [r2, #8]
 800a322:	3b01      	subs	r3, #1
 800a324:	2b00      	cmp	r3, #0
 800a326:	6093      	str	r3, [r2, #8]
 800a328:	b410      	push	{r4}
 800a32a:	da08      	bge.n	800a33e <__sfputc_r+0x1e>
 800a32c:	6994      	ldr	r4, [r2, #24]
 800a32e:	42a3      	cmp	r3, r4
 800a330:	db01      	blt.n	800a336 <__sfputc_r+0x16>
 800a332:	290a      	cmp	r1, #10
 800a334:	d103      	bne.n	800a33e <__sfputc_r+0x1e>
 800a336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a33a:	f7ff bde8 	b.w	8009f0e <__swbuf_r>
 800a33e:	6813      	ldr	r3, [r2, #0]
 800a340:	1c58      	adds	r0, r3, #1
 800a342:	6010      	str	r0, [r2, #0]
 800a344:	4608      	mov	r0, r1
 800a346:	7019      	strb	r1, [r3, #0]
 800a348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <__sfputs_r>:
 800a34e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a350:	4606      	mov	r6, r0
 800a352:	460f      	mov	r7, r1
 800a354:	4614      	mov	r4, r2
 800a356:	18d5      	adds	r5, r2, r3
 800a358:	42ac      	cmp	r4, r5
 800a35a:	d101      	bne.n	800a360 <__sfputs_r+0x12>
 800a35c:	2000      	movs	r0, #0
 800a35e:	e007      	b.n	800a370 <__sfputs_r+0x22>
 800a360:	463a      	mov	r2, r7
 800a362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a366:	4630      	mov	r0, r6
 800a368:	f7ff ffda 	bl	800a320 <__sfputc_r>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d1f3      	bne.n	800a358 <__sfputs_r+0xa>
 800a370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a374 <_vfiprintf_r>:
 800a374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a378:	460d      	mov	r5, r1
 800a37a:	b09d      	sub	sp, #116	; 0x74
 800a37c:	4614      	mov	r4, r2
 800a37e:	4698      	mov	r8, r3
 800a380:	4606      	mov	r6, r0
 800a382:	b118      	cbz	r0, 800a38c <_vfiprintf_r+0x18>
 800a384:	6a03      	ldr	r3, [r0, #32]
 800a386:	b90b      	cbnz	r3, 800a38c <_vfiprintf_r+0x18>
 800a388:	f7ff fcd2 	bl	8009d30 <__sinit>
 800a38c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a38e:	07d9      	lsls	r1, r3, #31
 800a390:	d405      	bmi.n	800a39e <_vfiprintf_r+0x2a>
 800a392:	89ab      	ldrh	r3, [r5, #12]
 800a394:	059a      	lsls	r2, r3, #22
 800a396:	d402      	bmi.n	800a39e <_vfiprintf_r+0x2a>
 800a398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a39a:	f7ff fec6 	bl	800a12a <__retarget_lock_acquire_recursive>
 800a39e:	89ab      	ldrh	r3, [r5, #12]
 800a3a0:	071b      	lsls	r3, r3, #28
 800a3a2:	d501      	bpl.n	800a3a8 <_vfiprintf_r+0x34>
 800a3a4:	692b      	ldr	r3, [r5, #16]
 800a3a6:	b99b      	cbnz	r3, 800a3d0 <_vfiprintf_r+0x5c>
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f7ff fdec 	bl	8009f88 <__swsetup_r>
 800a3b0:	b170      	cbz	r0, 800a3d0 <_vfiprintf_r+0x5c>
 800a3b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3b4:	07dc      	lsls	r4, r3, #31
 800a3b6:	d504      	bpl.n	800a3c2 <_vfiprintf_r+0x4e>
 800a3b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3bc:	b01d      	add	sp, #116	; 0x74
 800a3be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c2:	89ab      	ldrh	r3, [r5, #12]
 800a3c4:	0598      	lsls	r0, r3, #22
 800a3c6:	d4f7      	bmi.n	800a3b8 <_vfiprintf_r+0x44>
 800a3c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3ca:	f7ff feaf 	bl	800a12c <__retarget_lock_release_recursive>
 800a3ce:	e7f3      	b.n	800a3b8 <_vfiprintf_r+0x44>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3d6:	f04f 0901 	mov.w	r9, #1
 800a3da:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800a594 <_vfiprintf_r+0x220>
 800a3de:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e0:	2320      	movs	r3, #32
 800a3e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3e6:	2330      	movs	r3, #48	; 0x30
 800a3e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3ec:	4623      	mov	r3, r4
 800a3ee:	469a      	mov	sl, r3
 800a3f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3f4:	b10a      	cbz	r2, 800a3fa <_vfiprintf_r+0x86>
 800a3f6:	2a25      	cmp	r2, #37	; 0x25
 800a3f8:	d1f9      	bne.n	800a3ee <_vfiprintf_r+0x7a>
 800a3fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a3fe:	d00b      	beq.n	800a418 <_vfiprintf_r+0xa4>
 800a400:	465b      	mov	r3, fp
 800a402:	4622      	mov	r2, r4
 800a404:	4629      	mov	r1, r5
 800a406:	4630      	mov	r0, r6
 800a408:	f7ff ffa1 	bl	800a34e <__sfputs_r>
 800a40c:	3001      	adds	r0, #1
 800a40e:	f000 80a9 	beq.w	800a564 <_vfiprintf_r+0x1f0>
 800a412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a414:	445a      	add	r2, fp
 800a416:	9209      	str	r2, [sp, #36]	; 0x24
 800a418:	f89a 3000 	ldrb.w	r3, [sl]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f000 80a1 	beq.w	800a564 <_vfiprintf_r+0x1f0>
 800a422:	2300      	movs	r3, #0
 800a424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a428:	f10a 0a01 	add.w	sl, sl, #1
 800a42c:	9304      	str	r3, [sp, #16]
 800a42e:	9307      	str	r3, [sp, #28]
 800a430:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a434:	931a      	str	r3, [sp, #104]	; 0x68
 800a436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a43a:	4654      	mov	r4, sl
 800a43c:	2205      	movs	r2, #5
 800a43e:	4855      	ldr	r0, [pc, #340]	; (800a594 <_vfiprintf_r+0x220>)
 800a440:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a444:	f000 fbb6 	bl	800abb4 <memchr>
 800a448:	9a04      	ldr	r2, [sp, #16]
 800a44a:	b9d8      	cbnz	r0, 800a484 <_vfiprintf_r+0x110>
 800a44c:	06d1      	lsls	r1, r2, #27
 800a44e:	bf44      	itt	mi
 800a450:	2320      	movmi	r3, #32
 800a452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a456:	0713      	lsls	r3, r2, #28
 800a458:	bf44      	itt	mi
 800a45a:	232b      	movmi	r3, #43	; 0x2b
 800a45c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a460:	f89a 3000 	ldrb.w	r3, [sl]
 800a464:	2b2a      	cmp	r3, #42	; 0x2a
 800a466:	d015      	beq.n	800a494 <_vfiprintf_r+0x120>
 800a468:	9a07      	ldr	r2, [sp, #28]
 800a46a:	4654      	mov	r4, sl
 800a46c:	2000      	movs	r0, #0
 800a46e:	f04f 0c0a 	mov.w	ip, #10
 800a472:	4621      	mov	r1, r4
 800a474:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a478:	3b30      	subs	r3, #48	; 0x30
 800a47a:	2b09      	cmp	r3, #9
 800a47c:	d94d      	bls.n	800a51a <_vfiprintf_r+0x1a6>
 800a47e:	b1b0      	cbz	r0, 800a4ae <_vfiprintf_r+0x13a>
 800a480:	9207      	str	r2, [sp, #28]
 800a482:	e014      	b.n	800a4ae <_vfiprintf_r+0x13a>
 800a484:	eba0 0308 	sub.w	r3, r0, r8
 800a488:	46a2      	mov	sl, r4
 800a48a:	fa09 f303 	lsl.w	r3, r9, r3
 800a48e:	4313      	orrs	r3, r2
 800a490:	9304      	str	r3, [sp, #16]
 800a492:	e7d2      	b.n	800a43a <_vfiprintf_r+0xc6>
 800a494:	9b03      	ldr	r3, [sp, #12]
 800a496:	1d19      	adds	r1, r3, #4
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	9103      	str	r1, [sp, #12]
 800a49e:	bfbb      	ittet	lt
 800a4a0:	425b      	neglt	r3, r3
 800a4a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a4a6:	9307      	strge	r3, [sp, #28]
 800a4a8:	9307      	strlt	r3, [sp, #28]
 800a4aa:	bfb8      	it	lt
 800a4ac:	9204      	strlt	r2, [sp, #16]
 800a4ae:	7823      	ldrb	r3, [r4, #0]
 800a4b0:	2b2e      	cmp	r3, #46	; 0x2e
 800a4b2:	d10c      	bne.n	800a4ce <_vfiprintf_r+0x15a>
 800a4b4:	7863      	ldrb	r3, [r4, #1]
 800a4b6:	2b2a      	cmp	r3, #42	; 0x2a
 800a4b8:	d134      	bne.n	800a524 <_vfiprintf_r+0x1b0>
 800a4ba:	9b03      	ldr	r3, [sp, #12]
 800a4bc:	3402      	adds	r4, #2
 800a4be:	1d1a      	adds	r2, r3, #4
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	9203      	str	r2, [sp, #12]
 800a4c6:	bfb8      	it	lt
 800a4c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a4cc:	9305      	str	r3, [sp, #20]
 800a4ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a5a4 <_vfiprintf_r+0x230>
 800a4d2:	2203      	movs	r2, #3
 800a4d4:	7821      	ldrb	r1, [r4, #0]
 800a4d6:	4650      	mov	r0, sl
 800a4d8:	f000 fb6c 	bl	800abb4 <memchr>
 800a4dc:	b138      	cbz	r0, 800a4ee <_vfiprintf_r+0x17a>
 800a4de:	eba0 000a 	sub.w	r0, r0, sl
 800a4e2:	2240      	movs	r2, #64	; 0x40
 800a4e4:	9b04      	ldr	r3, [sp, #16]
 800a4e6:	3401      	adds	r4, #1
 800a4e8:	4082      	lsls	r2, r0
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	9304      	str	r3, [sp, #16]
 800a4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4f2:	2206      	movs	r2, #6
 800a4f4:	4828      	ldr	r0, [pc, #160]	; (800a598 <_vfiprintf_r+0x224>)
 800a4f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4fa:	f000 fb5b 	bl	800abb4 <memchr>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d03f      	beq.n	800a582 <_vfiprintf_r+0x20e>
 800a502:	4b26      	ldr	r3, [pc, #152]	; (800a59c <_vfiprintf_r+0x228>)
 800a504:	bb1b      	cbnz	r3, 800a54e <_vfiprintf_r+0x1da>
 800a506:	9b03      	ldr	r3, [sp, #12]
 800a508:	3307      	adds	r3, #7
 800a50a:	f023 0307 	bic.w	r3, r3, #7
 800a50e:	3308      	adds	r3, #8
 800a510:	9303      	str	r3, [sp, #12]
 800a512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a514:	443b      	add	r3, r7
 800a516:	9309      	str	r3, [sp, #36]	; 0x24
 800a518:	e768      	b.n	800a3ec <_vfiprintf_r+0x78>
 800a51a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a51e:	460c      	mov	r4, r1
 800a520:	2001      	movs	r0, #1
 800a522:	e7a6      	b.n	800a472 <_vfiprintf_r+0xfe>
 800a524:	2300      	movs	r3, #0
 800a526:	3401      	adds	r4, #1
 800a528:	f04f 0c0a 	mov.w	ip, #10
 800a52c:	4619      	mov	r1, r3
 800a52e:	9305      	str	r3, [sp, #20]
 800a530:	4620      	mov	r0, r4
 800a532:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a536:	3a30      	subs	r2, #48	; 0x30
 800a538:	2a09      	cmp	r2, #9
 800a53a:	d903      	bls.n	800a544 <_vfiprintf_r+0x1d0>
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d0c6      	beq.n	800a4ce <_vfiprintf_r+0x15a>
 800a540:	9105      	str	r1, [sp, #20]
 800a542:	e7c4      	b.n	800a4ce <_vfiprintf_r+0x15a>
 800a544:	fb0c 2101 	mla	r1, ip, r1, r2
 800a548:	4604      	mov	r4, r0
 800a54a:	2301      	movs	r3, #1
 800a54c:	e7f0      	b.n	800a530 <_vfiprintf_r+0x1bc>
 800a54e:	ab03      	add	r3, sp, #12
 800a550:	462a      	mov	r2, r5
 800a552:	a904      	add	r1, sp, #16
 800a554:	4630      	mov	r0, r6
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	4b11      	ldr	r3, [pc, #68]	; (800a5a0 <_vfiprintf_r+0x22c>)
 800a55a:	f3af 8000 	nop.w
 800a55e:	4607      	mov	r7, r0
 800a560:	1c78      	adds	r0, r7, #1
 800a562:	d1d6      	bne.n	800a512 <_vfiprintf_r+0x19e>
 800a564:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a566:	07d9      	lsls	r1, r3, #31
 800a568:	d405      	bmi.n	800a576 <_vfiprintf_r+0x202>
 800a56a:	89ab      	ldrh	r3, [r5, #12]
 800a56c:	059a      	lsls	r2, r3, #22
 800a56e:	d402      	bmi.n	800a576 <_vfiprintf_r+0x202>
 800a570:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a572:	f7ff fddb 	bl	800a12c <__retarget_lock_release_recursive>
 800a576:	89ab      	ldrh	r3, [r5, #12]
 800a578:	065b      	lsls	r3, r3, #25
 800a57a:	f53f af1d 	bmi.w	800a3b8 <_vfiprintf_r+0x44>
 800a57e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a580:	e71c      	b.n	800a3bc <_vfiprintf_r+0x48>
 800a582:	ab03      	add	r3, sp, #12
 800a584:	462a      	mov	r2, r5
 800a586:	a904      	add	r1, sp, #16
 800a588:	4630      	mov	r0, r6
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	4b04      	ldr	r3, [pc, #16]	; (800a5a0 <_vfiprintf_r+0x22c>)
 800a58e:	f000 f87d 	bl	800a68c <_printf_i>
 800a592:	e7e4      	b.n	800a55e <_vfiprintf_r+0x1ea>
 800a594:	0800ade0 	.word	0x0800ade0
 800a598:	0800adea 	.word	0x0800adea
 800a59c:	00000000 	.word	0x00000000
 800a5a0:	0800a34f 	.word	0x0800a34f
 800a5a4:	0800ade6 	.word	0x0800ade6

0800a5a8 <_printf_common>:
 800a5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ac:	4616      	mov	r6, r2
 800a5ae:	4699      	mov	r9, r3
 800a5b0:	688a      	ldr	r2, [r1, #8]
 800a5b2:	4607      	mov	r7, r0
 800a5b4:	690b      	ldr	r3, [r1, #16]
 800a5b6:	460c      	mov	r4, r1
 800a5b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	bfb8      	it	lt
 800a5c0:	4613      	movlt	r3, r2
 800a5c2:	6033      	str	r3, [r6, #0]
 800a5c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5c8:	b10a      	cbz	r2, 800a5ce <_printf_common+0x26>
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	6033      	str	r3, [r6, #0]
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	0699      	lsls	r1, r3, #26
 800a5d2:	bf42      	ittt	mi
 800a5d4:	6833      	ldrmi	r3, [r6, #0]
 800a5d6:	3302      	addmi	r3, #2
 800a5d8:	6033      	strmi	r3, [r6, #0]
 800a5da:	6825      	ldr	r5, [r4, #0]
 800a5dc:	f015 0506 	ands.w	r5, r5, #6
 800a5e0:	d106      	bne.n	800a5f0 <_printf_common+0x48>
 800a5e2:	f104 0a19 	add.w	sl, r4, #25
 800a5e6:	68e3      	ldr	r3, [r4, #12]
 800a5e8:	6832      	ldr	r2, [r6, #0]
 800a5ea:	1a9b      	subs	r3, r3, r2
 800a5ec:	42ab      	cmp	r3, r5
 800a5ee:	dc2b      	bgt.n	800a648 <_printf_common+0xa0>
 800a5f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5f4:	1e13      	subs	r3, r2, #0
 800a5f6:	6822      	ldr	r2, [r4, #0]
 800a5f8:	bf18      	it	ne
 800a5fa:	2301      	movne	r3, #1
 800a5fc:	0692      	lsls	r2, r2, #26
 800a5fe:	d430      	bmi.n	800a662 <_printf_common+0xba>
 800a600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a604:	4649      	mov	r1, r9
 800a606:	4638      	mov	r0, r7
 800a608:	47c0      	blx	r8
 800a60a:	3001      	adds	r0, #1
 800a60c:	d023      	beq.n	800a656 <_printf_common+0xae>
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	341a      	adds	r4, #26
 800a612:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a616:	f003 0306 	and.w	r3, r3, #6
 800a61a:	2b04      	cmp	r3, #4
 800a61c:	bf0a      	itet	eq
 800a61e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a622:	2500      	movne	r5, #0
 800a624:	6833      	ldreq	r3, [r6, #0]
 800a626:	f04f 0600 	mov.w	r6, #0
 800a62a:	bf08      	it	eq
 800a62c:	1aed      	subeq	r5, r5, r3
 800a62e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a632:	bf08      	it	eq
 800a634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a638:	4293      	cmp	r3, r2
 800a63a:	bfc4      	itt	gt
 800a63c:	1a9b      	subgt	r3, r3, r2
 800a63e:	18ed      	addgt	r5, r5, r3
 800a640:	42b5      	cmp	r5, r6
 800a642:	d11a      	bne.n	800a67a <_printf_common+0xd2>
 800a644:	2000      	movs	r0, #0
 800a646:	e008      	b.n	800a65a <_printf_common+0xb2>
 800a648:	2301      	movs	r3, #1
 800a64a:	4652      	mov	r2, sl
 800a64c:	4649      	mov	r1, r9
 800a64e:	4638      	mov	r0, r7
 800a650:	47c0      	blx	r8
 800a652:	3001      	adds	r0, #1
 800a654:	d103      	bne.n	800a65e <_printf_common+0xb6>
 800a656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65e:	3501      	adds	r5, #1
 800a660:	e7c1      	b.n	800a5e6 <_printf_common+0x3e>
 800a662:	18e1      	adds	r1, r4, r3
 800a664:	1c5a      	adds	r2, r3, #1
 800a666:	2030      	movs	r0, #48	; 0x30
 800a668:	3302      	adds	r3, #2
 800a66a:	4422      	add	r2, r4
 800a66c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a670:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a674:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a678:	e7c2      	b.n	800a600 <_printf_common+0x58>
 800a67a:	2301      	movs	r3, #1
 800a67c:	4622      	mov	r2, r4
 800a67e:	4649      	mov	r1, r9
 800a680:	4638      	mov	r0, r7
 800a682:	47c0      	blx	r8
 800a684:	3001      	adds	r0, #1
 800a686:	d0e6      	beq.n	800a656 <_printf_common+0xae>
 800a688:	3601      	adds	r6, #1
 800a68a:	e7d9      	b.n	800a640 <_printf_common+0x98>

0800a68c <_printf_i>:
 800a68c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a690:	7e0f      	ldrb	r7, [r1, #24]
 800a692:	4691      	mov	r9, r2
 800a694:	4680      	mov	r8, r0
 800a696:	460c      	mov	r4, r1
 800a698:	2f78      	cmp	r7, #120	; 0x78
 800a69a:	469a      	mov	sl, r3
 800a69c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a69e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6a2:	d807      	bhi.n	800a6b4 <_printf_i+0x28>
 800a6a4:	2f62      	cmp	r7, #98	; 0x62
 800a6a6:	d80a      	bhi.n	800a6be <_printf_i+0x32>
 800a6a8:	2f00      	cmp	r7, #0
 800a6aa:	f000 80d3 	beq.w	800a854 <_printf_i+0x1c8>
 800a6ae:	2f58      	cmp	r7, #88	; 0x58
 800a6b0:	f000 80bf 	beq.w	800a832 <_printf_i+0x1a6>
 800a6b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6bc:	e03a      	b.n	800a734 <_printf_i+0xa8>
 800a6be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6c2:	2b15      	cmp	r3, #21
 800a6c4:	d8f6      	bhi.n	800a6b4 <_printf_i+0x28>
 800a6c6:	a101      	add	r1, pc, #4	; (adr r1, 800a6cc <_printf_i+0x40>)
 800a6c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6cc:	0800a725 	.word	0x0800a725
 800a6d0:	0800a739 	.word	0x0800a739
 800a6d4:	0800a6b5 	.word	0x0800a6b5
 800a6d8:	0800a6b5 	.word	0x0800a6b5
 800a6dc:	0800a6b5 	.word	0x0800a6b5
 800a6e0:	0800a6b5 	.word	0x0800a6b5
 800a6e4:	0800a739 	.word	0x0800a739
 800a6e8:	0800a6b5 	.word	0x0800a6b5
 800a6ec:	0800a6b5 	.word	0x0800a6b5
 800a6f0:	0800a6b5 	.word	0x0800a6b5
 800a6f4:	0800a6b5 	.word	0x0800a6b5
 800a6f8:	0800a83b 	.word	0x0800a83b
 800a6fc:	0800a765 	.word	0x0800a765
 800a700:	0800a7f7 	.word	0x0800a7f7
 800a704:	0800a6b5 	.word	0x0800a6b5
 800a708:	0800a6b5 	.word	0x0800a6b5
 800a70c:	0800a85d 	.word	0x0800a85d
 800a710:	0800a6b5 	.word	0x0800a6b5
 800a714:	0800a765 	.word	0x0800a765
 800a718:	0800a6b5 	.word	0x0800a6b5
 800a71c:	0800a6b5 	.word	0x0800a6b5
 800a720:	0800a7ff 	.word	0x0800a7ff
 800a724:	682b      	ldr	r3, [r5, #0]
 800a726:	1d1a      	adds	r2, r3, #4
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	602a      	str	r2, [r5, #0]
 800a72c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a734:	2301      	movs	r3, #1
 800a736:	e09e      	b.n	800a876 <_printf_i+0x1ea>
 800a738:	6820      	ldr	r0, [r4, #0]
 800a73a:	682b      	ldr	r3, [r5, #0]
 800a73c:	0607      	lsls	r7, r0, #24
 800a73e:	f103 0104 	add.w	r1, r3, #4
 800a742:	6029      	str	r1, [r5, #0]
 800a744:	d501      	bpl.n	800a74a <_printf_i+0xbe>
 800a746:	681e      	ldr	r6, [r3, #0]
 800a748:	e003      	b.n	800a752 <_printf_i+0xc6>
 800a74a:	0646      	lsls	r6, r0, #25
 800a74c:	d5fb      	bpl.n	800a746 <_printf_i+0xba>
 800a74e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a752:	2e00      	cmp	r6, #0
 800a754:	da03      	bge.n	800a75e <_printf_i+0xd2>
 800a756:	232d      	movs	r3, #45	; 0x2d
 800a758:	4276      	negs	r6, r6
 800a75a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a75e:	4859      	ldr	r0, [pc, #356]	; (800a8c4 <_printf_i+0x238>)
 800a760:	230a      	movs	r3, #10
 800a762:	e012      	b.n	800a78a <_printf_i+0xfe>
 800a764:	682b      	ldr	r3, [r5, #0]
 800a766:	6820      	ldr	r0, [r4, #0]
 800a768:	1d19      	adds	r1, r3, #4
 800a76a:	6029      	str	r1, [r5, #0]
 800a76c:	0605      	lsls	r5, r0, #24
 800a76e:	d501      	bpl.n	800a774 <_printf_i+0xe8>
 800a770:	681e      	ldr	r6, [r3, #0]
 800a772:	e002      	b.n	800a77a <_printf_i+0xee>
 800a774:	0641      	lsls	r1, r0, #25
 800a776:	d5fb      	bpl.n	800a770 <_printf_i+0xe4>
 800a778:	881e      	ldrh	r6, [r3, #0]
 800a77a:	2f6f      	cmp	r7, #111	; 0x6f
 800a77c:	4851      	ldr	r0, [pc, #324]	; (800a8c4 <_printf_i+0x238>)
 800a77e:	bf0c      	ite	eq
 800a780:	2308      	moveq	r3, #8
 800a782:	230a      	movne	r3, #10
 800a784:	2100      	movs	r1, #0
 800a786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a78a:	6865      	ldr	r5, [r4, #4]
 800a78c:	2d00      	cmp	r5, #0
 800a78e:	60a5      	str	r5, [r4, #8]
 800a790:	bfa2      	ittt	ge
 800a792:	6821      	ldrge	r1, [r4, #0]
 800a794:	f021 0104 	bicge.w	r1, r1, #4
 800a798:	6021      	strge	r1, [r4, #0]
 800a79a:	b90e      	cbnz	r6, 800a7a0 <_printf_i+0x114>
 800a79c:	2d00      	cmp	r5, #0
 800a79e:	d04a      	beq.n	800a836 <_printf_i+0x1aa>
 800a7a0:	4615      	mov	r5, r2
 800a7a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7a6:	fb03 6711 	mls	r7, r3, r1, r6
 800a7aa:	5dc7      	ldrb	r7, [r0, r7]
 800a7ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7b0:	4637      	mov	r7, r6
 800a7b2:	460e      	mov	r6, r1
 800a7b4:	42bb      	cmp	r3, r7
 800a7b6:	d9f4      	bls.n	800a7a2 <_printf_i+0x116>
 800a7b8:	2b08      	cmp	r3, #8
 800a7ba:	d10b      	bne.n	800a7d4 <_printf_i+0x148>
 800a7bc:	6823      	ldr	r3, [r4, #0]
 800a7be:	07de      	lsls	r6, r3, #31
 800a7c0:	d508      	bpl.n	800a7d4 <_printf_i+0x148>
 800a7c2:	6923      	ldr	r3, [r4, #16]
 800a7c4:	6861      	ldr	r1, [r4, #4]
 800a7c6:	4299      	cmp	r1, r3
 800a7c8:	bfde      	ittt	le
 800a7ca:	2330      	movle	r3, #48	; 0x30
 800a7cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a7d4:	1b52      	subs	r2, r2, r5
 800a7d6:	6122      	str	r2, [r4, #16]
 800a7d8:	464b      	mov	r3, r9
 800a7da:	aa03      	add	r2, sp, #12
 800a7dc:	4621      	mov	r1, r4
 800a7de:	4640      	mov	r0, r8
 800a7e0:	f8cd a000 	str.w	sl, [sp]
 800a7e4:	f7ff fee0 	bl	800a5a8 <_printf_common>
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	d149      	bne.n	800a880 <_printf_i+0x1f4>
 800a7ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7f0:	b004      	add	sp, #16
 800a7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7f6:	6823      	ldr	r3, [r4, #0]
 800a7f8:	f043 0320 	orr.w	r3, r3, #32
 800a7fc:	6023      	str	r3, [r4, #0]
 800a7fe:	2778      	movs	r7, #120	; 0x78
 800a800:	4831      	ldr	r0, [pc, #196]	; (800a8c8 <_printf_i+0x23c>)
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a808:	061f      	lsls	r7, r3, #24
 800a80a:	6829      	ldr	r1, [r5, #0]
 800a80c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a810:	d402      	bmi.n	800a818 <_printf_i+0x18c>
 800a812:	065f      	lsls	r7, r3, #25
 800a814:	bf48      	it	mi
 800a816:	b2b6      	uxthmi	r6, r6
 800a818:	07df      	lsls	r7, r3, #31
 800a81a:	6029      	str	r1, [r5, #0]
 800a81c:	bf44      	itt	mi
 800a81e:	f043 0320 	orrmi.w	r3, r3, #32
 800a822:	6023      	strmi	r3, [r4, #0]
 800a824:	b91e      	cbnz	r6, 800a82e <_printf_i+0x1a2>
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	f023 0320 	bic.w	r3, r3, #32
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	2310      	movs	r3, #16
 800a830:	e7a8      	b.n	800a784 <_printf_i+0xf8>
 800a832:	4824      	ldr	r0, [pc, #144]	; (800a8c4 <_printf_i+0x238>)
 800a834:	e7e5      	b.n	800a802 <_printf_i+0x176>
 800a836:	4615      	mov	r5, r2
 800a838:	e7be      	b.n	800a7b8 <_printf_i+0x12c>
 800a83a:	682b      	ldr	r3, [r5, #0]
 800a83c:	6826      	ldr	r6, [r4, #0]
 800a83e:	1d18      	adds	r0, r3, #4
 800a840:	6961      	ldr	r1, [r4, #20]
 800a842:	6028      	str	r0, [r5, #0]
 800a844:	0635      	lsls	r5, r6, #24
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	d501      	bpl.n	800a84e <_printf_i+0x1c2>
 800a84a:	6019      	str	r1, [r3, #0]
 800a84c:	e002      	b.n	800a854 <_printf_i+0x1c8>
 800a84e:	0670      	lsls	r0, r6, #25
 800a850:	d5fb      	bpl.n	800a84a <_printf_i+0x1be>
 800a852:	8019      	strh	r1, [r3, #0]
 800a854:	2300      	movs	r3, #0
 800a856:	4615      	mov	r5, r2
 800a858:	6123      	str	r3, [r4, #16]
 800a85a:	e7bd      	b.n	800a7d8 <_printf_i+0x14c>
 800a85c:	682b      	ldr	r3, [r5, #0]
 800a85e:	2100      	movs	r1, #0
 800a860:	1d1a      	adds	r2, r3, #4
 800a862:	602a      	str	r2, [r5, #0]
 800a864:	681d      	ldr	r5, [r3, #0]
 800a866:	6862      	ldr	r2, [r4, #4]
 800a868:	4628      	mov	r0, r5
 800a86a:	f000 f9a3 	bl	800abb4 <memchr>
 800a86e:	b108      	cbz	r0, 800a874 <_printf_i+0x1e8>
 800a870:	1b40      	subs	r0, r0, r5
 800a872:	6060      	str	r0, [r4, #4]
 800a874:	6863      	ldr	r3, [r4, #4]
 800a876:	6123      	str	r3, [r4, #16]
 800a878:	2300      	movs	r3, #0
 800a87a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a87e:	e7ab      	b.n	800a7d8 <_printf_i+0x14c>
 800a880:	6923      	ldr	r3, [r4, #16]
 800a882:	462a      	mov	r2, r5
 800a884:	4649      	mov	r1, r9
 800a886:	4640      	mov	r0, r8
 800a888:	47d0      	blx	sl
 800a88a:	3001      	adds	r0, #1
 800a88c:	d0ae      	beq.n	800a7ec <_printf_i+0x160>
 800a88e:	6823      	ldr	r3, [r4, #0]
 800a890:	079b      	lsls	r3, r3, #30
 800a892:	d413      	bmi.n	800a8bc <_printf_i+0x230>
 800a894:	68e0      	ldr	r0, [r4, #12]
 800a896:	9b03      	ldr	r3, [sp, #12]
 800a898:	4298      	cmp	r0, r3
 800a89a:	bfb8      	it	lt
 800a89c:	4618      	movlt	r0, r3
 800a89e:	e7a7      	b.n	800a7f0 <_printf_i+0x164>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	4632      	mov	r2, r6
 800a8a4:	4649      	mov	r1, r9
 800a8a6:	4640      	mov	r0, r8
 800a8a8:	47d0      	blx	sl
 800a8aa:	3001      	adds	r0, #1
 800a8ac:	d09e      	beq.n	800a7ec <_printf_i+0x160>
 800a8ae:	3501      	adds	r5, #1
 800a8b0:	68e3      	ldr	r3, [r4, #12]
 800a8b2:	9903      	ldr	r1, [sp, #12]
 800a8b4:	1a5b      	subs	r3, r3, r1
 800a8b6:	42ab      	cmp	r3, r5
 800a8b8:	dcf2      	bgt.n	800a8a0 <_printf_i+0x214>
 800a8ba:	e7eb      	b.n	800a894 <_printf_i+0x208>
 800a8bc:	2500      	movs	r5, #0
 800a8be:	f104 0619 	add.w	r6, r4, #25
 800a8c2:	e7f5      	b.n	800a8b0 <_printf_i+0x224>
 800a8c4:	0800adf1 	.word	0x0800adf1
 800a8c8:	0800ae02 	.word	0x0800ae02

0800a8cc <__sflush_r>:
 800a8cc:	898a      	ldrh	r2, [r1, #12]
 800a8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	0710      	lsls	r0, r2, #28
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	d458      	bmi.n	800a98c <__sflush_r+0xc0>
 800a8da:	684b      	ldr	r3, [r1, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	dc05      	bgt.n	800a8ec <__sflush_r+0x20>
 800a8e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	dc02      	bgt.n	800a8ec <__sflush_r+0x20>
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8ee:	2e00      	cmp	r6, #0
 800a8f0:	d0f9      	beq.n	800a8e6 <__sflush_r+0x1a>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8f8:	682f      	ldr	r7, [r5, #0]
 800a8fa:	6a21      	ldr	r1, [r4, #32]
 800a8fc:	602b      	str	r3, [r5, #0]
 800a8fe:	d032      	beq.n	800a966 <__sflush_r+0x9a>
 800a900:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a902:	89a3      	ldrh	r3, [r4, #12]
 800a904:	075a      	lsls	r2, r3, #29
 800a906:	d505      	bpl.n	800a914 <__sflush_r+0x48>
 800a908:	6863      	ldr	r3, [r4, #4]
 800a90a:	1ac0      	subs	r0, r0, r3
 800a90c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a90e:	b10b      	cbz	r3, 800a914 <__sflush_r+0x48>
 800a910:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a912:	1ac0      	subs	r0, r0, r3
 800a914:	2300      	movs	r3, #0
 800a916:	4602      	mov	r2, r0
 800a918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a91a:	4628      	mov	r0, r5
 800a91c:	6a21      	ldr	r1, [r4, #32]
 800a91e:	47b0      	blx	r6
 800a920:	1c43      	adds	r3, r0, #1
 800a922:	89a3      	ldrh	r3, [r4, #12]
 800a924:	d106      	bne.n	800a934 <__sflush_r+0x68>
 800a926:	6829      	ldr	r1, [r5, #0]
 800a928:	291d      	cmp	r1, #29
 800a92a:	d82b      	bhi.n	800a984 <__sflush_r+0xb8>
 800a92c:	4a28      	ldr	r2, [pc, #160]	; (800a9d0 <__sflush_r+0x104>)
 800a92e:	410a      	asrs	r2, r1
 800a930:	07d6      	lsls	r6, r2, #31
 800a932:	d427      	bmi.n	800a984 <__sflush_r+0xb8>
 800a934:	2200      	movs	r2, #0
 800a936:	04d9      	lsls	r1, r3, #19
 800a938:	6062      	str	r2, [r4, #4]
 800a93a:	6922      	ldr	r2, [r4, #16]
 800a93c:	6022      	str	r2, [r4, #0]
 800a93e:	d504      	bpl.n	800a94a <__sflush_r+0x7e>
 800a940:	1c42      	adds	r2, r0, #1
 800a942:	d101      	bne.n	800a948 <__sflush_r+0x7c>
 800a944:	682b      	ldr	r3, [r5, #0]
 800a946:	b903      	cbnz	r3, 800a94a <__sflush_r+0x7e>
 800a948:	6560      	str	r0, [r4, #84]	; 0x54
 800a94a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a94c:	602f      	str	r7, [r5, #0]
 800a94e:	2900      	cmp	r1, #0
 800a950:	d0c9      	beq.n	800a8e6 <__sflush_r+0x1a>
 800a952:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a956:	4299      	cmp	r1, r3
 800a958:	d002      	beq.n	800a960 <__sflush_r+0x94>
 800a95a:	4628      	mov	r0, r5
 800a95c:	f7ff fbe8 	bl	800a130 <_free_r>
 800a960:	2000      	movs	r0, #0
 800a962:	6360      	str	r0, [r4, #52]	; 0x34
 800a964:	e7c0      	b.n	800a8e8 <__sflush_r+0x1c>
 800a966:	2301      	movs	r3, #1
 800a968:	4628      	mov	r0, r5
 800a96a:	47b0      	blx	r6
 800a96c:	1c41      	adds	r1, r0, #1
 800a96e:	d1c8      	bne.n	800a902 <__sflush_r+0x36>
 800a970:	682b      	ldr	r3, [r5, #0]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d0c5      	beq.n	800a902 <__sflush_r+0x36>
 800a976:	2b1d      	cmp	r3, #29
 800a978:	d001      	beq.n	800a97e <__sflush_r+0xb2>
 800a97a:	2b16      	cmp	r3, #22
 800a97c:	d101      	bne.n	800a982 <__sflush_r+0xb6>
 800a97e:	602f      	str	r7, [r5, #0]
 800a980:	e7b1      	b.n	800a8e6 <__sflush_r+0x1a>
 800a982:	89a3      	ldrh	r3, [r4, #12]
 800a984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	e7ad      	b.n	800a8e8 <__sflush_r+0x1c>
 800a98c:	690f      	ldr	r7, [r1, #16]
 800a98e:	2f00      	cmp	r7, #0
 800a990:	d0a9      	beq.n	800a8e6 <__sflush_r+0x1a>
 800a992:	0793      	lsls	r3, r2, #30
 800a994:	680e      	ldr	r6, [r1, #0]
 800a996:	600f      	str	r7, [r1, #0]
 800a998:	bf0c      	ite	eq
 800a99a:	694b      	ldreq	r3, [r1, #20]
 800a99c:	2300      	movne	r3, #0
 800a99e:	eba6 0807 	sub.w	r8, r6, r7
 800a9a2:	608b      	str	r3, [r1, #8]
 800a9a4:	f1b8 0f00 	cmp.w	r8, #0
 800a9a8:	dd9d      	ble.n	800a8e6 <__sflush_r+0x1a>
 800a9aa:	4643      	mov	r3, r8
 800a9ac:	463a      	mov	r2, r7
 800a9ae:	6a21      	ldr	r1, [r4, #32]
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9b4:	47b0      	blx	r6
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	dc06      	bgt.n	800a9c8 <__sflush_r+0xfc>
 800a9ba:	89a3      	ldrh	r3, [r4, #12]
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9c4:	81a3      	strh	r3, [r4, #12]
 800a9c6:	e78f      	b.n	800a8e8 <__sflush_r+0x1c>
 800a9c8:	4407      	add	r7, r0
 800a9ca:	eba8 0800 	sub.w	r8, r8, r0
 800a9ce:	e7e9      	b.n	800a9a4 <__sflush_r+0xd8>
 800a9d0:	dfbffffe 	.word	0xdfbffffe

0800a9d4 <_fflush_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	690b      	ldr	r3, [r1, #16]
 800a9d8:	4605      	mov	r5, r0
 800a9da:	460c      	mov	r4, r1
 800a9dc:	b913      	cbnz	r3, 800a9e4 <_fflush_r+0x10>
 800a9de:	2500      	movs	r5, #0
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	bd38      	pop	{r3, r4, r5, pc}
 800a9e4:	b118      	cbz	r0, 800a9ee <_fflush_r+0x1a>
 800a9e6:	6a03      	ldr	r3, [r0, #32]
 800a9e8:	b90b      	cbnz	r3, 800a9ee <_fflush_r+0x1a>
 800a9ea:	f7ff f9a1 	bl	8009d30 <__sinit>
 800a9ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d0f3      	beq.n	800a9de <_fflush_r+0xa>
 800a9f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9f8:	07d0      	lsls	r0, r2, #31
 800a9fa:	d404      	bmi.n	800aa06 <_fflush_r+0x32>
 800a9fc:	0599      	lsls	r1, r3, #22
 800a9fe:	d402      	bmi.n	800aa06 <_fflush_r+0x32>
 800aa00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa02:	f7ff fb92 	bl	800a12a <__retarget_lock_acquire_recursive>
 800aa06:	4628      	mov	r0, r5
 800aa08:	4621      	mov	r1, r4
 800aa0a:	f7ff ff5f 	bl	800a8cc <__sflush_r>
 800aa0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa10:	4605      	mov	r5, r0
 800aa12:	07da      	lsls	r2, r3, #31
 800aa14:	d4e4      	bmi.n	800a9e0 <_fflush_r+0xc>
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	059b      	lsls	r3, r3, #22
 800aa1a:	d4e1      	bmi.n	800a9e0 <_fflush_r+0xc>
 800aa1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa1e:	f7ff fb85 	bl	800a12c <__retarget_lock_release_recursive>
 800aa22:	e7dd      	b.n	800a9e0 <_fflush_r+0xc>

0800aa24 <__swhatbuf_r>:
 800aa24:	b570      	push	{r4, r5, r6, lr}
 800aa26:	460c      	mov	r4, r1
 800aa28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa2c:	b096      	sub	sp, #88	; 0x58
 800aa2e:	4615      	mov	r5, r2
 800aa30:	2900      	cmp	r1, #0
 800aa32:	461e      	mov	r6, r3
 800aa34:	da0c      	bge.n	800aa50 <__swhatbuf_r+0x2c>
 800aa36:	89a3      	ldrh	r3, [r4, #12]
 800aa38:	2100      	movs	r1, #0
 800aa3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa3e:	bf0c      	ite	eq
 800aa40:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aa44:	2340      	movne	r3, #64	; 0x40
 800aa46:	2000      	movs	r0, #0
 800aa48:	6031      	str	r1, [r6, #0]
 800aa4a:	602b      	str	r3, [r5, #0]
 800aa4c:	b016      	add	sp, #88	; 0x58
 800aa4e:	bd70      	pop	{r4, r5, r6, pc}
 800aa50:	466a      	mov	r2, sp
 800aa52:	f000 f87d 	bl	800ab50 <_fstat_r>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	dbed      	blt.n	800aa36 <__swhatbuf_r+0x12>
 800aa5a:	9901      	ldr	r1, [sp, #4]
 800aa5c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aa60:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aa64:	4259      	negs	r1, r3
 800aa66:	4159      	adcs	r1, r3
 800aa68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa6c:	e7eb      	b.n	800aa46 <__swhatbuf_r+0x22>

0800aa6e <__smakebuf_r>:
 800aa6e:	898b      	ldrh	r3, [r1, #12]
 800aa70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa72:	079d      	lsls	r5, r3, #30
 800aa74:	4606      	mov	r6, r0
 800aa76:	460c      	mov	r4, r1
 800aa78:	d507      	bpl.n	800aa8a <__smakebuf_r+0x1c>
 800aa7a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa7e:	6023      	str	r3, [r4, #0]
 800aa80:	6123      	str	r3, [r4, #16]
 800aa82:	2301      	movs	r3, #1
 800aa84:	6163      	str	r3, [r4, #20]
 800aa86:	b002      	add	sp, #8
 800aa88:	bd70      	pop	{r4, r5, r6, pc}
 800aa8a:	ab01      	add	r3, sp, #4
 800aa8c:	466a      	mov	r2, sp
 800aa8e:	f7ff ffc9 	bl	800aa24 <__swhatbuf_r>
 800aa92:	9900      	ldr	r1, [sp, #0]
 800aa94:	4605      	mov	r5, r0
 800aa96:	4630      	mov	r0, r6
 800aa98:	f7ff fbb6 	bl	800a208 <_malloc_r>
 800aa9c:	b948      	cbnz	r0, 800aab2 <__smakebuf_r+0x44>
 800aa9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaa2:	059a      	lsls	r2, r3, #22
 800aaa4:	d4ef      	bmi.n	800aa86 <__smakebuf_r+0x18>
 800aaa6:	f023 0303 	bic.w	r3, r3, #3
 800aaaa:	f043 0302 	orr.w	r3, r3, #2
 800aaae:	81a3      	strh	r3, [r4, #12]
 800aab0:	e7e3      	b.n	800aa7a <__smakebuf_r+0xc>
 800aab2:	89a3      	ldrh	r3, [r4, #12]
 800aab4:	6020      	str	r0, [r4, #0]
 800aab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaba:	6120      	str	r0, [r4, #16]
 800aabc:	81a3      	strh	r3, [r4, #12]
 800aabe:	9b00      	ldr	r3, [sp, #0]
 800aac0:	6163      	str	r3, [r4, #20]
 800aac2:	9b01      	ldr	r3, [sp, #4]
 800aac4:	b15b      	cbz	r3, 800aade <__smakebuf_r+0x70>
 800aac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaca:	4630      	mov	r0, r6
 800aacc:	f000 f852 	bl	800ab74 <_isatty_r>
 800aad0:	b128      	cbz	r0, 800aade <__smakebuf_r+0x70>
 800aad2:	89a3      	ldrh	r3, [r4, #12]
 800aad4:	f023 0303 	bic.w	r3, r3, #3
 800aad8:	f043 0301 	orr.w	r3, r3, #1
 800aadc:	81a3      	strh	r3, [r4, #12]
 800aade:	89a3      	ldrh	r3, [r4, #12]
 800aae0:	431d      	orrs	r5, r3
 800aae2:	81a5      	strh	r5, [r4, #12]
 800aae4:	e7cf      	b.n	800aa86 <__smakebuf_r+0x18>

0800aae6 <_putc_r>:
 800aae6:	b570      	push	{r4, r5, r6, lr}
 800aae8:	460d      	mov	r5, r1
 800aaea:	4614      	mov	r4, r2
 800aaec:	4606      	mov	r6, r0
 800aaee:	b118      	cbz	r0, 800aaf8 <_putc_r+0x12>
 800aaf0:	6a03      	ldr	r3, [r0, #32]
 800aaf2:	b90b      	cbnz	r3, 800aaf8 <_putc_r+0x12>
 800aaf4:	f7ff f91c 	bl	8009d30 <__sinit>
 800aaf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aafa:	07d8      	lsls	r0, r3, #31
 800aafc:	d405      	bmi.n	800ab0a <_putc_r+0x24>
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	0599      	lsls	r1, r3, #22
 800ab02:	d402      	bmi.n	800ab0a <_putc_r+0x24>
 800ab04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab06:	f7ff fb10 	bl	800a12a <__retarget_lock_acquire_recursive>
 800ab0a:	68a3      	ldr	r3, [r4, #8]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	60a3      	str	r3, [r4, #8]
 800ab12:	da05      	bge.n	800ab20 <_putc_r+0x3a>
 800ab14:	69a2      	ldr	r2, [r4, #24]
 800ab16:	4293      	cmp	r3, r2
 800ab18:	db12      	blt.n	800ab40 <_putc_r+0x5a>
 800ab1a:	b2eb      	uxtb	r3, r5
 800ab1c:	2b0a      	cmp	r3, #10
 800ab1e:	d00f      	beq.n	800ab40 <_putc_r+0x5a>
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	1c5a      	adds	r2, r3, #1
 800ab24:	6022      	str	r2, [r4, #0]
 800ab26:	701d      	strb	r5, [r3, #0]
 800ab28:	b2ed      	uxtb	r5, r5
 800ab2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab2c:	07da      	lsls	r2, r3, #31
 800ab2e:	d405      	bmi.n	800ab3c <_putc_r+0x56>
 800ab30:	89a3      	ldrh	r3, [r4, #12]
 800ab32:	059b      	lsls	r3, r3, #22
 800ab34:	d402      	bmi.n	800ab3c <_putc_r+0x56>
 800ab36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab38:	f7ff faf8 	bl	800a12c <__retarget_lock_release_recursive>
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	bd70      	pop	{r4, r5, r6, pc}
 800ab40:	4629      	mov	r1, r5
 800ab42:	4622      	mov	r2, r4
 800ab44:	4630      	mov	r0, r6
 800ab46:	f7ff f9e2 	bl	8009f0e <__swbuf_r>
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	e7ed      	b.n	800ab2a <_putc_r+0x44>
	...

0800ab50 <_fstat_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	2300      	movs	r3, #0
 800ab54:	4d06      	ldr	r5, [pc, #24]	; (800ab70 <_fstat_r+0x20>)
 800ab56:	4604      	mov	r4, r0
 800ab58:	4608      	mov	r0, r1
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	602b      	str	r3, [r5, #0]
 800ab5e:	f7f6 fdbf 	bl	80016e0 <_fstat>
 800ab62:	1c43      	adds	r3, r0, #1
 800ab64:	d102      	bne.n	800ab6c <_fstat_r+0x1c>
 800ab66:	682b      	ldr	r3, [r5, #0]
 800ab68:	b103      	cbz	r3, 800ab6c <_fstat_r+0x1c>
 800ab6a:	6023      	str	r3, [r4, #0]
 800ab6c:	bd38      	pop	{r3, r4, r5, pc}
 800ab6e:	bf00      	nop
 800ab70:	20000304 	.word	0x20000304

0800ab74 <_isatty_r>:
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	2300      	movs	r3, #0
 800ab78:	4d05      	ldr	r5, [pc, #20]	; (800ab90 <_isatty_r+0x1c>)
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	4608      	mov	r0, r1
 800ab7e:	602b      	str	r3, [r5, #0]
 800ab80:	f7f6 fdbe 	bl	8001700 <_isatty>
 800ab84:	1c43      	adds	r3, r0, #1
 800ab86:	d102      	bne.n	800ab8e <_isatty_r+0x1a>
 800ab88:	682b      	ldr	r3, [r5, #0]
 800ab8a:	b103      	cbz	r3, 800ab8e <_isatty_r+0x1a>
 800ab8c:	6023      	str	r3, [r4, #0]
 800ab8e:	bd38      	pop	{r3, r4, r5, pc}
 800ab90:	20000304 	.word	0x20000304

0800ab94 <_sbrk_r>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	2300      	movs	r3, #0
 800ab98:	4d05      	ldr	r5, [pc, #20]	; (800abb0 <_sbrk_r+0x1c>)
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	4608      	mov	r0, r1
 800ab9e:	602b      	str	r3, [r5, #0]
 800aba0:	f7f6 fdc6 	bl	8001730 <_sbrk>
 800aba4:	1c43      	adds	r3, r0, #1
 800aba6:	d102      	bne.n	800abae <_sbrk_r+0x1a>
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	b103      	cbz	r3, 800abae <_sbrk_r+0x1a>
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	bd38      	pop	{r3, r4, r5, pc}
 800abb0:	20000304 	.word	0x20000304

0800abb4 <memchr>:
 800abb4:	b2c9      	uxtb	r1, r1
 800abb6:	4402      	add	r2, r0
 800abb8:	b510      	push	{r4, lr}
 800abba:	4290      	cmp	r0, r2
 800abbc:	4603      	mov	r3, r0
 800abbe:	d101      	bne.n	800abc4 <memchr+0x10>
 800abc0:	2300      	movs	r3, #0
 800abc2:	e003      	b.n	800abcc <memchr+0x18>
 800abc4:	781c      	ldrb	r4, [r3, #0]
 800abc6:	3001      	adds	r0, #1
 800abc8:	428c      	cmp	r4, r1
 800abca:	d1f6      	bne.n	800abba <memchr+0x6>
 800abcc:	4618      	mov	r0, r3
 800abce:	bd10      	pop	{r4, pc}

0800abd0 <_init>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	bf00      	nop
 800abd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd6:	bc08      	pop	{r3}
 800abd8:	469e      	mov	lr, r3
 800abda:	4770      	bx	lr

0800abdc <_fini>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	bf00      	nop
 800abe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe2:	bc08      	pop	{r3}
 800abe4:	469e      	mov	lr, r3
 800abe6:	4770      	bx	lr
