
nrf-tx-h563-complete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a968  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  0800abb4  0800abb4  0001abb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae34  0800ae34  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae34  0800ae34  0001ae34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae3c  0800ae3c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae3c  0800ae3c  0001ae3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae40  0800ae40  0001ae40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800ae44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  2000006c  0800aeb0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000314  0800aeb0  00020314  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011720  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000217c  00000000  00000000  00031805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d18  00000000  00000000  00033988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a07  00000000  00000000  000346a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000313b0  00000000  00000000  000350a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ad5  00000000  00000000  00066457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00132a22  00000000  00000000  00076f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e70  00000000  00000000  001a9950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001ad7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000006c 	.word	0x2000006c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800ab9c 	.word	0x0800ab9c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000070 	.word	0x20000070
 8000288:	0800ab9c 	.word	0x0800ab9c

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800029c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b4:	1d39      	adds	r1, r7, #4
 80005b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ba:	2201      	movs	r2, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <__io_putchar+0x20>)
 80005be:	f008 fd68 	bl	8009092 <HAL_UART_Transmit>
  return ch;
 80005c2:	687b      	ldr	r3, [r7, #4]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000118 	.word	0x20000118

080005d0 <HAL_GPIO_EXTI_Rising_Callback>:
// END REDIRECT

// We've configured the user button to interrupt on rising edge
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) {
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005e0:	d104      	bne.n	80005ec <HAL_GPIO_EXTI_Rising_Callback+0x1c>
    case BTN_USER_Pin:
      NRF_PrintStatus();
 80005e2:	f000 fdab 	bl	800113c <NRF_PrintStatus>
      NRF_PrintFIFOStatus();
 80005e6:	f000 fe17 	bl	8001218 <NRF_PrintFIFOStatus>
      break;
 80005ea:	e003      	b.n	80005f4 <HAL_GPIO_EXTI_Rising_Callback+0x24>
    default:
      printf("Unhandled rising interrupt...\r\n");
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 80005ee:	f009 fc29 	bl	8009e44 <puts>
      break;
 80005f2:	bf00      	nop
  }
}
 80005f4:	bf00      	nop
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	0800abb4 	.word	0x0800abb4

08000600 <HAL_GPIO_EXTI_Falling_Callback>:

// We've configured the NRF to interrupt on falling edge
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin) {
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	2b08      	cmp	r3, #8
 800060e:	d14f      	bne.n	80006b0 <HAL_GPIO_EXTI_Falling_Callback+0xb0>
    case NRF_IRQ_Pin:
      {
        uint8_t status = NRF_ReadStatus();
 8000610:	f000 fce2 	bl	8000fd8 <NRF_ReadStatus>
 8000614:	4603      	mov	r3, r0
 8000616:	74fb      	strb	r3, [r7, #19]
        if (status & (1<<4)) {
 8000618:	7cfb      	ldrb	r3, [r7, #19]
 800061a:	f003 0310 	and.w	r3, r3, #16
 800061e:	2b00      	cmp	r3, #0
 8000620:	d006      	beq.n	8000630 <HAL_GPIO_EXTI_Falling_Callback+0x30>
          // MAX_RT
          printf("Reached max retransmissions...\r\n");
 8000622:	4828      	ldr	r0, [pc, #160]	; (80006c4 <HAL_GPIO_EXTI_Falling_Callback+0xc4>)
 8000624:	f009 fc0e 	bl	8009e44 <puts>
          NRF_SetRegisterBit(NRF_REG_STATUS, 4);
 8000628:	2104      	movs	r1, #4
 800062a:	2007      	movs	r0, #7
 800062c:	f000 fc4b 	bl	8000ec6 <NRF_SetRegisterBit>
        }

        if (status & (1<<5)) {
 8000630:	7cfb      	ldrb	r3, [r7, #19]
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	2b00      	cmp	r3, #0
 8000638:	d006      	beq.n	8000648 <HAL_GPIO_EXTI_Falling_Callback+0x48>
          // TX_DS
          printf("Data sent...\r\n");
 800063a:	4823      	ldr	r0, [pc, #140]	; (80006c8 <HAL_GPIO_EXTI_Falling_Callback+0xc8>)
 800063c:	f009 fc02 	bl	8009e44 <puts>
          NRF_SetRegisterBit(NRF_REG_STATUS, 5);
 8000640:	2105      	movs	r1, #5
 8000642:	2007      	movs	r0, #7
 8000644:	f000 fc3f 	bl	8000ec6 <NRF_SetRegisterBit>
        }

        if (status & (1<<6)) {
 8000648:	7cfb      	ldrb	r3, [r7, #19]
 800064a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800064e:	2b00      	cmp	r3, #0
 8000650:	d032      	beq.n	80006b8 <HAL_GPIO_EXTI_Falling_Callback+0xb8>
          // RX_DR
          NRF_SetRegisterBit(NRF_REG_STATUS, 5);
 8000652:	2105      	movs	r1, #5
 8000654:	2007      	movs	r0, #7
 8000656:	f000 fc36 	bl	8000ec6 <NRF_SetRegisterBit>

          uint8_t payload[10];
          NRF_ReadPayload(payload, 10);
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	210a      	movs	r1, #10
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fbd3 	bl	8000e0c <NRF_ReadPayload>
          printf("Received data: ");
 8000666:	4819      	ldr	r0, [pc, #100]	; (80006cc <HAL_GPIO_EXTI_Falling_Callback+0xcc>)
 8000668:	f009 fb7e 	bl	8009d68 <iprintf>
          for (int i = 0; i < 10; i++) {
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	e00a      	b.n	8000688 <HAL_GPIO_EXTI_Falling_Callback+0x88>
            printf("%c", payload[i]);
 8000672:	f107 0208 	add.w	r2, r7, #8
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f009 fb85 	bl	8009d8c <putchar>
          for (int i = 0; i < 10; i++) {
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	3301      	adds	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	2b09      	cmp	r3, #9
 800068c:	ddf1      	ble.n	8000672 <HAL_GPIO_EXTI_Falling_Callback+0x72>
          }
          printf("\r\n");
 800068e:	4810      	ldr	r0, [pc, #64]	; (80006d0 <HAL_GPIO_EXTI_Falling_Callback+0xd0>)
 8000690:	f009 fbd8 	bl	8009e44 <puts>
          count++;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_GPIO_EXTI_Falling_Callback+0xd4>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <HAL_GPIO_EXTI_Falling_Callback+0xd4>)
 800069e:	701a      	strb	r2, [r3, #0]
          if (count=='z') {
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <HAL_GPIO_EXTI_Falling_Callback+0xd4>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b7a      	cmp	r3, #122	; 0x7a
 80006a6:	d107      	bne.n	80006b8 <HAL_GPIO_EXTI_Falling_Callback+0xb8>
            count = 'a';
 80006a8:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <HAL_GPIO_EXTI_Falling_Callback+0xd4>)
 80006aa:	2261      	movs	r2, #97	; 0x61
 80006ac:	701a      	strb	r2, [r3, #0]
          }
        }
      }
      break;
 80006ae:	e003      	b.n	80006b8 <HAL_GPIO_EXTI_Falling_Callback+0xb8>
    default:
      printf("Unhandled falling interrupt...\r\n");
 80006b0:	4809      	ldr	r0, [pc, #36]	; (80006d8 <HAL_GPIO_EXTI_Falling_Callback+0xd8>)
 80006b2:	f009 fbc7 	bl	8009e44 <puts>
      break;
 80006b6:	e000      	b.n	80006ba <HAL_GPIO_EXTI_Falling_Callback+0xba>
      break;
 80006b8:	bf00      	nop
  }
}
 80006ba:	bf00      	nop
 80006bc:	3718      	adds	r7, #24
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	0800abd4 	.word	0x0800abd4
 80006c8:	0800abf4 	.word	0x0800abf4
 80006cc:	0800ac04 	.word	0x0800ac04
 80006d0:	0800ac14 	.word	0x0800ac14
 80006d4:	20000000 	.word	0x20000000
 80006d8:	0800ac18 	.word	0x0800ac18

080006dc <runExample>:

void runExample() {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af02      	add	r7, sp, #8
  printf("\r\nStarting up complete TX H5...\r\n");
 80006e2:	4825      	ldr	r0, [pc, #148]	; (8000778 <runExample+0x9c>)
 80006e4:	f009 fbae 	bl	8009e44 <puts>

  // Initialise the library and make the device enter standby-I mode
  if(NRF_Init(&hspi1, NRF_CSN_GPIO_Port, NRF_CSN_Pin, NRF_CE_GPIO_Port, NRF_CE_Pin) != NRF_OK) {
 80006e8:	2340      	movs	r3, #64	; 0x40
 80006ea:	9300      	str	r3, [sp, #0]
 80006ec:	4b23      	ldr	r3, [pc, #140]	; (800077c <runExample+0xa0>)
 80006ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006f2:	4923      	ldr	r1, [pc, #140]	; (8000780 <runExample+0xa4>)
 80006f4:	4823      	ldr	r0, [pc, #140]	; (8000784 <runExample+0xa8>)
 80006f6:	f000 fa7d 	bl	8000bf4 <NRF_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d004      	beq.n	800070a <runExample+0x2e>
    printf("Couldn't initialise device, are pins correctly connected?\r\n");
 8000700:	4821      	ldr	r0, [pc, #132]	; (8000788 <runExample+0xac>)
 8000702:	f009 fb9f 	bl	8009e44 <puts>
    Error_Handler();
 8000706:	f000 fa2f 	bl	8000b68 <Error_Handler>
  }

  NRF_Reset();
 800070a:	f000 fc81 	bl	8001010 <NRF_Reset>

  // Config
  uint8_t address[5] = {1,2,3,4,5};
 800070e:	4a1f      	ldr	r2, [pc, #124]	; (800078c <runExample+0xb0>)
 8000710:	f107 0310 	add.w	r3, r7, #16
 8000714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000718:	6018      	str	r0, [r3, #0]
 800071a:	3304      	adds	r3, #4
 800071c:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 800071e:	f107 0310 	add.w	r3, r7, #16
 8000722:	2205      	movs	r2, #5
 8000724:	4619      	mov	r1, r3
 8000726:	2010      	movs	r0, #16
 8000728:	f000 fba1 	bl	8000e6e <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5); // for auto acknowledgement
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	2205      	movs	r2, #5
 8000732:	4619      	mov	r1, r3
 8000734:	200a      	movs	r0, #10
 8000736:	f000 fb9a 	bl	8000e6e <NRF_WriteRegister>

  // Enable ACK payloads (which needs dynamic payload length enabled)
  NRF_SetRegisterBit(NRF_REG_FEATURE, 1);
 800073a:	2101      	movs	r1, #1
 800073c:	201d      	movs	r0, #29
 800073e:	f000 fbc2 	bl	8000ec6 <NRF_SetRegisterBit>
  NRF_SetRegisterBit(NRF_REG_FEATURE, 2);
 8000742:	2102      	movs	r1, #2
 8000744:	201d      	movs	r0, #29
 8000746:	f000 fbbe 	bl	8000ec6 <NRF_SetRegisterBit>
  NRF_SetRegisterBit(NRF_REG_DYNPD, 0);
 800074a:	2100      	movs	r1, #0
 800074c:	201c      	movs	r0, #28
 800074e:	f000 fbba 	bl	8000ec6 <NRF_SetRegisterBit>

  for(;;) {
    uint8_t msg[10] = {count};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	811a      	strh	r2, [r3, #8]
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <runExample+0xb4>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	713b      	strb	r3, [r7, #4]
    NRF_Transmit(msg, 10);
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	210a      	movs	r1, #10
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fb61 	bl	8000e2e <NRF_Transmit>
    HAL_Delay(1000);
 800076c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000770:	f001 f91c 	bl	80019ac <HAL_Delay>
  for(;;) {
 8000774:	e7ed      	b.n	8000752 <runExample+0x76>
 8000776:	bf00      	nop
 8000778:	0800ac38 	.word	0x0800ac38
 800077c:	42020800 	.word	0x42020800
 8000780:	42020400 	.word	0x42020400
 8000784:	20000088 	.word	0x20000088
 8000788:	0800ac5c 	.word	0x0800ac5c
 800078c:	0800ac98 	.word	0x0800ac98
 8000790:	20000000 	.word	0x20000000

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000798:	f001 f88c 	bl	80018b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079c:	f000 f80c 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a0:	f000 f91c 	bl	80009dc <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 80007a4:	f000 f870 	bl	8000888 <MX_MEMORYMAP_Init>
  MX_SPI1_Init();
 80007a8:	f000 f876 	bl	8000898 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80007ac:	f000 f8ca 	bl	8000944 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  runExample();
 80007b0:	f7ff ff94 	bl	80006dc <runExample>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <main+0x20>
	...

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b09c      	sub	sp, #112	; 0x70
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	2250      	movs	r2, #80	; 0x50
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f009 fc1c 	bl	800a004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007de:	4b29      	ldr	r3, [pc, #164]	; (8000884 <SystemClock_Config+0xcc>)
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	4a28      	ldr	r2, [pc, #160]	; (8000884 <SystemClock_Config+0xcc>)
 80007e4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80007e8:	6113      	str	r3, [r2, #16]
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <SystemClock_Config+0xcc>)
 80007ec:	691b      	ldr	r3, [r3, #16]
 80007ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f6:	bf00      	nop
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <SystemClock_Config+0xcc>)
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	f003 0308 	and.w	r3, r3, #8
 8000800:	2b08      	cmp	r3, #8
 8000802:	d1f9      	bne.n	80007f8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_CSI;
 8000804:	2310      	movs	r3, #16
 8000806:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.CSIState = RCC_CSI_ON;
 8000808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.CSICalibrationValue = RCC_CSICALIBRATION_DEFAULT;
 800080e:	2320      	movs	r3, #32
 8000810:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	2302      	movs	r3, #2
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_CSI;
 8000816:	2302      	movs	r3, #2
 8000818:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800081a:	2301      	movs	r3, #1
 800081c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 125;
 800081e:	237d      	movs	r3, #125	; 0x7d
 8000820:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000822:	2302      	movs	r3, #2
 8000824:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000826:	2302      	movs	r3, #2
 8000828:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_2;
 800082e:	2308      	movs	r3, #8
 8000830:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000832:	2300      	movs	r3, #0
 8000834:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fb90 	bl	8001f64 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800084a:	f000 f98d 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	231f      	movs	r3, #31
 8000850:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2303      	movs	r3, #3
 8000854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2105      	movs	r1, #5
 800086c:	4618      	mov	r0, r3
 800086e:	f001 ffb1 	bl	80027d4 <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000878:	f000 f976 	bl	8000b68 <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3770      	adds	r7, #112	; 0x70
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	44020800 	.word	0x44020800

08000888 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800089c:	4b27      	ldr	r3, [pc, #156]	; (800093c <MX_SPI1_Init+0xa4>)
 800089e:	4a28      	ldr	r2, [pc, #160]	; (8000940 <MX_SPI1_Init+0xa8>)
 80008a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008a2:	4b26      	ldr	r3, [pc, #152]	; (800093c <MX_SPI1_Init+0xa4>)
 80008a4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008aa:	4b24      	ldr	r3, [pc, #144]	; (800093c <MX_SPI1_Init+0xa4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <MX_SPI1_Init+0xa4>)
 80008b2:	2207      	movs	r2, #7
 80008b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_SPI1_Init+0xa4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_SPI1_Init+0xa4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <MX_SPI1_Init+0xa4>)
 80008c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80008c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_SPI1_Init+0xa4>)
 80008cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_SPI1_Init+0xa4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_SPI1_Init+0xa4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_SPI1_Init+0xa4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_SPI1_Init+0xa4>)
 80008e6:	2207      	movs	r2, #7
 80008e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_SPI1_Init+0xa4>)
 80008ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_SPI1_Init+0xa4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_SPI1_Init+0xa4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_SPI1_Init+0xa4>)
 8000900:	2200      	movs	r2, #0
 8000902:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <MX_SPI1_Init+0xa4>)
 8000906:	2200      	movs	r2, #0
 8000908:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_SPI1_Init+0xa4>)
 800090c:	2200      	movs	r2, #0
 800090e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_SPI1_Init+0xa4>)
 8000912:	2200      	movs	r2, #0
 8000914:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_SPI1_Init+0xa4>)
 8000918:	2200      	movs	r2, #0
 800091a:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_SPI1_Init+0xa4>)
 800091e:	2200      	movs	r2, #0
 8000920:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_SPI1_Init+0xa4>)
 8000924:	2200      	movs	r2, #0
 8000926:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_SPI1_Init+0xa4>)
 800092a:	f007 fae7 	bl	8007efc <HAL_SPI_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000934:	f000 f918 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000088 	.word	0x20000088
 8000940:	40013000 	.word	0x40013000

08000944 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000948:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800094a:	4a23      	ldr	r2, [pc, #140]	; (80009d8 <MX_USART3_UART_Init+0x94>)
 800094c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094e:	4b21      	ldr	r3, [pc, #132]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800098c:	4811      	ldr	r0, [pc, #68]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 800098e:	f008 fb30 	bl	8008ff2 <HAL_UART_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000998:	f000 f8e6 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	480d      	ldr	r0, [pc, #52]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 80009a0:	f009 f856 	bl	8009a50 <HAL_UARTEx_SetTxFifoThreshold>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009aa:	f000 f8dd 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4808      	ldr	r0, [pc, #32]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 80009b2:	f009 f88b 	bl	8009acc <HAL_UARTEx_SetRxFifoThreshold>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009bc:	f000 f8d4 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_USART3_UART_Init+0x90>)
 80009c2:	f009 f80c 	bl	80099de <HAL_UARTEx_DisableFifoMode>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009cc:	f000 f8cc 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000118 	.word	0x20000118
 80009d8:	40004800 	.word	0x40004800

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08c      	sub	sp, #48	; 0x30
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b57      	ldr	r3, [pc, #348]	; (8000b50 <MX_GPIO_Init+0x174>)
 80009f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009f8:	4a55      	ldr	r2, [pc, #340]	; (8000b50 <MX_GPIO_Init+0x174>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a02:	4b53      	ldr	r3, [pc, #332]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a08:	f003 0304 	and.w	r3, r3, #4
 8000a0c:	61bb      	str	r3, [r7, #24]
 8000a0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a10:	4b4f      	ldr	r3, [pc, #316]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a16:	4a4e      	ldr	r2, [pc, #312]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a18:	f043 0320 	orr.w	r3, r3, #32
 8000a1c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a20:	4b4b      	ldr	r3, [pc, #300]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a26:	f003 0320 	and.w	r3, r3, #32
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b48      	ldr	r3, [pc, #288]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a34:	4a46      	ldr	r2, [pc, #280]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a3e:	4b44      	ldr	r3, [pc, #272]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4c:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a52:	4a3f      	ldr	r2, [pc, #252]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a5c:	4b3c      	ldr	r3, [pc, #240]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a6a:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a70:	4a37      	ldr	r2, [pc, #220]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a7a:	4b35      	ldr	r3, [pc, #212]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a88:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a8e:	4a30      	ldr	r2, [pc, #192]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a98:	4b2d      	ldr	r3, [pc, #180]	; (8000b50 <MX_GPIO_Init+0x174>)
 8000a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CE_GPIO_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2140      	movs	r1, #64	; 0x40
 8000aaa:	482a      	ldr	r0, [pc, #168]	; (8000b54 <MX_GPIO_Init+0x178>)
 8000aac:	f001 fa1c 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRF_CSN_GPIO_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab6:	4828      	ldr	r0, [pc, #160]	; (8000b58 <MX_GPIO_Init+0x17c>)
 8000ab8:	f001 fa16 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_USER_Pin */
  GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000abc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac2:	4b26      	ldr	r3, [pc, #152]	; (8000b5c <MX_GPIO_Init+0x180>)
 8000ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4820      	ldr	r0, [pc, #128]	; (8000b54 <MX_GPIO_Init+0x178>)
 8000ad2:	f001 f89f 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_GPIO_Init+0x184>)
 8000adc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	481e      	ldr	r0, [pc, #120]	; (8000b64 <MX_GPIO_Init+0x188>)
 8000aea:	f001 f893 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CE_Pin */
  GPIO_InitStruct.Pin = NRF_CE_Pin;
 8000aee:	2340      	movs	r3, #64	; 0x40
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NRF_CE_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	4813      	ldr	r0, [pc, #76]	; (8000b54 <MX_GPIO_Init+0x178>)
 8000b06:	f001 f885 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_CSN_Pin */
  GPIO_InitStruct.Pin = NRF_CSN_Pin;
 8000b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(NRF_CSN_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	480d      	ldr	r0, [pc, #52]	; (8000b58 <MX_GPIO_Init+0x17c>)
 8000b24:	f001 f876 	bl	8001c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	200e      	movs	r0, #14
 8000b2e:	f001 f83c 	bl	8001baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b32:	200e      	movs	r0, #14
 8000b34:	f001 f853 	bl	8001bde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2018      	movs	r0, #24
 8000b3e:	f001 f834 	bl	8001baa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000b42:	2018      	movs	r0, #24
 8000b44:	f001 f84b 	bl	8001bde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b48:	bf00      	nop
 8000b4a:	3730      	adds	r7, #48	; 0x30
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	44020c00 	.word	0x44020c00
 8000b54:	42020800 	.word	0x42020800
 8000b58:	42020400 	.word	0x42020400
 8000b5c:	10110000 	.word	0x10110000
 8000b60:	10210000 	.word	0x10210000
 8000b64:	42021400 	.word	0x42021400

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <csn_set>:

/*
 * Private functions
 */

void csn_set() {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_SET);
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <csn_set+0x18>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <csn_set+0x1c>)
 8000b7e:	8811      	ldrh	r1, [r2, #0]
 8000b80:	2201      	movs	r2, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 f9b0 	bl	8001ee8 <HAL_GPIO_WritePin>
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200001b0 	.word	0x200001b0
 8000b90:	200001b4 	.word	0x200001b4

08000b94 <csn_reset>:

void csn_reset() {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CSN_Port, NRF_CSN_Pin, GPIO_PIN_RESET);
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <csn_reset+0x18>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <csn_reset+0x1c>)
 8000b9e:	8811      	ldrh	r1, [r2, #0]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 f9a0 	bl	8001ee8 <HAL_GPIO_WritePin>
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200001b0 	.word	0x200001b0
 8000bb0:	200001b4 	.word	0x200001b4

08000bb4 <ce_set>:

void ce_set() {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_SET);
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <ce_set+0x18>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <ce_set+0x1c>)
 8000bbe:	8811      	ldrh	r1, [r2, #0]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f001 f990 	bl	8001ee8 <HAL_GPIO_WritePin>
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200001b8 	.word	0x200001b8
 8000bd0:	200001bc 	.word	0x200001bc

08000bd4 <ce_reset>:

void ce_reset() {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(NRF_CE_Port, NRF_CE_Pin, GPIO_PIN_RESET);
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <ce_reset+0x18>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <ce_reset+0x1c>)
 8000bde:	8811      	ldrh	r1, [r2, #0]
 8000be0:	2200      	movs	r2, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 f980 	bl	8001ee8 <HAL_GPIO_WritePin>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200001b8 	.word	0x200001b8
 8000bf0:	200001bc 	.word	0x200001bc

08000bf4 <NRF_Init>:
 *
 * Main functions
 *
 */

NRF_Status NRF_Init(SPI_HandleTypeDef *handle, GPIO_TypeDef *PortCSN, uint16_t PinCSN, GPIO_TypeDef *PortCE, uint16_t PinCE) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	603b      	str	r3, [r7, #0]
 8000c00:	4613      	mov	r3, r2
 8000c02:	80fb      	strh	r3, [r7, #6]
  HSPI = handle;
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <NRF_Init+0x48>)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6013      	str	r3, [r2, #0]
  NRF_CSN_Port = PortCSN;
 8000c0a:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <NRF_Init+0x4c>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	6013      	str	r3, [r2, #0]
  NRF_CSN_Pin = PinCSN;
 8000c10:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <NRF_Init+0x50>)
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	8013      	strh	r3, [r2, #0]
  NRF_CE_Port = PortCE;
 8000c16:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <NRF_Init+0x54>)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	6013      	str	r3, [r2, #0]
  NRF_CE_Pin = PinCE;
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <NRF_Init+0x58>)
 8000c1e:	8b3b      	ldrh	r3, [r7, #24]
 8000c20:	8013      	strh	r3, [r2, #0]

  // Make sure CSN i pulled high
  csn_set();
 8000c22:	f7ff ffa7 	bl	8000b74 <csn_set>

  // Takes ~100ms from power on to start up
  HAL_Delay(100);
 8000c26:	2064      	movs	r0, #100	; 0x64
 8000c28:	f000 fec0 	bl	80019ac <HAL_Delay>

  return NRF_EnterMode(NRF_MODE_STANDBY1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f000 f89f 	bl	8000d70 <NRF_EnterMode>
 8000c32:	4603      	mov	r3, r0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200001ac 	.word	0x200001ac
 8000c40:	200001b0 	.word	0x200001b0
 8000c44:	200001b4 	.word	0x200001b4
 8000c48:	200001b8 	.word	0x200001b8
 8000c4c:	200001bc 	.word	0x200001bc

08000c50 <NRF_SendCommand>:

NRF_Status NRF_SendCommand(uint8_t cmd) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000c5e:	f7ff ff99 	bl	8000b94 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <NRF_SendCommand+0x44>)
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	f107 020e 	add.w	r2, r7, #14
 8000c6a:	1df9      	adds	r1, r7, #7
 8000c6c:	230a      	movs	r3, #10
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	2301      	movs	r3, #1
 8000c72:	f007 fe8f 	bl	8008994 <HAL_SPI_TransmitReceive>
 8000c76:	4603      	mov	r3, r0
 8000c78:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <NRF_SendCommand+0x34>
    return ret;
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	e002      	b.n	8000c8a <NRF_SendCommand+0x3a>
  }
  csn_set();
 8000c84:	f7ff ff76 	bl	8000b74 <csn_set>

  return ret;
 8000c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200001ac 	.word	0x200001ac

08000c98 <NRF_SendWriteCommand>:

NRF_Status NRF_SendWriteCommand(uint8_t cmd, uint8_t *write, uint8_t length) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000cac:	f7ff ff72 	bl	8000b94 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <NRF_SendWriteCommand+0x68>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	f107 020e 	add.w	r2, r7, #14
 8000cb8:	1df9      	adds	r1, r7, #7
 8000cba:	230a      	movs	r3, #10
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	f007 fe68 	bl	8008994 <HAL_SPI_TransmitReceive>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000cc8:	7bfb      	ldrb	r3, [r7, #15]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <NRF_SendWriteCommand+0x3a>
    return ret;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	e011      	b.n	8000cf6 <NRF_SendWriteCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Transmit(HSPI, write, length, NRF_SPI_TIMEOUT_DUR);
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <NRF_SendWriteCommand+0x68>)
 8000cd4:	6818      	ldr	r0, [r3, #0]
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	230a      	movs	r3, #10
 8000cdc:	6839      	ldr	r1, [r7, #0]
 8000cde:	f007 fa7d 	bl	80081dc <HAL_SPI_Transmit>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <NRF_SendWriteCommand+0x58>
    return ret;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	e002      	b.n	8000cf6 <NRF_SendWriteCommand+0x5e>
  }
  csn_set();
 8000cf0:	f7ff ff40 	bl	8000b74 <csn_set>

  return ret;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200001ac 	.word	0x200001ac

08000d04 <NRF_SendReadCommand>:

NRF_Status NRF_SendReadCommand(uint8_t cmd, uint8_t *read, uint8_t length) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af02      	add	r7, sp, #8
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	4613      	mov	r3, r2
 8000d12:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint8_t status;

  csn_reset();
 8000d18:	f7ff ff3c 	bl	8000b94 <csn_reset>
  ret = (NRF_Status)HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <NRF_SendReadCommand+0x68>)
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	f107 020e 	add.w	r2, r7, #14
 8000d24:	1df9      	adds	r1, r7, #7
 8000d26:	230a      	movs	r3, #10
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f007 fe32 	bl	8008994 <HAL_SPI_TransmitReceive>
 8000d30:	4603      	mov	r3, r0
 8000d32:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <NRF_SendReadCommand+0x3a>
    return ret;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	e011      	b.n	8000d62 <NRF_SendReadCommand+0x5e>
  }
  ret = (NRF_Status)HAL_SPI_Receive(HSPI, read, length, NRF_SPI_TIMEOUT_DUR);
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <NRF_SendReadCommand+0x68>)
 8000d40:	6818      	ldr	r0, [r3, #0]
 8000d42:	79bb      	ldrb	r3, [r7, #6]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	230a      	movs	r3, #10
 8000d48:	6839      	ldr	r1, [r7, #0]
 8000d4a:	f007 fc6b 	bl	8008624 <HAL_SPI_Receive>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <NRF_SendReadCommand+0x58>
    return ret;
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	e002      	b.n	8000d62 <NRF_SendReadCommand+0x5e>
  }
  csn_set();
 8000d5c:	f7ff ff0a 	bl	8000b74 <csn_set>

  return ret;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200001ac 	.word	0x200001ac

08000d70 <NRF_EnterMode>:
 *
 * Device control
 *
 */

NRF_Status NRF_EnterMode(uint8_t mode) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  NRF_Status ret = NRF_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]

  switch(mode) {
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	2b03      	cmp	r3, #3
 8000d82:	dc2a      	bgt.n	8000dda <NRF_EnterMode+0x6a>
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	da15      	bge.n	8000db4 <NRF_EnterMode+0x44>
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <NRF_EnterMode+0x22>
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d006      	beq.n	8000d9e <NRF_EnterMode+0x2e>
 8000d90:	e023      	b.n	8000dda <NRF_EnterMode+0x6a>
    case NRF_MODE_POWERDOWN:
      // Can come from any mode
      ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000d92:	2101      	movs	r1, #1
 8000d94:	2000      	movs	r0, #0
 8000d96:	f000 f8c7 	bl	8000f28 <NRF_ResetRegisterBit>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	73fb      	strb	r3, [r7, #15]
    case NRF_MODE_STANDBY1:
      // We expect to come from powerdown
      ce_reset();
 8000d9e:	f7ff ff19 	bl	8000bd4 <ce_reset>
      ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PWR_UP);
 8000da2:	2101      	movs	r1, #1
 8000da4:	2000      	movs	r0, #0
 8000da6:	f000 f88e 	bl	8000ec6 <NRF_SetRegisterBit>
 8000daa:	4603      	mov	r3, r0
 8000dac:	73fb      	strb	r3, [r7, #15]
      HAL_Delay(2);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f000 fdfc 	bl	80019ac <HAL_Delay>
    case NRF_MODE_RX:
    case NRF_MODE_TX:
      // We expect to come from standby-I
      if (mode == NRF_MODE_TX) {
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d106      	bne.n	8000dc8 <NRF_EnterMode+0x58>
        ret = NRF_ResetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	f000 f8b3 	bl	8000f28 <NRF_ResetRegisterBit>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	73fb      	strb	r3, [r7, #15]
 8000dc6:	e005      	b.n	8000dd4 <NRF_EnterMode+0x64>
      } else {
        ret = NRF_SetRegisterBit(NRF_REG_CONFIG, CFG_BIT_PRIM_RX);
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f000 f87b 	bl	8000ec6 <NRF_SetRegisterBit>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	73fb      	strb	r3, [r7, #15]
      }

      // Enter mode
      ce_set();
 8000dd4:	f7ff feee 	bl	8000bb4 <ce_set>
      break;
 8000dd8:	e002      	b.n	8000de0 <NRF_EnterMode+0x70>
    default:
      ret = NRF_ERROR;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	73fb      	strb	r3, [r7, #15]
      break;
 8000dde:	bf00      	nop
  }

  return ret;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <NRF_WritePayload>:

NRF_Status NRF_WritePayload(uint8_t *payload, uint8_t length) {
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	460b      	mov	r3, r1
 8000df4:	70fb      	strb	r3, [r7, #3]
  return NRF_SendWriteCommand(NRF_CMD_W_TX_PAYLOAD, payload, length);
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	20a0      	movs	r0, #160	; 0xa0
 8000dfe:	f7ff ff4b 	bl	8000c98 <NRF_SendWriteCommand>
 8000e02:	4603      	mov	r3, r0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <NRF_ReadPayload>:

NRF_Status NRF_ReadPayload(uint8_t *read, uint8_t length) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	70fb      	strb	r3, [r7, #3]
  return NRF_SendReadCommand(NRF_CMD_R_RX_PAYLOAD, read, length);
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	6879      	ldr	r1, [r7, #4]
 8000e1e:	2061      	movs	r0, #97	; 0x61
 8000e20:	f7ff ff70 	bl	8000d04 <NRF_SendReadCommand>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <NRF_Transmit>:

NRF_Status NRF_Transmit(uint8_t *payload, uint8_t length) {
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	460b      	mov	r3, r1
 8000e38:	70fb      	strb	r3, [r7, #3]
  NRF_Status ret = NRF_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	73fb      	strb	r3, [r7, #15]
  ret = NRF_WritePayload(payload, length);
 8000e3e:	78fb      	ldrb	r3, [r7, #3]
 8000e40:	4619      	mov	r1, r3
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffd1 	bl	8000dea <NRF_WritePayload>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	73fb      	strb	r3, [r7, #15]
  if(ret != NRF_OK) {
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <NRF_Transmit+0x28>
    return ret;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	e007      	b.n	8000e66 <NRF_Transmit+0x38>
  }

  ce_set();
 8000e56:	f7ff fead 	bl	8000bb4 <ce_set>
  HAL_Delay(1);
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f000 fda6 	bl	80019ac <HAL_Delay>
  ce_reset();
 8000e60:	f7ff feb8 	bl	8000bd4 <ce_reset>

  return ret;
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <NRF_WriteRegister>:
 * Register helpers
 *
 */

/* Writing */
NRF_Status NRF_WriteRegister(uint8_t reg, uint8_t *write, uint8_t length) {
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	6039      	str	r1, [r7, #0]
 8000e78:	71fb      	strb	r3, [r7, #7]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	71bb      	strb	r3, [r7, #6]
  return NRF_SendWriteCommand(NRF_CMD_W_REGISTER | reg, write, length);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	79ba      	ldrb	r2, [r7, #6]
 8000e88:	6839      	ldr	r1, [r7, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff04 	bl	8000c98 <NRF_SendWriteCommand>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <NRF_WriteRegisterByte>:

NRF_Status NRF_WriteRegisterByte(uint8_t reg, uint8_t byte) {
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	460a      	mov	r2, r1
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	71bb      	strb	r3, [r7, #6]
  uint8_t write = byte;
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	73fb      	strb	r3, [r7, #15]
  return NRF_WriteRegister(reg, &write, 1);
 8000eae:	f107 010f 	add.w	r1, r7, #15
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ffd9 	bl	8000e6e <NRF_WriteRegister>
 8000ebc:	4603      	mov	r3, r0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <NRF_SetRegisterBit>:

NRF_Status NRF_SetRegisterBit(uint8_t reg, uint8_t bit) {
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b084      	sub	sp, #16
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	460a      	mov	r2, r1
 8000ed0:	71fb      	strb	r3, [r7, #7]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 8000ede:	f107 010e 	add.w	r1, r7, #14
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f851 	bl	8000f8e <NRF_ReadRegister>
 8000eec:	4603      	mov	r3, r0
 8000eee:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <NRF_SetRegisterBit+0x34>
    return ret;
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	e012      	b.n	8000f20 <NRF_SetRegisterBit+0x5a>
  }

  cfg = cfg | (1 << bit);
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	2201      	movs	r2, #1
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	b25a      	sxtb	r2, r3
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 8000f10:	f107 010e 	add.w	r1, r7, #14
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	2201      	movs	r2, #1
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ffa8 	bl	8000e6e <NRF_WriteRegister>
 8000f1e:	4603      	mov	r3, r0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <NRF_ResetRegisterBit>:

NRF_Status NRF_ResetRegisterBit(uint8_t reg, uint8_t bit) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	460a      	mov	r2, r1
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	4613      	mov	r3, r2
 8000f36:	71bb      	strb	r3, [r7, #6]
  NRF_Status ret = NRF_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint8_t cfg = 0x00;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73bb      	strb	r3, [r7, #14]

  ret = NRF_ReadRegister(reg, &cfg, 1);
 8000f40:	f107 010e 	add.w	r1, r7, #14
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	2201      	movs	r2, #1
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f820 	bl	8000f8e <NRF_ReadRegister>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
  if (ret != NRF_OK) {
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <NRF_ResetRegisterBit+0x34>
    return ret;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	e014      	b.n	8000f86 <NRF_ResetRegisterBit+0x5e>
  }

  cfg = cfg & ~(1 << bit);
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	b25a      	sxtb	r2, r3
 8000f6a:	7bbb      	ldrb	r3, [r7, #14]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	4013      	ands	r3, r2
 8000f70:	b25b      	sxtb	r3, r3
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	73bb      	strb	r3, [r7, #14]
  return NRF_WriteRegister(reg, &cfg, 1);
 8000f76:	f107 010e 	add.w	r1, r7, #14
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff75 	bl	8000e6e <NRF_WriteRegister>
 8000f84:	4603      	mov	r3, r0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <NRF_ReadRegister>:


/* Reading */
NRF_Status NRF_ReadRegister(uint8_t reg, uint8_t *read, uint8_t length) {
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	b082      	sub	sp, #8
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	4603      	mov	r3, r0
 8000f96:	6039      	str	r1, [r7, #0]
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	71bb      	strb	r3, [r7, #6]
  return NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, read, length);
 8000f9e:	79ba      	ldrb	r2, [r7, #6]
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	6839      	ldr	r1, [r7, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fead 	bl	8000d04 <NRF_SendReadCommand>
 8000faa:	4603      	mov	r3, r0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <NRF_ReadRegisterByte>:

uint8_t NRF_ReadRegisterByte(uint8_t reg) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  uint8_t read;
  NRF_SendReadCommand(NRF_CMD_R_REGISTER | reg, &read, 1);
 8000fbe:	f107 010f 	add.w	r1, r7, #15
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fe9c 	bl	8000d04 <NRF_SendReadCommand>
  return read;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <NRF_ReadStatus>:

uint8_t NRF_ReadStatus() {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af02      	add	r7, sp, #8
  uint8_t status = 0x00;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd = NRF_CMD_NOP;
 8000fe2:	23ff      	movs	r3, #255	; 0xff
 8000fe4:	71bb      	strb	r3, [r7, #6]

  csn_reset();
 8000fe6:	f7ff fdd5 	bl	8000b94 <csn_reset>
  HAL_SPI_TransmitReceive(HSPI, &cmd, &status, 1, NRF_SPI_TIMEOUT_DUR);
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <NRF_ReadStatus+0x34>)
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	1dfa      	adds	r2, r7, #7
 8000ff0:	1db9      	adds	r1, r7, #6
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	f007 fccc 	bl	8008994 <HAL_SPI_TransmitReceive>
  csn_set();
 8000ffc:	f7ff fdba 	bl	8000b74 <csn_set>

  return status;
 8001000:	79fb      	ldrb	r3, [r7, #7]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001ac 	.word	0x200001ac

08001010 <NRF_Reset>:
  }

  return ret;
}

void NRF_Reset() {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
  // Reset state (goto standby-I)
  csn_set();
 8001016:	f7ff fdad 	bl	8000b74 <csn_set>
  ce_reset();
 800101a:	f7ff fddb 	bl	8000bd4 <ce_reset>

  // Flush FIFOs
  NRF_EnterMode(NRF_MODE_TX);
 800101e:	2003      	movs	r0, #3
 8001020:	f7ff fea6 	bl	8000d70 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_TX);
 8001024:	20e1      	movs	r0, #225	; 0xe1
 8001026:	f7ff fe13 	bl	8000c50 <NRF_SendCommand>
  ce_reset();
 800102a:	f7ff fdd3 	bl	8000bd4 <ce_reset>
  NRF_EnterMode(NRF_MODE_RX);
 800102e:	2002      	movs	r0, #2
 8001030:	f7ff fe9e 	bl	8000d70 <NRF_EnterMode>
  NRF_SendCommand(NRF_CMD_FLUSH_RX);
 8001034:	20e2      	movs	r0, #226	; 0xe2
 8001036:	f7ff fe0b 	bl	8000c50 <NRF_SendCommand>
  ce_reset();
 800103a:	f7ff fdcb 	bl	8000bd4 <ce_reset>

  // Flush register
  NRF_WriteRegisterByte(NRF_REG_CONFIG,       0x0A);
 800103e:	210a      	movs	r1, #10
 8001040:	2000      	movs	r0, #0
 8001042:	f7ff ff2a 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_AA,        0x3f);
 8001046:	213f      	movs	r1, #63	; 0x3f
 8001048:	2001      	movs	r0, #1
 800104a:	f7ff ff26 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_EN_RXADDR,    0x03);
 800104e:	2103      	movs	r1, #3
 8001050:	2002      	movs	r0, #2
 8001052:	f7ff ff22 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_AW,     0x03);
 8001056:	2103      	movs	r1, #3
 8001058:	2003      	movs	r0, #3
 800105a:	f7ff ff1e 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_SETUP_RETR,   0x03);
 800105e:	2103      	movs	r1, #3
 8001060:	2004      	movs	r0, #4
 8001062:	f7ff ff1a 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_CH,        0x02);
 8001066:	2102      	movs	r1, #2
 8001068:	2005      	movs	r0, #5
 800106a:	f7ff ff16 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RF_SETUP,     0x0e);
 800106e:	210e      	movs	r1, #14
 8001070:	2006      	movs	r0, #6
 8001072:	f7ff ff12 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_STATUS,       0x70); // clear flags
 8001076:	2170      	movs	r1, #112	; 0x70
 8001078:	2007      	movs	r0, #7
 800107a:	f7ff ff0e 	bl	8000e9a <NRF_WriteRegisterByte>

  uint8_t address[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800107e:	4a2d      	ldr	r2, [pc, #180]	; (8001134 <NRF_Reset+0x124>)
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001088:	6018      	str	r0, [r3, #0]
 800108a:	3304      	adds	r3, #4
 800108c:	7019      	strb	r1, [r3, #0]
  uint8_t address2[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 800108e:	4a2a      	ldr	r2, [pc, #168]	; (8001138 <NRF_Reset+0x128>)
 8001090:	463b      	mov	r3, r7
 8001092:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001096:	6018      	str	r0, [r3, #0]
 8001098:	3304      	adds	r3, #4
 800109a:	7019      	strb	r1, [r3, #0]
  NRF_WriteRegister(NRF_REG_RX_ADDR_P0, address, 5);
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	2205      	movs	r2, #5
 80010a2:	4619      	mov	r1, r3
 80010a4:	200a      	movs	r0, #10
 80010a6:	f7ff fee2 	bl	8000e6e <NRF_WriteRegister>
  NRF_WriteRegister(NRF_REG_RX_ADDR_P1, address2, 5);
 80010aa:	463b      	mov	r3, r7
 80010ac:	2205      	movs	r2, #5
 80010ae:	4619      	mov	r1, r3
 80010b0:	200b      	movs	r0, #11
 80010b2:	f7ff fedc 	bl	8000e6e <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P2,   0xC3);
 80010b6:	21c3      	movs	r1, #195	; 0xc3
 80010b8:	200c      	movs	r0, #12
 80010ba:	f7ff feee 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P3,   0xC4);
 80010be:	21c4      	movs	r1, #196	; 0xc4
 80010c0:	200d      	movs	r0, #13
 80010c2:	f7ff feea 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P4,   0xC5);
 80010c6:	21c5      	movs	r1, #197	; 0xc5
 80010c8:	200e      	movs	r0, #14
 80010ca:	f7ff fee6 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_ADDR_P5,   0xC6);
 80010ce:	21c6      	movs	r1, #198	; 0xc6
 80010d0:	200f      	movs	r0, #15
 80010d2:	f7ff fee2 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegister(NRF_REG_TX_ADDR, address, 5);
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	2205      	movs	r2, #5
 80010dc:	4619      	mov	r1, r3
 80010de:	2010      	movs	r0, #16
 80010e0:	f7ff fec5 	bl	8000e6e <NRF_WriteRegister>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P0,     0x00);
 80010e4:	2100      	movs	r1, #0
 80010e6:	2011      	movs	r0, #17
 80010e8:	f7ff fed7 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P1,     0x00);
 80010ec:	2100      	movs	r1, #0
 80010ee:	2012      	movs	r0, #18
 80010f0:	f7ff fed3 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P2,     0x00);
 80010f4:	2100      	movs	r1, #0
 80010f6:	2013      	movs	r0, #19
 80010f8:	f7ff fecf 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P3,     0x00);
 80010fc:	2100      	movs	r1, #0
 80010fe:	2014      	movs	r0, #20
 8001100:	f7ff fecb 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P4,     0x00);
 8001104:	2100      	movs	r1, #0
 8001106:	2015      	movs	r0, #21
 8001108:	f7ff fec7 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_RX_PW_P5,     0x00);
 800110c:	2100      	movs	r1, #0
 800110e:	2016      	movs	r0, #22
 8001110:	f7ff fec3 	bl	8000e9a <NRF_WriteRegisterByte>

  NRF_WriteRegisterByte(NRF_REG_FIFO_STATUS,  0x00);
 8001114:	2100      	movs	r1, #0
 8001116:	2017      	movs	r0, #23
 8001118:	f7ff febf 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_DYNPD,        0x00);
 800111c:	2100      	movs	r1, #0
 800111e:	201c      	movs	r0, #28
 8001120:	f7ff febb 	bl	8000e9a <NRF_WriteRegisterByte>
  NRF_WriteRegisterByte(NRF_REG_FEATURE,      0x00);
 8001124:	2100      	movs	r1, #0
 8001126:	201d      	movs	r0, #29
 8001128:	f7ff feb7 	bl	8000e9a <NRF_WriteRegisterByte>
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	0800aca8 	.word	0x0800aca8
 8001138:	0800acb0 	.word	0x0800acb0

0800113c <NRF_PrintStatus>:

void NRF_PrintStatus() {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  uint8_t status = NRF_ReadStatus();
 8001142:	f7ff ff49 	bl	8000fd8 <NRF_ReadStatus>
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]

  printf("Status register: %02X\r\n", status);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	4619      	mov	r1, r3
 800114e:	4825      	ldr	r0, [pc, #148]	; (80011e4 <NRF_PrintStatus+0xa8>)
 8001150:	f008 fe0a 	bl	8009d68 <iprintf>
  printf("CE: %d\r\n", HAL_GPIO_ReadPin(NRF_CE_Port, NRF_CE_Pin));
 8001154:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <NRF_PrintStatus+0xac>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a24      	ldr	r2, [pc, #144]	; (80011ec <NRF_PrintStatus+0xb0>)
 800115a:	8812      	ldrh	r2, [r2, #0]
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f000 feaa 	bl	8001eb8 <HAL_GPIO_ReadPin>
 8001164:	4603      	mov	r3, r0
 8001166:	4619      	mov	r1, r3
 8001168:	4821      	ldr	r0, [pc, #132]	; (80011f0 <NRF_PrintStatus+0xb4>)
 800116a:	f008 fdfd 	bl	8009d68 <iprintf>
  printf("CSN: %d\r\n", HAL_GPIO_ReadPin(NRF_CSN_Port, NRF_CSN_Pin));
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <NRF_PrintStatus+0xb8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a21      	ldr	r2, [pc, #132]	; (80011f8 <NRF_PrintStatus+0xbc>)
 8001174:	8812      	ldrh	r2, [r2, #0]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fe9d 	bl	8001eb8 <HAL_GPIO_ReadPin>
 800117e:	4603      	mov	r3, r0
 8001180:	4619      	mov	r1, r3
 8001182:	481e      	ldr	r0, [pc, #120]	; (80011fc <NRF_PrintStatus+0xc0>)
 8001184:	f008 fdf0 	bl	8009d68 <iprintf>
  printf("TX_FULL:  %1X\r\n", status & (1<<STATUS_BIT_TX_FULL));
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	4619      	mov	r1, r3
 8001190:	481b      	ldr	r0, [pc, #108]	; (8001200 <NRF_PrintStatus+0xc4>)
 8001192:	f008 fde9 	bl	8009d68 <iprintf>
  printf("RX_P_NO:  %1X\r\n", (status & (0x3<<STATUS_BIT_RX_P_NO)) >> 1);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	105b      	asrs	r3, r3, #1
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	4619      	mov	r1, r3
 80011a0:	4818      	ldr	r0, [pc, #96]	; (8001204 <NRF_PrintStatus+0xc8>)
 80011a2:	f008 fde1 	bl	8009d68 <iprintf>
  printf("MAX_RT:   %1X\r\n", (status & (1<<STATUS_BIT_MAX_RT))    >> 4);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	111b      	asrs	r3, r3, #4
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	4619      	mov	r1, r3
 80011b0:	4815      	ldr	r0, [pc, #84]	; (8001208 <NRF_PrintStatus+0xcc>)
 80011b2:	f008 fdd9 	bl	8009d68 <iprintf>
  printf("TX_DS:    %1X\r\n", (status & (1<<STATUS_BIT_TX_DS))     >> 5);
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	115b      	asrs	r3, r3, #5
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	4619      	mov	r1, r3
 80011c0:	4812      	ldr	r0, [pc, #72]	; (800120c <NRF_PrintStatus+0xd0>)
 80011c2:	f008 fdd1 	bl	8009d68 <iprintf>
  printf("RX_DR:    %1X\r\n", (status & (1<<STATUS_BIT_RX_DR))     >> 6);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	119b      	asrs	r3, r3, #6
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	4619      	mov	r1, r3
 80011d0:	480f      	ldr	r0, [pc, #60]	; (8001210 <NRF_PrintStatus+0xd4>)
 80011d2:	f008 fdc9 	bl	8009d68 <iprintf>
  printf("\r\n");
 80011d6:	480f      	ldr	r0, [pc, #60]	; (8001214 <NRF_PrintStatus+0xd8>)
 80011d8:	f008 fe34 	bl	8009e44 <puts>
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0800acb8 	.word	0x0800acb8
 80011e8:	200001b8 	.word	0x200001b8
 80011ec:	200001bc 	.word	0x200001bc
 80011f0:	0800acd0 	.word	0x0800acd0
 80011f4:	200001b0 	.word	0x200001b0
 80011f8:	200001b4 	.word	0x200001b4
 80011fc:	0800acdc 	.word	0x0800acdc
 8001200:	0800ace8 	.word	0x0800ace8
 8001204:	0800acf8 	.word	0x0800acf8
 8001208:	0800ad08 	.word	0x0800ad08
 800120c:	0800ad18 	.word	0x0800ad18
 8001210:	0800ad28 	.word	0x0800ad28
 8001214:	0800ad38 	.word	0x0800ad38

08001218 <NRF_PrintFIFOStatus>:

void NRF_PrintFIFOStatus() {
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  uint8_t reg = NRF_ReadRegisterByte(NRF_REG_FIFO_STATUS);
 800121e:	2017      	movs	r0, #23
 8001220:	f7ff fec8 	bl	8000fb4 <NRF_ReadRegisterByte>
 8001224:	4603      	mov	r3, r0
 8001226:	71fb      	strb	r3, [r7, #7]

  printf("FIFO status register: %02X\r\n", reg);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	4619      	mov	r1, r3
 800122c:	4818      	ldr	r0, [pc, #96]	; (8001290 <NRF_PrintFIFOStatus+0x78>)
 800122e:	f008 fd9b 	bl	8009d68 <iprintf>
  printf("RX_EMPTY:   %2X\r\n", reg &  (1<<FIFO_STATUS_BIT_RX_EMPTY));
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	4619      	mov	r1, r3
 800123a:	4816      	ldr	r0, [pc, #88]	; (8001294 <NRF_PrintFIFOStatus+0x7c>)
 800123c:	f008 fd94 	bl	8009d68 <iprintf>
  printf("RX_FULL:    %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_RX_FULL))     >> 1);
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	105b      	asrs	r3, r3, #1
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	4619      	mov	r1, r3
 800124a:	4813      	ldr	r0, [pc, #76]	; (8001298 <NRF_PrintFIFOStatus+0x80>)
 800124c:	f008 fd8c 	bl	8009d68 <iprintf>
  printf("TX_EMPTY:   %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_EMPTY))    >> 4);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	111b      	asrs	r3, r3, #4
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	4619      	mov	r1, r3
 800125a:	4810      	ldr	r0, [pc, #64]	; (800129c <NRF_PrintFIFOStatus+0x84>)
 800125c:	f008 fd84 	bl	8009d68 <iprintf>
  printf("TX_FULL:    %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_FULL))     >> 5);
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	115b      	asrs	r3, r3, #5
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <NRF_PrintFIFOStatus+0x88>)
 800126c:	f008 fd7c 	bl	8009d68 <iprintf>
  printf("TX_REUSE:   %2X\r\n", (reg & (1<<FIFO_STATUS_BIT_TX_REUSE))    >> 6);
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	119b      	asrs	r3, r3, #6
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	4619      	mov	r1, r3
 800127a:	480a      	ldr	r0, [pc, #40]	; (80012a4 <NRF_PrintFIFOStatus+0x8c>)
 800127c:	f008 fd74 	bl	8009d68 <iprintf>
  printf("\r\n");
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <NRF_PrintFIFOStatus+0x90>)
 8001282:	f008 fddf 	bl	8009e44 <puts>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	0800ad3c 	.word	0x0800ad3c
 8001294:	0800ad5c 	.word	0x0800ad5c
 8001298:	0800ad70 	.word	0x0800ad70
 800129c:	0800ad84 	.word	0x0800ad84
 80012a0:	0800ad98 	.word	0x0800ad98
 80012a4:	0800adac 	.word	0x0800adac
 80012a8:	0800ad38 	.word	0x0800ad38

080012ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0ce      	sub	sp, #312	; 0x138
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012c6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012ca:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012dc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012e0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80012e4:	4618      	mov	r0, r3
 80012e6:	f44f 7384 	mov.w	r3, #264	; 0x108
 80012ea:	461a      	mov	r2, r3
 80012ec:	2100      	movs	r1, #0
 80012ee:	f008 fe89 	bl	800a004 <memset>
  if(hspi->Instance==SPI1)
 80012f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012f6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a60      	ldr	r2, [pc, #384]	; (8001480 <HAL_SPI_MspInit+0x1c4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	f040 80b7 	bne.w	8001474 <HAL_SPI_MspInit+0x1b8>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001306:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800130a:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 800130e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 800131a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800131e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001322:	2200      	movs	r2, #0
 8001324:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	4618      	mov	r0, r3
 800132e:	f001 fd93 	bl	8002e58 <HAL_RCCEx_PeriphCLKConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8001338:	f7ff fc16 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800133c:	4b51      	ldr	r3, [pc, #324]	; (8001484 <HAL_SPI_MspInit+0x1c8>)
 800133e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001342:	4a50      	ldr	r2, [pc, #320]	; (8001484 <HAL_SPI_MspInit+0x1c8>)
 8001344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001348:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800134c:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <HAL_SPI_MspInit+0x1c8>)
 800134e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001352:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001356:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800135a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001364:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001368:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b46      	ldr	r3, [pc, #280]	; (8001484 <HAL_SPI_MspInit+0x1c8>)
 800136c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001370:	4a44      	ldr	r2, [pc, #272]	; (8001484 <HAL_SPI_MspInit+0x1c8>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800137a:	4b42      	ldr	r3, [pc, #264]	; (8001484 <HAL_SPI_MspInit+0x1c8>)
 800137c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001380:	f003 0201 	and.w	r2, r3, #1
 8001384:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001388:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001392:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001396:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001398:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <HAL_SPI_MspInit+0x1c8>)
 800139a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800139e:	4a39      	ldr	r2, [pc, #228]	; (8001484 <HAL_SPI_MspInit+0x1c8>)
 80013a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013a8:	4b36      	ldr	r3, [pc, #216]	; (8001484 <HAL_SPI_MspInit+0x1c8>)
 80013aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ae:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80013b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013c4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <HAL_SPI_MspInit+0x1c8>)
 80013c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013cc:	4a2d      	ldr	r2, [pc, #180]	; (8001484 <HAL_SPI_MspInit+0x1c8>)
 80013ce:	f043 0302 	orr.w	r3, r3, #2
 80013d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013d6:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_SPI_MspInit+0x1c8>)
 80013d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013dc:	f003 0202 	and.w	r2, r3, #2
 80013e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013f2:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PG9     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = NRF_SCK_Pin;
 80013f4:	2320      	movs	r3, #32
 80013f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140c:	2305      	movs	r3, #5
 800140e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_SCK_GPIO_Port, &GPIO_InitStruct);
 8001412:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001416:	4619      	mov	r1, r3
 8001418:	481b      	ldr	r0, [pc, #108]	; (8001488 <HAL_SPI_MspInit+0x1cc>)
 800141a:	f000 fbfb 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MISO_Pin;
 800141e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001422:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001438:	2305      	movs	r3, #5
 800143a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_MISO_GPIO_Port, &GPIO_InitStruct);
 800143e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001442:	4619      	mov	r1, r3
 8001444:	4811      	ldr	r0, [pc, #68]	; (800148c <HAL_SPI_MspInit+0x1d0>)
 8001446:	f000 fbe5 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = NRF_MOSI_Pin;
 800144a:	2320      	movs	r3, #32
 800144c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001462:	2305      	movs	r3, #5
 8001464:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(NRF_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001468:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800146c:	4619      	mov	r1, r3
 800146e:	4808      	ldr	r0, [pc, #32]	; (8001490 <HAL_SPI_MspInit+0x1d4>)
 8001470:	f000 fbd0 	bl	8001c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40013000 	.word	0x40013000
 8001484:	44020c00 	.word	0x44020c00
 8001488:	42020000 	.word	0x42020000
 800148c:	42021800 	.word	0x42021800
 8001490:	42020400 	.word	0x42020400

08001494 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0cc      	sub	sp, #304	; 0x130
 8001498:	af00      	add	r7, sp, #0
 800149a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800149e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014a2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014b8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014bc:	4618      	mov	r0, r3
 80014be:	f44f 7384 	mov.w	r3, #264	; 0x108
 80014c2:	461a      	mov	r2, r3
 80014c4:	2100      	movs	r1, #0
 80014c6:	f008 fd9d 	bl	800a004 <memset>
  if(huart->Instance==USART3)
 80014ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a33      	ldr	r2, [pc, #204]	; (80015a4 <HAL_UART_MspInit+0x110>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d15d      	bne.n	8001598 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014e0:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80014e4:	f04f 0204 	mov.w	r2, #4
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80014f4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014f8:	2200      	movs	r2, #0
 80014fa:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fc:	f107 0310 	add.w	r3, r7, #16
 8001500:	4618      	mov	r0, r3
 8001502:	f001 fca9 	bl	8002e58 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 800150c:	f7ff fb2c 	bl	8000b68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <HAL_UART_MspInit+0x114>)
 8001512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001516:	4a24      	ldr	r2, [pc, #144]	; (80015a8 <HAL_UART_MspInit+0x114>)
 8001518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001520:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_UART_MspInit+0x114>)
 8001522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001526:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 800152a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800152e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001538:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800153c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HAL_UART_MspInit+0x114>)
 8001540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001544:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <HAL_UART_MspInit+0x114>)
 8001546:	f043 0308 	orr.w	r3, r3, #8
 800154a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_UART_MspInit+0x114>)
 8001550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001554:	f003 0208 	and.w	r2, r3, #8
 8001558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800155c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001566:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800156a:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800156c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001570:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001586:	2307      	movs	r3, #7
 8001588:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <HAL_UART_MspInit+0x118>)
 8001594:	f000 fb3e 	bl	8001c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001598:	bf00      	nop
 800159a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40004800 	.word	0x40004800
 80015a8:	44020c00 	.word	0x44020c00
 80015ac:	42020c00 	.word	0x42020c00

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <NMI_Handler+0x4>

080015b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <HardFault_Handler+0x4>

080015bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <MemManage_Handler+0x4>

080015c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c6:	e7fe      	b.n	80015c6 <BusFault_Handler+0x4>

080015c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <UsageFault_Handler+0x4>

080015ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fc:	f000 f9b6 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI Line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NRF_IRQ_Pin);
 8001608:	2008      	movs	r0, #8
 800160a:	f000 fc85 	bl	8001f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}

08001612 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_USER_Pin);
 8001616:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800161a:	f000 fc7d 	bl	8001f18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}

08001622 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e00a      	b.n	800164a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001634:	f3af 8000 	nop.w
 8001638:	4601      	mov	r1, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	60ba      	str	r2, [r7, #8]
 8001640:	b2ca      	uxtb	r2, r1
 8001642:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	429a      	cmp	r2, r3
 8001650:	dbf0      	blt.n	8001634 <_read+0x12>
  }

  return len;
 8001652:	687b      	ldr	r3, [r7, #4]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e009      	b.n	8001682 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	60ba      	str	r2, [r7, #8]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff98 	bl	80005ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	429a      	cmp	r2, r3
 8001688:	dbf1      	blt.n	800166e <_write+0x12>
  }
  return len;
 800168a:	687b      	ldr	r3, [r7, #4]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_close>:

int _close(int file)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800169c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016bc:	605a      	str	r2, [r3, #4]
  return 0;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_isatty>:

int _isatty(int file)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016d4:	2301      	movs	r3, #1
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b085      	sub	sp, #20
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <_sbrk+0x5c>)
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <_sbrk+0x60>)
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <_sbrk+0x64>)
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <_sbrk+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	429a      	cmp	r2, r3
 800172a:	d207      	bcs.n	800173c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800172c:	f008 fcb8 	bl	800a0a0 <__errno>
 8001730:	4603      	mov	r3, r0
 8001732:	220c      	movs	r2, #12
 8001734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800173a:	e009      	b.n	8001750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	4a05      	ldr	r2, [pc, #20]	; (8001760 <_sbrk+0x64>)
 800174c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174e:	68fb      	ldr	r3, [r7, #12]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	200a0000 	.word	0x200a0000
 800175c:	00000400 	.word	0x00000400
 8001760:	200001c0 	.word	0x200001c0
 8001764:	20000318 	.word	0x20000318

08001768 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800176e:	4b35      	ldr	r3, [pc, #212]	; (8001844 <SystemInit+0xdc>)
 8001770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001774:	4a33      	ldr	r2, [pc, #204]	; (8001844 <SystemInit+0xdc>)
 8001776:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800177e:	4b32      	ldr	r3, [pc, #200]	; (8001848 <SystemInit+0xe0>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001784:	4b30      	ldr	r3, [pc, #192]	; (8001848 <SystemInit+0xe0>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800178a:	4b2f      	ldr	r3, [pc, #188]	; (8001848 <SystemInit+0xe0>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001790:	4b2d      	ldr	r3, [pc, #180]	; (8001848 <SystemInit+0xe0>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	492c      	ldr	r1, [pc, #176]	; (8001848 <SystemInit+0xe0>)
 8001796:	4b2d      	ldr	r3, [pc, #180]	; (800184c <SystemInit+0xe4>)
 8001798:	4013      	ands	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <SystemInit+0xe0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 80017a2:	4b29      	ldr	r3, [pc, #164]	; (8001848 <SystemInit+0xe0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80017a8:	4b27      	ldr	r3, [pc, #156]	; (8001848 <SystemInit+0xe0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <SystemInit+0xe0>)
 80017b0:	4a27      	ldr	r2, [pc, #156]	; (8001850 <SystemInit+0xe8>)
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80017b4:	4b24      	ldr	r3, [pc, #144]	; (8001848 <SystemInit+0xe0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <SystemInit+0xe0>)
 80017bc:	4a24      	ldr	r2, [pc, #144]	; (8001850 <SystemInit+0xe8>)
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80017c0:	4b21      	ldr	r3, [pc, #132]	; (8001848 <SystemInit+0xe0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80017c6:	4b20      	ldr	r3, [pc, #128]	; (8001848 <SystemInit+0xe0>)
 80017c8:	4a21      	ldr	r2, [pc, #132]	; (8001850 <SystemInit+0xe8>)
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <SystemInit+0xe0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80017d2:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <SystemInit+0xe0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <SystemInit+0xe0>)
 80017d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80017de:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <SystemInit+0xe0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <SystemInit+0xdc>)
 80017e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ea:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <SystemInit+0xec>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80017f4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80017fc:	d003      	beq.n	8001806 <SystemInit+0x9e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001804:	d117      	bne.n	8001836 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <SystemInit+0xec>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d005      	beq.n	800181e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001812:	4b10      	ldr	r3, [pc, #64]	; (8001854 <SystemInit+0xec>)
 8001814:	4a10      	ldr	r2, [pc, #64]	; (8001858 <SystemInit+0xf0>)
 8001816:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001818:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <SystemInit+0xec>)
 800181a:	4a10      	ldr	r2, [pc, #64]	; (800185c <SystemInit+0xf4>)
 800181c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <SystemInit+0xec>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <SystemInit+0xec>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <SystemInit+0xec>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a09      	ldr	r2, [pc, #36]	; (8001854 <SystemInit+0xec>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	61d3      	str	r3, [r2, #28]
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00
 8001848:	44020c00 	.word	0x44020c00
 800184c:	eae2eae3 	.word	0xeae2eae3
 8001850:	01010280 	.word	0x01010280
 8001854:	40022000 	.word	0x40022000
 8001858:	08192a3b 	.word	0x08192a3b
 800185c:	4c5d6e7f 	.word	0x4c5d6e7f

08001860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001862:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001864:	f7ff ff80 	bl	8001768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <LoopForever+0x6>)
  ldr r1, =_edata
 800186a:	490d      	ldr	r1, [pc, #52]	; (80018a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <LoopForever+0xe>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001880:	4c0a      	ldr	r4, [pc, #40]	; (80018ac <LoopForever+0x16>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800188e:	f008 fc0d 	bl	800a0ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001892:	f7fe ff7f 	bl	8000794 <main>

08001896 <LoopForever>:

LoopForever:
    b LoopForever
 8001896:	e7fe      	b.n	8001896 <LoopForever>
  ldr   r0, =_estack
 8001898:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80018a4:	0800ae44 	.word	0x0800ae44
  ldr r2, =_sbss
 80018a8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80018ac:	20000314 	.word	0x20000314

080018b0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC1_IRQHandler>
	...

080018b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 f96b 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80018be:	f001 f941 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_Init+0x40>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	490a      	ldr	r1, [pc, #40]	; (80018f8 <HAL_Init+0x44>)
 80018ce:	5ccb      	ldrb	r3, [r1, r3]
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
 80018d4:	4a09      	ldr	r2, [pc, #36]	; (80018fc <HAL_Init+0x48>)
 80018d6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d8:	200f      	movs	r0, #15
 80018da:	f000 f811 	bl	8001900 <HAL_InitTick>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e002      	b.n	80018ee <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018e8:	f7ff fce0 	bl	80012ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	44020c00 	.word	0x44020c00
 80018f8:	0800adc0 	.word	0x0800adc0
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_InitTick+0x60>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e021      	b.n	8001958 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_InitTick+0x64>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_InitTick+0x60>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001922:	fbb3 f3f1 	udiv	r3, r3, r1
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f965 	bl	8001bfa <HAL_SYSTICK_Config>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e00e      	b.n	8001958 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b0f      	cmp	r3, #15
 800193e:	d80a      	bhi.n	8001956 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001940:	2200      	movs	r2, #0
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001948:	f000 f92f 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800194c:	4a06      	ldr	r2, [pc, #24]	; (8001968 <HAL_InitTick+0x68>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e000      	b.n	8001958 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2000000c 	.word	0x2000000c
 8001964:	20000004 	.word	0x20000004
 8001968:	20000008 	.word	0x20000008

0800196c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_IncTick+0x20>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_IncTick+0x24>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
 800197c:	4a04      	ldr	r2, [pc, #16]	; (8001990 <HAL_IncTick+0x24>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	2000000c 	.word	0x2000000c
 8001990:	200001c4 	.word	0x200001c4

08001994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return uwTick;
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_GetTick+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200001c4 	.word	0x200001c4

080019ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff ffee 	bl	8001994 <HAL_GetTick>
 80019b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019c4:	d005      	beq.n	80019d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_Delay+0x44>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d2:	bf00      	nop
 80019d4:	f7ff ffde 	bl	8001994 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f7      	bhi.n	80019d4 <HAL_Delay+0x28>
  {
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000000c 	.word	0x2000000c

080019f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a10:	4013      	ands	r3, r2
 8001a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <__NVIC_SetPriorityGrouping+0x44>)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	60d3      	str	r3, [r2, #12]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a40:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <__NVIC_GetPriorityGrouping+0x18>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	f003 0307 	and.w	r3, r3, #7
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	db0b      	blt.n	8001a82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	f003 021f 	and.w	r2, r3, #31
 8001a70:	4907      	ldr	r1, [pc, #28]	; (8001a90 <__NVIC_EnableIRQ+0x38>)
 8001a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a76:	095b      	lsrs	r3, r3, #5
 8001a78:	2001      	movs	r0, #1
 8001a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000e100 	.word	0xe000e100

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	; (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	; (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	; 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b74:	f7ff ff8e 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff29 	bl	80019f4 <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb8:	f7ff ff40 	bl	8001a3c <__NVIC_GetPriorityGrouping>
 8001bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ff90 	bl	8001ae8 <NVIC_EncodePriority>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff5f 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff33 	bl	8001a58 <__NVIC_EnableIRQ>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffa4 	bl	8001b50 <SysTick_Config>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c22:	e136      	b.n	8001e92 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 8128 	beq.w	8001e8c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x38>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b12      	cmp	r3, #18
 8001c4a:	d125      	bne.n	8001c98 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	08da      	lsrs	r2, r3, #3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3208      	adds	r2, #8
 8001c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c58:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	220f      	movs	r2, #15
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f003 020f 	and.w	r2, r3, #15
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	08da      	lsrs	r2, r3, #3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	3208      	adds	r2, #8
 8001c92:	6979      	ldr	r1, [r7, #20]
 8001c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4013      	ands	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0203 	and.w	r2, r3, #3
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d00b      	beq.n	8001cec <HAL_GPIO_Init+0xd8>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d007      	beq.n	8001cec <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ce0:	2b11      	cmp	r3, #17
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b12      	cmp	r3, #18
 8001cea:	d130      	bne.n	8001d4e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4013      	ands	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d22:	2201      	movs	r2, #1
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	f003 0201 	and.w	r2, r3, #1
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d017      	beq.n	8001d86 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d07c      	beq.n	8001e8c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001d92:	4a47      	ldr	r2, [pc, #284]	; (8001eb0 <HAL_GPIO_Init+0x29c>)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	089b      	lsrs	r3, r3, #2
 8001d98:	3318      	adds	r3, #24
 8001d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	220f      	movs	r2, #15
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4013      	ands	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	0a9a      	lsrs	r2, r3, #10
 8001dba:	4b3e      	ldr	r3, [pc, #248]	; (8001eb4 <HAL_GPIO_Init+0x2a0>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	f002 0203 	and.w	r2, r2, #3
 8001dc4:	00d2      	lsls	r2, r2, #3
 8001dc6:	4093      	lsls	r3, r2
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001dce:	4938      	ldr	r1, [pc, #224]	; (8001eb0 <HAL_GPIO_Init+0x29c>)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3318      	adds	r3, #24
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001ddc:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <HAL_GPIO_Init+0x29c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4013      	ands	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001e00:	4a2b      	ldr	r2, [pc, #172]	; (8001eb0 <HAL_GPIO_Init+0x29c>)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001e06:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <HAL_GPIO_Init+0x29c>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	4013      	ands	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001e2a:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <HAL_GPIO_Init+0x29c>)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001e30:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <HAL_GPIO_Init+0x29c>)
 8001e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e36:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001e56:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <HAL_GPIO_Init+0x29c>)
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_GPIO_Init+0x29c>)
 8001e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e64:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <HAL_GPIO_Init+0x29c>)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f47f aec1 	bne.w	8001c24 <HAL_GPIO_Init+0x10>
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	bf00      	nop
 8001ea6:	371c      	adds	r7, #28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	44022000 	.word	0x44022000
 8001eb4:	002f7f7f 	.word	0x002f7f7f

08001eb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	887b      	ldrh	r3, [r7, #2]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e001      	b.n	8001eda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef8:	787b      	ldrb	r3, [r7, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f04:	e002      	b.n	8001f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d006      	beq.n	8001f3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001f2e:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fb4a 	bl	80005d0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001f48:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fb55 	bl	8000600 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	44022000 	.word	0x44022000

08001f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	f000 bc28 	b.w	80027c8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f78:	4b94      	ldr	r3, [pc, #592]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	f003 0318 	and.w	r3, r3, #24
 8001f80:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001f82:	4b92      	ldr	r3, [pc, #584]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0310 	and.w	r3, r3, #16
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d05b      	beq.n	8002050 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d005      	beq.n	8001faa <HAL_RCC_OscConfig+0x46>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	2b18      	cmp	r3, #24
 8001fa2:	d114      	bne.n	8001fce <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d111      	bne.n	8001fce <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	f000 bc08 	b.w	80027c8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001fb8:	4b84      	ldr	r3, [pc, #528]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	041b      	lsls	r3, r3, #16
 8001fc6:	4981      	ldr	r1, [pc, #516]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001fcc:	e040      	b.n	8002050 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d023      	beq.n	800201e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001fd6:	4b7d      	ldr	r3, [pc, #500]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a7c      	ldr	r2, [pc, #496]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe2:	f7ff fcd7 	bl	8001994 <HAL_GetTick>
 8001fe6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001fea:	f7ff fcd3 	bl	8001994 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e3e5      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001ffc:	4b73      	ldr	r3, [pc, #460]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0f0      	beq.n	8001fea <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002008:	4b70      	ldr	r3, [pc, #448]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	041b      	lsls	r3, r3, #16
 8002016:	496d      	ldr	r1, [pc, #436]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8002018:	4313      	orrs	r3, r2
 800201a:	618b      	str	r3, [r1, #24]
 800201c:	e018      	b.n	8002050 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800201e:	4b6b      	ldr	r3, [pc, #428]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a6a      	ldr	r2, [pc, #424]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8002024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202a:	f7ff fcb3 	bl	8001994 <HAL_GetTick>
 800202e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002032:	f7ff fcaf 	bl	8001994 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e3c1      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002044:	4b61      	ldr	r3, [pc, #388]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f0      	bne.n	8002032 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80a0 	beq.w	800219e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	2b10      	cmp	r3, #16
 8002062:	d005      	beq.n	8002070 <HAL_RCC_OscConfig+0x10c>
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	2b18      	cmp	r3, #24
 8002068:	d109      	bne.n	800207e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	f040 8092 	bne.w	800219e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e3a4      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x132>
 8002088:	4b50      	ldr	r3, [pc, #320]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a4f      	ldr	r2, [pc, #316]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 800208e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	e058      	b.n	8002148 <HAL_RCC_OscConfig+0x1e4>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d112      	bne.n	80020c4 <HAL_RCC_OscConfig+0x160>
 800209e:	4b4b      	ldr	r3, [pc, #300]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a4a      	ldr	r2, [pc, #296]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 80020a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	4b48      	ldr	r3, [pc, #288]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a47      	ldr	r2, [pc, #284]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 80020b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b45      	ldr	r3, [pc, #276]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a44      	ldr	r2, [pc, #272]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 80020bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e041      	b.n	8002148 <HAL_RCC_OscConfig+0x1e4>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020cc:	d112      	bne.n	80020f4 <HAL_RCC_OscConfig+0x190>
 80020ce:	4b3f      	ldr	r3, [pc, #252]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a3e      	ldr	r2, [pc, #248]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 80020d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	4b3c      	ldr	r3, [pc, #240]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a3b      	ldr	r2, [pc, #236]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 80020e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b39      	ldr	r3, [pc, #228]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a38      	ldr	r2, [pc, #224]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e029      	b.n	8002148 <HAL_RCC_OscConfig+0x1e4>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80020fc:	d112      	bne.n	8002124 <HAL_RCC_OscConfig+0x1c0>
 80020fe:	4b33      	ldr	r3, [pc, #204]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a32      	ldr	r2, [pc, #200]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b30      	ldr	r3, [pc, #192]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2f      	ldr	r2, [pc, #188]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8002110:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2c      	ldr	r2, [pc, #176]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 800211c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e011      	b.n	8002148 <HAL_RCC_OscConfig+0x1e4>
 8002124:	4b29      	ldr	r3, [pc, #164]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a28      	ldr	r2, [pc, #160]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 800212a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b26      	ldr	r3, [pc, #152]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a25      	ldr	r2, [pc, #148]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8002136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b23      	ldr	r3, [pc, #140]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a22      	ldr	r2, [pc, #136]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8002142:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d013      	beq.n	8002178 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff fc20 	bl	8001994 <HAL_GetTick>
 8002154:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002158:	f7ff fc1c 	bl	8001994 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b64      	cmp	r3, #100	; 0x64
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e32e      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800216a:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x1f4>
 8002176:	e012      	b.n	800219e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002178:	f7ff fc0c 	bl	8001994 <HAL_GetTick>
 800217c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002180:	f7ff fc08 	bl	8001994 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b64      	cmp	r3, #100	; 0x64
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e31a      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <HAL_RCC_OscConfig+0x268>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f0      	bne.n	8002180 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 809a 	beq.w	80022e0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <HAL_RCC_OscConfig+0x25a>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	2b18      	cmp	r3, #24
 80021b6:	d149      	bne.n	800224c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d146      	bne.n	800224c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d104      	bne.n	80021d0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e2fe      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
 80021ca:	bf00      	nop
 80021cc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d11c      	bne.n	8002210 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80021d6:	4b9a      	ldr	r3, [pc, #616]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0218 	and.w	r2, r3, #24
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d014      	beq.n	8002210 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80021e6:	4b96      	ldr	r3, [pc, #600]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 0218 	bic.w	r2, r3, #24
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	4993      	ldr	r1, [pc, #588]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80021f8:	f000 fdd0 	bl	8002d9c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021fc:	4b91      	ldr	r3, [pc, #580]	; (8002444 <HAL_RCC_OscConfig+0x4e0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fb7d 	bl	8001900 <HAL_InitTick>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e2db      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002210:	f7ff fbc0 	bl	8001994 <HAL_GetTick>
 8002214:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002218:	f7ff fbbc 	bl	8001994 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e2ce      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222a:	4b85      	ldr	r3, [pc, #532]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002236:	4b82      	ldr	r3, [pc, #520]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	041b      	lsls	r3, r3, #16
 8002244:	497e      	ldr	r1, [pc, #504]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800224a:	e049      	b.n	80022e0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d02c      	beq.n	80022ae <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002254:	4b7a      	ldr	r3, [pc, #488]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 0218 	bic.w	r2, r3, #24
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	4977      	ldr	r1, [pc, #476]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002266:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a75      	ldr	r2, [pc, #468]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7ff fb8f 	bl	8001994 <HAL_GetTick>
 8002276:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800227a:	f7ff fb8b 	bl	8001994 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e29d      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800228c:	4b6c      	ldr	r3, [pc, #432]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002298:	4b69      	ldr	r3, [pc, #420]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	4966      	ldr	r1, [pc, #408]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	610b      	str	r3, [r1, #16]
 80022ac:	e018      	b.n	80022e0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ae:	4b64      	ldr	r3, [pc, #400]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a63      	ldr	r2, [pc, #396]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7ff fb6b 	bl	8001994 <HAL_GetTick>
 80022be:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80022c2:	f7ff fb67 	bl	8001994 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e279      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022d4:	4b5a      	ldr	r3, [pc, #360]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d03c      	beq.n	8002366 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d01c      	beq.n	800232e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f4:	4b52      	ldr	r3, [pc, #328]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80022f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022fa:	4a51      	ldr	r2, [pc, #324]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80022fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002300:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002304:	f7ff fb46 	bl	8001994 <HAL_GetTick>
 8002308:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800230c:	f7ff fb42 	bl	8001994 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e254      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800231e:	4b48      	ldr	r3, [pc, #288]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 8002320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ef      	beq.n	800230c <HAL_RCC_OscConfig+0x3a8>
 800232c:	e01b      	b.n	8002366 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232e:	4b44      	ldr	r3, [pc, #272]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 8002330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002334:	4a42      	ldr	r2, [pc, #264]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 8002336:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800233a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233e:	f7ff fb29 	bl	8001994 <HAL_GetTick>
 8002342:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002346:	f7ff fb25 	bl	8001994 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e237      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002358:	4b39      	ldr	r3, [pc, #228]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 800235a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800235e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1ef      	bne.n	8002346 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80d2 	beq.w	8002518 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002374:	4b34      	ldr	r3, [pc, #208]	; (8002448 <HAL_RCC_OscConfig+0x4e4>)
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d118      	bne.n	80023b2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002380:	4b31      	ldr	r3, [pc, #196]	; (8002448 <HAL_RCC_OscConfig+0x4e4>)
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	4a30      	ldr	r2, [pc, #192]	; (8002448 <HAL_RCC_OscConfig+0x4e4>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800238c:	f7ff fb02 	bl	8001994 <HAL_GetTick>
 8002390:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002394:	f7ff fafe 	bl	8001994 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e210      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80023a6:	4b28      	ldr	r3, [pc, #160]	; (8002448 <HAL_RCC_OscConfig+0x4e4>)
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d108      	bne.n	80023cc <HAL_RCC_OscConfig+0x468>
 80023ba:	4b21      	ldr	r3, [pc, #132]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80023bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023c0:	4a1f      	ldr	r2, [pc, #124]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023ca:	e074      	b.n	80024b6 <HAL_RCC_OscConfig+0x552>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d118      	bne.n	8002406 <HAL_RCC_OscConfig+0x4a2>
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80023d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023da:	4a19      	ldr	r2, [pc, #100]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023e4:	4b16      	ldr	r3, [pc, #88]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80023e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023ea:	4a15      	ldr	r2, [pc, #84]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80023ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023f4:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80023f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023fa:	4a11      	ldr	r2, [pc, #68]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 80023fc:	f023 0304 	bic.w	r3, r3, #4
 8002400:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002404:	e057      	b.n	80024b6 <HAL_RCC_OscConfig+0x552>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b05      	cmp	r3, #5
 800240c:	d11e      	bne.n	800244c <HAL_RCC_OscConfig+0x4e8>
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 8002410:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002414:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 8002416:	f043 0304 	orr.w	r3, r3, #4
 800241a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 8002420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 8002426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800242a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 8002430:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002434:	4a02      	ldr	r2, [pc, #8]	; (8002440 <HAL_RCC_OscConfig+0x4dc>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800243e:	e03a      	b.n	80024b6 <HAL_RCC_OscConfig+0x552>
 8002440:	44020c00 	.word	0x44020c00
 8002444:	20000008 	.word	0x20000008
 8002448:	44020800 	.word	0x44020800
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b85      	cmp	r3, #133	; 0x85
 8002452:	d118      	bne.n	8002486 <HAL_RCC_OscConfig+0x522>
 8002454:	4ba2      	ldr	r3, [pc, #648]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002456:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800245a:	4aa1      	ldr	r2, [pc, #644]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 800245c:	f043 0304 	orr.w	r3, r3, #4
 8002460:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002464:	4b9e      	ldr	r3, [pc, #632]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800246a:	4a9d      	ldr	r2, [pc, #628]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 800246c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002470:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002474:	4b9a      	ldr	r3, [pc, #616]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800247a:	4a99      	ldr	r2, [pc, #612]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002484:	e017      	b.n	80024b6 <HAL_RCC_OscConfig+0x552>
 8002486:	4b96      	ldr	r3, [pc, #600]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800248c:	4a94      	ldr	r2, [pc, #592]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002496:	4b92      	ldr	r3, [pc, #584]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800249c:	4a90      	ldr	r2, [pc, #576]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 800249e:	f023 0304 	bic.w	r3, r3, #4
 80024a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024a6:	4b8e      	ldr	r3, [pc, #568]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 80024a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024ac:	4a8c      	ldr	r2, [pc, #560]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 80024ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d016      	beq.n	80024ec <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7ff fa69 	bl	8001994 <HAL_GetTick>
 80024c2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7ff fa65 	bl	8001994 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e175      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024dc:	4b80      	ldr	r3, [pc, #512]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 80024de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0ed      	beq.n	80024c6 <HAL_RCC_OscConfig+0x562>
 80024ea:	e015      	b.n	8002518 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7ff fa52 	bl	8001994 <HAL_GetTick>
 80024f0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024f2:	e00a      	b.n	800250a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f4:	f7ff fa4e 	bl	8001994 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e15e      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800250a:	4b75      	ldr	r3, [pc, #468]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 800250c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ed      	bne.n	80024f4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d036      	beq.n	8002592 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	2b00      	cmp	r3, #0
 800252a:	d019      	beq.n	8002560 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800252c:	4b6c      	ldr	r3, [pc, #432]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a6b      	ldr	r2, [pc, #428]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002532:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002536:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7ff fa2c 	bl	8001994 <HAL_GetTick>
 800253c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002540:	f7ff fa28 	bl	8001994 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e13a      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002552:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x5dc>
 800255e:	e018      	b.n	8002592 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002560:	4b5f      	ldr	r3, [pc, #380]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a5e      	ldr	r2, [pc, #376]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002566:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800256a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256c:	f7ff fa12 	bl	8001994 <HAL_GetTick>
 8002570:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002574:	f7ff fa0e 	bl	8001994 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e120      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002586:	4b56      	ldr	r3, [pc, #344]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8115 	beq.w	80027c6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b18      	cmp	r3, #24
 80025a0:	f000 80af 	beq.w	8002702 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	f040 8086 	bne.w	80026ba <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80025ae:	4b4c      	ldr	r3, [pc, #304]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a4b      	ldr	r2, [pc, #300]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 80025b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7ff f9eb 	bl	8001994 <HAL_GetTick>
 80025be:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80025c2:	f7ff f9e7 	bl	8001994 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e0f9      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80025d4:	4b42      	ldr	r3, [pc, #264]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80025e0:	4b3f      	ldr	r3, [pc, #252]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80025e8:	f023 0303 	bic.w	r3, r3, #3
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025f4:	0212      	lsls	r2, r2, #8
 80025f6:	430a      	orrs	r2, r1
 80025f8:	4939      	ldr	r1, [pc, #228]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	628b      	str	r3, [r1, #40]	; 0x28
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002602:	3b01      	subs	r3, #1
 8002604:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260c:	3b01      	subs	r3, #1
 800260e:	025b      	lsls	r3, r3, #9
 8002610:	b29b      	uxth	r3, r3
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	3b01      	subs	r3, #1
 800261a:	041b      	lsls	r3, r3, #16
 800261c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	3b01      	subs	r3, #1
 8002628:	061b      	lsls	r3, r3, #24
 800262a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800262e:	492c      	ldr	r1, [pc, #176]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002630:	4313      	orrs	r3, r2
 8002632:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002634:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	4a29      	ldr	r2, [pc, #164]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 800263a:	f023 0310 	bic.w	r3, r3, #16
 800263e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002644:	4a26      	ldr	r2, [pc, #152]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800264a:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4a24      	ldr	r2, [pc, #144]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002650:	f043 0310 	orr.w	r3, r3, #16
 8002654:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002656:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265a:	f023 020c 	bic.w	r2, r3, #12
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	491f      	ldr	r1, [pc, #124]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002664:	4313      	orrs	r3, r2
 8002666:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002668:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 800266a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800266c:	f023 0220 	bic.w	r2, r3, #32
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002674:	491a      	ldr	r1, [pc, #104]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002676:	4313      	orrs	r3, r2
 8002678:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	4a18      	ldr	r2, [pc, #96]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 800268c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002692:	f7ff f97f 	bl	8001994 <HAL_GetTick>
 8002696:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002698:	e008      	b.n	80026ac <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800269a:	f7ff f97b 	bl	8001994 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e08d      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80026ac:	4b0c      	ldr	r3, [pc, #48]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0f0      	beq.n	800269a <HAL_RCC_OscConfig+0x736>
 80026b8:	e085      	b.n	80027c6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80026ba:	4b09      	ldr	r3, [pc, #36]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a08      	ldr	r2, [pc, #32]	; (80026e0 <HAL_RCC_OscConfig+0x77c>)
 80026c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c6:	f7ff f965 	bl	8001994 <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80026ce:	f7ff f961 	bl	8001994 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d903      	bls.n	80026e4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e073      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
 80026e0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80026e4:	4b3a      	ldr	r3, [pc, #232]	; (80027d0 <HAL_RCC_OscConfig+0x86c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ee      	bne.n	80026ce <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80026f0:	4b37      	ldr	r3, [pc, #220]	; (80027d0 <HAL_RCC_OscConfig+0x86c>)
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	4a36      	ldr	r2, [pc, #216]	; (80027d0 <HAL_RCC_OscConfig+0x86c>)
 80026f6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	6293      	str	r3, [r2, #40]	; 0x28
 8002700:	e061      	b.n	80027c6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002702:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <HAL_RCC_OscConfig+0x86c>)
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002708:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_RCC_OscConfig+0x86c>)
 800270a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	2b01      	cmp	r3, #1
 8002714:	d031      	beq.n	800277a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f003 0203 	and.w	r2, r3, #3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002720:	429a      	cmp	r2, r3
 8002722:	d12a      	bne.n	800277a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d122      	bne.n	800277a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d11a      	bne.n	800277a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	0a5b      	lsrs	r3, r3, #9
 8002748:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002752:	429a      	cmp	r2, r3
 8002754:	d111      	bne.n	800277a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	0c1b      	lsrs	r3, r3, #16
 800275a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d108      	bne.n	800277a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	0e1b      	lsrs	r3, r3, #24
 800276c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e024      	b.n	80027c8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_RCC_OscConfig+0x86c>)
 8002780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002782:	08db      	lsrs	r3, r3, #3
 8002784:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800278c:	429a      	cmp	r2, r3
 800278e:	d01a      	beq.n	80027c6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <HAL_RCC_OscConfig+0x86c>)
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <HAL_RCC_OscConfig+0x86c>)
 8002796:	f023 0310 	bic.w	r3, r3, #16
 800279a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7ff f8fa 	bl	8001994 <HAL_GetTick>
 80027a0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80027a2:	bf00      	nop
 80027a4:	f7ff f8f6 	bl	8001994 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d0f9      	beq.n	80027a4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b4:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <HAL_RCC_OscConfig+0x86c>)
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCC_OscConfig+0x86c>)
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_RCC_OscConfig+0x86c>)
 80027c0:	f043 0310 	orr.w	r3, r3, #16
 80027c4:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3720      	adds	r7, #32
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	44020c00 	.word	0x44020c00

080027d4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e19e      	b.n	8002b26 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b83      	ldr	r3, [pc, #524]	; (80029f8 <HAL_RCC_ClockConfig+0x224>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d910      	bls.n	8002818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b80      	ldr	r3, [pc, #512]	; (80029f8 <HAL_RCC_ClockConfig+0x224>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 020f 	bic.w	r2, r3, #15
 80027fe:	497e      	ldr	r1, [pc, #504]	; (80029f8 <HAL_RCC_ClockConfig+0x224>)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b7c      	ldr	r3, [pc, #496]	; (80029f8 <HAL_RCC_ClockConfig+0x224>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e186      	b.n	8002b26 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	d012      	beq.n	800284a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	4b74      	ldr	r3, [pc, #464]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002832:	429a      	cmp	r2, r3
 8002834:	d909      	bls.n	800284a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002836:	4b71      	ldr	r3, [pc, #452]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	496d      	ldr	r1, [pc, #436]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 8002846:	4313      	orrs	r3, r2
 8002848:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d012      	beq.n	800287c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	4b68      	ldr	r3, [pc, #416]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	091b      	lsrs	r3, r3, #4
 8002860:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002864:	429a      	cmp	r2, r3
 8002866:	d909      	bls.n	800287c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002868:	4b64      	ldr	r3, [pc, #400]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	4961      	ldr	r1, [pc, #388]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 8002878:	4313      	orrs	r3, r2
 800287a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d010      	beq.n	80028aa <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	4b5b      	ldr	r3, [pc, #364]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002894:	429a      	cmp	r2, r3
 8002896:	d908      	bls.n	80028aa <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002898:	4b58      	ldr	r3, [pc, #352]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4955      	ldr	r1, [pc, #340]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d010      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	4b50      	ldr	r3, [pc, #320]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d908      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80028c6:	4b4d      	ldr	r3, [pc, #308]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f023 020f 	bic.w	r2, r3, #15
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	494a      	ldr	r1, [pc, #296]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8093 	beq.w	8002a0c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80028ee:	4b43      	ldr	r3, [pc, #268]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d121      	bne.n	800293e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e113      	b.n	8002b26 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002906:	4b3d      	ldr	r3, [pc, #244]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d115      	bne.n	800293e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e107      	b.n	8002b26 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800291e:	4b37      	ldr	r3, [pc, #220]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0fb      	b.n	8002b26 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800292e:	4b33      	ldr	r3, [pc, #204]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0f3      	b.n	8002b26 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800293e:	4b2f      	ldr	r3, [pc, #188]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	492c      	ldr	r1, [pc, #176]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 800294c:	4313      	orrs	r3, r2
 800294e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002950:	f7ff f820 	bl	8001994 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b03      	cmp	r3, #3
 800295c:	d112      	bne.n	8002984 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800295e:	e00a      	b.n	8002976 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002960:	f7ff f818 	bl	8001994 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e0d7      	b.n	8002b26 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002976:	4b21      	ldr	r3, [pc, #132]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 0318 	and.w	r3, r3, #24
 800297e:	2b18      	cmp	r3, #24
 8002980:	d1ee      	bne.n	8002960 <HAL_RCC_ClockConfig+0x18c>
 8002982:	e043      	b.n	8002a0c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d112      	bne.n	80029b2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800298c:	e00a      	b.n	80029a4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800298e:	f7ff f801 	bl	8001994 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f241 3288 	movw	r2, #5000	; 0x1388
 800299c:	4293      	cmp	r3, r2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e0c0      	b.n	8002b26 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029a4:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f003 0318 	and.w	r3, r3, #24
 80029ac:	2b10      	cmp	r3, #16
 80029ae:	d1ee      	bne.n	800298e <HAL_RCC_ClockConfig+0x1ba>
 80029b0:	e02c      	b.n	8002a0c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d122      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe ffea 	bl	8001994 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e0a9      	b.n	8002b26 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <HAL_RCC_ClockConfig+0x228>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 0318 	and.w	r3, r3, #24
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d1ee      	bne.n	80029bc <HAL_RCC_ClockConfig+0x1e8>
 80029de:	e015      	b.n	8002a0c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80029e0:	f7fe ffd8 	bl	8001994 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d906      	bls.n	8002a00 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e097      	b.n	8002b26 <HAL_RCC_ClockConfig+0x352>
 80029f6:	bf00      	nop
 80029f8:	40022000 	.word	0x40022000
 80029fc:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a00:	4b4b      	ldr	r3, [pc, #300]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f003 0318 	and.w	r3, r3, #24
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e9      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d010      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	4b44      	ldr	r3, [pc, #272]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d208      	bcs.n	8002a3a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002a28:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	f023 020f 	bic.w	r2, r3, #15
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	493e      	ldr	r1, [pc, #248]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a3a:	4b3e      	ldr	r3, [pc, #248]	; (8002b34 <HAL_RCC_ClockConfig+0x360>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d210      	bcs.n	8002a6a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a48:	4b3a      	ldr	r3, [pc, #232]	; (8002b34 <HAL_RCC_ClockConfig+0x360>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f023 020f 	bic.w	r2, r3, #15
 8002a50:	4938      	ldr	r1, [pc, #224]	; (8002b34 <HAL_RCC_ClockConfig+0x360>)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a58:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_RCC_ClockConfig+0x360>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d001      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e05d      	b.n	8002b26 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d010      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d208      	bcs.n	8002a98 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002a86:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	4927      	ldr	r1, [pc, #156]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d012      	beq.n	8002aca <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d209      	bcs.n	8002aca <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691b      	ldr	r3, [r3, #16]
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	491a      	ldr	r1, [pc, #104]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d012      	beq.n	8002afc <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695a      	ldr	r2, [r3, #20]
 8002ada:	4b15      	ldr	r3, [pc, #84]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	0a1b      	lsrs	r3, r3, #8
 8002ae0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d209      	bcs.n	8002afc <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	490e      	ldr	r1, [pc, #56]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002afc:	f000 f822 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_ClockConfig+0x35c>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	490b      	ldr	r1, [pc, #44]	; (8002b38 <HAL_RCC_ClockConfig+0x364>)
 8002b0c:	5ccb      	ldrb	r3, [r1, r3]
 8002b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b12:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <HAL_RCC_ClockConfig+0x368>)
 8002b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_RCC_ClockConfig+0x36c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fe fef0 	bl	8001900 <HAL_InitTick>
 8002b20:	4603      	mov	r3, r0
 8002b22:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002b24:	7afb      	ldrb	r3, [r7, #11]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	44020c00 	.word	0x44020c00
 8002b34:	40022000 	.word	0x40022000
 8002b38:	0800adc0 	.word	0x0800adc0
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	20000008 	.word	0x20000008

08002b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b089      	sub	sp, #36	; 0x24
 8002b48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002b4a:	4b8c      	ldr	r3, [pc, #560]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f003 0318 	and.w	r3, r3, #24
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d102      	bne.n	8002b5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002b56:	4b8a      	ldr	r3, [pc, #552]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	e107      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5c:	4b87      	ldr	r3, [pc, #540]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	f003 0318 	and.w	r3, r3, #24
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d112      	bne.n	8002b8e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002b68:	4b84      	ldr	r3, [pc, #528]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002b74:	4b81      	ldr	r3, [pc, #516]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	08db      	lsrs	r3, r3, #3
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	4a81      	ldr	r2, [pc, #516]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x240>)
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	e0f1      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002b88:	4b7e      	ldr	r3, [pc, #504]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x240>)
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	e0ee      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b8e:	4b7b      	ldr	r3, [pc, #492]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f003 0318 	and.w	r3, r3, #24
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d102      	bne.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b9a:	4b7b      	ldr	r3, [pc, #492]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x244>)
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	e0e5      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ba0:	4b76      	ldr	r3, [pc, #472]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	f003 0318 	and.w	r3, r3, #24
 8002ba8:	2b18      	cmp	r3, #24
 8002baa:	f040 80dd 	bne.w	8002d68 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002bae:	4b73      	ldr	r3, [pc, #460]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002bb8:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	0a1b      	lsrs	r3, r3, #8
 8002bbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002bc4:	4b6d      	ldr	r3, [pc, #436]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002bd4:	08db      	lsrs	r3, r3, #3
 8002bd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 80b7 	beq.w	8002d62 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0xbe>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d056      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0x16a>
 8002c00:	e077      	b.n	8002cf2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002c02:	4b5e      	ldr	r3, [pc, #376]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d02d      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002c0e:	4b5b      	ldr	r3, [pc, #364]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	08db      	lsrs	r3, r3, #3
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	4a5a      	ldr	r2, [pc, #360]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x240>)
 8002c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c1e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	ee07 3a90 	vmov	s15, r3
 8002c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c40:	ee07 3a90 	vmov	s15, r3
 8002c44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c48:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c4c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x248>
 8002c50:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c64:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002c68:	e065      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	ee07 3a90 	vmov	s15, r3
 8002c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c74:	eddf 6a46 	vldr	s13, [pc, #280]	; 8002d90 <HAL_RCC_GetSysClockFreq+0x24c>
 8002c78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c7c:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c84:	ee07 3a90 	vmov	s15, r3
 8002c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c8c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c90:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x248>
 8002c94:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002c98:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002cac:	e043      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	ee07 3a90 	vmov	s15, r3
 8002cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb8:	eddf 6a36 	vldr	s13, [pc, #216]	; 8002d94 <HAL_RCC_GetSysClockFreq+0x250>
 8002cbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cc0:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc8:	ee07 3a90 	vmov	s15, r3
 8002ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cd0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cd4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x248>
 8002cd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ce0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ce4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cec:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002cf0:	e021      	b.n	8002d36 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	ee07 3a90 	vmov	s15, r3
 8002cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cfc:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002d98 <HAL_RCC_GetSysClockFreq+0x254>
 8002d00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d04:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0c:	ee07 3a90 	vmov	s15, r3
 8002d10:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d14:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d18:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002d8c <HAL_RCC_GetSysClockFreq+0x248>
 8002d1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d20:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d28:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d30:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002d34:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x238>)
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	0a5b      	lsrs	r3, r3, #9
 8002d3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d40:	3301      	adds	r3, #1
 8002d42:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d4e:	edd7 6a06 	vldr	s13, [r7, #24]
 8002d52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d5a:	ee17 3a90 	vmov	r3, s15
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	e004      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	e001      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x240>)
 8002d6a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3724      	adds	r7, #36	; 0x24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	44020c00 	.word	0x44020c00
 8002d80:	003d0900 	.word	0x003d0900
 8002d84:	03d09000 	.word	0x03d09000
 8002d88:	017d7840 	.word	0x017d7840
 8002d8c:	46000000 	.word	0x46000000
 8002d90:	4c742400 	.word	0x4c742400
 8002d94:	4bbebc20 	.word	0x4bbebc20
 8002d98:	4a742400 	.word	0x4a742400

08002d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002da0:	f7ff fed0 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002daa:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002dae:	4907      	ldr	r1, [pc, #28]	; (8002dcc <HAL_RCC_GetHCLKFreq+0x30>)
 8002db0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8002db2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8002db6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dba:	4a05      	ldr	r2, [pc, #20]	; (8002dd0 <HAL_RCC_GetHCLKFreq+0x34>)
 8002dbc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8002dbe:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <HAL_RCC_GetHCLKFreq+0x34>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	44020c00 	.word	0x44020c00
 8002dcc:	0800adc0 	.word	0x0800adc0
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8002dd8:	f7ff ffe0 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	4904      	ldr	r1, [pc, #16]	; (8002dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002dea:	5ccb      	ldrb	r3, [r1, r3]
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	44020c00 	.word	0x44020c00
 8002dfc:	0800add0 	.word	0x0800add0

08002e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8002e04:	f7ff ffca 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	0a1b      	lsrs	r3, r3, #8
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4904      	ldr	r1, [pc, #16]	; (8002e28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e16:	5ccb      	ldrb	r3, [r1, r3]
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	44020c00 	.word	0x44020c00
 8002e28:	0800add0 	.word	0x0800add0

08002e2c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8002e30:	f7ff ffb4 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	0b1b      	lsrs	r3, r3, #12
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4904      	ldr	r1, [pc, #16]	; (8002e54 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	44020c00 	.word	0x44020c00
 8002e54:	0800add0 	.word	0x0800add0

08002e58 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e5c:	b0d8      	sub	sp, #352	; 0x160
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e64:	2300      	movs	r3, #0
 8002e66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002e70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e78:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002e7c:	2500      	movs	r5, #0
 8002e7e:	ea54 0305 	orrs.w	r3, r4, r5
 8002e82:	d00b      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002e84:	4bcd      	ldr	r3, [pc, #820]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e8a:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8002e8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e94:	4ac9      	ldr	r2, [pc, #804]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002e96:	430b      	orrs	r3, r1
 8002e98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f002 0801 	and.w	r8, r2, #1
 8002ea8:	f04f 0900 	mov.w	r9, #0
 8002eac:	ea58 0309 	orrs.w	r3, r8, r9
 8002eb0:	d042      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002eb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	d823      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002ebc:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec2:	bf00      	nop
 8002ec4:	08002f0d 	.word	0x08002f0d
 8002ec8:	08002edd 	.word	0x08002edd
 8002ecc:	08002ef1 	.word	0x08002ef1
 8002ed0:	08002f0d 	.word	0x08002f0d
 8002ed4:	08002f0d 	.word	0x08002f0d
 8002ed8:	08002f0d 	.word	0x08002f0d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002edc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ee0:	3308      	adds	r3, #8
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f004 feda 	bl	8007c9c <RCCEx_PLL2_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002eee:	e00e      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ef0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ef4:	3330      	adds	r3, #48	; 0x30
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f004 ff68 	bl	8007dcc <RCCEx_PLL3_Config>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002f02:	e004      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002f0a:	e000      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002f16:	4ba9      	ldr	r3, [pc, #676]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f1c:	f023 0107 	bic.w	r1, r3, #7
 8002f20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f26:	4aa5      	ldr	r2, [pc, #660]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f2e:	e003      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f30:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f34:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f002 0a02 	and.w	sl, r2, #2
 8002f44:	f04f 0b00 	mov.w	fp, #0
 8002f48:	ea5a 030b 	orrs.w	r3, sl, fp
 8002f4c:	f000 8088 	beq.w	8003060 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002f50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f56:	2b28      	cmp	r3, #40	; 0x28
 8002f58:	d868      	bhi.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002f5a:	a201      	add	r2, pc, #4	; (adr r2, 8002f60 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f60:	08003035 	.word	0x08003035
 8002f64:	0800302d 	.word	0x0800302d
 8002f68:	0800302d 	.word	0x0800302d
 8002f6c:	0800302d 	.word	0x0800302d
 8002f70:	0800302d 	.word	0x0800302d
 8002f74:	0800302d 	.word	0x0800302d
 8002f78:	0800302d 	.word	0x0800302d
 8002f7c:	0800302d 	.word	0x0800302d
 8002f80:	08003005 	.word	0x08003005
 8002f84:	0800302d 	.word	0x0800302d
 8002f88:	0800302d 	.word	0x0800302d
 8002f8c:	0800302d 	.word	0x0800302d
 8002f90:	0800302d 	.word	0x0800302d
 8002f94:	0800302d 	.word	0x0800302d
 8002f98:	0800302d 	.word	0x0800302d
 8002f9c:	0800302d 	.word	0x0800302d
 8002fa0:	08003019 	.word	0x08003019
 8002fa4:	0800302d 	.word	0x0800302d
 8002fa8:	0800302d 	.word	0x0800302d
 8002fac:	0800302d 	.word	0x0800302d
 8002fb0:	0800302d 	.word	0x0800302d
 8002fb4:	0800302d 	.word	0x0800302d
 8002fb8:	0800302d 	.word	0x0800302d
 8002fbc:	0800302d 	.word	0x0800302d
 8002fc0:	08003035 	.word	0x08003035
 8002fc4:	0800302d 	.word	0x0800302d
 8002fc8:	0800302d 	.word	0x0800302d
 8002fcc:	0800302d 	.word	0x0800302d
 8002fd0:	0800302d 	.word	0x0800302d
 8002fd4:	0800302d 	.word	0x0800302d
 8002fd8:	0800302d 	.word	0x0800302d
 8002fdc:	0800302d 	.word	0x0800302d
 8002fe0:	08003035 	.word	0x08003035
 8002fe4:	0800302d 	.word	0x0800302d
 8002fe8:	0800302d 	.word	0x0800302d
 8002fec:	0800302d 	.word	0x0800302d
 8002ff0:	0800302d 	.word	0x0800302d
 8002ff4:	0800302d 	.word	0x0800302d
 8002ff8:	0800302d 	.word	0x0800302d
 8002ffc:	0800302d 	.word	0x0800302d
 8003000:	08003035 	.word	0x08003035
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003004:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003008:	3308      	adds	r3, #8
 800300a:	4618      	mov	r0, r3
 800300c:	f004 fe46 	bl	8007c9c <RCCEx_PLL2_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003016:	e00e      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003018:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800301c:	3330      	adds	r3, #48	; 0x30
 800301e:	4618      	mov	r0, r3
 8003020:	f004 fed4 	bl	8007dcc <RCCEx_PLL3_Config>
 8003024:	4603      	mov	r3, r0
 8003026:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800302a:	e004      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003032:	e000      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003034:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003036:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10c      	bne.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800303e:	4b5f      	ldr	r3, [pc, #380]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003040:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003044:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003048:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800304c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304e:	4a5b      	ldr	r2, [pc, #364]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003050:	430b      	orrs	r3, r1
 8003052:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003056:	e003      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003058:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800305c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003060:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f002 0304 	and.w	r3, r2, #4
 800306c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003076:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800307a:	460b      	mov	r3, r1
 800307c:	4313      	orrs	r3, r2
 800307e:	d04e      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003080:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003086:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800308a:	d02c      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800308c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003090:	d825      	bhi.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003096:	d028      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800309c:	d81f      	bhi.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x286>
 800309e:	2bc0      	cmp	r3, #192	; 0xc0
 80030a0:	d025      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x296>
 80030a2:	2bc0      	cmp	r3, #192	; 0xc0
 80030a4:	d81b      	bhi.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x286>
 80030a6:	2b80      	cmp	r3, #128	; 0x80
 80030a8:	d00f      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x272>
 80030aa:	2b80      	cmp	r3, #128	; 0x80
 80030ac:	d817      	bhi.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x286>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d01f      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80030b2:	2b40      	cmp	r3, #64	; 0x40
 80030b4:	d113      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030ba:	3308      	adds	r3, #8
 80030bc:	4618      	mov	r0, r3
 80030be:	f004 fded 	bl	8007c9c <RCCEx_PLL2_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80030c8:	e014      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030ce:	3330      	adds	r3, #48	; 0x30
 80030d0:	4618      	mov	r0, r3
 80030d2:	f004 fe7b 	bl	8007dcc <RCCEx_PLL3_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80030dc:	e00a      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80030e4:	e006      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80030e6:	bf00      	nop
 80030e8:	e004      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80030ea:	bf00      	nop
 80030ec:	e002      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80030ee:	bf00      	nop
 80030f0:	e000      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80030f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030f4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10c      	bne.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80030fc:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80030fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003102:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003106:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800310a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800310c:	4a2b      	ldr	r2, [pc, #172]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800310e:	430b      	orrs	r3, r1
 8003110:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003114:	e003      	b.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003116:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800311a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800311e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003126:	f002 0308 	and.w	r3, r2, #8
 800312a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800312e:	2300      	movs	r3, #0
 8003130:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003134:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8003138:	460b      	mov	r3, r1
 800313a:	4313      	orrs	r3, r2
 800313c:	d056      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800313e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003144:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003148:	d031      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x356>
 800314a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800314e:	d82a      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003154:	d02d      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800315a:	d824      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800315c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003160:	d029      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003162:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003166:	d81e      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316c:	d011      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800316e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003172:	d818      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d023      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800317c:	d113      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800317e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003182:	3308      	adds	r3, #8
 8003184:	4618      	mov	r0, r3
 8003186:	f004 fd89 	bl	8007c9c <RCCEx_PLL2_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003190:	e017      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003192:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003196:	3330      	adds	r3, #48	; 0x30
 8003198:	4618      	mov	r0, r3
 800319a:	f004 fe17 	bl	8007dcc <RCCEx_PLL3_Config>
 800319e:	4603      	mov	r3, r0
 80031a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80031a4:	e00d      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80031ac:	e009      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80031ae:	bf00      	nop
 80031b0:	e007      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80031b2:	bf00      	nop
 80031b4:	e005      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80031b6:	bf00      	nop
 80031b8:	e003      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80031ba:	bf00      	nop
 80031bc:	44020c00 	.word	0x44020c00
        break;
 80031c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10c      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80031ca:	4bbb      	ldr	r3, [pc, #748]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80031cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031d0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80031d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031da:	4ab7      	ldr	r2, [pc, #732]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80031dc:	430b      	orrs	r3, r1
 80031de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80031e2:	e003      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031e8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	f002 0310 	and.w	r3, r2, #16
 80031f8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003202:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8003206:	460b      	mov	r3, r1
 8003208:	4313      	orrs	r3, r2
 800320a:	d053      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 800320c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003212:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003216:	d031      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003218:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800321c:	d82a      	bhi.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800321e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003222:	d02d      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003228:	d824      	bhi.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800322a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800322e:	d029      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003230:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003234:	d81e      	bhi.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323a:	d011      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800323c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003240:	d818      	bhi.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d020      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800324a:	d113      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800324c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003250:	3308      	adds	r3, #8
 8003252:	4618      	mov	r0, r3
 8003254:	f004 fd22 	bl	8007c9c <RCCEx_PLL2_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800325e:	e014      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003260:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003264:	3330      	adds	r3, #48	; 0x30
 8003266:	4618      	mov	r0, r3
 8003268:	f004 fdb0 	bl	8007dcc <RCCEx_PLL3_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003272:	e00a      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800327a:	e006      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800327c:	bf00      	nop
 800327e:	e004      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003280:	bf00      	nop
 8003282:	e002      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003284:	bf00      	nop
 8003286:	e000      	b.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800328a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10c      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003292:	4b89      	ldr	r3, [pc, #548]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003294:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003298:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800329c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a2:	4a85      	ldr	r2, [pc, #532]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80032a4:	430b      	orrs	r3, r1
 80032a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80032aa:	e003      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032b0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80032b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f002 0320 	and.w	r3, r2, #32
 80032c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80032ca:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80032ce:	460b      	mov	r3, r1
 80032d0:	4313      	orrs	r3, r2
 80032d2:	d053      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80032d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032da:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80032de:	d031      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80032e0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80032e4:	d82a      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80032e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ea:	d02d      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f0:	d824      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80032f2:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80032f6:	d029      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80032f8:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80032fc:	d81e      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80032fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003302:	d011      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003308:	d818      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d020      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800330e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003312:	d113      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003314:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003318:	3308      	adds	r3, #8
 800331a:	4618      	mov	r0, r3
 800331c:	f004 fcbe 	bl	8007c9c <RCCEx_PLL2_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003326:	e014      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003328:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800332c:	3330      	adds	r3, #48	; 0x30
 800332e:	4618      	mov	r0, r3
 8003330:	f004 fd4c 	bl	8007dcc <RCCEx_PLL3_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800333a:	e00a      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003342:	e006      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003344:	bf00      	nop
 8003346:	e004      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003348:	bf00      	nop
 800334a:	e002      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800334c:	bf00      	nop
 800334e:	e000      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003352:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10c      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800335a:	4b57      	ldr	r3, [pc, #348]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800335c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003360:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8003364:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a53      	ldr	r2, [pc, #332]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800336c:	430b      	orrs	r3, r1
 800336e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003372:	e003      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003378:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800337c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003388:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003392:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8003396:	460b      	mov	r3, r1
 8003398:	4313      	orrs	r3, r2
 800339a:	d053      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800339c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80033a6:	d031      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80033a8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80033ac:	d82a      	bhi.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80033ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b2:	d02d      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80033b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b8:	d824      	bhi.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80033ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033be:	d029      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80033c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80033c4:	d81e      	bhi.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80033c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033ca:	d011      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80033cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033d0:	d818      	bhi.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d020      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80033d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033da:	d113      	bne.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033e0:	3308      	adds	r3, #8
 80033e2:	4618      	mov	r0, r3
 80033e4:	f004 fc5a 	bl	8007c9c <RCCEx_PLL2_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80033ee:	e014      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033f4:	3330      	adds	r3, #48	; 0x30
 80033f6:	4618      	mov	r0, r3
 80033f8:	f004 fce8 	bl	8007dcc <RCCEx_PLL3_Config>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003402:	e00a      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800340a:	e006      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800340c:	bf00      	nop
 800340e:	e004      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003410:	bf00      	nop
 8003412:	e002      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003414:	bf00      	nop
 8003416:	e000      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800341a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10c      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003422:	4b25      	ldr	r3, [pc, #148]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003424:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003428:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 800342c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003432:	4a21      	ldr	r2, [pc, #132]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003434:	430b      	orrs	r3, r1
 8003436:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800343a:	e003      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003440:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003444:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003450:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003454:	2300      	movs	r3, #0
 8003456:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800345a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 800345e:	460b      	mov	r3, r1
 8003460:	4313      	orrs	r3, r2
 8003462:	d055      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003464:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800346a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800346e:	d033      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003470:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003474:	d82c      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800347a:	d02f      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x684>
 800347c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003480:	d826      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003482:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003486:	d02b      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003488:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800348c:	d820      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800348e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003492:	d013      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003498:	d81a      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800349a:	2b00      	cmp	r3, #0
 800349c:	d022      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800349e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034a2:	d115      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034a8:	3308      	adds	r3, #8
 80034aa:	4618      	mov	r0, r3
 80034ac:	f004 fbf6 	bl	8007c9c <RCCEx_PLL2_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80034b6:	e016      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80034b8:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034c0:	3330      	adds	r3, #48	; 0x30
 80034c2:	4618      	mov	r0, r3
 80034c4:	f004 fc82 	bl	8007dcc <RCCEx_PLL3_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80034ce:	e00a      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80034d6:	e006      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80034d8:	bf00      	nop
 80034da:	e004      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80034dc:	bf00      	nop
 80034de:	e002      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80034e0:	bf00      	nop
 80034e2:	e000      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80034e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10c      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80034ee:	4bbb      	ldr	r3, [pc, #748]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80034f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034f4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80034f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034fe:	4ab7      	ldr	r2, [pc, #732]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003500:	430b      	orrs	r3, r1
 8003502:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003506:	e003      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003508:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800350c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003510:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003518:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800351c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003520:	2300      	movs	r3, #0
 8003522:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003526:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800352a:	460b      	mov	r3, r1
 800352c:	4313      	orrs	r3, r2
 800352e:	d053      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003530:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003536:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800353a:	d031      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800353c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003540:	d82a      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003542:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003546:	d02d      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003548:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800354c:	d824      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800354e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003552:	d029      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003554:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003558:	d81e      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800355a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800355e:	d011      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003560:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003564:	d818      	bhi.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d020      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x754>
 800356a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800356e:	d113      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003570:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003574:	3308      	adds	r3, #8
 8003576:	4618      	mov	r0, r3
 8003578:	f004 fb90 	bl	8007c9c <RCCEx_PLL2_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003582:	e014      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003584:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003588:	3330      	adds	r3, #48	; 0x30
 800358a:	4618      	mov	r0, r3
 800358c:	f004 fc1e 	bl	8007dcc <RCCEx_PLL3_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003596:	e00a      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800359e:	e006      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80035a0:	bf00      	nop
 80035a2:	e004      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80035a4:	bf00      	nop
 80035a6:	e002      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80035a8:	bf00      	nop
 80035aa:	e000      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80035ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80035b6:	4b89      	ldr	r3, [pc, #548]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80035b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035bc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80035c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c6:	4a85      	ldr	r2, [pc, #532]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80035c8:	430b      	orrs	r3, r1
 80035ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80035ce:	e003      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035d4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80035d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e0:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80035e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80035e8:	2300      	movs	r3, #0
 80035ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80035ee:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80035f2:	460b      	mov	r3, r1
 80035f4:	4313      	orrs	r3, r2
 80035f6:	d055      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80035f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003600:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003604:	d031      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003606:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800360a:	d82a      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800360c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003610:	d02d      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003616:	d824      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003618:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800361c:	d029      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800361e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003622:	d81e      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003628:	d011      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800362a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800362e:	d818      	bhi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003630:	2b00      	cmp	r3, #0
 8003632:	d020      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003638:	d113      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800363a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800363e:	3308      	adds	r3, #8
 8003640:	4618      	mov	r0, r3
 8003642:	f004 fb2b 	bl	8007c9c <RCCEx_PLL2_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800364c:	e014      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800364e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003652:	3330      	adds	r3, #48	; 0x30
 8003654:	4618      	mov	r0, r3
 8003656:	f004 fbb9 	bl	8007dcc <RCCEx_PLL3_Config>
 800365a:	4603      	mov	r3, r0
 800365c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003660:	e00a      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003668:	e006      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800366a:	bf00      	nop
 800366c:	e004      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800366e:	bf00      	nop
 8003670:	e002      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003678:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10d      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003680:	4b56      	ldr	r3, [pc, #344]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003682:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003686:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 800368a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800368e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003692:	4a52      	ldr	r2, [pc, #328]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003694:	430b      	orrs	r3, r1
 8003696:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800369a:	e003      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036a0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80036a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80036b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036ba:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80036be:	460b      	mov	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d044      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80036c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036cc:	2b05      	cmp	r3, #5
 80036ce:	d823      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80036d0:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80036d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d6:	bf00      	nop
 80036d8:	08003721 	.word	0x08003721
 80036dc:	080036f1 	.word	0x080036f1
 80036e0:	08003705 	.word	0x08003705
 80036e4:	08003721 	.word	0x08003721
 80036e8:	08003721 	.word	0x08003721
 80036ec:	08003721 	.word	0x08003721
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036f4:	3308      	adds	r3, #8
 80036f6:	4618      	mov	r0, r3
 80036f8:	f004 fad0 	bl	8007c9c <RCCEx_PLL2_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003702:	e00e      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003704:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003708:	3330      	adds	r3, #48	; 0x30
 800370a:	4618      	mov	r0, r3
 800370c:	f004 fb5e 	bl	8007dcc <RCCEx_PLL3_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003716:	e004      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003722:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10d      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800372a:	4b2c      	ldr	r3, [pc, #176]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800372c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003730:	f023 0107 	bic.w	r1, r3, #7
 8003734:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800373c:	4a27      	ldr	r2, [pc, #156]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800373e:	430b      	orrs	r3, r1
 8003740:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003744:	e003      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003746:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800374a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800374e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003756:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800375a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800375e:	2300      	movs	r3, #0
 8003760:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003764:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003768:	460b      	mov	r3, r1
 800376a:	4313      	orrs	r3, r2
 800376c:	d04f      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800376e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003776:	2b50      	cmp	r3, #80	; 0x50
 8003778:	d029      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x976>
 800377a:	2b50      	cmp	r3, #80	; 0x50
 800377c:	d823      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d027      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d81f      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003786:	2b30      	cmp	r3, #48	; 0x30
 8003788:	d025      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800378a:	2b30      	cmp	r3, #48	; 0x30
 800378c:	d81b      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800378e:	2b20      	cmp	r3, #32
 8003790:	d00f      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003792:	2b20      	cmp	r3, #32
 8003794:	d817      	bhi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d022      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800379a:	2b10      	cmp	r3, #16
 800379c:	d113      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800379e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037a2:	3308      	adds	r3, #8
 80037a4:	4618      	mov	r0, r3
 80037a6:	f004 fa79 	bl	8007c9c <RCCEx_PLL2_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80037b0:	e017      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037b6:	3330      	adds	r3, #48	; 0x30
 80037b8:	4618      	mov	r0, r3
 80037ba:	f004 fb07 	bl	8007dcc <RCCEx_PLL3_Config>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80037c4:	e00d      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80037cc:	e009      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80037ce:	bf00      	nop
 80037d0:	e007      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80037d2:	bf00      	nop
 80037d4:	e005      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80037d6:	bf00      	nop
 80037d8:	e003      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80037da:	bf00      	nop
 80037dc:	44020c00 	.word	0x44020c00
        break;
 80037e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10d      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80037ea:	4baf      	ldr	r3, [pc, #700]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80037ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80037f0:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80037f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fc:	4aaa      	ldr	r2, [pc, #680]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80037fe:	430b      	orrs	r3, r1
 8003800:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003804:	e003      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003806:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800380a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800380e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800381a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800381e:	2300      	movs	r3, #0
 8003820:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003824:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003828:	460b      	mov	r3, r1
 800382a:	4313      	orrs	r3, r2
 800382c:	d055      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800382e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003836:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800383a:	d031      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800383c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003840:	d82a      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003842:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003846:	d02d      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003848:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800384c:	d824      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800384e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003852:	d029      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003854:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003858:	d81e      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800385a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800385e:	d011      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003864:	d818      	bhi.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d020      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800386a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800386e:	d113      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003870:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003874:	3308      	adds	r3, #8
 8003876:	4618      	mov	r0, r3
 8003878:	f004 fa10 	bl	8007c9c <RCCEx_PLL2_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003882:	e014      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003884:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003888:	3330      	adds	r3, #48	; 0x30
 800388a:	4618      	mov	r0, r3
 800388c:	f004 fa9e 	bl	8007dcc <RCCEx_PLL3_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003896:	e00a      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800389e:	e006      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80038a0:	bf00      	nop
 80038a2:	e004      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80038a4:	bf00      	nop
 80038a6:	e002      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80038a8:	bf00      	nop
 80038aa:	e000      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80038ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10d      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80038b6:	4b7c      	ldr	r3, [pc, #496]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80038b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038bc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80038c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c8:	4a77      	ldr	r2, [pc, #476]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80038ca:	430b      	orrs	r3, r1
 80038cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038d0:	e003      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038d6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80038e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80038f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80038f4:	460b      	mov	r3, r1
 80038f6:	4313      	orrs	r3, r2
 80038f8:	d03d      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80038fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003906:	d01b      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003908:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800390c:	d814      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800390e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003912:	d017      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003918:	d80e      	bhi.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d014      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800391e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003922:	d109      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003924:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003928:	3330      	adds	r3, #48	; 0x30
 800392a:	4618      	mov	r0, r3
 800392c:	f004 fa4e 	bl	8007dcc <RCCEx_PLL3_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003936:	e008      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800393e:	e004      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003940:	bf00      	nop
 8003942:	e002      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003944:	bf00      	nop
 8003946:	e000      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800394a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10d      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003952:	4b55      	ldr	r3, [pc, #340]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003954:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003958:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800395c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003964:	4a50      	ldr	r2, [pc, #320]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003966:	430b      	orrs	r3, r1
 8003968:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800396c:	e003      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003972:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003976:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003982:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003986:	2300      	movs	r3, #0
 8003988:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800398c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003990:	460b      	mov	r3, r1
 8003992:	4313      	orrs	r3, r2
 8003994:	d03d      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003996:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800399a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039a2:	d01b      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80039a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80039a8:	d814      	bhi.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80039aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039ae:	d017      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80039b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039b4:	d80e      	bhi.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d014      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80039ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039be:	d109      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039c4:	3330      	adds	r3, #48	; 0x30
 80039c6:	4618      	mov	r0, r3
 80039c8:	f004 fa00 	bl	8007dcc <RCCEx_PLL3_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80039d2:	e008      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80039da:	e004      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80039dc:	bf00      	nop
 80039de:	e002      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80039e0:	bf00      	nop
 80039e2:	e000      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80039e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10d      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80039ee:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80039f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80039f4:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80039f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a00:	4a29      	ldr	r2, [pc, #164]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a02:	430b      	orrs	r3, r1
 8003a04:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003a08:	e003      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a0e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a22:	2300      	movs	r3, #0
 8003a24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a28:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	d040      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003a32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a3e:	d01b      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003a40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a44:	d814      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a4a:	d017      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a50:	d80e      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d014      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a5a:	d109      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a60:	3330      	adds	r3, #48	; 0x30
 8003a62:	4618      	mov	r0, r3
 8003a64:	f004 f9b2 	bl	8007dcc <RCCEx_PLL3_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003a6e:	e008      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a76:	e004      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003a78:	bf00      	nop
 8003a7a:	e002      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003a7c:	bf00      	nop
 8003a7e:	e000      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d110      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003a90:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a9c:	4a02      	ldr	r2, [pc, #8]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003aa4:	e006      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003aa6:	bf00      	nop
 8003aa8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ab0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ab4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	2100      	movs	r1, #0
 8003abe:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003aca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	d03d      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ad8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003adc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ae0:	d01b      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003ae2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ae6:	d814      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003ae8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aec:	d017      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003aee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003af2:	d80e      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d014      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003afc:	d109      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003afe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b02:	3330      	adds	r3, #48	; 0x30
 8003b04:	4618      	mov	r0, r3
 8003b06:	f004 f961 	bl	8007dcc <RCCEx_PLL3_Config>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003b10:	e008      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b18:	e004      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003b1a:	bf00      	nop
 8003b1c:	e002      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003b1e:	bf00      	nop
 8003b20:	e000      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b24:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10d      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003b2c:	4bbe      	ldr	r3, [pc, #760]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003b2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003b32:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003b36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b3e:	4aba      	ldr	r2, [pc, #744]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003b40:	430b      	orrs	r3, r1
 8003b42:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003b46:	e003      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b48:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b4c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	d035      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b7c:	d015      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003b7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b82:	d80e      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d012      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b8c:	d109      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b92:	3330      	adds	r3, #48	; 0x30
 8003b94:	4618      	mov	r0, r3
 8003b96:	f004 f919 	bl	8007dcc <RCCEx_PLL3_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003ba0:	e006      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ba8:	e002      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d10d      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003bb8:	4b9b      	ldr	r3, [pc, #620]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003bba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003bbe:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8003bc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bca:	4a97      	ldr	r2, [pc, #604]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003bd2:	e003      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bd8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	2100      	movs	r1, #0
 8003be6:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bf2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	d00e      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003bfc:	4b8a      	ldr	r3, [pc, #552]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	4a89      	ldr	r2, [pc, #548]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c06:	61d3      	str	r3, [r2, #28]
 8003c08:	4b87      	ldr	r3, [pc, #540]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c0a:	69d9      	ldr	r1, [r3, #28]
 8003c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c10:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003c14:	4a84      	ldr	r2, [pc, #528]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003c16:	430b      	orrs	r3, r1
 8003c18:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003c26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003c30:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003c34:	460b      	mov	r3, r1
 8003c36:	4313      	orrs	r3, r2
 8003c38:	d055      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c42:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003c46:	d031      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003c48:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003c4c:	d82a      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c52:	d02d      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c58:	d824      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003c5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c5e:	d029      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c64:	d81e      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c6a:	d011      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003c6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c70:	d818      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d020      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7a:	d113      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c80:	3308      	adds	r3, #8
 8003c82:	4618      	mov	r0, r3
 8003c84:	f004 f80a 	bl	8007c9c <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003c8e:	e014      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c94:	3330      	adds	r3, #48	; 0x30
 8003c96:	4618      	mov	r0, r3
 8003c98:	f004 f898 	bl	8007dcc <RCCEx_PLL3_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003ca2:	e00a      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003caa:	e006      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003cac:	bf00      	nop
 8003cae:	e004      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003cb0:	bf00      	nop
 8003cb2:	e002      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003cb4:	bf00      	nop
 8003cb6:	e000      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10d      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003cc2:	4b59      	ldr	r3, [pc, #356]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003cc4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003cc8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003ccc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cd4:	4a54      	ldr	r2, [pc, #336]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003cdc:	e003      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cde:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ce2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ce6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cfc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4313      	orrs	r3, r2
 8003d04:	d055      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003d06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003d0e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003d12:	d031      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003d14:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003d18:	d82a      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003d1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d1e:	d02d      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d24:	d824      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003d26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d2a:	d029      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003d2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d30:	d81e      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d36:	d011      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3c:	d818      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d020      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d46:	d113      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f003 ffa4 	bl	8007c9c <RCCEx_PLL2_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003d5a:	e014      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d60:	3330      	adds	r3, #48	; 0x30
 8003d62:	4618      	mov	r0, r3
 8003d64:	f004 f832 	bl	8007dcc <RCCEx_PLL3_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d76:	e006      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003d78:	bf00      	nop
 8003d7a:	e004      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003d7c:	bf00      	nop
 8003d7e:	e002      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003d80:	bf00      	nop
 8003d82:	e000      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10d      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003d8e:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003d90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003d94:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003d98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003da0:	4a21      	ldr	r2, [pc, #132]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003da2:	430b      	orrs	r3, r1
 8003da4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003da8:	e003      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003daa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003db2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	2100      	movs	r1, #0
 8003dbc:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8003dc0:	f003 0320 	and.w	r3, r3, #32
 8003dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	d057      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8003dd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003dda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dde:	d033      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de4:	d82c      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dea:	d02f      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003df0:	d826      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003df2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003df6:	d02b      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8003df8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dfc:	d820      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003dfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e02:	d013      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003e04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e08:	d81a      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d022      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8003e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e12:	d115      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e18:	3308      	adds	r3, #8
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f003 ff3e 	bl	8007c9c <RCCEx_PLL2_Config>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003e26:	e016      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8003e28:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e30:	3330      	adds	r3, #48	; 0x30
 8003e32:	4618      	mov	r0, r3
 8003e34:	f003 ffca 	bl	8007dcc <RCCEx_PLL3_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e46:	e006      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003e48:	bf00      	nop
 8003e4a:	e004      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10d      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003e5e:	4bbb      	ldr	r3, [pc, #748]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003e60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003e64:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003e70:	4ab6      	ldr	r2, [pc, #728]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003e72:	430b      	orrs	r3, r1
 8003e74:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e7e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003e82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003e98:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d055      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8003ea2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ea6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eaa:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003eae:	d031      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003eb0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003eb4:	d82a      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003eb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eba:	d02d      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec0:	d824      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003ec2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ec6:	d029      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003ec8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ecc:	d81e      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003ece:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ed2:	d011      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ed8:	d818      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d020      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8003ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee2:	d113      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ee8:	3308      	adds	r3, #8
 8003eea:	4618      	mov	r0, r3
 8003eec:	f003 fed6 	bl	8007c9c <RCCEx_PLL2_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003ef6:	e014      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003efc:	3330      	adds	r3, #48	; 0x30
 8003efe:	4618      	mov	r0, r3
 8003f00:	f003 ff64 	bl	8007dcc <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f12:	e006      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003f14:	bf00      	nop
 8003f16:	e004      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003f18:	bf00      	nop
 8003f1a:	e002      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003f1c:	bf00      	nop
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10d      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8003f2a:	4b88      	ldr	r3, [pc, #544]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003f30:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8003f34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f3c:	4a83      	ldr	r2, [pc, #524]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003f3e:	430b      	orrs	r3, r1
 8003f40:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003f44:	e003      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f4a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8003f4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f56:	2100      	movs	r1, #0
 8003f58:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8003f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f64:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	d055      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8003f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f76:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003f7a:	d031      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003f7c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003f80:	d82a      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003f82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f86:	d02d      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8003f88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f8c:	d824      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003f8e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f92:	d029      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8003f94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f98:	d81e      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003f9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f9e:	d011      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8003fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fa4:	d818      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d020      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8003faa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fae:	d113      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003fb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f003 fe70 	bl	8007c9c <RCCEx_PLL2_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003fc2:	e014      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fc8:	3330      	adds	r3, #48	; 0x30
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f003 fefe 	bl	8007dcc <RCCEx_PLL3_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003fd6:	e00a      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003fde:	e006      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003fe0:	bf00      	nop
 8003fe2:	e004      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003fe4:	bf00      	nop
 8003fe6:	e002      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003fe8:	bf00      	nop
 8003fea:	e000      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10d      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8003ff6:	4b55      	ldr	r3, [pc, #340]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003ff8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003ffc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004000:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004004:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004008:	4a50      	ldr	r2, [pc, #320]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800400a:	430b      	orrs	r3, r1
 800400c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004010:	e003      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004012:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004016:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800401a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	2100      	movs	r1, #0
 8004024:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004030:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004034:	460b      	mov	r3, r1
 8004036:	4313      	orrs	r3, r2
 8004038:	d055      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800403a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800403e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004046:	d031      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800404c:	d82a      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004052:	d02d      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004058:	d824      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800405a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800405e:	d029      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004060:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004064:	d81e      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800406a:	d011      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800406c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004070:	d818      	bhi.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d020      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800407a:	d113      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800407c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004080:	3308      	adds	r3, #8
 8004082:	4618      	mov	r0, r3
 8004084:	f003 fe0a 	bl	8007c9c <RCCEx_PLL2_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800408e:	e014      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004090:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004094:	3330      	adds	r3, #48	; 0x30
 8004096:	4618      	mov	r0, r3
 8004098:	f003 fe98 	bl	8007dcc <RCCEx_PLL3_Config>
 800409c:	4603      	mov	r3, r0
 800409e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80040a2:	e00a      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80040aa:	e006      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80040ac:	bf00      	nop
 80040ae:	e004      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80040b0:	bf00      	nop
 80040b2:	e002      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80040b4:	bf00      	nop
 80040b6:	e000      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80040b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10d      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80040c2:	4b22      	ldr	r3, [pc, #136]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80040c4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80040c8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80040cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80040d4:	4a1d      	ldr	r2, [pc, #116]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80040d6:	430b      	orrs	r3, r1
 80040d8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80040dc:	e003      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040e2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80040f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040f6:	2300      	movs	r3, #0
 80040f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80040fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004100:	460b      	mov	r3, r1
 8004102:	4313      	orrs	r3, r2
 8004104:	d055      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004106:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800410a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800410e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004112:	d035      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004114:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004118:	d82e      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800411a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800411e:	d031      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004120:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004124:	d828      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004126:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800412a:	d01b      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800412c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004130:	d822      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413a:	d009      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 800413c:	e01c      	b.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800413e:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	4a02      	ldr	r2, [pc, #8]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004148:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800414a:	e01c      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 800414c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004150:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004154:	3308      	adds	r3, #8
 8004156:	4618      	mov	r0, r3
 8004158:	f003 fda0 	bl	8007c9c <RCCEx_PLL2_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004162:	e010      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004164:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004168:	3330      	adds	r3, #48	; 0x30
 800416a:	4618      	mov	r0, r3
 800416c:	f003 fe2e 	bl	8007dcc <RCCEx_PLL3_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004176:	e006      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800417e:	e002      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004180:	bf00      	nop
 8004182:	e000      	b.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004184:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004186:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10d      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800418e:	4bc3      	ldr	r3, [pc, #780]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004194:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004198:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800419c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80041a0:	4abe      	ldr	r2, [pc, #760]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80041a2:	430b      	orrs	r3, r1
 80041a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80041a8:	e003      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041ae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80041b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80041be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041c8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80041cc:	460b      	mov	r3, r1
 80041ce:	4313      	orrs	r3, r2
 80041d0:	d051      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80041d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80041da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041de:	d033      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80041e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041e4:	d82c      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80041e6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80041ea:	d02d      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80041ec:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80041f0:	d826      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80041f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f6:	d019      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80041f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041fc:	d820      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8004202:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004206:	d007      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004208:	e01a      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800420a:	4ba4      	ldr	r3, [pc, #656]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	4aa3      	ldr	r2, [pc, #652]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004214:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004216:	e018      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004218:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800421c:	3308      	adds	r3, #8
 800421e:	4618      	mov	r0, r3
 8004220:	f003 fd3c 	bl	8007c9c <RCCEx_PLL2_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800422a:	e00e      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800422c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004230:	3330      	adds	r3, #48	; 0x30
 8004232:	4618      	mov	r0, r3
 8004234:	f003 fdca 	bl	8007dcc <RCCEx_PLL3_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800423e:	e004      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004246:	e000      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10d      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004252:	4b92      	ldr	r3, [pc, #584]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004258:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 800425c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004260:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004264:	4a8d      	ldr	r2, [pc, #564]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004266:	430b      	orrs	r3, r1
 8004268:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800426c:	e003      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004272:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004276:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004282:	67bb      	str	r3, [r7, #120]	; 0x78
 8004284:	2300      	movs	r3, #0
 8004286:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004288:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800428c:	460b      	mov	r3, r1
 800428e:	4313      	orrs	r3, r2
 8004290:	d032      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004292:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004296:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800429a:	2b05      	cmp	r3, #5
 800429c:	d80f      	bhi.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d211      	bcs.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d911      	bls.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d109      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042ae:	3308      	adds	r3, #8
 80042b0:	4618      	mov	r0, r3
 80042b2:	f003 fcf3 	bl	8007c9c <RCCEx_PLL2_Config>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042bc:	e006      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042c4:	e002      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80042c6:	bf00      	nop
 80042c8:	e000      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80042ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10d      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80042d4:	4b71      	ldr	r3, [pc, #452]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80042d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042da:	f023 0107 	bic.w	r1, r3, #7
 80042de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80042e6:	4a6d      	ldr	r2, [pc, #436]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80042e8:	430b      	orrs	r3, r1
 80042ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042ee:	e003      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042f4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80042f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	2100      	movs	r1, #0
 8004302:	6739      	str	r1, [r7, #112]	; 0x70
 8004304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004308:	677b      	str	r3, [r7, #116]	; 0x74
 800430a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800430e:	460b      	mov	r3, r1
 8004310:	4313      	orrs	r3, r2
 8004312:	d024      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004314:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004318:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004320:	2b08      	cmp	r3, #8
 8004322:	d005      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800432a:	e002      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800432c:	bf00      	nop
 800432e:	e000      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004332:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10d      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800433a:	4b58      	ldr	r3, [pc, #352]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800433c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004340:	f023 0108 	bic.w	r1, r3, #8
 8004344:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004348:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800434c:	4a53      	ldr	r2, [pc, #332]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800434e:	430b      	orrs	r3, r1
 8004350:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004354:	e003      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004356:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800435a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800435e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800436a:	66bb      	str	r3, [r7, #104]	; 0x68
 800436c:	2300      	movs	r3, #0
 800436e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004370:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004374:	460b      	mov	r3, r1
 8004376:	4313      	orrs	r3, r2
 8004378:	f000 80b9 	beq.w	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800437c:	4b48      	ldr	r3, [pc, #288]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	4a47      	ldr	r2, [pc, #284]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004382:	f043 0301 	orr.w	r3, r3, #1
 8004386:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004388:	f7fd fb04 	bl	8001994 <HAL_GetTick>
 800438c:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004390:	e00b      	b.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004392:	f7fd faff 	bl	8001994 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d903      	bls.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043a8:	e005      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80043aa:	4b3d      	ldr	r3, [pc, #244]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0ed      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80043b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f040 8093 	bne.w	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043c0:	4b36      	ldr	r3, [pc, #216]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80043ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d023      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80043d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043da:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80043de:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d01b      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043e6:	4b2d      	ldr	r3, [pc, #180]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043f4:	4b29      	ldr	r3, [pc, #164]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043fa:	4a28      	ldr	r2, [pc, #160]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80043fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004400:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004404:	4b25      	ldr	r3, [pc, #148]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800440a:	4a24      	ldr	r2, [pc, #144]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800440c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004410:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004414:	4a21      	ldr	r2, [pc, #132]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004416:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800441a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800441e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d019      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fd fab3 	bl	8001994 <HAL_GetTick>
 800442e:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004432:	e00d      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004434:	f7fd faae 	bl	8001994 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800443e:	1ad2      	subs	r2, r2, r3
 8004440:	f241 3388 	movw	r3, #5000	; 0x1388
 8004444:	429a      	cmp	r2, r3
 8004446:	d903      	bls.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 800444e:	e006      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004450:	4b12      	ldr	r3, [pc, #72]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0ea      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800445e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004462:	2b00      	cmp	r3, #0
 8004464:	d13a      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004466:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800446a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800446e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004476:	d115      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004478:	4b08      	ldr	r3, [pc, #32]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004480:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004484:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800448e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004492:	4a02      	ldr	r2, [pc, #8]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004494:	430b      	orrs	r3, r1
 8004496:	61d3      	str	r3, [r2, #28]
 8004498:	e00a      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800449a:	bf00      	nop
 800449c:	44020c00 	.word	0x44020c00
 80044a0:	44020800 	.word	0x44020800
 80044a4:	4b9f      	ldr	r3, [pc, #636]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	4a9e      	ldr	r2, [pc, #632]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80044ae:	61d3      	str	r3, [r2, #28]
 80044b0:	4b9c      	ldr	r3, [pc, #624]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044b6:	4a9b      	ldr	r2, [pc, #620]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80044c0:	4b98      	ldr	r3, [pc, #608]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044c2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80044c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044ca:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80044ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d2:	4a94      	ldr	r2, [pc, #592]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80044d4:	430b      	orrs	r3, r1
 80044d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80044da:	e008      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044e0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 80044e4:	e003      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044ea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f6:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80044fa:	663b      	str	r3, [r7, #96]	; 0x60
 80044fc:	2300      	movs	r3, #0
 80044fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004500:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004504:	460b      	mov	r3, r1
 8004506:	4313      	orrs	r3, r2
 8004508:	d035      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800450a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800450e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004512:	2b30      	cmp	r3, #48	; 0x30
 8004514:	d014      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8004516:	2b30      	cmp	r3, #48	; 0x30
 8004518:	d80e      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800451a:	2b20      	cmp	r3, #32
 800451c:	d012      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800451e:	2b20      	cmp	r3, #32
 8004520:	d80a      	bhi.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004522:	2b00      	cmp	r3, #0
 8004524:	d010      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8004526:	2b10      	cmp	r3, #16
 8004528:	d106      	bne.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800452a:	4b7e      	ldr	r3, [pc, #504]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	4a7d      	ldr	r2, [pc, #500]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004534:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004536:	e008      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800453e:	e004      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004540:	bf00      	nop
 8004542:	e002      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004544:	bf00      	nop
 8004546:	e000      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10d      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004552:	4b74      	ldr	r3, [pc, #464]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004558:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800455c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004560:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004564:	4a6f      	ldr	r2, [pc, #444]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004566:	430b      	orrs	r3, r1
 8004568:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800456c:	e003      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004572:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004576:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004582:	65bb      	str	r3, [r7, #88]	; 0x58
 8004584:	2300      	movs	r3, #0
 8004586:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004588:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800458c:	460b      	mov	r3, r1
 800458e:	4313      	orrs	r3, r2
 8004590:	d033      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8004592:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004596:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800459e:	2b40      	cmp	r3, #64	; 0x40
 80045a0:	d007      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80045a2:	e010      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a4:	4b5f      	ldr	r3, [pc, #380]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	4a5e      	ldr	r2, [pc, #376]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ae:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80045b0:	e00d      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045b6:	3308      	adds	r3, #8
 80045b8:	4618      	mov	r0, r3
 80045ba:	f003 fb6f 	bl	8007c9c <RCCEx_PLL2_Config>
 80045be:	4603      	mov	r3, r0
 80045c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80045c4:	e003      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80045cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10d      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80045d6:	4b53      	ldr	r3, [pc, #332]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80045dc:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80045e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045e4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80045e8:	4a4e      	ldr	r2, [pc, #312]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80045ea:	430b      	orrs	r3, r1
 80045ec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80045f0:	e003      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045f6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80045fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004606:	653b      	str	r3, [r7, #80]	; 0x50
 8004608:	2300      	movs	r3, #0
 800460a:	657b      	str	r3, [r7, #84]	; 0x54
 800460c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004610:	460b      	mov	r3, r1
 8004612:	4313      	orrs	r3, r2
 8004614:	d033      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004616:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800461a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d007      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8004626:	e010      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004628:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	4a3d      	ldr	r2, [pc, #244]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800462e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004632:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004634:	e00d      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004636:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800463a:	3308      	adds	r3, #8
 800463c:	4618      	mov	r0, r3
 800463e:	f003 fb2d 	bl	8007c9c <RCCEx_PLL2_Config>
 8004642:	4603      	mov	r3, r0
 8004644:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004648:	e003      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004650:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004652:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10d      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800465a:	4b32      	ldr	r3, [pc, #200]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800465c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004660:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004664:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004668:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800466c:	4a2d      	ldr	r2, [pc, #180]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800466e:	430b      	orrs	r3, r1
 8004670:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004674:	e003      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004676:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800467a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800467e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800468a:	64bb      	str	r3, [r7, #72]	; 0x48
 800468c:	2300      	movs	r3, #0
 800468e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004690:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004694:	460b      	mov	r3, r1
 8004696:	4313      	orrs	r3, r2
 8004698:	d04a      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800469a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800469e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d827      	bhi.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80046a6:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	080046c1 	.word	0x080046c1
 80046b0:	080046cf 	.word	0x080046cf
 80046b4:	080046e3 	.word	0x080046e3
 80046b8:	080046ff 	.word	0x080046ff
 80046bc:	080046ff 	.word	0x080046ff
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c0:	4b18      	ldr	r3, [pc, #96]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c4:	4a17      	ldr	r2, [pc, #92]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80046c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ca:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80046cc:	e018      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046d2:	3308      	adds	r3, #8
 80046d4:	4618      	mov	r0, r3
 80046d6:	f003 fae1 	bl	8007c9c <RCCEx_PLL2_Config>
 80046da:	4603      	mov	r3, r0
 80046dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80046e0:	e00e      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046e6:	3330      	adds	r3, #48	; 0x30
 80046e8:	4618      	mov	r0, r3
 80046ea:	f003 fb6f 	bl	8007dcc <RCCEx_PLL3_Config>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80046f4:	e004      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80046fc:	e000      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80046fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004700:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10f      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800470a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800470e:	f023 0107 	bic.w	r1, r3, #7
 8004712:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800471a:	4a02      	ldr	r2, [pc, #8]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800471c:	430b      	orrs	r3, r1
 800471e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004722:	e005      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004724:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800472c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004730:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800473c:	643b      	str	r3, [r7, #64]	; 0x40
 800473e:	2300      	movs	r3, #0
 8004740:	647b      	str	r3, [r7, #68]	; 0x44
 8004742:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004746:	460b      	mov	r3, r1
 8004748:	4313      	orrs	r3, r2
 800474a:	f000 8081 	beq.w	8004850 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800474e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004752:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004756:	2b20      	cmp	r3, #32
 8004758:	d85f      	bhi.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800475a:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800475c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004760:	080047e5 	.word	0x080047e5
 8004764:	0800481b 	.word	0x0800481b
 8004768:	0800481b 	.word	0x0800481b
 800476c:	0800481b 	.word	0x0800481b
 8004770:	0800481b 	.word	0x0800481b
 8004774:	0800481b 	.word	0x0800481b
 8004778:	0800481b 	.word	0x0800481b
 800477c:	0800481b 	.word	0x0800481b
 8004780:	080047f3 	.word	0x080047f3
 8004784:	0800481b 	.word	0x0800481b
 8004788:	0800481b 	.word	0x0800481b
 800478c:	0800481b 	.word	0x0800481b
 8004790:	0800481b 	.word	0x0800481b
 8004794:	0800481b 	.word	0x0800481b
 8004798:	0800481b 	.word	0x0800481b
 800479c:	0800481b 	.word	0x0800481b
 80047a0:	08004807 	.word	0x08004807
 80047a4:	0800481b 	.word	0x0800481b
 80047a8:	0800481b 	.word	0x0800481b
 80047ac:	0800481b 	.word	0x0800481b
 80047b0:	0800481b 	.word	0x0800481b
 80047b4:	0800481b 	.word	0x0800481b
 80047b8:	0800481b 	.word	0x0800481b
 80047bc:	0800481b 	.word	0x0800481b
 80047c0:	08004823 	.word	0x08004823
 80047c4:	0800481b 	.word	0x0800481b
 80047c8:	0800481b 	.word	0x0800481b
 80047cc:	0800481b 	.word	0x0800481b
 80047d0:	0800481b 	.word	0x0800481b
 80047d4:	0800481b 	.word	0x0800481b
 80047d8:	0800481b 	.word	0x0800481b
 80047dc:	0800481b 	.word	0x0800481b
 80047e0:	08004823 	.word	0x08004823
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e4:	4bab      	ldr	r3, [pc, #684]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	4aaa      	ldr	r2, [pc, #680]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80047ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ee:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80047f0:	e018      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047f6:	3308      	adds	r3, #8
 80047f8:	4618      	mov	r0, r3
 80047fa:	f003 fa4f 	bl	8007c9c <RCCEx_PLL2_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004804:	e00e      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004806:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800480a:	3330      	adds	r3, #48	; 0x30
 800480c:	4618      	mov	r0, r3
 800480e:	f003 fadd 	bl	8007dcc <RCCEx_PLL3_Config>
 8004812:	4603      	mov	r3, r0
 8004814:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004818:	e004      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004820:	e000      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004824:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10d      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800482c:	4b99      	ldr	r3, [pc, #612]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800482e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004832:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004836:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800483a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800483e:	4a95      	ldr	r2, [pc, #596]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004840:	430b      	orrs	r3, r1
 8004842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004846:	e003      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004848:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800484c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004850:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800485c:	63bb      	str	r3, [r7, #56]	; 0x38
 800485e:	2300      	movs	r3, #0
 8004860:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004862:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004866:	460b      	mov	r3, r1
 8004868:	4313      	orrs	r3, r2
 800486a:	d04e      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800486c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004874:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004878:	d02e      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800487a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800487e:	d827      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004880:	2bc0      	cmp	r3, #192	; 0xc0
 8004882:	d02b      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004884:	2bc0      	cmp	r3, #192	; 0xc0
 8004886:	d823      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004888:	2b80      	cmp	r3, #128	; 0x80
 800488a:	d017      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800488c:	2b80      	cmp	r3, #128	; 0x80
 800488e:	d81f      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004894:	2b40      	cmp	r3, #64	; 0x40
 8004896:	d007      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004898:	e01a      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800489a:	4b7e      	ldr	r3, [pc, #504]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	4a7d      	ldr	r2, [pc, #500]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80048a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a4:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80048a6:	e01a      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048ac:	3308      	adds	r3, #8
 80048ae:	4618      	mov	r0, r3
 80048b0:	f003 f9f4 	bl	8007c9c <RCCEx_PLL2_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80048ba:	e010      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80048bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048c0:	3330      	adds	r3, #48	; 0x30
 80048c2:	4618      	mov	r0, r3
 80048c4:	f003 fa82 	bl	8007dcc <RCCEx_PLL3_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80048ce:	e006      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80048d6:	e002      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80048d8:	bf00      	nop
 80048da:	e000      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80048dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10d      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80048e6:	4b6b      	ldr	r3, [pc, #428]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80048e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048ec:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80048f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048f8:	4a66      	ldr	r2, [pc, #408]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80048fa:	430b      	orrs	r3, r1
 80048fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004900:	e003      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004902:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004906:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800490a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004916:	633b      	str	r3, [r7, #48]	; 0x30
 8004918:	2300      	movs	r3, #0
 800491a:	637b      	str	r3, [r7, #52]	; 0x34
 800491c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004920:	460b      	mov	r3, r1
 8004922:	4313      	orrs	r3, r2
 8004924:	d055      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004926:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800492a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800492e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004932:	d031      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004934:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004938:	d82a      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800493a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800493e:	d02d      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004944:	d824      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004946:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800494a:	d029      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800494c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004950:	d81e      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004956:	d011      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495c:	d818      	bhi.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800495e:	2b00      	cmp	r3, #0
 8004960:	d020      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004966:	d113      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004968:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800496c:	3308      	adds	r3, #8
 800496e:	4618      	mov	r0, r3
 8004970:	f003 f994 	bl	8007c9c <RCCEx_PLL2_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800497a:	e014      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800497c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004980:	3330      	adds	r3, #48	; 0x30
 8004982:	4618      	mov	r0, r3
 8004984:	f003 fa22 	bl	8007dcc <RCCEx_PLL3_Config>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800498e:	e00a      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004996:	e006      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004998:	bf00      	nop
 800499a:	e004      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800499c:	bf00      	nop
 800499e:	e002      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80049a0:	bf00      	nop
 80049a2:	e000      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80049a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10d      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80049ae:	4b39      	ldr	r3, [pc, #228]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80049b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049b4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80049b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80049c0:	4a34      	ldr	r2, [pc, #208]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80049c2:	430b      	orrs	r3, r1
 80049c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049c8:	e003      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049ce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80049d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049da:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
 80049e0:	2300      	movs	r3, #0
 80049e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80049e8:	460b      	mov	r3, r1
 80049ea:	4313      	orrs	r3, r2
 80049ec:	d058      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80049ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049f6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80049fa:	d031      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80049fc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004a00:	d82a      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004a02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a06:	d02d      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a0c:	d824      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004a0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a12:	d029      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004a14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a18:	d81e      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a1e:	d011      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a24:	d818      	bhi.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d020      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	d113      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a34:	3308      	adds	r3, #8
 8004a36:	4618      	mov	r0, r3
 8004a38:	f003 f930 	bl	8007c9c <RCCEx_PLL2_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004a42:	e014      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a48:	3330      	adds	r3, #48	; 0x30
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f003 f9be 	bl	8007dcc <RCCEx_PLL3_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004a56:	e00a      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a5e:	e006      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004a60:	bf00      	nop
 8004a62:	e004      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004a64:	bf00      	nop
 8004a66:	e002      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004a68:	bf00      	nop
 8004a6a:	e000      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d110      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a7c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a88:	4902      	ldr	r1, [pc, #8]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004a90:	e006      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004a92:	bf00      	nop
 8004a94:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a9c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	6239      	str	r1, [r7, #32]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	d055      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004abc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ac0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ac4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004ac8:	d031      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004aca:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004ace:	d82a      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004ad0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ad4:	d02d      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ada:	d824      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004adc:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004ae0:	d029      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004ae2:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004ae6:	d81e      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aec:	d011      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af2:	d818      	bhi.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d020      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004afc:	d113      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004afe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b02:	3308      	adds	r3, #8
 8004b04:	4618      	mov	r0, r3
 8004b06:	f003 f8c9 	bl	8007c9c <RCCEx_PLL2_Config>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b10:	e014      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b16:	3330      	adds	r3, #48	; 0x30
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f003 f957 	bl	8007dcc <RCCEx_PLL3_Config>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004b24:	e00a      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b2c:	e006      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004b2e:	bf00      	nop
 8004b30:	e004      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004b32:	bf00      	nop
 8004b34:	e002      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004b36:	bf00      	nop
 8004b38:	e000      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b3c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10d      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004b44:	4b88      	ldr	r3, [pc, #544]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b4a:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8004b4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b56:	4984      	ldr	r1, [pc, #528]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004b5e:	e003      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b60:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b64:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	2100      	movs	r1, #0
 8004b72:	61b9      	str	r1, [r7, #24]
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4313      	orrs	r3, r2
 8004b82:	d03d      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004b8c:	2b03      	cmp	r3, #3
 8004b8e:	d81c      	bhi.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004b90:	a201      	add	r2, pc, #4	; (adr r2, 8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b96:	bf00      	nop
 8004b98:	08004bd3 	.word	0x08004bd3
 8004b9c:	08004ba9 	.word	0x08004ba9
 8004ba0:	08004bb7 	.word	0x08004bb7
 8004ba4:	08004bd3 	.word	0x08004bd3
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba8:	4b6f      	ldr	r3, [pc, #444]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bac:	4a6e      	ldr	r2, [pc, #440]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb2:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004bb4:	e00e      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bba:	3308      	adds	r3, #8
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f003 f86d 	bl	8007c9c <RCCEx_PLL2_Config>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004bc8:	e004      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004bd0:	e000      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bd4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d10d      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004bdc:	4b62      	ldr	r3, [pc, #392]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004bde:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004be2:	f023 0203 	bic.w	r2, r3, #3
 8004be6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004bee:	495e      	ldr	r1, [pc, #376]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004bf6:	e003      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004bfc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	2100      	movs	r1, #0
 8004c0a:	6139      	str	r1, [r7, #16]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c16:	460b      	mov	r3, r1
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	d03a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004c1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c28:	d00e      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2e:	d815      	bhi.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d017      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c38:	d110      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c3a:	4b4b      	ldr	r3, [pc, #300]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	4a4a      	ldr	r2, [pc, #296]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c44:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004c46:	e00e      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f003 f824 	bl	8007c9c <RCCEx_PLL2_Config>
 8004c54:	4603      	mov	r3, r0
 8004c56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004c5a:	e004      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004c62:	e000      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10d      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004c6e:	4b3e      	ldr	r3, [pc, #248]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c7c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004c80:	4939      	ldr	r1, [pc, #228]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004c88:	e003      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c8e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4313      	orrs	r3, r2
 8004cac:	d038      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004cae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cb2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004cb6:	2b30      	cmp	r3, #48	; 0x30
 8004cb8:	d01b      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004cba:	2b30      	cmp	r3, #48	; 0x30
 8004cbc:	d815      	bhi.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004cbe:	2b10      	cmp	r3, #16
 8004cc0:	d002      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d007      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004cc6:	e010      	b.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc8:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	4a26      	ldr	r2, [pc, #152]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cd2:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cd4:	e00e      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cda:	3330      	adds	r3, #48	; 0x30
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f003 f875 	bl	8007dcc <RCCEx_PLL3_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004ce8:	e004      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004cf0:	e000      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004cf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cf4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10d      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004cfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004d0e:	4916      	ldr	r1, [pc, #88]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004d16:	e003      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d18:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d1c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d28:	2100      	movs	r1, #0
 8004d2a:	6039      	str	r1, [r7, #0]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d36:	460b      	mov	r3, r1
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	d00c      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d4a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004d4e:	4906      	ldr	r1, [pc, #24]	; (8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8004d56:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8004d60:	46bd      	mov	sp, r7
 8004d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d66:	bf00      	nop
 8004d68:	44020c00 	.word	0x44020c00

08004d6c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b08b      	sub	sp, #44	; 0x2c
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8004d74:	4bad      	ldr	r3, [pc, #692]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004d7e:	4bab      	ldr	r3, [pc, #684]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	f003 0303 	and.w	r3, r3, #3
 8004d86:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004d88:	4ba8      	ldr	r3, [pc, #672]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	0a1b      	lsrs	r3, r3, #8
 8004d8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d92:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8004d94:	4ba5      	ldr	r3, [pc, #660]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004d9e:	4ba3      	ldr	r3, [pc, #652]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da2:	08db      	lsrs	r3, r3, #3
 8004da4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	fb02 f303 	mul.w	r3, r2, r3
 8004dae:	ee07 3a90 	vmov	s15, r3
 8004db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8126 	beq.w	800500e <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d053      	beq.n	8004e70 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d86f      	bhi.n	8004eae <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d003      	beq.n	8004ddc <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d02b      	beq.n	8004e32 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8004dda:	e068      	b.n	8004eae <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ddc:	4b93      	ldr	r3, [pc, #588]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	08db      	lsrs	r3, r3, #3
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	4a92      	ldr	r2, [pc, #584]	; (8005030 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004de8:	fa22 f303 	lsr.w	r3, r2, r3
 8004dec:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	ee07 3a90 	vmov	s15, r3
 8004df4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	ee07 3a90 	vmov	s15, r3
 8004e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e10:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e14:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005034 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004e18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004e30:	e068      	b.n	8004f04 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	ee07 3a90 	vmov	s15, r3
 8004e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005038 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004e40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005034 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e6a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004e6e:	e049      	b.n	8004f04 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	ee07 3a90 	vmov	s15, r3
 8004e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e7a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800503c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	ee07 3a90 	vmov	s15, r3
 8004e88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004e90:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005034 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004e94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004eac:	e02a      	b.n	8004f04 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004eae:	4b5f      	ldr	r3, [pc, #380]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	08db      	lsrs	r3, r3, #3
 8004eb4:	f003 0303 	and.w	r3, r3, #3
 8004eb8:	4a5d      	ldr	r2, [pc, #372]	; (8005030 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8004eba:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebe:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	ee07 3a90 	vmov	s15, r3
 8004ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	ee07 3a90 	vmov	s15, r3
 8004ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee2:	ed97 6a04 	vldr	s12, [r7, #16]
 8004ee6:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005034 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004efe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004f02:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f04:	4b49      	ldr	r3, [pc, #292]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f10:	d121      	bne.n	8004f56 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004f12:	4b46      	ldr	r3, [pc, #280]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d017      	beq.n	8004f4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004f1e:	4b43      	ldr	r3, [pc, #268]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f22:	0a5b      	lsrs	r3, r3, #9
 8004f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f28:	ee07 3a90 	vmov	s15, r3
 8004f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8004f30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f34:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004f38:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f44:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	e006      	b.n	8004f5c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e002      	b.n	8004f5c <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f5c:	4b33      	ldr	r3, [pc, #204]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f68:	d121      	bne.n	8004fae <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8004f6a:	4b30      	ldr	r3, [pc, #192]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d017      	beq.n	8004fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004f76:	4b2d      	ldr	r3, [pc, #180]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7a:	0c1b      	lsrs	r3, r3, #16
 8004f7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f80:	ee07 3a90 	vmov	s15, r3
 8004f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8004f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f8c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004f90:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f9c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	605a      	str	r2, [r3, #4]
 8004fa4:	e006      	b.n	8004fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	605a      	str	r2, [r3, #4]
 8004fac:	e002      	b.n	8004fb4 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fb4:	4b1d      	ldr	r3, [pc, #116]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fc0:	d121      	bne.n	8005006 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d017      	beq.n	8004ffe <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004fce:	4b17      	ldr	r3, [pc, #92]	; (800502c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd2:	0e1b      	lsrs	r3, r3, #24
 8004fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd8:	ee07 3a90 	vmov	s15, r3
 8004fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fe4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004fe8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004fec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ff4:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004ffc:	e010      	b.n	8005020 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	609a      	str	r2, [r3, #8]
}
 8005004:	e00c      	b.n	8005020 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	609a      	str	r2, [r3, #8]
}
 800500c:	e008      	b.n	8005020 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	609a      	str	r2, [r3, #8]
}
 8005020:	bf00      	nop
 8005022:	372c      	adds	r7, #44	; 0x2c
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	44020c00 	.word	0x44020c00
 8005030:	03d09000 	.word	0x03d09000
 8005034:	46000000 	.word	0x46000000
 8005038:	4a742400 	.word	0x4a742400
 800503c:	4bbebc20 	.word	0x4bbebc20

08005040 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005040:	b480      	push	{r7}
 8005042:	b08b      	sub	sp, #44	; 0x2c
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005048:	4bad      	ldr	r3, [pc, #692]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800504a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005050:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005052:	4bab      	ldr	r3, [pc, #684]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800505c:	4ba8      	ldr	r3, [pc, #672]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	0a1b      	lsrs	r3, r3, #8
 8005062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005066:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005068:	4ba5      	ldr	r3, [pc, #660]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005072:	4ba3      	ldr	r3, [pc, #652]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	08db      	lsrs	r3, r3, #3
 8005078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 8126 	beq.w	80052e2 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2b03      	cmp	r3, #3
 800509a:	d053      	beq.n	8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d86f      	bhi.n	8005182 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d003      	beq.n	80050b0 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d02b      	beq.n	8005106 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80050ae:	e068      	b.n	8005182 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050b0:	4b93      	ldr	r3, [pc, #588]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	08db      	lsrs	r3, r3, #3
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	4a92      	ldr	r2, [pc, #584]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
 80050c0:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	ee07 3a90 	vmov	s15, r3
 80050c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	ee07 3a90 	vmov	s15, r3
 80050e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e4:	ed97 6a04 	vldr	s12, [r7, #16]
 80050e8:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80050ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005100:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005104:	e068      	b.n	80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	ee07 3a90 	vmov	s15, r3
 800510c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005110:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800530c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005114:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005122:	ed97 6a04 	vldr	s12, [r7, #16]
 8005126:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800512a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005142:	e049      	b.n	80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005310 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	ee07 3a90 	vmov	s15, r3
 800515c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005160:	ed97 6a04 	vldr	s12, [r7, #16]
 8005164:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005168:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005170:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005174:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005180:	e02a      	b.n	80051d8 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005182:	4b5f      	ldr	r3, [pc, #380]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	08db      	lsrs	r3, r3, #3
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	4a5d      	ldr	r2, [pc, #372]	; (8005304 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800518e:	fa22 f303 	lsr.w	r3, r2, r3
 8005192:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	ee07 3a90 	vmov	s15, r3
 80051a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b6:	ed97 6a04 	vldr	s12, [r7, #16]
 80051ba:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80051be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80051d6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051d8:	4b49      	ldr	r3, [pc, #292]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051e4:	d121      	bne.n	800522a <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80051e6:	4b46      	ldr	r3, [pc, #280]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80051e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d017      	beq.n	8005222 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80051f2:	4b43      	ldr	r3, [pc, #268]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80051f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f6:	0a5b      	lsrs	r3, r3, #9
 80051f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051fc:	ee07 3a90 	vmov	s15, r3
 8005200:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005208:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800520c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005218:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	e006      	b.n	8005230 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
 8005228:	e002      	b.n	8005230 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005230:	4b33      	ldr	r3, [pc, #204]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800523c:	d121      	bne.n	8005282 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800523e:	4b30      	ldr	r3, [pc, #192]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d017      	beq.n	800527a <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800524a:	4b2d      	ldr	r3, [pc, #180]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800524c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005254:	ee07 3a90 	vmov	s15, r3
 8005258:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800525c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005260:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005264:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800526c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005270:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	605a      	str	r2, [r3, #4]
 8005278:	e006      	b.n	8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	605a      	str	r2, [r3, #4]
 8005280:	e002      	b.n	8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005288:	4b1d      	ldr	r3, [pc, #116]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005290:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005294:	d121      	bne.n	80052da <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005296:	4b1a      	ldr	r3, [pc, #104]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d017      	beq.n	80052d2 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80052a2:	4b17      	ldr	r3, [pc, #92]	; (8005300 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	0e1b      	lsrs	r3, r3, #24
 80052a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ac:	ee07 3a90 	vmov	s15, r3
 80052b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80052b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052b8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80052bc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80052c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052c8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80052d0:	e010      	b.n	80052f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	609a      	str	r2, [r3, #8]
}
 80052d8:	e00c      	b.n	80052f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	609a      	str	r2, [r3, #8]
}
 80052e0:	e008      	b.n	80052f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	609a      	str	r2, [r3, #8]
}
 80052f4:	bf00      	nop
 80052f6:	372c      	adds	r7, #44	; 0x2c
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	44020c00 	.word	0x44020c00
 8005304:	03d09000 	.word	0x03d09000
 8005308:	46000000 	.word	0x46000000
 800530c:	4a742400 	.word	0x4a742400
 8005310:	4bbebc20 	.word	0x4bbebc20

08005314 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005314:	b480      	push	{r7}
 8005316:	b08b      	sub	sp, #44	; 0x2c
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800531c:	4bad      	ldr	r3, [pc, #692]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800531e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005324:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005326:	4bab      	ldr	r3, [pc, #684]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	f003 0303 	and.w	r3, r3, #3
 800532e:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005330:	4ba8      	ldr	r3, [pc, #672]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	0a1b      	lsrs	r3, r3, #8
 8005336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800533a:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800533c:	4ba5      	ldr	r3, [pc, #660]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005346:	4ba3      	ldr	r3, [pc, #652]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800534a:	08db      	lsrs	r3, r3, #3
 800534c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	fb02 f303 	mul.w	r3, r2, r3
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 8126 	beq.w	80055b6 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	2b03      	cmp	r3, #3
 800536e:	d053      	beq.n	8005418 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2b03      	cmp	r3, #3
 8005374:	d86f      	bhi.n	8005456 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d003      	beq.n	8005384 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d02b      	beq.n	80053da <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8005382:	e068      	b.n	8005456 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005384:	4b93      	ldr	r3, [pc, #588]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	08db      	lsrs	r3, r3, #3
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	4a92      	ldr	r2, [pc, #584]	; (80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005390:	fa22 f303 	lsr.w	r3, r2, r3
 8005394:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	ee07 3a90 	vmov	s15, r3
 800539c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	ee07 3a90 	vmov	s15, r3
 80053b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b8:	ed97 6a04 	vldr	s12, [r7, #16]
 80053bc:	eddf 5a87 	vldr	s11, [pc, #540]	; 80055dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80053c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80053d8:	e068      	b.n	80054ac <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	ee07 3a90 	vmov	s15, r3
 80053e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80055e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80053e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80053fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80055dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80053fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800540a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800540e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005412:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005416:	e049      	b.n	80054ac <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	ee07 3a90 	vmov	s15, r3
 800541e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005422:	eddf 6a70 	vldr	s13, [pc, #448]	; 80055e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	ee07 3a90 	vmov	s15, r3
 8005430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005434:	ed97 6a04 	vldr	s12, [r7, #16]
 8005438:	eddf 5a68 	vldr	s11, [pc, #416]	; 80055dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800543c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005440:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005444:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005448:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800544c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005450:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005454:	e02a      	b.n	80054ac <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005456:	4b5f      	ldr	r3, [pc, #380]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	08db      	lsrs	r3, r3, #3
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	4a5d      	ldr	r2, [pc, #372]	; (80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005462:	fa22 f303 	lsr.w	r3, r2, r3
 8005466:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	ee07 3a90 	vmov	s15, r3
 8005478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548a:	ed97 6a04 	vldr	s12, [r7, #16]
 800548e:	eddf 5a53 	vldr	s11, [pc, #332]	; 80055dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800549e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80054aa:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054ac:	4b49      	ldr	r3, [pc, #292]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054b8:	d121      	bne.n	80054fe <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80054ba:	4b46      	ldr	r3, [pc, #280]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d017      	beq.n	80054f6 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80054c6:	4b43      	ldr	r3, [pc, #268]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80054c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ca:	0a5b      	lsrs	r3, r3, #9
 80054cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80054d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054dc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80054e0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80054e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ec:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	e006      	b.n	8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	e002      	b.n	8005504 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005504:	4b33      	ldr	r3, [pc, #204]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800550c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005510:	d121      	bne.n	8005556 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005512:	4b30      	ldr	r3, [pc, #192]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d017      	beq.n	800554e <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800551e:	4b2d      	ldr	r3, [pc, #180]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005522:	0c1b      	lsrs	r3, r3, #16
 8005524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005528:	ee07 3a90 	vmov	s15, r3
 800552c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005534:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005538:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800553c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005544:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	605a      	str	r2, [r3, #4]
 800554c:	e006      	b.n	800555c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	e002      	b.n	800555c <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800555c:	4b1d      	ldr	r3, [pc, #116]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005568:	d121      	bne.n	80055ae <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800556a:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d017      	beq.n	80055a6 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005576:	4b17      	ldr	r3, [pc, #92]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557a:	0e1b      	lsrs	r3, r3, #24
 800557c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005580:	ee07 3a90 	vmov	s15, r3
 8005584:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800558c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005590:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800559c:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80055a4:	e010      	b.n	80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	609a      	str	r2, [r3, #8]
}
 80055ac:	e00c      	b.n	80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	e008      	b.n	80055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	609a      	str	r2, [r3, #8]
}
 80055c8:	bf00      	nop
 80055ca:	372c      	adds	r7, #44	; 0x2c
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	44020c00 	.word	0x44020c00
 80055d8:	03d09000 	.word	0x03d09000
 80055dc:	46000000 	.word	0x46000000
 80055e0:	4a742400 	.word	0x4a742400
 80055e4:	4bbebc20 	.word	0x4bbebc20

080055e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80055e8:	b590      	push	{r4, r7, lr}
 80055ea:	b08f      	sub	sp, #60	; 0x3c
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80055f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055f6:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 80055fa:	4321      	orrs	r1, r4
 80055fc:	d150      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80055fe:	4b26      	ldr	r3, [pc, #152]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005608:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800560a:	4b23      	ldr	r3, [pc, #140]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800560c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b02      	cmp	r3, #2
 8005616:	d108      	bne.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561e:	d104      	bne.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
 8005626:	f002 bb2a 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800562a:	4b1b      	ldr	r3, [pc, #108]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800562c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005638:	d108      	bne.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005640:	d104      	bne.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005642:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005646:	637b      	str	r3, [r7, #52]	; 0x34
 8005648:	f002 bb19 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800564c:	4b12      	ldr	r3, [pc, #72]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005654:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005658:	d119      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800565a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005660:	d115      	bne.n	800568e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005662:	4b0d      	ldr	r3, [pc, #52]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800566a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800566e:	d30a      	bcc.n	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005670:	4b09      	ldr	r3, [pc, #36]	; (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	0a1b      	lsrs	r3, r3, #8
 8005676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800567a:	4a08      	ldr	r2, [pc, #32]	; (800569c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800567c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005682:	f002 bafc 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800568a:	f002 baf8 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	637b      	str	r3, [r7, #52]	; 0x34
 8005692:	f002 baf4 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005696:	bf00      	nop
 8005698:	44020c00 	.word	0x44020c00
 800569c:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80056a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056a4:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80056a8:	ea50 0104 	orrs.w	r1, r0, r4
 80056ac:	f001 8275 	beq.w	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80056b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056b4:	2801      	cmp	r0, #1
 80056b6:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 80056ba:	f082 82dd 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056c2:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 80056c6:	ea50 0104 	orrs.w	r1, r0, r4
 80056ca:	f001 816c 	beq.w	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80056ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056d2:	2801      	cmp	r0, #1
 80056d4:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 80056d8:	f082 82ce 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056e0:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 80056e4:	ea50 0104 	orrs.w	r1, r0, r4
 80056e8:	f001 8602 	beq.w	80072f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80056ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056f0:	2801      	cmp	r0, #1
 80056f2:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 80056f6:	f082 82bf 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80056fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056fe:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8005702:	ea50 0104 	orrs.w	r1, r0, r4
 8005706:	f001 854c 	beq.w	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 800570a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800570e:	2801      	cmp	r0, #1
 8005710:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8005714:	f082 82b0 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800571c:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8005720:	ea50 0104 	orrs.w	r1, r0, r4
 8005724:	f001 849e 	beq.w	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800572c:	2801      	cmp	r0, #1
 800572e:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8005732:	f082 82a1 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800573a:	f1a1 0420 	sub.w	r4, r1, #32
 800573e:	ea50 0104 	orrs.w	r1, r0, r4
 8005742:	f001 83e8 	beq.w	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8005746:	e9d7 0100 	ldrd	r0, r1, [r7]
 800574a:	2801      	cmp	r0, #1
 800574c:	f171 0120 	sbcs.w	r1, r1, #32
 8005750:	f082 8292 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005754:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005758:	f1a1 0410 	sub.w	r4, r1, #16
 800575c:	ea50 0104 	orrs.w	r1, r0, r4
 8005760:	f002 8256 	beq.w	8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005764:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005768:	2801      	cmp	r0, #1
 800576a:	f171 0110 	sbcs.w	r1, r1, #16
 800576e:	f082 8283 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005772:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005776:	f1a1 0408 	sub.w	r4, r1, #8
 800577a:	ea50 0104 	orrs.w	r1, r0, r4
 800577e:	f002 81cc 	beq.w	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8005782:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005786:	2801      	cmp	r0, #1
 8005788:	f171 0108 	sbcs.w	r1, r1, #8
 800578c:	f082 8274 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005794:	1f0c      	subs	r4, r1, #4
 8005796:	ea50 0104 	orrs.w	r1, r0, r4
 800579a:	f001 8648 	beq.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800579e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057a2:	2801      	cmp	r0, #1
 80057a4:	f171 0104 	sbcs.w	r1, r1, #4
 80057a8:	f082 8266 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057b0:	1e8c      	subs	r4, r1, #2
 80057b2:	ea50 0104 	orrs.w	r1, r0, r4
 80057b6:	f002 8143 	beq.w	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80057ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057be:	2801      	cmp	r0, #1
 80057c0:	f171 0102 	sbcs.w	r1, r1, #2
 80057c4:	f082 8258 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057cc:	1e4c      	subs	r4, r1, #1
 80057ce:	ea50 0104 	orrs.w	r1, r0, r4
 80057d2:	f002 80ce 	beq.w	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80057d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057da:	2801      	cmp	r0, #1
 80057dc:	f171 0101 	sbcs.w	r1, r1, #1
 80057e0:	f082 824a 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80057e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057e8:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 80057ec:	4321      	orrs	r1, r4
 80057ee:	f002 8059 	beq.w	80078a4 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80057f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057f6:	4cd9      	ldr	r4, [pc, #868]	; (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80057f8:	42a0      	cmp	r0, r4
 80057fa:	f171 0100 	sbcs.w	r1, r1, #0
 80057fe:	f082 823b 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005802:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005806:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 800580a:	4321      	orrs	r1, r4
 800580c:	f001 87d9 	beq.w	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005810:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005814:	4cd2      	ldr	r4, [pc, #840]	; (8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005816:	42a0      	cmp	r0, r4
 8005818:	f171 0100 	sbcs.w	r1, r1, #0
 800581c:	f082 822c 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005820:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005824:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8005828:	4321      	orrs	r1, r4
 800582a:	f001 8751 	beq.w	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800582e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005832:	4ccc      	ldr	r4, [pc, #816]	; (8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005834:	42a0      	cmp	r0, r4
 8005836:	f171 0100 	sbcs.w	r1, r1, #0
 800583a:	f082 821d 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800583e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005842:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8005846:	4321      	orrs	r1, r4
 8005848:	f001 869a 	beq.w	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 800584c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005850:	4cc5      	ldr	r4, [pc, #788]	; (8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005852:	42a0      	cmp	r0, r4
 8005854:	f171 0100 	sbcs.w	r1, r1, #0
 8005858:	f082 820e 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800585c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005860:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8005864:	4321      	orrs	r1, r4
 8005866:	f001 8612 	beq.w	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 800586a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800586e:	4cbf      	ldr	r4, [pc, #764]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005870:	42a0      	cmp	r0, r4
 8005872:	f171 0100 	sbcs.w	r1, r1, #0
 8005876:	f082 81ff 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800587a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800587e:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8005882:	4321      	orrs	r1, r4
 8005884:	f002 817e 	beq.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005888:	e9d7 0100 	ldrd	r0, r1, [r7]
 800588c:	4cb8      	ldr	r4, [pc, #736]	; (8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800588e:	42a0      	cmp	r0, r4
 8005890:	f171 0100 	sbcs.w	r1, r1, #0
 8005894:	f082 81f0 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800589c:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 80058a0:	4321      	orrs	r1, r4
 80058a2:	f000 829e 	beq.w	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80058a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058aa:	4cb2      	ldr	r4, [pc, #712]	; (8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80058ac:	42a0      	cmp	r0, r4
 80058ae:	f171 0100 	sbcs.w	r1, r1, #0
 80058b2:	f082 81e1 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058ba:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 80058be:	4321      	orrs	r1, r4
 80058c0:	f000 826d 	beq.w	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80058c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058c8:	4cab      	ldr	r4, [pc, #684]	; (8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80058ca:	42a0      	cmp	r0, r4
 80058cc:	f171 0100 	sbcs.w	r1, r1, #0
 80058d0:	f082 81d2 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058d8:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 80058dc:	4321      	orrs	r1, r4
 80058de:	f001 800d 	beq.w	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80058e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058e6:	4ca5      	ldr	r4, [pc, #660]	; (8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80058e8:	42a0      	cmp	r0, r4
 80058ea:	f171 0100 	sbcs.w	r1, r1, #0
 80058ee:	f082 81c3 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80058f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058f6:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 80058fa:	4321      	orrs	r1, r4
 80058fc:	f000 81d0 	beq.w	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005900:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005904:	4c9e      	ldr	r4, [pc, #632]	; (8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005906:	42a0      	cmp	r0, r4
 8005908:	f171 0100 	sbcs.w	r1, r1, #0
 800590c:	f082 81b4 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005914:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8005918:	4321      	orrs	r1, r4
 800591a:	f000 8142 	beq.w	8005ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800591e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005922:	4c98      	ldr	r4, [pc, #608]	; (8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005924:	42a0      	cmp	r0, r4
 8005926:	f171 0100 	sbcs.w	r1, r1, #0
 800592a:	f082 81a5 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800592e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005932:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8005936:	4321      	orrs	r1, r4
 8005938:	f001 824e 	beq.w	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 800593c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005940:	4c91      	ldr	r4, [pc, #580]	; (8005b88 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005942:	42a0      	cmp	r0, r4
 8005944:	f171 0100 	sbcs.w	r1, r1, #0
 8005948:	f082 8196 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800594c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005950:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8005954:	4321      	orrs	r1, r4
 8005956:	f001 8197 	beq.w	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 800595a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800595e:	4c8b      	ldr	r4, [pc, #556]	; (8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005960:	42a0      	cmp	r0, r4
 8005962:	f171 0100 	sbcs.w	r1, r1, #0
 8005966:	f082 8187 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800596a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800596e:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8005972:	4321      	orrs	r1, r4
 8005974:	f001 8154 	beq.w	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800597c:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8005980:	f171 0100 	sbcs.w	r1, r1, #0
 8005984:	f082 8178 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800598c:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8005990:	4321      	orrs	r1, r4
 8005992:	f001 80b7 	beq.w	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005996:	e9d7 0100 	ldrd	r0, r1, [r7]
 800599a:	f248 0401 	movw	r4, #32769	; 0x8001
 800599e:	42a0      	cmp	r0, r4
 80059a0:	f171 0100 	sbcs.w	r1, r1, #0
 80059a4:	f082 8168 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ac:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 80059b0:	4321      	orrs	r1, r4
 80059b2:	f001 8064 	beq.w	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80059b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ba:	f244 0401 	movw	r4, #16385	; 0x4001
 80059be:	42a0      	cmp	r0, r4
 80059c0:	f171 0100 	sbcs.w	r1, r1, #0
 80059c4:	f082 8158 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059cc:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 80059d0:	4321      	orrs	r1, r4
 80059d2:	f001 8011 	beq.w	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80059d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059da:	f242 0401 	movw	r4, #8193	; 0x2001
 80059de:	42a0      	cmp	r0, r4
 80059e0:	f171 0100 	sbcs.w	r1, r1, #0
 80059e4:	f082 8148 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ec:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 80059f0:	4321      	orrs	r1, r4
 80059f2:	f000 871e 	beq.w	8006832 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80059f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059fa:	f241 0401 	movw	r4, #4097	; 0x1001
 80059fe:	42a0      	cmp	r0, r4
 8005a00:	f171 0100 	sbcs.w	r1, r1, #0
 8005a04:	f082 8138 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a0c:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8005a10:	4321      	orrs	r1, r4
 8005a12:	f000 86a8 	beq.w	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8005a16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a1a:	f640 0401 	movw	r4, #2049	; 0x801
 8005a1e:	42a0      	cmp	r0, r4
 8005a20:	f171 0100 	sbcs.w	r1, r1, #0
 8005a24:	f082 8128 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a2c:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8005a30:	4321      	orrs	r1, r4
 8005a32:	f000 8632 	beq.w	800669a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8005a36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a3a:	f240 4401 	movw	r4, #1025	; 0x401
 8005a3e:	42a0      	cmp	r0, r4
 8005a40:	f171 0100 	sbcs.w	r1, r1, #0
 8005a44:	f082 8118 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a4c:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8005a50:	4321      	orrs	r1, r4
 8005a52:	f000 85b0 	beq.w	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8005a56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a5a:	f240 2401 	movw	r4, #513	; 0x201
 8005a5e:	42a0      	cmp	r0, r4
 8005a60:	f171 0100 	sbcs.w	r1, r1, #0
 8005a64:	f082 8108 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a6c:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8005a70:	4321      	orrs	r1, r4
 8005a72:	f000 8535 	beq.w	80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005a76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a7a:	f240 1401 	movw	r4, #257	; 0x101
 8005a7e:	42a0      	cmp	r0, r4
 8005a80:	f171 0100 	sbcs.w	r1, r1, #0
 8005a84:	f082 80f8 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a8c:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8005a90:	4321      	orrs	r1, r4
 8005a92:	f000 84ba 	beq.w	800640a <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8005a96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a9a:	2881      	cmp	r0, #129	; 0x81
 8005a9c:	f171 0100 	sbcs.w	r1, r1, #0
 8005aa0:	f082 80ea 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aa8:	2821      	cmp	r0, #33	; 0x21
 8005aaa:	f171 0100 	sbcs.w	r1, r1, #0
 8005aae:	d26f      	bcs.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005ab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ab4:	4301      	orrs	r1, r0
 8005ab6:	f002 80df 	beq.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005aba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005abe:	1e42      	subs	r2, r0, #1
 8005ac0:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8005ac4:	2a20      	cmp	r2, #32
 8005ac6:	f173 0100 	sbcs.w	r1, r3, #0
 8005aca:	f082 80d5 	bcs.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ace:	2a1f      	cmp	r2, #31
 8005ad0:	f202 80d2 	bhi.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ad4:	a101      	add	r1, pc, #4	; (adr r1, 8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005ad6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005e3d 	.word	0x08005e3d
 8005ae0:	08005f09 	.word	0x08005f09
 8005ae4:	08007c79 	.word	0x08007c79
 8005ae8:	08005fc9 	.word	0x08005fc9
 8005aec:	08007c79 	.word	0x08007c79
 8005af0:	08007c79 	.word	0x08007c79
 8005af4:	08007c79 	.word	0x08007c79
 8005af8:	08006099 	.word	0x08006099
 8005afc:	08007c79 	.word	0x08007c79
 8005b00:	08007c79 	.word	0x08007c79
 8005b04:	08007c79 	.word	0x08007c79
 8005b08:	08007c79 	.word	0x08007c79
 8005b0c:	08007c79 	.word	0x08007c79
 8005b10:	08007c79 	.word	0x08007c79
 8005b14:	08007c79 	.word	0x08007c79
 8005b18:	0800617b 	.word	0x0800617b
 8005b1c:	08007c79 	.word	0x08007c79
 8005b20:	08007c79 	.word	0x08007c79
 8005b24:	08007c79 	.word	0x08007c79
 8005b28:	08007c79 	.word	0x08007c79
 8005b2c:	08007c79 	.word	0x08007c79
 8005b30:	08007c79 	.word	0x08007c79
 8005b34:	08007c79 	.word	0x08007c79
 8005b38:	08007c79 	.word	0x08007c79
 8005b3c:	08007c79 	.word	0x08007c79
 8005b40:	08007c79 	.word	0x08007c79
 8005b44:	08007c79 	.word	0x08007c79
 8005b48:	08007c79 	.word	0x08007c79
 8005b4c:	08007c79 	.word	0x08007c79
 8005b50:	08007c79 	.word	0x08007c79
 8005b54:	08007c79 	.word	0x08007c79
 8005b58:	08006251 	.word	0x08006251
 8005b5c:	80000001 	.word	0x80000001
 8005b60:	40000001 	.word	0x40000001
 8005b64:	20000001 	.word	0x20000001
 8005b68:	10000001 	.word	0x10000001
 8005b6c:	08000001 	.word	0x08000001
 8005b70:	04000001 	.word	0x04000001
 8005b74:	00800001 	.word	0x00800001
 8005b78:	00400001 	.word	0x00400001
 8005b7c:	00200001 	.word	0x00200001
 8005b80:	00100001 	.word	0x00100001
 8005b84:	00080001 	.word	0x00080001
 8005b88:	00040001 	.word	0x00040001
 8005b8c:	00020001 	.word	0x00020001
 8005b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b94:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	f000 83c4 	beq.w	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005b9e:	f002 b86b 	b.w	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005ba2:	4ba1      	ldr	r3, [pc, #644]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ba8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005bac:	633b      	str	r3, [r7, #48]	; 0x30
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bb4:	d036      	beq.n	8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bbc:	d86b      	bhi.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bc4:	d02b      	beq.n	8005c1e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bcc:	d863      	bhi.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bd4:	d01b      	beq.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bdc:	d85b      	bhi.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d004      	beq.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bea:	d008      	beq.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8005bec:	e053      	b.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bee:	f107 0320 	add.w	r3, r7, #32
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7ff f8ba 	bl	8004d6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005bfc:	e04e      	b.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bfe:	f107 0314 	add.w	r3, r7, #20
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff fa1c 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c0c:	e046      	b.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c0e:	f107 0308 	add.w	r3, r7, #8
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7ff fb7e 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c1c:	e03e      	b.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005c1e:	4b83      	ldr	r3, [pc, #524]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005c20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c22:	e03b      	b.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c24:	4b80      	ldr	r3, [pc, #512]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c2a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005c2e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c30:	4b7d      	ldr	r3, [pc, #500]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d10c      	bne.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c42:	4b79      	ldr	r3, [pc, #484]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	08db      	lsrs	r3, r3, #3
 8005c48:	f003 0303 	and.w	r3, r3, #3
 8005c4c:	4a78      	ldr	r2, [pc, #480]	; (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c52:	637b      	str	r3, [r7, #52]	; 0x34
 8005c54:	e01e      	b.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c56:	4b74      	ldr	r3, [pc, #464]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c62:	d106      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6a:	d102      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005c6c:	4b71      	ldr	r3, [pc, #452]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c70:	e010      	b.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c72:	4b6d      	ldr	r3, [pc, #436]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c7e:	d106      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c86:	d102      	bne.n	8005c8e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005c88:	4b6b      	ldr	r3, [pc, #428]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c8c:	e002      	b.n	8005c94 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005c92:	e003      	b.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005c94:	e002      	b.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005c9a:	bf00      	nop
          }
        }
        break;
 8005c9c:	f001 bfef 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005ca0:	4b61      	ldr	r3, [pc, #388]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ca2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ca6:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005caa:	633b      	str	r3, [r7, #48]	; 0x30
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cb2:	d036      	beq.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8005cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cba:	d86b      	bhi.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005cc2:	d02b      	beq.n	8005d1c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005cca:	d863      	bhi.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cd2:	d01b      	beq.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cda:	d85b      	bhi.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d004      	beq.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ce8:	d008      	beq.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8005cea:	e053      	b.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cec:	f107 0320 	add.w	r3, r7, #32
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff f83b 	bl	8004d6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005cfa:	e04e      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cfc:	f107 0314 	add.w	r3, r7, #20
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff f99d 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d0a:	e046      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d0c:	f107 0308 	add.w	r3, r7, #8
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7ff faff 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d1a:	e03e      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005d1c:	4b43      	ldr	r3, [pc, #268]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005d1e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d20:	e03b      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d22:	4b41      	ldr	r3, [pc, #260]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d28:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d2e:	4b3e      	ldr	r3, [pc, #248]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d10c      	bne.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d40:	4b39      	ldr	r3, [pc, #228]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	08db      	lsrs	r3, r3, #3
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	4a39      	ldr	r2, [pc, #228]	; (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d50:	637b      	str	r3, [r7, #52]	; 0x34
 8005d52:	e01e      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d54:	4b34      	ldr	r3, [pc, #208]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d60:	d106      	bne.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d68:	d102      	bne.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005d6a:	4b32      	ldr	r3, [pc, #200]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d6e:	e010      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d70:	4b2d      	ldr	r3, [pc, #180]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d7c:	d106      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d84:	d102      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005d86:	4b2c      	ldr	r3, [pc, #176]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005d88:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8a:	e002      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005d90:	e003      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8005d92:	e002      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d98:	bf00      	nop
          }
        }
        break;
 8005d9a:	f001 bf70 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8005d9e:	4b22      	ldr	r3, [pc, #136]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005da0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8005daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d108      	bne.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005db0:	f107 0320 	add.w	r3, r7, #32
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7fe ffd9 	bl	8004d6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005dbe:	f001 bf5e 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	2b40      	cmp	r3, #64	; 0x40
 8005dc6:	d108      	bne.n	8005dda <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dc8:	f107 0314 	add.w	r3, r7, #20
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7ff f937 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dd6:	f001 bf52 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dde:	f001 bf4e 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8005de2:	4b11      	ldr	r3, [pc, #68]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005de4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dec:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d108      	bne.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005df4:	f107 0320 	add.w	r3, r7, #32
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe ffb7 	bl	8004d6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e00:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e02:	f001 bf3c 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	2b80      	cmp	r3, #128	; 0x80
 8005e0a:	d108      	bne.n	8005e1e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e0c:	f107 0314 	add.w	r3, r7, #20
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7ff f915 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e1a:	f001 bf30 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e22:	f001 bf2c 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005e26:	bf00      	nop
 8005e28:	44020c00 	.word	0x44020c00
 8005e2c:	00bb8000 	.word	0x00bb8000
 8005e30:	03d09000 	.word	0x03d09000
 8005e34:	003d0900 	.word	0x003d0900
 8005e38:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005e3c:	4b9d      	ldr	r3, [pc, #628]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d104      	bne.n	8005e58 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005e4e:	f7fc ffd7 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8005e52:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005e54:	f001 bf13 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8005e58:	4b96      	ldr	r3, [pc, #600]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e64:	d10a      	bne.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d107      	bne.n	8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e6c:	f107 0314 	add.w	r3, r7, #20
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff f8e5 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	637b      	str	r3, [r7, #52]	; 0x34
 8005e7a:	e043      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005e7c:	4b8d      	ldr	r3, [pc, #564]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e88:	d10a      	bne.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d107      	bne.n	8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e90:	f107 0308 	add.w	r3, r7, #8
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7ff fa3d 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e9e:	e031      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005ea0:	4b84      	ldr	r3, [pc, #528]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d10c      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d109      	bne.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005eb2:	4b80      	ldr	r3, [pc, #512]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	08db      	lsrs	r3, r3, #3
 8005eb8:	f003 0303 	and.w	r3, r3, #3
 8005ebc:	4a7e      	ldr	r2, [pc, #504]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec4:	e01e      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005ec6:	4b7b      	ldr	r3, [pc, #492]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed2:	d105      	bne.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d102      	bne.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8005eda:	4b78      	ldr	r3, [pc, #480]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ede:	e011      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005ee0:	4b74      	ldr	r3, [pc, #464]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005ee2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d106      	bne.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	2b05      	cmp	r3, #5
 8005ef2:	d103      	bne.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8005ef4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef8:	637b      	str	r3, [r7, #52]	; 0x34
 8005efa:	e003      	b.n	8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f00:	f001 bebd 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005f04:	f001 bebb 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005f08:	4b6a      	ldr	r3, [pc, #424]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005f0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005f0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f12:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d104      	bne.n	8005f24 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005f1a:	f7fc ff5b 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8005f1e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005f20:	f001 bead 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005f24:	4b63      	ldr	r3, [pc, #396]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f30:	d10a      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d107      	bne.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f38:	f107 0314 	add.w	r3, r7, #20
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff f87f 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
 8005f46:	e03d      	b.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	2b10      	cmp	r3, #16
 8005f4c:	d108      	bne.n	8005f60 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f4e:	f107 0308 	add.w	r3, r7, #8
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff f9de 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005f5c:	f001 be8f 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005f60:	4b54      	ldr	r3, [pc, #336]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d10c      	bne.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	2b18      	cmp	r3, #24
 8005f70:	d109      	bne.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f72:	4b50      	ldr	r3, [pc, #320]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	08db      	lsrs	r3, r3, #3
 8005f78:	f003 0303 	and.w	r3, r3, #3
 8005f7c:	4a4e      	ldr	r2, [pc, #312]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f82:	637b      	str	r3, [r7, #52]	; 0x34
 8005f84:	e01e      	b.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8005f86:	4b4b      	ldr	r3, [pc, #300]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f92:	d105      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d102      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8005f9a:	4b48      	ldr	r3, [pc, #288]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f9e:	e011      	b.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005fa0:	4b44      	ldr	r3, [pc, #272]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005fa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d106      	bne.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	2b28      	cmp	r3, #40	; 0x28
 8005fb2:	d103      	bne.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8005fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005fba:	e003      	b.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fc0:	f001 be5d 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005fc4:	f001 be5b 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005fc8:	4b3a      	ldr	r3, [pc, #232]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005fca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005fce:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005fd2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d104      	bne.n	8005fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005fda:	f7fc fefb 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8005fde:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005fe0:	f001 be4d 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005fe4:	4b33      	ldr	r3, [pc, #204]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ff0:	d10a      	bne.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	2b40      	cmp	r3, #64	; 0x40
 8005ff6:	d107      	bne.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ff8:	f107 0314 	add.w	r3, r7, #20
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff f81f 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006002:	69bb      	ldr	r3, [r7, #24]
 8006004:	637b      	str	r3, [r7, #52]	; 0x34
 8006006:	e045      	b.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006008:	4b2a      	ldr	r3, [pc, #168]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006014:	d10a      	bne.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	2b80      	cmp	r3, #128	; 0x80
 800601a:	d107      	bne.n	800602c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800601c:	f107 0308 	add.w	r3, r7, #8
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff f977 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
 800602a:	e033      	b.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800602c:	4b21      	ldr	r3, [pc, #132]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b02      	cmp	r3, #2
 8006036:	d10c      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	2bc0      	cmp	r3, #192	; 0xc0
 800603c:	d109      	bne.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800603e:	4b1d      	ldr	r3, [pc, #116]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	08db      	lsrs	r3, r3, #3
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	4a1b      	ldr	r2, [pc, #108]	; (80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800604a:	fa22 f303 	lsr.w	r3, r2, r3
 800604e:	637b      	str	r3, [r7, #52]	; 0x34
 8006050:	e020      	b.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006052:	4b18      	ldr	r3, [pc, #96]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800605a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800605e:	d106      	bne.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006066:	d102      	bne.n	800606e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8006068:	4b14      	ldr	r3, [pc, #80]	; (80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
 800606c:	e012      	b.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800606e:	4b11      	ldr	r3, [pc, #68]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	2b02      	cmp	r3, #2
 800607a:	d107      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006082:	d103      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8006084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006088:	637b      	str	r3, [r7, #52]	; 0x34
 800608a:	e003      	b.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006090:	f001 bdf5 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006094:	f001 bdf3 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800609a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800609e:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80060a2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10a      	bne.n	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80060aa:	f7fc fe93 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 80060ae:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80060b0:	f001 bde5 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80060b4:	44020c00 	.word	0x44020c00
 80060b8:	03d09000 	.word	0x03d09000
 80060bc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80060c0:	4ba0      	ldr	r3, [pc, #640]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060cc:	d10b      	bne.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d4:	d107      	bne.n	80060e6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060d6:	f107 0314 	add.w	r3, r7, #20
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe ffb0 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	637b      	str	r3, [r7, #52]	; 0x34
 80060e4:	e047      	b.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80060e6:	4b97      	ldr	r3, [pc, #604]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060f2:	d10b      	bne.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060fa:	d107      	bne.n	800610c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060fc:	f107 0308 	add.w	r3, r7, #8
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff f907 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	637b      	str	r3, [r7, #52]	; 0x34
 800610a:	e034      	b.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800610c:	4b8d      	ldr	r3, [pc, #564]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b02      	cmp	r3, #2
 8006116:	d10d      	bne.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800611e:	d109      	bne.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006120:	4b88      	ldr	r3, [pc, #544]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	08db      	lsrs	r3, r3, #3
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	4a87      	ldr	r2, [pc, #540]	; (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800612c:	fa22 f303 	lsr.w	r3, r2, r3
 8006130:	637b      	str	r3, [r7, #52]	; 0x34
 8006132:	e020      	b.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006134:	4b83      	ldr	r3, [pc, #524]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800613c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006140:	d106      	bne.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006148:	d102      	bne.n	8006150 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800614a:	4b80      	ldr	r3, [pc, #512]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800614c:	637b      	str	r3, [r7, #52]	; 0x34
 800614e:	e012      	b.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006150:	4b7c      	ldr	r3, [pc, #496]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b02      	cmp	r3, #2
 800615c:	d107      	bne.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800615e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006160:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006164:	d103      	bne.n	800616e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8006166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800616a:	637b      	str	r3, [r7, #52]	; 0x34
 800616c:	e003      	b.n	8006176 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800616e:	2300      	movs	r3, #0
 8006170:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006172:	f001 bd84 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006176:	f001 bd82 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800617a:	4b72      	ldr	r3, [pc, #456]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800617c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006180:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006184:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	2b00      	cmp	r3, #0
 800618a:	d104      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800618c:	f7fc fe22 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8006190:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006192:	f001 bd74 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8006196:	4b6b      	ldr	r3, [pc, #428]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800619e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061a2:	d10b      	bne.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061aa:	d107      	bne.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061ac:	f107 0314 	add.w	r3, r7, #20
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fe ff45 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	637b      	str	r3, [r7, #52]	; 0x34
 80061ba:	e047      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80061bc:	4b61      	ldr	r3, [pc, #388]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061c8:	d10b      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80061ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061d0:	d107      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061d2:	f107 0308 	add.w	r3, r7, #8
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff f89c 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
 80061e0:	e034      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80061e2:	4b58      	ldr	r3, [pc, #352]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d10d      	bne.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80061ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80061f4:	d109      	bne.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061f6:	4b53      	ldr	r3, [pc, #332]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	08db      	lsrs	r3, r3, #3
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	4a51      	ldr	r2, [pc, #324]	; (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006202:	fa22 f303 	lsr.w	r3, r2, r3
 8006206:	637b      	str	r3, [r7, #52]	; 0x34
 8006208:	e020      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800620a:	4b4e      	ldr	r3, [pc, #312]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006216:	d106      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800621e:	d102      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8006220:	4b4a      	ldr	r3, [pc, #296]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006222:	637b      	str	r3, [r7, #52]	; 0x34
 8006224:	e012      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006226:	4b47      	ldr	r3, [pc, #284]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006228:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b02      	cmp	r3, #2
 8006232:	d107      	bne.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800623a:	d103      	bne.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800623c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006240:	637b      	str	r3, [r7, #52]	; 0x34
 8006242:	e003      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006248:	f001 bd19 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800624c:	f001 bd17 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006250:	4b3c      	ldr	r3, [pc, #240]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006252:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006256:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800625a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	2b00      	cmp	r3, #0
 8006260:	d104      	bne.n	800626c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006262:	f7fc fdb7 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8006266:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006268:	f001 bd09 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800626c:	4b35      	ldr	r3, [pc, #212]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006278:	d10b      	bne.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006280:	d107      	bne.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006282:	f107 0314 	add.w	r3, r7, #20
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe feda 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	637b      	str	r3, [r7, #52]	; 0x34
 8006290:	e047      	b.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8006292:	4b2c      	ldr	r3, [pc, #176]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800629a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800629e:	d10b      	bne.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062a6:	d107      	bne.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062a8:	f107 0308 	add.w	r3, r7, #8
 80062ac:	4618      	mov	r0, r3
 80062ae:	f7ff f831 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	637b      	str	r3, [r7, #52]	; 0x34
 80062b6:	e034      	b.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80062b8:	4b22      	ldr	r3, [pc, #136]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d10d      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80062ca:	d109      	bne.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062cc:	4b1d      	ldr	r3, [pc, #116]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	08db      	lsrs	r3, r3, #3
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80062d8:	fa22 f303 	lsr.w	r3, r2, r3
 80062dc:	637b      	str	r3, [r7, #52]	; 0x34
 80062de:	e020      	b.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80062e0:	4b18      	ldr	r3, [pc, #96]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ec:	d106      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062f4:	d102      	bne.n	80062fc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80062f6:	4b15      	ldr	r3, [pc, #84]	; (800634c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
 80062fa:	e012      	b.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80062fc:	4b11      	ldr	r3, [pc, #68]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80062fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b02      	cmp	r3, #2
 8006308:	d107      	bne.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006310:	d103      	bne.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8006312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006316:	637b      	str	r3, [r7, #52]	; 0x34
 8006318:	e003      	b.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800631e:	f001 bcae 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006322:	f001 bcac 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8006326:	4b07      	ldr	r3, [pc, #28]	; (8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006328:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800632c:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8006330:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10b      	bne.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006338:	f7fc fd4c 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 800633c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800633e:	f001 bc9e 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006342:	bf00      	nop
 8006344:	44020c00 	.word	0x44020c00
 8006348:	03d09000 	.word	0x03d09000
 800634c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8006350:	4ba0      	ldr	r3, [pc, #640]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800635c:	d10b      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800635e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006360:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006364:	d107      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006366:	f107 0314 	add.w	r3, r7, #20
 800636a:	4618      	mov	r0, r3
 800636c:	f7fe fe68 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	637b      	str	r3, [r7, #52]	; 0x34
 8006374:	e047      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8006376:	4b97      	ldr	r3, [pc, #604]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800637e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006382:	d10b      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800638a:	d107      	bne.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800638c:	f107 0308 	add.w	r3, r7, #8
 8006390:	4618      	mov	r0, r3
 8006392:	f7fe ffbf 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
 800639a:	e034      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800639c:	4b8d      	ldr	r3, [pc, #564]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d10d      	bne.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80063ae:	d109      	bne.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063b0:	4b88      	ldr	r3, [pc, #544]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	08db      	lsrs	r3, r3, #3
 80063b6:	f003 0303 	and.w	r3, r3, #3
 80063ba:	4a87      	ldr	r2, [pc, #540]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80063bc:	fa22 f303 	lsr.w	r3, r2, r3
 80063c0:	637b      	str	r3, [r7, #52]	; 0x34
 80063c2:	e020      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80063c4:	4b83      	ldr	r3, [pc, #524]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d0:	d106      	bne.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063d8:	d102      	bne.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80063da:	4b80      	ldr	r3, [pc, #512]	; (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
 80063de:	e012      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80063e0:	4b7c      	ldr	r3, [pc, #496]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80063e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d107      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80063ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80063f4:	d103      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80063f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063fa:	637b      	str	r3, [r7, #52]	; 0x34
 80063fc:	e003      	b.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006402:	f001 bc3c 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006406:	f001 bc3a 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800640a:	4b72      	ldr	r3, [pc, #456]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800640c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006410:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006414:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	2b00      	cmp	r3, #0
 800641a:	d104      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800641c:	f7fc fcda 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8006420:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8006422:	f001 bc2c 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8006426:	4b6b      	ldr	r3, [pc, #428]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800642e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006432:	d10b      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800643a:	d107      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800643c:	f107 0314 	add.w	r3, r7, #20
 8006440:	4618      	mov	r0, r3
 8006442:	f7fe fdfd 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
 800644a:	e047      	b.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800644c:	4b61      	ldr	r3, [pc, #388]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006458:	d10b      	bne.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006460:	d107      	bne.n	8006472 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006462:	f107 0308 	add.w	r3, r7, #8
 8006466:	4618      	mov	r0, r3
 8006468:	f7fe ff54 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	637b      	str	r3, [r7, #52]	; 0x34
 8006470:	e034      	b.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8006472:	4b58      	ldr	r3, [pc, #352]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b02      	cmp	r3, #2
 800647c:	d10d      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006484:	d109      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006486:	4b53      	ldr	r3, [pc, #332]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	08db      	lsrs	r3, r3, #3
 800648c:	f003 0303 	and.w	r3, r3, #3
 8006490:	4a51      	ldr	r2, [pc, #324]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006492:	fa22 f303 	lsr.w	r3, r2, r3
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
 8006498:	e020      	b.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800649a:	4b4e      	ldr	r3, [pc, #312]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064a6:	d106      	bne.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064ae:	d102      	bne.n	80064b6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80064b0:	4b4a      	ldr	r3, [pc, #296]	; (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80064b2:	637b      	str	r3, [r7, #52]	; 0x34
 80064b4:	e012      	b.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80064b6:	4b47      	ldr	r3, [pc, #284]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80064b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d107      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80064ca:	d103      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80064cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
 80064d2:	e003      	b.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064d8:	f001 bbd1 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80064dc:	f001 bbcf 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80064e0:	4b3c      	ldr	r3, [pc, #240]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80064e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80064e6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80064ea:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d104      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80064f2:	f7fc fc6f 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 80064f6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80064f8:	f001 bbc1 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80064fc:	4b35      	ldr	r3, [pc, #212]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006508:	d10b      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006510:	d107      	bne.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006512:	f107 0314 	add.w	r3, r7, #20
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fd92 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	637b      	str	r3, [r7, #52]	; 0x34
 8006520:	e047      	b.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8006522:	4b2c      	ldr	r3, [pc, #176]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800652a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800652e:	d10b      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006536:	d107      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006538:	f107 0308 	add.w	r3, r7, #8
 800653c:	4618      	mov	r0, r3
 800653e:	f7fe fee9 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	637b      	str	r3, [r7, #52]	; 0x34
 8006546:	e034      	b.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8006548:	4b22      	ldr	r3, [pc, #136]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b02      	cmp	r3, #2
 8006552:	d10d      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800655a:	d109      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800655c:	4b1d      	ldr	r3, [pc, #116]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	08db      	lsrs	r3, r3, #3
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	4a1c      	ldr	r2, [pc, #112]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006568:	fa22 f303 	lsr.w	r3, r2, r3
 800656c:	637b      	str	r3, [r7, #52]	; 0x34
 800656e:	e020      	b.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8006570:	4b18      	ldr	r3, [pc, #96]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800657c:	d106      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006580:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006584:	d102      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8006586:	4b15      	ldr	r3, [pc, #84]	; (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
 800658a:	e012      	b.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800658c:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800658e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b02      	cmp	r3, #2
 8006598:	d107      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80065a0:	d103      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80065a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a6:	637b      	str	r3, [r7, #52]	; 0x34
 80065a8:	e003      	b.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065ae:	f001 bb66 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80065b2:	f001 bb64 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80065b6:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80065b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80065bc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80065c0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10b      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065c8:	f7fc fc04 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 80065cc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80065ce:	f001 bb56 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80065d2:	bf00      	nop
 80065d4:	44020c00 	.word	0x44020c00
 80065d8:	03d09000 	.word	0x03d09000
 80065dc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80065e0:	4ba1      	ldr	r3, [pc, #644]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ec:	d10b      	bne.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065f4:	d107      	bne.n	8006606 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065f6:	f107 0314 	add.w	r3, r7, #20
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe fd20 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	637b      	str	r3, [r7, #52]	; 0x34
 8006604:	e047      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8006606:	4b98      	ldr	r3, [pc, #608]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800660e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006612:	d10b      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800661a:	d107      	bne.n	800662c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800661c:	f107 0308 	add.w	r3, r7, #8
 8006620:	4618      	mov	r0, r3
 8006622:	f7fe fe77 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
 800662a:	e034      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800662c:	4b8e      	ldr	r3, [pc, #568]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b02      	cmp	r3, #2
 8006636:	d10d      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800663e:	d109      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006640:	4b89      	ldr	r3, [pc, #548]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	08db      	lsrs	r3, r3, #3
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	4a88      	ldr	r2, [pc, #544]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800664c:	fa22 f303 	lsr.w	r3, r2, r3
 8006650:	637b      	str	r3, [r7, #52]	; 0x34
 8006652:	e020      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8006654:	4b84      	ldr	r3, [pc, #528]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800665c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006660:	d106      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8006662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006668:	d102      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800666a:	4b81      	ldr	r3, [pc, #516]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800666c:	637b      	str	r3, [r7, #52]	; 0x34
 800666e:	e012      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8006670:	4b7d      	ldr	r3, [pc, #500]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b02      	cmp	r3, #2
 800667c:	d107      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8006684:	d103      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8006686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800668a:	637b      	str	r3, [r7, #52]	; 0x34
 800668c:	e003      	b.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006692:	f001 baf4 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006696:	f001 baf2 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800669a:	4b73      	ldr	r3, [pc, #460]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800669c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d104      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066ac:	f7fc fb92 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 80066b0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80066b2:	f001 bae4 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80066b6:	4b6c      	ldr	r3, [pc, #432]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066c2:	d10a      	bne.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d107      	bne.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066ca:	f107 0314 	add.w	r3, r7, #20
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fe fcb6 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	637b      	str	r3, [r7, #52]	; 0x34
 80066d8:	e043      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80066da:	4b63      	ldr	r3, [pc, #396]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066e6:	d10a      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80066e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	d107      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066ee:	f107 0308 	add.w	r3, r7, #8
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe fe0e 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	637b      	str	r3, [r7, #52]	; 0x34
 80066fc:	e031      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80066fe:	4b5a      	ldr	r3, [pc, #360]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b02      	cmp	r3, #2
 8006708:	d10c      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	2b03      	cmp	r3, #3
 800670e:	d109      	bne.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006710:	4b55      	ldr	r3, [pc, #340]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	08db      	lsrs	r3, r3, #3
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	4a54      	ldr	r2, [pc, #336]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800671c:	fa22 f303 	lsr.w	r3, r2, r3
 8006720:	637b      	str	r3, [r7, #52]	; 0x34
 8006722:	e01e      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006724:	4b50      	ldr	r3, [pc, #320]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800672c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006730:	d105      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	2b04      	cmp	r3, #4
 8006736:	d102      	bne.n	800673e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8006738:	4b4d      	ldr	r3, [pc, #308]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800673a:	637b      	str	r3, [r7, #52]	; 0x34
 800673c:	e011      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800673e:	4b4a      	ldr	r3, [pc, #296]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b02      	cmp	r3, #2
 800674a:	d106      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674e:	2b05      	cmp	r3, #5
 8006750:	d103      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8006752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006756:	637b      	str	r3, [r7, #52]	; 0x34
 8006758:	e003      	b.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800675e:	f001 ba8e 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006762:	f001 ba8c 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006766:	4b40      	ldr	r3, [pc, #256]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006768:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800676c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006770:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	2b00      	cmp	r3, #0
 8006776:	d104      	bne.n	8006782 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006778:	f7fc fb2c 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 800677c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800677e:	f001 ba7e 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8006782:	4b39      	ldr	r3, [pc, #228]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800678a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800678e:	d10a      	bne.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	2b10      	cmp	r3, #16
 8006794:	d107      	bne.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006796:	f107 0314 	add.w	r3, r7, #20
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fc50 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	637b      	str	r3, [r7, #52]	; 0x34
 80067a4:	e043      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80067a6:	4b30      	ldr	r3, [pc, #192]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b2:	d10a      	bne.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80067b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d107      	bne.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ba:	f107 0308 	add.w	r3, r7, #8
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe fda8 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	637b      	str	r3, [r7, #52]	; 0x34
 80067c8:	e031      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80067ca:	4b27      	ldr	r3, [pc, #156]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d10c      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	2b30      	cmp	r3, #48	; 0x30
 80067da:	d109      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067dc:	4b22      	ldr	r3, [pc, #136]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	08db      	lsrs	r3, r3, #3
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	4a21      	ldr	r2, [pc, #132]	; (800686c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34
 80067ee:	e01e      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80067f0:	4b1d      	ldr	r3, [pc, #116]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067fc:	d105      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d102      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006804:	4b1a      	ldr	r3, [pc, #104]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006806:	637b      	str	r3, [r7, #52]	; 0x34
 8006808:	e011      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800680a:	4b17      	ldr	r3, [pc, #92]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800680c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b02      	cmp	r3, #2
 8006816:	d106      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	2b50      	cmp	r3, #80	; 0x50
 800681c:	d103      	bne.n	8006826 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800681e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006822:	637b      	str	r3, [r7, #52]	; 0x34
 8006824:	e003      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800682a:	f001 ba28 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800682e:	f001 ba26 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006832:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006838:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800683c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	2b00      	cmp	r3, #0
 8006842:	d104      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006844:	f7fc faf2 	bl	8002e2c <HAL_RCC_GetPCLK3Freq>
 8006848:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800684a:	f001 ba18 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006854:	d10e      	bne.n	8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006856:	f107 0314 	add.w	r3, r7, #20
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fbf0 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006864:	f001 ba0b 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006868:	44020c00 	.word	0x44020c00
 800686c:	03d09000 	.word	0x03d09000
 8006870:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800687a:	d108      	bne.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800687c:	f107 0308 	add.w	r3, r7, #8
 8006880:	4618      	mov	r0, r3
 8006882:	f7fe fd47 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800688a:	f001 b9f8 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800688e:	4ba4      	ldr	r3, [pc, #656]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b02      	cmp	r3, #2
 8006898:	d10d      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068a0:	d109      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068a2:	4b9f      	ldr	r3, [pc, #636]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	08db      	lsrs	r3, r3, #3
 80068a8:	f003 0303 	and.w	r3, r3, #3
 80068ac:	4a9d      	ldr	r2, [pc, #628]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80068ae:	fa22 f303 	lsr.w	r3, r2, r3
 80068b2:	637b      	str	r3, [r7, #52]	; 0x34
 80068b4:	e020      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80068b6:	4b9a      	ldr	r3, [pc, #616]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c2:	d106      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068ca:	d102      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80068cc:	4b96      	ldr	r3, [pc, #600]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80068ce:	637b      	str	r3, [r7, #52]	; 0x34
 80068d0:	e012      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80068d2:	4b93      	ldr	r3, [pc, #588]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80068d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d107      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80068e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80068e6:	d103      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80068e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ec:	637b      	str	r3, [r7, #52]	; 0x34
 80068ee:	e003      	b.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068f4:	f001 b9c3 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80068f8:	f001 b9c1 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80068fc:	4b88      	ldr	r3, [pc, #544]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80068fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	2b00      	cmp	r3, #0
 800690c:	d104      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800690e:	f7fc fa45 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8006912:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006914:	f001 b9b3 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	2b01      	cmp	r3, #1
 800691c:	d104      	bne.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800691e:	f7fc f911 	bl	8002b44 <HAL_RCC_GetSysClockFreq>
 8006922:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006924:	f001 b9ab 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	2b02      	cmp	r3, #2
 800692c:	d108      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800692e:	f107 0314 	add.w	r3, r7, #20
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fb84 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800693c:	f001 b99f 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006940:	4b77      	ldr	r3, [pc, #476]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800694c:	d105      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	2b03      	cmp	r3, #3
 8006952:	d102      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006954:	4b75      	ldr	r3, [pc, #468]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8006956:	637b      	str	r3, [r7, #52]	; 0x34
 8006958:	e023      	b.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800695a:	4b71      	ldr	r3, [pc, #452]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b02      	cmp	r3, #2
 8006964:	d10c      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	2b04      	cmp	r3, #4
 800696a:	d109      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800696c:	4b6c      	ldr	r3, [pc, #432]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	08db      	lsrs	r3, r3, #3
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	4a6b      	ldr	r2, [pc, #428]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006978:	fa22 f303 	lsr.w	r3, r2, r3
 800697c:	637b      	str	r3, [r7, #52]	; 0x34
 800697e:	e010      	b.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006980:	4b67      	ldr	r3, [pc, #412]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800698c:	d105      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	2b05      	cmp	r3, #5
 8006992:	d102      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8006994:	4b64      	ldr	r3, [pc, #400]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006996:	637b      	str	r3, [r7, #52]	; 0x34
 8006998:	e003      	b.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800699a:	2300      	movs	r3, #0
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800699e:	f001 b96e 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069a2:	f001 b96c 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80069a6:	4b5e      	ldr	r3, [pc, #376]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80069a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069ac:	f003 0308 	and.w	r3, r3, #8
 80069b0:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80069b2:	4b5b      	ldr	r3, [pc, #364]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80069b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d106      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80069c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80069c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ca:	637b      	str	r3, [r7, #52]	; 0x34
 80069cc:	e012      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80069ce:	4b54      	ldr	r3, [pc, #336]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80069d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069dc:	d106      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80069de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d103      	bne.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80069e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80069e8:	637b      	str	r3, [r7, #52]	; 0x34
 80069ea:	e003      	b.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 80069f0:	f001 b945 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069f4:	f001 b943 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80069f8:	4b49      	ldr	r3, [pc, #292]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80069fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80069fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a02:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d104      	bne.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a0a:	f7fc f9e3 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8006a0e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a10:	f001 b935 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a1a:	d108      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a1c:	f107 0308 	add.w	r3, r7, #8
 8006a20:	4618      	mov	r0, r3
 8006a22:	f7fe fc77 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a2a:	f001 b928 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006a2e:	4b3c      	ldr	r3, [pc, #240]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d10d      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a40:	d109      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a42:	4b37      	ldr	r3, [pc, #220]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	08db      	lsrs	r3, r3, #3
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	4a35      	ldr	r2, [pc, #212]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a52:	637b      	str	r3, [r7, #52]	; 0x34
 8006a54:	e011      	b.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006a56:	4b32      	ldr	r3, [pc, #200]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a62:	d106      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a6a:	d102      	bne.n	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006a6c:	4b2e      	ldr	r3, [pc, #184]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a70:	e003      	b.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a76:	f001 b902 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a7a:	f001 b900 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006a7e:	4b28      	ldr	r3, [pc, #160]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006a80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a84:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006a88:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d104      	bne.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a90:	f7fc f9a0 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8006a94:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a96:	f001 b8f2 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006aa0:	d108      	bne.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aa2:	f107 0308 	add.w	r3, r7, #8
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fe fc34 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ab0:	f001 b8e5 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006ab4:	4b1a      	ldr	r3, [pc, #104]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d10d      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ac6:	d109      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ac8:	4b15      	ldr	r3, [pc, #84]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	08db      	lsrs	r3, r3, #3
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	4a14      	ldr	r2, [pc, #80]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8006ada:	e011      	b.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006adc:	4b10      	ldr	r3, [pc, #64]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ae8:	d106      	bne.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006af0:	d102      	bne.n	8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8006af2:	4b0d      	ldr	r3, [pc, #52]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006af4:	637b      	str	r3, [r7, #52]	; 0x34
 8006af6:	e003      	b.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006afc:	f001 b8bf 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b00:	f001 b8bd 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006b04:	4b06      	ldr	r3, [pc, #24]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b0a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006b0e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10c      	bne.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006b16:	f7fc f989 	bl	8002e2c <HAL_RCC_GetPCLK3Freq>
 8006b1a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b1c:	f001 b8af 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b20:	44020c00 	.word	0x44020c00
 8006b24:	03d09000 	.word	0x03d09000
 8006b28:	003d0900 	.word	0x003d0900
 8006b2c:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b36:	d108      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b38:	f107 0308 	add.w	r3, r7, #8
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fe fbe9 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b46:	f001 b89a 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006b4a:	4b9f      	ldr	r3, [pc, #636]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d10d      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b5c:	d109      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b5e:	4b9a      	ldr	r3, [pc, #616]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	08db      	lsrs	r3, r3, #3
 8006b64:	f003 0303 	and.w	r3, r3, #3
 8006b68:	4a98      	ldr	r2, [pc, #608]	; (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b70:	e011      	b.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006b72:	4b95      	ldr	r3, [pc, #596]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b7e:	d106      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006b86:	d102      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006b88:	4b91      	ldr	r3, [pc, #580]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b8c:	e003      	b.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b92:	f001 b874 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b96:	f001 b872 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006b9a:	4b8b      	ldr	r3, [pc, #556]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006b9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ba0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006ba4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006bac:	f7fc f93e 	bl	8002e2c <HAL_RCC_GetPCLK3Freq>
 8006bb0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006bb2:	f001 b864 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bbc:	d108      	bne.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bbe:	f107 0308 	add.w	r3, r7, #8
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe fba6 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bcc:	f001 b857 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006bd0:	4b7d      	ldr	r3, [pc, #500]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d10d      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006be2:	d109      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006be4:	4b78      	ldr	r3, [pc, #480]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	08db      	lsrs	r3, r3, #3
 8006bea:	f003 0303 	and.w	r3, r3, #3
 8006bee:	4a77      	ldr	r2, [pc, #476]	; (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf6:	e011      	b.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006bf8:	4b73      	ldr	r3, [pc, #460]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c04:	d106      	bne.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006c0c:	d102      	bne.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006c0e:	4b70      	ldr	r3, [pc, #448]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006c10:	637b      	str	r3, [r7, #52]	; 0x34
 8006c12:	e003      	b.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c18:	f001 b831 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c1c:	f001 b82f 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006c20:	4b69      	ldr	r3, [pc, #420]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006c22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c26:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006c2a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d104      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c32:	f7fc f8cf 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8006c36:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c38:	f001 b821 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c42:	d108      	bne.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c44:	f107 0308 	add.w	r3, r7, #8
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fe fb63 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c52:	f001 b814 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006c56:	4b5c      	ldr	r3, [pc, #368]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d10e      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c68:	d10a      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c6a:	4b57      	ldr	r3, [pc, #348]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	08db      	lsrs	r3, r3, #3
 8006c70:	f003 0303 	and.w	r3, r3, #3
 8006c74:	4a55      	ldr	r2, [pc, #340]	; (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006c76:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c7c:	f000 bfff 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c84:	f000 bffb 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006c88:	4b4f      	ldr	r3, [pc, #316]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006c8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006c8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c92:	633b      	str	r3, [r7, #48]	; 0x30
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006c9a:	d056      	beq.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006ca2:	f200 808b 	bhi.w	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cac:	d03e      	beq.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb4:	f200 8082 	bhi.w	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cbe:	d027      	beq.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8006cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cc6:	d879      	bhi.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cce:	d017      	beq.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd6:	d871      	bhi.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d004      	beq.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce4:	d004      	beq.n	8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8006ce6:	e069      	b.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006ce8:	f7fc f8a0 	bl	8002e2c <HAL_RCC_GetPCLK3Freq>
 8006cec:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006cee:	e068      	b.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cf0:	f107 0314 	add.w	r3, r7, #20
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fe f9a3 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006cfe:	e060      	b.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d00:	f107 0308 	add.w	r3, r7, #8
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fe fb05 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d0e:	e058      	b.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d10:	4b2d      	ldr	r3, [pc, #180]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d16:	f003 0302 	and.w	r3, r3, #2
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d103      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8006d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d22:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006d24:	e04d      	b.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006d26:	2300      	movs	r3, #0
 8006d28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d2a:	e04a      	b.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006d2c:	4b26      	ldr	r3, [pc, #152]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d3a:	d103      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8006d3c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006d42:	e03e      	b.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d48:	e03b      	b.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d4a:	4b1f      	ldr	r3, [pc, #124]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d50:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006d54:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d56:	4b1c      	ldr	r3, [pc, #112]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0302 	and.w	r3, r3, #2
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d10c      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d68:	4b17      	ldr	r3, [pc, #92]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	08db      	lsrs	r3, r3, #3
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	4a16      	ldr	r2, [pc, #88]	; (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006d74:	fa22 f303 	lsr.w	r3, r2, r3
 8006d78:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7a:	e01e      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d7c:	4b12      	ldr	r3, [pc, #72]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d88:	d106      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8006d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d90:	d102      	bne.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006d92:	4b0f      	ldr	r3, [pc, #60]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
 8006d96:	e010      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d98:	4b0b      	ldr	r3, [pc, #44]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006da4:	d106      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dac:	d102      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006dae:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8006db0:	637b      	str	r3, [r7, #52]	; 0x34
 8006db2:	e002      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006db8:	e003      	b.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8006dba:	e002      	b.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006dc0:	bf00      	nop
          }
        }
        break;
 8006dc2:	f000 bf5c 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006dc6:	bf00      	nop
 8006dc8:	44020c00 	.word	0x44020c00
 8006dcc:	03d09000 	.word	0x03d09000
 8006dd0:	003d0900 	.word	0x003d0900
 8006dd4:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006dd8:	4b9e      	ldr	r3, [pc, #632]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006dda:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006dde:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006de2:	633b      	str	r3, [r7, #48]	; 0x30
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006dea:	d056      	beq.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006df2:	f200 808b 	bhi.w	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dfc:	d03e      	beq.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e04:	f200 8082 	bhi.w	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e0e:	d027      	beq.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e16:	d879      	bhi.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e1e:	d017      	beq.n	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8006e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e26:	d871      	bhi.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d004      	beq.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e34:	d004      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8006e36:	e069      	b.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8006e38:	f7fb ffcc 	bl	8002dd4 <HAL_RCC_GetPCLK1Freq>
 8006e3c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006e3e:	e068      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e40:	f107 0314 	add.w	r3, r7, #20
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fe f8fb 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e4e:	e060      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e50:	f107 0308 	add.w	r3, r7, #8
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fe fa5d 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e5e:	e058      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e60:	4b7c      	ldr	r3, [pc, #496]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d103      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8006e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e72:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006e74:	e04d      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e7a:	e04a      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006e7c:	4b75      	ldr	r3, [pc, #468]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e8a:	d103      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8006e8c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006e92:	e03e      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006e94:	2300      	movs	r3, #0
 8006e96:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e98:	e03b      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e9a:	4b6e      	ldr	r3, [pc, #440]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006e9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ea0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006ea4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ea6:	4b6b      	ldr	r3, [pc, #428]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d10c      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8006eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d109      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006eb8:	4b66      	ldr	r3, [pc, #408]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	08db      	lsrs	r3, r3, #3
 8006ebe:	f003 0303 	and.w	r3, r3, #3
 8006ec2:	4a65      	ldr	r2, [pc, #404]	; (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eca:	e01e      	b.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ecc:	4b61      	ldr	r3, [pc, #388]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed8:	d106      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8006eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee0:	d102      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006ee2:	4b5e      	ldr	r3, [pc, #376]	; (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8006ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee6:	e010      	b.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ee8:	4b5a      	ldr	r3, [pc, #360]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ef4:	d106      	bne.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8006ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006efc:	d102      	bne.n	8006f04 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006efe:	4b58      	ldr	r3, [pc, #352]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
 8006f02:	e002      	b.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006f08:	e003      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8006f0a:	e002      	b.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f10:	bf00      	nop
          }
        }
        break;
 8006f12:	f000 beb4 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8006f16:	4b4f      	ldr	r3, [pc, #316]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006f18:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006f1c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006f20:	633b      	str	r3, [r7, #48]	; 0x30
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f28:	d056      	beq.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f30:	f200 808b 	bhi.w	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f3a:	d03e      	beq.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006f42:	f200 8082 	bhi.w	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f4c:	d027      	beq.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f54:	d879      	bhi.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f5c:	d017      	beq.n	8006f8e <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f64:	d871      	bhi.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d004      	beq.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f72:	d004      	beq.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8006f74:	e069      	b.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006f76:	f7fb ff59 	bl	8002e2c <HAL_RCC_GetPCLK3Freq>
 8006f7a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006f7c:	e068      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f7e:	f107 0314 	add.w	r3, r7, #20
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe f85c 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f8c:	e060      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f8e:	f107 0308 	add.w	r3, r7, #8
 8006f92:	4618      	mov	r0, r3
 8006f94:	f7fe f9be 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f9c:	e058      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f9e:	4b2d      	ldr	r3, [pc, #180]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d103      	bne.n	8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8006fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006fb2:	e04d      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fb8:	e04a      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006fba:	4b26      	ldr	r3, [pc, #152]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fc8:	d103      	bne.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8006fca:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006fce:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006fd0:	e03e      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fd6:	e03b      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fd8:	4b1e      	ldr	r3, [pc, #120]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006fde:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fe4:	4b1b      	ldr	r3, [pc, #108]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d10c      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d109      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ff6:	4b17      	ldr	r3, [pc, #92]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	08db      	lsrs	r3, r3, #3
 8006ffc:	f003 0303 	and.w	r3, r3, #3
 8007000:	4a15      	ldr	r2, [pc, #84]	; (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007002:	fa22 f303 	lsr.w	r3, r2, r3
 8007006:	637b      	str	r3, [r7, #52]	; 0x34
 8007008:	e01e      	b.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800700a:	4b12      	ldr	r3, [pc, #72]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007016:	d106      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701e:	d102      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007020:	4b0e      	ldr	r3, [pc, #56]	; (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
 8007024:	e010      	b.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007026:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800702e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007032:	d106      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8007034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800703a:	d102      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800703c:	4b08      	ldr	r3, [pc, #32]	; (8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800703e:	637b      	str	r3, [r7, #52]	; 0x34
 8007040:	e002      	b.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007046:	e003      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8007048:	e002      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800704e:	bf00      	nop
          }
        }
        break;
 8007050:	f000 be15 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007054:	44020c00 	.word	0x44020c00
 8007058:	03d09000 	.word	0x03d09000
 800705c:	003d0900 	.word	0x003d0900
 8007060:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007064:	4b9e      	ldr	r3, [pc, #632]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007066:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800706a:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800706e:	633b      	str	r3, [r7, #48]	; 0x30
 8007070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007072:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007076:	d056      	beq.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800707e:	f200 808b 	bhi.w	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007088:	d03e      	beq.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800708a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007090:	f200 8082 	bhi.w	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800709a:	d027      	beq.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070a2:	d879      	bhi.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070aa:	d017      	beq.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070b2:	d871      	bhi.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d004      	beq.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070c0:	d004      	beq.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80070c2:	e069      	b.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80070c4:	f7fb feb2 	bl	8002e2c <HAL_RCC_GetPCLK3Freq>
 80070c8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80070ca:	e068      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070cc:	f107 0314 	add.w	r3, r7, #20
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fd ffb5 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070da:	e060      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070dc:	f107 0308 	add.w	r3, r7, #8
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe f917 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070ea:	e058      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80070ec:	4b7c      	ldr	r3, [pc, #496]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80070ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d103      	bne.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80070fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070fe:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007100:	e04d      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007106:	e04a      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007108:	4b75      	ldr	r3, [pc, #468]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800710a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800710e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007116:	d103      	bne.n	8007120 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8007118:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800711c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800711e:	e03e      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007120:	2300      	movs	r3, #0
 8007122:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007124:	e03b      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007126:	4b6e      	ldr	r3, [pc, #440]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800712c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007132:	4b6b      	ldr	r3, [pc, #428]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b02      	cmp	r3, #2
 800713c:	d10c      	bne.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800713e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d109      	bne.n	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007144:	4b66      	ldr	r3, [pc, #408]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	08db      	lsrs	r3, r3, #3
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	4a65      	ldr	r2, [pc, #404]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007150:	fa22 f303 	lsr.w	r3, r2, r3
 8007154:	637b      	str	r3, [r7, #52]	; 0x34
 8007156:	e01e      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007158:	4b61      	ldr	r3, [pc, #388]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007164:	d106      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8007166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716c:	d102      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800716e:	4b5e      	ldr	r3, [pc, #376]	; (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007170:	637b      	str	r3, [r7, #52]	; 0x34
 8007172:	e010      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007174:	4b5a      	ldr	r3, [pc, #360]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007180:	d106      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8007182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007188:	d102      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800718a:	4b58      	ldr	r3, [pc, #352]	; (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800718c:	637b      	str	r3, [r7, #52]	; 0x34
 800718e:	e002      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007194:	e003      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8007196:	e002      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800719c:	bf00      	nop
          }
        }
        break;
 800719e:	f000 bd6e 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80071a2:	4b4f      	ldr	r3, [pc, #316]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80071a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80071a8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80071ac:	633b      	str	r3, [r7, #48]	; 0x30
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80071b4:	d056      	beq.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80071bc:	f200 808b 	bhi.w	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071c6:	d03e      	beq.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071ce:	f200 8082 	bhi.w	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80071d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071d8:	d027      	beq.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071e0:	d879      	bhi.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071e8:	d017      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80071ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071f0:	d871      	bhi.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d004      	beq.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071fe:	d004      	beq.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8007200:	e069      	b.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007202:	f7fb fe13 	bl	8002e2c <HAL_RCC_GetPCLK3Freq>
 8007206:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007208:	e068      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800720a:	f107 0314 	add.w	r3, r7, #20
 800720e:	4618      	mov	r0, r3
 8007210:	f7fd ff16 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007218:	e060      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800721a:	f107 0308 	add.w	r3, r7, #8
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe f878 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007228:	e058      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800722a:	4b2d      	ldr	r3, [pc, #180]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800722c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b02      	cmp	r3, #2
 8007236:	d103      	bne.n	8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8007238:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800723c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800723e:	e04d      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007240:	2300      	movs	r3, #0
 8007242:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007244:	e04a      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007246:	4b26      	ldr	r3, [pc, #152]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007248:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800724c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007254:	d103      	bne.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8007256:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800725a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800725c:	e03e      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007262:	e03b      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007264:	4b1e      	ldr	r3, [pc, #120]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800726a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800726e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007270:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b02      	cmp	r3, #2
 800727a:	d10c      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800727c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d109      	bne.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007282:	4b17      	ldr	r3, [pc, #92]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	08db      	lsrs	r3, r3, #3
 8007288:	f003 0303 	and.w	r3, r3, #3
 800728c:	4a15      	ldr	r2, [pc, #84]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800728e:	fa22 f303 	lsr.w	r3, r2, r3
 8007292:	637b      	str	r3, [r7, #52]	; 0x34
 8007294:	e01e      	b.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007296:	4b12      	ldr	r3, [pc, #72]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800729e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a2:	d106      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80072a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072aa:	d102      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80072ac:	4b0e      	ldr	r3, [pc, #56]	; (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80072ae:	637b      	str	r3, [r7, #52]	; 0x34
 80072b0:	e010      	b.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072b2:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072be:	d106      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072c6:	d102      	bne.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072c8:	4b08      	ldr	r3, [pc, #32]	; (80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80072ca:	637b      	str	r3, [r7, #52]	; 0x34
 80072cc:	e002      	b.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80072d2:	e003      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80072d4:	e002      	b.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072da:	bf00      	nop
          }
        }
        break;
 80072dc:	f000 bccf 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80072e0:	44020c00 	.word	0x44020c00
 80072e4:	03d09000 	.word	0x03d09000
 80072e8:	003d0900 	.word	0x003d0900
 80072ec:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80072f0:	4b9e      	ldr	r3, [pc, #632]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80072f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80072f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80072fa:	633b      	str	r3, [r7, #48]	; 0x30
 80072fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007302:	d056      	beq.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8007304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007306:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800730a:	f200 808b 	bhi.w	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007314:	d03e      	beq.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800731c:	f200 8082 	bhi.w	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007326:	d027      	beq.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800732e:	d879      	bhi.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007336:	d017      	beq.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800733e:	d871      	bhi.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007342:	2b00      	cmp	r3, #0
 8007344:	d004      	beq.n	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800734c:	d004      	beq.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800734e:	e069      	b.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007350:	f7fb fd6c 	bl	8002e2c <HAL_RCC_GetPCLK3Freq>
 8007354:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007356:	e068      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007358:	f107 0314 	add.w	r3, r7, #20
 800735c:	4618      	mov	r0, r3
 800735e:	f7fd fe6f 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007366:	e060      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007368:	f107 0308 	add.w	r3, r7, #8
 800736c:	4618      	mov	r0, r3
 800736e:	f7fd ffd1 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007376:	e058      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007378:	4b7c      	ldr	r3, [pc, #496]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800737a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b02      	cmp	r3, #2
 8007384:	d103      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8007386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800738a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800738c:	e04d      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800738e:	2300      	movs	r3, #0
 8007390:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007392:	e04a      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007394:	4b75      	ldr	r3, [pc, #468]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800739a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800739e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073a2:	d103      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80073a4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80073a8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80073aa:	e03e      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80073ac:	2300      	movs	r3, #0
 80073ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073b0:	e03b      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073b2:	4b6e      	ldr	r3, [pc, #440]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80073b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80073b8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80073bc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073be:	4b6b      	ldr	r3, [pc, #428]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0302 	and.w	r3, r3, #2
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d10c      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80073ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d109      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073d0:	4b66      	ldr	r3, [pc, #408]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	08db      	lsrs	r3, r3, #3
 80073d6:	f003 0303 	and.w	r3, r3, #3
 80073da:	4a65      	ldr	r2, [pc, #404]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80073dc:	fa22 f303 	lsr.w	r3, r2, r3
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
 80073e2:	e01e      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073e4:	4b61      	ldr	r3, [pc, #388]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073f0:	d106      	bne.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80073f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f8:	d102      	bne.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80073fa:	4b5e      	ldr	r3, [pc, #376]	; (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
 80073fe:	e010      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007400:	4b5a      	ldr	r3, [pc, #360]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800740c:	d106      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007414:	d102      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007416:	4b58      	ldr	r3, [pc, #352]	; (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007418:	637b      	str	r3, [r7, #52]	; 0x34
 800741a:	e002      	b.n	8007422 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007420:	e003      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8007422:	e002      	b.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007428:	bf00      	nop
          }
        }
        break;
 800742a:	f000 bc28 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800742e:	4b4f      	ldr	r3, [pc, #316]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007438:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800743a:	4b4c      	ldr	r3, [pc, #304]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007446:	d106      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	2b00      	cmp	r3, #0
 800744c:	d103      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800744e:	4b4a      	ldr	r3, [pc, #296]	; (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007450:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007452:	f000 bc14 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800745c:	d108      	bne.n	8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800745e:	f107 0320 	add.w	r3, r7, #32
 8007462:	4618      	mov	r0, r3
 8007464:	f7fd fc82 	bl	8004d6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800746c:	f000 bc07 	b.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007476:	d107      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007478:	f107 0314 	add.w	r3, r7, #20
 800747c:	4618      	mov	r0, r3
 800747e:	f7fd fddf 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007486:	e3fa      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800748c:	e3f7      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800748e:	4b37      	ldr	r3, [pc, #220]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	633b      	str	r3, [r7, #48]	; 0x30
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	2b04      	cmp	r3, #4
 800749e:	d861      	bhi.n	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80074a0:	a201      	add	r2, pc, #4	; (adr r2, 80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	080074bd 	.word	0x080074bd
 80074ac:	080074cd 	.word	0x080074cd
 80074b0:	080074dd 	.word	0x080074dd
 80074b4:	080074ed 	.word	0x080074ed
 80074b8:	080074f3 	.word	0x080074f3
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074bc:	f107 0320 	add.w	r3, r7, #32
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fd fc53 	bl	8004d6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074ca:	e04e      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074cc:	f107 0314 	add.w	r3, r7, #20
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7fd fdb5 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074da:	e046      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074dc:	f107 0308 	add.w	r3, r7, #8
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fd ff17 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074ea:	e03e      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80074ec:	4b23      	ldr	r3, [pc, #140]	; (800757c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80074ee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074f0:	e03b      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074f2:	4b1e      	ldr	r3, [pc, #120]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80074f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80074f8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074fe:	4b1b      	ldr	r3, [pc, #108]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b02      	cmp	r3, #2
 8007508:	d10c      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800750a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800750c:	2b00      	cmp	r3, #0
 800750e:	d109      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007510:	4b16      	ldr	r3, [pc, #88]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	08db      	lsrs	r3, r3, #3
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	4a15      	ldr	r2, [pc, #84]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800751c:	fa22 f303 	lsr.w	r3, r2, r3
 8007520:	637b      	str	r3, [r7, #52]	; 0x34
 8007522:	e01e      	b.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007524:	4b11      	ldr	r3, [pc, #68]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800752c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007530:	d106      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8007532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007538:	d102      	bne.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800753a:	4b0e      	ldr	r3, [pc, #56]	; (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800753c:	637b      	str	r3, [r7, #52]	; 0x34
 800753e:	e010      	b.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007548:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800754c:	d106      	bne.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007554:	d102      	bne.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007556:	4b08      	ldr	r3, [pc, #32]	; (8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007558:	637b      	str	r3, [r7, #52]	; 0x34
 800755a:	e002      	b.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007560:	e003      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8007562:	e002      	b.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007568:	bf00      	nop
          }
        }
        break;
 800756a:	e388      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800756c:	44020c00 	.word	0x44020c00
 8007570:	03d09000 	.word	0x03d09000
 8007574:	003d0900 	.word	0x003d0900
 8007578:	017d7840 	.word	0x017d7840
 800757c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007580:	4ba9      	ldr	r3, [pc, #676]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800758a:	633b      	str	r3, [r7, #48]	; 0x30
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	2b20      	cmp	r3, #32
 8007590:	f200 809a 	bhi.w	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8007594:	a201      	add	r2, pc, #4	; (adr r2, 800759c <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8007596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759a:	bf00      	nop
 800759c:	08007621 	.word	0x08007621
 80075a0:	080076c9 	.word	0x080076c9
 80075a4:	080076c9 	.word	0x080076c9
 80075a8:	080076c9 	.word	0x080076c9
 80075ac:	080076c9 	.word	0x080076c9
 80075b0:	080076c9 	.word	0x080076c9
 80075b4:	080076c9 	.word	0x080076c9
 80075b8:	080076c9 	.word	0x080076c9
 80075bc:	08007631 	.word	0x08007631
 80075c0:	080076c9 	.word	0x080076c9
 80075c4:	080076c9 	.word	0x080076c9
 80075c8:	080076c9 	.word	0x080076c9
 80075cc:	080076c9 	.word	0x080076c9
 80075d0:	080076c9 	.word	0x080076c9
 80075d4:	080076c9 	.word	0x080076c9
 80075d8:	080076c9 	.word	0x080076c9
 80075dc:	08007641 	.word	0x08007641
 80075e0:	080076c9 	.word	0x080076c9
 80075e4:	080076c9 	.word	0x080076c9
 80075e8:	080076c9 	.word	0x080076c9
 80075ec:	080076c9 	.word	0x080076c9
 80075f0:	080076c9 	.word	0x080076c9
 80075f4:	080076c9 	.word	0x080076c9
 80075f8:	080076c9 	.word	0x080076c9
 80075fc:	08007651 	.word	0x08007651
 8007600:	080076c9 	.word	0x080076c9
 8007604:	080076c9 	.word	0x080076c9
 8007608:	080076c9 	.word	0x080076c9
 800760c:	080076c9 	.word	0x080076c9
 8007610:	080076c9 	.word	0x080076c9
 8007614:	080076c9 	.word	0x080076c9
 8007618:	080076c9 	.word	0x080076c9
 800761c:	08007657 	.word	0x08007657
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007620:	f107 0320 	add.w	r3, r7, #32
 8007624:	4618      	mov	r0, r3
 8007626:	f7fd fba1 	bl	8004d6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800762e:	e04e      	b.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007630:	f107 0314 	add.w	r3, r7, #20
 8007634:	4618      	mov	r0, r3
 8007636:	f7fd fd03 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800763e:	e046      	b.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007640:	f107 0308 	add.w	r3, r7, #8
 8007644:	4618      	mov	r0, r3
 8007646:	f7fd fe65 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800764e:	e03e      	b.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007650:	4b76      	ldr	r3, [pc, #472]	; (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007652:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007654:	e03b      	b.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007656:	4b74      	ldr	r3, [pc, #464]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800765c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007660:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007662:	4b71      	ldr	r3, [pc, #452]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b02      	cmp	r3, #2
 800766c:	d10c      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007670:	2b00      	cmp	r3, #0
 8007672:	d109      	bne.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007674:	4b6c      	ldr	r3, [pc, #432]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	08db      	lsrs	r3, r3, #3
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	4a6c      	ldr	r2, [pc, #432]	; (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007680:	fa22 f303 	lsr.w	r3, r2, r3
 8007684:	637b      	str	r3, [r7, #52]	; 0x34
 8007686:	e01e      	b.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007688:	4b67      	ldr	r3, [pc, #412]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007690:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007694:	d106      	bne.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8007696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769c:	d102      	bne.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800769e:	4b65      	ldr	r3, [pc, #404]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80076a0:	637b      	str	r3, [r7, #52]	; 0x34
 80076a2:	e010      	b.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076a4:	4b60      	ldr	r3, [pc, #384]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076b0:	d106      	bne.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80076b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076b8:	d102      	bne.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80076ba:	4b5f      	ldr	r3, [pc, #380]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34
 80076be:	e002      	b.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80076c4:	e003      	b.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80076c6:	e002      	b.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80076c8:	2300      	movs	r3, #0
 80076ca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076cc:	bf00      	nop
          }
        }
        break;
 80076ce:	e2d6      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80076d0:	4b55      	ldr	r3, [pc, #340]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80076d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076d6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80076da:	633b      	str	r3, [r7, #48]	; 0x30
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076e2:	d031      	beq.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ea:	d866      	bhi.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	2bc0      	cmp	r3, #192	; 0xc0
 80076f0:	d027      	beq.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80076f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f4:	2bc0      	cmp	r3, #192	; 0xc0
 80076f6:	d860      	bhi.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	2b80      	cmp	r3, #128	; 0x80
 80076fc:	d019      	beq.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80076fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007700:	2b80      	cmp	r3, #128	; 0x80
 8007702:	d85a      	bhi.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	2b40      	cmp	r3, #64	; 0x40
 800770e:	d008      	beq.n	8007722 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007710:	e053      	b.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007712:	f107 0320 	add.w	r3, r7, #32
 8007716:	4618      	mov	r0, r3
 8007718:	f7fd fb28 	bl	8004d6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007720:	e04e      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007722:	f107 0314 	add.w	r3, r7, #20
 8007726:	4618      	mov	r0, r3
 8007728:	f7fd fc8a 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007730:	e046      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007732:	f107 0308 	add.w	r3, r7, #8
 8007736:	4618      	mov	r0, r3
 8007738:	f7fd fdec 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007740:	e03e      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007742:	4b3a      	ldr	r3, [pc, #232]	; (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007746:	e03b      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007748:	4b37      	ldr	r3, [pc, #220]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800774a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800774e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007752:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007754:	4b34      	ldr	r3, [pc, #208]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0302 	and.w	r3, r3, #2
 800775c:	2b02      	cmp	r3, #2
 800775e:	d10c      	bne.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8007760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007762:	2b00      	cmp	r3, #0
 8007764:	d109      	bne.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007766:	4b30      	ldr	r3, [pc, #192]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	08db      	lsrs	r3, r3, #3
 800776c:	f003 0303 	and.w	r3, r3, #3
 8007770:	4a2f      	ldr	r2, [pc, #188]	; (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007772:	fa22 f303 	lsr.w	r3, r2, r3
 8007776:	637b      	str	r3, [r7, #52]	; 0x34
 8007778:	e01e      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800777a:	4b2b      	ldr	r3, [pc, #172]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007786:	d106      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8007788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800778e:	d102      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007790:	4b28      	ldr	r3, [pc, #160]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007792:	637b      	str	r3, [r7, #52]	; 0x34
 8007794:	e010      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007796:	4b24      	ldr	r3, [pc, #144]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077a2:	d106      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80077a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077aa:	d102      	bne.n	80077b2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80077ac:	4b22      	ldr	r3, [pc, #136]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80077ae:	637b      	str	r3, [r7, #52]	; 0x34
 80077b0:	e002      	b.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80077b6:	e003      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80077b8:	e002      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077be:	bf00      	nop
          }
        }
        break;
 80077c0:	e25d      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80077c2:	4b19      	ldr	r3, [pc, #100]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80077c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077c8:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80077cc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d103      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80077d4:	f7fb fb14 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 80077d8:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80077da:	e250      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80077dc:	4b12      	ldr	r3, [pc, #72]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077e8:	d10b      	bne.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077f0:	d107      	bne.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077f2:	f107 0314 	add.w	r3, r7, #20
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fd fc22 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007800:	e04f      	b.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007802:	4b09      	ldr	r3, [pc, #36]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800780a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800780e:	d115      	bne.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007812:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007816:	d111      	bne.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007818:	f107 0308 	add.w	r3, r7, #8
 800781c:	4618      	mov	r0, r3
 800781e:	f7fd fd79 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	637b      	str	r3, [r7, #52]	; 0x34
 8007826:	e03c      	b.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007828:	44020c00 	.word	0x44020c00
 800782c:	00bb8000 	.word	0x00bb8000
 8007830:	03d09000 	.word	0x03d09000
 8007834:	003d0900 	.word	0x003d0900
 8007838:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800783c:	4b94      	ldr	r3, [pc, #592]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b02      	cmp	r3, #2
 8007846:	d10d      	bne.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800784e:	d109      	bne.n	8007864 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007850:	4b8f      	ldr	r3, [pc, #572]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	08db      	lsrs	r3, r3, #3
 8007856:	f003 0303 	and.w	r3, r3, #3
 800785a:	4a8e      	ldr	r2, [pc, #568]	; (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800785c:	fa22 f303 	lsr.w	r3, r2, r3
 8007860:	637b      	str	r3, [r7, #52]	; 0x34
 8007862:	e01e      	b.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007864:	4b8a      	ldr	r3, [pc, #552]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800786c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007870:	d106      	bne.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007878:	d102      	bne.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800787a:	4b87      	ldr	r3, [pc, #540]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800787c:	637b      	str	r3, [r7, #52]	; 0x34
 800787e:	e010      	b.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007880:	4b83      	ldr	r3, [pc, #524]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007888:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800788c:	d106      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007894:	d102      	bne.n	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8007896:	4b81      	ldr	r3, [pc, #516]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007898:	637b      	str	r3, [r7, #52]	; 0x34
 800789a:	e002      	b.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078a0:	e1ed      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80078a2:	e1ec      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80078a4:	4b7a      	ldr	r3, [pc, #488]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80078a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078aa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80078ae:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d103      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80078b6:	f7fb fab9 	bl	8002e2c <HAL_RCC_GetPCLK3Freq>
 80078ba:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80078bc:	e1df      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80078be:	4b74      	ldr	r3, [pc, #464]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078ca:	d10b      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078d2:	d107      	bne.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078d4:	f107 0314 	add.w	r3, r7, #20
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fd fbb1 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	637b      	str	r3, [r7, #52]	; 0x34
 80078e2:	e045      	b.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80078e4:	4b6a      	ldr	r3, [pc, #424]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078f0:	d10b      	bne.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078f8:	d107      	bne.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078fa:	f107 0308 	add.w	r3, r7, #8
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fd fd08 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	637b      	str	r3, [r7, #52]	; 0x34
 8007908:	e032      	b.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800790a:	4b61      	ldr	r3, [pc, #388]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b02      	cmp	r3, #2
 8007914:	d10d      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8007916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007918:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800791c:	d109      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800791e:	4b5c      	ldr	r3, [pc, #368]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	08db      	lsrs	r3, r3, #3
 8007924:	f003 0303 	and.w	r3, r3, #3
 8007928:	4a5a      	ldr	r2, [pc, #360]	; (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800792a:	fa22 f303 	lsr.w	r3, r2, r3
 800792e:	637b      	str	r3, [r7, #52]	; 0x34
 8007930:	e01e      	b.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007932:	4b57      	ldr	r3, [pc, #348]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800793a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800793e:	d106      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007946:	d102      	bne.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007948:	4b53      	ldr	r3, [pc, #332]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800794a:	637b      	str	r3, [r7, #52]	; 0x34
 800794c:	e010      	b.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800794e:	4b50      	ldr	r3, [pc, #320]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800795a:	d106      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007962:	d102      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007964:	4b4d      	ldr	r3, [pc, #308]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007966:	637b      	str	r3, [r7, #52]	; 0x34
 8007968:	e002      	b.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800796e:	e186      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007970:	e185      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007972:	4b47      	ldr	r3, [pc, #284]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007978:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800797c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800797e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007980:	2b00      	cmp	r3, #0
 8007982:	d103      	bne.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007984:	f7fb fa3c 	bl	8002e00 <HAL_RCC_GetPCLK2Freq>
 8007988:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800798a:	e178      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800798c:	4b40      	ldr	r3, [pc, #256]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007998:	d10b      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079a0:	d107      	bne.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079a2:	f107 0314 	add.w	r3, r7, #20
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fd fb4a 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	637b      	str	r3, [r7, #52]	; 0x34
 80079b0:	e045      	b.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80079b2:	4b37      	ldr	r3, [pc, #220]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079be:	d10b      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c6:	d107      	bne.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079c8:	f107 0308 	add.w	r3, r7, #8
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fd fca1 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	637b      	str	r3, [r7, #52]	; 0x34
 80079d6:	e032      	b.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80079d8:	4b2d      	ldr	r3, [pc, #180]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0302 	and.w	r3, r3, #2
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d10d      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80079ea:	d109      	bne.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079ec:	4b28      	ldr	r3, [pc, #160]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	08db      	lsrs	r3, r3, #3
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	4a27      	ldr	r2, [pc, #156]	; (8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80079f8:	fa22 f303 	lsr.w	r3, r2, r3
 80079fc:	637b      	str	r3, [r7, #52]	; 0x34
 80079fe:	e01e      	b.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007a00:	4b23      	ldr	r3, [pc, #140]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a0c:	d106      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a14:	d102      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8007a16:	4b20      	ldr	r3, [pc, #128]	; (8007a98 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007a18:	637b      	str	r3, [r7, #52]	; 0x34
 8007a1a:	e010      	b.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007a1c:	4b1c      	ldr	r3, [pc, #112]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a28:	d106      	bne.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007a30:	d102      	bne.n	8007a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8007a32:	4b1a      	ldr	r3, [pc, #104]	; (8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007a34:	637b      	str	r3, [r7, #52]	; 0x34
 8007a36:	e002      	b.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a3c:	e11f      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a3e:	e11e      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007a40:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007a42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a46:	f003 0303 	and.w	r3, r3, #3
 8007a4a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d85f      	bhi.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8007a52:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a69 	.word	0x08007a69
 8007a5c:	08007a71 	.word	0x08007a71
 8007a60:	08007a81 	.word	0x08007a81
 8007a64:	08007aa1 	.word	0x08007aa1

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007a68:	f7fb f998 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8007a6c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007a6e:	e053      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a70:	f107 0320 	add.w	r3, r7, #32
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fd f979 	bl	8004d6c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a7e:	e04b      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a80:	f107 0314 	add.w	r3, r7, #20
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7fd fadb 	bl	8005040 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a8e:	e043      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007a90:	44020c00 	.word	0x44020c00
 8007a94:	03d09000 	.word	0x03d09000
 8007a98:	003d0900 	.word	0x003d0900
 8007a9c:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007aa0:	4b79      	ldr	r3, [pc, #484]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007aa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007aa6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007aaa:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007aac:	4b76      	ldr	r3, [pc, #472]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d10c      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d109      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007abe:	4b72      	ldr	r3, [pc, #456]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	08db      	lsrs	r3, r3, #3
 8007ac4:	f003 0303 	and.w	r3, r3, #3
 8007ac8:	4a70      	ldr	r2, [pc, #448]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007aca:	fa22 f303 	lsr.w	r3, r2, r3
 8007ace:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad0:	e01e      	b.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ad2:	4b6d      	ldr	r3, [pc, #436]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ade:	d106      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae6:	d102      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007ae8:	4b69      	ldr	r3, [pc, #420]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007aea:	637b      	str	r3, [r7, #52]	; 0x34
 8007aec:	e010      	b.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007aee:	4b66      	ldr	r3, [pc, #408]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007afa:	d106      	bne.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b02:	d102      	bne.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007b04:	4b63      	ldr	r3, [pc, #396]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8007b06:	637b      	str	r3, [r7, #52]	; 0x34
 8007b08:	e002      	b.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007b0e:	e003      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007b10:	e002      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b16:	bf00      	nop
          }
        }
        break;
 8007b18:	e0b1      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007b1a:	4b5b      	ldr	r3, [pc, #364]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b24:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007b26:	4b58      	ldr	r3, [pc, #352]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d106      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d103      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007b40:	e01f      	b.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007b42:	4b51      	ldr	r3, [pc, #324]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b50:	d106      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	2b40      	cmp	r3, #64	; 0x40
 8007b56:	d103      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007b58:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b5e:	e010      	b.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007b60:	4b49      	ldr	r3, [pc, #292]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b6c:	d106      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b70:	2b80      	cmp	r3, #128	; 0x80
 8007b72:	d103      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007b74:	f248 0312 	movw	r3, #32786	; 0x8012
 8007b78:	637b      	str	r3, [r7, #52]	; 0x34
 8007b7a:	e002      	b.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007b80:	e07d      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b82:	e07c      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007b84:	4b40      	ldr	r3, [pc, #256]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007b86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b8e:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007b90:	4b3d      	ldr	r3, [pc, #244]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b9c:	d105      	bne.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d102      	bne.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8007ba4:	4b3c      	ldr	r3, [pc, #240]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba8:	e031      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007baa:	4b37      	ldr	r3, [pc, #220]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bb6:	d10a      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bba:	2b10      	cmp	r3, #16
 8007bbc:	d107      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bbe:	f107 0320 	add.w	r3, r7, #32
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fd f8d2 	bl	8004d6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	637b      	str	r3, [r7, #52]	; 0x34
 8007bcc:	e01f      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007bce:	4b2e      	ldr	r3, [pc, #184]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d106      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	2b20      	cmp	r3, #32
 8007be0:	d103      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8007be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007be6:	637b      	str	r3, [r7, #52]	; 0x34
 8007be8:	e011      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007bea:	4b27      	ldr	r3, [pc, #156]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bf8:	d106      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	2b30      	cmp	r3, #48	; 0x30
 8007bfe:	d103      	bne.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007c00:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c04:	637b      	str	r3, [r7, #52]	; 0x34
 8007c06:	e002      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007c0c:	e037      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c0e:	e036      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007c10:	4b1d      	ldr	r3, [pc, #116]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c1a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	2b10      	cmp	r3, #16
 8007c20:	d107      	bne.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007c22:	f107 0320 	add.w	r3, r7, #32
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fd f8a0 	bl	8004d6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007c30:	e025      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007c32:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c3e:	d10a      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8007c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c42:	2b20      	cmp	r3, #32
 8007c44:	d107      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c46:	f107 0308 	add.w	r3, r7, #8
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fd fb62 	bl	8005314 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	637b      	str	r3, [r7, #52]	; 0x34
 8007c54:	e00f      	b.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007c56:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c62:	d105      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	2b30      	cmp	r3, #48	; 0x30
 8007c68:	d102      	bne.n	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007c6a:	4b0b      	ldr	r3, [pc, #44]	; (8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c6e:	e002      	b.n	8007c76 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007c70:	2300      	movs	r3, #0
 8007c72:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8007c74:	e003      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c76:	e002      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c7c:	bf00      	nop
    }
  }

  return (frequency);
 8007c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	373c      	adds	r7, #60	; 0x3c
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd90      	pop	{r4, r7, pc}
 8007c88:	44020c00 	.word	0x44020c00
 8007c8c:	03d09000 	.word	0x03d09000
 8007c90:	003d0900 	.word	0x003d0900
 8007c94:	017d7840 	.word	0x017d7840
 8007c98:	02dc6c00 	.word	0x02dc6c00

08007c9c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007ca4:	4b48      	ldr	r3, [pc, #288]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a47      	ldr	r2, [pc, #284]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007caa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007cb0:	f7f9 fe70 	bl	8001994 <HAL_GetTick>
 8007cb4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cb6:	e008      	b.n	8007cca <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007cb8:	f7f9 fe6c 	bl	8001994 <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d901      	bls.n	8007cca <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e07a      	b.n	8007dc0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cca:	4b3f      	ldr	r3, [pc, #252]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1f0      	bne.n	8007cb8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007cd6:	4b3c      	ldr	r3, [pc, #240]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007cde:	f023 0303 	bic.w	r3, r3, #3
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	6811      	ldr	r1, [r2, #0]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	6852      	ldr	r2, [r2, #4]
 8007cea:	0212      	lsls	r2, r2, #8
 8007cec:	430a      	orrs	r2, r1
 8007cee:	4936      	ldr	r1, [pc, #216]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	025b      	lsls	r3, r3, #9
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	431a      	orrs	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	041b      	lsls	r3, r3, #16
 8007d12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	061b      	lsls	r3, r3, #24
 8007d20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d24:	4928      	ldr	r1, [pc, #160]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007d2a:	4b27      	ldr	r3, [pc, #156]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2e:	f023 020c 	bic.w	r2, r3, #12
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	4924      	ldr	r1, [pc, #144]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007d3c:	4b22      	ldr	r3, [pc, #136]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d40:	f023 0220 	bic.w	r2, r3, #32
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	491f      	ldr	r1, [pc, #124]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007d4e:	4b1e      	ldr	r3, [pc, #120]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	491c      	ldr	r1, [pc, #112]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007d5c:	4b1a      	ldr	r3, [pc, #104]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d60:	4a19      	ldr	r2, [pc, #100]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d62:	f023 0310 	bic.w	r3, r3, #16
 8007d66:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8007d68:	4b17      	ldr	r3, [pc, #92]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d70:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6a12      	ldr	r2, [r2, #32]
 8007d78:	00d2      	lsls	r2, r2, #3
 8007d7a:	4913      	ldr	r1, [pc, #76]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007d80:	4b11      	ldr	r3, [pc, #68]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d84:	4a10      	ldr	r2, [pc, #64]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d86:	f043 0310 	orr.w	r3, r3, #16
 8007d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007d8c:	4b0e      	ldr	r3, [pc, #56]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a0d      	ldr	r2, [pc, #52]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007d92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d96:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d98:	f7f9 fdfc 	bl	8001994 <HAL_GetTick>
 8007d9c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d9e:	e008      	b.n	8007db2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007da0:	f7f9 fdf8 	bl	8001994 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d901      	bls.n	8007db2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e006      	b.n	8007dc0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007db2:	4b05      	ldr	r3, [pc, #20]	; (8007dc8 <RCCEx_PLL2_Config+0x12c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0f0      	beq.n	8007da0 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0

}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	44020c00 	.word	0x44020c00

08007dcc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8007dd4:	4b48      	ldr	r3, [pc, #288]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a47      	ldr	r2, [pc, #284]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dde:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007de0:	f7f9 fdd8 	bl	8001994 <HAL_GetTick>
 8007de4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007de6:	e008      	b.n	8007dfa <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007de8:	f7f9 fdd4 	bl	8001994 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d901      	bls.n	8007dfa <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e07a      	b.n	8007ef0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007dfa:	4b3f      	ldr	r3, [pc, #252]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1f0      	bne.n	8007de8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007e06:	4b3c      	ldr	r3, [pc, #240]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e0e:	f023 0303 	bic.w	r3, r3, #3
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	6811      	ldr	r1, [r2, #0]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	6852      	ldr	r2, [r2, #4]
 8007e1a:	0212      	lsls	r2, r2, #8
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	4936      	ldr	r1, [pc, #216]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	630b      	str	r3, [r1, #48]	; 0x30
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	3b01      	subs	r3, #1
 8007e34:	025b      	lsls	r3, r3, #9
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	431a      	orrs	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	041b      	lsls	r3, r3, #16
 8007e42:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e46:	431a      	orrs	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	061b      	lsls	r3, r3, #24
 8007e50:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e54:	4928      	ldr	r1, [pc, #160]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e5a:	4b27      	ldr	r3, [pc, #156]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5e:	f023 020c 	bic.w	r2, r3, #12
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	4924      	ldr	r1, [pc, #144]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007e6c:	4b22      	ldr	r3, [pc, #136]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e70:	f023 0220 	bic.w	r2, r3, #32
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	491f      	ldr	r1, [pc, #124]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007e7e:	4b1e      	ldr	r3, [pc, #120]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	491c      	ldr	r1, [pc, #112]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007e8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e90:	4a19      	ldr	r2, [pc, #100]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007e92:	f023 0310 	bic.w	r3, r3, #16
 8007e96:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8007e98:	4b17      	ldr	r3, [pc, #92]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ea0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6a12      	ldr	r2, [r2, #32]
 8007ea8:	00d2      	lsls	r2, r2, #3
 8007eaa:	4913      	ldr	r1, [pc, #76]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8007eb0:	4b11      	ldr	r3, [pc, #68]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb4:	4a10      	ldr	r2, [pc, #64]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007eb6:	f043 0310 	orr.w	r3, r3, #16
 8007eba:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007ebc:	4b0e      	ldr	r3, [pc, #56]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a0d      	ldr	r2, [pc, #52]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ec6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ec8:	f7f9 fd64 	bl	8001994 <HAL_GetTick>
 8007ecc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ece:	e008      	b.n	8007ee2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ed0:	f7f9 fd60 	bl	8001994 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d901      	bls.n	8007ee2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e006      	b.n	8007ef0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ee2:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <RCCEx_PLL3_Config+0x12c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0f0      	beq.n	8007ed0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	44020c00 	.word	0x44020c00

08007efc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d101      	bne.n	8007f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e162      	b.n	80081d4 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a70      	ldr	r2, [pc, #448]	; (80080d4 <HAL_SPI_Init+0x1d8>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d018      	beq.n	8007f4a <HAL_SPI_Init+0x4e>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a6e      	ldr	r2, [pc, #440]	; (80080d8 <HAL_SPI_Init+0x1dc>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d013      	beq.n	8007f4a <HAL_SPI_Init+0x4e>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a6d      	ldr	r2, [pc, #436]	; (80080dc <HAL_SPI_Init+0x1e0>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00e      	beq.n	8007f4a <HAL_SPI_Init+0x4e>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a6b      	ldr	r2, [pc, #428]	; (80080e0 <HAL_SPI_Init+0x1e4>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d009      	beq.n	8007f4a <HAL_SPI_Init+0x4e>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a6a      	ldr	r2, [pc, #424]	; (80080e4 <HAL_SPI_Init+0x1e8>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d004      	beq.n	8007f4a <HAL_SPI_Init+0x4e>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a68      	ldr	r2, [pc, #416]	; (80080e8 <HAL_SPI_Init+0x1ec>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	e000      	b.n	8007f4c <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007f4a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a5f      	ldr	r2, [pc, #380]	; (80080d4 <HAL_SPI_Init+0x1d8>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d018      	beq.n	8007f8e <HAL_SPI_Init+0x92>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a5d      	ldr	r2, [pc, #372]	; (80080d8 <HAL_SPI_Init+0x1dc>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d013      	beq.n	8007f8e <HAL_SPI_Init+0x92>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a5c      	ldr	r2, [pc, #368]	; (80080dc <HAL_SPI_Init+0x1e0>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d00e      	beq.n	8007f8e <HAL_SPI_Init+0x92>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a5a      	ldr	r2, [pc, #360]	; (80080e0 <HAL_SPI_Init+0x1e4>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d009      	beq.n	8007f8e <HAL_SPI_Init+0x92>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a59      	ldr	r2, [pc, #356]	; (80080e4 <HAL_SPI_Init+0x1e8>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d004      	beq.n	8007f8e <HAL_SPI_Init+0x92>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a57      	ldr	r2, [pc, #348]	; (80080e8 <HAL_SPI_Init+0x1ec>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d105      	bne.n	8007f9a <HAL_SPI_Init+0x9e>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	2b0f      	cmp	r3, #15
 8007f94:	d901      	bls.n	8007f9a <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e11c      	b.n	80081d4 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 f80e 	bl	8008fbc <SPI_GetPacketSize>
 8007fa0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a4b      	ldr	r2, [pc, #300]	; (80080d4 <HAL_SPI_Init+0x1d8>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d018      	beq.n	8007fde <HAL_SPI_Init+0xe2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a49      	ldr	r2, [pc, #292]	; (80080d8 <HAL_SPI_Init+0x1dc>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d013      	beq.n	8007fde <HAL_SPI_Init+0xe2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a48      	ldr	r2, [pc, #288]	; (80080dc <HAL_SPI_Init+0x1e0>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d00e      	beq.n	8007fde <HAL_SPI_Init+0xe2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a46      	ldr	r2, [pc, #280]	; (80080e0 <HAL_SPI_Init+0x1e4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d009      	beq.n	8007fde <HAL_SPI_Init+0xe2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a45      	ldr	r2, [pc, #276]	; (80080e4 <HAL_SPI_Init+0x1e8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d004      	beq.n	8007fde <HAL_SPI_Init+0xe2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a43      	ldr	r2, [pc, #268]	; (80080e8 <HAL_SPI_Init+0x1ec>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d102      	bne.n	8007fe4 <HAL_SPI_Init+0xe8>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d820      	bhi.n	8008026 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007fe8:	4a40      	ldr	r2, [pc, #256]	; (80080ec <HAL_SPI_Init+0x1f0>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d018      	beq.n	8008020 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a3f      	ldr	r2, [pc, #252]	; (80080f0 <HAL_SPI_Init+0x1f4>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d013      	beq.n	8008020 <HAL_SPI_Init+0x124>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a3d      	ldr	r2, [pc, #244]	; (80080f4 <HAL_SPI_Init+0x1f8>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d00e      	beq.n	8008020 <HAL_SPI_Init+0x124>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a3c      	ldr	r2, [pc, #240]	; (80080f8 <HAL_SPI_Init+0x1fc>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d009      	beq.n	8008020 <HAL_SPI_Init+0x124>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a3a      	ldr	r2, [pc, #232]	; (80080fc <HAL_SPI_Init+0x200>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d004      	beq.n	8008020 <HAL_SPI_Init+0x124>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a39      	ldr	r2, [pc, #228]	; (8008100 <HAL_SPI_Init+0x204>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d104      	bne.n	800802a <HAL_SPI_Init+0x12e>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b10      	cmp	r3, #16
 8008024:	d901      	bls.n	800802a <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e0d4      	b.n	80081d4 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d106      	bne.n	8008044 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7f9 f93c 	bl	80012bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0201 	bic.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008066:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008070:	d119      	bne.n	80080a6 <HAL_SPI_Init+0x1aa>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800807a:	d103      	bne.n	8008084 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008080:	2b00      	cmp	r3, #0
 8008082:	d008      	beq.n	8008096 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10c      	bne.n	80080a6 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008094:	d107      	bne.n	80080a6 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681a      	ldr	r2, [r3, #0]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d028      	beq.n	8008104 <HAL_SPI_Init+0x208>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	2b06      	cmp	r3, #6
 80080b8:	d924      	bls.n	8008104 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	601a      	str	r2, [r3, #0]
 80080d0:	e020      	b.n	8008114 <HAL_SPI_Init+0x218>
 80080d2:	bf00      	nop
 80080d4:	40014c00 	.word	0x40014c00
 80080d8:	50014c00 	.word	0x50014c00
 80080dc:	44002000 	.word	0x44002000
 80080e0:	54002000 	.word	0x54002000
 80080e4:	40015000 	.word	0x40015000
 80080e8:	50015000 	.word	0x50015000
 80080ec:	40013000 	.word	0x40013000
 80080f0:	50013000 	.word	0x50013000
 80080f4:	40003800 	.word	0x40003800
 80080f8:	50003800 	.word	0x50003800
 80080fc:	40003c00 	.word	0x40003c00
 8008100:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008112:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	69da      	ldr	r2, [r3, #28]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800811c:	431a      	orrs	r2, r3
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	431a      	orrs	r2, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008126:	ea42 0103 	orr.w	r1, r2, r3
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	431a      	orrs	r2, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	431a      	orrs	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	431a      	orrs	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	431a      	orrs	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	431a      	orrs	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	431a      	orrs	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	431a      	orrs	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008168:	431a      	orrs	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	431a      	orrs	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008180:	ea42 0103 	orr.w	r1, r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0201 	bic.w	r2, r2, #1
 800819e:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00a      	beq.n	80081c2 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08a      	sub	sp, #40	; 0x28
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	4613      	mov	r3, r2
 80081ea:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3320      	adds	r3, #32
 80081f2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d101      	bne.n	8008206 <HAL_SPI_Transmit+0x2a>
 8008202:	2302      	movs	r3, #2
 8008204:	e209      	b.n	800861a <HAL_SPI_Transmit+0x43e>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800820e:	f7f9 fbc1 	bl	8001994 <HAL_GetTick>
 8008212:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b01      	cmp	r3, #1
 800821e:	d007      	beq.n	8008230 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008220:	2302      	movs	r3, #2
 8008222:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 800822c:	7efb      	ldrb	r3, [r7, #27]
 800822e:	e1f4      	b.n	800861a <HAL_SPI_Transmit+0x43e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <HAL_SPI_Transmit+0x60>
 8008236:	88fb      	ldrh	r3, [r7, #6]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d107      	bne.n	800824c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008248:	7efb      	ldrb	r3, [r7, #27]
 800824a:	e1e6      	b.n	800861a <HAL_SPI_Transmit+0x43e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2203      	movs	r2, #3
 8008250:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	68ba      	ldr	r2, [r7, #8]
 8008260:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	88fa      	ldrh	r2, [r7, #6]
 8008266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = Size;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	88fa      	ldrh	r2, [r7, #6]
 800826e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->TxISR       = NULL;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	67da      	str	r2, [r3, #124]	; 0x7c
  hspi->RxISR       = NULL;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	679a      	str	r2, [r3, #120]	; 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800829c:	d108      	bne.n	80082b0 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	e009      	b.n	80082c4 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80082c2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	0c1b      	lsrs	r3, r3, #16
 80082cc:	041b      	lsls	r3, r3, #16
 80082ce:	88f9      	ldrh	r1, [r7, #6]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	6812      	ldr	r2, [r2, #0]
 80082d4:	430b      	orrs	r3, r1
 80082d6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f042 0201 	orr.w	r2, r2, #1
 80082e6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082f0:	d107      	bne.n	8008302 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008300:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	2b0f      	cmp	r3, #15
 8008308:	d965      	bls.n	80083d6 <HAL_SPI_Transmit+0x1fa>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a94      	ldr	r2, [pc, #592]	; (8008560 <HAL_SPI_Transmit+0x384>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d059      	beq.n	80083c8 <HAL_SPI_Transmit+0x1ec>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a92      	ldr	r2, [pc, #584]	; (8008564 <HAL_SPI_Transmit+0x388>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d054      	beq.n	80083c8 <HAL_SPI_Transmit+0x1ec>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a91      	ldr	r2, [pc, #580]	; (8008568 <HAL_SPI_Transmit+0x38c>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d04f      	beq.n	80083c8 <HAL_SPI_Transmit+0x1ec>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a8f      	ldr	r2, [pc, #572]	; (800856c <HAL_SPI_Transmit+0x390>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d04a      	beq.n	80083c8 <HAL_SPI_Transmit+0x1ec>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a8e      	ldr	r2, [pc, #568]	; (8008570 <HAL_SPI_Transmit+0x394>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d045      	beq.n	80083c8 <HAL_SPI_Transmit+0x1ec>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a8c      	ldr	r2, [pc, #560]	; (8008574 <HAL_SPI_Transmit+0x398>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d147      	bne.n	80083d6 <HAL_SPI_Transmit+0x1fa>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008346:	e03f      	b.n	80083c8 <HAL_SPI_Transmit+0x1ec>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	695b      	ldr	r3, [r3, #20]
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	2b02      	cmp	r3, #2
 8008354:	d114      	bne.n	8008380 <HAL_SPI_Transmit+0x1a4>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6812      	ldr	r2, [r2, #0]
 8008360:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008366:	1d1a      	adds	r2, r3, #4
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008372:	b29b      	uxth	r3, r3
 8008374:	3b01      	subs	r3, #1
 8008376:	b29a      	uxth	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800837e:	e023      	b.n	80083c8 <HAL_SPI_Transmit+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008380:	f7f9 fb08 	bl	8001994 <HAL_GetTick>
 8008384:	4602      	mov	r2, r0
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d803      	bhi.n	8008398 <HAL_SPI_Transmit+0x1bc>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008396:	d102      	bne.n	800839e <HAL_SPI_Transmit+0x1c2>
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d114      	bne.n	80083c8 <HAL_SPI_Transmit+0x1ec>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f000 fd3e 	bl	8008e20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e128      	b.n	800861a <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1b9      	bne.n	8008348 <HAL_SPI_Transmit+0x16c>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80083d4:	e0fb      	b.n	80085ce <HAL_SPI_Transmit+0x3f2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	2b07      	cmp	r3, #7
 80083dc:	f240 80f0 	bls.w	80085c0 <HAL_SPI_Transmit+0x3e4>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80083e0:	e05d      	b.n	800849e <HAL_SPI_Transmit+0x2c2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	695b      	ldr	r3, [r3, #20]
 80083e8:	f003 0302 	and.w	r3, r3, #2
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d132      	bne.n	8008456 <HAL_SPI_Transmit+0x27a>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d918      	bls.n	800842e <HAL_SPI_Transmit+0x252>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008400:	2b00      	cmp	r3, #0
 8008402:	d014      	beq.n	800842e <HAL_SPI_Transmit+0x252>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6812      	ldr	r2, [r2, #0]
 800840e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008414:	1d1a      	adds	r2, r3, #4
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008420:	b29b      	uxth	r3, r3
 8008422:	3b02      	subs	r3, #2
 8008424:	b29a      	uxth	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800842c:	e037      	b.n	800849e <HAL_SPI_Transmit+0x2c2>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008432:	881a      	ldrh	r2, [r3, #0]
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800843c:	1c9a      	adds	r2, r3, #2
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b01      	subs	r3, #1
 800844c:	b29a      	uxth	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008454:	e023      	b.n	800849e <HAL_SPI_Transmit+0x2c2>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008456:	f7f9 fa9d 	bl	8001994 <HAL_GetTick>
 800845a:	4602      	mov	r2, r0
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	1ad3      	subs	r3, r2, r3
 8008460:	683a      	ldr	r2, [r7, #0]
 8008462:	429a      	cmp	r2, r3
 8008464:	d803      	bhi.n	800846e <HAL_SPI_Transmit+0x292>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800846c:	d102      	bne.n	8008474 <HAL_SPI_Transmit+0x298>
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d114      	bne.n	800849e <HAL_SPI_Transmit+0x2c2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 fcd3 	bl	8008e20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008488:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e0bd      	b.n	800861a <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d19b      	bne.n	80083e2 <HAL_SPI_Transmit+0x206>
 80084aa:	e090      	b.n	80085ce <HAL_SPI_Transmit+0x3f2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d15e      	bne.n	8008578 <HAL_SPI_Transmit+0x39c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d918      	bls.n	80084f8 <HAL_SPI_Transmit+0x31c>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ca:	2b40      	cmp	r3, #64	; 0x40
 80084cc:	d914      	bls.n	80084f8 <HAL_SPI_Transmit+0x31c>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6812      	ldr	r2, [r2, #0]
 80084d8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084de:	1d1a      	adds	r2, r3, #4
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	3b04      	subs	r3, #4
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80084f6:	e063      	b.n	80085c0 <HAL_SPI_Transmit+0x3e4>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80084fe:	b29b      	uxth	r3, r3
 8008500:	2b01      	cmp	r3, #1
 8008502:	d917      	bls.n	8008534 <HAL_SPI_Transmit+0x358>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008508:	2b00      	cmp	r3, #0
 800850a:	d013      	beq.n	8008534 <HAL_SPI_Transmit+0x358>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008510:	881a      	ldrh	r2, [r3, #0]
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800851a:	1c9a      	adds	r2, r3, #2
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008526:	b29b      	uxth	r3, r3
 8008528:	3b02      	subs	r3, #2
 800852a:	b29a      	uxth	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008532:	e045      	b.n	80085c0 <HAL_SPI_Transmit+0x3e4>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	3320      	adds	r3, #32
 800853e:	7812      	ldrb	r2, [r2, #0]
 8008540:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008546:	1c5a      	adds	r2, r3, #1
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->TxXferCount--;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008552:	b29b      	uxth	r3, r3
 8008554:	3b01      	subs	r3, #1
 8008556:	b29a      	uxth	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800855e:	e02f      	b.n	80085c0 <HAL_SPI_Transmit+0x3e4>
 8008560:	40013000 	.word	0x40013000
 8008564:	50013000 	.word	0x50013000
 8008568:	40003800 	.word	0x40003800
 800856c:	50003800 	.word	0x50003800
 8008570:	40003c00 	.word	0x40003c00
 8008574:	50003c00 	.word	0x50003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008578:	f7f9 fa0c 	bl	8001994 <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	429a      	cmp	r2, r3
 8008586:	d803      	bhi.n	8008590 <HAL_SPI_Transmit+0x3b4>
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800858e:	d102      	bne.n	8008596 <HAL_SPI_Transmit+0x3ba>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d114      	bne.n	80085c0 <HAL_SPI_Transmit+0x3e4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 fc42 	bl	8008e20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e02c      	b.n	800861a <HAL_SPI_Transmit+0x43e>
    while (hspi->TxXferCount > 0UL)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f47f af6f 	bne.w	80084ac <HAL_SPI_Transmit+0x2d0>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2200      	movs	r2, #0
 80085d6:	2108      	movs	r1, #8
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 fcc1 	bl	8008f60 <SPI_WaitOnFlagUntilTimeout>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d007      	beq.n	80085f4 <HAL_SPI_Transmit+0x418>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ea:	f043 0220 	orr.w	r2, r3, #32
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 fc13 	bl	8008e20 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <HAL_SPI_Transmit+0x43c>
  {
    return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e000      	b.n	800861a <HAL_SPI_Transmit+0x43e>
  }
  return errorcode;
 8008618:	7efb      	ldrb	r3, [r7, #27]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3720      	adds	r7, #32
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop

08008624 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b088      	sub	sp, #32
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	603b      	str	r3, [r7, #0]
 8008630:	4613      	mov	r3, r2
 8008632:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3330      	adds	r3, #48	; 0x30
 800863e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008646:	2b01      	cmp	r3, #1
 8008648:	d101      	bne.n	800864e <HAL_SPI_Receive+0x2a>
 800864a:	2302      	movs	r3, #2
 800864c:	e191      	b.n	8008972 <HAL_SPI_Receive+0x34e>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008656:	f7f9 f99d 	bl	8001994 <HAL_GetTick>
 800865a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b01      	cmp	r3, #1
 8008666:	d007      	beq.n	8008678 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8008668:	2302      	movs	r3, #2
 800866a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008674:	7ffb      	ldrb	r3, [r7, #31]
 8008676:	e17c      	b.n	8008972 <HAL_SPI_Receive+0x34e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <HAL_SPI_Receive+0x60>
 800867e:	88fb      	ldrh	r3, [r7, #6]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d107      	bne.n	8008694 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008690:	7ffb      	ldrb	r3, [r7, #31]
 8008692:	e16e      	b.n	8008972 <HAL_SPI_Receive+0x34e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2204      	movs	r2, #4
 8008698:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferSize  = Size;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	88fa      	ldrh	r2, [r7, #6]
 80086ae:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->RxXferCount = Size;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	88fa      	ldrh	r2, [r7, #6]
 80086b6:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxISR       = NULL;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80086e4:	d108      	bne.n	80086f8 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	e009      	b.n	800870c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800870a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	0c1b      	lsrs	r3, r3, #16
 8008714:	041b      	lsls	r3, r3, #16
 8008716:	88f9      	ldrh	r1, [r7, #6]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	6812      	ldr	r2, [r2, #0]
 800871c:	430b      	orrs	r3, r1
 800871e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f042 0201 	orr.w	r2, r2, #1
 800872e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008738:	d107      	bne.n	800874a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008748:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	2b0f      	cmp	r3, #15
 8008750:	d966      	bls.n	8008820 <HAL_SPI_Receive+0x1fc>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a89      	ldr	r2, [pc, #548]	; (800897c <HAL_SPI_Receive+0x358>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d05a      	beq.n	8008812 <HAL_SPI_Receive+0x1ee>
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a87      	ldr	r2, [pc, #540]	; (8008980 <HAL_SPI_Receive+0x35c>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d055      	beq.n	8008812 <HAL_SPI_Receive+0x1ee>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a86      	ldr	r2, [pc, #536]	; (8008984 <HAL_SPI_Receive+0x360>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d050      	beq.n	8008812 <HAL_SPI_Receive+0x1ee>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a84      	ldr	r2, [pc, #528]	; (8008988 <HAL_SPI_Receive+0x364>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d04b      	beq.n	8008812 <HAL_SPI_Receive+0x1ee>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a83      	ldr	r2, [pc, #524]	; (800898c <HAL_SPI_Receive+0x368>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d046      	beq.n	8008812 <HAL_SPI_Receive+0x1ee>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a81      	ldr	r2, [pc, #516]	; (8008990 <HAL_SPI_Receive+0x36c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d148      	bne.n	8008820 <HAL_SPI_Receive+0x1fc>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800878e:	e040      	b.n	8008812 <HAL_SPI_Receive+0x1ee>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	695a      	ldr	r2, [r3, #20]
 8008796:	f248 0308 	movw	r3, #32776	; 0x8008
 800879a:	4013      	ands	r3, r2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d014      	beq.n	80087ca <HAL_SPI_Receive+0x1a6>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80087aa:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087b0:	1d1a      	adds	r2, r3, #4
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80087bc:	b29b      	uxth	r3, r3
 80087be:	3b01      	subs	r3, #1
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80087c8:	e023      	b.n	8008812 <HAL_SPI_Receive+0x1ee>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087ca:	f7f9 f8e3 	bl	8001994 <HAL_GetTick>
 80087ce:	4602      	mov	r2, r0
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	683a      	ldr	r2, [r7, #0]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d803      	bhi.n	80087e2 <HAL_SPI_Receive+0x1be>
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087e0:	d102      	bne.n	80087e8 <HAL_SPI_Receive+0x1c4>
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d114      	bne.n	8008812 <HAL_SPI_Receive+0x1ee>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 fb19 	bl	8008e20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2201      	movs	r2, #1
 800880a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e0af      	b.n	8008972 <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008818:	b29b      	uxth	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1b8      	bne.n	8008790 <HAL_SPI_Receive+0x16c>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800881e:	e095      	b.n	800894c <HAL_SPI_Receive+0x328>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	2b07      	cmp	r3, #7
 8008826:	f240 808b 	bls.w	8008940 <HAL_SPI_Receive+0x31c>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800882a:	e03f      	b.n	80088ac <HAL_SPI_Receive+0x288>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	2b01      	cmp	r3, #1
 8008838:	d114      	bne.n	8008864 <HAL_SPI_Receive+0x240>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	8812      	ldrh	r2, [r2, #0]
 8008842:	b292      	uxth	r2, r2
 8008844:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800884a:	1c9a      	adds	r2, r3, #2
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008856:	b29b      	uxth	r3, r3
 8008858:	3b01      	subs	r3, #1
 800885a:	b29a      	uxth	r2, r3
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8008862:	e023      	b.n	80088ac <HAL_SPI_Receive+0x288>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008864:	f7f9 f896 	bl	8001994 <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	429a      	cmp	r2, r3
 8008872:	d803      	bhi.n	800887c <HAL_SPI_Receive+0x258>
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800887a:	d102      	bne.n	8008882 <HAL_SPI_Receive+0x25e>
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d114      	bne.n	80088ac <HAL_SPI_Receive+0x288>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 facc 	bl	8008e20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008896:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 80088a8:	2303      	movs	r3, #3
 80088aa:	e062      	b.n	8008972 <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1b9      	bne.n	800882c <HAL_SPI_Receive+0x208>
 80088b8:	e048      	b.n	800894c <HAL_SPI_Receive+0x328>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	695b      	ldr	r3, [r3, #20]
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d117      	bne.n	80088f8 <HAL_SPI_Receive+0x2d4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d4:	7812      	ldrb	r2, [r2, #0]
 80088d6:	b2d2      	uxtb	r2, r2
 80088d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088de:	1c5a      	adds	r2, r3, #1
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	3b01      	subs	r3, #1
 80088ee:	b29a      	uxth	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80088f6:	e023      	b.n	8008940 <HAL_SPI_Receive+0x31c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80088f8:	f7f9 f84c 	bl	8001994 <HAL_GetTick>
 80088fc:	4602      	mov	r2, r0
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	429a      	cmp	r2, r3
 8008906:	d803      	bhi.n	8008910 <HAL_SPI_Receive+0x2ec>
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800890e:	d102      	bne.n	8008916 <HAL_SPI_Receive+0x2f2>
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d114      	bne.n	8008940 <HAL_SPI_Receive+0x31c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 fa82 	bl	8008e20 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800892a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
          return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e018      	b.n	8008972 <HAL_SPI_Receive+0x34e>
    while (hspi->RxXferCount > 0UL)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008946:	b29b      	uxth	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1b6      	bne.n	80088ba <HAL_SPI_Receive+0x296>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 fa67 	bl	8008e20 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008968:	2b00      	cmp	r3, #0
 800896a:	d001      	beq.n	8008970 <HAL_SPI_Receive+0x34c>
  {
    return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e000      	b.n	8008972 <HAL_SPI_Receive+0x34e>
  }
  return errorcode;
 8008970:	7ffb      	ldrb	r3, [r7, #31]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3720      	adds	r7, #32
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	40013000 	.word	0x40013000
 8008980:	50013000 	.word	0x50013000
 8008984:	40003800 	.word	0x40003800
 8008988:	50003800 	.word	0x50003800
 800898c:	40003c00 	.word	0x40003c00
 8008990:	50003c00 	.word	0x50003c00

08008994 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b08c      	sub	sp, #48	; 0x30
 8008998:	af02      	add	r7, sp, #8
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
 80089a0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3320      	adds	r3, #32
 80089ae:	61fb      	str	r3, [r7, #28]
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3330      	adds	r3, #48	; 0x30
 80089b6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80089be:	2b01      	cmp	r3, #1
 80089c0:	d101      	bne.n	80089c6 <HAL_SPI_TransmitReceive+0x32>
 80089c2:	2302      	movs	r3, #2
 80089c4:	e227      	b.n	8008e16 <HAL_SPI_TransmitReceive+0x482>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80089ce:	f7f8 ffe1 	bl	8001994 <HAL_GetTick>
 80089d2:	6178      	str	r0, [r7, #20]

  initial_TxXferCount = Size;
 80089d4:	887b      	ldrh	r3, [r7, #2]
 80089d6:	84fb      	strh	r3, [r7, #38]	; 0x26
  initial_RxXferCount = Size;
 80089d8:	887b      	ldrh	r3, [r7, #2]
 80089da:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (hspi->State != HAL_SPI_STATE_READY)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d009      	beq.n	80089fc <HAL_SPI_TransmitReceive+0x68>
  {
    errorcode = HAL_BUSY;
 80089e8:	2302      	movs	r3, #2
 80089ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 80089f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089fa:	e20c      	b.n	8008e16 <HAL_SPI_TransmitReceive+0x482>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d005      	beq.n	8008a0e <HAL_SPI_TransmitReceive+0x7a>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d002      	beq.n	8008a0e <HAL_SPI_TransmitReceive+0x7a>
 8008a08:	887b      	ldrh	r3, [r7, #2]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d109      	bne.n	8008a22 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    __HAL_UNLOCK(hspi);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    return errorcode;
 8008a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a20:	e1f9      	b.n	8008e16 <HAL_SPI_TransmitReceive+0x482>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2205      	movs	r2, #5
 8008a26:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	66da      	str	r2, [r3, #108]	; 0x6c
  hspi->RxXferCount = Size;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	887a      	ldrh	r2, [r7, #2]
 8008a3c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  hspi->RxXferSize  = Size;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	887a      	ldrh	r2, [r7, #2]
 8008a44:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxXferCount = Size;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	887a      	ldrh	r2, [r7, #2]
 8008a52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferSize  = Size;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	887a      	ldrh	r2, [r7, #2]
 8008a5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2200      	movs	r2, #0
 8008a62:	679a      	str	r2, [r3, #120]	; 0x78
  hspi->TxISR       = NULL;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	68da      	ldr	r2, [r3, #12]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 8008a78:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	0c1b      	lsrs	r3, r3, #16
 8008a82:	041b      	lsls	r3, r3, #16
 8008a84:	8879      	ldrh	r1, [r7, #2]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	6812      	ldr	r2, [r2, #0]
 8008a8a:	430b      	orrs	r3, r1
 8008a8c:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f042 0201 	orr.w	r2, r2, #1
 8008a9c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008aa6:	d107      	bne.n	8008ab8 <HAL_SPI_TransmitReceive+0x124>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ab6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	2b0f      	cmp	r3, #15
 8008abe:	f240 8090 	bls.w	8008be2 <HAL_SPI_TransmitReceive+0x24e>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a81      	ldr	r2, [pc, #516]	; (8008ccc <HAL_SPI_TransmitReceive+0x338>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	f000 8083 	beq.w	8008bd4 <HAL_SPI_TransmitReceive+0x240>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a7f      	ldr	r2, [pc, #508]	; (8008cd0 <HAL_SPI_TransmitReceive+0x33c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d07d      	beq.n	8008bd4 <HAL_SPI_TransmitReceive+0x240>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a7d      	ldr	r2, [pc, #500]	; (8008cd4 <HAL_SPI_TransmitReceive+0x340>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d078      	beq.n	8008bd4 <HAL_SPI_TransmitReceive+0x240>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a7c      	ldr	r2, [pc, #496]	; (8008cd8 <HAL_SPI_TransmitReceive+0x344>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d073      	beq.n	8008bd4 <HAL_SPI_TransmitReceive+0x240>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a7a      	ldr	r2, [pc, #488]	; (8008cdc <HAL_SPI_TransmitReceive+0x348>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d06e      	beq.n	8008bd4 <HAL_SPI_TransmitReceive+0x240>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a79      	ldr	r2, [pc, #484]	; (8008ce0 <HAL_SPI_TransmitReceive+0x34c>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d170      	bne.n	8008be2 <HAL_SPI_TransmitReceive+0x24e>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008b00:	e068      	b.n	8008bd4 <HAL_SPI_TransmitReceive+0x240>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d11a      	bne.n	8008b46 <HAL_SPI_TransmitReceive+0x1b2>
 8008b10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d017      	beq.n	8008b46 <HAL_SPI_TransmitReceive+0x1b2>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6812      	ldr	r2, [r2, #0]
 8008b20:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b26:	1d1a      	adds	r2, r3, #4
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount --;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	3b01      	subs	r3, #1
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b44:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	695a      	ldr	r2, [r3, #20]
 8008b4c:	f248 0308 	movw	r3, #32776	; 0x8008
 8008b50:	4013      	ands	r3, r2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d01a      	beq.n	8008b8c <HAL_SPI_TransmitReceive+0x1f8>
 8008b56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d017      	beq.n	8008b8c <HAL_SPI_TransmitReceive+0x1f8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008b66:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b6c:	1d1a      	adds	r2, r3, #4
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount --;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008b8a:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b8c:	f7f8 ff02 	bl	8001994 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d803      	bhi.n	8008ba4 <HAL_SPI_TransmitReceive+0x210>
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ba2:	d102      	bne.n	8008baa <HAL_SPI_TransmitReceive+0x216>
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d114      	bne.n	8008bd4 <HAL_SPI_TransmitReceive+0x240>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	f000 f938 	bl	8008e20 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	e120      	b.n	8008e16 <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008bd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d193      	bne.n	8008b02 <HAL_SPI_TransmitReceive+0x16e>
 8008bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d190      	bne.n	8008b02 <HAL_SPI_TransmitReceive+0x16e>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008be0:	e0f2      	b.n	8008dc8 <HAL_SPI_TransmitReceive+0x434>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	2b07      	cmp	r3, #7
 8008be8:	f240 80e8 	bls.w	8008dbc <HAL_SPI_TransmitReceive+0x428>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008bec:	e066      	b.n	8008cbc <HAL_SPI_TransmitReceive+0x328>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	f003 0302 	and.w	r3, r3, #2
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d119      	bne.n	8008c30 <HAL_SPI_TransmitReceive+0x29c>
 8008bfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d016      	beq.n	8008c30 <HAL_SPI_TransmitReceive+0x29c>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c06:	881a      	ldrh	r2, [r3, #0]
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c10:	1c9a      	adds	r2, r3, #2
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c2e:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	695b      	ldr	r3, [r3, #20]
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d11a      	bne.n	8008c74 <HAL_SPI_TransmitReceive+0x2e0>
 8008c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d017      	beq.n	8008c74 <HAL_SPI_TransmitReceive+0x2e0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	8812      	ldrh	r2, [r2, #0]
 8008c4c:	b292      	uxth	r2, r2
 8008c4e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c54:	1c9a      	adds	r2, r3, #2
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	3b01      	subs	r3, #1
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008c72:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c74:	f7f8 fe8e 	bl	8001994 <HAL_GetTick>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d803      	bhi.n	8008c8c <HAL_SPI_TransmitReceive+0x2f8>
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c8a:	d102      	bne.n	8008c92 <HAL_SPI_TransmitReceive+0x2fe>
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d114      	bne.n	8008cbc <HAL_SPI_TransmitReceive+0x328>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f8c4 	bl	8008e20 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ca6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e0ac      	b.n	8008e16 <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008cbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d195      	bne.n	8008bee <HAL_SPI_TransmitReceive+0x25a>
 8008cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d192      	bne.n	8008bee <HAL_SPI_TransmitReceive+0x25a>
 8008cc8:	e07e      	b.n	8008dc8 <HAL_SPI_TransmitReceive+0x434>
 8008cca:	bf00      	nop
 8008ccc:	40013000 	.word	0x40013000
 8008cd0:	50013000 	.word	0x50013000
 8008cd4:	40003800 	.word	0x40003800
 8008cd8:	50003800 	.word	0x50003800
 8008cdc:	40003c00 	.word	0x40003c00
 8008ce0:	50003c00 	.word	0x50003c00
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	695b      	ldr	r3, [r3, #20]
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d11b      	bne.n	8008d2a <HAL_SPI_TransmitReceive+0x396>
 8008cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d018      	beq.n	8008d2a <HAL_SPI_TransmitReceive+0x396>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3320      	adds	r3, #32
 8008d02:	7812      	ldrb	r2, [r2, #0]
 8008d04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d0a:	1c5a      	adds	r2, r3, #1
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->TxXferCount--;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_TxXferCount = hspi->TxXferCount;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008d28:	84fb      	strh	r3, [r7, #38]	; 0x26
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	695b      	ldr	r3, [r3, #20]
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d11d      	bne.n	8008d74 <HAL_SPI_TransmitReceive+0x3e0>
 8008d38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d01a      	beq.n	8008d74 <HAL_SPI_TransmitReceive+0x3e0>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d4a:	7812      	ldrb	r2, [r2, #0]
 8008d4c:	b2d2      	uxtb	r2, r2
 8008d4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	66da      	str	r2, [r3, #108]	; 0x6c
        hspi->RxXferCount--;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	3b01      	subs	r3, #1
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
        initial_RxXferCount = hspi->RxXferCount;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 8008d72:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d74:	f7f8 fe0e 	bl	8001994 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d803      	bhi.n	8008d8c <HAL_SPI_TransmitReceive+0x3f8>
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d8a:	d102      	bne.n	8008d92 <HAL_SPI_TransmitReceive+0x3fe>
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d114      	bne.n	8008dbc <HAL_SPI_TransmitReceive+0x428>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 f844 	bl	8008e20 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008da6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        hspi->State = HAL_SPI_STATE_READY;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
        return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e02c      	b.n	8008e16 <HAL_SPI_TransmitReceive+0x482>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008dbc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d190      	bne.n	8008ce4 <HAL_SPI_TransmitReceive+0x350>
 8008dc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d18d      	bne.n	8008ce4 <HAL_SPI_TransmitReceive+0x350>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	9300      	str	r3, [sp, #0]
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	2200      	movs	r2, #0
 8008dd0:	2108      	movs	r1, #8
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 f8c4 	bl	8008f60 <SPI_WaitOnFlagUntilTimeout>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d007      	beq.n	8008dee <HAL_SPI_TransmitReceive+0x45a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008de4:	f043 0220 	orr.w	r2, r3, #32
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f000 f816 	bl	8008e20 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

  hspi->State = HAL_SPI_STATE_READY;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <HAL_SPI_TransmitReceive+0x47e>
  {
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e001      	b.n	8008e16 <HAL_SPI_TransmitReceive+0x482>
  }
  return errorcode;
 8008e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3728      	adds	r7, #40	; 0x28
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop

08008e20 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	699a      	ldr	r2, [r3, #24]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f042 0208 	orr.w	r2, r2, #8
 8008e3e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	699a      	ldr	r2, [r3, #24]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f042 0210 	orr.w	r2, r2, #16
 8008e4e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 0201 	bic.w	r2, r2, #1
 8008e5e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8008e6e:	f023 0303 	bic.w	r3, r3, #3
 8008e72:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008e82:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b04      	cmp	r3, #4
 8008e8e:	d014      	beq.n	8008eba <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00f      	beq.n	8008eba <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ea0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	699a      	ldr	r2, [r3, #24]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f042 0220 	orr.w	r2, r2, #32
 8008eb8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d014      	beq.n	8008ef0 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00f      	beq.n	8008ef0 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ed6:	f043 0204 	orr.w	r2, r3, #4
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	699a      	ldr	r2, [r3, #24]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eee:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00f      	beq.n	8008f1a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f00:	f043 0201 	orr.w	r2, r3, #1
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	699a      	ldr	r2, [r3, #24]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f18:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00f      	beq.n	8008f44 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f2a:	f043 0208 	orr.w	r2, r3, #8
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	699a      	ldr	r2, [r3, #24]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f42:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
}
 8008f54:	bf00      	nop
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	603b      	str	r3, [r7, #0]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008f70:	e010      	b.n	8008f94 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f72:	f7f8 fd0f 	bl	8001994 <HAL_GetTick>
 8008f76:	4602      	mov	r2, r0
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	1ad3      	subs	r3, r2, r3
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d803      	bhi.n	8008f8a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f88:	d102      	bne.n	8008f90 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d101      	bne.n	8008f94 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	e00f      	b.n	8008fb4 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	695a      	ldr	r2, [r3, #20]
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	bf0c      	ite	eq
 8008fa4:	2301      	moveq	r3, #1
 8008fa6:	2300      	movne	r3, #0
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	461a      	mov	r2, r3
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d0df      	beq.n	8008f72 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc8:	095b      	lsrs	r3, r3, #5
 8008fca:	3301      	adds	r3, #1
 8008fcc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	3307      	adds	r3, #7
 8008fda:	08db      	lsrs	r3, r3, #3
 8008fdc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	fb02 f303 	mul.w	r3, r2, r3
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	e042      	b.n	800908a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f7f8 fa3c 	bl	8001494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2224      	movs	r2, #36	; 0x24
 8009020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0201 	bic.w	r2, r2, #1
 8009032:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009038:	2b00      	cmp	r3, #0
 800903a:	d002      	beq.n	8009042 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fab5 	bl	80095ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f8c4 	bl	80091d0 <UART_SetConfig>
 8009048:	4603      	mov	r3, r0
 800904a:	2b01      	cmp	r3, #1
 800904c:	d101      	bne.n	8009052 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800904e:	2301      	movs	r3, #1
 8009050:	e01b      	b.n	800908a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009060:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009070:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f042 0201 	orr.w	r2, r2, #1
 8009080:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fb34 	bl	80096f0 <UART_CheckIdleState>
 8009088:	4603      	mov	r3, r0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b08a      	sub	sp, #40	; 0x28
 8009096:	af02      	add	r7, sp, #8
 8009098:	60f8      	str	r0, [r7, #12]
 800909a:	60b9      	str	r1, [r7, #8]
 800909c:	603b      	str	r3, [r7, #0]
 800909e:	4613      	mov	r3, r2
 80090a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090a8:	2b20      	cmp	r3, #32
 80090aa:	f040 808b 	bne.w	80091c4 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <HAL_UART_Transmit+0x28>
 80090b4:	88fb      	ldrh	r3, [r7, #6]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e083      	b.n	80091c6 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c8:	2b80      	cmp	r3, #128	; 0x80
 80090ca:	d107      	bne.n	80090dc <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689a      	ldr	r2, [r3, #8]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090da:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2221      	movs	r2, #33	; 0x21
 80090e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80090ec:	f7f8 fc52 	bl	8001994 <HAL_GetTick>
 80090f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	88fa      	ldrh	r2, [r7, #6]
 80090f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	88fa      	ldrh	r2, [r7, #6]
 80090fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800910a:	d108      	bne.n	800911e <HAL_UART_Transmit+0x8c>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d104      	bne.n	800911e <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009114:	2300      	movs	r3, #0
 8009116:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	61bb      	str	r3, [r7, #24]
 800911c:	e003      	b.n	8009126 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009122:	2300      	movs	r3, #0
 8009124:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009126:	e030      	b.n	800918a <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	2200      	movs	r2, #0
 8009130:	2180      	movs	r1, #128	; 0x80
 8009132:	68f8      	ldr	r0, [r7, #12]
 8009134:	f000 fb86 	bl	8009844 <UART_WaitOnFlagUntilTimeout>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2220      	movs	r2, #32
 8009142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8009146:	2303      	movs	r3, #3
 8009148:	e03d      	b.n	80091c6 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10b      	bne.n	8009168 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	461a      	mov	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800915e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	3302      	adds	r3, #2
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	e007      	b.n	8009178 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	781a      	ldrb	r2, [r3, #0]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	3301      	adds	r3, #1
 8009176:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800917e:	b29b      	uxth	r3, r3
 8009180:	3b01      	subs	r3, #1
 8009182:	b29a      	uxth	r2, r3
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009190:	b29b      	uxth	r3, r3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1c8      	bne.n	8009128 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	2200      	movs	r2, #0
 800919e:	2140      	movs	r1, #64	; 0x40
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f000 fb4f 	bl	8009844 <UART_WaitOnFlagUntilTimeout>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d005      	beq.n	80091b8 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2220      	movs	r2, #32
 80091b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80091b4:	2303      	movs	r3, #3
 80091b6:	e006      	b.n	80091c6 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2220      	movs	r2, #32
 80091bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	e000      	b.n	80091c6 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80091c4:	2302      	movs	r3, #2
  }
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3720      	adds	r7, #32
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
	...

080091d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091d4:	b094      	sub	sp, #80	; 0x50
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80091e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	4b78      	ldr	r3, [pc, #480]	; (80093c8 <UART_SetConfig+0x1f8>)
 80091e6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ea:	689a      	ldr	r2, [r3, #8]
 80091ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	431a      	orrs	r2, r3
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	431a      	orrs	r2, r3
 80091f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4971      	ldr	r1, [pc, #452]	; (80093cc <UART_SetConfig+0x1fc>)
 8009208:	4019      	ands	r1, r3
 800920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009210:	430b      	orrs	r3, r1
 8009212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009220:	68d9      	ldr	r1, [r3, #12]
 8009222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	ea40 0301 	orr.w	r3, r0, r1
 800922a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800922c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	4b64      	ldr	r3, [pc, #400]	; (80093c8 <UART_SetConfig+0x1f8>)
 8009238:	429a      	cmp	r2, r3
 800923a:	d009      	beq.n	8009250 <UART_SetConfig+0x80>
 800923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	4b63      	ldr	r3, [pc, #396]	; (80093d0 <UART_SetConfig+0x200>)
 8009242:	429a      	cmp	r2, r3
 8009244:	d004      	beq.n	8009250 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009248:	6a1a      	ldr	r2, [r3, #32]
 800924a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800924c:	4313      	orrs	r3, r2
 800924e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800925a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009264:	430b      	orrs	r3, r1
 8009266:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800926e:	f023 000f 	bic.w	r0, r3, #15
 8009272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009274:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	ea40 0301 	orr.w	r3, r0, r1
 800927e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	4b53      	ldr	r3, [pc, #332]	; (80093d4 <UART_SetConfig+0x204>)
 8009286:	429a      	cmp	r2, r3
 8009288:	d102      	bne.n	8009290 <UART_SetConfig+0xc0>
 800928a:	2301      	movs	r3, #1
 800928c:	64bb      	str	r3, [r7, #72]	; 0x48
 800928e:	e066      	b.n	800935e <UART_SetConfig+0x18e>
 8009290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	4b50      	ldr	r3, [pc, #320]	; (80093d8 <UART_SetConfig+0x208>)
 8009296:	429a      	cmp	r2, r3
 8009298:	d102      	bne.n	80092a0 <UART_SetConfig+0xd0>
 800929a:	2302      	movs	r3, #2
 800929c:	64bb      	str	r3, [r7, #72]	; 0x48
 800929e:	e05e      	b.n	800935e <UART_SetConfig+0x18e>
 80092a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	4b4d      	ldr	r3, [pc, #308]	; (80093dc <UART_SetConfig+0x20c>)
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d102      	bne.n	80092b0 <UART_SetConfig+0xe0>
 80092aa:	2304      	movs	r3, #4
 80092ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80092ae:	e056      	b.n	800935e <UART_SetConfig+0x18e>
 80092b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	4b4a      	ldr	r3, [pc, #296]	; (80093e0 <UART_SetConfig+0x210>)
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d102      	bne.n	80092c0 <UART_SetConfig+0xf0>
 80092ba:	2308      	movs	r3, #8
 80092bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80092be:	e04e      	b.n	800935e <UART_SetConfig+0x18e>
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	4b47      	ldr	r3, [pc, #284]	; (80093e4 <UART_SetConfig+0x214>)
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d102      	bne.n	80092d0 <UART_SetConfig+0x100>
 80092ca:	2310      	movs	r3, #16
 80092cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80092ce:	e046      	b.n	800935e <UART_SetConfig+0x18e>
 80092d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	4b44      	ldr	r3, [pc, #272]	; (80093e8 <UART_SetConfig+0x218>)
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d102      	bne.n	80092e0 <UART_SetConfig+0x110>
 80092da:	2320      	movs	r3, #32
 80092dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80092de:	e03e      	b.n	800935e <UART_SetConfig+0x18e>
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	4b41      	ldr	r3, [pc, #260]	; (80093ec <UART_SetConfig+0x21c>)
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d102      	bne.n	80092f0 <UART_SetConfig+0x120>
 80092ea:	2340      	movs	r3, #64	; 0x40
 80092ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80092ee:	e036      	b.n	800935e <UART_SetConfig+0x18e>
 80092f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	4b3e      	ldr	r3, [pc, #248]	; (80093f0 <UART_SetConfig+0x220>)
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d102      	bne.n	8009300 <UART_SetConfig+0x130>
 80092fa:	2380      	movs	r3, #128	; 0x80
 80092fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80092fe:	e02e      	b.n	800935e <UART_SetConfig+0x18e>
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	4b3b      	ldr	r3, [pc, #236]	; (80093f4 <UART_SetConfig+0x224>)
 8009306:	429a      	cmp	r2, r3
 8009308:	d103      	bne.n	8009312 <UART_SetConfig+0x142>
 800930a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800930e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009310:	e025      	b.n	800935e <UART_SetConfig+0x18e>
 8009312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	4b38      	ldr	r3, [pc, #224]	; (80093f8 <UART_SetConfig+0x228>)
 8009318:	429a      	cmp	r2, r3
 800931a:	d103      	bne.n	8009324 <UART_SetConfig+0x154>
 800931c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009320:	64bb      	str	r3, [r7, #72]	; 0x48
 8009322:	e01c      	b.n	800935e <UART_SetConfig+0x18e>
 8009324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	4b34      	ldr	r3, [pc, #208]	; (80093fc <UART_SetConfig+0x22c>)
 800932a:	429a      	cmp	r2, r3
 800932c:	d103      	bne.n	8009336 <UART_SetConfig+0x166>
 800932e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009332:	64bb      	str	r3, [r7, #72]	; 0x48
 8009334:	e013      	b.n	800935e <UART_SetConfig+0x18e>
 8009336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	4b31      	ldr	r3, [pc, #196]	; (8009400 <UART_SetConfig+0x230>)
 800933c:	429a      	cmp	r2, r3
 800933e:	d103      	bne.n	8009348 <UART_SetConfig+0x178>
 8009340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009344:	64bb      	str	r3, [r7, #72]	; 0x48
 8009346:	e00a      	b.n	800935e <UART_SetConfig+0x18e>
 8009348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	4b1e      	ldr	r3, [pc, #120]	; (80093c8 <UART_SetConfig+0x1f8>)
 800934e:	429a      	cmp	r2, r3
 8009350:	d103      	bne.n	800935a <UART_SetConfig+0x18a>
 8009352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009356:	64bb      	str	r3, [r7, #72]	; 0x48
 8009358:	e001      	b.n	800935e <UART_SetConfig+0x18e>
 800935a:	2300      	movs	r3, #0
 800935c:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800935e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	4b19      	ldr	r3, [pc, #100]	; (80093c8 <UART_SetConfig+0x1f8>)
 8009364:	429a      	cmp	r2, r3
 8009366:	d005      	beq.n	8009374 <UART_SetConfig+0x1a4>
 8009368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	4b18      	ldr	r3, [pc, #96]	; (80093d0 <UART_SetConfig+0x200>)
 800936e:	429a      	cmp	r2, r3
 8009370:	f040 8094 	bne.w	800949c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009376:	2200      	movs	r2, #0
 8009378:	623b      	str	r3, [r7, #32]
 800937a:	627a      	str	r2, [r7, #36]	; 0x24
 800937c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009380:	f7fc f932 	bl	80055e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009384:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 80f7 	beq.w	800957c <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800938e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	4a1c      	ldr	r2, [pc, #112]	; (8009404 <UART_SetConfig+0x234>)
 8009394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009398:	461a      	mov	r2, r3
 800939a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800939c:	fbb3 f3f2 	udiv	r3, r3, r2
 80093a0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	4613      	mov	r3, r2
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	4413      	add	r3, r2
 80093ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d305      	bcc.n	80093be <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80093b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d924      	bls.n	8009408 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80093c4:	e069      	b.n	800949a <UART_SetConfig+0x2ca>
 80093c6:	bf00      	nop
 80093c8:	44002400 	.word	0x44002400
 80093cc:	cfff69f3 	.word	0xcfff69f3
 80093d0:	54002400 	.word	0x54002400
 80093d4:	40013800 	.word	0x40013800
 80093d8:	40004400 	.word	0x40004400
 80093dc:	40004800 	.word	0x40004800
 80093e0:	40004c00 	.word	0x40004c00
 80093e4:	40005000 	.word	0x40005000
 80093e8:	40006400 	.word	0x40006400
 80093ec:	40007800 	.word	0x40007800
 80093f0:	40007c00 	.word	0x40007c00
 80093f4:	40008000 	.word	0x40008000
 80093f8:	40006800 	.word	0x40006800
 80093fc:	40006c00 	.word	0x40006c00
 8009400:	40008400 	.word	0x40008400
 8009404:	0800add8 	.word	0x0800add8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800940a:	2200      	movs	r2, #0
 800940c:	61bb      	str	r3, [r7, #24]
 800940e:	61fa      	str	r2, [r7, #28]
 8009410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	4a64      	ldr	r2, [pc, #400]	; (80095a8 <UART_SetConfig+0x3d8>)
 8009416:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800941a:	b29b      	uxth	r3, r3
 800941c:	2200      	movs	r2, #0
 800941e:	613b      	str	r3, [r7, #16]
 8009420:	617a      	str	r2, [r7, #20]
 8009422:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009426:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800942a:	f7f6 ff2f 	bl	800028c <__aeabi_uldivmod>
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4610      	mov	r0, r2
 8009434:	4619      	mov	r1, r3
 8009436:	f04f 0200 	mov.w	r2, #0
 800943a:	f04f 0300 	mov.w	r3, #0
 800943e:	020b      	lsls	r3, r1, #8
 8009440:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009444:	0202      	lsls	r2, r0, #8
 8009446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009448:	6849      	ldr	r1, [r1, #4]
 800944a:	0849      	lsrs	r1, r1, #1
 800944c:	2000      	movs	r0, #0
 800944e:	460c      	mov	r4, r1
 8009450:	4605      	mov	r5, r0
 8009452:	eb12 0804 	adds.w	r8, r2, r4
 8009456:	eb43 0905 	adc.w	r9, r3, r5
 800945a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	60bb      	str	r3, [r7, #8]
 8009462:	60fa      	str	r2, [r7, #12]
 8009464:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009468:	4640      	mov	r0, r8
 800946a:	4649      	mov	r1, r9
 800946c:	f7f6 ff0e 	bl	800028c <__aeabi_uldivmod>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4613      	mov	r3, r2
 8009476:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800947e:	d308      	bcc.n	8009492 <UART_SetConfig+0x2c2>
 8009480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009486:	d204      	bcs.n	8009492 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8009488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800948e:	60da      	str	r2, [r3, #12]
 8009490:	e003      	b.n	800949a <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8009498:	e070      	b.n	800957c <UART_SetConfig+0x3ac>
 800949a:	e06f      	b.n	800957c <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800949c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094a4:	d13c      	bne.n	8009520 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80094a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094a8:	2200      	movs	r2, #0
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	607a      	str	r2, [r7, #4]
 80094ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094b2:	f7fc f899 	bl	80055e8 <HAL_RCCEx_GetPeriphCLKFreq>
 80094b6:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d05e      	beq.n	800957c <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c2:	4a39      	ldr	r2, [pc, #228]	; (80095a8 <UART_SetConfig+0x3d8>)
 80094c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094c8:	461a      	mov	r2, r3
 80094ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80094d0:	005a      	lsls	r2, r3, #1
 80094d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	085b      	lsrs	r3, r3, #1
 80094d8:	441a      	add	r2, r3
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e6:	2b0f      	cmp	r3, #15
 80094e8:	d916      	bls.n	8009518 <UART_SetConfig+0x348>
 80094ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094f0:	d212      	bcs.n	8009518 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	f023 030f 	bic.w	r3, r3, #15
 80094fa:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fe:	085b      	lsrs	r3, r3, #1
 8009500:	b29b      	uxth	r3, r3
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	b29a      	uxth	r2, r3
 8009508:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800950a:	4313      	orrs	r3, r2
 800950c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009514:	60da      	str	r2, [r3, #12]
 8009516:	e031      	b.n	800957c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800951e:	e02d      	b.n	800957c <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009522:	2200      	movs	r2, #0
 8009524:	469a      	mov	sl, r3
 8009526:	4693      	mov	fp, r2
 8009528:	4650      	mov	r0, sl
 800952a:	4659      	mov	r1, fp
 800952c:	f7fc f85c 	bl	80055e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009530:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8009532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009534:	2b00      	cmp	r3, #0
 8009536:	d021      	beq.n	800957c <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800953a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953c:	4a1a      	ldr	r2, [pc, #104]	; (80095a8 <UART_SetConfig+0x3d8>)
 800953e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009542:	461a      	mov	r2, r3
 8009544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009546:	fbb3 f2f2 	udiv	r2, r3, r2
 800954a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	085b      	lsrs	r3, r3, #1
 8009550:	441a      	add	r2, r3
 8009552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	fbb2 f3f3 	udiv	r3, r2, r3
 800955a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800955c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800955e:	2b0f      	cmp	r3, #15
 8009560:	d909      	bls.n	8009576 <UART_SetConfig+0x3a6>
 8009562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009568:	d205      	bcs.n	8009576 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800956a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956c:	b29a      	uxth	r2, r3
 800956e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	60da      	str	r2, [r3, #12]
 8009574:	e002      	b.n	800957c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800957c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957e:	2201      	movs	r2, #1
 8009580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009586:	2201      	movs	r2, #1
 8009588:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800958c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958e:	2200      	movs	r2, #0
 8009590:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009594:	2200      	movs	r2, #0
 8009596:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009598:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800959c:	4618      	mov	r0, r3
 800959e:	3750      	adds	r7, #80	; 0x50
 80095a0:	46bd      	mov	sp, r7
 80095a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095a6:	bf00      	nop
 80095a8:	0800add8 	.word	0x0800add8

080095ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b8:	f003 0308 	and.w	r3, r3, #8
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00a      	beq.n	80095d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	430a      	orrs	r2, r1
 80095d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00a      	beq.n	80095f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fc:	f003 0302 	and.w	r3, r3, #2
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00a      	beq.n	800961a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	430a      	orrs	r2, r1
 8009618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961e:	f003 0304 	and.w	r3, r3, #4
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00a      	beq.n	800963c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	430a      	orrs	r2, r1
 800963a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009640:	f003 0310 	and.w	r3, r3, #16
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00a      	beq.n	800965e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009662:	f003 0320 	and.w	r3, r3, #32
 8009666:	2b00      	cmp	r3, #0
 8009668:	d00a      	beq.n	8009680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	430a      	orrs	r2, r1
 800967e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009688:	2b00      	cmp	r3, #0
 800968a:	d01a      	beq.n	80096c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	430a      	orrs	r2, r1
 80096a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096aa:	d10a      	bne.n	80096c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	430a      	orrs	r2, r1
 80096c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00a      	beq.n	80096e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	430a      	orrs	r2, r1
 80096e2:	605a      	str	r2, [r3, #4]
  }
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b098      	sub	sp, #96	; 0x60
 80096f4:	af02      	add	r7, sp, #8
 80096f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009700:	f7f8 f948 	bl	8001994 <HAL_GetTick>
 8009704:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 0308 	and.w	r3, r3, #8
 8009710:	2b08      	cmp	r3, #8
 8009712:	d12f      	bne.n	8009774 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800971c:	2200      	movs	r2, #0
 800971e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 f88e 	bl	8009844 <UART_WaitOnFlagUntilTimeout>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d022      	beq.n	8009774 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800973c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800973e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009742:	653b      	str	r3, [r7, #80]	; 0x50
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	461a      	mov	r2, r3
 800974a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800974c:	647b      	str	r3, [r7, #68]	; 0x44
 800974e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009754:	e841 2300 	strex	r3, r2, [r1]
 8009758:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800975a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e6      	bne.n	800972e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2220      	movs	r2, #32
 8009764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009770:	2303      	movs	r3, #3
 8009772:	e063      	b.n	800983c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0304 	and.w	r3, r3, #4
 800977e:	2b04      	cmp	r3, #4
 8009780:	d149      	bne.n	8009816 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009782:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800978a:	2200      	movs	r2, #0
 800978c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f857 	bl	8009844 <UART_WaitOnFlagUntilTimeout>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d03c      	beq.n	8009816 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a4:	e853 3f00 	ldrex	r3, [r3]
 80097a8:	623b      	str	r3, [r7, #32]
   return(result);
 80097aa:	6a3b      	ldr	r3, [r7, #32]
 80097ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	461a      	mov	r2, r3
 80097b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ba:	633b      	str	r3, [r7, #48]	; 0x30
 80097bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097c2:	e841 2300 	strex	r3, r2, [r1]
 80097c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1e6      	bne.n	800979c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	3308      	adds	r3, #8
 80097d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	e853 3f00 	ldrex	r3, [r3]
 80097dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f023 0301 	bic.w	r3, r3, #1
 80097e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3308      	adds	r3, #8
 80097ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097ee:	61fa      	str	r2, [r7, #28]
 80097f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097f2:	69b9      	ldr	r1, [r7, #24]
 80097f4:	69fa      	ldr	r2, [r7, #28]
 80097f6:	e841 2300 	strex	r3, r2, [r1]
 80097fa:	617b      	str	r3, [r7, #20]
   return(result);
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1e5      	bne.n	80097ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2220      	movs	r2, #32
 8009806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e012      	b.n	800983c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2220      	movs	r2, #32
 800981a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2220      	movs	r2, #32
 8009822:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3758      	adds	r7, #88	; 0x58
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	603b      	str	r3, [r7, #0]
 8009850:	4613      	mov	r3, r2
 8009852:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009854:	e049      	b.n	80098ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009856:	69bb      	ldr	r3, [r7, #24]
 8009858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800985c:	d045      	beq.n	80098ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800985e:	f7f8 f899 	bl	8001994 <HAL_GetTick>
 8009862:	4602      	mov	r2, r0
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	69ba      	ldr	r2, [r7, #24]
 800986a:	429a      	cmp	r2, r3
 800986c:	d302      	bcc.n	8009874 <UART_WaitOnFlagUntilTimeout+0x30>
 800986e:	69bb      	ldr	r3, [r7, #24]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009874:	2303      	movs	r3, #3
 8009876:	e048      	b.n	800990a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f003 0304 	and.w	r3, r3, #4
 8009882:	2b00      	cmp	r3, #0
 8009884:	d031      	beq.n	80098ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	69db      	ldr	r3, [r3, #28]
 800988c:	f003 0308 	and.w	r3, r3, #8
 8009890:	2b08      	cmp	r3, #8
 8009892:	d110      	bne.n	80098b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2208      	movs	r2, #8
 800989a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 f838 	bl	8009912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2208      	movs	r2, #8
 80098a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e029      	b.n	800990a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098c4:	d111      	bne.n	80098ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f000 f81e 	bl	8009912 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2220      	movs	r2, #32
 80098da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e00f      	b.n	800990a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	69da      	ldr	r2, [r3, #28]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	4013      	ands	r3, r2
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	bf0c      	ite	eq
 80098fa:	2301      	moveq	r3, #1
 80098fc:	2300      	movne	r3, #0
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	461a      	mov	r2, r3
 8009902:	79fb      	ldrb	r3, [r7, #7]
 8009904:	429a      	cmp	r2, r3
 8009906:	d0a6      	beq.n	8009856 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009912:	b480      	push	{r7}
 8009914:	b095      	sub	sp, #84	; 0x54
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009922:	e853 3f00 	ldrex	r3, [r3]
 8009926:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800992e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	461a      	mov	r2, r3
 8009936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009938:	643b      	str	r3, [r7, #64]	; 0x40
 800993a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800993e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009940:	e841 2300 	strex	r3, r2, [r1]
 8009944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1e6      	bne.n	800991a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	3308      	adds	r3, #8
 8009952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	e853 3f00 	ldrex	r3, [r3]
 800995a:	61fb      	str	r3, [r7, #28]
   return(result);
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009962:	f023 0301 	bic.w	r3, r3, #1
 8009966:	64bb      	str	r3, [r7, #72]	; 0x48
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	3308      	adds	r3, #8
 800996e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009970:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009978:	e841 2300 	strex	r3, r2, [r1]
 800997c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1e3      	bne.n	800994c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009988:	2b01      	cmp	r3, #1
 800998a:	d118      	bne.n	80099be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	60bb      	str	r3, [r7, #8]
   return(result);
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	f023 0310 	bic.w	r3, r3, #16
 80099a0:	647b      	str	r3, [r7, #68]	; 0x44
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099aa:	61bb      	str	r3, [r7, #24]
 80099ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ae:	6979      	ldr	r1, [r7, #20]
 80099b0:	69ba      	ldr	r2, [r7, #24]
 80099b2:	e841 2300 	strex	r3, r2, [r1]
 80099b6:	613b      	str	r3, [r7, #16]
   return(result);
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1e6      	bne.n	800998c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2220      	movs	r2, #32
 80099c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80099d2:	bf00      	nop
 80099d4:	3754      	adds	r7, #84	; 0x54
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80099de:	b480      	push	{r7}
 80099e0:	b085      	sub	sp, #20
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d101      	bne.n	80099f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80099f0:	2302      	movs	r3, #2
 80099f2:	e027      	b.n	8009a44 <HAL_UARTEx_DisableFifoMode+0x66>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2224      	movs	r2, #36	; 0x24
 8009a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f022 0201 	bic.w	r2, r2, #1
 8009a1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2220      	movs	r2, #32
 8009a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3714      	adds	r7, #20
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d101      	bne.n	8009a68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009a64:	2302      	movs	r3, #2
 8009a66:	e02d      	b.n	8009ac4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2224      	movs	r2, #36	; 0x24
 8009a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f022 0201 	bic.w	r2, r2, #1
 8009a8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 f84f 	bl	8009b48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2220      	movs	r2, #32
 8009ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d101      	bne.n	8009ae4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	e02d      	b.n	8009b40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2224      	movs	r2, #36	; 0x24
 8009af0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f022 0201 	bic.w	r2, r2, #1
 8009b0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	430a      	orrs	r2, r1
 8009b1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f811 	bl	8009b48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2220      	movs	r2, #32
 8009b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d108      	bne.n	8009b6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b68:	e031      	b.n	8009bce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b6a:	2308      	movs	r3, #8
 8009b6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b6e:	2308      	movs	r3, #8
 8009b70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	0e5b      	lsrs	r3, r3, #25
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	f003 0307 	and.w	r3, r3, #7
 8009b80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	689b      	ldr	r3, [r3, #8]
 8009b88:	0f5b      	lsrs	r3, r3, #29
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f003 0307 	and.w	r3, r3, #7
 8009b90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b92:	7bbb      	ldrb	r3, [r7, #14]
 8009b94:	7b3a      	ldrb	r2, [r7, #12]
 8009b96:	4911      	ldr	r1, [pc, #68]	; (8009bdc <UARTEx_SetNbDataToProcess+0x94>)
 8009b98:	5c8a      	ldrb	r2, [r1, r2]
 8009b9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b9e:	7b3a      	ldrb	r2, [r7, #12]
 8009ba0:	490f      	ldr	r1, [pc, #60]	; (8009be0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ba2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ba4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
 8009bb2:	7b7a      	ldrb	r2, [r7, #13]
 8009bb4:	4909      	ldr	r1, [pc, #36]	; (8009bdc <UARTEx_SetNbDataToProcess+0x94>)
 8009bb6:	5c8a      	ldrb	r2, [r1, r2]
 8009bb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009bbc:	7b7a      	ldrb	r2, [r7, #13]
 8009bbe:	4908      	ldr	r1, [pc, #32]	; (8009be0 <UARTEx_SetNbDataToProcess+0x98>)
 8009bc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009bce:	bf00      	nop
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	0800adf0 	.word	0x0800adf0
 8009be0:	0800adf8 	.word	0x0800adf8

08009be4 <std>:
 8009be4:	2300      	movs	r3, #0
 8009be6:	b510      	push	{r4, lr}
 8009be8:	4604      	mov	r4, r0
 8009bea:	6083      	str	r3, [r0, #8]
 8009bec:	8181      	strh	r1, [r0, #12]
 8009bee:	4619      	mov	r1, r3
 8009bf0:	6643      	str	r3, [r0, #100]	; 0x64
 8009bf2:	81c2      	strh	r2, [r0, #14]
 8009bf4:	2208      	movs	r2, #8
 8009bf6:	6183      	str	r3, [r0, #24]
 8009bf8:	e9c0 3300 	strd	r3, r3, [r0]
 8009bfc:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c00:	305c      	adds	r0, #92	; 0x5c
 8009c02:	f000 f9ff 	bl	800a004 <memset>
 8009c06:	4b0d      	ldr	r3, [pc, #52]	; (8009c3c <std+0x58>)
 8009c08:	6224      	str	r4, [r4, #32]
 8009c0a:	6263      	str	r3, [r4, #36]	; 0x24
 8009c0c:	4b0c      	ldr	r3, [pc, #48]	; (8009c40 <std+0x5c>)
 8009c0e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c10:	4b0c      	ldr	r3, [pc, #48]	; (8009c44 <std+0x60>)
 8009c12:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c14:	4b0c      	ldr	r3, [pc, #48]	; (8009c48 <std+0x64>)
 8009c16:	6323      	str	r3, [r4, #48]	; 0x30
 8009c18:	4b0c      	ldr	r3, [pc, #48]	; (8009c4c <std+0x68>)
 8009c1a:	429c      	cmp	r4, r3
 8009c1c:	d006      	beq.n	8009c2c <std+0x48>
 8009c1e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009c22:	4294      	cmp	r4, r2
 8009c24:	d002      	beq.n	8009c2c <std+0x48>
 8009c26:	33d0      	adds	r3, #208	; 0xd0
 8009c28:	429c      	cmp	r4, r3
 8009c2a:	d105      	bne.n	8009c38 <std+0x54>
 8009c2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c34:	f000 ba5e 	b.w	800a0f4 <__retarget_lock_init_recursive>
 8009c38:	bd10      	pop	{r4, pc}
 8009c3a:	bf00      	nop
 8009c3c:	08009e55 	.word	0x08009e55
 8009c40:	08009e77 	.word	0x08009e77
 8009c44:	08009eaf 	.word	0x08009eaf
 8009c48:	08009ed3 	.word	0x08009ed3
 8009c4c:	200001c8 	.word	0x200001c8

08009c50 <stdio_exit_handler>:
 8009c50:	4a02      	ldr	r2, [pc, #8]	; (8009c5c <stdio_exit_handler+0xc>)
 8009c52:	4903      	ldr	r1, [pc, #12]	; (8009c60 <stdio_exit_handler+0x10>)
 8009c54:	4803      	ldr	r0, [pc, #12]	; (8009c64 <stdio_exit_handler+0x14>)
 8009c56:	f000 b869 	b.w	8009d2c <_fwalk_sglue>
 8009c5a:	bf00      	nop
 8009c5c:	20000010 	.word	0x20000010
 8009c60:	0800a9a1 	.word	0x0800a9a1
 8009c64:	2000001c 	.word	0x2000001c

08009c68 <cleanup_stdio>:
 8009c68:	6841      	ldr	r1, [r0, #4]
 8009c6a:	4b0c      	ldr	r3, [pc, #48]	; (8009c9c <cleanup_stdio+0x34>)
 8009c6c:	4299      	cmp	r1, r3
 8009c6e:	b510      	push	{r4, lr}
 8009c70:	4604      	mov	r4, r0
 8009c72:	d001      	beq.n	8009c78 <cleanup_stdio+0x10>
 8009c74:	f000 fe94 	bl	800a9a0 <_fflush_r>
 8009c78:	68a1      	ldr	r1, [r4, #8]
 8009c7a:	4b09      	ldr	r3, [pc, #36]	; (8009ca0 <cleanup_stdio+0x38>)
 8009c7c:	4299      	cmp	r1, r3
 8009c7e:	d002      	beq.n	8009c86 <cleanup_stdio+0x1e>
 8009c80:	4620      	mov	r0, r4
 8009c82:	f000 fe8d 	bl	800a9a0 <_fflush_r>
 8009c86:	68e1      	ldr	r1, [r4, #12]
 8009c88:	4b06      	ldr	r3, [pc, #24]	; (8009ca4 <cleanup_stdio+0x3c>)
 8009c8a:	4299      	cmp	r1, r3
 8009c8c:	d004      	beq.n	8009c98 <cleanup_stdio+0x30>
 8009c8e:	4620      	mov	r0, r4
 8009c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c94:	f000 be84 	b.w	800a9a0 <_fflush_r>
 8009c98:	bd10      	pop	{r4, pc}
 8009c9a:	bf00      	nop
 8009c9c:	200001c8 	.word	0x200001c8
 8009ca0:	20000230 	.word	0x20000230
 8009ca4:	20000298 	.word	0x20000298

08009ca8 <global_stdio_init.part.0>:
 8009ca8:	b510      	push	{r4, lr}
 8009caa:	4b0b      	ldr	r3, [pc, #44]	; (8009cd8 <global_stdio_init.part.0+0x30>)
 8009cac:	2104      	movs	r1, #4
 8009cae:	4c0b      	ldr	r4, [pc, #44]	; (8009cdc <global_stdio_init.part.0+0x34>)
 8009cb0:	4a0b      	ldr	r2, [pc, #44]	; (8009ce0 <global_stdio_init.part.0+0x38>)
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f7ff ff94 	bl	8009be4 <std>
 8009cbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	2109      	movs	r1, #9
 8009cc4:	f7ff ff8e 	bl	8009be4 <std>
 8009cc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009ccc:	2202      	movs	r2, #2
 8009cce:	2112      	movs	r1, #18
 8009cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cd4:	f7ff bf86 	b.w	8009be4 <std>
 8009cd8:	20000300 	.word	0x20000300
 8009cdc:	200001c8 	.word	0x200001c8
 8009ce0:	08009c51 	.word	0x08009c51

08009ce4 <__sfp_lock_acquire>:
 8009ce4:	4801      	ldr	r0, [pc, #4]	; (8009cec <__sfp_lock_acquire+0x8>)
 8009ce6:	f000 ba06 	b.w	800a0f6 <__retarget_lock_acquire_recursive>
 8009cea:	bf00      	nop
 8009cec:	20000309 	.word	0x20000309

08009cf0 <__sfp_lock_release>:
 8009cf0:	4801      	ldr	r0, [pc, #4]	; (8009cf8 <__sfp_lock_release+0x8>)
 8009cf2:	f000 ba01 	b.w	800a0f8 <__retarget_lock_release_recursive>
 8009cf6:	bf00      	nop
 8009cf8:	20000309 	.word	0x20000309

08009cfc <__sinit>:
 8009cfc:	b510      	push	{r4, lr}
 8009cfe:	4604      	mov	r4, r0
 8009d00:	f7ff fff0 	bl	8009ce4 <__sfp_lock_acquire>
 8009d04:	6a23      	ldr	r3, [r4, #32]
 8009d06:	b11b      	cbz	r3, 8009d10 <__sinit+0x14>
 8009d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d0c:	f7ff bff0 	b.w	8009cf0 <__sfp_lock_release>
 8009d10:	4b04      	ldr	r3, [pc, #16]	; (8009d24 <__sinit+0x28>)
 8009d12:	6223      	str	r3, [r4, #32]
 8009d14:	4b04      	ldr	r3, [pc, #16]	; (8009d28 <__sinit+0x2c>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1f5      	bne.n	8009d08 <__sinit+0xc>
 8009d1c:	f7ff ffc4 	bl	8009ca8 <global_stdio_init.part.0>
 8009d20:	e7f2      	b.n	8009d08 <__sinit+0xc>
 8009d22:	bf00      	nop
 8009d24:	08009c69 	.word	0x08009c69
 8009d28:	20000300 	.word	0x20000300

08009d2c <_fwalk_sglue>:
 8009d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d30:	4607      	mov	r7, r0
 8009d32:	4688      	mov	r8, r1
 8009d34:	4614      	mov	r4, r2
 8009d36:	2600      	movs	r6, #0
 8009d38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d3c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d40:	d505      	bpl.n	8009d4e <_fwalk_sglue+0x22>
 8009d42:	6824      	ldr	r4, [r4, #0]
 8009d44:	2c00      	cmp	r4, #0
 8009d46:	d1f7      	bne.n	8009d38 <_fwalk_sglue+0xc>
 8009d48:	4630      	mov	r0, r6
 8009d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d4e:	89ab      	ldrh	r3, [r5, #12]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d907      	bls.n	8009d64 <_fwalk_sglue+0x38>
 8009d54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	d003      	beq.n	8009d64 <_fwalk_sglue+0x38>
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	4638      	mov	r0, r7
 8009d60:	47c0      	blx	r8
 8009d62:	4306      	orrs	r6, r0
 8009d64:	3568      	adds	r5, #104	; 0x68
 8009d66:	e7e9      	b.n	8009d3c <_fwalk_sglue+0x10>

08009d68 <iprintf>:
 8009d68:	b40f      	push	{r0, r1, r2, r3}
 8009d6a:	b507      	push	{r0, r1, r2, lr}
 8009d6c:	4906      	ldr	r1, [pc, #24]	; (8009d88 <iprintf+0x20>)
 8009d6e:	ab04      	add	r3, sp, #16
 8009d70:	6808      	ldr	r0, [r1, #0]
 8009d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d76:	6881      	ldr	r1, [r0, #8]
 8009d78:	9301      	str	r3, [sp, #4]
 8009d7a:	f000 fae1 	bl	800a340 <_vfiprintf_r>
 8009d7e:	b003      	add	sp, #12
 8009d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d84:	b004      	add	sp, #16
 8009d86:	4770      	bx	lr
 8009d88:	20000068 	.word	0x20000068

08009d8c <putchar>:
 8009d8c:	4b02      	ldr	r3, [pc, #8]	; (8009d98 <putchar+0xc>)
 8009d8e:	4601      	mov	r1, r0
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	6882      	ldr	r2, [r0, #8]
 8009d94:	f000 be8d 	b.w	800aab2 <_putc_r>
 8009d98:	20000068 	.word	0x20000068

08009d9c <_puts_r>:
 8009d9c:	6a03      	ldr	r3, [r0, #32]
 8009d9e:	b570      	push	{r4, r5, r6, lr}
 8009da0:	4605      	mov	r5, r0
 8009da2:	460e      	mov	r6, r1
 8009da4:	6884      	ldr	r4, [r0, #8]
 8009da6:	b90b      	cbnz	r3, 8009dac <_puts_r+0x10>
 8009da8:	f7ff ffa8 	bl	8009cfc <__sinit>
 8009dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dae:	07db      	lsls	r3, r3, #31
 8009db0:	d405      	bmi.n	8009dbe <_puts_r+0x22>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	0598      	lsls	r0, r3, #22
 8009db6:	d402      	bmi.n	8009dbe <_puts_r+0x22>
 8009db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dba:	f000 f99c 	bl	800a0f6 <__retarget_lock_acquire_recursive>
 8009dbe:	89a3      	ldrh	r3, [r4, #12]
 8009dc0:	0719      	lsls	r1, r3, #28
 8009dc2:	d513      	bpl.n	8009dec <_puts_r+0x50>
 8009dc4:	6923      	ldr	r3, [r4, #16]
 8009dc6:	b18b      	cbz	r3, 8009dec <_puts_r+0x50>
 8009dc8:	3e01      	subs	r6, #1
 8009dca:	68a3      	ldr	r3, [r4, #8]
 8009dcc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	60a3      	str	r3, [r4, #8]
 8009dd4:	b9e9      	cbnz	r1, 8009e12 <_puts_r+0x76>
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	da2e      	bge.n	8009e38 <_puts_r+0x9c>
 8009dda:	4622      	mov	r2, r4
 8009ddc:	210a      	movs	r1, #10
 8009dde:	4628      	mov	r0, r5
 8009de0:	f000 f87b 	bl	8009eda <__swbuf_r>
 8009de4:	3001      	adds	r0, #1
 8009de6:	d007      	beq.n	8009df8 <_puts_r+0x5c>
 8009de8:	250a      	movs	r5, #10
 8009dea:	e007      	b.n	8009dfc <_puts_r+0x60>
 8009dec:	4621      	mov	r1, r4
 8009dee:	4628      	mov	r0, r5
 8009df0:	f000 f8b0 	bl	8009f54 <__swsetup_r>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	d0e7      	beq.n	8009dc8 <_puts_r+0x2c>
 8009df8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009dfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009dfe:	07da      	lsls	r2, r3, #31
 8009e00:	d405      	bmi.n	8009e0e <_puts_r+0x72>
 8009e02:	89a3      	ldrh	r3, [r4, #12]
 8009e04:	059b      	lsls	r3, r3, #22
 8009e06:	d402      	bmi.n	8009e0e <_puts_r+0x72>
 8009e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e0a:	f000 f975 	bl	800a0f8 <__retarget_lock_release_recursive>
 8009e0e:	4628      	mov	r0, r5
 8009e10:	bd70      	pop	{r4, r5, r6, pc}
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	da04      	bge.n	8009e20 <_puts_r+0x84>
 8009e16:	69a2      	ldr	r2, [r4, #24]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	dc06      	bgt.n	8009e2a <_puts_r+0x8e>
 8009e1c:	290a      	cmp	r1, #10
 8009e1e:	d004      	beq.n	8009e2a <_puts_r+0x8e>
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	1c5a      	adds	r2, r3, #1
 8009e24:	6022      	str	r2, [r4, #0]
 8009e26:	7019      	strb	r1, [r3, #0]
 8009e28:	e7cf      	b.n	8009dca <_puts_r+0x2e>
 8009e2a:	4622      	mov	r2, r4
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	f000 f854 	bl	8009eda <__swbuf_r>
 8009e32:	3001      	adds	r0, #1
 8009e34:	d1c9      	bne.n	8009dca <_puts_r+0x2e>
 8009e36:	e7df      	b.n	8009df8 <_puts_r+0x5c>
 8009e38:	6823      	ldr	r3, [r4, #0]
 8009e3a:	250a      	movs	r5, #10
 8009e3c:	1c5a      	adds	r2, r3, #1
 8009e3e:	6022      	str	r2, [r4, #0]
 8009e40:	701d      	strb	r5, [r3, #0]
 8009e42:	e7db      	b.n	8009dfc <_puts_r+0x60>

08009e44 <puts>:
 8009e44:	4b02      	ldr	r3, [pc, #8]	; (8009e50 <puts+0xc>)
 8009e46:	4601      	mov	r1, r0
 8009e48:	6818      	ldr	r0, [r3, #0]
 8009e4a:	f7ff bfa7 	b.w	8009d9c <_puts_r>
 8009e4e:	bf00      	nop
 8009e50:	20000068 	.word	0x20000068

08009e54 <__sread>:
 8009e54:	b510      	push	{r4, lr}
 8009e56:	460c      	mov	r4, r1
 8009e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5c:	f000 f8fc 	bl	800a058 <_read_r>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	bfab      	itete	ge
 8009e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e66:	89a3      	ldrhlt	r3, [r4, #12]
 8009e68:	181b      	addge	r3, r3, r0
 8009e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e6e:	bfac      	ite	ge
 8009e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e72:	81a3      	strhlt	r3, [r4, #12]
 8009e74:	bd10      	pop	{r4, pc}

08009e76 <__swrite>:
 8009e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7a:	461f      	mov	r7, r3
 8009e7c:	898b      	ldrh	r3, [r1, #12]
 8009e7e:	4605      	mov	r5, r0
 8009e80:	460c      	mov	r4, r1
 8009e82:	05db      	lsls	r3, r3, #23
 8009e84:	4616      	mov	r6, r2
 8009e86:	d505      	bpl.n	8009e94 <__swrite+0x1e>
 8009e88:	2302      	movs	r3, #2
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e90:	f000 f8d0 	bl	800a034 <_lseek_r>
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	4632      	mov	r2, r6
 8009e98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ea2:	81a3      	strh	r3, [r4, #12]
 8009ea4:	463b      	mov	r3, r7
 8009ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eaa:	f000 b8e7 	b.w	800a07c <_write_r>

08009eae <__sseek>:
 8009eae:	b510      	push	{r4, lr}
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb6:	f000 f8bd 	bl	800a034 <_lseek_r>
 8009eba:	1c43      	adds	r3, r0, #1
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	bf15      	itete	ne
 8009ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009eca:	81a3      	strheq	r3, [r4, #12]
 8009ecc:	bf18      	it	ne
 8009ece:	81a3      	strhne	r3, [r4, #12]
 8009ed0:	bd10      	pop	{r4, pc}

08009ed2 <__sclose>:
 8009ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed6:	f000 b89d 	b.w	800a014 <_close_r>

08009eda <__swbuf_r>:
 8009eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009edc:	460e      	mov	r6, r1
 8009ede:	4614      	mov	r4, r2
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	b118      	cbz	r0, 8009eec <__swbuf_r+0x12>
 8009ee4:	6a03      	ldr	r3, [r0, #32]
 8009ee6:	b90b      	cbnz	r3, 8009eec <__swbuf_r+0x12>
 8009ee8:	f7ff ff08 	bl	8009cfc <__sinit>
 8009eec:	69a3      	ldr	r3, [r4, #24]
 8009eee:	60a3      	str	r3, [r4, #8]
 8009ef0:	89a3      	ldrh	r3, [r4, #12]
 8009ef2:	071a      	lsls	r2, r3, #28
 8009ef4:	d525      	bpl.n	8009f42 <__swbuf_r+0x68>
 8009ef6:	6923      	ldr	r3, [r4, #16]
 8009ef8:	b31b      	cbz	r3, 8009f42 <__swbuf_r+0x68>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	b2f6      	uxtb	r6, r6
 8009efe:	6922      	ldr	r2, [r4, #16]
 8009f00:	4637      	mov	r7, r6
 8009f02:	1a98      	subs	r0, r3, r2
 8009f04:	6963      	ldr	r3, [r4, #20]
 8009f06:	4283      	cmp	r3, r0
 8009f08:	dc04      	bgt.n	8009f14 <__swbuf_r+0x3a>
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f000 fd47 	bl	800a9a0 <_fflush_r>
 8009f12:	b9e0      	cbnz	r0, 8009f4e <__swbuf_r+0x74>
 8009f14:	68a3      	ldr	r3, [r4, #8]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	60a3      	str	r3, [r4, #8]
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	1c5a      	adds	r2, r3, #1
 8009f1e:	6022      	str	r2, [r4, #0]
 8009f20:	701e      	strb	r6, [r3, #0]
 8009f22:	1c43      	adds	r3, r0, #1
 8009f24:	6962      	ldr	r2, [r4, #20]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d004      	beq.n	8009f34 <__swbuf_r+0x5a>
 8009f2a:	89a3      	ldrh	r3, [r4, #12]
 8009f2c:	07db      	lsls	r3, r3, #31
 8009f2e:	d506      	bpl.n	8009f3e <__swbuf_r+0x64>
 8009f30:	2e0a      	cmp	r6, #10
 8009f32:	d104      	bne.n	8009f3e <__swbuf_r+0x64>
 8009f34:	4621      	mov	r1, r4
 8009f36:	4628      	mov	r0, r5
 8009f38:	f000 fd32 	bl	800a9a0 <_fflush_r>
 8009f3c:	b938      	cbnz	r0, 8009f4e <__swbuf_r+0x74>
 8009f3e:	4638      	mov	r0, r7
 8009f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f42:	4621      	mov	r1, r4
 8009f44:	4628      	mov	r0, r5
 8009f46:	f000 f805 	bl	8009f54 <__swsetup_r>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d0d5      	beq.n	8009efa <__swbuf_r+0x20>
 8009f4e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009f52:	e7f4      	b.n	8009f3e <__swbuf_r+0x64>

08009f54 <__swsetup_r>:
 8009f54:	b538      	push	{r3, r4, r5, lr}
 8009f56:	4b2a      	ldr	r3, [pc, #168]	; (800a000 <__swsetup_r+0xac>)
 8009f58:	4605      	mov	r5, r0
 8009f5a:	460c      	mov	r4, r1
 8009f5c:	6818      	ldr	r0, [r3, #0]
 8009f5e:	b118      	cbz	r0, 8009f68 <__swsetup_r+0x14>
 8009f60:	6a03      	ldr	r3, [r0, #32]
 8009f62:	b90b      	cbnz	r3, 8009f68 <__swsetup_r+0x14>
 8009f64:	f7ff feca 	bl	8009cfc <__sinit>
 8009f68:	89a3      	ldrh	r3, [r4, #12]
 8009f6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f6e:	0718      	lsls	r0, r3, #28
 8009f70:	d422      	bmi.n	8009fb8 <__swsetup_r+0x64>
 8009f72:	06d9      	lsls	r1, r3, #27
 8009f74:	d407      	bmi.n	8009f86 <__swsetup_r+0x32>
 8009f76:	2309      	movs	r3, #9
 8009f78:	602b      	str	r3, [r5, #0]
 8009f7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f82:	81a3      	strh	r3, [r4, #12]
 8009f84:	e034      	b.n	8009ff0 <__swsetup_r+0x9c>
 8009f86:	0758      	lsls	r0, r3, #29
 8009f88:	d512      	bpl.n	8009fb0 <__swsetup_r+0x5c>
 8009f8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f8c:	b141      	cbz	r1, 8009fa0 <__swsetup_r+0x4c>
 8009f8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f92:	4299      	cmp	r1, r3
 8009f94:	d002      	beq.n	8009f9c <__swsetup_r+0x48>
 8009f96:	4628      	mov	r0, r5
 8009f98:	f000 f8b0 	bl	800a0fc <_free_r>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	6363      	str	r3, [r4, #52]	; 0x34
 8009fa0:	89a3      	ldrh	r3, [r4, #12]
 8009fa2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009fa6:	81a3      	strh	r3, [r4, #12]
 8009fa8:	2300      	movs	r3, #0
 8009faa:	6063      	str	r3, [r4, #4]
 8009fac:	6923      	ldr	r3, [r4, #16]
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	89a3      	ldrh	r3, [r4, #12]
 8009fb2:	f043 0308 	orr.w	r3, r3, #8
 8009fb6:	81a3      	strh	r3, [r4, #12]
 8009fb8:	6923      	ldr	r3, [r4, #16]
 8009fba:	b94b      	cbnz	r3, 8009fd0 <__swsetup_r+0x7c>
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fc6:	d003      	beq.n	8009fd0 <__swsetup_r+0x7c>
 8009fc8:	4621      	mov	r1, r4
 8009fca:	4628      	mov	r0, r5
 8009fcc:	f000 fd35 	bl	800aa3a <__smakebuf_r>
 8009fd0:	89a0      	ldrh	r0, [r4, #12]
 8009fd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fd6:	f010 0301 	ands.w	r3, r0, #1
 8009fda:	d00a      	beq.n	8009ff2 <__swsetup_r+0x9e>
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60a3      	str	r3, [r4, #8]
 8009fe0:	6963      	ldr	r3, [r4, #20]
 8009fe2:	425b      	negs	r3, r3
 8009fe4:	61a3      	str	r3, [r4, #24]
 8009fe6:	6923      	ldr	r3, [r4, #16]
 8009fe8:	b943      	cbnz	r3, 8009ffc <__swsetup_r+0xa8>
 8009fea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fee:	d1c4      	bne.n	8009f7a <__swsetup_r+0x26>
 8009ff0:	bd38      	pop	{r3, r4, r5, pc}
 8009ff2:	0781      	lsls	r1, r0, #30
 8009ff4:	bf58      	it	pl
 8009ff6:	6963      	ldrpl	r3, [r4, #20]
 8009ff8:	60a3      	str	r3, [r4, #8]
 8009ffa:	e7f4      	b.n	8009fe6 <__swsetup_r+0x92>
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	e7f7      	b.n	8009ff0 <__swsetup_r+0x9c>
 800a000:	20000068 	.word	0x20000068

0800a004 <memset>:
 800a004:	4402      	add	r2, r0
 800a006:	4603      	mov	r3, r0
 800a008:	4293      	cmp	r3, r2
 800a00a:	d100      	bne.n	800a00e <memset+0xa>
 800a00c:	4770      	bx	lr
 800a00e:	f803 1b01 	strb.w	r1, [r3], #1
 800a012:	e7f9      	b.n	800a008 <memset+0x4>

0800a014 <_close_r>:
 800a014:	b538      	push	{r3, r4, r5, lr}
 800a016:	2300      	movs	r3, #0
 800a018:	4d05      	ldr	r5, [pc, #20]	; (800a030 <_close_r+0x1c>)
 800a01a:	4604      	mov	r4, r0
 800a01c:	4608      	mov	r0, r1
 800a01e:	602b      	str	r3, [r5, #0]
 800a020:	f7f7 fb38 	bl	8001694 <_close>
 800a024:	1c43      	adds	r3, r0, #1
 800a026:	d102      	bne.n	800a02e <_close_r+0x1a>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	b103      	cbz	r3, 800a02e <_close_r+0x1a>
 800a02c:	6023      	str	r3, [r4, #0]
 800a02e:	bd38      	pop	{r3, r4, r5, pc}
 800a030:	20000304 	.word	0x20000304

0800a034 <_lseek_r>:
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4604      	mov	r4, r0
 800a038:	4d06      	ldr	r5, [pc, #24]	; (800a054 <_lseek_r+0x20>)
 800a03a:	4608      	mov	r0, r1
 800a03c:	4611      	mov	r1, r2
 800a03e:	2200      	movs	r2, #0
 800a040:	602a      	str	r2, [r5, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	f7f7 fb4d 	bl	80016e2 <_lseek>
 800a048:	1c43      	adds	r3, r0, #1
 800a04a:	d102      	bne.n	800a052 <_lseek_r+0x1e>
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	b103      	cbz	r3, 800a052 <_lseek_r+0x1e>
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	bd38      	pop	{r3, r4, r5, pc}
 800a054:	20000304 	.word	0x20000304

0800a058 <_read_r>:
 800a058:	b538      	push	{r3, r4, r5, lr}
 800a05a:	4604      	mov	r4, r0
 800a05c:	4d06      	ldr	r5, [pc, #24]	; (800a078 <_read_r+0x20>)
 800a05e:	4608      	mov	r0, r1
 800a060:	4611      	mov	r1, r2
 800a062:	2200      	movs	r2, #0
 800a064:	602a      	str	r2, [r5, #0]
 800a066:	461a      	mov	r2, r3
 800a068:	f7f7 fadb 	bl	8001622 <_read>
 800a06c:	1c43      	adds	r3, r0, #1
 800a06e:	d102      	bne.n	800a076 <_read_r+0x1e>
 800a070:	682b      	ldr	r3, [r5, #0]
 800a072:	b103      	cbz	r3, 800a076 <_read_r+0x1e>
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	bd38      	pop	{r3, r4, r5, pc}
 800a078:	20000304 	.word	0x20000304

0800a07c <_write_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4604      	mov	r4, r0
 800a080:	4d06      	ldr	r5, [pc, #24]	; (800a09c <_write_r+0x20>)
 800a082:	4608      	mov	r0, r1
 800a084:	4611      	mov	r1, r2
 800a086:	2200      	movs	r2, #0
 800a088:	602a      	str	r2, [r5, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	f7f7 fae6 	bl	800165c <_write>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	d102      	bne.n	800a09a <_write_r+0x1e>
 800a094:	682b      	ldr	r3, [r5, #0]
 800a096:	b103      	cbz	r3, 800a09a <_write_r+0x1e>
 800a098:	6023      	str	r3, [r4, #0]
 800a09a:	bd38      	pop	{r3, r4, r5, pc}
 800a09c:	20000304 	.word	0x20000304

0800a0a0 <__errno>:
 800a0a0:	4b01      	ldr	r3, [pc, #4]	; (800a0a8 <__errno+0x8>)
 800a0a2:	6818      	ldr	r0, [r3, #0]
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	20000068 	.word	0x20000068

0800a0ac <__libc_init_array>:
 800a0ac:	b570      	push	{r4, r5, r6, lr}
 800a0ae:	4d0d      	ldr	r5, [pc, #52]	; (800a0e4 <__libc_init_array+0x38>)
 800a0b0:	2600      	movs	r6, #0
 800a0b2:	4c0d      	ldr	r4, [pc, #52]	; (800a0e8 <__libc_init_array+0x3c>)
 800a0b4:	1b64      	subs	r4, r4, r5
 800a0b6:	10a4      	asrs	r4, r4, #2
 800a0b8:	42a6      	cmp	r6, r4
 800a0ba:	d109      	bne.n	800a0d0 <__libc_init_array+0x24>
 800a0bc:	4d0b      	ldr	r5, [pc, #44]	; (800a0ec <__libc_init_array+0x40>)
 800a0be:	2600      	movs	r6, #0
 800a0c0:	4c0b      	ldr	r4, [pc, #44]	; (800a0f0 <__libc_init_array+0x44>)
 800a0c2:	f000 fd6b 	bl	800ab9c <_init>
 800a0c6:	1b64      	subs	r4, r4, r5
 800a0c8:	10a4      	asrs	r4, r4, #2
 800a0ca:	42a6      	cmp	r6, r4
 800a0cc:	d105      	bne.n	800a0da <__libc_init_array+0x2e>
 800a0ce:	bd70      	pop	{r4, r5, r6, pc}
 800a0d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0d4:	3601      	adds	r6, #1
 800a0d6:	4798      	blx	r3
 800a0d8:	e7ee      	b.n	800a0b8 <__libc_init_array+0xc>
 800a0da:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0de:	3601      	adds	r6, #1
 800a0e0:	4798      	blx	r3
 800a0e2:	e7f2      	b.n	800a0ca <__libc_init_array+0x1e>
 800a0e4:	0800ae3c 	.word	0x0800ae3c
 800a0e8:	0800ae3c 	.word	0x0800ae3c
 800a0ec:	0800ae3c 	.word	0x0800ae3c
 800a0f0:	0800ae40 	.word	0x0800ae40

0800a0f4 <__retarget_lock_init_recursive>:
 800a0f4:	4770      	bx	lr

0800a0f6 <__retarget_lock_acquire_recursive>:
 800a0f6:	4770      	bx	lr

0800a0f8 <__retarget_lock_release_recursive>:
 800a0f8:	4770      	bx	lr
	...

0800a0fc <_free_r>:
 800a0fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0fe:	2900      	cmp	r1, #0
 800a100:	d043      	beq.n	800a18a <_free_r+0x8e>
 800a102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a106:	1f0c      	subs	r4, r1, #4
 800a108:	9001      	str	r0, [sp, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	bfb8      	it	lt
 800a10e:	18e4      	addlt	r4, r4, r3
 800a110:	f000 f8e0 	bl	800a2d4 <__malloc_lock>
 800a114:	4a1e      	ldr	r2, [pc, #120]	; (800a190 <_free_r+0x94>)
 800a116:	9801      	ldr	r0, [sp, #4]
 800a118:	6813      	ldr	r3, [r2, #0]
 800a11a:	b933      	cbnz	r3, 800a12a <_free_r+0x2e>
 800a11c:	6063      	str	r3, [r4, #4]
 800a11e:	6014      	str	r4, [r2, #0]
 800a120:	b003      	add	sp, #12
 800a122:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a126:	f000 b8db 	b.w	800a2e0 <__malloc_unlock>
 800a12a:	42a3      	cmp	r3, r4
 800a12c:	d908      	bls.n	800a140 <_free_r+0x44>
 800a12e:	6825      	ldr	r5, [r4, #0]
 800a130:	1961      	adds	r1, r4, r5
 800a132:	428b      	cmp	r3, r1
 800a134:	bf01      	itttt	eq
 800a136:	6819      	ldreq	r1, [r3, #0]
 800a138:	685b      	ldreq	r3, [r3, #4]
 800a13a:	1949      	addeq	r1, r1, r5
 800a13c:	6021      	streq	r1, [r4, #0]
 800a13e:	e7ed      	b.n	800a11c <_free_r+0x20>
 800a140:	461a      	mov	r2, r3
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	b10b      	cbz	r3, 800a14a <_free_r+0x4e>
 800a146:	42a3      	cmp	r3, r4
 800a148:	d9fa      	bls.n	800a140 <_free_r+0x44>
 800a14a:	6811      	ldr	r1, [r2, #0]
 800a14c:	1855      	adds	r5, r2, r1
 800a14e:	42a5      	cmp	r5, r4
 800a150:	d10b      	bne.n	800a16a <_free_r+0x6e>
 800a152:	6824      	ldr	r4, [r4, #0]
 800a154:	4421      	add	r1, r4
 800a156:	1854      	adds	r4, r2, r1
 800a158:	6011      	str	r1, [r2, #0]
 800a15a:	42a3      	cmp	r3, r4
 800a15c:	d1e0      	bne.n	800a120 <_free_r+0x24>
 800a15e:	681c      	ldr	r4, [r3, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	440c      	add	r4, r1
 800a164:	6053      	str	r3, [r2, #4]
 800a166:	6014      	str	r4, [r2, #0]
 800a168:	e7da      	b.n	800a120 <_free_r+0x24>
 800a16a:	d902      	bls.n	800a172 <_free_r+0x76>
 800a16c:	230c      	movs	r3, #12
 800a16e:	6003      	str	r3, [r0, #0]
 800a170:	e7d6      	b.n	800a120 <_free_r+0x24>
 800a172:	6825      	ldr	r5, [r4, #0]
 800a174:	1961      	adds	r1, r4, r5
 800a176:	428b      	cmp	r3, r1
 800a178:	bf02      	ittt	eq
 800a17a:	6819      	ldreq	r1, [r3, #0]
 800a17c:	685b      	ldreq	r3, [r3, #4]
 800a17e:	1949      	addeq	r1, r1, r5
 800a180:	6063      	str	r3, [r4, #4]
 800a182:	bf08      	it	eq
 800a184:	6021      	streq	r1, [r4, #0]
 800a186:	6054      	str	r4, [r2, #4]
 800a188:	e7ca      	b.n	800a120 <_free_r+0x24>
 800a18a:	b003      	add	sp, #12
 800a18c:	bd30      	pop	{r4, r5, pc}
 800a18e:	bf00      	nop
 800a190:	2000030c 	.word	0x2000030c

0800a194 <sbrk_aligned>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	4e0e      	ldr	r6, [pc, #56]	; (800a1d0 <sbrk_aligned+0x3c>)
 800a198:	460c      	mov	r4, r1
 800a19a:	4605      	mov	r5, r0
 800a19c:	6831      	ldr	r1, [r6, #0]
 800a19e:	b911      	cbnz	r1, 800a1a6 <sbrk_aligned+0x12>
 800a1a0:	f000 fcde 	bl	800ab60 <_sbrk_r>
 800a1a4:	6030      	str	r0, [r6, #0]
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f000 fcd9 	bl	800ab60 <_sbrk_r>
 800a1ae:	1c43      	adds	r3, r0, #1
 800a1b0:	d00a      	beq.n	800a1c8 <sbrk_aligned+0x34>
 800a1b2:	1cc4      	adds	r4, r0, #3
 800a1b4:	f024 0403 	bic.w	r4, r4, #3
 800a1b8:	42a0      	cmp	r0, r4
 800a1ba:	d007      	beq.n	800a1cc <sbrk_aligned+0x38>
 800a1bc:	1a21      	subs	r1, r4, r0
 800a1be:	4628      	mov	r0, r5
 800a1c0:	f000 fcce 	bl	800ab60 <_sbrk_r>
 800a1c4:	3001      	adds	r0, #1
 800a1c6:	d101      	bne.n	800a1cc <sbrk_aligned+0x38>
 800a1c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	bd70      	pop	{r4, r5, r6, pc}
 800a1d0:	20000310 	.word	0x20000310

0800a1d4 <_malloc_r>:
 800a1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1d8:	1ccd      	adds	r5, r1, #3
 800a1da:	4607      	mov	r7, r0
 800a1dc:	f025 0503 	bic.w	r5, r5, #3
 800a1e0:	3508      	adds	r5, #8
 800a1e2:	2d0c      	cmp	r5, #12
 800a1e4:	bf38      	it	cc
 800a1e6:	250c      	movcc	r5, #12
 800a1e8:	2d00      	cmp	r5, #0
 800a1ea:	db01      	blt.n	800a1f0 <_malloc_r+0x1c>
 800a1ec:	42a9      	cmp	r1, r5
 800a1ee:	d905      	bls.n	800a1fc <_malloc_r+0x28>
 800a1f0:	230c      	movs	r3, #12
 800a1f2:	2600      	movs	r6, #0
 800a1f4:	603b      	str	r3, [r7, #0]
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2d0 <_malloc_r+0xfc>
 800a200:	f000 f868 	bl	800a2d4 <__malloc_lock>
 800a204:	f8d8 3000 	ldr.w	r3, [r8]
 800a208:	461c      	mov	r4, r3
 800a20a:	bb5c      	cbnz	r4, 800a264 <_malloc_r+0x90>
 800a20c:	4629      	mov	r1, r5
 800a20e:	4638      	mov	r0, r7
 800a210:	f7ff ffc0 	bl	800a194 <sbrk_aligned>
 800a214:	1c43      	adds	r3, r0, #1
 800a216:	4604      	mov	r4, r0
 800a218:	d155      	bne.n	800a2c6 <_malloc_r+0xf2>
 800a21a:	f8d8 4000 	ldr.w	r4, [r8]
 800a21e:	4626      	mov	r6, r4
 800a220:	2e00      	cmp	r6, #0
 800a222:	d145      	bne.n	800a2b0 <_malloc_r+0xdc>
 800a224:	2c00      	cmp	r4, #0
 800a226:	d048      	beq.n	800a2ba <_malloc_r+0xe6>
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	4631      	mov	r1, r6
 800a22c:	4638      	mov	r0, r7
 800a22e:	eb04 0903 	add.w	r9, r4, r3
 800a232:	f000 fc95 	bl	800ab60 <_sbrk_r>
 800a236:	4581      	cmp	r9, r0
 800a238:	d13f      	bne.n	800a2ba <_malloc_r+0xe6>
 800a23a:	6821      	ldr	r1, [r4, #0]
 800a23c:	4638      	mov	r0, r7
 800a23e:	1a6d      	subs	r5, r5, r1
 800a240:	4629      	mov	r1, r5
 800a242:	f7ff ffa7 	bl	800a194 <sbrk_aligned>
 800a246:	3001      	adds	r0, #1
 800a248:	d037      	beq.n	800a2ba <_malloc_r+0xe6>
 800a24a:	6823      	ldr	r3, [r4, #0]
 800a24c:	442b      	add	r3, r5
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	f8d8 3000 	ldr.w	r3, [r8]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d038      	beq.n	800a2ca <_malloc_r+0xf6>
 800a258:	685a      	ldr	r2, [r3, #4]
 800a25a:	42a2      	cmp	r2, r4
 800a25c:	d12b      	bne.n	800a2b6 <_malloc_r+0xe2>
 800a25e:	2200      	movs	r2, #0
 800a260:	605a      	str	r2, [r3, #4]
 800a262:	e00f      	b.n	800a284 <_malloc_r+0xb0>
 800a264:	6822      	ldr	r2, [r4, #0]
 800a266:	1b52      	subs	r2, r2, r5
 800a268:	d41f      	bmi.n	800a2aa <_malloc_r+0xd6>
 800a26a:	2a0b      	cmp	r2, #11
 800a26c:	d917      	bls.n	800a29e <_malloc_r+0xca>
 800a26e:	1961      	adds	r1, r4, r5
 800a270:	42a3      	cmp	r3, r4
 800a272:	6025      	str	r5, [r4, #0]
 800a274:	bf18      	it	ne
 800a276:	6059      	strne	r1, [r3, #4]
 800a278:	6863      	ldr	r3, [r4, #4]
 800a27a:	bf08      	it	eq
 800a27c:	f8c8 1000 	streq.w	r1, [r8]
 800a280:	5162      	str	r2, [r4, r5]
 800a282:	604b      	str	r3, [r1, #4]
 800a284:	f104 060b 	add.w	r6, r4, #11
 800a288:	4638      	mov	r0, r7
 800a28a:	f000 f829 	bl	800a2e0 <__malloc_unlock>
 800a28e:	1d23      	adds	r3, r4, #4
 800a290:	f026 0607 	bic.w	r6, r6, #7
 800a294:	1af2      	subs	r2, r6, r3
 800a296:	d0ae      	beq.n	800a1f6 <_malloc_r+0x22>
 800a298:	1b9b      	subs	r3, r3, r6
 800a29a:	50a3      	str	r3, [r4, r2]
 800a29c:	e7ab      	b.n	800a1f6 <_malloc_r+0x22>
 800a29e:	42a3      	cmp	r3, r4
 800a2a0:	6862      	ldr	r2, [r4, #4]
 800a2a2:	d1dd      	bne.n	800a260 <_malloc_r+0x8c>
 800a2a4:	f8c8 2000 	str.w	r2, [r8]
 800a2a8:	e7ec      	b.n	800a284 <_malloc_r+0xb0>
 800a2aa:	4623      	mov	r3, r4
 800a2ac:	6864      	ldr	r4, [r4, #4]
 800a2ae:	e7ac      	b.n	800a20a <_malloc_r+0x36>
 800a2b0:	4634      	mov	r4, r6
 800a2b2:	6876      	ldr	r6, [r6, #4]
 800a2b4:	e7b4      	b.n	800a220 <_malloc_r+0x4c>
 800a2b6:	4613      	mov	r3, r2
 800a2b8:	e7cc      	b.n	800a254 <_malloc_r+0x80>
 800a2ba:	230c      	movs	r3, #12
 800a2bc:	4638      	mov	r0, r7
 800a2be:	603b      	str	r3, [r7, #0]
 800a2c0:	f000 f80e 	bl	800a2e0 <__malloc_unlock>
 800a2c4:	e797      	b.n	800a1f6 <_malloc_r+0x22>
 800a2c6:	6025      	str	r5, [r4, #0]
 800a2c8:	e7dc      	b.n	800a284 <_malloc_r+0xb0>
 800a2ca:	605b      	str	r3, [r3, #4]
 800a2cc:	deff      	udf	#255	; 0xff
 800a2ce:	bf00      	nop
 800a2d0:	2000030c 	.word	0x2000030c

0800a2d4 <__malloc_lock>:
 800a2d4:	4801      	ldr	r0, [pc, #4]	; (800a2dc <__malloc_lock+0x8>)
 800a2d6:	f7ff bf0e 	b.w	800a0f6 <__retarget_lock_acquire_recursive>
 800a2da:	bf00      	nop
 800a2dc:	20000308 	.word	0x20000308

0800a2e0 <__malloc_unlock>:
 800a2e0:	4801      	ldr	r0, [pc, #4]	; (800a2e8 <__malloc_unlock+0x8>)
 800a2e2:	f7ff bf09 	b.w	800a0f8 <__retarget_lock_release_recursive>
 800a2e6:	bf00      	nop
 800a2e8:	20000308 	.word	0x20000308

0800a2ec <__sfputc_r>:
 800a2ec:	6893      	ldr	r3, [r2, #8]
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	6093      	str	r3, [r2, #8]
 800a2f4:	b410      	push	{r4}
 800a2f6:	da08      	bge.n	800a30a <__sfputc_r+0x1e>
 800a2f8:	6994      	ldr	r4, [r2, #24]
 800a2fa:	42a3      	cmp	r3, r4
 800a2fc:	db01      	blt.n	800a302 <__sfputc_r+0x16>
 800a2fe:	290a      	cmp	r1, #10
 800a300:	d103      	bne.n	800a30a <__sfputc_r+0x1e>
 800a302:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a306:	f7ff bde8 	b.w	8009eda <__swbuf_r>
 800a30a:	6813      	ldr	r3, [r2, #0]
 800a30c:	1c58      	adds	r0, r3, #1
 800a30e:	6010      	str	r0, [r2, #0]
 800a310:	4608      	mov	r0, r1
 800a312:	7019      	strb	r1, [r3, #0]
 800a314:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <__sfputs_r>:
 800a31a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31c:	4606      	mov	r6, r0
 800a31e:	460f      	mov	r7, r1
 800a320:	4614      	mov	r4, r2
 800a322:	18d5      	adds	r5, r2, r3
 800a324:	42ac      	cmp	r4, r5
 800a326:	d101      	bne.n	800a32c <__sfputs_r+0x12>
 800a328:	2000      	movs	r0, #0
 800a32a:	e007      	b.n	800a33c <__sfputs_r+0x22>
 800a32c:	463a      	mov	r2, r7
 800a32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a332:	4630      	mov	r0, r6
 800a334:	f7ff ffda 	bl	800a2ec <__sfputc_r>
 800a338:	1c43      	adds	r3, r0, #1
 800a33a:	d1f3      	bne.n	800a324 <__sfputs_r+0xa>
 800a33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a340 <_vfiprintf_r>:
 800a340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a344:	460d      	mov	r5, r1
 800a346:	b09d      	sub	sp, #116	; 0x74
 800a348:	4614      	mov	r4, r2
 800a34a:	4698      	mov	r8, r3
 800a34c:	4606      	mov	r6, r0
 800a34e:	b118      	cbz	r0, 800a358 <_vfiprintf_r+0x18>
 800a350:	6a03      	ldr	r3, [r0, #32]
 800a352:	b90b      	cbnz	r3, 800a358 <_vfiprintf_r+0x18>
 800a354:	f7ff fcd2 	bl	8009cfc <__sinit>
 800a358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a35a:	07d9      	lsls	r1, r3, #31
 800a35c:	d405      	bmi.n	800a36a <_vfiprintf_r+0x2a>
 800a35e:	89ab      	ldrh	r3, [r5, #12]
 800a360:	059a      	lsls	r2, r3, #22
 800a362:	d402      	bmi.n	800a36a <_vfiprintf_r+0x2a>
 800a364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a366:	f7ff fec6 	bl	800a0f6 <__retarget_lock_acquire_recursive>
 800a36a:	89ab      	ldrh	r3, [r5, #12]
 800a36c:	071b      	lsls	r3, r3, #28
 800a36e:	d501      	bpl.n	800a374 <_vfiprintf_r+0x34>
 800a370:	692b      	ldr	r3, [r5, #16]
 800a372:	b99b      	cbnz	r3, 800a39c <_vfiprintf_r+0x5c>
 800a374:	4629      	mov	r1, r5
 800a376:	4630      	mov	r0, r6
 800a378:	f7ff fdec 	bl	8009f54 <__swsetup_r>
 800a37c:	b170      	cbz	r0, 800a39c <_vfiprintf_r+0x5c>
 800a37e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a380:	07dc      	lsls	r4, r3, #31
 800a382:	d504      	bpl.n	800a38e <_vfiprintf_r+0x4e>
 800a384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a388:	b01d      	add	sp, #116	; 0x74
 800a38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38e:	89ab      	ldrh	r3, [r5, #12]
 800a390:	0598      	lsls	r0, r3, #22
 800a392:	d4f7      	bmi.n	800a384 <_vfiprintf_r+0x44>
 800a394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a396:	f7ff feaf 	bl	800a0f8 <__retarget_lock_release_recursive>
 800a39a:	e7f3      	b.n	800a384 <_vfiprintf_r+0x44>
 800a39c:	2300      	movs	r3, #0
 800a39e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3a2:	f04f 0901 	mov.w	r9, #1
 800a3a6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800a560 <_vfiprintf_r+0x220>
 800a3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ac:	2320      	movs	r3, #32
 800a3ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3b2:	2330      	movs	r3, #48	; 0x30
 800a3b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3b8:	4623      	mov	r3, r4
 800a3ba:	469a      	mov	sl, r3
 800a3bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3c0:	b10a      	cbz	r2, 800a3c6 <_vfiprintf_r+0x86>
 800a3c2:	2a25      	cmp	r2, #37	; 0x25
 800a3c4:	d1f9      	bne.n	800a3ba <_vfiprintf_r+0x7a>
 800a3c6:	ebba 0b04 	subs.w	fp, sl, r4
 800a3ca:	d00b      	beq.n	800a3e4 <_vfiprintf_r+0xa4>
 800a3cc:	465b      	mov	r3, fp
 800a3ce:	4622      	mov	r2, r4
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f7ff ffa1 	bl	800a31a <__sfputs_r>
 800a3d8:	3001      	adds	r0, #1
 800a3da:	f000 80a9 	beq.w	800a530 <_vfiprintf_r+0x1f0>
 800a3de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3e0:	445a      	add	r2, fp
 800a3e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 80a1 	beq.w	800a530 <_vfiprintf_r+0x1f0>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3f4:	f10a 0a01 	add.w	sl, sl, #1
 800a3f8:	9304      	str	r3, [sp, #16]
 800a3fa:	9307      	str	r3, [sp, #28]
 800a3fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a400:	931a      	str	r3, [sp, #104]	; 0x68
 800a402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a406:	4654      	mov	r4, sl
 800a408:	2205      	movs	r2, #5
 800a40a:	4855      	ldr	r0, [pc, #340]	; (800a560 <_vfiprintf_r+0x220>)
 800a40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a410:	f000 fbb6 	bl	800ab80 <memchr>
 800a414:	9a04      	ldr	r2, [sp, #16]
 800a416:	b9d8      	cbnz	r0, 800a450 <_vfiprintf_r+0x110>
 800a418:	06d1      	lsls	r1, r2, #27
 800a41a:	bf44      	itt	mi
 800a41c:	2320      	movmi	r3, #32
 800a41e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a422:	0713      	lsls	r3, r2, #28
 800a424:	bf44      	itt	mi
 800a426:	232b      	movmi	r3, #43	; 0x2b
 800a428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a42c:	f89a 3000 	ldrb.w	r3, [sl]
 800a430:	2b2a      	cmp	r3, #42	; 0x2a
 800a432:	d015      	beq.n	800a460 <_vfiprintf_r+0x120>
 800a434:	9a07      	ldr	r2, [sp, #28]
 800a436:	4654      	mov	r4, sl
 800a438:	2000      	movs	r0, #0
 800a43a:	f04f 0c0a 	mov.w	ip, #10
 800a43e:	4621      	mov	r1, r4
 800a440:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a444:	3b30      	subs	r3, #48	; 0x30
 800a446:	2b09      	cmp	r3, #9
 800a448:	d94d      	bls.n	800a4e6 <_vfiprintf_r+0x1a6>
 800a44a:	b1b0      	cbz	r0, 800a47a <_vfiprintf_r+0x13a>
 800a44c:	9207      	str	r2, [sp, #28]
 800a44e:	e014      	b.n	800a47a <_vfiprintf_r+0x13a>
 800a450:	eba0 0308 	sub.w	r3, r0, r8
 800a454:	46a2      	mov	sl, r4
 800a456:	fa09 f303 	lsl.w	r3, r9, r3
 800a45a:	4313      	orrs	r3, r2
 800a45c:	9304      	str	r3, [sp, #16]
 800a45e:	e7d2      	b.n	800a406 <_vfiprintf_r+0xc6>
 800a460:	9b03      	ldr	r3, [sp, #12]
 800a462:	1d19      	adds	r1, r3, #4
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	9103      	str	r1, [sp, #12]
 800a46a:	bfbb      	ittet	lt
 800a46c:	425b      	neglt	r3, r3
 800a46e:	f042 0202 	orrlt.w	r2, r2, #2
 800a472:	9307      	strge	r3, [sp, #28]
 800a474:	9307      	strlt	r3, [sp, #28]
 800a476:	bfb8      	it	lt
 800a478:	9204      	strlt	r2, [sp, #16]
 800a47a:	7823      	ldrb	r3, [r4, #0]
 800a47c:	2b2e      	cmp	r3, #46	; 0x2e
 800a47e:	d10c      	bne.n	800a49a <_vfiprintf_r+0x15a>
 800a480:	7863      	ldrb	r3, [r4, #1]
 800a482:	2b2a      	cmp	r3, #42	; 0x2a
 800a484:	d134      	bne.n	800a4f0 <_vfiprintf_r+0x1b0>
 800a486:	9b03      	ldr	r3, [sp, #12]
 800a488:	3402      	adds	r4, #2
 800a48a:	1d1a      	adds	r2, r3, #4
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	9203      	str	r2, [sp, #12]
 800a492:	bfb8      	it	lt
 800a494:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a498:	9305      	str	r3, [sp, #20]
 800a49a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a570 <_vfiprintf_r+0x230>
 800a49e:	2203      	movs	r2, #3
 800a4a0:	7821      	ldrb	r1, [r4, #0]
 800a4a2:	4650      	mov	r0, sl
 800a4a4:	f000 fb6c 	bl	800ab80 <memchr>
 800a4a8:	b138      	cbz	r0, 800a4ba <_vfiprintf_r+0x17a>
 800a4aa:	eba0 000a 	sub.w	r0, r0, sl
 800a4ae:	2240      	movs	r2, #64	; 0x40
 800a4b0:	9b04      	ldr	r3, [sp, #16]
 800a4b2:	3401      	adds	r4, #1
 800a4b4:	4082      	lsls	r2, r0
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	9304      	str	r3, [sp, #16]
 800a4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4be:	2206      	movs	r2, #6
 800a4c0:	4828      	ldr	r0, [pc, #160]	; (800a564 <_vfiprintf_r+0x224>)
 800a4c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4c6:	f000 fb5b 	bl	800ab80 <memchr>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d03f      	beq.n	800a54e <_vfiprintf_r+0x20e>
 800a4ce:	4b26      	ldr	r3, [pc, #152]	; (800a568 <_vfiprintf_r+0x228>)
 800a4d0:	bb1b      	cbnz	r3, 800a51a <_vfiprintf_r+0x1da>
 800a4d2:	9b03      	ldr	r3, [sp, #12]
 800a4d4:	3307      	adds	r3, #7
 800a4d6:	f023 0307 	bic.w	r3, r3, #7
 800a4da:	3308      	adds	r3, #8
 800a4dc:	9303      	str	r3, [sp, #12]
 800a4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4e0:	443b      	add	r3, r7
 800a4e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e4:	e768      	b.n	800a3b8 <_vfiprintf_r+0x78>
 800a4e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	2001      	movs	r0, #1
 800a4ee:	e7a6      	b.n	800a43e <_vfiprintf_r+0xfe>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	3401      	adds	r4, #1
 800a4f4:	f04f 0c0a 	mov.w	ip, #10
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	9305      	str	r3, [sp, #20]
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a502:	3a30      	subs	r2, #48	; 0x30
 800a504:	2a09      	cmp	r2, #9
 800a506:	d903      	bls.n	800a510 <_vfiprintf_r+0x1d0>
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d0c6      	beq.n	800a49a <_vfiprintf_r+0x15a>
 800a50c:	9105      	str	r1, [sp, #20]
 800a50e:	e7c4      	b.n	800a49a <_vfiprintf_r+0x15a>
 800a510:	fb0c 2101 	mla	r1, ip, r1, r2
 800a514:	4604      	mov	r4, r0
 800a516:	2301      	movs	r3, #1
 800a518:	e7f0      	b.n	800a4fc <_vfiprintf_r+0x1bc>
 800a51a:	ab03      	add	r3, sp, #12
 800a51c:	462a      	mov	r2, r5
 800a51e:	a904      	add	r1, sp, #16
 800a520:	4630      	mov	r0, r6
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	4b11      	ldr	r3, [pc, #68]	; (800a56c <_vfiprintf_r+0x22c>)
 800a526:	f3af 8000 	nop.w
 800a52a:	4607      	mov	r7, r0
 800a52c:	1c78      	adds	r0, r7, #1
 800a52e:	d1d6      	bne.n	800a4de <_vfiprintf_r+0x19e>
 800a530:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a532:	07d9      	lsls	r1, r3, #31
 800a534:	d405      	bmi.n	800a542 <_vfiprintf_r+0x202>
 800a536:	89ab      	ldrh	r3, [r5, #12]
 800a538:	059a      	lsls	r2, r3, #22
 800a53a:	d402      	bmi.n	800a542 <_vfiprintf_r+0x202>
 800a53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a53e:	f7ff fddb 	bl	800a0f8 <__retarget_lock_release_recursive>
 800a542:	89ab      	ldrh	r3, [r5, #12]
 800a544:	065b      	lsls	r3, r3, #25
 800a546:	f53f af1d 	bmi.w	800a384 <_vfiprintf_r+0x44>
 800a54a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a54c:	e71c      	b.n	800a388 <_vfiprintf_r+0x48>
 800a54e:	ab03      	add	r3, sp, #12
 800a550:	462a      	mov	r2, r5
 800a552:	a904      	add	r1, sp, #16
 800a554:	4630      	mov	r0, r6
 800a556:	9300      	str	r3, [sp, #0]
 800a558:	4b04      	ldr	r3, [pc, #16]	; (800a56c <_vfiprintf_r+0x22c>)
 800a55a:	f000 f87d 	bl	800a658 <_printf_i>
 800a55e:	e7e4      	b.n	800a52a <_vfiprintf_r+0x1ea>
 800a560:	0800ae00 	.word	0x0800ae00
 800a564:	0800ae0a 	.word	0x0800ae0a
 800a568:	00000000 	.word	0x00000000
 800a56c:	0800a31b 	.word	0x0800a31b
 800a570:	0800ae06 	.word	0x0800ae06

0800a574 <_printf_common>:
 800a574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a578:	4616      	mov	r6, r2
 800a57a:	4699      	mov	r9, r3
 800a57c:	688a      	ldr	r2, [r1, #8]
 800a57e:	4607      	mov	r7, r0
 800a580:	690b      	ldr	r3, [r1, #16]
 800a582:	460c      	mov	r4, r1
 800a584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a588:	4293      	cmp	r3, r2
 800a58a:	bfb8      	it	lt
 800a58c:	4613      	movlt	r3, r2
 800a58e:	6033      	str	r3, [r6, #0]
 800a590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a594:	b10a      	cbz	r2, 800a59a <_printf_common+0x26>
 800a596:	3301      	adds	r3, #1
 800a598:	6033      	str	r3, [r6, #0]
 800a59a:	6823      	ldr	r3, [r4, #0]
 800a59c:	0699      	lsls	r1, r3, #26
 800a59e:	bf42      	ittt	mi
 800a5a0:	6833      	ldrmi	r3, [r6, #0]
 800a5a2:	3302      	addmi	r3, #2
 800a5a4:	6033      	strmi	r3, [r6, #0]
 800a5a6:	6825      	ldr	r5, [r4, #0]
 800a5a8:	f015 0506 	ands.w	r5, r5, #6
 800a5ac:	d106      	bne.n	800a5bc <_printf_common+0x48>
 800a5ae:	f104 0a19 	add.w	sl, r4, #25
 800a5b2:	68e3      	ldr	r3, [r4, #12]
 800a5b4:	6832      	ldr	r2, [r6, #0]
 800a5b6:	1a9b      	subs	r3, r3, r2
 800a5b8:	42ab      	cmp	r3, r5
 800a5ba:	dc2b      	bgt.n	800a614 <_printf_common+0xa0>
 800a5bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5c0:	1e13      	subs	r3, r2, #0
 800a5c2:	6822      	ldr	r2, [r4, #0]
 800a5c4:	bf18      	it	ne
 800a5c6:	2301      	movne	r3, #1
 800a5c8:	0692      	lsls	r2, r2, #26
 800a5ca:	d430      	bmi.n	800a62e <_printf_common+0xba>
 800a5cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5d0:	4649      	mov	r1, r9
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	47c0      	blx	r8
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	d023      	beq.n	800a622 <_printf_common+0xae>
 800a5da:	6823      	ldr	r3, [r4, #0]
 800a5dc:	341a      	adds	r4, #26
 800a5de:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a5e2:	f003 0306 	and.w	r3, r3, #6
 800a5e6:	2b04      	cmp	r3, #4
 800a5e8:	bf0a      	itet	eq
 800a5ea:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a5ee:	2500      	movne	r5, #0
 800a5f0:	6833      	ldreq	r3, [r6, #0]
 800a5f2:	f04f 0600 	mov.w	r6, #0
 800a5f6:	bf08      	it	eq
 800a5f8:	1aed      	subeq	r5, r5, r3
 800a5fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a5fe:	bf08      	it	eq
 800a600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a604:	4293      	cmp	r3, r2
 800a606:	bfc4      	itt	gt
 800a608:	1a9b      	subgt	r3, r3, r2
 800a60a:	18ed      	addgt	r5, r5, r3
 800a60c:	42b5      	cmp	r5, r6
 800a60e:	d11a      	bne.n	800a646 <_printf_common+0xd2>
 800a610:	2000      	movs	r0, #0
 800a612:	e008      	b.n	800a626 <_printf_common+0xb2>
 800a614:	2301      	movs	r3, #1
 800a616:	4652      	mov	r2, sl
 800a618:	4649      	mov	r1, r9
 800a61a:	4638      	mov	r0, r7
 800a61c:	47c0      	blx	r8
 800a61e:	3001      	adds	r0, #1
 800a620:	d103      	bne.n	800a62a <_printf_common+0xb6>
 800a622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62a:	3501      	adds	r5, #1
 800a62c:	e7c1      	b.n	800a5b2 <_printf_common+0x3e>
 800a62e:	18e1      	adds	r1, r4, r3
 800a630:	1c5a      	adds	r2, r3, #1
 800a632:	2030      	movs	r0, #48	; 0x30
 800a634:	3302      	adds	r3, #2
 800a636:	4422      	add	r2, r4
 800a638:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a63c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a640:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a644:	e7c2      	b.n	800a5cc <_printf_common+0x58>
 800a646:	2301      	movs	r3, #1
 800a648:	4622      	mov	r2, r4
 800a64a:	4649      	mov	r1, r9
 800a64c:	4638      	mov	r0, r7
 800a64e:	47c0      	blx	r8
 800a650:	3001      	adds	r0, #1
 800a652:	d0e6      	beq.n	800a622 <_printf_common+0xae>
 800a654:	3601      	adds	r6, #1
 800a656:	e7d9      	b.n	800a60c <_printf_common+0x98>

0800a658 <_printf_i>:
 800a658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a65c:	7e0f      	ldrb	r7, [r1, #24]
 800a65e:	4691      	mov	r9, r2
 800a660:	4680      	mov	r8, r0
 800a662:	460c      	mov	r4, r1
 800a664:	2f78      	cmp	r7, #120	; 0x78
 800a666:	469a      	mov	sl, r3
 800a668:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a66a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a66e:	d807      	bhi.n	800a680 <_printf_i+0x28>
 800a670:	2f62      	cmp	r7, #98	; 0x62
 800a672:	d80a      	bhi.n	800a68a <_printf_i+0x32>
 800a674:	2f00      	cmp	r7, #0
 800a676:	f000 80d3 	beq.w	800a820 <_printf_i+0x1c8>
 800a67a:	2f58      	cmp	r7, #88	; 0x58
 800a67c:	f000 80bf 	beq.w	800a7fe <_printf_i+0x1a6>
 800a680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a684:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a688:	e03a      	b.n	800a700 <_printf_i+0xa8>
 800a68a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a68e:	2b15      	cmp	r3, #21
 800a690:	d8f6      	bhi.n	800a680 <_printf_i+0x28>
 800a692:	a101      	add	r1, pc, #4	; (adr r1, 800a698 <_printf_i+0x40>)
 800a694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a698:	0800a6f1 	.word	0x0800a6f1
 800a69c:	0800a705 	.word	0x0800a705
 800a6a0:	0800a681 	.word	0x0800a681
 800a6a4:	0800a681 	.word	0x0800a681
 800a6a8:	0800a681 	.word	0x0800a681
 800a6ac:	0800a681 	.word	0x0800a681
 800a6b0:	0800a705 	.word	0x0800a705
 800a6b4:	0800a681 	.word	0x0800a681
 800a6b8:	0800a681 	.word	0x0800a681
 800a6bc:	0800a681 	.word	0x0800a681
 800a6c0:	0800a681 	.word	0x0800a681
 800a6c4:	0800a807 	.word	0x0800a807
 800a6c8:	0800a731 	.word	0x0800a731
 800a6cc:	0800a7c3 	.word	0x0800a7c3
 800a6d0:	0800a681 	.word	0x0800a681
 800a6d4:	0800a681 	.word	0x0800a681
 800a6d8:	0800a829 	.word	0x0800a829
 800a6dc:	0800a681 	.word	0x0800a681
 800a6e0:	0800a731 	.word	0x0800a731
 800a6e4:	0800a681 	.word	0x0800a681
 800a6e8:	0800a681 	.word	0x0800a681
 800a6ec:	0800a7cb 	.word	0x0800a7cb
 800a6f0:	682b      	ldr	r3, [r5, #0]
 800a6f2:	1d1a      	adds	r2, r3, #4
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	602a      	str	r2, [r5, #0]
 800a6f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a700:	2301      	movs	r3, #1
 800a702:	e09e      	b.n	800a842 <_printf_i+0x1ea>
 800a704:	6820      	ldr	r0, [r4, #0]
 800a706:	682b      	ldr	r3, [r5, #0]
 800a708:	0607      	lsls	r7, r0, #24
 800a70a:	f103 0104 	add.w	r1, r3, #4
 800a70e:	6029      	str	r1, [r5, #0]
 800a710:	d501      	bpl.n	800a716 <_printf_i+0xbe>
 800a712:	681e      	ldr	r6, [r3, #0]
 800a714:	e003      	b.n	800a71e <_printf_i+0xc6>
 800a716:	0646      	lsls	r6, r0, #25
 800a718:	d5fb      	bpl.n	800a712 <_printf_i+0xba>
 800a71a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a71e:	2e00      	cmp	r6, #0
 800a720:	da03      	bge.n	800a72a <_printf_i+0xd2>
 800a722:	232d      	movs	r3, #45	; 0x2d
 800a724:	4276      	negs	r6, r6
 800a726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a72a:	4859      	ldr	r0, [pc, #356]	; (800a890 <_printf_i+0x238>)
 800a72c:	230a      	movs	r3, #10
 800a72e:	e012      	b.n	800a756 <_printf_i+0xfe>
 800a730:	682b      	ldr	r3, [r5, #0]
 800a732:	6820      	ldr	r0, [r4, #0]
 800a734:	1d19      	adds	r1, r3, #4
 800a736:	6029      	str	r1, [r5, #0]
 800a738:	0605      	lsls	r5, r0, #24
 800a73a:	d501      	bpl.n	800a740 <_printf_i+0xe8>
 800a73c:	681e      	ldr	r6, [r3, #0]
 800a73e:	e002      	b.n	800a746 <_printf_i+0xee>
 800a740:	0641      	lsls	r1, r0, #25
 800a742:	d5fb      	bpl.n	800a73c <_printf_i+0xe4>
 800a744:	881e      	ldrh	r6, [r3, #0]
 800a746:	2f6f      	cmp	r7, #111	; 0x6f
 800a748:	4851      	ldr	r0, [pc, #324]	; (800a890 <_printf_i+0x238>)
 800a74a:	bf0c      	ite	eq
 800a74c:	2308      	moveq	r3, #8
 800a74e:	230a      	movne	r3, #10
 800a750:	2100      	movs	r1, #0
 800a752:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a756:	6865      	ldr	r5, [r4, #4]
 800a758:	2d00      	cmp	r5, #0
 800a75a:	60a5      	str	r5, [r4, #8]
 800a75c:	bfa2      	ittt	ge
 800a75e:	6821      	ldrge	r1, [r4, #0]
 800a760:	f021 0104 	bicge.w	r1, r1, #4
 800a764:	6021      	strge	r1, [r4, #0]
 800a766:	b90e      	cbnz	r6, 800a76c <_printf_i+0x114>
 800a768:	2d00      	cmp	r5, #0
 800a76a:	d04a      	beq.n	800a802 <_printf_i+0x1aa>
 800a76c:	4615      	mov	r5, r2
 800a76e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a772:	fb03 6711 	mls	r7, r3, r1, r6
 800a776:	5dc7      	ldrb	r7, [r0, r7]
 800a778:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a77c:	4637      	mov	r7, r6
 800a77e:	460e      	mov	r6, r1
 800a780:	42bb      	cmp	r3, r7
 800a782:	d9f4      	bls.n	800a76e <_printf_i+0x116>
 800a784:	2b08      	cmp	r3, #8
 800a786:	d10b      	bne.n	800a7a0 <_printf_i+0x148>
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	07de      	lsls	r6, r3, #31
 800a78c:	d508      	bpl.n	800a7a0 <_printf_i+0x148>
 800a78e:	6923      	ldr	r3, [r4, #16]
 800a790:	6861      	ldr	r1, [r4, #4]
 800a792:	4299      	cmp	r1, r3
 800a794:	bfde      	ittt	le
 800a796:	2330      	movle	r3, #48	; 0x30
 800a798:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a79c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a7a0:	1b52      	subs	r2, r2, r5
 800a7a2:	6122      	str	r2, [r4, #16]
 800a7a4:	464b      	mov	r3, r9
 800a7a6:	aa03      	add	r2, sp, #12
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	f8cd a000 	str.w	sl, [sp]
 800a7b0:	f7ff fee0 	bl	800a574 <_printf_common>
 800a7b4:	3001      	adds	r0, #1
 800a7b6:	d149      	bne.n	800a84c <_printf_i+0x1f4>
 800a7b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7bc:	b004      	add	sp, #16
 800a7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	f043 0320 	orr.w	r3, r3, #32
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	2778      	movs	r7, #120	; 0x78
 800a7cc:	4831      	ldr	r0, [pc, #196]	; (800a894 <_printf_i+0x23c>)
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a7d4:	061f      	lsls	r7, r3, #24
 800a7d6:	6829      	ldr	r1, [r5, #0]
 800a7d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7dc:	d402      	bmi.n	800a7e4 <_printf_i+0x18c>
 800a7de:	065f      	lsls	r7, r3, #25
 800a7e0:	bf48      	it	mi
 800a7e2:	b2b6      	uxthmi	r6, r6
 800a7e4:	07df      	lsls	r7, r3, #31
 800a7e6:	6029      	str	r1, [r5, #0]
 800a7e8:	bf44      	itt	mi
 800a7ea:	f043 0320 	orrmi.w	r3, r3, #32
 800a7ee:	6023      	strmi	r3, [r4, #0]
 800a7f0:	b91e      	cbnz	r6, 800a7fa <_printf_i+0x1a2>
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	f023 0320 	bic.w	r3, r3, #32
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	2310      	movs	r3, #16
 800a7fc:	e7a8      	b.n	800a750 <_printf_i+0xf8>
 800a7fe:	4824      	ldr	r0, [pc, #144]	; (800a890 <_printf_i+0x238>)
 800a800:	e7e5      	b.n	800a7ce <_printf_i+0x176>
 800a802:	4615      	mov	r5, r2
 800a804:	e7be      	b.n	800a784 <_printf_i+0x12c>
 800a806:	682b      	ldr	r3, [r5, #0]
 800a808:	6826      	ldr	r6, [r4, #0]
 800a80a:	1d18      	adds	r0, r3, #4
 800a80c:	6961      	ldr	r1, [r4, #20]
 800a80e:	6028      	str	r0, [r5, #0]
 800a810:	0635      	lsls	r5, r6, #24
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	d501      	bpl.n	800a81a <_printf_i+0x1c2>
 800a816:	6019      	str	r1, [r3, #0]
 800a818:	e002      	b.n	800a820 <_printf_i+0x1c8>
 800a81a:	0670      	lsls	r0, r6, #25
 800a81c:	d5fb      	bpl.n	800a816 <_printf_i+0x1be>
 800a81e:	8019      	strh	r1, [r3, #0]
 800a820:	2300      	movs	r3, #0
 800a822:	4615      	mov	r5, r2
 800a824:	6123      	str	r3, [r4, #16]
 800a826:	e7bd      	b.n	800a7a4 <_printf_i+0x14c>
 800a828:	682b      	ldr	r3, [r5, #0]
 800a82a:	2100      	movs	r1, #0
 800a82c:	1d1a      	adds	r2, r3, #4
 800a82e:	602a      	str	r2, [r5, #0]
 800a830:	681d      	ldr	r5, [r3, #0]
 800a832:	6862      	ldr	r2, [r4, #4]
 800a834:	4628      	mov	r0, r5
 800a836:	f000 f9a3 	bl	800ab80 <memchr>
 800a83a:	b108      	cbz	r0, 800a840 <_printf_i+0x1e8>
 800a83c:	1b40      	subs	r0, r0, r5
 800a83e:	6060      	str	r0, [r4, #4]
 800a840:	6863      	ldr	r3, [r4, #4]
 800a842:	6123      	str	r3, [r4, #16]
 800a844:	2300      	movs	r3, #0
 800a846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a84a:	e7ab      	b.n	800a7a4 <_printf_i+0x14c>
 800a84c:	6923      	ldr	r3, [r4, #16]
 800a84e:	462a      	mov	r2, r5
 800a850:	4649      	mov	r1, r9
 800a852:	4640      	mov	r0, r8
 800a854:	47d0      	blx	sl
 800a856:	3001      	adds	r0, #1
 800a858:	d0ae      	beq.n	800a7b8 <_printf_i+0x160>
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	079b      	lsls	r3, r3, #30
 800a85e:	d413      	bmi.n	800a888 <_printf_i+0x230>
 800a860:	68e0      	ldr	r0, [r4, #12]
 800a862:	9b03      	ldr	r3, [sp, #12]
 800a864:	4298      	cmp	r0, r3
 800a866:	bfb8      	it	lt
 800a868:	4618      	movlt	r0, r3
 800a86a:	e7a7      	b.n	800a7bc <_printf_i+0x164>
 800a86c:	2301      	movs	r3, #1
 800a86e:	4632      	mov	r2, r6
 800a870:	4649      	mov	r1, r9
 800a872:	4640      	mov	r0, r8
 800a874:	47d0      	blx	sl
 800a876:	3001      	adds	r0, #1
 800a878:	d09e      	beq.n	800a7b8 <_printf_i+0x160>
 800a87a:	3501      	adds	r5, #1
 800a87c:	68e3      	ldr	r3, [r4, #12]
 800a87e:	9903      	ldr	r1, [sp, #12]
 800a880:	1a5b      	subs	r3, r3, r1
 800a882:	42ab      	cmp	r3, r5
 800a884:	dcf2      	bgt.n	800a86c <_printf_i+0x214>
 800a886:	e7eb      	b.n	800a860 <_printf_i+0x208>
 800a888:	2500      	movs	r5, #0
 800a88a:	f104 0619 	add.w	r6, r4, #25
 800a88e:	e7f5      	b.n	800a87c <_printf_i+0x224>
 800a890:	0800ae11 	.word	0x0800ae11
 800a894:	0800ae22 	.word	0x0800ae22

0800a898 <__sflush_r>:
 800a898:	898a      	ldrh	r2, [r1, #12]
 800a89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a89e:	4605      	mov	r5, r0
 800a8a0:	0710      	lsls	r0, r2, #28
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	d458      	bmi.n	800a958 <__sflush_r+0xc0>
 800a8a6:	684b      	ldr	r3, [r1, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	dc05      	bgt.n	800a8b8 <__sflush_r+0x20>
 800a8ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	dc02      	bgt.n	800a8b8 <__sflush_r+0x20>
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8ba:	2e00      	cmp	r6, #0
 800a8bc:	d0f9      	beq.n	800a8b2 <__sflush_r+0x1a>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8c4:	682f      	ldr	r7, [r5, #0]
 800a8c6:	6a21      	ldr	r1, [r4, #32]
 800a8c8:	602b      	str	r3, [r5, #0]
 800a8ca:	d032      	beq.n	800a932 <__sflush_r+0x9a>
 800a8cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8ce:	89a3      	ldrh	r3, [r4, #12]
 800a8d0:	075a      	lsls	r2, r3, #29
 800a8d2:	d505      	bpl.n	800a8e0 <__sflush_r+0x48>
 800a8d4:	6863      	ldr	r3, [r4, #4]
 800a8d6:	1ac0      	subs	r0, r0, r3
 800a8d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8da:	b10b      	cbz	r3, 800a8e0 <__sflush_r+0x48>
 800a8dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8de:	1ac0      	subs	r0, r0, r3
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	4602      	mov	r2, r0
 800a8e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	6a21      	ldr	r1, [r4, #32]
 800a8ea:	47b0      	blx	r6
 800a8ec:	1c43      	adds	r3, r0, #1
 800a8ee:	89a3      	ldrh	r3, [r4, #12]
 800a8f0:	d106      	bne.n	800a900 <__sflush_r+0x68>
 800a8f2:	6829      	ldr	r1, [r5, #0]
 800a8f4:	291d      	cmp	r1, #29
 800a8f6:	d82b      	bhi.n	800a950 <__sflush_r+0xb8>
 800a8f8:	4a28      	ldr	r2, [pc, #160]	; (800a99c <__sflush_r+0x104>)
 800a8fa:	410a      	asrs	r2, r1
 800a8fc:	07d6      	lsls	r6, r2, #31
 800a8fe:	d427      	bmi.n	800a950 <__sflush_r+0xb8>
 800a900:	2200      	movs	r2, #0
 800a902:	04d9      	lsls	r1, r3, #19
 800a904:	6062      	str	r2, [r4, #4]
 800a906:	6922      	ldr	r2, [r4, #16]
 800a908:	6022      	str	r2, [r4, #0]
 800a90a:	d504      	bpl.n	800a916 <__sflush_r+0x7e>
 800a90c:	1c42      	adds	r2, r0, #1
 800a90e:	d101      	bne.n	800a914 <__sflush_r+0x7c>
 800a910:	682b      	ldr	r3, [r5, #0]
 800a912:	b903      	cbnz	r3, 800a916 <__sflush_r+0x7e>
 800a914:	6560      	str	r0, [r4, #84]	; 0x54
 800a916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a918:	602f      	str	r7, [r5, #0]
 800a91a:	2900      	cmp	r1, #0
 800a91c:	d0c9      	beq.n	800a8b2 <__sflush_r+0x1a>
 800a91e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a922:	4299      	cmp	r1, r3
 800a924:	d002      	beq.n	800a92c <__sflush_r+0x94>
 800a926:	4628      	mov	r0, r5
 800a928:	f7ff fbe8 	bl	800a0fc <_free_r>
 800a92c:	2000      	movs	r0, #0
 800a92e:	6360      	str	r0, [r4, #52]	; 0x34
 800a930:	e7c0      	b.n	800a8b4 <__sflush_r+0x1c>
 800a932:	2301      	movs	r3, #1
 800a934:	4628      	mov	r0, r5
 800a936:	47b0      	blx	r6
 800a938:	1c41      	adds	r1, r0, #1
 800a93a:	d1c8      	bne.n	800a8ce <__sflush_r+0x36>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d0c5      	beq.n	800a8ce <__sflush_r+0x36>
 800a942:	2b1d      	cmp	r3, #29
 800a944:	d001      	beq.n	800a94a <__sflush_r+0xb2>
 800a946:	2b16      	cmp	r3, #22
 800a948:	d101      	bne.n	800a94e <__sflush_r+0xb6>
 800a94a:	602f      	str	r7, [r5, #0]
 800a94c:	e7b1      	b.n	800a8b2 <__sflush_r+0x1a>
 800a94e:	89a3      	ldrh	r3, [r4, #12]
 800a950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a954:	81a3      	strh	r3, [r4, #12]
 800a956:	e7ad      	b.n	800a8b4 <__sflush_r+0x1c>
 800a958:	690f      	ldr	r7, [r1, #16]
 800a95a:	2f00      	cmp	r7, #0
 800a95c:	d0a9      	beq.n	800a8b2 <__sflush_r+0x1a>
 800a95e:	0793      	lsls	r3, r2, #30
 800a960:	680e      	ldr	r6, [r1, #0]
 800a962:	600f      	str	r7, [r1, #0]
 800a964:	bf0c      	ite	eq
 800a966:	694b      	ldreq	r3, [r1, #20]
 800a968:	2300      	movne	r3, #0
 800a96a:	eba6 0807 	sub.w	r8, r6, r7
 800a96e:	608b      	str	r3, [r1, #8]
 800a970:	f1b8 0f00 	cmp.w	r8, #0
 800a974:	dd9d      	ble.n	800a8b2 <__sflush_r+0x1a>
 800a976:	4643      	mov	r3, r8
 800a978:	463a      	mov	r2, r7
 800a97a:	6a21      	ldr	r1, [r4, #32]
 800a97c:	4628      	mov	r0, r5
 800a97e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a980:	47b0      	blx	r6
 800a982:	2800      	cmp	r0, #0
 800a984:	dc06      	bgt.n	800a994 <__sflush_r+0xfc>
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a990:	81a3      	strh	r3, [r4, #12]
 800a992:	e78f      	b.n	800a8b4 <__sflush_r+0x1c>
 800a994:	4407      	add	r7, r0
 800a996:	eba8 0800 	sub.w	r8, r8, r0
 800a99a:	e7e9      	b.n	800a970 <__sflush_r+0xd8>
 800a99c:	dfbffffe 	.word	0xdfbffffe

0800a9a0 <_fflush_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	690b      	ldr	r3, [r1, #16]
 800a9a4:	4605      	mov	r5, r0
 800a9a6:	460c      	mov	r4, r1
 800a9a8:	b913      	cbnz	r3, 800a9b0 <_fflush_r+0x10>
 800a9aa:	2500      	movs	r5, #0
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	bd38      	pop	{r3, r4, r5, pc}
 800a9b0:	b118      	cbz	r0, 800a9ba <_fflush_r+0x1a>
 800a9b2:	6a03      	ldr	r3, [r0, #32]
 800a9b4:	b90b      	cbnz	r3, 800a9ba <_fflush_r+0x1a>
 800a9b6:	f7ff f9a1 	bl	8009cfc <__sinit>
 800a9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d0f3      	beq.n	800a9aa <_fflush_r+0xa>
 800a9c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9c4:	07d0      	lsls	r0, r2, #31
 800a9c6:	d404      	bmi.n	800a9d2 <_fflush_r+0x32>
 800a9c8:	0599      	lsls	r1, r3, #22
 800a9ca:	d402      	bmi.n	800a9d2 <_fflush_r+0x32>
 800a9cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ce:	f7ff fb92 	bl	800a0f6 <__retarget_lock_acquire_recursive>
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	f7ff ff5f 	bl	800a898 <__sflush_r>
 800a9da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9dc:	4605      	mov	r5, r0
 800a9de:	07da      	lsls	r2, r3, #31
 800a9e0:	d4e4      	bmi.n	800a9ac <_fflush_r+0xc>
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	059b      	lsls	r3, r3, #22
 800a9e6:	d4e1      	bmi.n	800a9ac <_fflush_r+0xc>
 800a9e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ea:	f7ff fb85 	bl	800a0f8 <__retarget_lock_release_recursive>
 800a9ee:	e7dd      	b.n	800a9ac <_fflush_r+0xc>

0800a9f0 <__swhatbuf_r>:
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f8:	b096      	sub	sp, #88	; 0x58
 800a9fa:	4615      	mov	r5, r2
 800a9fc:	2900      	cmp	r1, #0
 800a9fe:	461e      	mov	r6, r3
 800aa00:	da0c      	bge.n	800aa1c <__swhatbuf_r+0x2c>
 800aa02:	89a3      	ldrh	r3, [r4, #12]
 800aa04:	2100      	movs	r1, #0
 800aa06:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa0a:	bf0c      	ite	eq
 800aa0c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aa10:	2340      	movne	r3, #64	; 0x40
 800aa12:	2000      	movs	r0, #0
 800aa14:	6031      	str	r1, [r6, #0]
 800aa16:	602b      	str	r3, [r5, #0]
 800aa18:	b016      	add	sp, #88	; 0x58
 800aa1a:	bd70      	pop	{r4, r5, r6, pc}
 800aa1c:	466a      	mov	r2, sp
 800aa1e:	f000 f87d 	bl	800ab1c <_fstat_r>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	dbed      	blt.n	800aa02 <__swhatbuf_r+0x12>
 800aa26:	9901      	ldr	r1, [sp, #4]
 800aa28:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aa2c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aa30:	4259      	negs	r1, r3
 800aa32:	4159      	adcs	r1, r3
 800aa34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa38:	e7eb      	b.n	800aa12 <__swhatbuf_r+0x22>

0800aa3a <__smakebuf_r>:
 800aa3a:	898b      	ldrh	r3, [r1, #12]
 800aa3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa3e:	079d      	lsls	r5, r3, #30
 800aa40:	4606      	mov	r6, r0
 800aa42:	460c      	mov	r4, r1
 800aa44:	d507      	bpl.n	800aa56 <__smakebuf_r+0x1c>
 800aa46:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa4a:	6023      	str	r3, [r4, #0]
 800aa4c:	6123      	str	r3, [r4, #16]
 800aa4e:	2301      	movs	r3, #1
 800aa50:	6163      	str	r3, [r4, #20]
 800aa52:	b002      	add	sp, #8
 800aa54:	bd70      	pop	{r4, r5, r6, pc}
 800aa56:	ab01      	add	r3, sp, #4
 800aa58:	466a      	mov	r2, sp
 800aa5a:	f7ff ffc9 	bl	800a9f0 <__swhatbuf_r>
 800aa5e:	9900      	ldr	r1, [sp, #0]
 800aa60:	4605      	mov	r5, r0
 800aa62:	4630      	mov	r0, r6
 800aa64:	f7ff fbb6 	bl	800a1d4 <_malloc_r>
 800aa68:	b948      	cbnz	r0, 800aa7e <__smakebuf_r+0x44>
 800aa6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa6e:	059a      	lsls	r2, r3, #22
 800aa70:	d4ef      	bmi.n	800aa52 <__smakebuf_r+0x18>
 800aa72:	f023 0303 	bic.w	r3, r3, #3
 800aa76:	f043 0302 	orr.w	r3, r3, #2
 800aa7a:	81a3      	strh	r3, [r4, #12]
 800aa7c:	e7e3      	b.n	800aa46 <__smakebuf_r+0xc>
 800aa7e:	89a3      	ldrh	r3, [r4, #12]
 800aa80:	6020      	str	r0, [r4, #0]
 800aa82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa86:	6120      	str	r0, [r4, #16]
 800aa88:	81a3      	strh	r3, [r4, #12]
 800aa8a:	9b00      	ldr	r3, [sp, #0]
 800aa8c:	6163      	str	r3, [r4, #20]
 800aa8e:	9b01      	ldr	r3, [sp, #4]
 800aa90:	b15b      	cbz	r3, 800aaaa <__smakebuf_r+0x70>
 800aa92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa96:	4630      	mov	r0, r6
 800aa98:	f000 f852 	bl	800ab40 <_isatty_r>
 800aa9c:	b128      	cbz	r0, 800aaaa <__smakebuf_r+0x70>
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	f023 0303 	bic.w	r3, r3, #3
 800aaa4:	f043 0301 	orr.w	r3, r3, #1
 800aaa8:	81a3      	strh	r3, [r4, #12]
 800aaaa:	89a3      	ldrh	r3, [r4, #12]
 800aaac:	431d      	orrs	r5, r3
 800aaae:	81a5      	strh	r5, [r4, #12]
 800aab0:	e7cf      	b.n	800aa52 <__smakebuf_r+0x18>

0800aab2 <_putc_r>:
 800aab2:	b570      	push	{r4, r5, r6, lr}
 800aab4:	460d      	mov	r5, r1
 800aab6:	4614      	mov	r4, r2
 800aab8:	4606      	mov	r6, r0
 800aaba:	b118      	cbz	r0, 800aac4 <_putc_r+0x12>
 800aabc:	6a03      	ldr	r3, [r0, #32]
 800aabe:	b90b      	cbnz	r3, 800aac4 <_putc_r+0x12>
 800aac0:	f7ff f91c 	bl	8009cfc <__sinit>
 800aac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aac6:	07d8      	lsls	r0, r3, #31
 800aac8:	d405      	bmi.n	800aad6 <_putc_r+0x24>
 800aaca:	89a3      	ldrh	r3, [r4, #12]
 800aacc:	0599      	lsls	r1, r3, #22
 800aace:	d402      	bmi.n	800aad6 <_putc_r+0x24>
 800aad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aad2:	f7ff fb10 	bl	800a0f6 <__retarget_lock_acquire_recursive>
 800aad6:	68a3      	ldr	r3, [r4, #8]
 800aad8:	3b01      	subs	r3, #1
 800aada:	2b00      	cmp	r3, #0
 800aadc:	60a3      	str	r3, [r4, #8]
 800aade:	da05      	bge.n	800aaec <_putc_r+0x3a>
 800aae0:	69a2      	ldr	r2, [r4, #24]
 800aae2:	4293      	cmp	r3, r2
 800aae4:	db12      	blt.n	800ab0c <_putc_r+0x5a>
 800aae6:	b2eb      	uxtb	r3, r5
 800aae8:	2b0a      	cmp	r3, #10
 800aaea:	d00f      	beq.n	800ab0c <_putc_r+0x5a>
 800aaec:	6823      	ldr	r3, [r4, #0]
 800aaee:	1c5a      	adds	r2, r3, #1
 800aaf0:	6022      	str	r2, [r4, #0]
 800aaf2:	701d      	strb	r5, [r3, #0]
 800aaf4:	b2ed      	uxtb	r5, r5
 800aaf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaf8:	07da      	lsls	r2, r3, #31
 800aafa:	d405      	bmi.n	800ab08 <_putc_r+0x56>
 800aafc:	89a3      	ldrh	r3, [r4, #12]
 800aafe:	059b      	lsls	r3, r3, #22
 800ab00:	d402      	bmi.n	800ab08 <_putc_r+0x56>
 800ab02:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab04:	f7ff faf8 	bl	800a0f8 <__retarget_lock_release_recursive>
 800ab08:	4628      	mov	r0, r5
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	4622      	mov	r2, r4
 800ab10:	4630      	mov	r0, r6
 800ab12:	f7ff f9e2 	bl	8009eda <__swbuf_r>
 800ab16:	4605      	mov	r5, r0
 800ab18:	e7ed      	b.n	800aaf6 <_putc_r+0x44>
	...

0800ab1c <_fstat_r>:
 800ab1c:	b538      	push	{r3, r4, r5, lr}
 800ab1e:	2300      	movs	r3, #0
 800ab20:	4d06      	ldr	r5, [pc, #24]	; (800ab3c <_fstat_r+0x20>)
 800ab22:	4604      	mov	r4, r0
 800ab24:	4608      	mov	r0, r1
 800ab26:	4611      	mov	r1, r2
 800ab28:	602b      	str	r3, [r5, #0]
 800ab2a:	f7f6 fdbf 	bl	80016ac <_fstat>
 800ab2e:	1c43      	adds	r3, r0, #1
 800ab30:	d102      	bne.n	800ab38 <_fstat_r+0x1c>
 800ab32:	682b      	ldr	r3, [r5, #0]
 800ab34:	b103      	cbz	r3, 800ab38 <_fstat_r+0x1c>
 800ab36:	6023      	str	r3, [r4, #0]
 800ab38:	bd38      	pop	{r3, r4, r5, pc}
 800ab3a:	bf00      	nop
 800ab3c:	20000304 	.word	0x20000304

0800ab40 <_isatty_r>:
 800ab40:	b538      	push	{r3, r4, r5, lr}
 800ab42:	2300      	movs	r3, #0
 800ab44:	4d05      	ldr	r5, [pc, #20]	; (800ab5c <_isatty_r+0x1c>)
 800ab46:	4604      	mov	r4, r0
 800ab48:	4608      	mov	r0, r1
 800ab4a:	602b      	str	r3, [r5, #0]
 800ab4c:	f7f6 fdbe 	bl	80016cc <_isatty>
 800ab50:	1c43      	adds	r3, r0, #1
 800ab52:	d102      	bne.n	800ab5a <_isatty_r+0x1a>
 800ab54:	682b      	ldr	r3, [r5, #0]
 800ab56:	b103      	cbz	r3, 800ab5a <_isatty_r+0x1a>
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	bd38      	pop	{r3, r4, r5, pc}
 800ab5c:	20000304 	.word	0x20000304

0800ab60 <_sbrk_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	2300      	movs	r3, #0
 800ab64:	4d05      	ldr	r5, [pc, #20]	; (800ab7c <_sbrk_r+0x1c>)
 800ab66:	4604      	mov	r4, r0
 800ab68:	4608      	mov	r0, r1
 800ab6a:	602b      	str	r3, [r5, #0]
 800ab6c:	f7f6 fdc6 	bl	80016fc <_sbrk>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d102      	bne.n	800ab7a <_sbrk_r+0x1a>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	b103      	cbz	r3, 800ab7a <_sbrk_r+0x1a>
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	20000304 	.word	0x20000304

0800ab80 <memchr>:
 800ab80:	b2c9      	uxtb	r1, r1
 800ab82:	4402      	add	r2, r0
 800ab84:	b510      	push	{r4, lr}
 800ab86:	4290      	cmp	r0, r2
 800ab88:	4603      	mov	r3, r0
 800ab8a:	d101      	bne.n	800ab90 <memchr+0x10>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	e003      	b.n	800ab98 <memchr+0x18>
 800ab90:	781c      	ldrb	r4, [r3, #0]
 800ab92:	3001      	adds	r0, #1
 800ab94:	428c      	cmp	r4, r1
 800ab96:	d1f6      	bne.n	800ab86 <memchr+0x6>
 800ab98:	4618      	mov	r0, r3
 800ab9a:	bd10      	pop	{r4, pc}

0800ab9c <_init>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	bf00      	nop
 800aba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba2:	bc08      	pop	{r3}
 800aba4:	469e      	mov	lr, r3
 800aba6:	4770      	bx	lr

0800aba8 <_fini>:
 800aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abaa:	bf00      	nop
 800abac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abae:	bc08      	pop	{r3}
 800abb0:	469e      	mov	lr, r3
 800abb2:	4770      	bx	lr
